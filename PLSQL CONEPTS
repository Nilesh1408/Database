--------------------------------------
--      PLSQL Load Tables           --
--------------------------------------

whenever oserror  exit 1;
whenever sqlerror exit 3;

set serveroutput off;

/* INICIO CONEXION COMO USUARIO PROPIETARIO */
define propietari=BAS_MEN
start $BDD_PWD/propietaris.pwd
/* FIN CONEXION COMO USUARIO PROPIETARIO */
ALTER SESSION ENABLE PARALLEL DML;

DECLARE

    CTE_Nom_Procedimiento   VARCHAR2(255)           DEFAULT 'Volcado de tablas PRO a SIM ';
    v_owner                 VARCHAR2(30)            DEFAULT 'BAS_MEN'; --Esquema que queremos copiar, las tablas las miramos en BAS_MEN.MAESTROS_BASILEA_COPIA_PRO por esquema.
    VV_MENSAJE              VARCHAR2(255);
    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    v_NumErr                NUMBER(3)               DEFAULT 1;
    In_Schema_Orig          VARCHAR2(80)            DEFAULT '';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Sentencia_Dinamica    VARCHAR2(32000)         DEFAULT '';
    v_COMPRESS              VARCHAR2(80)            DEFAULT '';
    v_COMPRESS_FOR          VARCHAR2(80)            DEFAULT '';
    v_PARTITIONED           VARCHAR2(50)            DEFAULT 'NO';
    v_KEY_PART              VARCHAR2(50)            DEFAULT '';
    PN_FECPRO               NUMBER (6,0);
    v_err_f                 VARCHAR2(255)           DEFAULT '';
    VV_PVOLCADO             BAS_MEN.CONTROL_VOLCADO.PROCES%TYPE              DEFAULT '';
    v_TABLA_EXISTE          NUMBER(3,0);
    v_NUM_COLUM_SIM         NUMBER(3,0);
    v_NUM_COLUM_PRO         NUMBER(3,0);
    v_Count                 NUMBER(12,0);
    v_INSERT_FAIL           BOOLEAN                 DEFAULT FALSE;
    VV_RETORNO              VARCHAR2(2)             DEFAULT 'OK';
    v_Count_Fail            NUMBER(12,0);
    v_Upd_true              EXCEPTION;
	
    CURSOR Cursor_Update(p_owner VARCHAR2) IS
        SELECT TABLA, OWNER, VOLCADO_SIM, PARTICIONADA
          FROM BAS_MEN.MAESTROS_BASILEA_COPIA_PRO
         WHERE OWNER = p_owner
           AND MODIFICAR_TABLA = 'S'
         order by TABLE_NUM;

    CURSOR Cursor_DCM_GRANT is
        select OWNER, TABLE_NAME 
        from ALL_TABLES
        where owner = 'BAS_MEN';

    --Funciones Internas
    FUNCTION   SF_Crea_Tabla_e_Indices ( In_Schema_Orig VARCHAR2
                                       , In_Schema_Dest VARCHAR2
                                       , In_Tabla       VARCHAR2
                                       , In_particionada VARCHAR2)
    RETURN VARCHAR2
    IS

        TABLA_NO_ENCONTRADA     EXCEPTION;
        PRAGMA EXCEPTION_INIT(TABLA_NO_ENCONTRADA, -942);

        v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
        v_Tabla_Dest            VARCHAR2(80)            DEFAULT '';
        v_Sentencia_DDL_Crea    VARCHAR2(32000)         DEFAULT '';
        v_Sentencia_Dinamica    VARCHAR2(32000)         DEFAULT '';
        v_Paso                  NUMBER                  DEFAULT 0;
        v_COMPRESS              VARCHAR2(255)           DEFAULT '';
        v_COMPRESS_FOR          VARCHAR2(255)           DEFAULT '';
        v_LOGGING              VARCHAR2(255)            DEFAULT '';
        Out_Retorno             VARCHAR2(255)           DEFAULT 'OK';

        Cursor Cursor_DML_Crea_Idx IS
            SELECT DECODE(Col.COLUMN_POSITION,1, 'CREATE '||DECODE(IDx.UNIQUENESS,'NONUNIQUE',' ',IDx.UNIQUENESS)||' INDEX '||In_Schema_Dest||'.'||IDx.INDEX_NAME
                   ||' ON '||In_Schema_Dest||'.'||In_Tabla, ',')
                   ||DECODE(Col.COLUMN_POSITION,1, '(','')||Col.COLUMN_NAME
                   ||DECODE(Col.COLUMN_POSITION, MaxCol.Max_Col, ')', '')||' PARALLEL 4' DDL_Crea_Idx
                 , Col.COLUMN_POSITION
                 , MaxCol.Max_Col
--             FROM ALL_INDEXES@BAS01PROPLUG      IDx
--                , ALL_IND_COLUMNS@BAS01PROPLUG  Col
--                , ( SELECT MIdx.OWNER, MIdx.INDEX_NAME, MAX(COLUMN_POSITION) Max_Col
--                      FROM ALL_IND_COLUMNS@BAS01PROPLUG  MCol
--                         , ALL_INDEXES@BAS01PROPLUG      MIdx
             FROM ALL_INDEXES@DBLINK_DM001SIM      IDx
                , ALL_IND_COLUMNS@DBLINK_DM001SIM  Col
                , ( SELECT MIdx.OWNER, MIdx.INDEX_NAME, MAX(COLUMN_POSITION) Max_Col
                      FROM ALL_IND_COLUMNS@DBLINK_DM001SIM  MCol
                         , ALL_INDEXES@DBLINK_DM001SIM      MIdx
                     WHERE MCol.INDEX_NAME  = MIdx.INDEX_NAME
                       AND MCol.INDEX_OWNER = MIdx.OWNER
                       AND MIdx.OWNER = In_Schema_Orig 
                       AND MIdx.TABLE_NAME = In_Tabla
                      GROUP BY MIdx.OWNER, MIdx.INDEX_NAME
                  ) MaxCol
            WHERE IDx.OWNER = In_Schema_Orig 
              AND IDX.TABLE_NAME = In_Tabla
              AND Col.INDEX_NAME    = IDx.INDEX_NAME
              AND Col.INDEX_OWNER   = IDx.OWNER
              AND MaxCol.INDEX_NAME = IDx.INDEX_NAME
              AND MaxCol.OWNER      = IDx.OWNER
            ORDER BY IDX.INDEX_NAME, IDX.UNIQUENESS, COLUMN_POSITION;

        CURSOR C_part IS
          select COMPRESSION,LOGGING 
            from ALL_TAB_PARTITIONS A
           where table_name = In_Tabla 
             AND TABLE_OWNER=In_Schema_Dest 
             AND PARTITION_POSITION = (SELECT MAX(PARTITION_POSITION) FROM ALL_TAB_PARTITIONS B where B.table_name = A.table_name AND B.TABLE_OWNER=A.TABLE_OWNER);

    BEGIN

        v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla;
        v_Tabla_Dest        := In_Schema_Dest||'.'||In_Tabla;

        v_paso := 21;
        
        -- Borrado de la tabla
        BEGIN
            v_Sentencia_dinamica := 'DROP TABLE '||v_Tabla_Dest||' CASCADE CONSTRAINTS';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
        EXCEPTION
            WHEN TABLA_NO_ENCONTRADA THEN
              -- No se genera error si no exite (ya que puede ser la 1ª vez...)
              Out_Retorno := SUBSTR('WA'||' '||SQLERRM,1, 255);

            WHEN OTHERS THEN
              RAISE;
        END;

        v_paso := 22;
        
        -- Creación de la tabla
--        v_Sentencia_dinamica := 'CREATE TABLE '||v_Tabla_Dest||' AS SELECT * FROM '||v_Tabla_Orig||'@BAS01PROPLUG WHERE ROWNUM < 1';
        v_Sentencia_dinamica := 'CREATE TABLE '||v_Tabla_Dest||' AS SELECT * FROM '||v_Tabla_Orig||'@DBLINK_DM001SIM WHERE ROWNUM < 1';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;

        v_paso := 24;
        
        -- Creación de los indices
        v_Sentencia_DDL_Crea := ' ';
        
        FOR Cur_DML_Crea_Idx IN Cursor_DML_Crea_Idx LOOP
           v_Sentencia_DDL_Crea :=  v_Sentencia_DDL_Crea||' '||Cur_DML_Crea_Idx.DDL_Crea_Idx;
           IF Cur_DML_Crea_Idx.Column_Position = Cur_DML_Crea_Idx.Max_Col THEN
              EXECUTE IMMEDIATE v_Sentencia_DDL_Crea;
              v_Sentencia_DDL_Crea := '';
           END IF;

        END LOOP;

        v_paso := 25;
        
        -- Permisos
        BEGIN
            v_Sentencia_dinamica := 'GRANT SELECT, DELETE, INSERT, UPDATE ON '||v_Tabla_Dest||' TO DCRPROP';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
  
            v_Sentencia_dinamica := 'GRANT SELECT, DELETE, INSERT, UPDATE ON '||v_Tabla_Dest||' TO BAS_MEN';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
  
            v_Sentencia_dinamica := 'GRANT SELECT, DELETE, INSERT, UPDATE ON '||v_Tabla_Dest||' TO DCRPROP_MENSUAL';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
  
            v_Sentencia_dinamica := 'GRANT SELECT, DELETE, INSERT, UPDATE ON '||v_Tabla_Dest||' TO BDD_COREPS';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
 
  
            v_Sentencia_dinamica := 'GRANT SELECT ON '||v_Tabla_Dest||' TO ROLE_BAS_MEN_READ';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
  


        EXCEPTION
            WHEN OTHERS THEN
              NULL;  --sino existe algun ROL seguimos, en PRE no esta el ultimo ROLE_DCRPROP_READ
        END;

        v_paso := 28;
        
        SELECT COMPRESSION, COMPRESS_FOR, LOGGING INTO v_COMPRESS, v_COMPRESS_FOR, v_LOGGING
--          FROM ALL_TABLES@BAS01PROPLUG
          FROM ALL_TABLES@DBLINK_DM001SIM
          WHERE OWNER = IN_SCHEMA_ORIG AND UPPER(TABLE_NAME) = UPPER(In_Tabla);

        v_Sentencia_dinamica := NULL;
        v_paso := 29;
        
        IF v_COMPRESS = 'DISABLED' THEN
           v_Sentencia_dinamica := 'ALTER TABLE '|| v_Tabla_Dest ||' MOVE NOCOMPRESS ';
        ELSE

          IF v_COMPRESS_FOR IS NOT NULL AND In_particionada <> 'YES' THEN

            IF v_COMPRESS_FOR = 'ADVANCED' THEN
              v_Sentencia_dinamica := 'ALTER TABLE '|| v_Tabla_Dest ||' MOVE ROW STORE COMPRESS ADVANCED';
            ELSIF v_COMPRESS_FOR = 'QUERY HIGH' THEN
              v_Sentencia_dinamica := 'ALTER TABLE '|| v_Tabla_Dest ||' MOVE COMPRESS FOR QUERY HIGH';
            ELSE
              v_Sentencia_dinamica := 'ALTER TABLE '|| v_Tabla_Dest ||' MOVE COMPRESS';
            END IF;

          ELSIF In_particionada = 'YES' THEN

            FOR p IN C_part LOOP

                IF p.COMPRESSION = 'DISABLED' THEN
                  v_Sentencia_dinamica := 'ALTER TABLE '|| v_Tabla_Dest ||' MOVE NOCOMPRESS';
                ELSE
                  v_Sentencia_dinamica := 'ALTER TABLE '|| v_Tabla_Dest ||' MOVE COMPRESS';
                END IF;
                v_LOGGING:=p.LOGGING;

              END LOOP;

          END IF;

        END IF;

        v_paso := 30;

        IF v_Sentencia_dinamica IS NOT NULL THEN
            IF v_LOGGING = 'NO' THEN
              v_Sentencia_dinamica := v_Sentencia_dinamica ||' NOLOGGING';
            ELSE
              v_Sentencia_dinamica := v_Sentencia_dinamica ||' LOGGING';
            END IF;

            EXECUTE IMMEDIATE(v_Sentencia_dinamica);
        END IF;

        v_paso := 31;
        --
        -- Retorno de la función
        --

        RETURN Out_Retorno;

    EXCEPTION
      WHEN OTHERS THEN
        Out_Retorno := SUBSTR(TO_CHAR(SQLCODE)||' Paso:'||v_paso||' '||v_Sentencia_DDL_Crea||' '||SQLERRM,1,255);
        RAISE_APPLICATION_ERROR(-20000, Out_Retorno);
        RAISE;

    END; --funcion creación de tabla

BEGIN
    ROLLBACK;                                                -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.
    
    CTE_Nom_Procedimiento := CTE_Nom_Procedimiento || ' - ' || v_owner;
    
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');
    COMMIT;

    BEGIN
        SELECT TO_NUMBER(substr(VALPARM,1,6))
          INTO PN_FECPRO
--          FROM BAS_MEN.PARAMETROS_PROCESO@BAS01PROPLUG
          FROM BAS_MEN.PARAMETROS_PROCESO@DBLINK_DM001SIM
         WHERE CODCSB     = '0081'
           AND CODPARM    = '0001'
           AND SECPARM    = '01';
    EXCEPTION
           WHEN OTHERS THEN
               RAISE;
    END;

    v_NumErr      := 0;
    v_Count_Fail  := 0;
    v_INSERT_FAIL := False;

    FOR C_UPD IN Cursor_Update(v_owner) LOOP
        
        v_PARTITIONED    := NULL;
        v_Tabla_Orig     := C_UPD.OWNER||'.'||C_UPD.TABLA;
        VV_PVOLCADO      := 'VOLCADO '|| v_Tabla_Orig;
        v_Count          := 0;
        VV_RETORNO       := 'OK';

        INSERT INTO BAS_MEN.CONTROL_VOLCADO (PROCES, DATA_INI, ESTAT)
        VALUES (VV_PVOLCADO, SYSDATE, 'INICIADO');
        COMMIT;

        v_NumErr := 3;

        BEGIN
             SELECT COUNT(1) INTO v_NUM_COLUM_SIM    FROM ALL_TAB_COLUMNS WHERE OWNER = C_UPD.OWNER AND TABLE_NAME = C_UPD.TABLA;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_NUM_COLUM_SIM := 0;
        END;

        BEGIN
--             SELECT COUNT(1) INTO v_NUM_COLUM_PRO    FROM ALL_TAB_COLUMNS@BAS01PROPLUG WHERE OWNER = C_UPD.OWNER AND TABLE_NAME = C_UPD.TABLA;
             SELECT COUNT(1) INTO v_NUM_COLUM_PRO    FROM ALL_TAB_COLUMNS@DBLINK_DM001SIM WHERE OWNER = C_UPD.OWNER AND TABLE_NAME = C_UPD.TABLA;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                v_NUM_COLUM_PRO := 1;
        END;

        --Comprobamos si la tablas es particionada, en este caso
        SELECT PARTITIONED 
          INTO v_PARTITIONED
--          FROM ALL_TABLES@BAS01PROPLUG
          FROM ALL_TABLES@DBLINK_DM001SIM
         WHERE OWNER = C_UPD.OWNER 
           AND UPPER(TABLE_NAME) = UPPER(C_UPD.TABLA);

        v_NumErr := 5;
        
        IF v_NUM_COLUM_SIM <> v_NUM_COLUM_PRO THEN 
            v_err_f:= SF_Crea_Tabla_e_Indices ( C_UPD.OWNER , C_UPD.OWNER, C_UPD.TABLA, v_PARTITIONED);
            
        ELSE
            v_Sentencia_dinamica := 'TRUNCATE TABLE ' || v_Tabla_Orig;
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
        
        END IF;
        
        v_NumErr := 7;

        IF C_UPD.VOLCADO_SIM = 'S' THEN

          v_NumErr := 9;
          
          IF v_PARTITIONED <> 'YES' THEN
--            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (I 4)*/ INTO '||v_Tabla_Orig||' I SELECT /*+ PARALLEL (S 4)*/ S.* FROM '||v_Tabla_Orig||'@BAS01PROPLUG S';
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (I 4)*/ INTO '||v_Tabla_Orig||' I SELECT /*+ PARALLEL (S 4)*/ S.* FROM '||v_Tabla_Orig||'@DBLINK_DM001SIM S';

          ELSE
            SELECT COLUMN_NAME 
              INTO V_KEY_PART
--              FROM ALL_PART_KEY_COLUMNS@BAS01PROPLUG
              FROM ALL_PART_KEY_COLUMNS@DBLINK_DM001SIM
             WHERE OWNER=C_UPD.OWNER AND NAME = C_UPD.TABLA;

--            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (I 4)*/ INTO '||v_Tabla_Orig||' I SELECT /*+ PARALLEL (S 4)*/ S.* FROM '||v_Tabla_Orig||'@BAS01PROPLUG S WHERE ' || v_KEY_PART ||  '=' || PN_FECPRO;
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (I 4)*/ INTO '||v_Tabla_Orig||' I SELECT /*+ PARALLEL (S 4)*/ S.* FROM '||v_Tabla_Orig||'@DBLINK_DM001SIM S WHERE ' || v_KEY_PART ||  '=' || PN_FECPRO;
          END IF;
          
          v_NumErr := 10;

          BEGIN
             EXECUTE IMMEDIATE v_Sentencia_dinamica;
             v_Count := SQL%ROWCOUNT;
          EXCEPTION
            WHEN OTHERS THEN
                v_INSERT_FAIL    := true;
                VV_RETORNO       := 'KO';
                v_Count_Fail     := v_Count_Fail + 1;
          END;
          
          COMMIT;

        END IF;
        
        v_NumErr := 11;
        
        UPDATE BAS_MEN.CONTROL_VOLCADO
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , REG_INS_OK  = v_Count
         WHERE PROCES  = VV_PVOLCADO
           AND ESTAT   = 'INICIADO';

        COMMIT;

    END LOOP;

    v_NumErr := 12;
    
--    FOR i in Cursor_DCM_GRANT loop
--        
--      v_Sentencia_dinamica := 'GRANT SELECT ON BAS_MEN.'|| i.TABLE_NAME ||'   TO  ROLE_SAS_BAS_MEN_SIM';
--      EXECUTE IMMEDIATE v_Sentencia_dinamica;
--    
--    end loop;
--    
    COMMIT;
    
    v_NumErr := 99;
    
    IF v_INSERT_FAIL = true THEN
      VV_RETORNO       := 'KO';

	    UPDATE BAS_MEN.CONTROL_PROCES
	       SET ESTAT      = 'FINALIZADO'
	        , DATA_FIN    = SYSDATE
	        , FINALITZAT  = VV_RETORNO
	        , ERROR_ORAC  = 'Validar BAS_MEN.CONTROL_VOLCADO, Hay ' || v_Count_Fail || ' Tablas con error'
	      WHERE PROCES  = CTE_Nom_Procedimiento
	        AND ESTAT   = 'INICIADO';
	    
	    COMMIT;

      RAISE   v_Upd_true;
      
    ELSE 
    	VV_RETORNO       := 'OK';

	    UPDATE BAS_MEN.CONTROL_PROCES
	       SET ESTAT      = 'FINALIZADO'
	        , DATA_FIN    = SYSDATE
	        , FINALITZAT  = VV_RETORNO
	        , ERROR_ORAC  = 'Validar BAS_MEN.CONTROL_VOLCADO, Hay ' || v_Count_Fail || ' Tablas con error'
	      WHERE PROCES  = CTE_Nom_Procedimiento
	        AND ESTAT   = 'INICIADO';
	    
	    COMMIT;

    END IF;


EXCEPTION
    WHEN v_Upd_true THEN
	     RAISE_APPLICATION_ERROR(-20001,'Error en'|| v_Tabla_Orig ||'.');
    WHEN OTHERS THEN

       VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

       ROLLBACK;

       UPDATE BAS_MEN.CONTROL_PROCES
          SET ESTAT = 'FINALIZADO',
              DATA_FIN = SYSDATE,
              FINALITZAT = 'KO',
              ERROR_ORAC = VV_MENSAJE,
              ERROR_PROG = SUBSTR('TABLA: '|| v_Tabla_Orig || ' - ' || v_Sentencia_dinamica,1,255),
              NUM_ERROR  = v_NumErr
        WHERE PROCES = CTE_Nom_Procedimiento
          AND ESTAT  = 'INICIADO';
       COMMIT;

       RAISE;
END;

/


