whenever oserror  exit 1;
whenever sqlerror exit 3;

set serveroutput off;

/* INICIO CONEXION COMO USUARIO PROPIETARIO */
define propietari=BAS_MEN
start $BDD_PWD/propietaris.pwd
/* FIN CONEXION COMO USUARIO PROPIETARIO */
ALTER SESSION ENABLE PARALLEL DML;

/***********************************/
--Comprobar DBLINK de la tabla DCR_TRABILIDAD.BS_V3_UA_ACTIVO_INMOBILIARIO y DCR_TRABILIDAD.BS_V1_UNIDAD_ECONOMICA
/***********************************/

--bka10002=====================================================================================================
Select 'bka10002' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_INSERT_BASILEA is


/* ************************************************************************************************************************************************/
/*                      Carga de la tabla Basilea a partir del Volcado de la DCRPROP_MENSUAL.BASILEA_MENSUAL_INI*/
/* ************************************************************************************************************************************************/


    --
    CTE_Non_Procedimiento       CONSTANT VARCHAR2(32)               := 'FNC_INSERT_BASILEA';
    PV_Tabla                    CONSTANT VARCHAR2(32)               := 'BASILEA';
    VV_Programa                 CONSTANT VARCHAR2(15)               := 'bka10002';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(255)                       DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    --VV_RowID                    VARCHAR2(50)                        DEFAULT 0;
    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT '';
    Pn_Fecha_Cierra             NUMBER(6)                           DEFAULT 0;
    PN_FECPRO                   NUMBER(8)                           DEFAULT 0;
  SW_MARCA_DEFAULT      VARCHAR2(4)            ;
  
   VV_IDREG        number(12);
    --
BEGIN
    --
    VV_Proces   := CTE_Non_Procedimiento;
    --
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  BEGIN
    SELECT VALPARM
  INTO SW_MARCA_DEFAULT
  FROM BAS_MEN.PARAMETROS_PROCESO
  WHERE CODCSB     = 81
      AND CODPARM    = '0002'
      AND SECPARM    = '01';
  EXCEPTION
         WHEN OTHERS THEN
             RAISE;
     END;
  --
    -- Obtención de la fecha del último cierre.
    --
    BEGIN
      SELECT TO_NUMBER(substr(VALPARM,1,6)), VALPARM
        INTO PN_Fecha_Cierra, PN_FECPRO
        FROM BAS_MEN.PARAMETROS_PROCESO
       WHERE CODCSB     = 81
         AND CODPARM    = '0001'
         AND SECPARM    = '01';
    EXCEPTION
         WHEN OTHERS THEN
             RAISE;
     END;
    --
    VV_Proces   := CTE_Non_Procedimiento||TO_CHAR(PN_Fecha_Cierra);
    --
    -- Info Inicio del proceso
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES (VV_PROCES, SYSDATE, 'INICIADO');
    --
    COMMIT;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CUADRE_PROVISIONES_ORIG');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITUL_BS_AUX');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_ACCIONES_BS_AUX');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_DERECHOS_TANTEO');

    COMMIT;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SRCRE_CUENTA');

    INSERT INTO BAS_MEN.MAESTRO_SRCRE_CUENTA
    SELECT * FROM DCRPROP_MENSUAL.MAESTRO_SRCRE_CUENTA_SAS;

    COMMIT;


  --SMG-I / 08/06/2020 MAESTRO RESETEO NDoD
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EXCLUSIONES_DOD');

    INSERT INTO BAS_MEN.MAESTRO_EXCLUSIONES_DOD
    SELECT * FROM DCRPROP_MENSUAL.MAESTRO_EXCLUSIONES_DOD_SAS;

    COMMIT;

  --SMG-F / 08/06/2020 MAESTRO RESETEO NDoD

    --
    -- Borrado de la tabla
    --
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA', 'VERDADERO');
    --
    -- Carga de Basilea a partir de la Basilea Ini
    --
    /*23/07/2016 Tarea 201606-07: El epígrafe consolidado llega directamente de bdic*/
   INSERT /*+ parallel (I_Basi 8) */ INTO BAS_MEN.BASILEA I_Basi
        ( OR_IDREG
        , OR_IDPERS
        , OR_TIPIDE
        , OR_NIFCIF
        , OR_TIPIDEIBM
        , OR_NIFCIFIBM
        , OR_TITULARITAT
        , OR_NOMPER
        , OR_PERSON
        , OR_IDECNO
        , OR_IDCNAE
        , OR_PROCED
        , OR_NUMOFI
        , OR_REFOPE
        , OR_REFOPE2
        , OR_TIPOPE
        , OR_FECOPE
        , OR_FECVTO
        , OR_VIDINI
        , OR_VIDRES
        , OR_SEGGES
        , OR_CODGAR
        , OR_TIPAVA
        , OR_TIPGAR
        , OR_CODTIT
        , OR_DESTPR
        , OR_TIPOFI
        , OR_TIPOPR
        , OR_IMPLTV
        , OR_VALTAS
        , OR_CONCED
        , OR_IDPAIS
        , OR_IDPRO1
        , OR_ENTITY
        , OR_CTAIND
        , OR_EPIIND
        , OR_DIVISA
        , OR_DISPTO
        , OR_DISBLE
        , OR_AVALES
        , OR_FUTURS
        , OR_REPOS
        , OR_AJUVAL
        , OR_FAIRVA
        , OR_DISPTOCON
        , OR_DISBLECON
        , OR_AVALESCON
        , OR_FUTURSCON
        , OR_REPOSCON
        , OR_AJUVALCON
        , OR_FAIRVACON
        , IN_RATEXTAVA2
        , IN_SEG_HIP
        , OR_CLUNIENT
        , OR_CLUNIPROD
        , OR_CLUNICONTR
        , OR_CLUNICUENT
        , OR_CLUNIOPERA
        , OR_FECCAR
        , OR_PRESTMIG
        , OR_CLAVISO
        , OR_FECALTBLO
        , OR_PROVAPL
        , OR_INDHOLDING
        , OR_VERSPREST
        , OR_COISIN
        , OR_CODPRODO
        , OR_PRODERIV
        , OR_FECPRREV
        , OR_NUMFINREG
        , OR_TIPOBJETO
        , OR_SEGFAC
        , OR_IDSITUAC
        , OR_FINABE
        , OR_DESCTAVISTA
        , IN_INDMOR
        , OR_SUBSTDA
        , IN_TIPOREG
        , OR_TIPDERIV
        , FI_ELIMI1
        , OR_NUMPERCTAV
        , OR_CNAECTAVIS
        , OR_CNOCTAVIS
        , OR_OPCVEN
        , OR_CODIGO_BIC
        , OR_CTACLI
        , IN_OPER_MIGR
        , OR_CLUNIENT_CUENT
        , OR_CLUNIPROD_CUENT
        , OR_CLUNIENT_OPERA
        , OR_CLUNIPROD_OPERA
        , IN_VTAGRU
        , IN_VTAGRU_CONS
        , IN_ACTIVO
        , IN_EXISTENCIAS
        , IN_ACTIVO_CIR
        , IN_NUMEMP
        , IN_NIFGRUPCON
        , IN_SEGMBS1
        , IN_IDGRUPO
        , IN_NOM_GRUP
        , IN_GRUP_IDPER
        , IN_GRUP_TIPIDE
        , IN_ITITSN
        , IN_FECMORA
        , IN_TIPDER
        , FI_TIPEXP
        , IN_FAIRVABO
        , IN_FAIRVABOCON
        , FI_EPICON
        , FI_PORCON
        , IN_IDCALIFIC
        , IN_IDCALIFICREL
        , OR_FECPUN0
        , OR_RATINT
        , OR_MODRAT0
        , OR_PUNT0
        , OR_SEGFIC
        , OR_SITUAC0
        , MARCA_EPA
        , FI_MESCURA
        , IN_INDCURA
        , OR_FECDEU
        , OR_NUMPERSONA
        , OR_PERSCTAVISTA -- JCVJCV ERR BORRADO CAMPOS BASILEA
        , OR_TITUCTAVISTA -- JCVJCV ERR BORRADO CAMPOS BASILEA
        , OR_SITCON
        , IN_REFINAN
        , IN_ACTIVO_CONS
        , OR_CONTRATO_GARANTIA
        , OR_IDMES
        , OR_NIFCIFAVA
        , OR_PESOW
        , OR_PUNTGRUP
        , OR_MARCONOT
        , OR_MARCONDV
        , OR_FECTAS
        , IN_NUMEMP_CONS
-- INI - 30/10/2019 - NAV - Nuevos campos NDOD
        , INDCURA
        , FECHINICURA
        , TIPODEFAULT
        , FECHINISIMP
        , FECHFINSIMP
        , IN_DEFAULT
-- FIN
        , OR_MODGRUP /* RMR 25/02/2020 Añadido nuevo campo de modelo de grupo */
        )
SELECT /*+ parallel (BMI 8) */
          OR_IDREG
        , OR_IDPERS
        , OR_TIPIDE
        , OR_NIFCIF
        , OR_TIPIDEIBM
        , OR_NIFCIFIBM
        , BMI.OR_TITULARITAT
        , OR_NOMPER
        , OR_PERSON
        , OR_IDECNO
        , OR_IDCNAE
        , OR_PROCED
        , BMI.OR_NUMOFI
        , OR_REFOPE
        , OR_REFOPE2
        , OR_TIPOPE
        , OR_FECOPE
        , OR_FECVTO
        , OR_VIDINI
        , OR_VIDRES
        , OR_SEGGES
        , OR_CODGAR
        , OR_TIPAVA
        , OR_TIPGAR
        , OR_CODTIT
        , OR_DESTPR
        , OR_TIPOFI
        , OR_TIPOPR
        , DECODE(OR_PROCED, 'LEASING' , OR_IMPLTV, OR_IMPLTV_SINPIG)
        , DECODE(OR_PROCED, 'LEASING' , OR_VALTAS, OR_VALTAS_SINPIG)
        , OR_CONCED
        , OR_IDPAIS
        , OR_IDPRO1
        , BMI.OR_ENTITY
        , BMI.OR_CTAIND
        , OR_EPIIND
        , OR_DIVISA
        , OR_DISPTO
        , OR_DISBLE
        , OR_AVALES
        , OR_FUTURS
        , OR_REPOS
        , OR_AJUVAL
        , OR_FAIRVA
        , OR_DISPTOCON
        , OR_DISBLECON
        , OR_AVALESCON
        , OR_FUTURSCON
        , OR_REPOSCON
        , OR_AJUVALCON
        , OR_FAIRVACON
        , IN_RATEXTAVA2
        , DECODE(OR_PROCED, 'LEASING' , IN_SEG_HIP, IN_SEG_HIP_SINPIG)
        , BMI.OR_CLUNIENT
        , Decode(BMI.OR_CLUNIPROD, 'DV', decode(BMI.OR_CLUNIPROD_ASOC, 'TA',BMI.OR_CLUNIPROD_ASOC,BMI.OR_CLUNIPROD), BMI.OR_CLUNIPROD)
        , BMI.OR_CLUNICONTR
        , BMI.OR_CLUNICUENT
        , BMI.OR_CLUNIOPERA
        , OR_FECCAR
        , OR_PRESTMIG
        , OR_CLAVISO
        , OR_FECALTBLO
        , OR_PROVAPL
        , OR_INDHOLDING
        , OR_VERSPREST
        , OR_COISIN
        , OR_CODPRODO
        , OR_PRODERIV
        , OR_FECPRREV
        , OR_NUMFINREG
        , OR_TIPOBJETO
        , OR_SEGFAC
        , OR_IDSITUAC
        , OR_FINABE
        , OR_DESCTAVISTA
        , CASE WHEN SW_MARCA_DEFAULT = 'CONT' THEN IN_INDMOR
               ELSE  CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN 'NO'
                    WHEN TIPREG = 'S' THEN 'SI'
                          ELSE 'NO'
                     END
          END AS IN_INDMOR
        , OR_SUBSTDA
        , IN_TIPOREG
        , OR_TIPDERIV
        , case
           when OR_CODTIT = 95 then /* NAV - 29/07/2022 - HDEV-184629 - Marcar lo que llegue con código de titulización 95 como TITAC2 */
                'TITACT2' 
           when BMI.or_entity not in (81, 8211) then BMI.fi_elimi1
         --when BMI.OR_TIPAVA IN (34,35,36) THEN 
         --   'SRCRE'   20/08/2021 RMR Para cumplir con una recomendación de Auditoría interna se deben dejar de marcar los preavales como SRCRE
           when SUBSTR(BMI.FI_ELIMI1,1,4) NOT IN ('CSIG', 'IDRE') and balan.EMPRESA is null and BMI.or_entity in (81, 8211) then 
              'NOENBALANCE'
           /* 06/07/2021 - Quitamos la marca 'OPCVENBS y OPCVEN Opciones vendidas sobre acciones BS' para que se lleven al proceso de SACCR
           when BMI.OR_PRODERIV IN ('51409', '51420','00016','00019','00122')
            --AND BMI.OR_OPCVEN = 'VENPUT'
              AND BMI.OR_TIPDERIV = 'NQ0'
              AND SUBSTR(BMI.OR_EPIIND,1,5) = '03003' then  'OPCVENBS'  --Opciones vendidas sobre acciones BS.
           when ( BMI.OR_PRODERIV IN ('51406', '51407', '51408', '51410', '51411', '51413', '51417', '51418')
                OR (BMI.OR_PRODERIV IN ('51409', '51420','00016','00019','00122') 
                --AND BMI.OR_OPCVEN <> 'VENPUT'
                     )
                 )
              AND SUBSTR(BMI.OR_EPIIND,1,5) = '03003' then  'OPCVEN' --Opciones vendidas.
            */
           when BMI.OR_ENTITY IN (81,185,8211,42)
            AND BMI.OR_CTAIND in (330600, 330100) then
                'FONINV'                 --Fondos de inversión referenciados con garantíBMI. se añade cuenta 330600 x petición R.Vilar (24/01/13)
           when BMI.OR_CLUNICONTR = 770005696
            AND BMI.OR_PROCED = 'FACTORING' then
                'SRCRE'                  -- Eliminación de contrato de factoring que no llega como BS covering (COFACE).
           when (BMI.OR_PROCED = 'ES-NEGDOC' OR BMI.OR_TIPOPE = 'CD')
            AND SUBSTR(LPAD(TO_CHAR(BMI.OR_REFOPE), 15, '0'), 7, 2) IN (71, 62) AND SUBSTR(BMI.FI_ELIMI1,1,4) NOT IN ('CSIG', 'IDRE') then
                'SRCRE'                  --Eliminación de las remesas de créditos documentarios.
           when SUBSTR(BMI.OR_EPIIND,1,2) = '01'
            AND BMI.OR_FECVTO < TO_NUMBER(TO_CHAR(TO_DATE(PN_FECPRO, 'YYYYMMDD') - 548, 'YYYYMMDD'))
            AND (BMI.OR_PROCED IN ('ES-NEGDOC','CREDOFIC') OR BMI.OR_TIPOPE = 'CD')
            AND SUBSTR(BMI.FI_ELIMI1,1,4) NOT IN ('CSIG', 'IDRE') then
                'SRCRE'                  --Eliminación de créditos documentarios del activo.
           when BMI.OR_PRODERIV IN ('55551','99996')
            AND SUBSTR(BMI.OR_EPIIND,1,2) = '03' then
                'SRCRE'                  -- Derivados Implícitos --
           when BMI.OR_PROCED = 'FORFAITING'
            AND BMI.OR_NIFCIF = 'A08000143' then
                'SRCRE'                  --Forfaiting
           when SUBSTR(BMI.OR_EPIIND,1,7) in ('0100700', '0101000', '0200600', '0201100', '0100900') then /*RMR 14/04/2020 Añadido epigrafe 0100900 */
                'FAIRVA'                 /*Eliminación registros contabilización Fair Value del activo por tratarse junto con el registro de nominal contabilizado en cuentas de orden*/
           when (SUBSTR(BMI.OR_EPIIND,1,13) = '0300500300200'
             OR BMI.OR_CTAIND IN (612600, 612700)) then
                'TITACT'                 /*Eliminación activos titulizados doblemente contabilizados (Activos titulizados mantenidos integramente en balance).*/
     --SMG 09/10/2019 - NUEVA TITULIZACION I
           when (SUBSTR(BMI.OR_EPIIND,1,13) = '0300500300100' and OR_CODTIT in (89, 28, 30, 73, 79, 85)) then  /* RMR 09/07/2020 Añadidas titulizaciones a excluir */
                'TITACT2'                 /*Eliminación activos titulizados incluyendo los que conllevan transferencia de riesgo (se eliminan de balance)*/
     --SMG 09/10/2019 - NUEVA TITULIZACION F
           when BMI.or_cluniprod_cuent = 'NEG'
            AND SUBSTR(BMI.OR_EPIIND,1,5) in ('01005' , '03002', '02007')
            AND SUBSTR(BMI.FI_ELIMI1,1,4) NOT IN ('CSIG', 'IDRE') then
                'RFNEG'                  /*RENTA FIJA NEGOCIACIÓN, SE MARCA POR EL MAESTRO ENVIADO POR PILAR SALAS.*/
           when (SUBSTR(BMI.OR_EPIIND,1,5) IN ('01006', '01012') AND SUBSTR(BMI.FI_ELIMI1,1,4) NOT IN ('CSIG', 'IDRE')) /*Cartera disponible para la venta y Cartera de participaciones tratada en entorno distribuido.*/
                              OR (SUBSTR(BMI.FI_EPICON,1,9) = '010030102' AND substr(BMI.FI_EPICON,10,2) IN ('05','06','07','08') and substr(BMI.FI_EPICON,12,2) in ('01','02','03','04'))
                              OR (substr(BMI.fi_epicon,1,7) in ('0100402','0100501') and substr(BMI.fi_epicon,8,2) in ('05','06','07','08') and substr(BMI.fi_epicon,10,2) in ('01','02','03','04')) /* Activos financieros para negociar, a valor razonable con cambios en otro resultados global y coste amortizado - EEFF Residentes, EEFF no residentes, otros sectores residentes, otros sectores no residentes*/
                              OR  substr(BMI.fi_epicon,1,13)= '0100301020401' /*Activos financieros a valor razonable con cambios en resultados - ICO*/
                              OR  substr(BMI.fi_epicon,1,11) in ('01002030401','01004020401','01005010401')THEN  /* Activos financieros para negociar, a valor razonable con cambios en otros resultados global y coste amortizado - ICO*/
                              'EQUITY' --Epígrafes Manuales.
           when SRCECtaI.OR_CTAIND IS NOT NULL THEN 'SRCRE'
           when BMI.or_nifcif = 'A64907306' and BMI.fi_epicon = '030020500000000000000000000000' then 'EQUITY'  /* FMRR 12/04/2021 Emisión de acciones de CELLNEXT  */
           else
                BMI.fi_elimi1
           end as fi_elimi1
        , OR_NUMPERCTAV
        , OR_CNAECTAVIS
        , OR_CNOCTAVIS
        , OR_OPCVEN
        , OR_CODIGO_BIC
        , BMI.OR_CTACLI
        , IN_OPER_MIGR
        , BMI.OR_CLUNIENT_CUENT
        , BMI.OR_CLUNIPROD_CUENT
        , BMI.OR_CLUNIENT_OPERA
        , BMI.OR_CLUNIPROD_OPERA
        , NVL(VENTAS_IND,99)
        , NVL(VENTAS_CON,99)
        , NVL(ACTIVO_IND,0)
        , NVL(EXISTENCIAS,99)
        , NVL(ACTIVO_CIR,0)
        , NVL(NUM_EMPLEADOS_IND,0)
        , CIF_MATRIZ
        , DECODE( UPPER(OBSERVACIONES), 'PLAN=10', '501', '?')
        , ID_GRUPO
        , NOMBRE_GRUPO
        , ID_NIF_GRUPO
        , ID_TIPIDE_GRUPO
        , IN_ITITSN
      /*, CASE WHEN SW_MARCA_DEFAULT = 'CONT' THEN  IN_FECMORA
               ELSE FECHINISIMP
          END AS IN_FECMORA*/
        /* RMR 01/06/2020 Cambios requeridos en la fecha de mora en caso de NDoD para se consistente con Calibración */
        , CASE WHEN SW_MARCA_DEFAULT = 'CONT' THEN IN_FECMORA
               ELSE
                   CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN '?'
                    WHEN FECHINISIMP = '?' THEN FECHINISIMP /* Si la fecha de NDoD viene sin informar, no se informa */
                        WHEN IN_FECMORA  = '?' THEN FECHINISIMP /* Si la fecha de NDoD viene informada pero la de contabilidad no, se informa la fecha de NDoD */
                        /* Si ambas fechas vienen informadas, comprobamos si la nueva es 2018-01-02, moroso según contabilidad y si la fecha de entrada en mora de contabilidad usamos la fecha de contabilidad */
                        WHEN to_date(FECHINISIMP,'YYYY-MM-DD') = to_date('2018-01-02','YYYY-MM-DD') AND IN_INDMOR = 'SI' AND to_date(IN_FECMORA,'YYYY-MM-DD') < to_date('2018-01-02','YYYY-MM-DD') THEN IN_FECMORA
                        ELSE FECHINISIMP /* Para el resto de casos, usamos la fecha de entrada en mora de la NDoD */
                   END
          END AS IN_FECMORA
        , nvl(IN_TIPDER, '?')
        , nvl(FI_TIPEXP, '?')
        , nvl(IN_FAIRVABO, 0)
        , nvl(IN_FAIRVABOCON, 0)
        , OR_CODEPINUE
        , nvl(FI_PORCON,1)
        , IN_IDCALIFIC
        , IN_IDCALIFICREL
        , OR_FECPUN0
        , OR_RATINT
        , OR_MODRAT0
        , OR_PUNT0
        , OR_SEGFIC
        , OR_SITUAC0
        , DECODE(MARCA_EPA, 'CAM_EPA', '01', 'BMN_EPA', '02', 'NO')
        /* Borja 28/04/2020 NDOD- INI
        , 0   /* FI_MESCURA - Se inicializa a sus valores por defecto. Se marcarán a partir del Maestro Periodo Cura (BAS_MEN.FNC_Info_Marca_CURA)
        , '?' /* IN_INDCURA - Se inicializa a sus valores por defecto. Se marcarán a partir del Maestro Periodo Cura (BAS_MEN.FNC_Info_Marca_CURA)*/

        /*Si es un pase de CONTabilidad, este campo se inicializa a 0 y se informa en  FNC_Info_Marca_CURA. Si es de NDOD se adapta el campo FECHINICURA*/
        , CASE WHEN SW_MARCA_DEFAULT = 'CONT' THEN 0
               /* RMR 01/06/2020 Añadidos 3 meses a la fecha para no contar como cura el Probation period */
               ELSE CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN 0
                         WHEN FECHINICURA IS NOT NULL AND FECHINICURA <>'?' THEN to_number(to_char(add_months(to_date(FECHINICURA,'YYYY-MM-DD'), -3),'YYYYMM'))
                         ELSE 0
                    END
          END AS FI_MESCURA
         /*Si es un pase de CONTabilidad, este campo se inicializa a 0 y se informa en  FNC_Info_Marca_CURA. Si es de NDOD se adapta el campo FECHINICURA*/
        , CASE WHEN SW_MARCA_DEFAULT = 'CONT' THEN '?'
               ELSE  CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN '?'
                          WHEN FECHINICURA IS NOT NULL AND FECHINICURA <> '?' THEN 'M'
                          ELSE '?'
                     END
          END AS IN_INDCURA
        /* Borja 28/04/2020 NDOD- FIN */
        , OR_FECDEU
        , OR_NUMPERSONA
        , OR_PERSCTAVISTA -- JCVJCV ERR BORRADO CAMPOS BASILEA
        , OR_TITUCTAVISTA -- JCVJCV ERR BORRADO CAMPOS BASILEA
        , SIT_CON
        , CASE
            WHEN OR_REINST IN ('3', '4', '5') THEN 1
            ELSE                                   0
          END
        , CASE WHEN NVL(ACTIVO_CON,0) <> 0 THEN ACTIVO_CON
               ELSE NVL(ACTIVO_IND,0)
          END AS IN_ACTIVO_CONS
        , OR_CONTRATO_GARANTIA
        , OR_IDMES
        , OR_NIFCIFAVA
        , OR_PESOW
        , OR_PUNTGRUP
        , OR_MARCONOT
        , OR_MARCONDV
        , DECODE(OR_PROCED, 'LEASING' , OR_FECTAS, OR_FECTAS_SINPIG)
        , NVL(NUM_EMPLEADOS_CON,0)
-- INI - 30/10/2019 - NAV - Nuevos campos NDOD
        , CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN 'N'
               ELSE  BMI.INDCURA
          END AS INDCURA
        , CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN '?'
               ELSE  BMI.FECHINICURA
          END AS FECHINICURA
        , CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN '00'
               ELSE  BMI.TIPODEFAULT
          END AS TIPODEFAULT
        , CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN '?'
               ELSE  BMI.FECHINISIMP
          END AS FECHINISIMP
        , CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN '?'
               ELSE  BMI.FECHFINSIMP
          END AS FECHFINSIMP
        , CASE WHEN dodtit.OR_TITULARITAT > 0 OR dodtri.OR_CLUNICONTR > 0 OR dodofe.OR_NUMOFI > 0 THEN 'N'
               ELSE  BMI.TIPREG
          END AS IN_DEFAULT
        , BMI.OR_MODGRUP /* RMR 26/02/2020 Añadido campo de modelo de grupo */
-- FIN
    FROM DCRPROP_MENSUAL.BASILEA_MENSUAL_INI BMI
       /*, DCRPROP_MENSUAL.CUENTAS_EPA_DESCARTAR epa -- Cuentas reclasificación de la epa.*/ --RBR 08/10/2021 Epa deja de estar en vigor.
       , (select distinct EMPRESA, COMPTE from BAS_MEN.BALANCE_INDIVIDUAL BInd) balan
       , BAS_MEN.MAESTRO_SRCRE_CUENTA  SRCECtaI
       , BAS_MEN.MAESTRO_EXCLUSIONES_DOD dodtri
       , BAS_MEN.MAESTRO_EXCLUSIONES_DOD  dodofe
       , BAS_MEN.MAESTRO_EXCLUSIONES_DOD  dodtit
   WHERE BMI.OR_IDMES                    = PN_Fecha_Cierra
     /*
   AND bmi.or_entity                      = epa.or_entity(+)
     AND bmi.or_ctaind                      = epa.OR_CTAIND(+)
     AND epa.or_ctaind  IS NULL*/
     AND BMI.OR_ENTITY           = SRCECtaI.OR_ENTITY (+)
     AND BMI.OR_CTAIND           = SRCECtaI.OR_CTAIND (+)
     AND BMI.OR_ENTITY           = balan.EMPRESA(+)
     AND BMI.OR_CTAIND           = balan.COMPTE(+)
     AND BMI.OR_CLUNIENT       = dodtri.OR_CLUNIENT(+)
     AND BMI.OR_CLUNIPROD        = dodtri.OR_CLUNIPROD(+)
     AND BMI.OR_CLUNICONTR       = dodtri.OR_CLUNICONTR(+)
     AND BMI.OR_CLUNIENT_CUENT   = dodtri.OR_CLUNIENT_CUENT(+)
     AND BMI.OR_CLUNIPROD_CUENT  = dodtri.OR_CLUNIPROD_CUENT(+)
     AND BMI.OR_CLUNICUENT       = dodtri.OR_CLUNICUENT(+)
     AND BMI.OR_CLUNIENT_OPERA   = dodtri.OR_CLUNIENT_OPERA(+)
     AND BMI.OR_CLUNIPROD_OPERA  = dodtri.OR_CLUNIPROD_OPERA(+)
     AND BMI.OR_CLUNIOPERA       = dodtri.OR_CLUNIOPERA(+)
     AND BMI.OR_CTACLI           = dodofe.OR_CTACLI(+)
     AND BMI.OR_NUMOFI           = dodofe.OR_NUMOFI(+)
     AND BMI.OR_TITULARITAT      = dodtit.OR_TITULARITAT(+);

    --
    -- Obt. Del nº de registros insertados (NOTA: Se ha de realizar antes del COMMIT, sino se pierde.
    --
    VN_COUNT    := SQL%ROWCOUNT;
    COMMIT;
    --
    -- Info. en el control del proceso del fin correcto (OK) de este
    --
    UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
       SET ESTAT       = 'FINALIZADO'
        , DATA_FIN    = SYSDATE
        , FINALITZAT  = 'OK'
        , REG_INS_OK  = VN_Count
      WHERE PROCES  = VV_Proces
        AND ESTAT   = 'INICIADO';
     COMMIT;
    --
EXCEPTION
    WHEN OTHERS THEN
        --
        -- Info. en el control del proceso del fin erróneo (KO) de este
        --
         VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT       = 'FINALIZADO',
                DATA_FIN    = SYSDATE,
                FINALITZAT  = 'KO',
                ERROR_ORAC  = VV_Mensaje,
                ERROR_PROG  = SUBSTR(VN_Count||'* NUMERR: '||VN_NumErr,1,255),
                NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_PROCES
            AND ESTAT   = 'INICIADO';

        COMMIT;
        --
        RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_INSERT_BASILEA';


create or replace PROCEDURE   BAS_MEN.BASI_INSERT_BASILEA IS
--
BEGIN

  --RAISE_APPLICATION_ERROR(-20000, 'Pendiente de pasar la MENSUAL INl');

  --
  -- Carga de basilea a partir de basilea inicial
  --
  BAS_MEN.FNC_INSERT_BASILEA;
  --
  COMMIT;
  --

END;

/


--bka10003=====================================================================================================
Select 'bka10003 - BASILEA_INI' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_INSERT_BASILEA_INI
--
--  Carga de la Basilea_INI a partir del Volcado de la DCRPROP_MENSUAL.BASILEA_MENSUAL_INI
--
IS

    CTE_Non_Procedimiento       CONSTANT VARCHAR2(32)               := 'FNC_INSERT_BASILEA_INI';
    PV_Tabla                    CONSTANT VARCHAR2(32)               := 'BASILEA_INI';
    VV_Programa                 CONSTANT VARCHAR2(15)               := 'bka10003';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(255)                       DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    --VV_RowID                    VARCHAR2(50)                        DEFAULT 0;
    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT '';
    PN_FECPRO                   NUMBER(8)                           DEFAULT 0;
    Pn_Fecha_Cierra NUMBER(6)   DEFAULT 0;

    VV_IDREG        number(12);
    --
BEGIN
    --
    VV_Proces   := CTE_Non_Procedimiento;
    --
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
    --
    BEGIN
      SELECT TO_NUMBER(substr(VALPARM,1,6))
        INTO PN_Fecha_Cierra
        FROM BAS_MEN.PARAMETROS_PROCESO
       WHERE CODCSB     = 81
         AND CODPARM    = '0001'
         AND SECPARM    = '01';
    EXCEPTION
         WHEN OTHERS THEN
             Pn_Fecha_Cierra := 0;
     END;
    --
    VV_Proces   := CTE_Non_Procedimiento|| ' - ' || TO_CHAR(PN_Fecha_Cierra);
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES (VV_Proces, SYSDATE, 'INICIADO');
    --
    COMMIT;
    --
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_INI', 'VERDADERO');
    --
    INSERT /*+ parallel (I_Bi 4) */ INTO BAS_MEN.BASILEA_INI I_BI
    SELECT /*+ parallel (BMI 4) */  BMI.*
      FROM DCRPROP_MENSUAL.BASILEA_MENSUAL_INI BMI
     WHERE BMI.OR_IDMES   = PN_Fecha_Cierra
       -- Cuentas reclasificación de la epa.
       AND (BMI.OR_ENTITY,BMI.OR_CTAIND) NOT IN (SELECT OR_ENTITY,OR_CTAIND FROM DCRPROP_MENSUAL.CUENTAS_EPA_DESCARTAR);
    --
    -- Obt. Del nº de registros insertados (NOTA: Se ha de realizar antes del COMMIT, sino se pierde.
    --
    VN_COUNT    := SQL%ROWCOUNT;
    COMMIT;
    --
    -- Info. en el control del proceso del fin correcto (OK) de este
    --
    UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = 'OK'
         , REG_INS_OK  = VN_Count
      WHERE PROCES  = VV_Proces
        AND ESTAT   = 'INICIADO';
     COMMIT;
     --
EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización de la tabla de control
        --
         VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
         --
         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT       = 'FINALIZADO',
                DATA_FIN    = SYSDATE,
                FINALITZAT  = 'KO',
                ERROR_ORAC  = VV_MENSAJE,
                ERROR_PROG  = SUBSTR(VN_Count||'* NUMERR: '||VN_NumErr,1,255),
                NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_PROCES
            AND ESTAT   = 'INICIADO';
        --
        COMMIT;
        --
        RAISE;
        --
END;

/

create or replace PROCEDURE      BAS_MEN.BASI_INSERT_BASILEA_INI IS

    MES_CIERRE number(8);
    DIA_ACTUAL number(2);

BEGIN

  --RAISE_APPLICATION_ERROR(-20000, 'Pendiente de pasar la MENSUAL INl');


  MES_CIERRE := to_char(last_day(add_months(sysdate, - 1)), 'YYYYMMDD');
    --
    -- Actualización de la fecha de cierre trimestral actual
    --

  --06/09/2021-I RBR --Solo actualizamos si el día es >=10 para evitar problemas con reprocesos de meses anteriores
  SELECT EXTRACT(DAY FROM sysdate) INTO DIA_ACTUAL FROM dual;

  IF DIA_ACTUAL >= 8 THEN
  --06/09/2021-F

    update BAS_MEN.parametros_proceso
       set valparm = to_char(last_day(add_months(sysdate, - 1)), 'YYYYMMDD'),
           CODUSUARIO = 'BKA10003',
           TMULTMOD = sysdate
     where codcsb  = '0081'
       and codparm = '0001'
       and secparm = '01';
    --
    commit;
    --
    -- Actualización de la fecha del cierre TRIMESTRAL anterior
    --
    update BAS_MEN.parametros_proceso
       set valparm = case
                       when months_between(to_date(MES_CIERRE,'YYYYMMDD'),to_date(valparm,'YYYYMMDD')) >= 4 then
                         to_char(add_months(to_date(valparm,'YYYYMMDD'),+3),'YYYYMMDD')
                       else
                         valparm
                       end,
                     CODUSUARIO = 'BKA10003',
                     TMULTMOD = sysdate
     where codcsb  = '0081'
       and codparm = '0001'
       and secparm = '02';
    --
    commit;
    --
    -- Actualización de la fecha de cierre mensual actual
    --
    update BAS_MEN.parametros_proceso
       set valparm = to_char(last_day(add_months(sysdate, - 1)), 'YYYYMMDD'),
           CODUSUARIO = 'BKA10003',
           TMULTMOD = sysdate
     where codcsb  = '0081'
       and codparm = '0001'
       and secparm = '03';
    --
    commit;

    -- Actualización de la fecha del cierre mensual anterior
    --
    update BAS_MEN.parametros_proceso
       set valparm = to_char(last_day(add_months(sysdate, - 2)), 'YYYYMMDD'),
           CODUSUARIO = 'BKA10003',
           TMULTMOD = sysdate
     where codcsb  = '0081'
       and codparm = '0001'
       and secparm = '04';
    --
    commit;
--06/09/2021-I
  END IF;
--06/09/2021-F

    /*-- 11/05/2020 RMR Comentado ya que pisaba el valor del nueo parametro SW_MARCA_DEFAULT para hacer el proceos bajo los criterior de la NDoD o de CONTabilidad
    --  Actualización de los parametros de rearranque
    --
    update BAS_MEN.parametros_proceso
       set valparm = 'NO'
     where codcsb  = '0081'
       and codparm = '0002';
    --
    commit; */
    --
    -- Permisos a la tabla
    --
    BAS_MEN.PERMISOS_TABLA ('BAS_MEN.BASILEA_INI ', 'BASPROD', 'TODOS');
    BAS_MEN.PERMISOS_TABLA ('BAS_MEN.BASILEA_INI ', 'ROLE_BASPROD', 'TODOS');
    BAS_MEN.PERMISOS_TABLA ('BAS_MEN.BASILEA_INI ', 'DCRPROP', 'SELECT');
    BAS_MEN.PERMISOS_TABLA ('BAS_MEN.BASILEA_INI ', 'ROLE_BAS_MEN_READ', 'SELECT');
    BAS_MEN.PERMISOS_TABLA ('BAS_MEN.BASILEA_INI ', 'ROLE_SAS_MENSUAL', 'SELECT');
    --
    -- Ejecución del procedure que ejecuta el INSERT ( carga de basilea inicial a partir de basilea mensual inicial).
    --
    --
    BAS_MEN.FNC_INSERT_BASILEA_INI;
    --
    COMMIT;
    --

END;

/

--bka00002=====================================================================================================
Select 'bka00002' As Compilando from dual;

create or replace PROCEDURE BAS_MEN.UPDATE_PROCESO (PROCESO IN VARCHAR2)
IS

/**************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA       */
/**************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA                */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA                         */
/*      TABLAS de updates de usuario  en Basilea:                                                 */
/*                                        FILTRO: DCRPROP_MENSUAL.UPDATE_BASILEA_FILTRO_XX_SAS    */
/*                                      SEGMENTO: DCRPROP_MENSUAL.UPDATE_BASILEA_SEGMENTO_XX_SAS  */
/*                                           EAD: DCRPROP_MENSUAL.UPDATE_BASILEA_EAD_XX_SAS       */
/*                                       PRE_MET: DCRPROP_MENSUAL.UPDATE_BASILEA_PRE_MET_XX_SAS   */
/**************************************************************************************************/
    --
    -- Variables del proceso principal.
    --
    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(256)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT '';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';

    ncount                  NUMBER                  DEFAULT 0;
    TABLA_SAS               VARCHAR2(30)            DEFAULT '';

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
          where EN_PROCESO = PROCESO
        order by TABLA;

BEGIN

    v_NumErr := 0;

    ROLLBACK;
    -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.


    FOR C_UPD IN Cursor_Update LOOP
        --
        In_Tabla_Orig := C_UPD.TABLA;
        --
        Cte_Proces          := 'UPDATE PROCESO Tabla_Orig: '|| In_Tabla_Orig;
        v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
        --
        -- Información de Inicio en Control del Proceso.
        --
        v_NumErr := 1;
        INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES (Cte_Proces, SYSDATE, 'INICIADO');
        COMMIT;

        --
        -- Insersión en tabla de descartes
        --
        v_Numerr := 2;
        v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA SELECT /*+ FULL(A) PARALLEL (A 4)*/ ''' ||  v_Tabla_Orig   || ''' ,sysdate, A.*  FROM '||v_Tabla_Base||' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Eliminación de registros en Basilea.
        --
        v_Numerr := 3;
        --
        v_Sentencia_dinamica := 'DELETE /*+ PARALLEL (A 8)*/ ' || v_Tabla_Base || ' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Insersión de registros en Basilea.
        --
        v_Numerr := 4;
        v_Sentencia_dinamica := 'INSERT /*+ FULL(A) PARALLEL (A 8)*/ INTO ' ||v_Tabla_Base || ' A SELECT * FROM ' || v_Tabla_Orig;
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        v_RegIns := SQL%ROWCOUNT;
        --
        COMMIT;
        --
        -- Insercción de registros de la SAS origen en tabla final.
        --
        v_Numerr := 7;
        --
        v_Sentencia_dinamica := 'INSERT /* + APPEND */ INTO BAS_MEN.UPDATES_BASILEA SELECT /*+ PARALLEL (A 8) */ ''' ||  v_Tabla_Orig   || ''' AS TABLA_ORIGEN ,sysdate, A.*  FROM '||v_Tabla_Base||' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Actualización del Control del Proceso.
        --
        v_Numerr := 10;
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
           , DATA_FIN    = SYSDATE
           , FINALITZAT  = v_Fin_Proc
           , REG_INS_OK  = v_RegIns
           , ERROR_ORAC  = v_Mensaje_Err
         WHERE PROCES  = Cte_Proces
           AND ESTAT   = 'INICIADO';
        COMMIT;
        --
    END LOOP;

 EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        --
        v_Fin_Proc   := 'KO';
        v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);
        --
        --      Actualización del Control del Proceso.
        --
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = v_Fin_Proc
             , ERROR_ORAC  = v_Mensaje_Err
             , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
             , NUM_ERROR   = v_NumErr
          WHERE PROCES  = Cte_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;
        RAISE;
END;

/
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_AUTOMATIZACION_UPDATES  IS

/* UPDATE 01. CORREGIMOS EPIGRAFES INDIVIDUAL Y CONSOLIDADO Y CUENTA INDIVIDUAL DE DERIVADOS DE COBERTURA CLASIFICADOS INCORRECTAMENTE COMO DE NEGOCIACION */
/* UPDATE 02. INFORMAMOS A CERO EL SALDO DE LAS COMPRAS A PLAZO DE OR_CTAIND = 9225000500, PORQUE SON REPOS FORWARD TOTALMENTE COLATERALIZADAS */
/* UPDATE 03. MODIFICAMOS LOS CAMPOS IN_METODE Y OR_NIFCIFAVA DE REGISTROS DE GRIFOLS WORLDWIDE PARA QUE SE ASIGNE LA GARANTIA Y LA PD DEL GRUPO (LA MÍNIMA) */
/* UPDATE 04. MARCAMOS LA TITULARIDAD DE CORPORACIÓN HABANOS COMO VIGENTE (VENÍA COMO CURADA, PORQUE TENÍA UNA PÓLIZA CON GARANTÍA DE ALTADIS) */
/* UPDATE 06. Marcamos como sin riesgo de crédito el factoring de la multinacional PUNTO FA, SL., porque ya estamos cubriendo el aseguramiento de la carta de crédito */
/* UPDATE 07. ASIGNAMOS IN_SRATIN = 'BLQR' A EMPRESAS CON OR_PUNT0 = 0 U OR_PUNTGRUP = 0 PARA QUE SE LES CALCULE LA PD DE BLOQUEO */
/* UPDATE 08. Se corrige el nif de grupo de la filial 'EDP FINANCE BV' y la 'ARCELOR MITTAL'*/


      VV_NOM_PROCESO      BAS_MEN.CONTROL_PROCES.PROCES%TYPE;
      VN_NUMERR           NUMBER(3);
      VV_MENSAJE_ERR      VARCHAR2(255)     DEFAULT 'KO';
      VV_RETORNO          VARCHAR2(2)       DEFAULT 'OK';

      v_fecha_proceso     NUMBER(6);
      v_version           NUMBER(2);
      v_Mes_ver           NUMBER(6);
      vv_count_reg        NUMBER(10);


BEGIN
      execute IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

      -- Información en el control de LOG (Tabla CONTROL_PROCESO) del inicio del proceso
      VV_NOM_PROCESO := 'FNC_AUTOMATIZACION_UPDATES';

      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO, 'INICIADO');

      COMMIT;
      VN_NUMERR := 1;

      SELECT TO_NUMBER(SUBSTR(VALPARM,1,6))
        INTO v_fecha_proceso
        FROM BAS_MEN.parametros_proceso
       WHERE codcsb = '0081'
         AND codparm = '0001'
         AND secparm = '01';

      VN_NUMERR := 2;

/* En UPDATE_BACKUP_BASILEA se guardará una copia de los registros antes de actualizarlos para así no perder los valores
originales Si la tabla se encuentra truncada, se insertará los registros correspondientes al reproceso numero 0 */
      SELECT MAX(version)
      INTO v_version
      FROM BAS_MEN.UPDATE_BACKUP_BASILEA;

      IF v_version IS NULL
        THEN v_version := 0;

/* Si la tabla no se encuentra truncada, en caso de ser del proceso anterior se trunca */
      ELSE

        SELECT OR_IDMES
        INTO v_Mes_ver
        FROM BAS_MEN.UPDATE_BACKUP_BASILEA
        WHERE version = v_version AND rownum = 1;

        IF v_Mes_ver < v_fecha_proceso THEN
          EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.UPDATE_BACKUP_BASILEA');
          v_Version := 0;
        END IF;

      END IF;

      v_Version := v_Version + 1;

--###########################################################################################
/* INI - UPDATE 01. CORREGIMOS EPIGRAFES INDIVIDUAL Y CONSOLIDADO Y CUENTA INDIVIDUAL DE DERIVADOS DE COBERTURA CLASIFICADOS INCORRECTAMENTE COMO DE NEGOCIACION */

      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO ||'_UPDATE_01', 'INICIADO');

      /* SELECCIONAMOS DESCRIPTIVOS DEL BALANCE */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_BALANCE');

      insert into BAS_MEN.UPDATE_BALANCE
          SELECT DISTINCT
                EPIGRAF,
                DESCRIPCIO,
                COMPTE,
                NOM
          FROM dcrprop_mensual.BALANCE_INDIVIDUAL_504
         WHERE ID_MES = v_fecha_proceso;

      COMMIT;
      VN_NUMERR := 3;

      /* SELECCIONAMOS REGISTROS CON SALDO NEGATIVO DE BASILEA (PROCEDEN DE RECLASIFICACIONES) */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_BASILEA_RECLAS');

      insert into BAS_MEN.UPDATE_BASILEA_RECLAS c
          SELECT /*+ parallel(a 8) parallel(b 8) */ A.OR_IDREG, A.FI_EPICON, B.DESCRIPCIO, A.OR_CTAIND, B.NOM, A.OR_EPIIND,
                  CASE WHEN B.NOM like '%RECLAS%'  THEN 2
                       WHEN B.NOM like '%COB%'     THEN 3
                  ELSE 1
                 END AS ORDEN, round(A.OR_FUTURS,2), 'IDRE' AS FI_ELIMI1
            FROM BAS_MEN.BASILEA A
            LEFT JOIN BAS_MEN.UPDATE_BALANCE B
              ON A.FI_EPICON = B.EPIGRAF
             AND A.OR_CTAIND = B.COMPTE
             WHERE A.FI_ELIMI1 = 'NO' /* RMR 16/04/2020 Añadido filtro para solo los no eliminados */
             AND A.FI_TIPEXP = 'OTC'
             AND A.OR_FUTURS < 0;

      COMMIT;
      VN_NUMERR := 4;

      /* SELECCIONAMOS REGISTROS CON SALDO POSITIVO DE BASILEA Y PARA LOS QUE EXISTE UN REGISTRO ANALOGO CON SALDO NEGATIVO */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_BASILEA_RESTO_AUX');

      insert into BAS_MEN.UPDATE_BASILEA_RESTO_AUX
          SELECT /*+ parallel(a 8) parallel(b 8) */ A.OR_IDREG, A.FI_EPICON, B.DESCRIPCIO, A.OR_CTAIND, B.NOM, A.OR_EPIIND,
                  CASE WHEN B.NOM like '%RECLAS%'  THEN 2
                       WHEN B.NOM like '%COB%'     THEN 3
                       ELSE 1
                  END AS ORDEN, round(A.OR_FUTURS,2)
            FROM BAS_MEN.BASILEA A
            LEFT JOIN BAS_MEN.UPDATE_BALANCE B
              ON A.FI_EPICON = B.EPIGRAF
             AND A.OR_CTAIND = B.COMPTE
           WHERE A.FI_ELIMI1 = 'NO' /* RMR 16/04/2020 Añadido filtro para solo los no eliminados */
             AND A.FI_TIPEXP = 'OTC'
             AND A.OR_FUTURS > 0;

      COMMIT;
      VN_NUMERR := 5;

      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_BASILEA_RESTO');

      insert into BAS_MEN.UPDATE_BASILEA_RESTO
          SELECT DISTINCT B.*
            FROM BAS_MEN.UPDATE_BASILEA_RECLAS A
            LEFT JOIN BAS_MEN.UPDATE_BASILEA_RESTO_AUX B
              ON A.OR_FUTURS = - B.OR_FUTURS;

      COMMIT;
      VN_NUMERR := 6;

      /* PERIMETRO COMPLETO ANTES DEL UPDATE, PARA PODER CONCILIAR CON EL PERIMETRO TRAS EL UPDATE */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_PERIMETRO');

      insert into BAS_MEN.UPDATE_PERIMETRO
      SELECT OR_IDREG, FI_EPICON, DESCRIPCIO, OR_CTAIND, NOM, OR_EPIIND, ORDEN, OR_FUTURS FROM BAS_MEN.UPDATE_BASILEA_RECLAS
      UNION ALL
      SELECT OR_IDREG, FI_EPICON, DESCRIPCIO, OR_CTAIND, NOM, OR_EPIIND, ORDEN, OR_FUTURS FROM BAS_MEN.UPDATE_BASILEA_RESTO;

      COMMIT;
      VN_NUMERR := 7;

      /* SUSTITUIMOS PARA LOS REGISTROS NO PROVENIENTES DE RECLASIFICACIONES LOS EPIGRAFES Y CUENTAS CORRESPONDIENTES */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_EPIGRAFES_CUENTAS');

      insert into BAS_MEN.UPDATE_EPIGRAFES_CUENTAS
          SELECT  DISTINCT
                  FI_EPICON,
                  OR_CTAIND,
                  OR_EPIIND,
                  OR_FUTURS
            FROM BAS_MEN.UPDATE_BASILEA_RESTO
           WHERE ORDEN = 3;

      COMMIT;
      VN_NUMERR := 8;

      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_EPIGRAFES_CUENTAS_02');

      insert into BAS_MEN.UPDATE_EPIGRAFES_CUENTAS_02
          SELECT  A.OR_IDREG,
                  COALESCE(B.FI_EPICON,A.FI_EPICON) AS FI_EPICON,
                  COALESCE(B.OR_CTAIND,A.OR_CTAIND) AS OR_CTAIND,
                  COALESCe(B.OR_EPIIND,A.OR_EPIIND) AS OR_EPIIND,
                  A.OR_FUTURS,
                  A.ORDEN,
                  CASE WHEN A.ORDEN IN (2,3) THEN 'IDRE'
                       ELSE 'NO'
                  END AS FI_ELIMI1
            FROM BAS_MEN.UPDATE_BASILEA_RESTO A
            LEFT JOIN BAS_MEN.UPDATE_EPIGRAFES_CUENTAS B
              ON A.OR_FUTURS = B.OR_FUTURS
             AND A.FI_EPICON <> B.FI_EPICON
             AND A.OR_CTAIND <> B.OR_CTAIND
           ORDER BY A.OR_IDREG;

      COMMIT;
      VN_NUMERR := 9;

      /* TABLA CON LOS VALORES QUE ACTUALIZAREMOS */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_DERIVADOS');

      insert into BAS_MEN.UPDATE_DERIVADOS
          SELECT OR_IDREG, FI_EPICON, OR_CTAIND, OR_EPIIND, OR_FUTURS, FI_ELIMI1, ORDEN FROM BAS_MEN.UPDATE_BASILEA_RECLAS
          UNION ALL
          SELECT OR_IDREG, FI_EPICON, OR_CTAIND, OR_EPIIND, OR_FUTURS, FI_ELIMI1, ORDEN FROM BAS_MEN.UPDATE_EPIGRAFES_CUENTAS_02;

      COMMIT;
      VN_NUMERR := 10;

      /*copia de los registros antes de actualizarlos */
      INSERT INTO BAS_MEN.UPDATE_BACKUP_BASILEA
        SELECT 'UPDATE_01' , sysdate, v_version, A.*
        FROM bas_men.basilea a
        inner join BAS_MEN.UPDATE_DERIVADOS b
           on (a.or_idreg = b.or_idreg);

      COMMIT;
      VN_NUMERR := 11;

      vv_count_reg := 0;

      /* MODIFICAMOS LOS CAMPOS DESEADOS EN BASILEA*/
      Merge into BAS_MEN.BASILEA a
        using (select or_idreg, FI_EPICON, OR_CTAIND, OR_EPIIND, FI_ELIMI1 from BAS_MEN.UPDATE_DERIVADOS) b
           on (a.or_idreg = b.or_idreg)
         when MATCHED then
       UPDATE
          SET a.FI_EPICON = b.FI_EPICON,
              a.OR_CTAIND = b.OR_CTAIND,
              a.OR_EPIIND = b.OR_EPIIND,
              a.FI_ELIMI1 = b.FI_ELIMI1;

      vv_count_reg := SQL%rowcount;

      COMMIT;
      VN_NUMERR := 12;

      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT = 'FINALIZADO',
             DATA_FIN = SYSDATE,
             FINALITZAT = 'OK',
             REG_UPD_OK = vv_count_reg
       WHERE PROCES = VV_NOM_PROCESO ||'_UPDATE_01'
         AND ESTAT  = 'INICIADO';

      COMMIT;
      VN_NUMERR := 13;
/* FIN - UPDATE 01. */
--###########################################################################################
/* INI - UPDATE 02. INFORMAMOS A CERO EL SALDO DE LAS COMPRAS A PLAZO DE OR_CTAIND = 9225000500, PORQUE SON REPOS FORWARD TOTALMENTE COLATERALIZADAS */

      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO ||'_UPDATE_02', 'INICIADO');

      /*copia de los registros antes de actualizarlos */
      INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_BACKUP_BASILEA
        SELECT /*+ FULL(A) PARALLEL (A 4)*/ 'UPDATE_02' , sysdate, v_version, A.*
          FROM bas_men.basilea a
         WHERE a.fi_elimi1 = 'NO' AND a.fi_epicon = 030020200000000000000000000000 AND a.or_ctaind = 9225000500;

      COMMIT;
      VN_NUMERR := 20;

      vv_count_reg := 0;

      UPDATE bas_men.basilea
        SET or_disble = 0
           ,or_disblecon = 0
           , oR_PROVAPL = 0
       WHERE fi_elimi1 = 'NO' AND fi_epicon = 030020200000000000000000000000 AND or_ctaind = 9225000500;

      vv_count_reg := SQL%rowcount;

      COMMIT;
      VN_NUMERR := 21;


      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT = 'FINALIZADO',
             DATA_FIN = SYSDATE,
             FINALITZAT = 'OK',
             REG_UPD_OK = vv_count_reg
       WHERE PROCES = VV_NOM_PROCESO ||'_UPDATE_02'
         AND ESTAT  = 'INICIADO';

      COMMIT;
      VN_NUMERR := 22;
/* FIN - UPDATE 02. */
--###########################################################################################
/* INI - UPDATE 03. MODIFICAMOS LOS CAMPOS IN_METODE Y OR_NIFCIFAVA DE REGISTROS DE GRIFOLS WORLDWIDE PARA QUE SE ASIGNE
   LA GARANTIA Y LA PD DEL GRUPO (LA MÍNIMA) */

      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO ||'_UPDATE_03', 'INICIADO');

      /* SELECCIONAMOS PERIMETRO SUSCEPTIBLE DE UPDATE FILTRANDO POR NOMBRE */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_GRIFOLS');

      insert into BAS_MEN.UPDATE_GRIFOLS
          SELECT  /*+ parallel(a 8) */
                OR_IDREG,
                OR_NOMPER,
                IN_TIPOREG,
               null FI_PD_COREPS,
                OR_NIFCIFAVA,
                null IN_METODE,
                OR_CONTRATO_GARANTIA,
                OR_CODGAR
          FROM BAS_MEN.BASILEA a
          WHERE OR_NOMPER LIKE '%GRIFOLS%' AND FI_ELIMI1 = 'NO';

      COMMIT;
      VN_NUMERR := 30;

    /* DE LOS REGISTROS SIGUIENTES, NOS QUEDAREMOS CON LOS QUE TIENEN GARANTIA 'GR 21103' Y MAS DE UN AVALISTA (TENIENDO, ALGUNO DE ESTOS AVALISTAS,
       CODIGO DE GARANTIA DE GRIFOLS S.A., ES DECIR, 14302568) */
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UPDATE_GRIFOLS_AUX');

      insert into BAS_MEN.UPDATE_GRIFOLS_AUX
          SELECT  A.*
           FROM BAS_MEN.UPDATE_GRIFOLS A
          WHERE OR_CODGAR = 'GR 21103'
          ORDER BY 1;

      COMMIT;
      VN_NUMERR := 31;

      /*copia de los registros antes de actualizarlos */
      INSERT INTO BAS_MEN.UPDATE_BACKUP_BASILEA
          SELECT 'UPDATE_03' , sysdate, v_version, A.*
          FROM bas_men.basilea a
          inner join BAS_MEN.UPDATE_GRIFOLS_AUX b
             on (a.or_idreg = b.or_idreg)
          WHERE B.OR_NIFCIFAVA <> 'A58389123' and b.OR_CODGAR = 'GR 21103';

      COMMIT;
      VN_NUMERR := 32;

      vv_count_reg := 0;

      Merge into BAS_MEN.BASILEA a
        using (select or_idreg, OR_NIFCIFAVA, IN_TIPOREG, IN_METODE
                 from BAS_MEN.UPDATE_GRIFOLS_AUX
                where OR_NIFCIFAVA <> 'A58389123' and OR_CODGAR = 'GR 21103') b
           on (a.or_idreg = b.or_idreg)
         when MATCHED then
       UPDATE
          SET a.OR_NIFCIFAVA = 'A58389123',
              --a.IN_METODE = 'AIRB',
              a.IN_TIPOREG = 'AVSA';

      vv_count_reg := SQL%rowcount;

      COMMIT;
      VN_NUMERR := 33;

      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT = 'FINALIZADO',
             DATA_FIN = SYSDATE,
             FINALITZAT = 'OK',
             REG_UPD_OK = vv_count_reg
       WHERE PROCES = VV_NOM_PROCESO ||'_UPDATE_03'
         AND ESTAT  = 'INICIADO';

      COMMIT;
      VN_NUMERR := 34;
/* FIN - UPDATE 03. */
--###########################################################################################
/* INI - UPDATE 04. MARCAMOS LA TITULARIDAD DE CORPORACIÓN HABANOS COMO VIGENTE (VENÍA COMO CURADA, PORQUE TENÍA UNA PÓLIZA CON GARANTÍA DE ALTADIS) */
      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO ||'_UPDATE_04', 'INICIADO');

      INSERT INTO BAS_MEN.UPDATE_BACKUP_BASILEA
          SELECT  'UPDATE_04' , sysdate, v_version, A.*
            FROM bas_men.basilea a
           WHERE or_titularitat = 9471742;

      COMMIT;
      VN_NUMERR := 40;

      vv_count_reg := 0;

      UPDATE bas_men.basilea
         SET in_indcura = '?',
             fi_mescura = 0
       WHERE or_titularitat = 9471742;

      vv_count_reg := SQL%rowcount;

      COMMIT;
      VN_NUMERR := 41;

      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT = 'FINALIZADO',
             DATA_FIN = SYSDATE,
             FINALITZAT = 'OK',
             REG_UPD_OK = vv_count_reg
       WHERE PROCES = VV_NOM_PROCESO ||'_UPDATE_04'
         AND ESTAT  = 'INICIADO';

       COMMIT;
       VN_NUMERR := 42;
/* FIN - UPDATE 04. */
--###########################################################################################
/* FIN - UPDATE 05.  MARCAMOS COMO SIN RIESGO DE CRÉDITO EL FACTORING DE LA MULTINACIONAL PUNTO FA, SL., PORQUE YA ESTAMOS CUBRIENDO EL ASEGURAMIENTO DE LA CARTA DE CRÉDITO */

      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO ||'_UPDATE_05', 'INICIADO');

      INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_BACKUP_BASILEA
          SELECT /*+ FULL(A) PARALLEL (A 4)*/ 'UPDATE_05' , sysdate, v_version, A.*
          FROM bas_men.basilea a
          WHERE A.fi_elimi1 = 'NO'
            AND A.or_clunicontr IN (77004112631, 770041126);

      COMMIT;
      VN_NUMERR := 50;

      vv_count_reg := 0;

      UPDATE bas_men.basilea
          SET fi_elimi1 = 'SRCRE'
        WHERE fi_elimi1 = 'NO'
          AND or_clunicontr IN (77004112631, 770041126);

      vv_count_reg := SQL%rowcount;

      COMMIT;
      VN_NUMERR := 51;

      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT = 'FINALIZADO',
             DATA_FIN = SYSDATE,
             FINALITZAT = 'OK',
             REG_UPD_OK = vv_count_reg
       WHERE PROCES = VV_NOM_PROCESO ||'_UPDATE_05'
         AND ESTAT  = 'INICIADO';

       COMMIT;
       VN_NUMERR := 52;
/* FIN - UPDATE 05. */
--###########################################################################################

      -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO, 'FINALIZADO', VV_RETORNO);

      COMMIT;
      VN_NUMERR := 99;

EXCEPTION
   WHEN OTHERS THEN
        --
        -- Actualización del fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
        VV_MENSAJE_ERR:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' C.E.'||VN_NUMERR,1,255);
        VV_RETORNO        := 'KO';
        ROLLBACK;

        BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO, 'FINALIZADO', VV_RETORNO, VV_MENSAJE_ERR);
        COMMIT;

        RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_AUTOMATIZACION_UPDATES';


create or replace PROCEDURE   BAS_MEN.FNC_FILTRO (PV_TABLA   IN  VARCHAR2,  --Nombre de la tabla
                                        PV_OPC     IN  NUMBER,            --OpciÃ³n de la funciÃ³n que se lanza
                                        PN_FECPRO  IN  NUMBER,            --Fecha Proceso
                                        PV_FECHA   IN  NUMBER,
                                        PV_RET1    IN  VARCHAR2,
                                        PV_RET     OUT VARCHAR2) IS       --Indica el estado en que finaliza la funciÃ³n

-- Prueba de compilaciÃ³n


  VN_NUMERR       NUMBER(3);
  VV_MENSAJE      VARCHAR2(255);
  VN_COUNT        NUMBER(9);
  VV_DESC         VARCHAR2(50);
  VV_ROWID        VARCHAR2(50);
  VV_ABEND        DATE;
  VV_IDREG        number(12);
  PV_FECANT       NUMBER(6);
  VReg_MaeSob     BAS_MEN.MAESTRO_SOBERANOS%ROWTYPE;

  PN_FECPRO_MX    NUMBER(6);
  PN_FECPRO_YYYYMMDD    NUMBER(8);

PROCEDURE FNC_FILTRO_BASILEA IS

    v_NRegs               NUMBER(12);
    VV_OR_DISPTO                   FLOAT;
    VV_OR_DISPTO_ORIG              FLOAT;
    VV_OR_DISBLE                   FLOAT;
    VV_OR_DISBLE_NEW               FLOAT;
    VV_OR_IDREG                    NUMBER(12);
    SW_FI_ELIMI1_GAROMX            BOOLEAN;
    SW_CODGAR                      BOOLEAN;
    vv_GARANTIA_CONTRAVALOR_RESTO  FLOAT;
    vv_GAR_CONTRAVALOR_RESTO_UPD   FLOAT;
    vv_OR_DISPTO_RESTO             FLOAT;
    vv_OR_DISBLE_RESTO             FLOAT;
    vv_OR_DIVISA                   VARCHAR2(3);
    vv_IN_SEG_HIP                  VARCHAR2(1 BYTE);
    vv_OR_TIPOFI                   VARCHAR2(2 BYTE);


    CURSOR CURSOR_MX_BASILEA IS
      SELECT DISTINCT a.OR_IDREG ,a.OR_ENTITY ,a.OR_CLUNICONTR, a.OR_DISPTO, a.OR_DISBLE
      FROM (
             select a.OR_IDREG ,a.OR_ENTITY ,a.OR_CLUNICONTR ,a.GARANTIA_CONTRAVALOR ,a.OR_DISPTO ,a.OR_DISBLE ,a.FI_ELIMI1 ,a.CANVIO_BCE ,a.ORDEN ,a.DESCRIPCION ,a.OR_IDMES
              from BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX a
             -- where a.OR_CLUNICONTR  in (57, 196, 2036)
             order by a.OR_CLUNICONTR, a.ORDEN, nvl(a.OR_DISPTO, 0) desc, a.GARANTIA_CONTRAVALOR desc
            ) A
       order by a.OR_CLUNICONTR, OR_DISPTO desc, a.OR_DISBLE desc;

    CURSOR CURSOR_MX_GARANTIA (BAS_OR_IDREG NUMBER) IS
      select a.OR_IDREG ,a.OR_ENTITY ,a.OR_CLUNICONTR ,a.OR_CONTRATO_GARANTIA ,a.OR_CODGAR ,a.CATALOGO ,a.GARANTIA ,a.OR_DIVISA
            ,a.GARANTIA_CONTRAVALOR ,a.OR_DISPTO ,a.OR_DISBLE ,a.FI_ELIMI1 ,a.CANVIO_BCE ,a.ORDEN ,a.DESCRIPCION ,a.OR_IDMES, a.IN_SEG_HIP, a.OR_TIPOFI
        from BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX a
        where a.OR_IDREG = BAS_OR_IDREG
       order by a.OR_CLUNICONTR, a.ORDEN, nvl(a.OR_DISPTO, 0) desc, a.GARANTIA_CONTRAVALOR desc;

    CURSOR cur_MX_IMPLTV IS
       SELECT a.OR_ENTITY, a.OR_CLUNICONTR, a.GARANTIA_CONTRAVALOR, b.OR_DISPTO, b.OR_DISBLE
            , CASE WHEN b.OR_DISPTO <> 0 THEN (b.OR_DISPTO/a.GARANTIA_CONTRAVALOR)*100
                   WHEN b.OR_DISPTO =  0 AND OR_DISBLE <> 0 THEN (b.OR_DISBLE/a.GARANTIA_CONTRAVALOR)*100
              END OR_IMPLTV, a.GARANTIA_CONTRAVALOR OR_VALTAS, b.OR_TIPGAR
         FROM (SELECT OR_ENTITY, OR_CLUNICONTR, sum(GARANTIA_CONTRAVALOR) GARANTIA_CONTRAVALOR
                 FROM (
                       select DISTINCT OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, CATALOGO, GARANTIA_CONTRAVALOR
                         from BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX
                        where OR_CODGAR in ('GR 11103','GR 11104','GR 11202','GR 11101','GR 11105','GR 11106','GR 11107','GR 11108','GR 11109','GR 11199','GR 11102')
                      )
                group by OR_ENTITY, OR_CLUNICONTR
              ) A,
              (select DISTINCT OR_ENTITY, OR_CLUNICONTR, OR_DISPTO, OR_DISBLE
                    , CASE WHEN OR_CODGAR in ('GR 11103','GR 11104','GR 11202','GR 11101','GR 11105','GR 11106','GR 11107','GR 11108','GR 11109','GR 11199','GR 11102') THEN 'HV'
                           ELSE '?'
                      END AS OR_TIPGAR
                 from (
                       select DISTINCT OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, CATALOGO , sum(OR_DISPTO) OR_DISPTO, sum(OR_DISBLE) OR_DISBLE
                         from BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX
                        where OR_CODGAR in ('GR 11103','GR 11104','GR 11202','GR 11101','GR 11105','GR 11106','GR 11107','GR 11108','GR 11109','GR 11199','GR 11102')
                        group by OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, CATALOGO
                      )
              ) B
        where a.OR_ENTITY      = b.OR_ENTITY
          and a.OR_CLUNICONTR  = b.OR_CLUNICONTR;

BEGIN

    VN_NUMERR := 1;
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
           VALUES ('1.2 FNC_FILTRO '||PV_TABLA, SYSDATE, 'INICIADO');

    COMMIT;

    VN_NUMERR := 2;

   /* RMR 15/04/2020  Nos aseguramos que antes de filtros se borra Renting y Fincom */
    DELETE /*+ parallel (a 8) */  BAS_MEN.BASILEA a
    WHERE IN_TIPOREG IN ('FFD', 'REN', 'FMX');

    COMMIT;

    VN_NUMERR := 3;

    -- INI - NAV 04/10/2019 -- Llamada la nueva funcion FNC_AUTOMATIZACION_UPDATES para aplicar UPDATES que nos envia Usuario
    BAS_MEN.FNC_AUTOMATIZACION_UPDATES();
    -- FIN - NAV
    COMMIT;

    --
    -- Carga de las tablas SAS del proceso
    --
    VN_NUMERR := 4;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CNAES_FINCOM');

    INSERT INTO BAS_MEN.CNAES_FINCOM SELECT * FROM DCRPROP_MENSUAL.CNAES_FINCOM_SAS;

    COMMIT;

    VN_NUMERR := 5;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS');

    INSERT INTO BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS
    SELECT * FROM DCRPROP_MENSUAL.EPIGRAFES_SEGMENTOS_SAS;

    COMMIT;

    /* 26/05/2021 RMR - Añadido fichero para mejorar las marcas de mora y cura de las filiales TM-4332 */
    VN_NUMERR := 6;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.DOD_FILIALES');

    INSERT INTO BAS_MEN.DOD_FILIALES
    SELECT * FROM DCRPROP_MENSUAL.DOD_FILIALES_SAS;

    COMMIT;


    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MEXICO_GARANTIAS');
    --
    INSERT INTO BAS_MEN.MEXICO_GARANTIAS
    SELECT * FROM DCRPROP_MENSUAL.MEXICO_GARANTIAS_SAS;

    COMMIT;

    VN_NUMERR:= 10;

    --se capa la dotaciÃ³n de fincom

    update /*+ parallel(bas 8) */ BAS_MEN.BASILEA_BSFINCOM bas
     set or_provapl = or_disblecon+or_disptocon
     where or_provapl > or_disptocon+or_disblecon
    and or_provapl <> 0;

    commit;


    SELECT MAX(OR_IDREG)
      INTO VV_IDREG
      FROM BAS_MEN.BASILEA;

    update /*+ parallel(bas 8) */ BAS_MEN.BASILEA_BSFINCOM bas
      set or_idreg = rownum + VV_IDREG;

      commit;

    /*InserciÃ³n de los datos de BS Fincom.
    -- 09/2016 JCV Se vuelve a utilizar el balance consolidado GECO ya que ahora nos enviarÃ¡n la cuenta consolidada en el fichero. Adicionalmente se recibirÃ¡n nuevos valores de cuentas individuales y tipo de operaciÃ³n para el producto tarjetas
    -- 27/06/2016 ALLA Se deja de utilizar el balance consolidado GECO debido a los cambios en cuentas contables. Se utilizarÃ¡ el mapeo entre cuentas individuales y consolidadas*/
    INSERT /*+ parallel(bas 8) */ INTO BAS_MEN.BASILEA BAS
           ( OR_IDREG, OR_CTAIND, OR_ENTITY, OR_EPIIND, FI_EPICON, IN_INDMOR, OR_FECOPE, OR_FECVTO, OR_FECCAR, OR_VIDINI, OR_VIDRES
           , IN_ANTIGU, FI_TIPEXP, OR_DISPTO, OR_DISPTOCON, OR_DISBLE, OR_DISBLECON, OR_IDPAIS, OR_PROVAPL, OR_IDPRO1, IN_FECMORA
           , OR_TIPOPE, OR_REFOPE, OR_CLUNICONTR, OR_TIPIDE, OR_NIFCIF, OR_IDPERS, OR_NOMPER, OR_PERSON, OR_IDECNO, OR_IDCNAE, OR_SEGGES
           , OR_SEGFAC, IN_TIPOREG, OR_CODGAR, IN_ITITSN, IN_SEGMBSINI, IN_SEGMBS, FI_ELIMI1, OR_DIVISA, IN_METODE, OR_IDMES
           , OR_NUMPERSONA, IN_NIFGRUPCON, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO,  IN_ACTIVO_CONS, IN_EXISTENCIAS, IN_ACTIVO_CIR, IN_NUMEMP
           , IN_IDGRUPO, IN_NOM_GRUP, IN_GRUP_IDPER, IN_GRUP_TIPIDE, IN_NUMEMP_CONS, OR_TITULARITAT, or_nifcifibm
           , INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP ,FECHFINSIMP /* 26/05/2021 RMR - Recuperadas las marcas de mora y cura de las filiales TM-4332 */
           , OR_REFOPE2
           )
    SELECT /*+ parallel(FinCom 8)  parallel (per 8) parallel (ventas 8) parallel (dfs 8) */
           DISTINCT FinCom.or_idreg, FinCom.OR_CTAIND, FinCom.OR_ENTITY, FinCom.OR_EPIIND, NVL(Balan_Con.FI_EPICON, '?') FI_EPICON,
           CASE WHEN dfs.TIPREG = 'S' THEN 'SI' ELSE 'NO' END AS IN_INDMOR, --FinCom.IN_INDMOR, /* 26/05/2021 TM-4332 */
           FinCom.OR_FECOPE, nvl(FinCom.OR_FECVTO, 0), FinCom.OR_FECCAR
         , nvl(FinCom.OR_VIDINI, 99999999), nvl(FinCom.OR_VIDRES, 99999999), nvl(FinCom.IN_ANTIGU, 99999999), FinCom.FI_TIPEXP, nvl(FinCom.OR_DISPTO,0), nvl(FinCom.OR_DISPTOCON,0), nvl(FinCom.OR_DISBLE,0), nvl(FinCom.OR_DISBLECON,0)
         , nvl(FinCom.OR_IDPAIS, 999) OR_IDPAIS, FinCom.OR_PROVAPL, FinCom.OR_IDPRO1
         , DECODE(FinCom.IN_FECMORA, NULL, '?', TO_CHAR(TO_DATE(TO_CHAR(FinCom.IN_FECMORA),'yyyymmdd'),'YYYY-MM-DD')) IN_FECMORA
         , nvl(FinCom.OR_TIPOPE, '?'), FinCom.OR_CLUNICONTR, FinCom.OR_CLUNICONTR, FinCom.OR_TIPIDE, FinCom.OR_NIFCIF, FinCom.OR_IDPERS, FinCom.OR_NOMPER, nvl(FinCom.OR_PERSON, 0), FinCom.OR_IDECNO /* 09/11/2021 NAV-  OR_CLUNICONTR de bsfincom lo cargamos en OR_CLUNICONTR y OR_REFOPE de Basilea */
         , nvl(to_char(CNAE.CNAE_OK), FinCom.OR_IDCNAE)
         , FinCom.OR_SEGGES, FinCom.OR_SEGFAC, FinCom.IN_TIPOREG, FinCom.OR_CODGAR, FinCom.IN_ITITSN, FinCom.IN_SEGMBSINI, FinCom.IN_SEGMBS, FinCom.FI_ELIMI1, 'EUR', 'STDA', PV_FECHA
         , max(nvl(per.NUMPERSONA, 0)), nvl(ventas.CIF_MATRIZ, '?'), nvl(ventas.VENTAS_IND, 99),
           nvl(ventas.VENTAS_CON, 99), nvl(ventas.ACTIVO, 0), nvl(ventas.ACTIVO_CON, 0), nvl(ventas.EXISTENCIAS, 99),
           nvl(ventas.ACTIVO_CIR, 0), /*nvl(ventas.IDEBALAN, 0),*/ nvl(ventas.NUM_EMPLEADOS, 0), Nvl(grupo.id_grupo, 0), nvl(grupo.nombre_grupo, '?'), nvl(grupo.ID_IDEFISC, FinCom.OR_NIFCIF),
           nvl(grupo.SW_TIPPERSBULL, FinCom.OR_TIPIDE), nvl(ventas.NUM_EMPLEADOS_CON, 0), max(nvl(per.TITULARIDADPER,0)), FinCom.OR_NIFCIF as or_nifcifibm
  --TM-4332-I
         ,NVL(dfs.INDCURA,'N')
         ,DECODE(dfs.FECHINICURA,NULL,'?',to_char(dfs.FECHINICURA,'YYYYMMDD')) AS FECHINICURA
         ,NVL(dfs.TIPODEFAULT,'00')
         ,DECODE(dfs.FECHINISIMP,NULL,'?',to_char(dfs.FECHINISIMP,'YYYYMMDD')) AS FECHINISIMP
         ,DECODE(dfs.FECHFINSIMP,NULL,'?',to_char(dfs.FECHFINSIMP,'YYYYMMDD')) AS FECHFINSIMP
  --TM-4332-F
         ,FinCom.OR_REFOPE /* 09/11/2021 NAV-  OR_REFOPE de bsfincom lo cargamos en OR_REFOPE2 de Basilea */
      FROM BAS_MEN.BASILEA_BSFINCOM FinCom
         , BAS_MEN.CNAES_FINCOM     CNAE
         , ( SELECT DISTINCT OR_ENTITY, OR_CTAIND AS Cta_Consolidada, OR_DIVISA, FI_EPICON  -- NOTA El OR_CTAIND en realidad es Cta Consolidada
              FROM BAS_MEN.BALANCE_CONSOLIDADO_GECO
             WHERE UPPER(DESC_EPI) not like 'PRO-MEMORIA%'
               AND OR_ENTITY = 242
           )                        Balan_Con,
          bas_men.M_BDU_PERSONES per,
          bas_men.maestro_ventas ventas,
          dcrprop_mensual.datos_grupo_pers grupo
          ,(SELECT INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, TIPREG, ID_FILIAL, TRIM(ID_CONTRATO) AS ID_CONTCALC
              FROM BAS_MEN.DOD_FILIALES
             WHERE /*substr(ID_FECHA,1,6) = PV_FECHA  -- 14/07/2021 - NAV - Quitamos cruce por fecha
               AND */to_number(ID_FILIAL) = 242
            ) dfs --TM-4332
     WHERE NVL(FinCom.OR_IDCNAE, '?') = CnaE.CNAE                (+)
       and FinCom.OR_ENTITY           = Balan_Con.OR_ENTITY      (+)
       and FinCom.FI_EPICON           = Balan_Con.Cta_Consolidada(+) -- NOTA: En el campo FI_EPICON de BASILEA_BSFINCOM esta cargada la Cta Consolidada.
       and nvl(Fincom.or_disblecon,0)+nvl(fincom.or_disptocon,0) <> 0
       and FinCom.OR_CTAIND is not null
       and fincom.or_nifcif = per.IDEFISCPER(+)
       and fincom.or_nifcif = ventas.CIF_FILIAL(+)
       and fincom.or_nifcif = grupo.ID_PER_PER(+)
  --TM-4332-I
       and fincom.OR_REFOPE = dfs.ID_CONTCALC(+)
  --TM-4332-F
     group by FinCom.or_idreg, FinCom.OR_CTAIND, FinCom.OR_ENTITY, FinCom.OR_EPIIND, NVL(Balan_Con.FI_EPICON, '?'),
  --TM-4332-I
         CASE WHEN dfs.TIPREG = 'S' THEN 'SI' ELSE 'NO' END, -- FinCom.IN_INDMOR,
  --TM-4332-F
         FinCom.OR_FECOPE, nvl(FinCom.OR_FECVTO, 0), FinCom.OR_FECCAR
         , nvl(FinCom.OR_VIDINI, 99999999), nvl(FinCom.OR_VIDRES, 99999999), nvl(FinCom.IN_ANTIGU, 99999999), FinCom.FI_TIPEXP, nvl(FinCom.OR_DISPTO,0), nvl(FinCom.OR_DISPTOCON,0), nvl(FinCom.OR_DISBLE,0), nvl(FinCom.OR_DISBLECON,0)
         , FinCom.OR_IDPAIS, FinCom.OR_PROVAPL, FinCom.OR_IDPRO1
         , DECODE(FinCom.IN_FECMORA, NULL, '?', TO_CHAR(TO_DATE(TO_CHAR(FinCom.IN_FECMORA),'yyyymmdd'),'YYYY-MM-DD'))
         , nvl(FinCom.OR_TIPOPE, '?'), FinCom.OR_CLUNICONTR, FinCom.OR_CLUNICONTR, FinCom.OR_TIPIDE, FinCom.OR_NIFCIF, FinCom.OR_IDPERS, FinCom.OR_NOMPER, nvl(FinCom.OR_PERSON,0), FinCom.OR_IDECNO
         , nvl(to_char(CNAE.CNAE_OK), FinCom.OR_IDCNAE)
         , FinCom.OR_SEGGES, FinCom.OR_SEGFAC, FinCom.IN_TIPOREG, FinCom.OR_CODGAR, FinCom.IN_ITITSN, FinCom.IN_SEGMBSINI, FinCom.IN_SEGMBS, FinCom.FI_ELIMI1, 'EUR', 'STDA', PV_FECHA
         , nvl(ventas.CIF_MATRIZ, '?'), nvl(ventas.VENTAS_IND, 99),
           nvl(ventas.VENTAS_CON, 99), nvl(ventas.ACTIVO, 0), nvl(ventas.ACTIVO_CON, 0), nvl(ventas.EXISTENCIAS, 99),
           nvl(ventas.ACTIVO_CIR, 0), /*nvl(ventas.IDEBALAN, 0),*/ nvl(ventas.NUM_EMPLEADOS, 0), Nvl(grupo.id_grupo, 0), nvl(grupo.nombre_grupo, '?'), nvl(grupo.ID_IDEFISC, FinCom.OR_NIFCIF),
            nvl(grupo.SW_TIPPERSBULL, FinCom.OR_TIPIDE), nvl(ventas.NUM_EMPLEADOS_CON, 0)
  --TM-4332-I
         ,NVL(dfs.INDCURA,'N')
         ,DECODE(dfs.FECHINICURA,NULL,'?',to_char(dfs.FECHINICURA,'YYYYMMDD'))
         ,NVL(dfs.TIPODEFAULT,'00')
         ,DECODE(dfs.FECHINISIMP,NULL,'?',to_char(dfs.FECHINISIMP,'YYYYMMDD'))
         ,DECODE(dfs.FECHFINSIMP,NULL,'?',to_char(dfs.FECHFINSIMP,'YYYYMMDD'))
  --TM-4332-F
         ,FinCom.OR_REFOPE;

    COMMIT;


    VN_NUMERR:= 11;

    SELECT MAX(OR_IDREG)
    INTO VV_IDREG
    FROM BAS_MEN.BASILEA;


    update BAS_MEN.DATOS_RENTING_GARANTIZADOS
      set ID = rownum+VV_IDREG;

    commit;

    update BAS_MEN.DATOS_RENTING_GARANTIZADOS
    set or_provapl = importe
    where abs(or_provapl) > abs(IMPORTE);

    commit;

-- 13/07/2021 RMR Eliminada inserción de renting
--
--  --InserciÃ³n de los datos de Renting.
--
--  INSERT /*+ PARALLEL(BAS 4) */ INTO BAS_MEN.BASILEA BAS
--         (OR_IDREG, OR_CTAIND, OR_EPIIND, OR_NIFCIF, OR_NOMPER, OR_IDCNAE, OR_IDeCNO, OR_PERSON, OR_REFOPE, IN_INDMOR, IN_FECMORA, OR_FECOPE,
--         OR_FECVTO, OR_IDPAIS, IN_PYME, OR_DESTPR, OR_CONCED, OR_TIPGAR, OR_CODGAR, OR_IDPRO1, OR_SUBSTDA, OR_PROVAPL, OR_TIPIDE, OR_IDPERS,
--         OR_IMPLTV, IN_METODE, FI_ELIMI1, OR_ENTITY, FI_EPICON, OR_TIPAVA, IN_SEGMBSINI, IN_SEGMBS, IN_SEGMBS0, IN_RATEXT,
--         OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_AJUVAL, OR_DISPTOCON, OR_DISBLECON,
--         OR_AVALESCON,OR_FUTURSCON, OR_AJUVALCON, IN_FAIRVABO, FI_PORCON, IN_SEG_HIP, IN_TIPOREG, OR_DIVISA, OR_CLUNIENT, OR_CLUNIPROD, OR_CLUNICONTR,
--         OR_TIPOFI, OR_IDMES, OR_NUMPERSONA, IN_NIFGRUPCON, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO,  IN_ACTIVO_CONS, IN_EXISTENCIAS, IN_ACTIVO_CIR, IN_NUMEMP,
--         IN_IDGRUPO, IN_NOM_GRUP, IN_GRUP_IDPER, IN_GRUP_TIPIDE, IN_NUMEMP_CONS, OR_TITULARITAT,
--         INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP)  --TM-4332-I
--  select /*+ PARALLEL(a 4) parallel (ventas 4) parallel (dfs 4) */ ID, OR_CTAIND*100, '?' or_epiind, OR_IDPERS, OR_NOMPER, DECODE(cnae_ok, NULL, OR_IDCNAE, 9999), OR_IDCNO, nvl(OR_PERSON,0), OR_REFOPE,
----TM-4332-I
--       CASE WHEN dfs.TIPREG = 'S' THEN 'SI' ELSE 'NO' END AS IN_INDMOR, -- NVL(C.IN_INDMOR, 'NO'),
----TM-4332-F
--         -- 27/10/2015 JOM
--         DECODE(IN_FECMORA, NULL, '?', TO_CHAR(TO_DATE(TO_CHAR(IN_FECMORA),'dd/mm/yyyy'),'YYYY-MM-DD')) IN_FECMORA,
--         OR_FECOPE, OR_FECVTO, 724, nvl(PYME, 'N'), NVL(OR_DESTPR, 0), OR_CONCED,
--         -- 2015/02/23 JCV
--         CASE
--               WHEN a.OR_CODGAR = 'GR 11108'                                                         THEN 'HV'
--               WHEN a.OR_CODGAR = 'GR 11101' OR a.OR_CODGAR = 'GR 11104' OR a.OR_CODGAR = 'GR 11199' THEN 'HX'
--               ELSE NVL(OR_TIPGAR,'?')
--         END OR_TIPGAR,
--         DECODE(NVL(a.OR_CODGAR, '?'), '?', 'FIC00500', a.OR_CODGAR), DECODE(NVL(OR_PROVAPL,0), 0, '?', 'ES') OR_IDPRO1, nvl(OR_SUBSTDA,'?'), OR_PROVAPL*-1, OR_TIPIDE,
--         DECODE(SIGN(OR_TIPIDE-9),1, NULL, '0')||OR_TIPIDE||'-'||OR_IDPERS or_idpers, nvl(OR_IMPLTV,0) , 'STDA', 'NO', 9408,
--         nvl(rpad(a.fi_epicon,30, '0'),'?') FI_EPICON, NVL(C.OR_TIPAVA,0) OR_TIPAVA, nvl(a.in_segmbsini, C.IN_SEGMBSINI), nvl(a.in_segmbs, C.IN_SEGMBS),
--         '?' IN_SEGMBS0, 'NR' IN_RATEXT, C.OR_VIDINI, C.OR_VIDRES, 0 OR_FAIRVACON, C.FI_TIPEXP,
--         DECODE(C.FI_TIPEXP, 'Drawn', A.IMPORTE, 0) OR_DISPTO,
--         DECODE(C.FI_TIPEXP, 'Undrawn', A.IMPORTE,
--                             'CtaOrden',A.IMPORTE,0) OR_DISBLE,
--         DECODE(C.FI_TIPEXP, 'OffBalance', A.IMPORTE,0) OR_AVALES,
--         0 OR_FUTURS,
--         DECODE(C.FI_TIPEXP,'Ajustes',A.IMPORTE,0) OR_AJUVAL,
--         DECODE(C.FI_TIPEXP, 'Drawn', A.IMPORTE,0) OR_DISPTOCON,
--         DECODE(C.FI_TIPEXP, 'Undrawn', A.IMPORTE,
--                             'CtaOrden',A.IMPORTE,0) OR_DISBLECON,
--         DECODE(C.FI_TIPEXP, 'OffBalance', A.IMPORTE,0) OR_AVALESCON,
--         0 OR_FUTURSCON,
--         DECODE(C.FI_TIPEXP,'Ajustes',A.IMPORTE,0) OR_AJUVALCON,
--         0 IN_FAIRVABO, 1 FI_PORCON, 'N' IN_SEG_HIP, 'REN' TIPOREG, 'EUR' DIVISA, '41' CLUNIENT, 'RE' CLUNIPROD, OR_REFOPE CLUNICONTR,
--         -- 2015/02/23 JCV
--         CASE a.OR_CODGAR
--               WHEN 'GR 11101' THEN 'FI'
--               WHEN 'GR 11104' THEN 'OF'
--               WHEN 'GR 11108' THEN '11'
--               WHEN 'GR 11199' THEN '28'
--               ELSE NVL(OR_TIPGAR,'?')
--         END OR_TIPOFI,
--         PV_FECHA,
--         max(personas.NUMPERSONA),
--         nvl(ventas.CIF_MATRIZ, '?'), nvl(ventas.VENTAS_IND, 99),
--         nvl(ventas.VENTAS_CON, 99), nvl(ventas.ACTIVO, 0), nvl(ventas.ACTIVO_CON, 0), nvl(ventas.EXISTENCIAS, 99),
--         nvl(ventas.ACTIVO_CIR, 0), /*nvl(ventas.IDEBALAN, 0),*/ nvl(ventas.NUM_EMPLEADOS, 0),  max(Nvl(personas.id_grupo, 0)) id_grupo, max(nvl(personas.nombre_grupo, '?')) nombre_grupo,
--         max(nvl(personas.ID_IDEFISC, OR_IDPERS)) IDEFISC, max(nvl(personas.SW_TIPPERSBULL,  OR_TIPIDE)) TIPPERSBULL, nvl(ventas.NUM_EMPLEADOS_CON, 0), max(nvl(personas.TITULARIDADPER,0))
----TM-4332-I
--       ,NVL(dfs.INDCURA,'N')
--       ,DECODE(dfs.FECHINICURA,NULL,'?',to_char(dfs.FECHINICURA,'YYYYMMDD')) AS FECHINICURA
--       ,NVL(dfs.TIPODEFAULT,'00')
--       ,DECODE(dfs.FECHINISIMP,NULL,'?',to_char(dfs.FECHINISIMP,'YYYYMMDD')) AS FECHINISIMP
--       ,DECODE(dfs.FECHFINSIMP,NULL,'?',to_char(dfs.FECHFINSIMP,'YYYYMMDD')) AS FECHFINSIMP
----TM-4332-F
--    from (SELECT * FROM BAS_MEN.DATOS_RENTING_GARANTIZADOS WHERE IMPORTE <> 0) a,
--         BAS_MEN.CNAES_FINCOM                                                  f,
--         (select * from BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS where INCORPORAR = 'SI')                                  c,
--         (select /*+ parallel (per 4) */ NUMPERSONA, IDEFISCPER, ID_IDEFISC, TITULARIDADPER, id_grupo, nombre_grupo, SW_TIPPERSBULL
--            from bas_men.M_BDU_PERSONES per,
--                 dcrprop_mensual.datos_grupo_pers grupo
--           where per.NUMPERSONA = grupo.id_persona(+)) personas,
--         bas_men.maestro_ventas ventas
--        ,(SELECT INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, TIPREG, ID_FILIAL, TRIM(ID_CONTRATO) AS ID_CONTCALC
--            FROM BAS_MEN.DOD_FILIALES
--           WHERE /*substr(ID_FECHA,1,6) = PV_FECHA  -- 14/07/2021 - NAV - Quitamos cruce por fecha
--             AND */ID_FILIAL = '9408'
--            ) dfs --TM-4332
--   where rpad(a.fi_epicon,30, '0') = c.fi_epicon
--     and a.or_idcnae = f.cnae(+)
--     and a.or_nifcif = personas.IDEFISCPER(+)
--     and a.or_nifcif = ventas.CIF_FILIAL(+)
----TM-4332-I
--     and a.OR_REFOPE = dfs.ID_CONTCALC(+)
----TM-4332-F
--     group by ID, OR_CTAIND*100, '?' , OR_IDPERS, OR_NOMPER, DECODE(cnae_ok, NULL, OR_IDCNAE, 9999), OR_IDCNO, nvl(OR_PERSON,0), OR_REFOPE,
----TM-4332-I
--         CASE WHEN dfs.TIPREG = 'S' THEN 'SI' ELSE 'NO' END, -- NVL(C.IN_INDMOR, 'NO'),
----TM-4332-F
--         DECODE(IN_FECMORA, NULL, '?', TO_CHAR(TO_DATE(TO_CHAR(IN_FECMORA),'dd/mm/yyyy'),'YYYY-MM-DD')) ,
--         OR_FECOPE, OR_FECVTO, 724, nvl(PYME, 'N'), NVL(OR_DESTPR, 0), OR_CONCED,
--         CASE
--               WHEN a.OR_CODGAR = 'GR 11108'                                                         THEN 'HV'
--               WHEN a.OR_CODGAR = 'GR 11101' OR a.OR_CODGAR = 'GR 11104' OR a.OR_CODGAR = 'GR 11199' THEN 'HX'
--               ELSE NVL(OR_TIPGAR,'?')
--         END,
--         DECODE(NVL(a.OR_CODGAR, '?'), '?', 'FIC00500', a.OR_CODGAR), DECODE(NVL(OR_PROVAPL,0), 0, '?', 'ES') , nvl(OR_SUBSTDA,'?'), OR_PROVAPL*-1, OR_TIPIDE,
--         DECODE(SIGN(OR_TIPIDE-9),1, NULL, '0')||OR_TIPIDE||'-'||OR_IDPERS, nvl(OR_IMPLTV,0), or_provapl*-1/importe , 'STDA', 'NO', 9408,
--         nvl(rpad(a.fi_epicon,30, '0'),'?') , NVL(C.OR_TIPAVA,0) , nvl(a.in_segmbsini, C.IN_SEGMBSINI), nvl(a.in_segmbs, C.IN_SEGMBS),
--         '?' , 'NR' , C.OR_VIDINI, C.OR_VIDRES, 0 , C.FI_TIPEXP,
--         DECODE(C.FI_TIPEXP, 'Drawn', A.IMPORTE, 0) ,
--         DECODE(C.FI_TIPEXP, 'Undrawn', A.IMPORTE,
--                             'CtaOrden',A.IMPORTE,0) ,
--         DECODE(C.FI_TIPEXP, 'OffBalance', A.IMPORTE,0) ,
--         0 ,
--         DECODE(C.FI_TIPEXP,'Ajustes',A.IMPORTE,0) ,
--         DECODE(C.FI_TIPEXP, 'Drawn', A.IMPORTE,0) ,
--         DECODE(C.FI_TIPEXP, 'Undrawn', A.IMPORTE,
--                             'CtaOrden',A.IMPORTE,0) ,
--         DECODE(C.FI_TIPEXP, 'OffBalance', A.IMPORTE,0) ,
--         0 ,
--         DECODE(C.FI_TIPEXP,'Ajustes',A.IMPORTE,0) ,
--         0 , 1 , 'N' , 'REN' , 'EUR' , '41' , 'RE' , OR_REFOPE,
--         -- 2015/02/23 JCV
--         CASE a.OR_CODGAR
--               WHEN 'GR 11101' THEN 'FI'
--               WHEN 'GR 11104' THEN 'OF'
--               WHEN 'GR 11108' THEN '11'
--               WHEN 'GR 11199' THEN '28'
--               ELSE NVL(OR_TIPGAR,'?')
--         END,
--         PV_FECHA,
--         nvl(ventas.CIF_MATRIZ, '?'), /*NVL(TO_NUMBER(TO_CHAR(ventas.DATA_IND, 'YYYYMMDD')),9999),*/ nvl(ventas.VENTAS_IND, 99), /*NVL(TO_NUMBER(TO_CHAR(ventas.DATA_CON, 'YYYYMMDD')),9999), */
--         nvl(ventas.VENTAS_CON, 99), nvl(ventas.ACTIVO, 0), nvl(ventas.ACTIVO_CON, 0), nvl(ventas.EXISTENCIAS, 99),
--         nvl(ventas.ACTIVO_CIR, 0), /*nvl(ventas.IDEBALAN, 0),*/ nvl(ventas.NUM_EMPLEADOS, 0), nvl(ventas.NUM_EMPLEADOS_CON, 0)
----TM-4332-I
--        ,NVL(dfs.INDCURA,'N')
--        ,DECODE(dfs.FECHINICURA,NULL,'?',to_char(dfs.FECHINICURA,'YYYYMMDD'))
--        ,NVL(dfs.TIPODEFAULT,'00')
--        ,DECODE(dfs.FECHINISIMP,NULL,'?',to_char(dfs.FECHINISIMP,'YYYYMMDD'))
--        ,DECODE(dfs.FECHFINSIMP,NULL,'?',to_char(dfs.FECHFINSIMP,'YYYYMMDD'));
----TM-4332-F
--
--   COMMIT;
/********************MEXICO ***********************************/
    VN_NUMERR:= 15;

    SELECT TO_NUMBER(substr(VALPARM,1,6)), VALPARM
      INTO PN_FECPRO_MX, PN_FECPRO_YYYYMMDD
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB  = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';
    VN_NUMERR:= 16;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MX_SALDOS_CLIENTES');

    INSERT INTO BAS_MEN.MX_SALDOS_CLIENTES
    select * from DCRPROP_MENSUAL.MX_SALDOS_CLIENTES_SAS;
    COMMIT;
    VN_NUMERR:= 17;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_MEXICO');

    INSERT /*+ parallel(MX 4)  */ INTO BAS_MEN.BASILEA_MEXICO MX
    SELECT /*+ parallel(mexico 4) parallel(per 4) parallel(ventas 4) parallel (dfs 4) */
            DISTINCT null AS OR_IDREG, mexico.OR_CTAIND, mexico.OR_ENTITY
           , NVL(Balan_Con.FI_EPICON, '?')  fi_epicon
           , max(nvl(per.TITULARIDADPER,0)) OR_TITULARITAT
           , mexico.OR_NIFCIF as or_nifcifibm
           , mexico.OR_NIFCIF
           , mexico.OR_NOMPER
           , mexico.OR_FECOPE
           , nvl(mexico.OR_FECVTO, 0) OR_FECVTO
           , TO_DATE(mexico.OR_FECVTO,'YYYY/MM/DD') - TO_DATE(mexico.OR_FECOPE,'YYYY/MM/DD') as OR_VIDINI
           , TO_DATE(mexico.OR_FECVTO,'YYYY/MM/DD') - TO_DATE(PN_FECPRO_YYYYMMDD,'YYYY/MM/DD') as OR_VIDRES
           , TO_DATE(mexico.OR_FECOPE,'YYYY/MM/DD') - TO_DATE(PN_FECPRO_YYYYMMDD,'YYYY/MM/DD') AS IN_ANTIGU
           , Balan_Con.FI_TIPEXP
           , nvl(sum(mexico.OR_DISPTO/nvl(camb1.CANVIO_BCE,1)),0) OR_DISPTO
           , nvl(sum(mexico.OR_DISPTO/nvl(camb1.CANVIO_BCE,1)),0) OR_DISPTOCON
            , Case when Balan_Con.FI_TIPEXP = 'Undrawn' then nvl(sum(mexico.OR_DISBLE/nvl(camb1.CANVIO_BCE,1)),0)
                else sum(0)
             end as OR_DISBLE
           , Case when Balan_Con.FI_TIPEXP = 'Undrawn' then nvl(sum(mexico.OR_DISBLE/nvl(camb1.CANVIO_BCE,1)),0)
                else sum(0)
             end as OR_DISBLECON
           , Case when Balan_Con.FI_TIPEXP = 'OffBalance' then nvl(sum(mexico.OR_DISBLE/nvl(camb1.CANVIO_BCE,1)),0)
                else sum(0)
             end as OR_AVALES
           , Case when Balan_Con.FI_TIPEXP = 'OffBalance' then nvl(sum(mexico.OR_DISBLE/nvl(camb1.CANVIO_BCE,1)),0)
                else sum(0)
             end as OR_AVALESCON
           , nvl(mexico.OR_IDPAIS, 999) OR_IDPAIS
         --, nvl(mexico.or_cluniprod, '?') as OR_TIPOPE
           , case when Balan_Con.FI_EPICON like '03001%' then 'AF'
                  else nvl(mexico.or_cluniprod, '?')
             end as OR_TIPOPE                      /* 28/10/2021 - FMRR - HDEV-81070 - Incidencia tipope AF que no todos son por avalistas, algunos son financieros */
           , mexico.OR_CLUNICONTR as or_refope2
           , case when upper(mexico.OR_PERSON) = 'JURIDICA' and mexico.OR_IDPAIS = 724 then 11
                  when upper(mexico.OR_PERSON) = 'JURIDICA' and mexico.OR_IDPAIS <> 724 then 10
                  when mexico.OR_IDPAIS = 724 then 0
                  else 5
             end as OR_TIPIDE
           , case when upper(mexico.OR_PERSON) = 'JURIDICA' then 801
                  when mexico.OR_IDPAIS = 724 then 100
                  else  120
             end as OR_PERSON
           , case when upper(mexico.OR_PERSON) = 'JURIDICA' then 0
                  else 100
             end as OR_IDCNO
           , NVL(TO_CHAR(CNAE.CNAE_OK), mexico.OR_IDCNAE) OR_IDCNAE
           , 'FMX' IN_TIPOREG
           , Balan_Con.FI_ELIMI1
           , mexico.or_divisa OR_DIVISA
           , 'STDA' IN_METODE
           , PN_FECPRO_MX OR_IDMES
           , max(nvl(per.NUMPERSONA, MEXICO.OR_NUMPERSONA)) NUMPERSONA
           , nvl(ventas.CIF_MATRIZ, '?') CIF_MATRIZ
           , nvl(ventas.VENTAS_IND , nvl(mexico.IN_VTAGRU/nvl(camb2.CANVIO_BCE,1),99)) AS IN_VTAGRU
           , nvl(ventas.VENTAS_CON , nvl(mexico.IN_VTAGRU_CONS/nvl(camb2.CANVIO_BCE,1),99)) AS IN_VTAGRU_CONS
           , nvl(ventas.ACTIVO , nvl(mexico.IN_ACTIVO/nvl(camb2.CANVIO_BCE,1),0)) AS IN_ACTIVO
           , nvl(ventas.ACTIVO_CON, nvl(mexico.IN_ACTIVO_CONS/nvl(camb2.CANVIO_BCE,1),0)) AS IN_ACTIVO_CONS
           , nvl(ventas.EXISTENCIAS, 99) EXISTENCIAS
           , nvl(ventas.ACTIVO_CIR, 0) ACTIVO_CIR
           , nvl(mexico.IN_NUMEMP,0) IN_NUMEMP
           , Nvl(grupo.id_grupo, 0) ID_GRUPO
           , nvl(grupo.nombre_grupo, nvl(upper(mexico.IN_NOM_GRUP),'?')) NOM_GRUP
           , nvl(grupo.ID_IDEFISC , nvl(to_char(mexico.IN_GRUP_IDPER), '?')) GRUP_IDPER
           , nvl(grupo.SW_TIPPERSBULL,0) tipide_grup
           , nvl(mexico.IN_NUMEMP,0) IN_NUMEMP_CON
           , mexico.or_conced/nvl(camb1.CANVIO_BCE,1) AS OR_CONCED
           , per.CODIGOLEIPER
           , sob.CODI_PAIS as OR_CODISO
           , CASE WHEN mexico.IN_SEGMBS0 = 'Project Finance' THEN '201'
                  WHEN mexico.IN_SEGMBS0 = 'CRE'             THEN '203'
                  ELSE '?'
             END AS IN_SEGMBS0
           , CASE WHEN mexico.IN_SEGMBS0 = 'Project Finance' THEN 'Project Finance'
                  WHEN mexico.IN_SEGMBS0 = 'CRE'             THEN 'Real Estate'
                  ELSE IN_SEGMBS0
             END AS IN_SEGMBS
--TM-4332-I
       ,CASE WHEN dfs.TIPREG = 'S' THEN 'SI' ELSE 'NO' END AS IN_INDMOR
       ,NVL(dfs.INDCURA,'N') AS INDCURA
       ,DECODE(dfs.FECHINICURA,NULL,'?',to_char(dfs.FECHINICURA,'YYYYMMDD')) AS FECHINICURA
       ,NVL(dfs.TIPODEFAULT,'00') AS TIPODEFAULT
       ,DECODE(dfs.FECHINISIMP,NULL,'?',to_char(dfs.FECHINISIMP,'YYYYMMDD')) AS FECHINISIMP
       ,DECODE(dfs.FECHFINSIMP,NULL,'?',to_char(dfs.FECHFINSIMP,'YYYYMMDD')) AS FECHFINSIMP
       ,mexico.OR_TIPAVA --HDEV-52481. XCG, 08/09/2021
--TM-4332-F
        FROM BAS_MEN.MX_SALDOS_CLIENTES MEXICO
           , BAS_MEN.CNAES_FINCOM     CNAE
           , ( SELECT DISTINCT OR_ENTITY, OR_CTAIND AS Cta_Consolidada,  a.FI_EPICON, incorporar, fi_elimi1, fi_tipexp
                 FROM BAS_MEN.BALANCE_CONSOLIDADO_GECO a,
                      BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS epi
                WHERE UPPER(DESC_EPI) not like 'PRO-MEMORIA%'
                  AND OR_ENTITY in (9157, 9158)
                  and epi.fi_epicon = a.Fi_epicon
             )                        Balan_Con
            , BAS_MEN.M_BDU_PERSONES per
            , BAS_MEN.MAESTRO_VENTAS ventas
            , DCRPROP_MENSUAL.DATOS_GRUPO_PERS grupo
            , BAS_MEN.MAESTRO_SOBERANOS sob
            , BAS_MEN.TIPOS_BCE camb1
            , BAS_MEN.TIPOS_BCE camb2
            ,(SELECT INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, TIPREG, ID_FILIAL, TRIM(ID_CONTRATO) AS ID_CONTCALC
                FROM BAS_MEN.DOD_FILIALES
               WHERE /*substr(ID_FECHA,1,6) = PV_FECHA  -- 14/07/2021 - NAV - Quitamos cruce por fecha
                 AND */ID_FILIAL IN ('9157','9158')
               ) dfs --TM-4332
       WHERE NVL(mexico.OR_IDCNAE, '?') = CnaE.CNAE                (+)
         and mexico.OR_ENTITY           = Balan_Con.OR_ENTITY      (+)
         and mexico.FI_EPICON           = Balan_Con.Cta_Consolidada(+) -- NOTA: En el campo FI_EPICON de BASILEA_BSFINCOM esta cargada la Cta Consolidada.
         and nvl(MEXICO.OR_DISBLE,0) + nvl(MEXICO.OR_DISPTO,0) <> 0
         and mexico.OR_CTAIND is not null
         and mexico.or_nifcif = per.IDEFISCPER(+)
         and mexico.or_nifcif = ventas.CIF_FILIAL(+)
         and mexico.or_nifcif = grupo.ID_PER_PER(+)
         and mexico.or_idpais = sob.codi_num_pais(+)
         and mexico.or_divisa = camb1.divisa (+)
         and mexico.divisa_ventas = camb2.divisa (+)
--TM-4332-I
        and OR_NUMPERSONA || '_' || nvl(OR_CLUNICONTR,0) = dfs.ID_CONTCALC(+)
--TM-4332-F
       group by null, mexico.OR_CTAIND, mexico.OR_ENTITY, NVL(Balan_Con.FI_EPICON, '?'), mexico.OR_NIFCIF, mexico.OR_NIFCIF, mexico.OR_NOMPER,
             mexico.OR_FECOPE, nvl(mexico.OR_FECVTO, 0), TO_DATE(mexico.OR_FECVTO,'YYYY/MM/DD') - TO_DATE(mexico.OR_FECOPE,'YYYY/MM/DD'),
             TO_DATE(mexico.OR_FECVTO,'YYYY/MM/DD') - TO_DATE(PN_FECPRO_YYYYMMDD,'YYYY/MM/DD'), TO_DATE(mexico.OR_FECOPE,'YYYY/MM/DD') - TO_DATE(PN_FECPRO_YYYYMMDD,'YYYY/MM/DD'),
             Balan_Con.FI_TIPEXP, nvl(mexico.OR_IDPAIS, 999), case when Balan_Con.FI_EPICON like '03001%' then 'AF' else nvl(mexico.or_cluniprod, '?') end, mexico.OR_CLUNICONTR,
             case when upper(mexico.OR_PERSON) = 'JURIDICA' and mexico.OR_IDPAIS = 724 then 11 when upper(mexico.OR_PERSON) = 'JURIDICA' and mexico.OR_IDPAIS <> 724 then 10
             when mexico.OR_IDPAIS = 724 then 0 else 5 end, case when upper(mexico.OR_PERSON) = 'JURIDICA' then 801 when mexico.OR_IDPAIS = 724 then 100 else 120 end,
             case when upper(mexico.OR_PERSON) = 'JURIDICA' then 0 else 100 end, NVL(TO_CHAR(CNAE.CNAE_OK), mexico.OR_IDCNAE), 'FMX', Balan_Con.FI_ELIMI1,
             mexico.or_divisa, 'STDA', PN_FECPRO_MX, nvl(ventas.CIF_MATRIZ, '?'), nvl(ventas.VENTAS_IND , nvl(mexico.IN_VTAGRU/nvl(camb2.CANVIO_BCE,1),99)),
             nvl(ventas.VENTAS_CON , nvl(mexico.IN_VTAGRU_CONS/nvl(camb2.CANVIO_BCE,1),99)), nvl(ventas.ACTIVO , nvl(mexico.IN_ACTIVO/nvl(camb2.CANVIO_BCE,1),0)),
             nvl(ventas.ACTIVO_CON, nvl(mexico.IN_ACTIVO_CONS/nvl(camb2.CANVIO_BCE,1),0)), nvl(ventas.EXISTENCIAS, 99), nvl(ventas.ACTIVO_CIR, 0),
             nvl(IN_NUMEMP,0), Nvl(grupo.id_grupo, 0), nvl(grupo.nombre_grupo, nvl(upper(mexico.IN_NOM_GRUP),'?')),
             nvl(grupo.ID_IDEFISC , nvl(to_char(mexico.IN_GRUP_IDPER), '?')), nvl(grupo.SW_TIPPERSBULL,0), nvl(IN_NUMEMP,0),
             mexico.or_conced/nvl(camb1.CANVIO_BCE,1), per.CODIGOLEIPER, sob.CODI_PAIS,
             CASE WHEN mexico.IN_SEGMBS0 = 'Project Finance' THEN '201' WHEN mexico.IN_SEGMBS0 = 'CRE' THEN '203' ELSE '?' END,
             CASE WHEN mexico.IN_SEGMBS0 = 'Project Finance' THEN 'Project Finance' WHEN mexico.IN_SEGMBS0 = 'CRE' THEN 'Real Estate' ELSE IN_SEGMBS0 END
--TM-4332-I
          ,CASE WHEN dfs.TIPREG = 'S' THEN 'SI' ELSE 'NO' END
          ,NVL(dfs.INDCURA,'N')
          ,DECODE(dfs.FECHINICURA,NULL,'?',to_char(dfs.FECHINICURA,'YYYYMMDD'))
          ,NVL(dfs.TIPODEFAULT,'00')
          ,DECODE(dfs.FECHINISIMP,NULL,'?',to_char(dfs.FECHINISIMP,'YYYYMMDD'))
          ,DECODE(dfs.FECHFINSIMP,NULL,'?',to_char(dfs.FECHFINSIMP,'YYYYMMDD'))
          ,mexico.OR_TIPAVA; --HDEV-52481;;
--TM-4332-F
    COMMIT;

    VN_NumErr := 20;
    VV_IDREG := 0;

    SELECT MAX(OR_IDREG)
      INTO VV_IDREG
      FROM BAS_MEN.BASILEA;

    VN_NumErr := 21;

    UPDATE BAS_MEN.BASILEA_MEXICO
       SET OR_IDREG = ROWNUM + VV_IDREG;

    COMMIT;
    VN_NumErr := 22;

    INSERT /*+ parallel(bas 4) */ INTO BAS_MEN.BASILEA BAS
         ( OR_IDREG, OR_CTAIND, OR_ENTITY, FI_EPICON, IN_INDMOR
         , OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES, IN_ANTIGU
         , FI_TIPEXP, OR_DISPTO, OR_DISPTOCON, OR_DISBLE, OR_DISBLECON
         , OR_AVALES, OR_AVALESCON, OR_IDPAIS, OR_PROVAPL, OR_IDPRO1
         , IN_FECMORA, OR_TIPOPE, OR_REFOPE, OR_CLUNICONTR, OR_TIPIDE
         , OR_IDPERS, OR_NOMPER, OR_PERSON, OR_IDECNO, OR_IDCNAE
         , IN_TIPOREG, OR_CODGAR, IN_SEGMBS, FI_ELIMI1, OR_DIVISA
         , IN_METODE, OR_IDMES, OR_NUMPERSONA, IN_NIFGRUPCON
         , IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO,  IN_ACTIVO_CONS, IN_EXISTENCIAS
         , IN_ACTIVO_CIR, IN_NUMEMP, IN_IDGRUPO, IN_NOM_GRUP, IN_GRUP_IDPER
         , IN_GRUP_TIPIDE, IN_NUMEMP_CONS, OR_TITULARITAT, OR_NIFCIF, OR_NIFCIFIBM
         , OR_SEGGES, OR_REFOPE2, IN_SEGMBS0
--TM-4332-I
         ,INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP ,FECHFINSIMP
--TM-4332-F
          , OR_TIPAVA
         )
    SELECT /*+ parallel(MX 4) */
           OR_IDREG, OR_CTAIND, OR_ENTITY, FI_EPICON, IN_INDMOR  --'NO' AS IN_INDMOR --TM-4332
         , OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES, IN_ANTIGU
         , FI_TIPEXP, OR_DISPTO, OR_DISPTOCON, OR_DISBLE, OR_DISBLECON
         , OR_AVALES, OR_AVALESCON, OR_IDPAIS, 0 AS OR_PROVAPL, '?' OR_IDPRO1
         , NULL IN_FECMORA, OR_TIPOPE, regexp_replace(OR_REFOPE2, '[^0-9]', '') AS or_refope, regexp_replace(OR_REFOPE2, '[^0-9]', '') AS OR_CLUNICONTR, OR_TIPIDE
         , OR_NIFCIF AS OR_IDPERS, OR_NOMPER, OR_PERSON, OR_IDCNO, OR_IDCNAE
         , IN_TIPOREG, 'FIC00500' OR_CODGAR, IN_SEGMBS, FI_ELIMI1, OR_DIVISA
         , IN_METODE, OR_IDMES, NUMPERSONA, CIF_MATRIZ AS IN_NIFGRUPCON
         , IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO,  IN_ACTIVO_CONS, EXISTENCIAS
         , ACTIVO_CIR, IN_NUMEMP, ID_GRUPO, NOM_GRUP, GRUP_IDPER
         , TIPIDE_GRUP AS IN_GRUP_TIPIDE, IN_NUMEMP_CON AS IN_NUMEMP_CONS, OR_TITULARITAT, substr(OR_NIFCIF, 1, 12) AS OR_NIFCIF
         , substr(OR_NIFCIFIBM, 1, 12) AS OR_NIFCIFIBM
         , CASE WHEN OR_TIPIDE = 0 AND OR_IDCNAE IS NOT NULL THEN 2 -- (Comercios y Autónomos)
                WHEN OR_TIPIDE = 0 AND OR_IDCNAE IS NULL     THEN 1 -- (Particular)
                WHEN OR_TIPIDE = 5 THEN 0 --(No informado)
                ELSE 3 -- (Empresas)
           END AS OR_SEGGES, OR_REFOPE2, IN_SEGMBS0
--TM-4332-I
         ,INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP ,FECHFINSIMP
--TM-4332-F
          , OR_TIPAVA
      FROM BAS_MEN.BASILEA_MEXICO MX;

    COMMIT;

    VN_NumErr := 30;
/******************** REPARTO GARANTIAS MEXICO ***********************************/

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX');

    INSERT /*+ PARALLEL (I 8) */ INTO BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX I
    select  /*+ PARALLEL (A 8) PARALLEL (B 8) */ A.OR_IDREG, B.OR_ENTITY, B.OR_CLUNICONTR, B.OR_CONTRATO_GARANTIA
         , B.OR_CODGAR, B.CATALOGO, B.GARANTIA, A.OR_DIVISA
         , CASE WHEN B.DIVISA = 'EUR' THEN B.GARANTIA ELSE B.GARANTIA/D.CANVIO_BCE END GARANTIA_CONTRAVALOR
         , A.OR_DISPTO, A.OR_DISBLE, A.FI_ELIMI1, D.CANVIO_BCE, C.ORDEN, C.DESCRIPCION, A.OR_IDMES, B.IN_SEG_HIP, B.OR_TIPOFI  /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */
      FROM BAS_MEN.BASILEA_MEXICO              A
     INNER JOIN BAS_MEN.MEXICO_GARANTIAS       B
        ON B.OR_ENTITY     = A.OR_ENTITY
       AND B.OR_CLUNICONTR = regexp_replace(a.OR_REFOPE2, '[^0-9]', '')
      LEFT JOIN BAS_MEN.PRELACION_GARANTIAS_RENTING   C
        ON B.OR_CODGAR     = C.CODGAR
      LEFT JOIN BAS_MEN.TIPOS_BCE       D
        ON B.DIVISA        = D.DIVISA;

    COMMIT;

    VN_NUMERR := 32;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.MEXICO_REPARTO_GARANTIAS_RESTO');

    INSERT INTO BAS_MEN.MEXICO_REPARTO_GARANTIAS_RESTO
    SELECT distinct OR_ENTITY, OR_CLUNICONTR, sum(GARANTIA_CONTRAVALOR) GARANTIA_CONTRAVALOR, OR_CONTRATO_GARANTIA, OR_CODGAR
      FROM (
              select distinct OR_ENTITY, OR_CLUNICONTR, GARANTIA_CONTRAVALOR, OR_CONTRATO_GARANTIA, OR_CODGAR
              FROM BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX
            )
     group by OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR;

    COMMIT;
    
    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.MEXICO_REPARTO_SALDO_RESTO');

    INSERT INTO BAS_MEN.MEXICO_REPARTO_SALDO_RESTO
    SELECT distinct OR_IDREG, OR_ENTITY, OR_CLUNICONTR, OR_DISPTO, OR_DISBLE, OR_DISPTO OR_DISPTO_ORIG, OR_DISBLE OR_DISBLE_ORIG
      FROM BAS_MEN.MEXICO_REPARTO_GARANTIAS_AUX;

    COMMIT;

    VN_NUMERR := 33;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MEXICO_REPARTO_UPDATE_BASILEA');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MEXICO_REPARTO_GARANTIAS');

    FOR cur_bas IN CURSOR_MX_BASILEA LOOP

        VN_NUMERR            := 34;
        VV_IDREG             := 1;
        VV_OR_IDREG          := null;
        SW_FI_ELIMI1_GAROMX  := TRUE;
        SW_CODGAR            := TRUE;
        VV_OR_DISPTO         := 0;
        VV_OR_DISBLE         := 0;
        vv_OR_DISPTO_RESTO   := 0;
        vv_OR_DISBLE_RESTO   := 0;
        vv_OR_DIVISA         := null;
        vv_GARANTIA_CONTRAVALOR_RESTO := 0;
        VV_OR_IDREG          := cur_bas.OR_IDREG;

        FOR cur_gar IN CURSOR_MX_GARANTIA (cur_bas.OR_IDREG) LOOP

            VN_NUMERR := 35;
            VV_OR_DISPTO_ORIG := cur_gar.OR_DISPTO;
            vv_IN_SEG_HIP     := cur_gar.IN_SEG_HIP;
            vv_OR_TIPOFI      := cur_gar.OR_TIPOFI;

            select GARANTIA_CONTRAVALOR_RESTO
              into vv_GARANTIA_CONTRAVALOR_RESTO
              from BAS_MEN.MEXICO_REPARTO_GARANTIAS_RESTO
             where OR_ENTITY = cur_gar.OR_ENTITY
               and OR_CLUNICONTR = cur_gar.OR_CLUNICONTR
               and OR_CONTRATO_GARANTIA = cur_gar.OR_CONTRATO_GARANTIA
               and OR_CODGAR = cur_gar.OR_CODGAR;
            
            VN_NUMERR := 76;

            select OR_DISPTO, OR_DISBLE
              into vv_OR_DISPTO_RESTO, vv_OR_DISBLE_RESTO
              from BAS_MEN.MEXICO_REPARTO_SALDO_RESTO
             where OR_IDREG = cur_gar.OR_IDREG;
            
            IF vv_GARANTIA_CONTRAVALOR_RESTO <> 0 AND (vv_OR_DISPTO_RESTO <> 0 OR vv_OR_DISBLE_RESTO <> 0) THEN

                VN_NUMERR := 36;
                VV_OR_IDREG  := cur_gar.OR_IDREG;

                IF (round(vv_OR_DISPTO_RESTO, 6) >= round(vv_GARANTIA_CONTRAVALOR_RESTO, 6)) OR (round(vv_OR_DISBLE_RESTO, 6) >= round(vv_GARANTIA_CONTRAVALOR_RESTO, 6)) THEN
                    /* Cuando hay que generar registro nuevo, el registro original debemos que marcar como FI_ELIMI1 = GAROMX en Basilea */

                    VN_NUMERR := 37;

                    IF SW_FI_ELIMI1_GAROMX THEN

                        VN_NUMERR := 38;

                        INSERT INTO BAS_MEN.MEXICO_REPARTO_UPDATE_BASILEA
                               (OR_IDREG ,OR_ENTITY ,OR_CLUNICONTR ,OR_CONTRATO_GARANTIA ,OR_CODGAR ,OR_DISPTO ,OR_DISBLE ,FI_ELIMI1, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV)
                        VALUES (cur_gar.OR_IDREG, cur_gar.OR_ENTITY, cur_gar.OR_CLUNICONTR, cur_gar.OR_CONTRATO_GARANTIA, cur_gar.OR_CODGAR,
                                cur_gar.OR_DISPTO, cur_gar.OR_DISBLE, 'GAROMX', vv_IN_SEG_HIP, vv_OR_TIPOFI, 9999); /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */

                        SW_FI_ELIMI1_GAROMX := FALSE;

                    END IF;

                    VN_NUMERR := 40;

                    IF vv_OR_DISPTO_RESTO = 0 AND vv_OR_DISBLE_RESTO <> 0 THEN
                      vv_OR_DISBLE := vv_GARANTIA_CONTRAVALOR_RESTO;
                    ELSE
                      vv_OR_DISPTO := vv_GARANTIA_CONTRAVALOR_RESTO;
                    END IF;

                    INSERT INTO BAS_MEN.MEXICO_REPARTO_GARANTIAS
                           (OR_IDREG, OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, OR_DIVISA, OR_DISPTO, OR_DISBLE, FI_ELIMI1, NEW_OR_IDREG, OR_DISPTO_ORIG, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV)
                    VALUES (cur_gar.OR_IDREG, cur_gar.OR_ENTITY, cur_gar.OR_CLUNICONTR, cur_gar.OR_CONTRATO_GARANTIA, cur_gar.OR_CODGAR, cur_gar.OR_DIVISA
                            ,vv_OR_DISPTO , vv_OR_DISBLE, 'NO', VV_IDREG, cur_gar.OR_DISPTO, vv_IN_SEG_HIP, vv_OR_TIPOFI, 9999); /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */

                    VV_IDREG  := VV_IDREG + 1;
                    VN_NUMERR := 42;

                    IF vv_OR_DISPTO_RESTO = 0 AND vv_OR_DISBLE_RESTO <> 0 THEN
                      vv_OR_DISBLE_RESTO := vv_OR_DISBLE_RESTO - vv_GARANTIA_CONTRAVALOR_RESTO;
                    ELSE
                      vv_OR_DISPTO_RESTO := vv_OR_DISPTO_RESTO - vv_GARANTIA_CONTRAVALOR_RESTO;
                    END IF;
                    
                    vv_GARANTIA_CONTRAVALOR_RESTO := 0;
                    vv_OR_DIVISA  := cur_gar.OR_DIVISA;

                    UPDATE BAS_MEN.MEXICO_REPARTO_GARANTIAS_RESTO
                       SET GARANTIA_CONTRAVALOR_RESTO = vv_GARANTIA_CONTRAVALOR_RESTO
                     where OR_ENTITY = cur_bas.OR_ENTITY
                       and OR_CLUNICONTR = cur_bas.OR_CLUNICONTR
                       and OR_CONTRATO_GARANTIA = cur_gar.OR_CONTRATO_GARANTIA
                       and OR_CODGAR = cur_gar.OR_CODGAR;

                    UPDATE BAS_MEN.MEXICO_REPARTO_SALDO_RESTO 
                       SET OR_DISPTO = vv_OR_DISPTO_RESTO,
                           OR_DISBLE = vv_OR_DISBLE_RESTO
                     WHERE OR_IDREG = cur_gar.OR_IDREG;

                ELSE

                    VN_NUMERR := 43;

                    IF vv_OR_DISPTO_RESTO = 0 AND vv_OR_DISBLE_RESTO <> 0 THEN
                        vv_GARANTIA_CONTRAVALOR_RESTO := vv_GARANTIA_CONTRAVALOR_RESTO - vv_OR_DISBLE_RESTO;
                    ELSE
                        vv_GARANTIA_CONTRAVALOR_RESTO := vv_GARANTIA_CONTRAVALOR_RESTO - vv_OR_DISPTO_RESTO;
                    END IF;
                    
                    /* En caso de que GARANTIA_CONTRAVALOR es mayor que OR_DISPTO */
                    IF (vv_OR_DISPTO_RESTO <> 0 OR vv_OR_DISBLE_RESTO <> 0) AND VV_IDREG <> 1 THEN

                        VN_NUMERR := 44;

                        INSERT INTO BAS_MEN.MEXICO_REPARTO_GARANTIAS
                               (OR_IDREG, OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, OR_DIVISA, OR_DISPTO, OR_DISBLE, FI_ELIMI1, NEW_OR_IDREG, OR_DISPTO_ORIG, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV)
                        VALUES (cur_gar.OR_IDREG, cur_bas.OR_ENTITY, cur_bas.OR_CLUNICONTR, cur_gar.OR_CONTRATO_GARANTIA, cur_gar.OR_CODGAR
                              , cur_gar.OR_DIVISA, vv_OR_DISPTO_RESTO, vv_OR_DISBLE_RESTO, 'NO', VV_IDREG, cur_gar.OR_DISPTO, vv_IN_SEG_HIP, vv_OR_TIPOFI, 9999); /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */

                        VV_IDREG     := VV_IDREG + 1;

                    /* Si solo hay un OR_CLUNICONTR para un registro y GARANTIA_CONTRAVALOR es mayor que OR_DISPTO,
                       a ese registro solo hay que actualizar OR_CONTRATO_GARANTIA y OR_CODGAR */
                    ELSIF VV_IDREG = 1 AND SW_CODGAR THEN

                        VN_NUMERR := 45;
                        
                        INSERT INTO BAS_MEN.MEXICO_REPARTO_UPDATE_BASILEA (OR_IDREG ,OR_ENTITY ,OR_CLUNICONTR ,OR_CONTRATO_GARANTIA ,OR_CODGAR ,OR_DISPTO ,OR_DISBLE ,FI_ELIMI1, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV)
                        VALUES (cur_gar.OR_IDREG, cur_gar.OR_ENTITY, cur_gar.OR_CLUNICONTR, cur_gar.OR_CONTRATO_GARANTIA, cur_gar.OR_CODGAR,
                                vv_OR_DISPTO_RESTO, vv_OR_DISBLE_RESTO, cur_gar.FI_ELIMI1, vv_IN_SEG_HIP, vv_OR_TIPOFI, 9999); /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */

                        VV_IDREG     := VV_IDREG + 1;
                        SW_CODGAR    := FALSE;

                    END IF;

                    VN_NUMERR          := 50;
                    vv_OR_DISPTO_RESTO := 0;
                    vv_OR_DISBLE_RESTO := 0;
                    vv_OR_DIVISA  := cur_gar.OR_DIVISA;
                    
                    UPDATE BAS_MEN.MEXICO_REPARTO_GARANTIAS_RESTO
                       SET GARANTIA_CONTRAVALOR_RESTO = vv_GARANTIA_CONTRAVALOR_RESTO
                     where OR_ENTITY = cur_bas.OR_ENTITY
                       and OR_CLUNICONTR = cur_bas.OR_CLUNICONTR
                       and OR_CONTRATO_GARANTIA = cur_gar.OR_CONTRATO_GARANTIA
                       and OR_CODGAR = cur_gar.OR_CODGAR;

                    UPDATE BAS_MEN.MEXICO_REPARTO_SALDO_RESTO 
                       SET OR_DISPTO = vv_OR_DISPTO_RESTO,
                           OR_DISBLE = vv_OR_DISBLE_RESTO
                     WHERE OR_IDREG = cur_gar.OR_IDREG;

                END IF;

                VN_NUMERR := 51;

                COMMIT;

            END IF;

        END LOOP;
        
        IF (round(vv_OR_DISPTO_RESTO,6) <> 0 OR round(vv_OR_DISBLE_RESTO,6) <> 0) AND VV_IDREG <> 1 THEN

          VN_NUMERR := 56;
          
          INSERT INTO BAS_MEN.MEXICO_REPARTO_GARANTIAS
                 (OR_IDREG, OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, OR_DIVISA, OR_DISPTO, OR_DISBLE, FI_ELIMI1, NEW_OR_IDREG, OR_DISPTO_ORIG, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV)
          VALUES (VV_OR_IDREG, cur_bas.OR_ENTITY, cur_bas.OR_CLUNICONTR, '999999999999999', 'FIC00500', vv_OR_DIVISA, vv_OR_DISPTO_RESTO, vv_OR_DISBLE_RESTO, 'NO', VV_IDREG, 
                  VV_OR_DISPTO_ORIG, vv_IN_SEG_HIP, vv_OR_TIPOFI, 9999);/* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */

        END IF;
        
    END LOOP;

    COMMIT;

    VN_NUMERR := 70;
    
    /* ini 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */
    FOR cur IN cur_MX_IMPLTV LOOP

      Update BAS_MEN.MEXICO_REPARTO_UPDATE_BASILEA Upd
         set Upd.OR_IMPLTV = cur.OR_IMPLTV
           , Upd.OR_VALTAS = cur.OR_VALTAS
           , Upd.OR_TIPGAR = cur.OR_TIPGAR
       WHERE Upd.OR_ENTITY     = cur.OR_ENTITY
         and Upd.OR_CLUNICONTR = cur.OR_CLUNICONTR;

      Update BAS_MEN.MEXICO_REPARTO_GARANTIAS Upd
         set Upd.OR_IMPLTV = cur.OR_IMPLTV
           , Upd.OR_VALTAS = cur.OR_VALTAS
           , Upd.OR_TIPGAR = cur.OR_TIPGAR
       WHERE Upd.OR_ENTITY     = cur.OR_ENTITY
         and Upd.OR_CLUNICONTR = cur.OR_CLUNICONTR;

    END LOOP;

    COMMIT;
    VN_NUMERR := 71;
    /* fin 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */
    
    Merge into BAS_MEN.BASILEA a
      using (select OR_IDREG, OR_CONTRATO_GARANTIA, OR_CODGAR, FI_ELIMI1, nvl(OR_IMPLTV, 9999) as OR_IMPLTV, IN_SEG_HIP, OR_TIPOFI, OR_VALTAS, OR_TIPGAR
               from BAS_MEN.MEXICO_REPARTO_UPDATE_BASILEA) b
         on (a.or_idreg = b.or_idreg)
       when MATCHED then
     UPDATE
        SET a.OR_CONTRATO_GARANTIA = b.OR_CONTRATO_GARANTIA,
            a.OR_CODGAR            = b.OR_CODGAR,
            a.FI_ELIMI1            = b.FI_ELIMI1,
            a.OR_IMPLTV            = b.OR_IMPLTV,  /* 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */
            a.IN_SEG_HIP           = b.IN_SEG_HIP, /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */
            a.OR_TIPOFI            = b.OR_TIPOFI,  /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */
            a.OR_VALTAS            = b.OR_VALTAS,  /* 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */
            a.OR_TIPGAR            = b.OR_TIPGAR;  /* 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */

    commit;

    VN_NUMERR := 72;

    SELECT MAX(OR_IDREG)
      INTO VV_IDREG
      FROM BAS_MEN.BASILEA;

    VN_NUMERR := 73;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.INSERT_REPARTO_GARANTIA_MX');

    INSERT /*+ parallel (I 4) */ INTO BAS_MEN.INSERT_REPARTO_GARANTIA_MX I
    SELECT /*+ parallel (I 4) */ ROWNUM + VV_IDREG AS OR_IDREG_NEW, A.OR_CTAIND, A.OR_ENTITY, A.FI_EPICON, A.IN_INDMOR
         , A.OR_FECOPE, A.OR_FECVTO, A.OR_VIDINI, A.OR_VIDRES, A.IN_ANTIGU, A.FI_TIPEXP, A.OR_AVALES, A.OR_AVALESCON
         , A.OR_IDPAIS, A.OR_PROVAPL, A.OR_IDPRO1, A.IN_FECMORA, A.OR_TIPOPE, A.OR_REFOPE, A.OR_TIPIDE, A.OR_IDPERS
         , A.OR_NOMPER, A.OR_PERSON, A.OR_IDECNO, A.OR_IDCNAE, A.IN_TIPOREG, A.IN_SEGMBS, A.IN_METODE, A.OR_IDMES
         , A.OR_NUMPERSONA, A.IN_NIFGRUPCON, A.IN_VTAGRU, A.IN_VTAGRU_CONS, A.IN_ACTIVO, A. IN_ACTIVO_CONS, A.IN_EXISTENCIAS
         , A.IN_ACTIVO_CIR, A.IN_NUMEMP, A.IN_IDGRUPO, A.IN_NOM_GRUP, A.IN_GRUP_IDPER, A.IN_GRUP_TIPIDE, A.IN_NUMEMP_CONS
         , A.OR_TITULARITAT, A.OR_NIFCIF, A.OR_NIFCIFIBM, A.OR_SEGGES, A.OR_REFOPE2, A.IN_SEGMBS0,INDCURA, A.FECHINICURA
         , A.TIPODEFAULT, A.FECHINISIMP, A.FECHFINSIMP
         , B.OR_CLUNICONTR, B.OR_CONTRATO_GARANTIA, B.OR_CODGAR, B.OR_DIVISA
         , B.OR_DISPTO, B.OR_DISPTO AS OR_DISPTOCON, B.OR_DISBLE, B.OR_DISBLE AS OR_DISBLECON, B.FI_ELIMI1, B.OR_IDREG AS OR_IDREG_ORI
         , A.OR_TIPAVA, B.IN_SEG_HIP, B.OR_TIPOFI, B.OR_IMPLTV, B.OR_VALTAS, B.OR_TIPGAR  /* 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */
      FROM BAS_MEN.BASILEA A,
           (SELECT DISTINCT OR_IDREG, OR_ENTITY, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR, OR_DIVISA, OR_DISPTO, OR_DISBLE, FI_ELIMI1
                 , nvl(OR_IMPLTV, 9999) as OR_IMPLTV, IN_SEG_HIP, OR_TIPOFI, OR_VALTAS, OR_TIPGAR /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */
              FROM BAS_MEN.MEXICO_REPARTO_GARANTIAS) B
     WHERE A.OR_IDREG = B.OR_IDREG;

    COMMIT;

    VN_NUMERR := 74;

    INSERT /*+ parallel (I 4) */ INTO BAS_MEN.BASILEA I (OR_IDREG, OR_CTAIND, OR_ENTITY, FI_EPICON, IN_INDMOR, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES
         , IN_ANTIGU, FI_TIPEXP, OR_AVALES, OR_AVALESCON, OR_IDPAIS, OR_PROVAPL, OR_IDPRO1, IN_FECMORA, OR_TIPOPE
         , OR_REFOPE, OR_TIPIDE, OR_IDPERS, OR_NOMPER, OR_PERSON, OR_IDECNO, OR_IDCNAE, IN_TIPOREG, IN_SEGMBS
         , IN_METODE, OR_IDMES, OR_NUMPERSONA, IN_NIFGRUPCON, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO, IN_ACTIVO_CONS
         , IN_EXISTENCIAS, IN_ACTIVO_CIR, IN_NUMEMP, IN_IDGRUPO, IN_NOM_GRUP, IN_GRUP_IDPER, IN_GRUP_TIPIDE
         , IN_NUMEMP_CONS, OR_TITULARITAT, OR_NIFCIF, OR_NIFCIFIBM, OR_SEGGES, OR_REFOPE2, IN_SEGMBS0, INDCURA
         , FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR
         , OR_DIVISA, OR_DISPTO, OR_DISPTOCON, OR_DISBLE, OR_DISBLECON, FI_ELIMI1, OR_TIPAVA, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV, OR_VALTAS, OR_TIPGAR) /* 17/12/2021 - NAV - HDEV-101683 - Implementación del sistema de reparto de garantías de México */
    SELECT /*+ parallel (S 4) */ OR_IDREG_NEW, OR_CTAIND, OR_ENTITY, FI_EPICON, IN_INDMOR, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES
         , IN_ANTIGU, FI_TIPEXP, OR_AVALES, OR_AVALESCON, OR_IDPAIS, OR_PROVAPL, OR_IDPRO1, IN_FECMORA, OR_TIPOPE
         , OR_REFOPE, OR_TIPIDE, OR_IDPERS, OR_NOMPER, OR_PERSON, OR_IDECNO, OR_IDCNAE, IN_TIPOREG, IN_SEGMBS
         , IN_METODE, OR_IDMES, OR_NUMPERSONA, IN_NIFGRUPCON, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO, IN_ACTIVO_CONS
         , IN_EXISTENCIAS, IN_ACTIVO_CIR, IN_NUMEMP, IN_IDGRUPO, IN_NOM_GRUP, IN_GRUP_IDPER, IN_GRUP_TIPIDE
         , IN_NUMEMP_CONS, OR_TITULARITAT, OR_NIFCIF, OR_NIFCIFIBM, OR_SEGGES, OR_REFOPE2, IN_SEGMBS0, INDCURA
         , FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, OR_CLUNICONTR, OR_CONTRATO_GARANTIA, OR_CODGAR
         , OR_DIVISA, OR_DISPTO, OR_DISPTOCON, OR_DISBLE, OR_DISBLECON, FI_ELIMI1, OR_TIPAVA, IN_SEG_HIP, OR_TIPOFI, OR_IMPLTV, OR_VALTAS, OR_TIPGAR  /* 16/11/2021 - FMRR - HDEV-86405 Nuevos campos IN_SEG_HIP, OR_TIPOFI para identificar las segundas hipotecas de México */
      FROM BAS_MEN.INSERT_REPARTO_GARANTIA_MX S;

    COMMIT;

/*************************************************************************/
    VN_NUMERR:= 99;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK'
     WHERE PROCES = '1.2 FNC_FILTRO '||PV_TABLA
       AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR('OR_IDREG: '||VV_OR_IDREG||'-NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '1.2 FNC_FILTRO '||PV_TABLA
        AND ESTAT  = 'INICIADO';


      commit;
      RAISE;

END;

PROCEDURE FNC_CREDDOC IS

   VV_GARANTIA        VARCHAR2(8):='?';
   VN_DISPTO          FLOAT;
   VN_AVALES          FLOAT;
   VN_DISPTO_2        FLOAT;
   VN_AVALES_2        FLOAT;
   VN_IMP_GAR         FLOAT;
   VV_TROBAT          VARCHAR2(2):='NO';
   VV_ELIMI1          VARCHAR2(15);
   VV_IDREG2          NUMBER(12);
   VV_LIMITE          FLOAT;
   VV_LIMITE_2        FLOAT;
   VV_REFOPE          NUMBER(16);
   VV_SALDO              FLOAT(126);
   VV_IMP_REAL_ESTATE FLOAT(126):= 0;

  CURSOR CRED_OFICIAL_CARIBE IS
    SELECT B.OR_IDREG, B.OR_REFOPE, LIMITE, OR_DISPTO, OR_DISBLE, ORIGEN, CODGAR
      FROM (SELECT /*+ parallel(a 4) */ a.*
              FROM BAS_MEN.BASILEA a
             WHERE FI_ELIMI1 IN ('NO', 'GAROPE')
               AND OR_PROCED IN ('ES-NEGDOC', 'RISC-PAIS', 'CREDOFIC','TARGES', 'FORFAITING','AVALES'))  B,
           BAS_MEN.MAESTRO_TARJETAS_CARIBE C,
           BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA A
     WHERE B.OR_REFOPE = A.OR_REFOPE
       AND A.OR_REFOPE = C.OR_REFOPE(+)
       AND A.ORIGEN NOT IN (/*'CACSA',*/ 'TCH');

  CURSOR CRED_OFICIAL_CARIBE_2 IS
    SELECT B.OR_IDREG, B.OR_REFOPE, OR_DISPTO, OR_DISBLE, OR_AJUVAL, A.OR_IDPERS,
           DECODE(OR_DISPTO, 0, DECODE(OR_DISBLE, 0, DECODE(OR_AJUVAL, 0, 0, OR_AJUVAL), OR_DISBLE), OR_DISPTO) SALDO , ORIGEN, CODGAR, IMPORTE
      FROM (SELECT /*+ parallel(a 4) */ a.*
              FROM BAS_MEN.BASILEA a
             WHERE FI_ELIMI1 IN ('NO', 'GAROPE')
               AND OR_PROCED IN ('ES-NEGDOC', 'RISC-PAIS', 'CREDOFIC','TARGES','AVALES'))  B,
           BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA A
     WHERE B.OR_IDPERS = A.OR_IDPERS
       AND A.ORIGEN IN (/*'CACSA',*/ 'TCH')
   ORDER BY ORIGEN, SALDO DESC;

  CURSOR CRED_DOC IS
   SELECT F.OR_REFOPE, TIP_GARANTIA, IMP_CRED_MASC, SALDO
     FROM (SELECT DISTINCT B.OR_REFOPE, NVL(A.TIP_GARANTIA,'?') TIP_GARANTIA,
                  A.IMP_CRED_MASC - A.RIE_CIAL_MASC IMP_CRED_MASC, B.SALDO
             FROM (select referencia, sum(IMP_CRED_MASC) IMP_CRED_MASC, sum(RIE_CIAL_MASC) RIE_CIAL_MASC, garante, TIP_GARANTIA
                    from BAS_MEN.CREDITOS_DOC_CONFIRMADOS
                   group by referencia, garante, TIP_GARANTIA) A,
                  (SELECT /*+ parallel(a 4) */ OR_REFOPE, SUM(OR_DISPTO + OR_AVALES) SALDO
                     FROM BAS_MEN.BASILEA A
                    WHERE (OR_PROCED IN ('ES-NEGDOC','CREDOFIC')
                       OR OR_TIPOPE = 'CD')
                      AND SUBSTR(OR_EPIIND,1,2) IN ('01', '03')
                      AND FI_ELIMI1 IN ('NO', 'GAROPE')
                    GROUP BY OR_REFOPE) B
            WHERE TO_NUMBER(REFERENCIA) = B.OR_REFOPE
              AND (A.IMP_CRED_MASC - A.RIE_CIAL_MASC) + 1 >= B.SALDO
           UNION
           SELECT DISTINCT B.OR_REFOPE, NVL(A.TIP_GARANTIA,'?') TIP_GARANTIA,
                  A.IMP_CRED_MASC - A.RIE_CIAL_MASC RIE_CIAL_MASC, B.SALDO
            FROM (select referencia, sum(IMP_CRED_MASC) IMP_CRED_MASC, sum(RIE_CIAL_MASC) RIE_CIAL_MASC, garante, TIP_GARANTIA
                    from BAS_MEN.CREDITOS_DOC_SILENRISK
                   group by referencia, garante, TIP_GARANTIA) A,
                 (SELECT /*+ parallel(a 4) */ OR_REFOPE, SUM(OR_DISPTO + OR_AVALES) SALDO
                    FROM BAS_MEN.BASILEA A
                   WHERE (OR_PROCED IN ('ES-NEGDOC','CREDOFIC')
                      OR OR_TIPOPE = 'CD')
                     AND SUBSTR(OR_EPIIND,1,2) IN ('01', '03')
                     AND FI_ELIMI1 IN ('NO', 'GAROPE')
                   GROUP BY OR_REFOPE) B
           WHERE TO_NUMBER(REFERENCIA) = B.OR_REFOPE
             AND (A.IMP_CRED_MASC - A.RIE_CIAL_MASC) + 1 >= B.SALDO
             AND GARANTE IS NOT NULL) f,
          BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA D
    WHERE F.OR_REFOPE = D.OR_REFOPE(+)
     AND D.OR_REFOPE IS NULL
     AND IMP_CRED_MASC <> 0;    -- 18/02/2021 -- FMRR--> corregir bug filtro

  -- 201402 (Se aÃ±ade que el garante no sea nulo  para que no genere duplicados ) JCVJCV
  CURSOR CRED_DOC_2 IS
   SELECT F.OR_IDREG, F.OR_EPIIND, F.OR_REFOPE, TIP_GARANTIA, F.IMP_CRED_MASC, F.SALDO,
          F.OR_DISPTO, F.OR_AVALES, F.OR_CODGAR, F.FI_ELIMI1
     FROM (SELECT C.OR_IDREG, C.OR_EPIIND, B.OR_REFOPE, NVL(A.TIP_GARANTIA,'?') TIP_GARANTIA,
                  A.IMP_CRED_MASC - A.RIE_CIAL_MASC IMP_CRED_MASC, B.SALDO,
                  C.OR_DISPTO, C.OR_AVALES, C.OR_CODGAR, C.FI_ELIMI1
             FROM (select referencia, sum(IMP_CRED_MASC) IMP_CRED_MASC, sum(RIE_CIAL_MASC) RIE_CIAL_MASC, garante, TIP_GARANTIA
                    from BAS_MEN.CREDITOS_DOC_CONFIRMADOS
                   group by referencia, garante, TIP_GARANTIA) A,
                  (SELECT /*+ parallel(a 4) */ OR_REFOPE, SUM(OR_DISPTO + OR_AVALES) SALDO
                     FROM BAS_MEN.BASILEA A
                    WHERE (OR_PROCED IN ('ES-NEGDOC','CREDOFIC')
                       OR OR_TIPOPE = 'CD')
                      AND SUBSTR(OR_EPIIND,1,2) IN ('01', '03')
                      AND FI_ELIMI1 IN ('NO', 'GAROPE')
                    GROUP BY OR_REFOPE) B,
                  (SELECT /*+ parallel(b 4) */ b.*
                     FROM BAS_MEN.BASILEA b
                    WHERE (OR_PROCED IN ('ES-NEGDOC','CREDOFIC')
                       OR OR_TIPOPE = 'CD')
                      AND SUBSTR(OR_EPIIND,1,2) IN ('01', '03')
                      AND FI_ELIMI1 IN ('NO', 'GAROPE')) C
            WHERE TO_NUMBER(REFERENCIA) = B.OR_REFOPE
              AND B.OR_REFOPE = C.OR_REFOPE
              AND (A.IMP_CRED_MASC - A.RIE_CIAL_MASC) + 1 < B.SALDO
           UNION
           SELECT C.OR_IDREG, C.OR_EPIIND, B.OR_REFOPE, NVL(A.TIP_GARANTIA,'?') TIP_GARANTIA,
                  A.IMP_CRED_MASC - A.RIE_CIAL_MASC RIE_CIAL_MASC, B.SALDO,
                  C.OR_DISPTO, C.OR_AVALES, C.OR_CODGAR, C.FI_ELIMI1
             FROM (select referencia, sum(IMP_CRED_MASC) IMP_CRED_MASC, sum(RIE_CIAL_MASC) RIE_CIAL_MASC, garante, TIP_GARANTIA
                    from BAS_MEN.CREDITOS_DOC_SILENRISK
                   group by referencia, garante, TIP_GARANTIA) A,
                  (SELECT /*+ parallel(e 4) */ OR_REFOPE, SUM(OR_DISPTO + OR_AVALES) SALDO
                     FROM BAS_MEN.BASILEA e
                    WHERE (OR_PROCED IN ('ES-NEGDOC','CREDOFIC')
                       OR OR_TIPOPE = 'CD')
                      AND SUBSTR(OR_EPIIND,1,2) IN ('01', '03')
                      AND FI_ELIMI1 IN ('NO', 'GAROPE')
                    GROUP BY OR_REFOPE) B,
                  (SELECT /*+ parallel(g 4) */ g.*
                     FROM BAS_MEN.BASILEA g
                    WHERE (OR_PROCED IN ('ES-NEGDOC','CREDOFIC')
                       OR OR_TIPOPE = 'CD')
                      AND SUBSTR(OR_EPIIND,1,2) IN ('01', '03')
                      AND FI_ELIMI1 IN ('NO', 'GAROPE')) C
            WHERE TO_NUMBER(REFERENCIA) = B.OR_REFOPE
              AND B.OR_REFOPE = C.OR_REFOPE
              AND (A.IMP_CRED_MASC - A.RIE_CIAL_MASC) + 1 < B.SALDO
              AND GARANTE IS NOT NULL) F,
          BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA D
    WHERE F.OR_REFOPE = D.OR_REFOPE(+)
      AND D.OR_REFOPE IS NULL
      AND IMP_CRED_MASC <> 0       -- 18/02/2021 -- FMRR--> corregir bug filtro
    ORDER BY OR_REFOPE, OR_EPIIND;

BEGIN

   INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
          VALUES ('3.5 FNC_CREDDOC '||PV_TABLA, SYSDATE, 'INICIADO');

   COMMIT;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA');

  COMMIT;

  INSERT INTO BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA
       SELECT DISTINCT OR_REFOPE, ORIGEN, 'GR 12101', 0, '?'
         FROM DCRPROP_MENSUAL.OPERACIONES_BICSA;

  COMMIT;

  INSERT INTO BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA
       SELECT DISTINCT OR_REFOPE, ORIGEN, 'GR 12101', 0, '?'
         FROM DCRPROP_MENSUAL.OPERACIONES_BFI;

  COMMIT;

  INSERT INTO BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA
       SELECT DISTINCT OR_REFOPE, ORIGEN, 'GR 12101', 0, '?'
         FROM DCRPROP_MENSUAL.OPERACIONES_BEC;

  COMMIT;

  INSERT INTO BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA
       SELECT DISTINCT OR_REFOPE, 'TARJETAS', '?',0, '?'
         FROM DCRPROP_MENSUAL.MAESTRO_TARJETAS_CARIBE;

  COMMIT;

  INSERT /*+ parallel(b 4) */ INTO BAS_MEN.MAESTRO_OPERACIONES_CREDOFICCA b
      SELECT /*+ parallel(a 4) */ DISTINCT OR_REFOPE, 'FINTUR', 'GR 12101', 0, '12-777002371360'
         FROM BAS_MEN.BASILEA a
        WHERE OR_CODIGO_BIC = 'FINTCUX1TLX'
          and or_proced = 'CREDOFIC'
          and or_idpers = '12-777002371360'
          and substr(or_refope2,1,4) = 'CU09';

  COMMIT;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TARJETAS_CARIBE');

  INSERT INTO BAS_MEN.MAESTRO_TARJETAS_CARIBE
  SELECT *
    FROM DCRPROP_MENSUAL.MAESTRO_TARJETAS_CARIBE;

  COMMIT;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_CRED_CARIBE');

  COMMIT;

  --Si el dispuesto es 0 y el garante es diferente al bic, este no se considera como tal. xcg, 10/01/2014.

  update bas_men.CREDITOS_DOC_SILENRISK
     set garante = null
   where IMP_CRED_MASC = 0
     and codigobic <> garante;

  commit;

  update BAS_MEN.CREDITOS_DOC_CONFIRMADOS
     set garante = null
   where IMP_CRED_MASC = 0
     and codigobic <> garante;

  commit;

  --Cursor para las operaciones de crÃ©dito oficial Caribe (Cuba).
  FOR CUR IN CRED_OFICIAL_CARIBE LOOP

    VV_TROBAT:= 'NO';

    IF CUR.ORIGEN = 'TARJETAS' THEN

       IF CUR.LIMITE >= 10000 THEN

          UPDATE BAS_MEN.BASILEA
             SET OR_CODGAR = 'GR 12101'
           WHERE OR_IDREG = CUR.OR_IDREG;

       ELSIF CUR.LIMITE < 10000 THEN

             BEGIN
                SELECT ((CUR.LIMITE*20)/100) - SUM(OR_DISPTO)
                  INTO VV_LIMITE
                  FROM BAS_MEN.BASILEA_CRED_CARIBE
                 WHERE OR_REFOPE = CUR.OR_REFOPE;
             EXCEPTION
                  WHEN OTHERS THEN
                       VV_LIMITE:= (CUR.LIMITE*20)/100;
             END;

             IF VV_LIMITE IS NULL THEN
                VV_LIMITE:= (CUR.LIMITE*20)/100;
             END IF;

             IF VV_LIMITE >= CUR.OR_DISPTO AND CUR.OR_DISPTO <> 0 THEN

                INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
                     SELECT A.* FROM BAS_MEN.BASILEA A
                      WHERE OR_IDREG = CUR.OR_IDREG;

                UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                   SET OR_CODGAR = 'GR 12101',
                       FI_ELIMI1 = 'GAROPE'
                 WHERE OR_IDREG = CUR.OR_IDREG;

                 UPDATE BAS_MEN.BASILEA
                    SET OR_CODGAR = 'GR 12101'
                  WHERE OR_IDREG = CUR.OR_IDREG;

             ELSIF VV_LIMITE < CUR.OR_DISPTO AND CUR.OR_DISPTO <> 0 THEN

                   VV_TROBAT:= 'SI';

                   INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
                     SELECT A.* FROM BAS_MEN.BASILEA A
                      WHERE OR_IDREG = CUR.OR_IDREG;

                   UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                      SET OR_DISPTO = VV_LIMITE,
                          OR_DISPTOCON = VV_LIMITE,
                          OR_CODGAR = 'GR 12101',
                          FI_ELIMI1 = 'NO'
                    WHERE OR_IDREG = CUR.OR_IDREG;

                    VV_LIMITE_2:= CUR.OR_DISPTO - VV_LIMITE;

                   INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
                     SELECT A.* FROM BAS_MEN.BASILEA A
                      WHERE OR_IDREG = CUR.OR_IDREG;

                   UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                      SET OR_DISPTO = VV_LIMITE_2,
                          OR_DISPTOCON = VV_LIMITE_2,
                          FI_ELIMI1 = 'NO'
                    WHERE OR_IDREG = CUR.OR_IDREG
                      AND OR_DISPTO <> VV_LIMITE;

             ELSIF VV_LIMITE >= CUR.OR_DISBLE AND CUR.OR_DISBLE <> 0 THEN

                   UPDATE BAS_MEN.BASILEA
                      SET OR_CODGAR = 'GR 12101'
                    WHERE OR_IDREG = CUR.OR_IDREG;

             ELSIF VV_LIMITE < CUR.OR_DISBLE AND CUR.OR_DISBLE <> 0 AND VV_LIMITE > 0 THEN

                   VV_TROBAT:= 'SI';

                   INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
                     SELECT A.* FROM BAS_MEN.BASILEA A
                      WHERE OR_IDREG = CUR.OR_IDREG;

                   UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                      SET OR_DISBLE = VV_LIMITE,
                          OR_DISBLECON = VV_LIMITE,
                          OR_CODGAR = 'GR 12101',
                          FI_ELIMI1 = 'NO'
                    WHERE OR_IDREG = CUR.OR_IDREG;

                    VV_LIMITE_2:= CUR.OR_DISBLE - VV_LIMITE;

                   INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
                     SELECT A.* FROM BAS_MEN.BASILEA A
                      WHERE OR_IDREG = CUR.OR_IDREG;

                   UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                      SET OR_DISBLE = VV_LIMITE_2,
                          OR_DISBLECON = VV_LIMITE_2,
                          FI_ELIMI1 = 'NO'
                    WHERE OR_IDREG = CUR.OR_IDREG
                      AND OR_DISBLE <> VV_LIMITE;

             END IF;

       END IF;

       IF VV_TROBAT = 'SI' THEN
          UPDATE BAS_MEN.BASILEA
             SET FI_ELIMI1 = 'GAROPE'
           WHERE OR_IDREG = CUR.OR_IDREG;

       END IF;

    ELSE
         UPDATE BAS_MEN.BASILEA
          SET OR_CODGAR = CUR.CODGAR
        WHERE OR_IDREG = CUR.OR_IDREG;

    END IF;

  END LOOP;

  COMMIT;

  --Cursor para las operaciones de crÃ©dito oficial Caribe (Cuba).
  FOR CUR IN CRED_OFICIAL_CARIBE_2 LOOP

    VV_TROBAT:= 'NO';

    BEGIN
       SELECT CUR.IMPORTE - SUM(OR_DISPTO+OR_DISBLE+OR_AJUVAL) VN_SALDO
         INTO VV_LIMITE
         FROM BAS_MEN.BASILEA_CRED_CARIBE
        WHERE OR_IDPERS = CUR.OR_IDPERS;
    EXCEPTION
         WHEN OTHERS THEN
              VV_LIMITE:= CUR.IMPORTE;
    END;

    IF VV_LIMITE IS NULL THEN
       VV_LIMITE:= CUR.IMPORTE;
    END IF;

    IF VV_LIMITE >= CUR.SALDO THEN

       INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
            SELECT A.* FROM BAS_MEN.BASILEA A
             WHERE OR_IDREG = CUR.OR_IDREG;

       UPDATE BAS_MEN.BASILEA_CRED_CARIBE
          SET OR_CODGAR = 'GR 12101',
              FI_ELIMI1 = 'GAROPE'
        WHERE OR_IDREG = CUR.OR_IDREG;

       UPDATE BAS_MEN.BASILEA
          SET OR_CODGAR = 'GR 12101'
        WHERE OR_IDREG = CUR.OR_IDREG;

        COMMIT;

    ELSIF VV_LIMITE < CUR.SALDO AND CUR.SALDO <> 0 AND VV_LIMITE > 0 THEN

          VV_TROBAT:= 'SI';

          INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
            SELECT A.* FROM BAS_MEN.BASILEA A
             WHERE OR_IDREG = CUR.OR_IDREG;

          IF CUR.OR_DISPTO = CUR.SALDO THEN

             UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                SET OR_DISPTO = VV_LIMITE,
                    OR_DISPTOCON = VV_LIMITE,
                    OR_CODGAR = 'GR 12101',
                    FI_ELIMI1 = 'NO'
              WHERE OR_IDREG = CUR.OR_IDREG;

          ELSIF CUR.OR_DISBLE = CUR.SALDO THEN

                UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                   SET OR_DISBLE = VV_LIMITE,
                       OR_DISBLECON = VV_LIMITE,
                       OR_CODGAR = 'GR 12101',
                       FI_ELIMI1 = 'NO'
                 WHERE OR_IDREG = CUR.OR_IDREG;

          ELSIF CUR.OR_AJUVAL = CUR.SALDO THEN

                UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                   SET OR_AJUVAL = VV_LIMITE,
                       OR_AJUVALCON = VV_LIMITE,
                       OR_CODGAR = 'GR 12101',
                       FI_ELIMI1 = 'NO'
                 WHERE OR_IDREG = CUR.OR_IDREG;

          END IF;

          VV_LIMITE_2:= CUR.SALDO - VV_LIMITE;

          INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE
            SELECT A.* FROM BAS_MEN.BASILEA A
             WHERE OR_IDREG = CUR.OR_IDREG;

          IF CUR.OR_DISPTO = CUR.SALDO THEN

             UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                SET OR_DISPTO = VV_LIMITE_2,
                    OR_DISPTOCON = VV_LIMITE_2,
                    FI_ELIMI1 = 'NO'
              WHERE OR_IDREG = CUR.OR_IDREG
                AND OR_DISPTO <> VV_LIMITE;

          ELSIF CUR.OR_DISBLE = CUR.SALDO THEN

                UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                   SET OR_DISBLE = VV_LIMITE_2,
                       OR_DISBLECON = VV_LIMITE_2,
                       FI_ELIMI1 = 'NO'
                 WHERE OR_IDREG = CUR.OR_IDREG
                   AND OR_DISBLE <> VV_LIMITE;

          ELSIF CUR.OR_AJUVAL = CUR.SALDO THEN

                UPDATE BAS_MEN.BASILEA_CRED_CARIBE
                   SET OR_AJUVAL = VV_LIMITE_2,
                       OR_AJUVALCON = VV_LIMITE_2,
                       FI_ELIMI1 = 'NO'
                 WHERE OR_IDREG = CUR.OR_IDREG
                   AND OR_AJUVAL <> VV_LIMITE;

          END IF;

    END IF;

    IF VV_TROBAT = 'SI' THEN
       UPDATE BAS_MEN.BASILEA
          SET FI_ELIMI1 = 'GAROPE'
        WHERE OR_IDREG = CUR.OR_IDREG;

    END IF;

  END LOOP;

  COMMIT;

  --Nos quedamos con el mayor Idreg que haya en BDD.
  SELECT MAX(OR_IDREG)
    INTO VV_IDREG2
    FROM BAS_MEN.BASILEA;

  DELETE BAS_MEN.BASILEA_CRED_CARIBE
   WHERE FI_ELIMI1 = 'GAROPE';

  COMMIT;

  --Tabla de trazabilidad con el nuevo idreg ficticio y el idreg anterior al que hace referencia.
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_CRED_CARIBE_AUX');

  INSERT INTO BAS_MEN.BASILEA_CRED_CARIBE_AUX
  SELECT VV_IDREG2 + ROWNUM, OR_IDREG, 'Creditos CARIBE'
    FROM BAS_MEN.BASILEA_CRED_CARIBE;

  COMMIT;

  --Actualizamos el idreg para quedarnos con los ficticios.
  UPDATE BAS_MEN.BASILEA_CRED_CARIBE
     SET OR_IDREG = ROWNUM + VV_IDREG2;

  INSERT INTO BAS_MEN.BASILEA
  SELECT * FROM BAS_MEN.BASILEA_CRED_CARIBE;

  COMMIT;

  --Cursor para las operaciones en que el saldo de BDD (dispto + avales) queda cubierto por la garantÃ­a.
  FOR CUR IN CRED_DOC LOOP

      IF CUR.TIP_GARANTIA IN ('CIR', 'SIL') THEN -- GarantÃ­a confirmada por otro Banco y Silent Risk.
            VV_GARANTIA := 'GR 21106';
      ELSIF CUR.TIP_GARANTIA = 'CAS' THEN --GarantÃ­a Dineraria
            VV_GARANTIA := 'GR 12101';
      ELSIF CUR.TIP_GARANTIA IN ('IND', 'GLO') THEN -- GarantÃ­a Cesce: individuales o Globales.
            VV_GARANTIA := 'GR 21104';
      END IF;

      UPDATE BAS_MEN.BASILEA
         SET OR_CODGAR = VV_GARANTIA
       WHERE OR_REFOPE = CUR.OR_REFOPE;

  END LOOP;

  COMMIT;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_CRED_DOC');

  COMMIT;

  --Cursor para las operaciones en que el saldo de BDD (dispto + avales) no queda cubierto por la garantÃ­a.
  --Las operaciones se marcarÃ¡n a eliminar como 'GAROPE' y en su lugar se insertarÃ¡n regs ficticios
  --con las nuevas garantÃ­as (excepto para Silen Risk) y el reparto de saldos.

  FOR CUR IN CRED_DOC_2 LOOP

      VV_TROBAT:= 'NO';

      IF CUR.TIP_GARANTIA = 'CAS' THEN --GarantÃ­a Dineraria.
         VV_GARANTIA := 'GR 12101';
         VV_ELIMI1 := CUR.FI_ELIMI1;
      ELSIF CUR.TIP_GARANTIA IN ('CIR', 'SIL') THEN --GarantÃ­a confirmada por otro Banco y Silent Risk.
            VV_GARANTIA := 'GR 21106';
            VV_ELIMI1 := CUR.FI_ELIMI1;
      END IF;

      IF CUR.TIP_GARANTIA IN ('CAS', 'CIR', 'SIL') THEN

         IF CUR.OR_DISPTO <> 0 AND CUR.IMP_CRED_MASC <> 0 THEN --Activo y con garantÃ­a.

            BEGIN
               SELECT CUR.IMP_CRED_MASC - SUM(OR_DISPTO)
                 INTO VN_IMP_GAR
                 FROM BAS_MEN.BASILEA_CRED_DOC
                WHERE OR_REFOPE = CUR.OR_REFOPE
                GROUP BY OR_REFOPE;
            EXCEPTION
                 WHEN OTHERS THEN
                      VN_IMP_GAR:= CUR.IMP_CRED_MASC;
            END;

            IF VN_IMP_GAR IS NULL THEN
               VN_IMP_GAR:= CUR.IMP_CRED_MASC;
            END IF;

            --Si la garantÃ­a cubre la parte del activo, se inserta un registro con el tipo de garantÃ­a correspondiente.
            IF VN_IMP_GAR >= CUR.OR_DISPTO THEN

               INSERT INTO BAS_MEN.BASILEA_CRED_DOC
                    SELECT A.* FROM BAS_MEN.BASILEA A
                     WHERE OR_IDREG = CUR.OR_IDREG;

               UPDATE BAS_MEN.BASILEA_CRED_DOC
                  SET OR_CODGAR = VV_GARANTIA,
                      FI_ELIMI1 = VV_ELIMI1
                WHERE OR_IDREG = CUR.OR_IDREG;

               VV_TROBAT:= 'SI';

            --Si la garantÃ­a no cubre la parte del activo, se inserta un registro con la nueva garantÃ­a y con el saldo garantizado...
            ELSIF VN_IMP_GAR > 0 THEN

                 VN_DISPTO := VN_IMP_GAR;
                 VV_TROBAT:= 'SI';

                 INSERT INTO BAS_MEN.BASILEA_CRED_DOC
                      SELECT A.* FROM BAS_MEN.BASILEA A
                       WHERE OR_IDREG = CUR.OR_IDREG;

                 UPDATE BAS_MEN.BASILEA_CRED_DOC
                    SET OR_DISPTO = VN_DISPTO,
                        OR_DISPTOCON = VN_DISPTO,
                        OR_CODGAR = VV_GARANTIA,
                        FI_ELIMI1 = VV_ELIMI1
                  WHERE OR_IDREG = CUR.OR_IDREG;

                 -- ...y otro registro Ãºnicamente con el saldo restante, se deja la garantÃ­a original.
                 VN_DISPTO_2 := CUR.OR_DISPTO - VN_IMP_GAR;

                 INSERT INTO BAS_MEN.BASILEA_CRED_DOC
                      SELECT A.* FROM BAS_MEN.BASILEA A
                       WHERE OR_IDREG = CUR.OR_IDREG;

                 UPDATE BAS_MEN.BASILEA_CRED_DOC
                    SET OR_DISPTO = VN_DISPTO_2,
                        OR_DISPTOCON = VN_DISPTO_2
                  WHERE OR_IDREG = CUR.OR_IDREG
                    AND OR_DISPTO <> VN_DISPTO;

            END IF;

         ELSIF CUR.OR_AVALES <> 0 AND CUR.IMP_CRED_MASC <> 0 THEN --Cuentas de Orden y con garantÃ­a.

               BEGIN
                 SELECT CUR.IMP_CRED_MASC - SUM(OR_DISPTO + OR_AVALES)
                   INTO VN_IMP_GAR
                   FROM BAS_MEN.BASILEA_CRED_DOC
                  WHERE OR_REFOPE = CUR.OR_REFOPE
                  GROUP BY OR_REFOPE;
               EXCEPTION
                    WHEN OTHERS THEN
                         VN_IMP_GAR:= CUR.IMP_CRED_MASC;
               END;

               IF VN_IMP_GAR IS NULL THEN
                  VN_IMP_GAR:= CUR.IMP_CRED_MASC;
               END IF;

               --Si la garantÃ­a cubre la parte de la cuenta de orden, se inserta un registro con el tipo de garantÃ­a correspondiente.
               IF VN_IMP_GAR >= CUR.OR_AVALES THEN

                  INSERT INTO BAS_MEN.BASILEA_CRED_DOC
                       SELECT A.* FROM BAS_MEN.BASILEA A
                        WHERE OR_IDREG = CUR.OR_IDREG;

                  UPDATE BAS_MEN.BASILEA_CRED_DOC
                     SET OR_CODGAR = VV_GARANTIA,
                         FI_ELIMI1 = VV_ELIMI1
                   WHERE OR_IDREG = CUR.OR_IDREG;

                  VV_TROBAT:= 'SI';

               --Si la garantÃ­a no cubre la parte de la cuenta de orden, se inserta un registro con la nueva garantÃ­a y el saldo garantizado...
               ELSIF VN_IMP_GAR > 0 THEN

                  VN_AVALES := VN_IMP_GAR;
                  VV_TROBAT:= 'SI';

                  INSERT INTO BAS_MEN.BASILEA_CRED_DOC
                       SELECT A.* FROM BAS_MEN.BASILEA A
                        WHERE OR_IDREG = CUR.OR_IDREG;

                  UPDATE BAS_MEN.BASILEA_CRED_DOC
                     SET OR_AVALES = VN_AVALES,
                         OR_AVALESCON = VN_AVALES,
                         OR_CODGAR = VV_GARANTIA,
                         FI_ELIMI1 = VV_ELIMI1
                   WHERE OR_IDREG = CUR.OR_IDREG;

                  -- ...y otro registro Ãºnicamente con el saldo restante, se deja la garantÃ­a original.
                  VN_AVALES_2 := CUR.OR_AVALES - VN_IMP_GAR;

                  INSERT INTO BAS_MEN.BASILEA_CRED_DOC
                       SELECT A.* FROM BAS_MEN.BASILEA A
                        WHERE OR_IDREG = CUR.OR_IDREG;

                  UPDATE BAS_MEN.BASILEA_CRED_DOC
                     SET OR_AVALES = VN_AVALES_2,
                         OR_AVALESCON = VN_AVALES_2
                   WHERE OR_IDREG = CUR.OR_IDREG
                     AND OR_AVALES <> VN_AVALES;

               END IF;
         END IF;

         IF VV_TROBAT = 'SI' THEN

            UPDATE BAS_MEN.BASILEA
               SET FI_ELIMI1 = 'GAROPE'
             WHERE OR_IDREG = CUR.OR_IDREG;
             NULL;

         END IF;

      -- GarantÃ­a Cesce: individuales o Globales. Se da por hecho que la garantÃ­a cubre la totalidad de la operaciÃ³n.
      ELSIF CUR.TIP_GARANTIA IN ('IND', 'GLO') THEN

            UPDATE BAS_MEN.BASILEA
               SET OR_CODGAR = 'GR 21104'
             WHERE OR_REFOPE = CUR.OR_REFOPE;
             NULL;

      END IF;

  END LOOP;

  COMMIT;

  --Nos quedamos con el mayor Idreg que haya en BDD.
  SELECT MAX(OR_IDREG)
    INTO VV_IDREG2
    FROM BAS_MEN.BASILEA;

  --Tabla de trazabilidad con el nuevo idreg ficticio y el idreg anterior al que hace referencia.
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_CRED_DOC_AUX');

  INSERT INTO BAS_MEN.BASILEA_CRED_DOC_AUX
       SELECT VV_IDREG2 + ROWNUM, OR_IDREG, 'Creditos Documentarios'
         FROM BAS_MEN.BASILEA_CRED_DOC;

  COMMIT;

  --Actualizamos el idreg para quedarnos con los ficticios.
  UPDATE BAS_MEN.BASILEA_CRED_DOC
     SET OR_IDREG = ROWNUM + VV_IDREG2;

  INSERT INTO BAS_MEN.BASILEA
       SELECT * FROM BAS_MEN.BASILEA_CRED_DOC;

  COMMIT;

   --CrÃ©ditos Oficiales de Angola, insertamos dos registros por cada operaciÃ³n (uno serÃ¡ el 95% del importe y el otro el 5%)
  ----------------------------------------------------------------
   --                   Parte con el 95% del saldo                --
   ----------------------------------------------------------------

  INSERT INTO BAS_MEN.BASILEA_CRED_DOC
       SELECT A.*
         FROM BAS_MEN.BASILEA A,
              BAS_MEN.CREDITO_OFICIAL_COBERTURA B
        WHERE A.OR_IDPERS = B.OR_IDPERS;

  UPDATE BAS_MEN.BASILEA_CRED_DOC
     SET OR_DISPTO = (OR_DISPTO*95)/100,
         OR_DISBLE = (OR_DISBLE*95)/100,
         OR_AVALES = (OR_AVALES*95)/100,
         OR_FUTURS = (OR_FUTURS*95)/100,
         OR_REPOS  = (OR_REPOS*95)/100,
         OR_AJUVAL = (OR_AJUVAL*95)/100,
         OR_FAIRVA = (OR_FAIRVA*95)/100,
         OR_DISPTOCON = (OR_DISPTOCON*95)/100,
         OR_DISBLECON = (OR_DISBLECON*95)/100,
         OR_AVALESCON = (OR_AVALESCON*95)/100,
         OR_FUTURSCON = (OR_FUTURSCON*95)/100,
         OR_REPOSCON  = (OR_REPOSCON*95)/100,
         OR_AJUVALCON = (OR_AJUVALCON*95)/100,
         OR_FAIRVACON = (OR_FAIRVACON*95)/100,
         OR_PROVAPL = (OR_PROVAPL*95)/100,
         or_ctacli = 95
   WHERE OR_IDPERS IN (SELECT OR_IDPERS FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA);

   ----------------------------------------------------------------
   --                   Parte con el 5% del saldo                --
   ----------------------------------------------------------------

   --Insertamos un registro con la operaciÃ³n correspondiente
  INSERT INTO BAS_MEN.BASILEA_CRED_DOC
       SELECT A.*
         FROM BAS_MEN.BASILEA A,
              BAS_MEN.CREDITO_OFICIAL_COBERTURA B
        WHERE A.OR_IDPERS = B.OR_IDPERS;

  UPDATE BAS_MEN.BASILEA_CRED_DOC
     SET OR_DISPTO = (OR_DISPTO*5)/100,
         OR_DISBLE = (OR_DISBLE*5)/100,
         OR_AVALES = (OR_AVALES*5)/100,
         OR_FUTURS = (OR_FUTURS*5)/100,
         OR_REPOS  = (OR_REPOS*5)/100,
         OR_AJUVAL = (OR_AJUVAL*5)/100,
         OR_FAIRVA = (OR_FAIRVA*5)/100,
         OR_DISPTOCON = (OR_DISPTOCON*5)/100,
         OR_DISBLECON = (OR_DISBLECON*5)/100,
         OR_AVALESCON = (OR_AVALESCON*5)/100,
         OR_FUTURSCON = (OR_FUTURSCON*5)/100,
         OR_REPOSCON  = (OR_REPOSCON*5)/100,
         OR_AJUVALCON = (OR_AJUVALCON*5)/100,
         OR_FAIRVACON = (OR_FAIRVACON*5)/100,
         OR_PROVAPL = (OR_PROVAPL*5)/100
   WHERE OR_IDPERS IN (SELECT OR_IDPERS FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA)
     AND or_ctacli <> 95;

  --Nos quedamos con el mayor Idreg que haya en BDD.
  SELECT MAX(OR_IDREG)
    INTO VV_IDREG2
    FROM BAS_MEN.BASILEA;

  --Tabla de trazabilidad con el nuevo idreg ficticio y el idreg anterior al que hace referencia.
  INSERT INTO BAS_MEN.BASILEA_CRED_DOC_AUX
       SELECT VV_IDREG2 + ROWNUM, OR_IDREG, 'Creditos angola'
         FROM BAS_MEN.BASILEA_CRED_DOC
        WHERE OR_IDPERS IN (SELECT OR_IDPERS FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA);

  COMMIT;

  --Actualizamos el idreg para quedarnos con los ficticios.
  UPDATE BAS_MEN.BASILEA_CRED_DOC
     SET OR_IDREG = ROWNUM + VV_IDREG2
   WHERE OR_IDPERS IN (SELECT OR_IDPERS FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA);

  COMMIT;


   ----------------------------------------------------------------
   --                EliminaciÃ³n e InserciÃ³n en BDD              --
   ----------------------------------------------------------------
   UPDATE BAS_MEN.BASILEA
      SET FI_ELIMI1 = 'GAROPE'
    WHERE OR_IDPERS IN (SELECT OR_IDPERS FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA);

   COMMIT;

   INSERT INTO BAS_MEN.BASILEA
        SELECT * FROM BAS_MEN.BASILEA_CRED_DOC
         WHERE OR_IDPERS IN (SELECT OR_IDPERS FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA);

  COMMIT;

  UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           REG_UPD_OK = VN_COUNT
     WHERE PROCES = '3.5 FNC_CREDDOC '||PV_TABLA
       AND ESTAT  = 'INICIADO';

  PV_RET := 'OK';

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '3.5 FNC_CREDDOC '||PV_TABLA
        AND ESTAT  = 'INICIADO';

      commit;
      RAISE;

END;

--PRINCIPAL--
BEGIN

  -- 201611 Se elimina el procedimiento de filto renta fija y pasa a SegmentaciÃ³n

   IF PV_OPC = 1 THEN
     --IF PV_RET1 = 'OK' THEN
        FNC_FILTRO_BASILEA;
     --END IF;
  ELSIF PV_OPC = 2 THEN
     IF PV_RET1 = 'OK' THEN
        FNC_CREDDOC;
     END IF;
  END IF;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_FILTRO';


create or replace PROCEDURE    BAS_MEN.BASI_FILTRO IS

   vProces         CONSTANT VARCHAR2(40)   := 'BASI_FILTRO';
   vNumErr         NUMBER(2)               DEFAULT 1;
   vCodi           NUMBER(10)              DEFAULT 0;
   vDescripcio     VARCHAR2(255)           DEFAULT '';

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';

BEGIN

  commit;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  vNumErr := 1;

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  vNumErr := 2;
  --
  -- Proceso de Filtro (BASILEA) -- FNC_FILTRO_BASILEA
  --
  BAS_MEN.FNC_FILTRO(VV_TABLA, 1, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO);

  COMMIT;
  vNumErr := 3;

  -- Validación de existencia de datos. Si no EXISTIERAN  abortará (La función realiza un raise).
  SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  --
  -- Proceso de Filtro para Credito Caribe y  Créditos Documentarios -- FNC_CREDDOC
  --
  BAS_MEN.FNC_FILTRO(VV_TABLA, 2, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO);

  COMMIT;
  vNumErr := 4;

  --Llama a la funcion de UPDATES BASILEA
  BAS_MEN.UPDATE_PROCESO('UPDATE_PROCESO_FILTRO');
  COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;

/

select * from sys.user_errors WHERE NAME = 'BASI_FILTRO';


--bka00120=====================================================================================================
Select 'bka00120' As Compilando from dual;
   
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_1 IS

    PROCEDURE Fun_Llenado_Datos_Auxiliares IS

        CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'Fun_Llenado_Datos_Auxiliares';
        VN_NumErr              NUMBER(3)              DEFAULT 0;
        VV_Mensaje             VARCHAR2(255)          DEFAULT '';

    BEGIN

    --
    -- Info. en el control del proceso del ini de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

    COMMIT;

    -- Borrado de las tablas temporales
    VN_NumErr := 1;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_GARANT_TMP_1';
    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_basilea_TMP_1';
    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_BASILEA_TMP_2';
    COMMIT;

    /* OPERACIONES a garantizar */
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_BASILEA_TMP_RESTO';
    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ofex_contratos_contrav';
    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ofex_garantias_contrav';
    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MAESTRO_FINCA_INMOBILIARIA';
    commit;

    INSERT INTO BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
    SELECT * FROM DCRPROP_MENSUAL.MAESTRO_FINCA_INMOBILIARIA_SAS;

    COMMIT;

    --
    VN_NumErr := 2;

    INSERT INTO BAS_MEN.ofex_contratos_contrav
    SELECT BRANCH_CODE, MESCTR, CONTRACT_ID, OPERATION_DATE, RECORD_TYPE, APPLICATION, CUSTOMER, CURRENCY, AMOUNT*-1, AMOUNT_LC *-1,
           (amount/nvl(cambio_ctr.CANVIO_BCE,1))*-1, DRAFT_AMOUNT, VALUE_FROM, VALUE_TO, FINISH_BUILDING, ASSET_TYPE, LOCAL_ID,
           CASE
              WHEN CONCEDIDO > 0 THEN  CONCEDIDO
              ELSE CONCEDIDO * -1
           END AS CONCEDIDO,
           CASE
              WHEN CONCEDIDO > 0 THEN  nvl(CONCEDIDO,0)/nvl(cambio_ctr.CANVIO_BCE,1)
              ELSE nvl(CONCEDIDO,0)/nvl(cambio_ctr.CANVIO_BCE,1) * -1
           END AS CONCEDIDO_CONTRAV,
           TIPO_PRESTAMO, DESTINO_PRESTAMO, ORIGINAL_RC
      FROM BAS_MEN.ofex_t24_contratos ctr
         , BAS_MEN.TIPOS_BCE cambio_ctr
     WHERE ctr.CURRENCY = cambio_ctr.divisa(+)
       AND trim(ctr.application) not in('FX','LI')
       AND not (trim(ctr.application) in('LC')
       AND (AMOUNT*-1)<0);

    COMMIT;
    --
    VN_NumErr := 3;

    INSERT INTO BAS_MEN.ofex_garantias_contrav
    SELECT BRANCH_CODE, MESCTR, rtrim(COLLATERAL_ID) as COLLATERAL_ID, CUSTOMER_GUARANTOR, COLLATERAL_TYPE, CURRENCY, AMOUNT, AMOUNT_LC
         , AMOUNT/nvl(cambio_gar.CANVIO_BCE,1), VALUE_FROM, VALUE_TO, TIPO_FINCA, TIPO_GARANTIA, CODIGO_GARANTIA, VALOR_TASACION
         , nvl(VALOR_TASACION,0)/nvl(cambio_TAS.CANVIO_BCE,1), NOMBRE_AVALISTA, PAIS_AVALISTA, RATING_AVALISTA, TIPO_AVALISTA, TIPO_RATING
      FROM BAS_MEN.ofex_t24_garantias gar
         , BAS_MEN.TIPOS_BCE cambio_GAR
         , BAS_MEN.TIPOS_BCE cambio_TAS
     WHERE GAR.CURRENCY = cambio_GAR.divisa(+)
       AND CASE BRANCH_CODE
              WHEN 801 then 'EUR'
              WHEN 800 then 'GBP'
              --WHEN 825 then 'USD'
              WHEN 813 then 'MAD'
              WHEN 821 then 'EUR'
              ELSE GAR.CURRENCY
           END = cambio_TAS.divisa(+);

    COMMIT;
    --
    VN_NumErr := 4;

    INSERT INTO BAS_MEN.OFEX_GARANT_TMP_1
    SELECT distinct ctr.BRANCH_CODE, ctr.MESCTR, ctr.CONTRACT_ID, ctr.CUSTOMER, ctr_gar.COLLATERAL_ID, gar.CURRENCY, gar.AMOUNT
         , gar.AMOUNT_contrav, gar.AMOUNT_contrav, gar.AMOUNT_LC, ctr.CURRENCY, ctr.amount, ctr.amount_contrav, gar.VALUE_FROM
         , gar.VALUE_TO, param.GARANTIA_ORIGEN, param.GARANTIA_DESC
         , CASE
              WHEN ORIGINAL_RC = '914100' AND CTR.BRANCH_CODE = 801 THEN 'GR 21104'
              WHEN ORIGINAL_RC = '914961' AND CTR.BRANCH_CODE = 801 THEN 'GR 21201'
              WHEN ORIGINAL_RC = '914922' AND CTR.BRANCH_CODE = 801 THEN 'GR 12101'
              WHEN ORIGINAL_RC = '914313' AND CTR.BRANCH_CODE = 801 THEN 'GR 21106'
              ELSE param.GARANTIA_RIESGOS
           END AS GARANTIA_RIESGOS
         , ROWNUM AS IDREG_GAR, ORIGINAL_RC, ctr.CONCEDIDO, ctr.CONCEDIDO_contrav, GAR.VALOR_TASACION, GAR.VALOR_TASACION_contrav
         , CTR.TIPO_PRESTAMO, CTR.DESTINO_PRESTAMO, GAR.TIPO_GARANTIA, GAR.TIPO_FINCA, GAR.NOMBRE_AVALISTA, GAR.PAIS_AVALISTA
         , GAR.RATING_AVALISTA, GAR.TIPO_AVALISTA, GAR.TIPO_RATING
      FROM BAS_MEN.ofex_contratos_contrav ctr
         , BAS_MEN.ofex_t24_contratos_garantias ctr_gar
         , BAS_MEN.ofex_garantias_contrav gar
         , BAS_MEN.OFEX_T24_PARAM_CONV_GARANTIAS param
     WHERE ctr.branch_code       = ctr_gar.BRANCH_CODE
       AND ctr.MESCTR            = ctr_gar.MESCTR
       AND ctr.CONTRACT_ID       = ctr_gar.CONTRACT_ID
       AND ctr.LOCAL_ID          = ctr_gar.LOCAL_ID
       AND ctr_gar.branch_code   = gar.BRANCH_CODE
       AND ctr_gar.MESCTR        = gar.MESCTR
       AND ctr_gar.COLLATERAL_ID = gar.COLLATERAL_ID
       AND gar.COLLATERAL_TYPE   = param.GARANTIA_ORIGEN;

    COMMIT;

    --
    VN_NumErr := 5;

    INSERT INTO BAS_MEN.OFEX_basilea_TMP_1
    SELECT /*+ parallel(BAS 4) */
           CASE
                WHEN SUBSTR(BAS.OR_REFOPE2,1,4) = '0028' THEN 'PD'||SUBSTR(BAS.OR_REFOPE2,5)
                ELSE--SMG-29/09/2020-I PARA QUE LAS OR_REFOPE QUE LLEGAN INCORRECTAMENTE CON EL CTACLI CRUCEN
                   CASE
                      --WHEN SUBSTR(BAS.OR_REFOPE2,5) is not null then SUBSTR(BAS.OR_REFOPE2,5) -- 15/03/2022 - NAV - OR_REFOPE2 que llegan sin 00 
                      WHEN SUBSTR(BAS.OR_REFOPE2,3) is not null then SUBSTR(BAS.OR_REFOPE2,3)
                      ELSE BAS.OR_REFOPE2
                   END --sMG-29/09/2020-F PARA QUE LAS OR_REFOPE QUE LLEGAN INCORRECTAMENTE CON EL CTACLI CRUCEN
           END AS CONTRACT_ID,
           BAS.FI_EADAIRB AS EAD_PDTE_GARANTIZAR, RPAD('0',30,'0') AS COLLATERAL_ID,
           bas.OR_IDREG, bas.OR_IDPERS, bas.OR_TIPIDE, bas.OR_NIFCIF, bas.OR_TIPIDEIBM, bas.OR_NIFCIFIBM, bas.OR_TITULARITAT, bas.OR_NOMPER,
           bas.OR_COISIN, bas.OR_PERSON, bas.OR_IDECNO, bas.OR_IDCNAE, bas.OR_IDCNAEREL, bas.OR_PROCED, bas.OR_NUMOFI,
           bas.OR_REFOPE, bas.OR_REFOPE2, bas.OR_TIPOPE, bas.OR_FECOPE, bas.OR_FECVTO, bas.OR_VIDINI,
           bas.OR_VIDRES, bas.IN_ANTIGU, bas.OR_SEGGES, bas.OR_CODGAR, bas.OR_TIPAVA, bas.OR_TIPGAR, bas.OR_CODTIT, bas.OR_DESTPR,
           bas.OR_TIPOFI, bas.OR_TIPOPR, bas.OR_IMPLTV, bas.OR_VALTAS, bas.OR_CONCED, bas.OR_IDPAIS, bas.IN_ITITSN,
           bas.IN_INDMOR, bas.OR_IDPRO1, bas.OR_ENTITY, bas.OR_CTAIND, bas.OR_EPIIND, bas.FI_EPICON, bas.FI_PORCON, bas.OR_DIVISA, bas.FI_TIPEXP,
           bas.OR_DISPTO, bas.OR_DISBLE, bas.OR_AVALES, bas.OR_FUTURS, bas.OR_REPOS, bas.OR_AJUVAL, bas.OR_FAIRVA, bas.OR_DISPTOCON,
           bas.OR_DISBLECON, bas.OR_AVALESCON, bas.OR_FUTURSCON, bas.OR_REPOSCON, bas.OR_AJUVALCON, bas.OR_FAIRVACON,
           bas.IN_TIPDER, bas.IN_FAIRVABO, bas.IN_FAIRVABOCON, bas.FI_SUMEXP, bas.IN_VTAGRU, bas.IN_VTAGRU_CONS,
           bas.OR_RATINT, bas.OR_MODRAT0, bas.OR_SEGRIE, bas.OR_PUNT0, bas.OR_SITUAC0, bas.OR_FECPUN0,
           bas.IN_SEGMBSINI, bas.IN_SEGMBS0, bas.IN_SEGMBS1, bas.IN_SEGMBS2, bas.IN_SEGMBS, bas.IN_RATEXTAVA2,
           bas.IN_SRATIN, bas.IN_RATEXT, bas.IN_RATSOB,
           bas.FI_ELIMI1, bas.IN_METODE, bas.IN_SUCEPT, bas.IN_SEG_HIP, bas.OR_FECPRREV, bas.OR_CLUNIENT,
           bas.OR_CLUNIPROD, bas.OR_CLUNICONTR, bas.OR_CLUNICUENT, bas.OR_CLUNIOPERA, bas.FI_MESCURA, bas.OR_FECCAR, bas.OR_PRESTMIG,
           bas.OR_CLAVISO, bas.OR_FECALTBLO, bas.OR_TITUSCPCB, bas.OR_PERSONSCPCB, bas.FI_EADAIRB, bas.OR_CNAESCPCB, bas.FI_EADCONAIRB,
           bas.FI_CCFAIRB, bas.IN_TIPOREG, bas.IN_GRUP_TIPIDE, bas.IN_GRUP_IDPER, bas.IN_NOM_GRUP, bas.IN_IDCALIFIC,
           bas.OR_PUNTSCO, bas.OR_FECSCO, bas.OR_NUMSCOFIN, bas.IN_INDCURA, bas.OR_PROVAPL, bas.OR_INDHOLDING, bas.OR_VERSPREST,
           0,
           bas.OR_DESCTAVISTA, bas.OR_CODPRODO, bas.OR_CODISO, bas.OR_PRODERIV,  bas.IN_ACTIVO, bas.OR_NUMFINREG,
           bas.OR_TIPOBJETO, bas.OR_SEGFAC, bas.OR_SEGFIC, bas.OR_IDSITUAC, bas.IN_IDCALIFICREL,
           bas.OR_SUBSTDA, bas.OR_MODSCO, bas.OR_FINABE, bas.OR_TIPDERIV, bas.OR_NUMPERCTAV, bas.OR_CNAECTAVIS, bas.OR_CNOCTAVIS,
           bas.OR_OPCVEN, bas.IN_METODE_1, bas.OR_CODIGO_BIC, bas.IN_EXISTENCIAS, bas.IN_ACTIVO_CIR, bas.IN_FECMORA,
           bas.OR_CTACLI, bas.IN_NUMEMP, bas.IN_HIPOAVAL, bas.IN_NIFGRUPCON,  bas.IN_PYME,
           bas.OR_INDHOLDINGREL, bas.OR_SEGFIC2, bas.IN_PRESTPERCENT, bas.IN_CAT_BDE_N, bas.OR_CLUNIENT_CUENT, bas.OR_CLUNIPROD_CUENT,
           bas.OR_CLUNIENT_OPERA, bas.OR_CLUNIPROD_OPERA, bas.IN_OPER_MIGR,  bas.IN_IDGRUPO, bas.MARCA_EPA, bas.OR_FECDEU,
           bas.OR_NUMPERSONA, bas.OR_PERSCTAVISTA, bas.OR_TITUCTAVISTA, bas.IN_FACTCOR, bas.IN_NUMEMP_CONS,
           bas.INDCURA, bas.FECHINICURA, bas.TIPODEFAULT, bas.FECHINISIMP, bas.FECHFINSIMP, bas.IN_DEFAULT,
           bas.OR_MODGRUP  /* RMR 25/02/2020 Añadido nuevo campo de modelo de grupo */
      FROM BAS_MEN.BASILEA bas
     WHERE (BAS.OR_PROCED IN(/*'OFEX-MI',*/ 'OFEX-FR', 'OFEX-CA', 'OFEX-GB', 'OFEX-LI')
        OR BAS.OR_NUMOFI IN(801/*,825*/,813,800,821))
       AND fi_elimi1 = 'NO'
     --AND in_tiporeg not in ('RX', 'PX')
       AND OR_EPIIND NOT LIKE '01005%';

      COMMIT;
      --
      -- Info. en el control del proceso del fin correcto (OK) de este
      --
      UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
         SET ESTAT       = 'FINALIZADO'
           , DATA_FIN    = SYSDATE
           , FINALITZAT  = 'OK'
       WHERE PROCES      = CTE_Nom_Procedimiento
         AND ESTAT       = 'INICIADO';

       COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            --
            -- Actualización de la tabla de control
            --
             VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
             --
             ROLLBACK;

             UPDATE BAS_MEN.CONTROL_PROCES
                SET ESTAT       = 'FINALIZADO',
                    DATA_FIN    = SYSDATE,
                    FINALITZAT  = 'KO',
                    ERROR_ORAC  = VV_MENSAJE,
                    ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                    NUM_ERROR   = VN_NumErr
              WHERE PROCES      = CTE_Nom_Procedimiento
                AND ESTAT       = 'INICIADO';
            --
            COMMIT;
            --
            RAISE;
            --
    END;

    /*----------------------------------------------------------------------------*/
    /*                              CALCULO DEL CCF                               */
    /*----------------------------------------------------------------------------*/

    PROCEDURE Fun_Calculo_del_CCF IS

      CURSOR BAS_OFEX IS
      SELECT OR_IDREG, IN_SEGMBS, FI_TIPEXP, OR_PROCED, OR_TIPOPE, OR_VIDINI, OR_VIDRES /*, IN_RATINT, FI_DN_CN JCVJCV ERR */
           , OR_TIPAVA /*, IN_SEGMBS JCVJCV ERR DUPLI*/ , OR_EPIIND, IN_SEGMBS0, OR_CTAIND, OR_TIPGAR, OR_FECCAR, OR_CLUNICONTR
           , OR_TIPOPR, OR_ENTITY, OR_FECOPE, FI_EPICON, (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) AS TOTAL
           , OR_CODPRODO, or_fairva, IN_FAIRVABO, IN_TIPOREG, FI_CCFAIRB, OR_SEGFIC, OR_INDHOLDING, IN_SEGMBS2 -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
        FROM BAS_MEN.OFEX_basilea_TMP_1;

      VV_RET                 VARCHAR2(2);
      VN_FI_CCFSTDA          FLOAT;
      VN_FI_EADSTDA          float;
      PN_FECPRO              NUMBER;

      CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'Fun_Calculo_del_CCF';
      VN_NumErr              NUMBER(3)              DEFAULT 0;
      VV_Mensaje             VARCHAR2(255)          DEFAULT '';

    BEGIN

       --
       -- Info. en el control del proceso del ini de este
       --
       INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
       VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

       COMMIT;

       --PN_FECPRO := 20091231;
       SELECT TO_NUMBER(VALPARM)
         INTO PN_FECPRO
         FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
        WHERE CODCSB = '0081'
          AND CODPARM = '0001'
          AND SECPARM = '01';

       VN_NumErr := 1;

       UPDATE BAS_MEN.OFEX_BASILEA_TMP_1
          SET FI_EADAIRB = 0
            , FI_CCFAIRB = 1;

       COMMIT;

       VN_NumErr := 2;

       FOR CUR IN BAS_OFEX LOOP

         VN_NumErr     := 3;
         VN_FI_CCFSTDA := 1;
         -- Llamada a procedure para realizar el calculo del Factor de conversion de credito
         BAS_MEN.FNC_CALCUL_CCF('STDA',
                                 1,                     --PN_OPC_DER,
                                 1,                     --PN_F,
                                 UPPER(CUR.IN_SEGMBS),
                                 UPPER(CUR.FI_TIPEXP),
                                 UPPER(CUR.OR_PROCED),
                                 UPPER(CUR.OR_TIPOPE),
                                 CUR.OR_VIDINI,
                                 CUR.OR_VIDRES,
                                 99,                    --CUR.IN_RATINT, JCVJCV ERR
                                 0,                     --CUR.FI_DN_CN, JCVJCV ERR
                                 CUR.OR_TIPAVA,
                                 '?',                   -- CUR.IN_SEGMBIS,
                                 CUR.OR_EPIIND,
                                 CUR.FI_EPICON,
                                 CUR.IN_SEGMBS0,        --AÑADIMOS CAMPO NUEVO PARA TRATAR PROMOCIONES
                                 'NO',
                                 CUR.OR_CTAIND,
                                 0,
                                 CUR.OR_TIPGAR,
                                 0,
                                 '?',
                                 CUR.IN_TIPOREG,        -- JCV 19-04-2012 Se añade campo por modif. de la función
                                 CUR.OR_SEGFIC, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                                 CUR.OR_INDHOLDING,
                                 CUR.IN_SEGMBS2,
                                 VN_FI_CCFSTDA,
                                 VV_RET);

         IF VV_RET <> 'OK' THEN
            DBMS_OUTPUT.PUT_LINE('Error CCF');
         END IF;

         /*************************************************/
         /* RECALCULO DEL CCF PARA LOS FACTORIN ACTIVADOS */
         /*************************************************/
         IF CUR.OR_CLUNICONTR IN(770005611,770009203,770014419,770011571,770011278,770011948,770007315
                                ,770010508,770007963,770011214,770012330,770011774,770008729,770009365
                                ,770009025,770009013,770006971,770014369) THEN
            VN_FI_CCFSTDA := 0;
         END IF;

         /**************************************/
         /* TRATAMIENTO ESPECiAL PARA BSFINCOM */
         /**************************************/
         IF CUR.OR_ENTITY = 242 AND SUBSTR(CUR.FI_EPICON,1,8) = '03002001' THEN
            VN_FI_CCFSTDA := 0;
         END IF;

         VN_NumErr := 4;

               /*********************************************************************************************************************/
               /* RECALCULO DEL CCFSTDA PARA LOS DISPONIBLES DE PRESTAMOS EN FUNCION DEL TIPO DE PRESTAMO Y DE LA FECHA DE CARENCIA */
               /*********************************************************************************************************************/
               IF CUR.OR_PROCED = 'PR-DISPONI' AND (CUR.IN_SEGMBS0 <> '200' OR (CUR.IN_SEGMBS0 = '200' AND CUR.OR_FECCAR = 0)) THEN
                  IF CUR.OR_TIPOPR IN (49, 55, 89, 127, 170, 5049, 5127, 7049, 8262) THEN
                     VN_FI_CCFSTDA := 0;
                   --VN_FI_CCSAJUS := 0;
                  ELSIF CUR.OR_TIPOPR IN (4, 46, 77, 81, 82, 83, 84, 95, 101, 102, 103, 123, 124, 138, 139,
                                          150, 151, 152, 159, 160, 183, 184, 196, 2101, 2201,
                                          5081, 5082, 5083, 5095, 5101, 5103, 6081, 6083) THEN
                        IF CUR.OR_FECCAR <> 0 THEN
                           IF CUR.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                            --VN_FI_CCSAJUS := 0;
                           END IF;
                        ELSE
                             IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(CUR.OR_FECOPE, 'YYYYMMDD'))/30 > 18 THEN
                                VN_FI_CCFSTDA := 0;
                              --VN_FI_CCSAJUS := 0;
                             END IF;
                        END IF;
                  ELSIF CUR.OR_TIPOPR IN (125, 129, 162, 166, 167, 177, 179, 180, 5166, 5168, 6166) THEN
                        IF CUR.OR_FECCAR <> 0 THEN
                           IF CUR.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                            --VN_FI_CCSAJUS := 0;
                           END IF;
                        ELSE
                             IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(CUR.OR_FECOPE, 'YYYYMMDD'))/30 > 36 THEN
                                VN_FI_CCFSTDA := 0;
                              --VN_FI_CCSAJUS := 0;
                             END IF;
                        END IF;
                  ELSIF CUR.OR_TIPOPR = 8137 THEN
                        IF CUR.OR_FECCAR <> 0 THEN
                           IF CUR.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                            --VN_FI_CCSAJUS := 0;
                           END IF;
                        ELSE
                             IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(CUR.OR_FECOPE, 'YYYYMMDD'))/30 > 48 THEN
                                VN_FI_CCFSTDA := 0;
                              --VN_FI_CCSAJUS := 0;
                             END IF;
                        END IF;
                  ELSIF CUR.OR_TIPOPR IN (7, 5047) THEN
                        IF CUR.OR_FECCAR <> 0 THEN
                           IF CUR.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                            --VN_FI_CCSAJUS := 0;
                           END IF;
                        ELSE
                             VN_FI_CCFSTDA := 0;
                           --VN_FI_CCSAJUS := 0;
                        END IF;
                  ELSIF CUR.OR_TIPOPR IN (117, 5118) THEN
                        IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(CUR.OR_FECOPE, 'YYYYMMDD'))/30 > 12 THEN
                           VN_FI_CCFSTDA := 0;
                           --VN_FI_CCSAJUS := 0;
                        END IF;
                  ELSIF CUR.OR_TIPOPR IN (176, 8151, 8219, 8221, 134, 135) THEN
                        IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(CUR.OR_FECOPE, 'YYYYMMDD'))/30 > 36 THEN
                           VN_FI_CCFSTDA := 0;
                           --VN_FI_CCSAJUS := 0;
                        END IF;
                  END IF;

                  /*IF CUR.IN_SEGMBS0 <> '200' AND CUR.OR_TIPOFI IN ('24', '25', '27', 'TE') AND CUR.AMORTIZADO <> 0 THEN
                     VN_FI_CCSAJUS := 0;
                     VN_FI_CCFSTDA := 0;
                  END IF;*/
               END IF;

               /* @RMC 20100630: Si el tiporeg es DN tomamos el CCF de basilea */
               -- ALLA 07/08/2016 se incluye RN correspondiente con el neteo de repos
               IF CUR.IN_TIPOREG IN ('DN','RN') THEN
                  VN_FI_CCFSTDA := CUR.FI_CCFAIRB;
               END IF;


         /*Cálculo de EAD: Para derivados es la mayor entre 0 y la EAD no morosa + el fairvalue.
                             Para repos es la mayor entre 0 y el fairvalue - el fairva del bono.*/

         VN_FI_EADSTDA := CUR.TOTAL * VN_FI_CCFSTDA;

         VN_NumErr := 5;

         IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
            VN_FI_EADSTDA := BAS_MEN.FNC_MAX(0, VN_FI_EADSTDA + CUR.OR_FAIRVA);
         ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.OR_EPIIND,1,5) NOT IN ('02002','02004') THEN
            VN_FI_EADSTDA := BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
         END IF;

         UPDATE BAS_MEN.OFEX_basilea_TMP_1 -- tmpjcv
            SET FI_EADAIRB          = VN_FI_EADSTDA
              , EAD_PDTE_GARANTIZAR = VN_FI_EADSTDA
              , FI_CCFAIRB          = VN_FI_CCFSTDA
          WHERE OR_IDREG = CUR.OR_IDREG;

       END LOOP;

       COMMIT;

       --
       -- Info. en el control del proceso del fin correcto (OK) de este
       --
       UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
          SET ESTAT       = 'FINALIZADO'
            , DATA_FIN    = SYSDATE
            , FINALITZAT  = 'OK'
         WHERE PROCES  = CTE_Nom_Procedimiento
           AND ESTAT   = 'INICIADO';

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            --
            -- Actualización de la tabla de control
            --
             VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
             --
             ROLLBACK;

             UPDATE BAS_MEN.CONTROL_PROCES
                SET ESTAT       = 'FINALIZADO',
                    DATA_FIN    = SYSDATE,
                    FINALITZAT  = 'KO',
                    ERROR_ORAC  = VV_MENSAJE,
                    ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                    NUM_ERROR   = VN_NumErr
              WHERE PROCES  = CTE_Nom_Procedimiento
                AND ESTAT   = 'INICIADO';
            --
            COMMIT;
            --
            RAISE;
            --
    END;

    /*----------------------------------------------------------------------------*/
    /*                     Enriquecimiento_Personas                               */
    /*----------------------------------------------------------------------------*/

    PROCEDURE Fun_Enriquecimiento_Personas IS

       CTE_Nom_Procedimiento       CONSTANT VARCHAR2(32)  := 'Fun_Enriquecimiento_Personas';
       VN_NumErr                   NUMBER(3)              DEFAULT 0;
       VV_Mensaje                  VARCHAR2(255)          DEFAULT '';

    BEGIN

        --
        -- Info. en el control del proceso del ini de este
        --
        INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

        COMMIT;

        VN_NumErr := 1;

    /* Tabla temporal utilizada para reparto de garantías */
        INSERT INTO BAS_MEN.OFEX_BASILEA_TMP_2
        SELECT distinct GAR.CONCEDIDO_CTV, GAR.VALOR_TASACION_CTV
             , CASE
                    WHEN NVL(GAR.VALOR_TASACION_CTV,0) = 0  AND GAR.TIPO_PRESTAMO IS NOT NULL AND NVL(GAR.CONCEDIDO_CTV,0) <> 0 THEN BAS.OR_DISPTO/GAR.CONCEDIDO_CTV
                    WHEN NVL(GAR.VALOR_TASACION_CTV,0) <> 0 AND GAR.TIPO_PRESTAMO IS NOT NULL                                   THEN BAS.OR_DISPTO/(GAR.VALOR_TASACION_CTV)
                    ELSE 0
               END AS LTV
             , GAR.TIPO_PRESTAMO, GAR.DESTINO_PRESTAMO, GAR.TIPO_GARANTIA, GAR.TIPO_FINCA, GAR.NOMBRE_AVALISTA, GAR.PAIS_AVALISTA
             , GAR.RATING_AVALISTA, GAR.TIPO_AVALISTA, GAR.TIPO_RATING,
               bas.*
          FROM BAS_MEN.OFEX_basilea_TMP_1  BAS
             , BAS_MEN.OFEX_GARANT_TMP_1   GAR
         WHERE BAS.OR_NUMOFI = GAR.BRANCH_CODE
           AND BAS.OR_CTACLI = GAR.CUSTOMER
         --AND GAR.CONTRACT_ID = bas.CONTRACT_ID   -- 15/03/2022 - NAV - OR_REFOPE2 que llegan sin 00 
           AND (BAS.CONTRACT_ID = GAR.CONTRACT_ID OR SUBSTR(BAS.CONTRACT_ID,3) = GAR.CONTRACT_ID)
           and SUBSTR(BAS.OR_CODGAR,1,2) <> 'GR';

         COMMIT;

        ----- COMIENZO PROCESO ENRIQUECIMIENTO PERSONAS ---------
        VN_NumErr := 2;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1';
        COMMIT;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_BASILEA_TMP_3';
        COMMIT;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_CTR_TMP_1';
        COMMIT;

        VN_NumErr := 3;

        INSERT INTO BAS_MEN.OFEX_CTR_TMP_1
        SELECT distinct ctr.BRANCH_CODE, ctr.MESCTR, ctr.CONTRACT_ID, ctr.CUSTOMER, ctr_gar.COLLATERAL_ID, gar.CURRENCY, gar.AMOUNT
             , gar.AMOUNT_contrav, gar.AMOUNT_contrav, gar.AMOUNT_LC, ctr.CURRENCY, ctr.amount, ctr.amount_contrav, gar.VALUE_FROM
             , gar.VALUE_TO, param.GARANTIA_ORIGEN, param.GARANTIA_DESC
             , CASE
                  WHEN ORIGINAL_RC = '914100' AND CTR.BRANCH_CODE = 801 THEN 'GR 21104'
                  WHEN ORIGINAL_RC = '914961' AND CTR.BRANCH_CODE = 801 THEN 'GR 21201'
                  WHEN ORIGINAL_RC = '914922' AND CTR.BRANCH_CODE = 801 THEN 'GR 12101'
                  WHEN ORIGINAL_RC = '914313' AND CTR.BRANCH_CODE = 801 THEN 'GR 21106'
                  ELSE param.GARANTIA_RIESGOS
               END AS GARANTIA_RIESGOS
             , ROWNUM AS IDREG_GAR, ORIGINAL_RC, ctr.CONCEDIDO, ctr.CONCEDIDO_contrav, GAR.VALOR_TASACION, GAR.VALOR_TASACION_contrav
             , CTR.TIPO_PRESTAMO, CTR.DESTINO_PRESTAMO, GAR.TIPO_GARANTIA, GAR.TIPO_FINCA
          FROM BAS_MEN.ofex_contratos_contrav         ctr
             , BAS_MEN.ofex_t24_contratos_garantias   ctr_gar
             , BAS_MEN.ofex_garantias_contrav         gar
             , BAS_MEN.OFEX_T24_PARAM_CONV_GARANTIAS  param
         WHERE ctr.branch_code       = ctr_gar.BRANCH_CODE(+)
           AND ctr.MESCTR            = ctr_gar.MESCTR(+)
           AND ctr.CONTRACT_ID       = ctr_gar.CONTRACT_ID(+)
           AND ctr.LOCAL_ID          = ctr_gar.LOCAL_ID(+)
           AND ctr_gar.branch_code   = gar.BRANCH_CODE(+)
           AND ctr_gar.MESCTR        = gar.MESCTR(+)
           AND ctr_gar.COLLATERAL_ID = gar.COLLATERAL_ID(+)
           AND gar.COLLATERAL_TYPE   = param.GARANTIA_ORIGEN(+);

        COMMIT;

        VN_NumErr := 4;

        INSERT INTO BAS_MEN.OFEX_BASILEA_TMP_3
--        SELECT distinct CTR.CONCEDIDO_CTV, CTR.VALOR_TASACION_CTV
--             , CASE
--                  WHEN NVL(CTR.VALOR_TASACION_CTV,0) = 0 AND CTR.TIPO_PRESTAMO IS NOT NULL AND NVL(CTR.CONCEDIDO_CTV,0) <> 0 THEN BAS.OR_DISPTO/CTR.CONCEDIDO_CTV
--                  WHEN CTR.TIPO_PRESTAMO ='H'            AND NVL(CTR.VALOR_TASACION_CTV,0) <> 0                              THEN BAS.OR_DISPTO/(CTR.VALOR_TASACION_CTV)
--                  ELSE 0
--               END AS LTV
--             , CTR.TIPO_PRESTAMO, CTR.DESTINO_PRESTAMO, CTR.TIPO_GARANTIA, CTR.TIPO_FINCA,
--               bas.*
--          FROM BAS_MEN.OFEX_basilea_TMP_1  BAS
--             , BAS_MEN.OFEX_CTR_TMP_1      CTR
--         WHERE BAS.OR_NUMOFI = CTR.BRANCH_CODE(+)
--           AND BAS.OR_CTACLI = CTR.CUSTOMER(+)
--           --AND bas.CONTRACT_ID = CTR.CONTRACT_ID(+);  -- 15/03/2022 - NAV - OR_REFOPE2 que llegan sin 00 
--           AND SUBSTR(BAS.CONTRACT_ID,3) = CTR.CONTRACT_ID(+);
        SELECT distinct nvl(ctr.CONCEDIDO_CTV, ctr1.CONCEDIDO_CTV) CONCEDIDO_CTV,  nvl(ctr.VALOR_TASACION_CTV, ctr1.VALOR_TASACION_CTV) VALOR_TASACION_CTV
             , CASE
                  WHEN nvl(nvl(ctr.VALOR_TASACION_CTV,ctr1.VALOR_TASACION_CTV),0) = 0  
                     AND nvl(ctr.TIPO_PRESTAMO,ctr1.TIPO_PRESTAMO)  IS NOT NULL AND nvl(nvl(ctr.CONCEDIDO_CTV, ctr1.CONCEDIDO_CTV),0) <> 0 THEN BAS.OR_DISPTO/ctr.CONCEDIDO_CTV
                  WHEN nvl(ctr.TIPO_PRESTAMO, ctr1.TIPO_PRESTAMO)                 ='H' AND nvl(nvl(ctr.VALOR_TASACION_CTV, ctr1.VALOR_TASACION_CTV),0) <> 0 THEN BAS.OR_DISPTO/(nvl(ctr.VALOR_TASACION_CTV,ctr1.VALOR_TASACION_CTV))
                  ELSE 0
               END AS LTV
             , nvl(ctr.TIPO_PRESTAMO, ctr1.TIPO_PRESTAMO) TIPO_PRESTAMO, nvl(ctr.DESTINO_PRESTAMO, ctr1.DESTINO_PRESTAMO) as DESTINO_PRESTAMO, nvl(ctr.TIPO_GARANTIA,ctr1.TIPO_GARANTIA) TIPO_GARANTIA
             , nvl(ctr.TIPO_FINCA,ctr1.TIPO_FINCA) TIPO_FINCA, 
               bas.*
          FROM BAS_MEN.OFEX_basilea_TMP_1  BAS
             , BAS_MEN.OFEX_CTR_TMP_1      CTR
             , BAS_MEN.OFEX_CTR_TMP_1      CTR1
         WHERE BAS.OR_NUMOFI    = ctr.BRANCH_CODE(+)
           AND BAS.OR_CTACLI    = ctr.CUSTOMER(+)
           AND BAS.CONTRACT_ID  = ctr.CONTRACT_ID(+)
           AND BAS.OR_NUMOFI    = ctr1.BRANCH_CODE(+)
           AND BAS.OR_CTACLI    = ctr1.CUSTOMER(+)
           AND SUBSTR(BAS.CONTRACT_ID,3)= ctr1.CONTRACT_ID(+);

        COMMIT;

        VN_NumErr := 5;

        INSERT INTO BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
        SELECT distinct BAS.OR_IDREG, BAS.OR_NUMOFI, BAS.OR_CTACLI, PERS.BIC_CODE, PERS.NATIONALITY, SOB.CODI_NUM_PAIS
             , CASE
                    WHEN NVL(PERSON.OR_PERSON,0) = 0 THEN BAS.OR_PERSON
                    ELSE NVL(PERSON.OR_PERSON,0)
               END  AS OR_PERSON
             , CASE
                    WHEN NVL(CNAES.CNAE93,0) = 0 THEN BAS.OR_IDCNAE
                    ELSE TO_NUMBER(NVL(CNAES.CNAE93,0))
               END AS OR_IDCNAE
             , CASE
                    WHEN NVL(CNO.OR_IDECNO,0) = 0 THEN BAS.OR_IDECNO
                    ELSE NVL(CNO.OR_IDECNO,999)
               END AS OR_IDECNO
             , PERS.PYME_MINORISTA AS IN_PYME
             , CASE
                    WHEN PERS.SECTOR_BE <= 160 AND BAS.OR_TIPIDE NOT IN(0,2,3,4,5)      THEN 0
                    WHEN PERS.SECTOR_BE > 160  AND BAS.OR_TIPIDE NOT IN(10,11,12,15,16) THEN 11
                    ELSE BAS.OR_TIPIDE
               END AS OR_TIPIDE
             , CASE
                    WHEN PERS.SECTOR_BE <= 160 AND BAS.OR_SEGGES NOT IN(1,2) THEN 1
                    WHEN PERS.SECTOR_BE > 160 AND BAS.OR_SEGGES NOT IN(0,3,4,5) THEN 0
                    ELSE BAS.OR_SEGGES
               END AS OR_SEGGES
             , TRIM(PERS.NAME ||' '|| PERS.LAST_NAME) AS OR_NOMPER, bas.CONCEDIDO_CTV, bas.VALOR_TASACION_CTV, bas.LTV
             , CASE bas.tipo_prestamo
                    WHEN 'H' then 123
                    WHEN 'C' then 5046
                    ELSE 0
               END as TIPO_PRESTAMO
             , CASE
                    WHEN bas.DESTINO_PRESTAMO = 'E' THEN 340
                    WHEN bas.DESTINO_PRESTAMO = 'P' AND BAS.TIPO_PRESTAMO = 'H' then 200
                    WHEN bas.DESTINO_PRESTAMO = 'P' AND BAS.TIPO_PRESTAMO = 'C' then 312
                    when BAS.DESTINO_PRESTAMO = 'P' THEN 312
                    ELSE 0
               END AS deSTINO_PRESTAMO
             , CASE SUBSTR(BAS.TIPO_GARANTIA,1,1)
                    WHEN 'H' THEN 'HV'
                    ELSE '?'
               END AS TIPO_GARANTIA
             , CASE
                    WHEN UPPER(mfinca.TIPO_FINCA) = 'RES' and mfinca.INMUEBLE = 'INMUEBLE' THEN '12'
                    WHEN UPPER(mfinca.TIPO_FINCA) = 'COMERCIAL' and mfinca.INMUEBLE = 'INMUEBLE' THEN '20'
                    ELSE '?'
               END AS TIPO_FINCA
             , or_dispto, or_refope, or_refope2, CONTRACT_ID, PERS.TIPO_RATING, PERS.RATING_EXTERNO, 'OXE' AS IN_TIPOREG
          FROM BAS_MEN.OFEX_basilea_TMP_3 BAS
             , BAS_MEN.OFEX_T24_CUSTOMERS PERS
             , BAS_MEN.MAESTRO_SOBERANOS SOB
             , BAS_MEN.MAESTRO_PERSONALIDADES PERSON
             , BAS_MEN.MAESTRO_CNAES_SECTOR CNAES
             , BAS_MEN.MAESTRO_CNO CNO
             , BAS_MEN.MAESTRO_FINCA_INMOBILIARIA mfinca
         WHERE BAS.OR_NUMOFI = PERS.BRANCH_CODE(+)
           AND BAS.OR_CTACLI = PERS.CUSTOMER(+)
           AND PERS.NATIONALITY = SOB.CODI_PAIS(+)
           AND PERS.SECTOR_BE = PERSON.OR_PERSON(+)
           AND PERS.CNAE = CNAES.CNAE93(+)
           AND PERS.US_CNO = CNO.OR_IDECNO(+)
           AND BAS.TIPO_FINCA = mfinca.TIPOFI(+);

         COMMIT;

        VN_NumErr := 6;

         UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1 NO_HIP
            SET TIPO_GARANTIA   = (SELECT distinct HIP.tipo_garantia
                                     FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1 HIP
                                    WHERE NO_HIP.OR_IDREG = HIP.OR_IDREG
                                      AND HIP.TIPO_GARANTIA = 'HV')
              , TIPO_FINCA      = (SELECT distinct HIP.tipo_finca
                                     FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1 HIP
                                    WHERE NO_HIP.OR_IDREG = HIP.OR_IDREG
                                      AND HIP.TIPO_FINCA <> '?')
          WHERE NO_HIP.or_idreg IN(SELECT or_idreg
                                     FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1 HIP
                                    WHERE HIP.tipo_garantia = 'HV'
                                      AND HIP.TIPO_FINCA <> '?');
         COMMIT;

         /* nos quedamos con los HV, antes nos quedabamos con los '?' */
        VN_NumErr := 7;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
           SET TIPO_GARANTIA = 'HV'
         WHERE or_idreg IN(SELECT or_idreg
                             FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
                            WHERE tipo_garantia = 'HV');
        COMMIT;

        VN_NumErr := 8;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
           SET destino_prestamo =  200
         WHERE tipo_garantia = 'HV'
           AND DESTINO_PRESTAMO in(312,0);

        COMMIT;

        VN_NumErr := 9;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
           SET tipo_prestamo =  123
         WHERE tipo_garantia = 'HV';

        COMMIT;

        VN_NumErr := 10;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
           SET tipo_prestamo =  5046
             , destino_prestamo = 312
         WHERE tipo_garantia = '?'
           AND destino_prestamo not in(340,0);

        COMMIT;

        VN_NumErr := 11;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP11';
        COMMIT;

        VN_NumErr := 12;

        INSERT INTO BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP11
        SELECT OR_IDREG, or_ctacli, OR_NUMOFI, OR_CODIGO_BIC, OR_CODISO, OR_IDPAIS, OR_PERSON, OR_IDCNAE, OR_IDECNO, IN_PYME, OR_TIPIDE, OR_SEGGES
             , OR_NOMPER, CONCEDIDO_CTV, sum(VALOR_TASACION_CTV), TIPO_PRESTAMO, DESTINO_PRESTAMO, TIPO_GARANTIA, TIPO_FINCA, OR_DISPTO, OR_REFOPE
             , OR_REFOPE2, CONTRACT_ID, TIPO_RATING, RATING_EXTERNO, IN_TIPOREG
          FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP1
         GROUP BY OR_IDREG, or_ctacli, OR_NUMOFI, OR_CODIGO_BIC, OR_CODISO, OR_IDPAIS, OR_PERSON, OR_IDCNAE, OR_IDECNO, IN_PYME, OR_TIPIDE, OR_SEGGES
             , OR_NOMPER, CONCEDIDO_CTV, TIPO_PRESTAMO, DESTINO_PRESTAMO, TIPO_GARANTIA, TIPO_FINCA, OR_DISPTO, OR_REFOPE, OR_REFOPE2, CONTRACT_ID
             , TIPO_RATING, RATING_EXTERNO, IN_TIPOREG;

         COMMIT;

         VN_NumErr := 13;

         EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ofex_t24_sum_dispto';
         COMMIT;

         VN_NumErr := 14;

         INSERT INTO BAS_MEN.ofex_t24_sum_dispto
         SELECT b.CONTRACT_ID, sum(b.or_dispto) as tot_dispto
           FROM (SELECT distinct or_idreg
                      , CASE
                           WHEN SUBSTR(OR_REFOPE2,1,4) = '0028' THEN 'PD'||SUBSTR(OR_REFOPE2,5)
                           ELSE --SMG-29/09/2020-I PARA QUE LAS OR_REFOPE QUE LLEGAN INCORRECTAMENTE CON EL CTACLI CRUCEN
                               CASE
                                  WHEN SUBSTR(OR_REFOPE2,5) is not null then SUBSTR(OR_REFOPE2,5)
                                  ELSE OR_REFOPE2
                               END --SMG-29/09/2020-F PARA QUE LAS OR_REFOPE QUE LLEGAN INCORRECTAMENTE CON EL CTACLI CRUCEN
                        END as CONTRACT_ID
                      , or_dispto
                   FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP11
                ) b
          GROUP BY b.CONTRACT_ID;

         COMMIT;

         EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP';
         COMMIT;

         VN_NumErr := 15;

         INSERT INTO BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
         SELECT OR_IDREG, OR_NUMOFI, OR_CODIGO_BIC, OR_CODISO, OR_IDPAIS, OR_PERSON, OR_IDCNAE, OR_IDECNO, IN_PYME, OR_TIPIDE, OR_SEGGES, OR_CTACLI
              , OR_NOMPER, CONCEDIDO_CTV, sum(NVL(VALOR_TASACION_CTV,0)) AS VALOR_TASACION_CTV
              , sum(CASE
                         WHEN NVL(GAR.VALOR_TASACION_CTV,0) = 0 AND TIPO_GARANTIA = 'HV' AND nvl(GAR.CONCEDIDO_CTV,0) <> 0 THEN dis.TOT_DISPTO/GAR.CONCEDIDO_CTV
                         WHEN TIPO_GARANTIA = 'HV'              AND nvl(GAR.VALOR_TASACION_CTV,0) <> 0                     THEN dis.TOT_DISPTO/NVL(GAR.VALOR_TASACION_CTV,0)
                         ELSE 0
                    END) AS LTV
              , TIPO_PRESTAMO, DESTINO_PRESTAMO, TIPO_GARANTIA, TIPO_FINCA, sum(OR_DISPTO), sum(dis.TOT_DISPTO), IN_TIPOREG, TIPO_RATING
              , RATING_EXTERNO
           FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_TEMP11  gar -- tmpjcv
              , BAS_MEN.ofex_t24_sum_dispto             dis -- tmpjcv
          WHERE (gar.CONTRACT_ID = dis.CONTRACT_ID OR substr(gar.CONTRACT_ID,3) = dis.CONTRACT_ID)
          GROUP BY OR_IDREG, OR_NUMOFI, OR_CODIGO_BIC, OR_CODISO, OR_IDPAIS, OR_PERSON, OR_IDCNAE, OR_IDECNO, IN_PYME, OR_TIPIDE, OR_SEGGES, OR_CTACLI,
                OR_NOMPER, CONCEDIDO_CTV, TIPO_PRESTAMO, DESTINO_PRESTAMO, TIPO_GARANTIA, TIPO_FINCA, IN_TIPOREG, TIPO_RATING, RATING_EXTERNO;

        COMMIT;

        /* Recalcula el IN_TIPOREG */
        VN_NumErr := 16;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
           SET in_tiporeg = 'OX';

        COMMIT;

        VN_NumErr := 17;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
           SET in_tiporeg = 'OXE'
         WHERE or_idreg IN(SELECT or_idreg
                             FROM BAS_MEN.OFEX_basilea_TMP_3   BAS
                                , BAS_MEN.OFEX_T24_CUSTOMERS   PERS
                            WHERE BAS.OR_NUMOFI = PERS.BRANCH_CODE
                              AND BAS.OR_CTACLI = PERS.CUSTOMER);

        COMMIT;

        /*personas fisicas */
        VN_NumErr := 18;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
           SET in_tiporeg = 'OXE'
         WHERE or_person <= 160
           AND OR_TIPIDE IN(0,2,3,4,5);

        COMMIT;

        VN_NumErr := 19;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
           SET IN_TIPOREG = 'RX'
         WHERE OR_IDREG IN (SELECT /*+ parallel (a 4) */ OR_IDREG 
                              FROM BAS_MEN.BASILEA a 
                             WHERE OR_EPIIND LIKE '01005%');

         COMMIT;

        /*SI TIPO AVALISTA BANCO CODIGO DE CODGAR = GR21106 ,EN EL ESTANDAR SE SEGMENTARA COMO ENTIDAD FINANCIERA PERO YA ESTA DEFINIDO ASI EL PROCESO
        SI TIPO AVALISTA ENTE PUBLICO CODIGO DE CODGAR = GR 21104 */

        /* RESTO OPERACIONES PARA REALIZAR EL REPARTO DE GARANTIAS*/
        VN_NumErr := 20;

        INSERT INTO BAS_MEN.OFEX_BASILEA_TMP_RESTO
        SELECT distinct
               CASE
                  WHEN BAS.IN_INDMOR = 'SI' then 1
                  WHEN BAS.OR_IDSITUAC IN(6,7) then 2
                  WHEN nvl(pers.TIPO_GARANTIA,'?') <> 'HV' then 4
                  ELSE 9999
               END AS orden_reg,
               bas.*
          FROM BAS_MEN.OFEX_basilea_TMP_2            BAS
             , BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP pers
         WHERE bas.or_idreg = pers.or_idreg(+);

        COMMIT;

        VN_NumErr := 21;

        DELETE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
         WHERE (or_idreg, nvl(concedido_ctv,0)) IN (SELECT or_idreg, min(nvl(concedido_ctv,0))
                                                      FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
                                                     WHERE or_idreg IN(SELECT or_idreg
                                                                         FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
                                                                        GROUP BY or_idreg
                                                                       HAVING count(*) > 1
                                                                       )
                                                     GROUP BY or_idreg
                                                    );

        COMMIT;

        VN_NumErr := 22;

        UPDATE BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP
           SET ltv = 0
         WHERE tipo_garantia = '?';

        COMMIT;

        VN_NumErr := 23;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_DATOS_PERSONAS';

        INSERT INTO BAS_MEN.OFEX_T24_DATOS_PERSONAS
        SELECT * FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS_AGRUP;

        COMMIT;
        
        VN_NumErr := 24;
          --
          -- Info. en el control del proceso del fin correcto (OK) de este
          --
        UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = 'OK'
         WHERE PROCES  = CTE_Nom_Procedimiento
           AND ESTAT   = 'INICIADO';
         
        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            --
            -- Actualización de la tabla de control
            --
             VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
             --
             ROLLBACK;

             UPDATE BAS_MEN.CONTROL_PROCES
                SET ESTAT       = 'FINALIZADO',
                    DATA_FIN    = SYSDATE,
                    FINALITZAT  = 'KO',
                    ERROR_ORAC  = VV_MENSAJE,
                    ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                    NUM_ERROR   = VN_NumErr
              WHERE PROCES  = CTE_Nom_Procedimiento
                AND ESTAT   = 'INICIADO';
            --
            COMMIT;
            --
            RAISE;
            --
    END;

-- Cuerpo principal

BEGIN

    --
    -- Info. en el control del proceso del ini de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES ('FNC_ENRIQUECIMIENTO_OFEX_1', SYSDATE, 'INICIADO');

    Fun_Llenado_Datos_Auxiliares();
    Fun_Calculo_del_CCF();
    Fun_Enriquecimiento_Personas();

    --
    -- Info. en el control del proceso del fin correcto (OK) de este
    --
    UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = 'OK'
     WHERE PROCES  = 'FNC_ENRIQUECIMIENTO_OFEX_1'
       AND ESTAT   = 'INICIADO';
  
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización de la tabla de control
        --
        ROLLBACK;

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO',
               DATA_FIN    = SYSDATE,
               FINALITZAT  = 'KO'
         WHERE PROCES  = 'FNC_ENRIQUECIMIENTO_OFEX_1'
           AND ESTAT   = 'INICIADO';
        --
        COMMIT;
        --
        RAISE;
        --
END;
/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_2 IS

    PROCEDURE Fun_Llenado_Datos_Auxiliares IS

        CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'Fun_Llenado_Datos_Auxiliares';
        VN_NumErr              NUMBER(3)              DEFAULT 0;
        VV_Mensaje             VARCHAR2(255)          DEFAULT '';

    BEGIN

        --
        -- Info. en el control del proceso del ini de este
        --
        INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

        COMMIT;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_PRELACION_GARANTIA';
        
        COMMIT;

        INSERT INTO BAS_MEN.OFEX_PRELACION_GARANTIA
        SELECT * FROM DCRPROP_MENSUAL.OFEX_PRELACION_GARANTIA_SAS;

        COMMIT;

        VN_NumErr := 1;
        
        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_BASILEA_GARANTIZADA';
        
        COMMIT;

        VN_NumErr := 2;
        
        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_GARANT_TMP_2';
        
        COMMIT;

        VN_NumErr := 3;
        
        INSERT INTO  BAS_MEN.OFEX_GARANT_TMP_2
        SELECT distinct 0 as IDREG_GAR, IMP_GARANT_PDTE_ASIGN, GARANTIAS_CONTRAVALOR, COLLATERAL_ID
             , GARANTIA_RIESGOS, BRANCH_CODE, CUSTOMER, CONTRACT_ID, MESCTR
          FROM BAS_MEN.OFEX_GARANT_TMP_1;

        COMMIT;

        VN_NumErr := 4;
        
        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ofex_t24_sum_ead_contract_id';
        
        COMMIT;

        VN_NumErr := 5;
        
        INSERT INTO BAS_MEN.ofex_t24_sum_ead_contract_id
        SELECT contract_id 
             , sum(fi_eadairb) as tot_eadairb
          FROM (SELECT distinct contract_id
                     , fi_eadairb
                  FROM BAS_MEN.ofex_basilea_tmp_resto
               )
         GROUP BY contract_id;

        COMMIT;

        VN_NumErr := 6;
        
        UPDATE BAS_MEN.OFEX_BASILEA_TMP_RESTO
           SET EAD_PDTE_GARANTIZAR = FI_EADAIRB
             , COLLATERAL_ID = RPAD('0',30,'0');
             
        COMMIT;

        VN_NumErr := 7;
        
        UPDATE BAS_MEN.OFEX_GARANT_TMP_2
           SET IMP_GARANT_PDTE_ASIGN = GARANTIAS_CONTRAVALOR;

        COMMIT;
        --
        -- Info. en el control del proceso del fin correcto (OK) de este
        --
        UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = 'OK'
         WHERE PROCES  = CTE_Nom_Procedimiento
           AND ESTAT   = 'INICIADO';

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            --
            -- Actualización de la tabla de control
            --
             VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
             --
             ROLLBACK;

             UPDATE BAS_MEN.CONTROL_PROCES
                SET ESTAT       = 'FINALIZADO',
                    DATA_FIN    = SYSDATE,
                    FINALITZAT  = 'KO',
                    ERROR_ORAC  = VV_MENSAJE,
                    ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                    NUM_ERROR   = VN_NumErr
              WHERE PROCES  = CTE_Nom_Procedimiento
                AND ESTAT   = 'INICIADO';
            --
            COMMIT;
            --
            RAISE;
            --

    END;

    PROCEDURE Fun_Tratar_Garantias IS

        CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'Fun_Tratar_Garantias';
        VN_NumErr              NUMBER(3)              DEFAULT 0;
        VV_Mensaje             VARCHAR2(255)          DEFAULT '';


      CURSOR CURSOR_BASILEA IS
      SELECT distinct ofex.CONTRACT_ID, EAD_PDTE_GARANTIZAR, EAD_PDTE_GARANTIZAR AS EAD_GARANTIZADA, FI_EADAIRB, or_refope, or_proced, or_idreg
           , ofex.or_codgar, Or_NUMOFI, or_ctacli, ofex.COLLATERAL_ID, or_refope2, orden_reg, TOT_EADAIRB, max(ORDEN), max(GARANTIAS_CONTRAVALOR)
        FROM BAS_MEN.OFEX_BASILEA_TMP_RESTO        ofex
           , BAS_MEN.ofex_t24_sum_ead_contract_id  suma
           , BAS_MEN.OFEX_GARANT_TMP_2             GAR
           , BAS_MEN.OFEX_PRELACION_GARANTIA       PRE
       WHERE ofex.contract_id     = suma.contract_id
         AND GAR.GARANTIA_RIESGOS = PRE.OR_CODGAR(+)
         and GAR.BRANCH_CODE      = ofex.OR_NUMOFI(+)
         and GAR.CUSTOMER         = ofex.OR_CTACLI(+)
         and GAR.CONTRACT_ID      = ofex.CONTRACT_ID(+)
         AND FI_EADAIRB > 0
         and GAR.IMP_GARANT_PDTE_ASIGN > 0
       GROUP BY ofex.CONTRACT_ID, EAD_PDTE_GARANTIZAR, FI_EADAIRB, or_refope, or_proced, or_idreg, ofex.or_codgar, Or_NUMOFI, or_ctacli
           , ofex.COLLATERAL_ID, or_refope2, orden_reg, TOT_EADAIRB
       ORDER BY orden_reg asc, suma.tot_eadairb desc, max(ORDEN) ASC, max(GARANTIAS_CONTRAVALOR) DESC
           , ofex.CONTRACT_ID asc, fi_eadairb desc, or_refope asc;


      CURSOR CURSOR_GARANTIAS ( BAS_OR_NUMOFI   NUMBER, BAS_OR_CTACLI   NUMBER, BAS_CONTRACT_ID VARCHAR2) IS
      SELECT IDREG_GAR, IMP_GARANT_PDTE_ASIGN, GARANTIAS_CONTRAVALOR, COLLATERAL_ID, GARANTIA_RIESGOS, BRANCH_CODE, CUSTOMER, CONTRACT_ID, MESCTR
        FROM BAS_MEN.OFEX_GARANT_TMP_2        GAR
           , BAS_MEN.OFEX_PRELACION_GARANTIA  PRE
       WHERE GAR.GARANTIA_RIESGOS = PRE.OR_CODGAR(+)
         AND GAR.BRANCH_CODE      = BAS_OR_NUMOFI
         AND GAR.CUSTOMER         = BAS_OR_CTACLI
         AND GAR.CONTRACT_ID      = BAS_CONTRACT_ID
         AND GAR.IMP_GARANT_PDTE_ASIGN > 0
       ORDER BY BRANCH_CODE ASC, CUSTOMER ASC, CONTRACT_ID ASC, ORDEN ASC, GARANTIAS_CONTRAVALOR DESC, COLLATERAL_ID ASC;

      VV_IDREG_GAR NUMBER(9);
      VV_IMP_GARANT_PDTE_ASIG FLOAT;

    BEGIN

      --
      -- Info. en el control del proceso del ini de este
      --
      INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
      VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

      COMMIT;

      VN_NumErr := 1;

      -- recorre la tabla de operaciones basilea
      FOR CUR_BAS IN CURSOR_BASILEA LOOP

      VN_NumErr := 2;
        -- recorre la tabla de garantías
          FOR CUR_GAR IN CURSOR_GARANTIAS(CUR_BAS.OR_NUMOFI, CUR_BAS.OR_CTACLI, CUR_BAS.CONTRACT_ID) LOOP

      VN_NumErr := 3;
      
             SELECT distinct IMP_GARANT_PDTE_ASIGN
               INTO CUR_GAR.IMP_GARANT_PDTE_ASIGN
               FROM BAS_MEN.OFEX_GARANT_TMP_2
              WHERE BRANCH_CODE   = CUR_GAR.BRANCH_CODE
                AND MESCTR        = CUR_GAR.MESCTR
                AND COLLATERAL_ID = CUR_GAR.COLLATERAL_ID;

          IF CUR_GAR.IMP_GARANT_PDTE_ASIGN >= CUR_BAS.EAD_PDTE_GARANTIZAR
             AND CUR_BAS.EAD_PDTE_GARANTIZAR   <> 0.0  THEN

      VN_NumErr := 4;
            
            UPDATE BAS_MEN.OFEX_GARANT_TMP_2
               SET IMP_GARANT_PDTE_ASIGN = IMP_GARANT_PDTE_ASIGN - CUR_BAS.EAD_PDTE_GARANTIZAR
             WHERE BRANCH_CODE   = CUR_GAR.BRANCH_CODE
               AND MESCTR        = CUR_GAR.MESCTR
               AND COLLATERAL_ID = CUR_GAR.COLLATERAL_ID;

            COMMIT;

      VN_NumErr := 5;

            -- Se actualiza el valor de la EAD del cursor CUR_BAS para la siguiente iteración y para insertarlo en la tabla
            CUR_BAS.EAD_GARANTIZADA       := CUR_BAS.EAD_PDTE_GARANTIZAR;
            CUR_GAR.IMP_GARANT_PDTE_ASIGN := CUR_GAR.IMP_GARANT_PDTE_ASIGN - CUR_BAS.EAD_PDTE_GARANTIZAR;
            CUR_BAS.COLLATERAL_ID         := CUR_GAR.COLLATERAL_ID;
            CUR_BAS.OR_CODGAR             := CUR_GAR.GARANTIA_RIESGOS;
            CUR_BAS.EAD_PDTE_GARANTIZAR   := 0.0;

      VN_NumErr := 6;
      
            INSERT INTO BAS_MEN.OFEX_BASILEA_GARANTIZADA
            VALUES (CUR_BAS.orden_reg, CUR_BAS.or_idreg, CUR_BAS.OR_NUMOFI, CUR_BAS.or_ctacli, CUR_BAS.CONTRACT_ID, CUR_BAS.EAD_PDTE_GARANTIZAR
                 , CUR_BAS.EAD_GARANTIZADA, CUR_BAS.FI_EADAIRB, CUR_BAS.or_refope, CUR_BAS.or_refope2, CUR_BAS.or_proced, CUR_BAS.OR_CODGAR
                 , CUR_GAR.IDREG_GAR, CUR_GAR.IMP_GARANT_PDTE_ASIGN, CUR_GAR.GARANTIAS_CONTRAVALOR, CUR_GAR.COLLATERAL_ID, CUR_GAR.GARANTIA_RIESGOS
                 , CUR_GAR.BRANCH_CODE , CUR_GAR.CUSTOMER, CUR_GAR.CONTRACT_ID, CUR_GAR.MESCTR);

             COMMIT;

          EXIT;
            
          ELSIF CUR_BAS.EAD_PDTE_GARANTIZAR <> 0.0 AND CUR_GAR.IMP_GARANT_PDTE_ASIGN <> 0.0 THEN

      VN_NumErr := 7;

            UPDATE BAS_MEN.OFEX_GARANT_TMP_2
               SET IMP_GARANT_PDTE_ASIGN = 0.0
             WHERE BRANCH_CODE   = CUR_GAR.BRANCH_CODE
               AND MESCTR        = CUR_GAR.MESCTR
               AND COLLATERAL_ID = CUR_GAR.COLLATERAL_ID;

            COMMIT;

             -- Se actualiza el valor de la EAD del cursor CUR_BAS para la siguiente iteración
            VN_NumErr := 8;   
            
            CUR_BAS.EAD_GARANTIZADA       := CUR_GAR.IMP_GARANT_PDTE_ASIGN;
            CUR_BAS.EAD_PDTE_GARANTIZAR   := CUR_BAS.EAD_PDTE_GARANTIZAR - CUR_GAR.IMP_GARANT_PDTE_ASIGN;
            CUR_BAS.COLLATERAL_ID         := CUR_GAR.COLLATERAL_ID;
            CUR_BAS.OR_CODGAR             := CUR_GAR.GARANTIA_RIESGOS;
            CUR_GAR.IMP_GARANT_PDTE_ASIGN := 0;

            VN_NumErr := 9;

            INSERT INTO BAS_MEN.OFEX_BASILEA_GARANTIZADA
            VALUES (CUR_BAS.orden_reg, CUR_BAS.or_idreg, CUR_BAS.OR_NUMOFI, CUR_BAS.or_ctacli, CUR_BAS.CONTRACT_ID, CUR_BAS.EAD_PDTE_GARANTIZAR
                 , CUR_BAS.EAD_GARANTIZADA, CUR_BAS.FI_EADAIRB, CUR_BAS.or_refope, CUR_BAS.or_refope2, CUR_BAS.or_proced, CUR_BAS.OR_CODGAR
                 , CUR_GAR.IDREG_GAR, CUR_GAR.IMP_GARANT_PDTE_ASIGN, CUR_GAR.GARANTIAS_CONTRAVALOR, CUR_GAR.COLLATERAL_ID, CUR_GAR.GARANTIA_RIESGOS
                 , CUR_GAR.BRANCH_CODE, CUR_GAR.CUSTOMER, CUR_GAR.CONTRACT_ID, CUR_GAR.MESCTR);

             COMMIT;

          END IF;

          COMMIT;

          END LOOP;

      IF CUR_BAS.EAD_PDTE_GARANTIZAR <> 0 THEN

           VN_NumErr := 10;
           
           INSERT INTO BAS_MEN.OFEX_BASILEA_GARANTIZADA
           VALUES (CUR_BAS.orden_reg, CUR_BAS.or_idreg, CUR_BAS.OR_NUMOFI, CUR_BAS.or_ctacli, CUR_BAS.CONTRACT_ID, 0, CUR_BAS.EAD_PDTE_GARANTIZAR
                , CUR_BAS.FI_EADAIRB, CUR_BAS.or_refope, CUR_BAS.or_refope2, CUR_BAS.or_proced, 'FIC00500', 0, 0, 0, '?', 'FIC00500', 0, 0, '?', 0);
      END IF;

      COMMIT;

      END LOOP;

      COMMIT;

        --
        -- Info. en el control del proceso del fin correcto (OK) de este
        --
        UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = 'OK'
         WHERE PROCES  = CTE_Nom_Procedimiento
           AND ESTAT   = 'INICIADO';

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            --
            -- Actualización de la tabla de control
            --
             VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
             --
             ROLLBACK;

             UPDATE BAS_MEN.CONTROL_PROCES
                SET ESTAT       = 'FINALIZADO',
                    DATA_FIN    = SYSDATE,
                    FINALITZAT  = 'KO',
                    ERROR_ORAC  = VV_MENSAJE,
                    ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                    NUM_ERROR   = VN_NumErr
              WHERE PROCES  = CTE_Nom_Procedimiento
                AND ESTAT   = 'INICIADO';
            --
            COMMIT;
            --
            RAISE;
            --

    END;


    PROCEDURE Fun_Reparto_Garantias IS

        CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'Fun_Reparto_Garantias';
        VN_NumErr              NUMBER(3)              DEFAULT 0;
        VV_Mensaje             VARCHAR2(255)          DEFAULT '';

    BEGIN

        --
        -- Info. en el control del proceso del ini de este
        --
        INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

        COMMIT;

        VN_NumErr := 1;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_REPARTO_GARANT';
        
        COMMIT;

        VN_NumErr := 2;

        INSERT INTO BAS_MEN.ofex_t24_REPARTO_GARANT
        SELECT A.OR_IDREG, A.OR_REFOPE, A.OR_CODGAR, A.EAD_GARANTIZADA, A.EAD_PDTE_GARANTIZAR, FI_EADAIRB,
               DECODE(A.OR_CODGAR, 'GR 11104', 'HV', 'GR 11106', 'HV', 'GR 11108', 'HV', 'GR 11199', 'HV', '?') OR_TIPGAR /*JCVJCV Ojo no tiene por que coincidir con el Maestro*/
          FROM (SELECT OR_IDREG, OR_REFOPE, OR_CODGAR
                     , SUM(EAD_PDTE_GARANTIZAR) AS EAD_PDTE_GARANTIZAR
                     , SUM(EAD_GARANTIZADA)     AS EAD_GARANTIZADA
                  FROM BAS_MEN.OFEX_BASILEA_GARANTIZADA
                 GROUP BY OR_IDREG, OR_REFOPE, OR_CODGAR) A
             , (SELECT DISTINCT OR_IDREG, FI_EADAIRB 
                  FROM BAS_MEN.OFEX_BASILEA_GARANTIZADA)  B
         WHERE A.OR_IDREG = B.OR_IDREG;

        COMMIT;

        UPDATE BAS_MEN.ofex_t24_REPARTO_GARANT
           SET OR_TIPGAR = 'HV'
         WHERE OR_IDREG IN
               (SELECT DISTINCT Gar_NO_HV.OR_IDREG
                  FROM
                       (SELECT Gara.OR_IDREG, Gara.OR_CTACLI, Gara.OR_NUMOFI, CONTRACT_ID, RepG.OR_TIPGAR
                          FROM BAS_MEN.OFEX_T24_REPARTO_GARANT  RepG
                             , BAS_MEN.OFEX_BASILEA_GARANTIZADA Gara
                         WHERE Gara.OR_IDREG   = RepG.or_idreg
                           AND RepG.OR_TIPGAR <> 'HV'
                       ) Gar_NO_HV
                       ,
                       (SELECT Gara.OR_IDREG, Gara.OR_CTACLI, Gara.OR_NUMOFI, CONTRACT_ID, RepG.OR_TIPGAR
                          FROM BAS_MEN.OFEX_T24_REPARTO_GARANT  Repg
                             , BAS_MEN.OFEX_BASILEA_GARANTIZADA Gara
                         WHERE Gara.OR_IDREG   = RepG.or_idreg
                           AND Gara.OR_CODGAR IN ('GR 11104', 'GR 11106', 'GR 11108', 'GR 11199')
                           AND RepG.OR_TIPGAR = 'HV'
                        ) Gar_HV
                 WHERE Gar_HV.OR_CTACLI   = Gar_NO_HV.OR_CTACLI
                   AND Gar_HV.OR_NUMOFI   = Gar_NO_HV.OR_NUMOFI
                   AND Gar_HV.CONTRACT_ID = Gar_NO_HV.CONTRACT_ID
               )
           AND OR_TIPGAR <> 'HV';

        COMMIT;

        VN_NumErr := 3;
        
        EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_TRAZA_REPARTO_GAR';
        
        COMMIT;

        VN_NumErr := 4;
        
        INSERT INTO BAS_MEN.OFEX_T24_TRAZA_REPARTO_GAR
        SELECT * FROM BAS_MEN.ofex_basilea_garantizada;

        COMMIT;
        --
        -- Info. en el control del proceso del fin correcto (OK) de este
        --
        UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = 'OK'
         WHERE PROCES  = CTE_Nom_Procedimiento
           AND ESTAT   = 'INICIADO';

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
            --
            -- Actualización de la tabla de control
            --
             VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
             --
             ROLLBACK;

             UPDATE BAS_MEN.CONTROL_PROCES
                SET ESTAT       = 'FINALIZADO',
                    DATA_FIN    = SYSDATE,
                    FINALITZAT  = 'KO',
                    ERROR_ORAC  = VV_MENSAJE,
                    ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                    NUM_ERROR   = VN_NumErr
              WHERE PROCES  = CTE_Nom_Procedimiento
                AND ESTAT   = 'INICIADO';
            --
            COMMIT;
            --
            RAISE;
            --

    END;

-- Proceso Principal

BEGIN

    --
    -- Info. en el control del proceso del ini de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES ('FNC_ENRIQUECIMIENTO_OFEX_2', SYSDATE, 'INICIADO');
    
    COMMIT;

    Fun_Llenado_Datos_Auxiliares();
    Fun_Tratar_Garantias();
    Fun_Reparto_Garantias();

    --
    -- Info. en el control del proceso del fin correcto (OK) de este
    --
    UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = 'OK'
     WHERE PROCES  = 'FNC_ENRIQUECIMIENTO_OFEX_2'
       AND ESTAT   = 'INICIADO';
       
     COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización de la tabla de control
        --
        ROLLBACK;

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO',
               DATA_FIN    = SYSDATE,
               FINALITZAT  = 'KO'
         WHERE PROCES  = 'FNC_ENRIQUECIMIENTO_OFEX_2'
           AND ESTAT   = 'INICIADO';
        --
        COMMIT;
        --
        RAISE;
        --
END;
/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_3 IS

   CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'FNC_ENRIQUECIMIENTO_OFEX_3';
   VN_NumErr              NUMBER(3)              DEFAULT 0;
   VV_Mensaje             VARCHAR2(255)          DEFAULT '';

   CURSOR C_T24 IS
   SELECT * FROM BAS_MEN.OFEX_T24_DATOS_PERSONAS;

    VV_CONTADOR NUMBER(8);

BEGIN

    --
    -- Info. en el control del proceso del ini de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

    COMMIT;

    VN_NumErr := 1;

    VV_CONTADOR := 0;

   FOR CUR IN C_T24 LOOP

      VN_NumErr   := 2;
      VV_CONTADOR := VV_CONTADOR + 1;

      UPDATE BAS_MEN.BASILEA
         SET 
             OR_IMPLTV     = nvl(cur.ltv*100,0)
           , or_tipgar     = nvl(cur.tipo_garantia,'?')
           , or_tipofi     = nvl(cur.tipo_finca,'?')
           , or_valtas     = nvl(cur.valor_tasacion_ctv,0)
       WHERE OR_IDREG = CUR.OR_IDREG;

--      UPDATE BAS_MEN.BASILEA
--         SET OR_CODIGO_BIC = nvl(CUR.OR_CODIGO_BIC,'?')
--           , OR_CODISO     = CASE
--                                WHEN nvl(CUR.OR_CODISO,'?') = '?' THEN or_codiso
--                                ELSE CUR.OR_CODISO
--                             END
--           , OR_IDPAIS     = CASE
--                                WHEN nvl(CUR.OR_IDPAIS,0) = 0 THEN or_idpais
--                                ELSE cur.or_idpais
--                             END
--           , OR_PERSON     = nvl(CUR.OR_PERSON,0)
--           , OR_IDCNAE     = nvl(CUR.OR_IDCNAE,0)
--           , OR_IDECNO     = nvl(CUR.OR_IDECNO,999)
--           , IN_PYME       = nvl(CUR.IN_PYME,'N')
--           , OR_TIPIDE     = nvl(CUR.OR_TIPIDE,0)
--           , OR_SEGGES     = nvl(CUR.OR_SEGGES,99)
--           , OR_NOMPER     = CUR.OR_NOMPER
--           , OR_CONCED     = nvl(cur.concedido_ctv,0)
--           , OR_IMPLTV     = nvl(cur.ltv*100,0)
--           , or_tipopr     = nvl(cur.tipo_prestamo,0)
--           , or_destpr     = nvl(cur.destino_prestamo,0)
--           , or_tipgar     = nvl(cur.tipo_garantia,'?')
--           , or_tipofi     = nvl(cur.tipo_finca,'?')
--           , or_valtas     = nvl(cur.valor_tasacion_ctv,0)
--           , IN_TIPOREG    = trim(CASE
--                                     WHEN in_tiporeg in('PX', 'RX') THEN in_tiporeg
--                                     ELSE CUR.IN_TIPOREG
--                                  END)
--       WHERE OR_IDREG = CUR.OR_IDREG;

   END LOOP;

   COMMIT;
        --
        -- Info. en el control del proceso del fin correcto (OK) de este
        --
        UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = 'OK'
         WHERE PROCES  = CTE_Nom_Procedimiento
           AND ESTAT   = 'INICIADO';

        COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización de la tabla de control
        --
         VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
         --
         ROLLBACK;

         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT       = 'FINALIZADO',
                DATA_FIN    = SYSDATE,
                FINALITZAT  = 'KO',
                ERROR_ORAC  = VV_MENSAJE,
                ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                NUM_ERROR   = VN_NumErr
          WHERE PROCES  = CTE_Nom_Procedimiento
            AND ESTAT   = 'INICIADO';
        --
        COMMIT;
        --
        RAISE;
        --

END;

/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_4 IS

     CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'FNC_ENRIQUECIMIENTO_OFEX_4';
     VN_NumErr              NUMBER(3)              DEFAULT 0;
     VV_Mensaje             VARCHAR2(255)          DEFAULT '';
     
     CURSOR c_reg_NO_duplicados IS
     SELECT * 
       FROM BAS_MEN.ofex_t24_reparto_garant
      WHERE or_idreg NOT IN(SELECT or_idreg 
                              FROM BAS_MEN.ofex_t24_reparto_garant 
                             GROUP BY or_idreg 
                            HAVING count(*) > 1);
     
     CURSOR c_reg_duplicados IS
     SELECT * 
       FROM BAS_MEN.ofex_t24_reparto_garant
      WHERE or_idreg IN(SELECT or_idreg 
                          FROM BAS_MEN.ofex_t24_reparto_garant 
                         GROUP BY or_idreg 
                        HAVING count(*) > 1);
     
     vv_reg_basilea BAS_MEN.basilea%rowtype;
     vv_count     BAS_MEN.basilea.or_idreg%type;
     vv_max_idreg BAS_MEN.basilea.or_idreg%type;

BEGIN

    --
    -- Info. en el control del proceso del ini de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

    COMMIT;

    VN_NumErr := 1;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.OFEX_T24_REG_INSERTADOS_BDD';

    vv_count := 0;

    VN_NumErr := 2;

    /*Registros no duplicados */
    FOR cur IN c_reg_NO_duplicados LOOP

    VN_NumErr := 3;

    SELECT *
      INTO vv_reg_basilea
      FROM BAS_MEN.basilea
     WHERE or_idreg = cur.or_idreg;

    VN_NumErr := 4;

    UPDATE BAS_MEN.basilea
       SET or_codgar = cur.OR_CODGAR,
           OR_TIPGAR = CUR.OR_TIPGAR
     WHERE or_idreg = cur.or_idreg;

    COMMIT;

    VN_NumErr := 5;

    INSERT INTO BAS_MEN.ofex_t24_reg_insertados_bdd --tmpJCV
    VALUES
          (  'ACTUALIZA'
           , cur.or_idreg
           , cur.or_idreg
           , cur.or_codgar
           , cur.ead_garantizada/cur.fi_eadairb
           , vv_reg_basilea.OR_DISPTO
           , vv_reg_basilea.OR_DISBLE
           , vv_reg_basilea.OR_AVALES
           , vv_reg_basilea.OR_FUTURS
           , vv_reg_basilea.OR_REPOS
           , vv_reg_basilea.OR_AJUVAL
           , vv_reg_basilea.or_idpro1
           , vv_reg_basilea.or_provapl
           , vv_reg_basilea.in_indmor
           , CUR.OR_TIPGAR
          );

    COMMIT;

     vv_count := vv_count + 1;

  END LOOP;

  COMMIT;

  --dbms_output.put_line('Reg no dup. actualizados : '||vv_count);
  --commit;

  vv_count := 0;

  VN_NumErr := 6;

  SELECT max(or_idreg)
    INTO vv_max_idreg
    FROM BAS_MEN.basilea;

  VN_NumErr := 7;

  /* registros duplicados */
  FOR cur IN c_reg_duplicados LOOP

    VN_NumErr := 8;

    SELECT *
      INTO vv_reg_basilea
      FROM BAS_MEN.basilea
     WHERE or_idreg = cur.or_idreg;

    VN_NumErr := 9;
    vv_count := vv_count + 1;

    vv_reg_basilea.or_idreg      := vv_max_idreg + vv_count;
    vv_reg_basilea.or_codgar     := cur.or_codgar;
    vv_reg_basilea.OR_TIPGAR     := CUR.OR_TIPGAR;
    vv_reg_basilea.fi_elimi1     := 'NO';
    vv_reg_basilea.OR_DISPTO     := vv_reg_basilea.OR_DISPTO     * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_DISBLE     := vv_reg_basilea.OR_DISBLE     * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_AVALES     := vv_reg_basilea.OR_AVALES     * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_FUTURS     := vv_reg_basilea.OR_FUTURS     * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_REPOS      := vv_reg_basilea.OR_REPOS      * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_AJUVAL     := vv_reg_basilea.OR_AJUVAL     * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.FI_EADAIRB    := vv_reg_basilea.FI_EADAIRB    * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_PROVAPL    := vv_reg_basilea.OR_PROVAPL    * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_DISPTOCON  := vv_reg_basilea.OR_DISPTOCON  * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_DISBLECON  := vv_reg_basilea.OR_DISBLECON  * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_AVALESCON  := vv_reg_basilea.OR_AVALESCON  * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_FUTURSCON  := vv_reg_basilea.OR_FUTURSCON  * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_REPOSCON   := vv_reg_basilea.OR_REPOSCON   * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.OR_AJUVALCON  := vv_reg_basilea.OR_AJUVALCON  * cur.ead_garantizada/cur.fi_eadairb;
    vv_reg_basilea.FI_EADCONAIRB := vv_reg_basilea.FI_EADCONAIRB * cur.ead_garantizada/cur.fi_eadairb;


    VN_NumErr := 10;

    INSERT INTO BAS_MEN.basilea
    VALUES vv_reg_basilea;

    COMMIT;

    VN_NumErr := 11;

    UPDATE BAS_MEN.basilea
       SET fi_elimi1 = 'GAROFEX'
     WHERE or_idreg = cur.or_idreg;

    COMMIT;

    VN_NumErr := 12;

    INSERT INTO BAS_MEN.ofex_t24_reg_insertados_bdd
    VALUES
          (  'INSERTA NUEVO'
           , cur.or_idreg
           , vv_max_idreg +  vv_count
           , cur.or_codgar
           , cur.ead_garantizada/cur.fi_eadairb
           , vv_reg_basilea.OR_DISPTO
           , vv_reg_basilea.OR_DISBLE
           , vv_reg_basilea.OR_AVALES
           , vv_reg_basilea.OR_FUTURS
           , vv_reg_basilea.OR_REPOS
           , vv_reg_basilea.OR_AJUVAL
           , vv_reg_basilea.or_idpro1
           , vv_reg_basilea.or_provapl
           , vv_reg_basilea.in_indmor
           , CUR.OR_TIPGAR
          );

    COMMIT;

  END LOOP;

  COMMIT;

  --
  -- Info. en el control del proceso del fin correcto (OK) de este
  --
  UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
     SET ESTAT       = 'FINALIZADO'
       , DATA_FIN    = SYSDATE
       , FINALITZAT  = 'OK'
   WHERE PROCES  = CTE_Nom_Procedimiento
     AND ESTAT   = 'INICIADO';

  COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización de la tabla de control
        --
         VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
         --
         ROLLBACK;

         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT       = 'FINALIZADO',
                DATA_FIN    = SYSDATE,
                FINALITZAT  = 'KO',
                ERROR_ORAC  = VV_MENSAJE,
                ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                NUM_ERROR   = VN_NumErr
          WHERE PROCES  = CTE_Nom_Procedimiento
            AND ESTAT   = 'INICIADO';
        --
        COMMIT;
        --
        RAISE;
        --

END;
/

create or replace PROCEDURE   BAS_MEN.BASI_ENRIQUECIMIENTO_OFEX IS

  -- bka00120.sql -- XBK1022M
                  -- XBK1023M

BEGIN

    ROLLBACK; -- Cierre de cualquier TX que pueda haber abierta.

    --
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Activación de paralelismo

    /* Realiza el Cálculo del CCF y Enriquecimiento da datos de OFEX y de personas OFEX  (Genera la tabla BAS_MEN.OFEX_T24_DATOS_PERSONAS)*/
    BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_1;

    /* Realiza el reparto de Garantias  de OFEX (Genera la tabla BAS_MEN.OFEX_T24_REPARTO_GARANT)*/
    BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_2;

    /* Actualiza BBDD(BASILEA) a partir de datos de personas y alguno mas de OFEX (Genera la tabla BAS_MEN.OFEX_T24_DATOS_PERSONAS)*/
    BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_3;

    /* Generación de la tabla BAS_MEN.OFEX_T24_REG_INSERTADOS_BDD y actualización de BBDD(BASILEA)*/
    BAS_MEN.FNC_ENRIQUECIMIENTO_OFEX_4;

END;

/
   
--bka00006=====================================================================================================
Select 'bka00006' As Compilando from dual;

CREATE OR REPLACE FORCE VIEW bas_men.vista_segmentacion AS
SELECT /*+ full(a) PARALLEL (A 4) parallel(drc 4) parallel (bloq 4) PARALLEL (SEG_HIP 4) */
            distinct A.OR_IDREG, a.OR_SEGGES, a.OR_TIPGAR, OR_TIPOPR, a.OR_TIPIDE, a.OR_IDECNO, A.OR_PROCED, OR_DESTPR, a.OR_PERSON,
            a.OR_IDPERS, a.OR_ENTITY, a.OR_IDCNAE, NVL(a.OR_TIPOPE,'?') TIPOPE, a.OR_CTAIND, OR_EPIIND,  OR_FECOPE,
            a.OR_REFOPE, OR_TITUSCPCB, OR_PERSONSCPCB, OR_CNAESCPCB,
            B.in_sucept, a.or_titularitat,
            NVL(B.ID_TIP_SCO,NVL(F.TIP_SCO,E.TIP_SCO)) TIP_SCO, NVL(F.COD_ACC,E.COD_ACC) COD_ACC, A.OR_CLUNIPROD, A.OR_TIPOPE,
            A.OR_DIVISA, A.OR_NIFCIF, nvl(A.OR_FINABE, '?') OR_FINABE, A.OR_CODPRODO, OR_DESCTAVISTA,
            NVL(SEGMENTO, 'OTROS') SEGMENTO_CNAE,
            case when a.or_entity in (9109, 9408) then a.in_segmbsini else NVL(PERSON.IN_SEGMBSINI, '?') end as IN_SEGMBSINI,
            decode(empleados.nifcif, NULL, 0,1) EMPLEADO,
            NVL(PERSON_SCPCB.IN_SEGMBSINI, '?') IN_SEGMBSINI_SCPCB, B.ID_MIG_RAT,
            B.IND_VEN, B.OR_NUMSCO1,
            A.or_tituctavista, a.or_persctavista, a.or_cnaectavis, --G.CONTRATO,
            a.OR_CLUNICUENT, OR_VERSPREST, a.FI_EPICON,
            nvl(tot.IN_SEGMBSINI_NEW, '?') as segmbsini_tot,
            nvl(bde.IN_SEGMBSINI, '?') as segmbsini_bde,
            case when A.OR_NIFCIF = 'N0030939C' OR A.OR_TITULARITAT = 18776122 THEN '020' /* RMR 09/03/2020 - Añadido requerimiento promontoria */
                 when prom.cnae93 is not null then '020'
                 when UPPER (opgar.SUBTIPO) = 'TAX LEASE'  then '301'   /* FMRR 22/02/2021 -- TM-4152 -- Identificar el taxlease y RD874 */
                 when opgar.SUBTIPO LIKE '%874%'           then '302'
                 else '?'
            end IN_SEGMBS2,
            case when prom_CA.cnae93 is not null then '020' else '?' end    IN_SEGMBS2_CA,
            case when A.OR_NIFCIF = 'N0030939C' OR A.OR_TITULARITAT = 18776122 THEN '200'  /* RMR 09/03/2020 - Añadido requerimiento promontoria */
                 when a.in_tiporeg = 'FMX' and nvl(a.IN_SEGMBS0, '?') <> '?' then a.IN_SEGMBS0  /* NAV 21/05/2021 - Para Mexico */
                 when pf.or_idpers is not null then '201'
                 when pf_ibm.or_idpers is not null then '201'
                 when pf_ofex.OR_CTACLI is not null then '201'
                 when NVL(re.or_idpers, re_bm.or_idpers) is not null then '203'/* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Real Estate, aparte del existente por OR_NIFCIF*/
                 when re_ofex.OR_CTACLI is not null then '203'
                 when NVL(ofi.or_idpers, ofi_bm.or_idpers) is not null then '204'/* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Project finance, aparte del existente por OR_NIFCIF*/
                 when ofi_ofex.OR_CTACLI is not null then '204'
                 when a.OR_PROCED in ('FORFAITING', 'FACTORING', 'EFECTES', 'CONFIRMING', 'ES-NEGDOC') then '202'
                 when PromPro.MADURACION_PRAL is not null then '200'
            else '?'
            end in_SEGMBS0,
            case when ced.isin is not null then '034' else '?' end segmbsini_bono,
            case when vida.or_ctaind is not null then '005' else '?' end segmbsini_vida,
            case when epicon.fi_epicon is not null then epicon.in_segmbsini else '?' end segmbsini_epicon,
          /*case WHEN OR_FECOPE < PN_FECPRO-10000 THEN nvl(PROD_SCORE, '?') else '?' end PROD_SCORE,*/
          /*case WHEN (OR_FECOPE < 20190630-10000 OR TO_NUMBER(TO_CHAR(FECHAULTIMA, 'YYYYMMDD')) < 20190630-10000)  THEN nvl(PROD_SCORE, '?') else '?' end PROD_SCORE,*/
            case WHEN OR_FECOPE > 19000101
                    AND ( (ABS(MONTHS_BETWEEN(FECHAULTIMA, TO_DATE(OR_FECOPE,'YYYYMMDD'))) <= 6
                         AND FECHAULTIMA < add_months(TO_DATE(20210630,'YYYYMMDD'),-12))
                      OR
                          (ABS(MONTHS_BETWEEN(FECHAULTIMA, TO_DATE(OR_FECOPE,'YYYYMMDD'))) > 6
                         AND TO_DATE(OR_FECOPE,'YYYYMMDD') < add_months(TO_DATE(20210630,'YYYYMMDD'),-12)) )
                 THEN nvl(PROD_SCORE, '?')
                 else '?' end PROD_SCORE,
            a.OR_CODIGO_BIC,
            PromPro.MADURACION_PRAL,
            A.IN_PRESTPERCENT,
            TO_NUMBER(TO_CHAR(FECHAULTIMA, 'YYYYMMDD')) FECHAULTIMA,
            case
                 when a.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR
                    (a.OR_PROCED = 'MANUAL' AND a.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)) then
                     case
                         when SUBSTR(a.OR_EPIIND,1,5) = '01005' then
                              'RX'  /*IDENTIFICACIÓN DE LAS OFEX, ('RX' PARA RENTA FIJA).*/
                         when pf_ofex.OR_CTACLI is not null or pf.or_idpers is not null or pf_ibm.or_idpers is not null then
                              'PX'  /*IDENTIFICACIÓN DE LAS OFEX DE PROJECT FINANCE ('PX').   */
                       --when ofex_gar.OR_IDREG_NEW is not null then 'OXE'   /* FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
                         else
                              'OXE' --nvl(ofex.in_tiporeg, 'OX')   /*  FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
                     end
                 when substr(a.in_tiporeg,1,2) in ('MM', 'CE', 'AV') then substr(a.in_tiporeg,3)
                 else a.in_tiporeg
           end as in_tiporeg
         , a.FI_elimi1
         , NVL(bloq.FECALTBLO, a.OR_FECALTBLO) as OR_FECALTBLO
         , CASE
           WHEN a.OR_FECOPE in (0, 10101) THEN
                99999999
           WHEN 20190630 < a.OR_FECOPE THEN
                99999999
           ELSE
                TO_DATE(20190630,'YYYY/MM/DD') - TO_DATE(a.OR_FECOPE,'YYYY/MM/DD')
           END as IN_ANTIGU
         , CASE
           WHEN SOB.CODI_PAIS IS NOT NULL THEN
                SOB.CODI_PAIS
           ELSE 'ES'
            END as OR_CODISO
         , case
           when fiador.ID_ENTIDADCTO_POTENCIAL is not null then
                'SI'
           ELSE
                'NO'
           END AS IN_HIPOAVAL
         , case
           when a.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR (a.OR_PROCED = 'MANUAL' AND a.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365))  then
                /*RMR 08/10/2019 En caso de que que el LTV de OFEX sean negativo, forzamos un 0*/
                /*a.or_impltv*/
                case
                    when a.or_impltv < 0 then 0
                    else a.or_impltv
                end
                /*RMR 08/10/2019 En caso de que que el LTV de OFEX sean negativo, forzamos un 0*/
           when ltv.IMPLTV is not null then IMPLTV
           when a.OR_TIPGAR IN ('HC','HV','HR','HX') AND a.OR_CLUNIPROD not in ('PR', 'LE', 'PI') AND a.OR_IMPLTV <= 0 then
                100
           when a.or_impltv < 0 or (a.or_valtas < 10 and a.OR_IMPLTV <> 100) then
                0
           when a.or_impltv > 200 then
                200
           else
                a.or_impltv
           end as or_impltv
         , case
           when a.OR_CTAIND in (4372631200, 4372641200) then     /* ADP 05/06/2018  cuentas contables de la seguridad social deben de tener un código de garantía GE 21109*/
                                'GE 21109'
           when gar_rf.or_coisin is not null and a.fi_tipexp not in ('OTC', 'Repos') then gar_rf.OR_CODGAR
           when a.or_codgar = '?' then 'FIC00800'
           when opgar.operacion is not null then 'GR 12102' /* RMR 09/06/2020 Para todas aquellas operaciones */
           else
                a.or_codgar
           end as or_codgar
         , case
           when a.or_valtas < 10 then
                0
           else
                a.or_valtas
           end as or_valtas
         , case
           when a.OR_PROCED IN ('INV-C/C-CR', 'INV-C/C-EX') AND NVL(a.OR_FECOPE,0) <> 0 AND a.OR_FECPRREV <> '?'
            AND TO_DATE(a.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(20190630,'YYYY/MM/DD') > 365 THEN
                case
                when SUBSTR(a.OR_FECOPE, 5,4) = '0229' then
                     case
                     when TO_NUMBER(SUBSTR(20190630,1,4)||'0228') < 20190630 THEN
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)+1||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
                     else
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
                     end
                else
                     case
                     when TO_NUMBER(SUBSTR(20190630,1,4)||SUBSTR(a.OR_FECOPE, 5,4)) < 20190630 THEN
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)+1||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
                     else
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
                     end
                end
           when (a.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA', 'OFEX-LI')
             OR (a.OR_PROCED = 'MANUAL' AND a.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)))
            AND a.or_tipope = 'CR' AND NVL(a.OR_FECOPE,0) <> 0 AND a.OR_FECPRREV <> '?'
            AND TO_DATE(a.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(20190630,'YYYY/MM/DD') > 365 THEN
                case
                when SUBSTR(a.OR_FECOPE, 5,4) = '0229' then
                     case
                     when TO_NUMBER(SUBSTR(20190630,1,4)||'0228') < 20190630 THEN
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)+1||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
                     else
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
                     end
                else
                     case
                     when TO_NUMBER(SUBSTR(20190630,1,4)||SUBSTR(a.OR_FECOPE, 5,4)) < 20190630 THEN
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)+1||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
                     else
                          TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(20190630,1,4)||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
                     end
                end
           else
                a.OR_FECPRREV
           end as OR_FECPRREV
         , NVL(SEG_HIP.IN_SEG_HIP_NEW, a.IN_SEG_HIP) as IN_SEG_HIP
         , a.IN_INDMOR
         , case when nvl(in_idcalificrel,0) <> 0 then nvl(cnarel.or_idcnae, a.or_idcnae) else 0 end as OR_IDCNAEREL
         , case when nvl(in_idcalificrel,0) <> 0 then nvl(holrel.OR_INDHOLDING, a.OR_INDHOLDING) else '?' end as OR_INDHOLDINGREL
         , nvl(drc.ID_CAT_DRC, 9999) ID_CAT_DRC
         , a.OR_NUMOFI /*  FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
       FROM BAS_MEN.basilea A,
            BAS_MEN.MAESTRO_CNAES_SECTOR CNAES,
            BAS_MEN.MAESTRO_PERSONALIDADES PERSON,
            BAS_MEN.MAESTRO_PERSONALIDADES PERSON_SCPCB,
--            (select OR_TITULARITAT, OR_CLUNIENT, OR_CLUNIPROD, OR_CLUNICONTR CONTRATO
--               from BAS_MEN.MAESTRO_RESEGMENTACION_CA_BASI
--              where OR_CLUNICONTR <> 999999999999999) G,
            (SELECT DISTINCT lpad(id_legal,12,'0') nifcif
                FROM BAS_MEN.EMPLEADOS
               WHERE FEC_ALTA_EMPLEADO <= 20190630
                 AND (FEC_BAJA IS NULL OR FEC_BAJA >= 20190630)) EMPLEADOS,
              BAS_MEN.TIPO_PRESTAMO_SIBIS F,
              BAS_MEN.TIPO_PRESTAMO E,
              BAS_MEN.MAESTRO_RESEG_TOTAL tot,
              BAS_MEN.MAESTRO_RESEGMENTACION_BDE bde,
              BAS_MEN.MAESTRO_PROJECT_FINANCE pf,
              BAS_MEN.MAESTRO_PROJECT_FINANCE pf_ibm,
              /*(select * from BAS_MEN.MAESTRO_PROJECT_FINANCE where NVL(OR_CTACLI,0) <> 0) pf_ofex, 11/03/2021 NAV - debido a que ahora hay duplicados en los campos de ctacli y numofi*/
              (select distinct or_ctacli, or_numofi from BAS_MEN.MAESTRO_PROJECT_FINANCE where NVL(OR_CTACLI,0) <> 0) pf_ofex,
              BAS_MEN.MAESTRO_REAL_ESTATE RE,
              BAS_MEN.MAESTRO_REAL_ESTATE RE_BM,/* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Real Estate, aparte del existente por OR_NIFCIF*/
              (select * from BAS_MEN.MAESTRO_REAL_ESTATE where NVL(OR_CTACLI,0) <> 0) RE_OFEX,
              BAS_MEN.MAESTRO_OBJECT_FINANCE OFI,
              BAS_MEN.MAESTRO_OBJECT_FINANCE OFI_BM, /* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Project finance, aparte del existente por OR_NIFCIF*/
              (select * from BAS_MEN.MAESTRO_OBJECT_FINANCE where NVL(OR_CTACLI,0) <> 0) OFI_OFEX,
              BAS_MEN.MAESTRO_CEDULAS_HIPOTECARIAS CED,
              (SELECT CNAE93 FROM BAS_MEN.MAESTRO_CNAES_SECTOR WHERE SEGMENTO = 'PROMOTOR') prom,
              (SELECT CNAE93 FROM BAS_MEN.MAESTRO_CNAES_SECTOR WHERE SEGMENTO = 'PROMOTOR') prom_CA,
              BAS_MEN.CUENTA_BS_VIDA vida,
              BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS epicon,
              (SELECT /*+ parallel (ScoCo 8) */  DISTINCT ScoCo.CONTRATO, ScoCo.CONTRATO_DISP, ScoCo.PROD_SCORE
                 FROM BAS_MEN.SCORES_CONTRATO_COMPORTAMENTAL ScoCo
                WHERE scoco.PROD_SCORE IN ('HP','CO')) Scor,
                        BAS_MEN.PROMOTORES_CON_PROMOCION PromPro,
                        (SELECT ORI.IN_SUCEPT, ORI.ID_NUM_PRE_SIBIS, ORI.ID_NUMVERSPR, ORI.ID_TIP_SCO, ORI.ID_FCH_FEC_SCO_VAL, ORI.ID_MIG_RAT, ORI.OR_NUMSCO1, ORI.IND_VEN, PROP.FECHAULTIMA
                 FROM (SELECT /*+ PARALLEL (d 8) */ D.ID_MAPA_DE_USO in_SUCEPT, D.ID_NUM_PRE_SIBIS, D.ID_NUMVERSPR, ID_TIP_SCO, ID_FCH_FEC_SCO_VAL, D.ID_MIG_RAT, ID_SCORING_VALIDADO as OR_NUMSCO1, IND_VEN
                         FROM BAS_MEN.BS_CAL_SCORING_ORI D) ORI,
                      (SELECT * FROM BAS_MEN.TM_CAL_PROPUESTA
                        WHERE TO_NUMBER(TO_CHAR(FECHAULTIMA, 'YYYYMMDD')) <= 201906
                          AND FECHAULTIMA IS NOT NULL) PROP
                WHERE TO_NUMBER(ORI.OR_NUMSCO1) = TO_NUMBER(NUMSOLICITUD(+))) B
            , BAS_MEN.LISTADO_BLOQUEOS_CORREGIDOS bloq
            , (SELECT DISTINCT ID_ENTIDADCTO_POTENCIAL, ID_CODIGO_TIPOPROD_POTENCIAL, ID_COD_CONTRATO_POTENCIAL FROM BAS_MEN.MAESTRO_FIADOR) fiador
            , BAS_MEN.MAESTRO_SOBERANOS SOB
            , BAS_MEN.SEG_HIP_BDD_NO_GARANT SEG_HIP
            , BAS_MEN.BASILEA_LTV LTV
            , BAS_MEN.CNAESBASILEA cnarel
            , BAS_MEN.TITU_INDHOLDING holrel
            , BAS_MEN.MAESTRO_GARANTIAS_RF gar_rf
            , BAS_MEN.VW_APR_DRC drc
          /*  FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
          --, BAS_MEN.OFEX_T24_DATOS_PERSONAS ofex
          --, (SELECT OR_IDREG_NEW
          --     FROM BAS_MEN.OFEX_T24_REG_INSERTADOS_BDD
          --    WHERE IND_ACCION = 'INSERTA NUEVO') ofex_gar
            , (SELECT SUBSTR(OPERACION, 1, 10) AS OPERACION, SUBTIPO
                 FROM BAS_MEN.MAESTRO_RD874) opgar /* RMR 09/06/2020 Añadido maestro para asignar codigo de garantia a los astilleros bajo el RD874 */
      WHERE A.OR_REFOPE = B.ID_NUM_PRE_SIBIS(+)
        AND A.OR_VERSPREST = B.ID_NUMVERSPR(+)
        AND A.OR_TIPOPR = E.TIP_PRE(+)
        AND A.OR_TIPOPR = F.TIP_PRE(+)
        AND A.OR_IDCNAE = cnaes.CNAE93(+)
        AND A.OR_PERSON = PERSON.OR_PERSON(+)
        AND A.OR_PERSCTAVISTA = PERSON_SCPCB.OR_PERSON(+)
        AND A.OR_NIFCIF = EMPLEADOS.NIFCIF(+)
--      AND A.OR_CLUNIENT = G.OR_CLUNIENT(+)
--      AND A.OR_CLUNIPROD = G.OR_CLUNIPROD(+)
--      AND A.OR_CLUNICONTR = G.CONTRATO(+)
        AND A.OR_IDPERS = tot.OR_IDPERS(+)
        and a.OR_NIFCIF = bde.OR_NIFCIF(+)
        and a.OR_NIFCIF = pF.OR_IDPERS (+)
        and a.OR_NIFCIFIBM = pF_ibm.OR_IDPERS(+)
        and a.OR_CTACLI         = pF_ofex.OR_CTACLI(+)
        AND a.OR_NUMOFI         = pf_ofex.OR_NUMOFI(+)
        and a.OR_NIFCIF         = re.OR_IDPERS (+)
        and a.OR_NIFCIFIBM      = re_bm.OR_IDPERS (+) /* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Real Estate, aparte del existente por OR_NIFCIF*/
        and a.OR_CTACLI         = re_ofex.OR_CTACLI(+)
        AND a.OR_NUMOFI         = re_ofex.OR_NUMOFI(+)
        and a.OR_NIFCIF         = ofi.OR_IDPERS (+)
        and a.OR_NIFCIFIBM      = ofi_bm.OR_IDPERS (+) /* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Project finance, aparte del existente por OR_NIFCIF*/
        and a.OR_CTACLI         = ofi_ofex.OR_CTACLI(+)
        AND a.OR_NUMOFI         = ofi_ofex.OR_NUMOFI(+)
      /*INI --30/10/2019 - NAV -- BORRADO DEL CAMPOS OR_ISINBO DE BASILEA POR ESO SUSTITUIMOS POR OR_COISIN
        and A.OR_ISINBO         = ced.ISIN(+) */
        and A.OR_COISIN         = ced.ISIN(+)
      /*FIN */
        and a.OR_IDCNAE         = prom.cnae93(+)
        and case when a.or_tituctavista <> 0 then a.or_cnaectavis else a.or_idcnae end = prom_CA.cnae93(+)
        and a.or_ctaind = vida.or_ctaind(+)
        and a.fi_epicon = epicon.fi_epicon(+)
        and CASE WHEN a.OR_CLUNICONTR IN (0, 999999999999999) THEN a.OR_REFOPE ELSE  a.OR_CLUNICONTR END = Scor.CONTRATO(+)
        and a.OR_REFOPE = scor.CONTRATO_DISP(+)
        and a.OR_CLUNICONTR=PromPro.CTO_SIN_DG(+)
        and a.OR_IDREG              = Bloq.OR_IDREG(+)
        and a.OR_CLUNIENT           = fiador.ID_ENTIDADCTO_POTENCIAL(+)
        AND a.OR_CLUNIPROD          = fiador.ID_CODIGO_TIPOPROD_POTENCIAL(+)
        AND a.OR_CLUNICONTR         = fiador.ID_COD_CONTRATO_POTENCIAL(+)
        AND A.OR_IDPAIS             = sob.CODI_NUM_PAIS(+)
        AND a.OR_IDREG              = SEG_HIP.OR_IDREG(+)
        AND a.OR_REFOPE             = LTV.OR_REFOPE(+)
        AND a.or_cluniprod          = ltv.or_cluniprod(+)
        and a.in_idcalificrel       = cnarel.IDCALREC(+)
        and a.in_idcalificrel       = holrel.IDCALREC(+)
        and a.OR_COISIN             = gar_rf.OR_COISIN(+)
        and a.OR_NIFCIF             = drc.OR_NIFCIF(+)
        and a.OR_CLUNICONTR         = drc.OR_CLUNICONTR(+)
        and a.OR_CONTRATO_GARANTIA  = drc.OR_CONTRATO_GARANTIA(+)
        and a.OR_CLUNICUENT         = drc.OR_CLUNICUENT(+)
        and a.OR_CLUNIOPERA         = drc.OR_CLUNIOPERA(+)
        and a.OR_CTAIND             = drc.OR_CTAIND(+)
     /* FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
     -- and a.or_idreg              = ofex.or_idreg(+)
     -- and a.or_idreg              = ofex_gar.OR_IDREG_NEW(+)
        and a.OR_CLUNICONTR         = opgar.OPERACION(+);

/************************************************************************************/
/* CREATE DE LA DEFINICION DE LA FUNCION DEL PACKAGE                                */
/************************************************************************************/

CREATE OR REPLACE PACKAGE BAS_MEN.PK_SEGMENTACION is

    TYPE cursor_basilea is REF CURSOR RETURN BAS_MEN.VISTA_SEGMENTACION%ROWTYPE;
    TYPE t_array_basilea_SEGMENTACION IS TABLE OF BAS_MEN.BASILEA%ROWTYPE;

    FUNCTION F_SEGMENTACION (cur IN cursor_basilea, PN_FECPRO IN NUMBER) return t_array_basilea_SEGMENTACION
    parallel_enable(PARTITION cur by any)
    PIPELINED;

end;

/

show errors;

/************************************************************************************/
/* CREATE DEL CUERPO DE IMPLEMENTACION DE LA FUNCION DEL PACKAGE                    */
/************************************************************************************/
CREATE OR REPLACE PACKAGE BODY BAS_MEN.PK_SEGMENTACION AS

FUNCTION F_SEGMENTACION (cur IN cursor_basilea, PN_FECPRO IN NUMBER) RETURN t_array_basilea_SEGMENTACION
         parallel_enable(PARTITION cur by any)
         PIPELINED
      as

  in_rec cur%ROWTYPE;
  out_rec BAS_MEN.BASILEA%ROWTYPE;
  v_num                 NUMBER;
  VN_NUMERR             NUMBER(3);
  VV_MENSAJE            VARCHAR2(255);
  VN_COUNT              NUMBER(9):=0;
  VV_ROWID              VARCHAR2(50);
  VV_IN_SEGMBSINI       VARCHAR2(3);
  VV_IN_SEGMBS          VARCHAR2(25);
  VV_IN_SEGMBS2         VARCHAR2(3);
  VV_IN_SEGMBSMOD       VARCHAR2(3);
  VN_NO_PROMO           VARCHAR2(2);
  VN_IN_TIPOREG         VARCHAR2(10);
  VV_IN_SEGMBS0         VARCHAR2(3);
  VV_SUCEPT             VARCHAR2(10);
  VV_OR_NUMSCO          VARCHAR2(14);
  VV_OR_TITUSCPCB       NUMBER(16);
  VV_OR_PERSONSCPCB     NUMBER(3);
  VV_OR_CNAESCPCB       NUMBER(9);
  vv_or_migsco          varchar2(2);
  VV_IN_PRESTPERCENT    NUMBER(3);

  BEGIN
  LOOP

     fetch cur into in_rec;
     EXIT WHEN cur%notfound;

      VN_COUNT:= VN_COUNT + 1;
      VV_ROWID:= TO_CHAR(IN_REC.OR_IDREG);
      VV_IN_SEGMBSINI:= '?';
      VV_IN_SEGMBS := '?';
      VV_IN_SEGMBSMOD := '?';
      VV_IN_SEGMBS2:= '?';
      VN_IN_TIPOREG  := 'IN';
      VV_SUCEPT := '?';
      VV_OR_TITUSCPCB   := IN_REC.OR_TITUSCPCB;
      VV_OR_PERSONSCPCB := IN_REC.OR_PERSONSCPCB;
      VV_OR_CNAESCPCB   := IN_REC.OR_CNAESCPCB;
      VV_OR_NUMSCO      := IN_REC.OR_NUMSCO1;
      VV_IN_SEGMBS0 := '?';
      /* INI ALLA 14/07/16 */
      vv_or_migsco         := IN_REC.ID_MIG_RAT;
      /*FIN ALLA14/07/16 */
      VV_IN_PRESTPERCENT := 999;

      IF IN_REC.segmbsini_bde <> '?' and substr(in_rec.or_nifcif,1,1) <> 'R' then -- segmentación BDE
         VV_IN_SEGMBSINI:= IN_REC.segmbsini_bde;
      ELSIF IN_REC.segmbsini_tot <> '?' then -- segmentación usuario
            VV_IN_SEGMBSINI:= IN_REC.segmbsini_tot;
      ELSIF IN_REC.OR_EPIIND LIKE '01001002002%' THEN -- Administraciones Centrales y Bancos Centrales.
            VV_IN_SEGMBSINI:= '008';
      ELSIF IN_REC.OR_EPIIND LIKE '01001003%' THEN      -- DISTINCIÓN ENTRE FINANCIADO O NO CON MONEDA LOCAL
            IF ((IN_REC.or_codiso <> substr(IN_REC.or_divisa,1,2)
               and IN_REC.or_divisa = 'EUR' and IN_REC.OR_CODISO IN ('FR','NL','DE','IT','IE','GR','PT','ES','BE','LU','FI','AT','MT','SI','YT','CY',
                                                                     'AD','VA','MC','ME','SM', 'PE','CO','MX','CL','BR','UY','TR', 'AR'))
                or IN_REC.or_codiso = substr(IN_REC.or_divisa,1,2)) THEN
                    VV_IN_SEGMBSINI:= '035';
            ELSE
                    VV_IN_SEGMBSINI:= '036';
            END IF;
      ELSIF IN_REC.OR_EPIIND LIKE '01001001%' THEN
            VV_IN_SEGMBSINI := 'XXX';
      ELSIF IN_REC.OR_EPIIND LIKE '01005002002%' OR IN_REC.OR_EPIIND LIKE '01005002003%' THEN  -- Deuda Pública de CCAA y Corporaciones Locales.
         VV_IN_SEGMBSINI:= '030';
      --Persona jurídica.
      ELSIF IN_REC.OR_TIPIDE IN (10,11,12,15,16) AND IN_REC.OR_SEGGES IN (0,3,4,5) THEN
            VV_IN_SEGMBSINI := IN_REC.IN_SEGMBSINI;
      -- 319 BCOS.CENTR/AUTOR.MONET.NACION. que no estén financiados en la moneda local -> IN_SEGMBSINI = 036
      ELSIF IN_REC.OR_PERSON = 319 AND IN_REC.OR_TIPIDE IN (10,11,12,15,16) AND IN_REC.OR_SEGGES IN (0,3,4,5) THEN
            IF ((IN_REC.or_codiso <> substr(IN_REC.or_divisa,1,2) AND IN_REC.or_divisa = 'EUR'
               and IN_REC.or_codiso in ('FR','NL','DE','IT','IE','GR','PT','ES','BE','LU','FI','AT','MT','SI','YT','CY','PE','CO','MX',
                                        'CL','BR','UY','TR', 'AR'))
               or IN_REC.or_codiso = substr(IN_REC.or_divisa,1,2)) THEN
                 VV_IN_SEGMBSINI:= '035';
            ELSE
                 VV_IN_SEGMBSINI:= '036';
            END IF;

      --Persona física y Comercios y Autónomos. NUEVA IDENTIFICACION DE PERSONAS FISICAS,
      ELSIF (IN_REC.OR_TIPIDE IN (0,2,3,4,5) AND IN_REC.OR_SEGGES IN (1,2))
            OR (IN_REC.OR_TIPIDE IN (0,2,3,4,5) AND IN_REC.OR_SEGGES = 0 AND IN_REC.OR_IDECNO IS NOT NULL AND IN_REC.OR_IDECNO NOT IN (0,999))
            OR (IN_REC.OR_TIPIDE IN (0,2,3,4,5) AND IN_REC.IN_TIPOREG = 'OXE') THEN
         VN_NUMERR:= 5;

         IF ((IN_REC.TIPOPE = 'PR' OR (SUBSTR(IN_REC.OR_PROCED,1,3) = 'PR-' AND IN_REC.TIPOPE = '?'))
             OR (IN_REC.OR_CLUNIPROD = 'PR' AND IN_REC.OR_TIPOPE = 'LI') -- añadimos los prestamos en litigio
             OR (IN_REC.OR_PROCED IN ('INV-C/C-CO','INV-C/E-CO','CONTENCIOS', 'PR-CONTENC', 'INV-C/C-DC','INV-C/E-DC') AND IN_REC.IN_SUCEPT IS NOT NULL)) /* AÑADIMOS contenciosos y descubiertos. XCG, 10/05/11*/
             AND SUBSTR(IN_REC.IN_SUCEPT,3,2) NOT IN ('DE','AP') AND IN_REC.IN_SUCEPT IS NOT NULL THEN
                    IF SUBSTR(IN_REC.IN_SUCEPT,1,1) = 'C' THEN
                           VV_IN_SEGMBSINI := '104';
                    ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,1) = 'H' THEN
                          VV_IN_SEGMBSINI := '103';
                    ELSIF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
                          VV_IN_SEGMBSINI:= '103';
                    ELSE
                          VV_IN_SEGMBSINI:= '104';
                    END IF;
         -- Factoring, Confirming y Forfaiting se van a Comercios o Autónomos, dependiendo de su cnae.
         ELSIF IN_REC.OR_PROCED IN ('FACTORING', 'CONFIRMING', 'FORFAITING') THEN
               IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                  VV_IN_SEGMBSINI:= '102';
               ELSE
                  VV_IN_SEGMBSINI:= '101';
               END IF;
         -- CNOs de comercios y autonomos
         ELSIF ((((IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300)
               OR (IN_REC.OR_IDECNO = 30)
               OR (IN_REC.OR_SEGGES = 2 AND IN_REC.OR_IDECNO >=0 AND IN_REC.OR_IDECNO <= 999))
              AND (IN_REC.TIPOPE <> 'PR' AND SUBSTR(IN_REC.OR_PROCED,1,3) <> 'PR-' AND IN_REC.OR_PROCED != 'PRES-DIVIS'))
              AND (IN_REC.TIPOPE <> 'TC' AND (SUBSTR(IN_REC.OR_PROCED,1,4) <> 'TARG' OR IN_REC.TIPOPE <> '?' ))) THEN
            -- OR IN_REC.OR_CODGAR NOT IN ('FIC00500','EXC00100')) THEN  /* QUITAMOS EL CRITERIO DE GARANTIA DE LA SEGMENTACIÓN DE CC Y AA. */
               IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                  VV_IN_SEGMBSINI:= '102';
               ELSE
                  VV_IN_SEGMBSINI:= '101';
               END IF;
         -- Préstamos con destino empresarial (CCAA o Resto Minorista)
         ELSIF substr(IN_REC.IN_SUCEPT,3,2) IN ('DE','AP') AND IN_REC.OR_PROCED != 'PRES-DIVIS' THEN
               IF ((IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30 OR NVL(IN_REC.IND_VEN, '?') = 'A') THEN
                  IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                     VV_IN_SEGMBSINI:= '102';
                  ELSE
                       VV_IN_SEGMBSINI:= '101';
                  END IF;
               ELSE
                    VV_IN_SEGMBSINI := '106';
               END IF;
         --TARJETAS: modificaciones solicitadas por DRR para el reproceso de CyA de junio '08
         ELSIF ((IN_REC.TIPOPE = 'TC' OR (SUBSTR(IN_REC.OR_PROCED,1,4) = 'TARG' AND IN_REC.TIPOPE = '?' ))
                AND IN_REC.OR_CODPRODO IN ('TA 70103','TA 70104','TA 70105','TA 70106','TA 70110', 'TA 70112', 'TA 70113', 'TA 70116',
                                       'TA 70118', 'TA 70119', 'TA 70120', 'TA 70121', 'TA 70133', 'TA 70134', 'TA 70163','TA 70164',
                                       'TA 70165', 'TA 70166', 'TA 70202', 'TA 80801', 'TA 80802', 'TA 90201',
                                       'TA 70108', 'TA 70111', 'TA 70193', 'TA 70194', 'TA 70397', 'TA 70398','TA 70399' )
               )
               AND ( (IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300)
                    OR (IN_REC.OR_IDECNO = 30)
                   ) THEN

                   IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                      VV_IN_SEGMBSINI:= '102';
                   ELSE
                        VV_IN_SEGMBSINI:= '101';
                   END IF;

         ELSIF (IN_REC.TIPOPE = 'TC' OR (SUBSTR(IN_REC.OR_PROCED,1,4) = 'TARG' AND IN_REC.TIPOPE = '?' )) AND IN_REC.OR_CODGAR IN ('FIC00500','EXC00100') THEN
               VV_IN_SEGMBSINI:= '107';
         ELSIF IN_REC.OR_PROCED = 'PRES-DIVIS' THEN
               IF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
                  VV_IN_SEGMBSINI:= '103';
               ELSE
                  VV_IN_SEGMBSINI:= '104';
               END IF;
         ELSIF (IN_REC.OR_IDECNO >=100 AND IN_REC.OR_IDECNO <=199) OR (IN_REC.OR_IDECNO >=900 AND IN_REC.OR_IDECNO <=999) THEN /*PARA RESTO MINORISTA <= 999.*/
                   VV_IN_SEGMBSINI := '106';
         END IF;

         IF (IN_REC.TIPOPE = 'PR'
            OR (SUBSTR(IN_REC.OR_PROCED,1,3) = 'PR-' AND IN_REC.TIPOPE = '?')
            OR (IN_REC.OR_CLUNIPROD = 'PR' AND IN_REC.OR_TIPOPE = 'LI') -- añadimos los prestamos en litigio
            OR (IN_REC.OR_REFOPE >= 8070000000 AND IN_REC.OR_REFOPE <= 8279999999 AND IN_REC.OR_PROCED IN('INV-C/C-CO','INV-C/E-CO','CONTENCIOS','PR-CONTENC','INV-C/C-DC','INV-C/E-DC'))) /* AÑADIMOS CONTENCIOSOS y Descubiertos XCG, 10/05/11*/
           AND IN_REC.IN_SUCEPT IS NULL THEN
               IF IN_REC.COD_ACC IN ('EMP','DPA','SI','TIT') OR (IN_REC.COD_ACC = 'NO' AND IN_REC.OR_TIPOPR IN (45,5045,49,55,127,5049,5127,7049))  THEN
                   IF IN_REC.TIP_SCO IN ('C','O') THEN
                           VV_IN_SEGMBSINI := '104';
                   ELSIF IN_REC.TIP_SCO IN ('H','I') THEN
                       VV_IN_SEGMBSINI := '103';
                   END IF;
               ELSIF  IN_REC.COD_ACC = 'DEM' OR (IN_REC.COD_ACC = 'NO' AND IN_REC.OR_TIPOPR NOT IN (45,49,55,127,5045,5049,5127,7049) ) THEN
                   IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                      VV_IN_SEGMBSINI:= '102';
                   ELSE
                      VV_IN_SEGMBSINI:= '101';
                   END IF;
               ELSIF SUBSTR(IN_REC.OR_IDECNO,1,1) IN (1, 9) THEN
                     IF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
                        VV_IN_SEGMBSINI:= '103';
                     ELSE
                          VV_IN_SEGMBSINI:= '104';
                     END IF;
               ELSIF (IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300)
                     OR (IN_REC.OR_IDECNO = 30)
                     OR (IN_REC.OR_SEGGES = 2 AND IN_REC.OR_IDECNO >=0 AND IN_REC.OR_IDECNO <= 999) THEN
                        IF (IN_REC.TIPOPE = 'PR' OR (SUBSTR(IN_REC.OR_PROCED,1,3) = 'PR-' AND IN_REC.TIPOPE = '?')
                           OR (IN_REC.OR_CLUNIPROD = 'PR' AND IN_REC.OR_TIPOPE = 'LI') -- añadimos los prestamos en litigio
                           OR (IN_REC.OR_REFOPE >= 8070000000 AND IN_REC.OR_REFOPE <= 8279999999 AND IN_REC.OR_PROCED IN ('INV-C/C-CO','INV-C/E-CO','CONTENCIOS','PR-CONTENC','INV-C/C-DC','INV-C/E-DC'))) THEN  /* añadimos contenciosos y Descubiertos XCG, 10/05/11*/
                              IF IN_REC.OR_DESTPR IN (200,202,203,207) THEN
                                 IF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
                                    VV_IN_SEGMBSINI:= '103';
                                 ELSE
                                    VV_IN_SEGMBSINI:= '104';
                                 END IF;
                              ELSIF (IN_REC.OR_FECOPE < 20061030
                                    AND (IN_REC.OR_DESTPR IN (100,213,223,225,307,308,309,310,311,312,313,
                                                           317,318,327,334,339,340,341,342,345,349)
                                    OR IN_REC.OR_TIPOPR NOT IN (4,21,31,33,45,46,47,48,49,52,55,56,61,63,64,66,71,77,81,82,89,134,137,
                                                            138,139,146,147,148,153,154,155,156,157,158,159,160,170,171,174,178,180,181,
                                                            182,183,184,185,187,188,189,190,191,192,5046,5049,5081,5082,5089,5105,5134,
                                                            6081,6082,6139,6142,6144,8136,8138,8139,9901,9904,9911,127,128,8094,8095)))
                                    OR (IN_REC.OR_FECOPE >= 20061030
                                    AND (IN_REC.OR_TIPOPR IN (7,83,84,100,101,102,103,104,105,107,123,124,125,129,132,149,150,151,
                                                           152,161,162,163,164,165,166,167,168,169,172,173,175,177,179,186,8137,
                                                           8140,8141,8142,8413,8144,8146,8147,8148,8149,8150,8151,8152,8153,8154,
                                                           5166, 6166, 5167, 6167, 5168, 6168, 5169, 6169, 176)
                                    OR (IN_REC.OR_TIPOPR >= 8000 AND IN_REC.OR_TIPOPR <=8123 AND IN_REC.OR_TIPOPR <> 8094 AND IN_REC.OR_TIPOPR <> 8095)
                                    OR (IN_REC.OR_TIPOPR >= 8156 AND IN_REC.OR_TIPOPR <=8192)
                                    OR (IN_REC.OR_TIPOPR >= 8194 AND IN_REC.OR_TIPOPR <=8215))) THEN
                                    IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                                          VV_IN_SEGMBSINI:= '102';
                                    ELSE
                                          VV_IN_SEGMBSINI:= '101';
                                    END IF;
                              ELSIF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
                                    VV_IN_SEGMBSINI:= '103';
                              ELSE
                                    VV_IN_SEGMBSINI:= '104';

                              END IF;

                              IF IN_REC.OR_ENTITY = 242 THEN
                                 IF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
                                    VV_IN_SEGMBSINI:= '103';
                                 ELSE
                                      VV_IN_SEGMBSINI:= '104';
                                 END IF;
                              END IF;
                        ELSIF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                              VV_IN_SEGMBSINI:= '102';
                        ELSE
                             VV_IN_SEGMBSINI:= '101';
                        END IF;
               END IF;

               -- Segmentacion OXE
               IF IN_REC.IN_TIPOREG = 'OXE' THEN
                  IF IN_REC.OR_DESTPR = 340 THEN
                     IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                        VV_IN_SEGMBSINI:= '102';
                     ELSE
                          VV_IN_SEGMBSINI:= '101';
                     END IF;
                  ELSIF IN_REC.OR_DESTPR IN (200, 312) THEN
                        IF IN_REC.OR_TIPOPR = 123 THEN
                           VV_IN_SEGMBSINI:= '103';
                        ELSIF IN_REC.OR_TIPOPR = 5046 THEN
                              VV_IN_SEGMBSINI:= '104';
                        END IF;
                  ELSIF /*VV_IN_SEGMBSINI = '?' AND */IN_REC.TIPOPE = 'PR' THEN
                        VV_IN_SEGMBSINI:= '104';
                  END IF;
               END IF;

         END IF;

         -- ACC-VJB 08/09/'08: CREDITOS: modificaciones solicitadas por DRR para el reproceso de CyA de junio '08
         IF IN_REC.OR_PROCED IN ('INV-C/C-CR','INV-C/C-EX') THEN -- Se marcan aquellos códigos de operaciones que pertenecen a contratos directivos
            IF IN_REC.OR_CODPRODO IN ('DV 00012','DV 00073','DV 00112','DV 00173', 'KT 01006', 'KT 00006') THEN
                    VV_IN_SEGMBSINI:= '106';
            ELSIF (IN_REC.OR_DESTPR>=130 AND IN_REC.OR_DESTPR<=158) THEN
                  IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                      VV_IN_SEGMBSINI:= '102';
                  ELSE
                      VV_IN_SEGMBSINI:= '101';
                  END IF;
            ELSIF (IN_REC.OR_DESTPR>=160 AND IN_REC.OR_DESTPR<=191) OR IN_REC.OR_DESTPR IN (120,122) THEN
                    VV_IN_SEGMBSINI:= '106';
            ELSIF ((IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30
               OR (IN_REC.OR_SEGGES = 2 AND IN_REC.OR_IDECNO >=0 AND IN_REC.OR_IDECNO <= 999)) AND IN_REC.OR_FINABE IN ('99', '00', '?')
              AND IN_REC.OR_DESTPR IN (0, 900, 901, 902, 903, 904, 1300, 1310, 1320, 9220) THEN
                  IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                      VV_IN_SEGMBSINI:= '102';
                  ELSE
                      VV_IN_SEGMBSINI:= '101';
                  END IF;
            ELSIF IN_REC.OR_PERSONSCPCB IN (831,833,816) /*AND IN_REC.OR_FINABE='99'*/ THEN
                  IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                      VV_IN_SEGMBSINI:= '102';
                  ELSE
                      VV_IN_SEGMBSINI:= '101';
                  END IF;
            ELSIF IN_REC.OR_FINABE = '03' THEN
                  VV_IN_SEGMBSINI:= '106';
            ELSE
                 VV_IN_SEGMBSINI:= '106';
            END IF;

         -- Evalúa las procedencias de avales, efectos, descubiertos y recibos solo para los registros con cno's de ccaa
         ELSIF IN_REC.OR_PROCED IN ('AVALES', 'EFECTES', 'INV-C/C-DC', 'INV-C/E-DC', 'REBUT-DOM')
               AND ((IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30
                OR (IN_REC.OR_SEGGES = 2 AND IN_REC.OR_IDECNO >=0 AND IN_REC.OR_IDECNO <= 999))THEN
                   IF IN_REC.OR_DESCTAVISTA <> 'E' THEN
                      VV_IN_SEGMBSINI:= '106';
                   ELSE -- El resto de destinos, ya sean empresarial o ? se asumen como empresarial
                         IF IN_REC.SEGMENTO_CNAE = 'CCAA' THEN
                            VV_IN_SEGMBSINI:= '102';
                         ELSE
                              VV_IN_SEGMBSINI:= '101';
                         END IF;
                   END IF;
         END IF;

         -- Una vez finalizados todos los pasos para segmentar particulares, si aun así queda con segmento '?', se pasa a Resto Minorista (106). david 27/
         IF VV_IN_SEGMBSINI = '?' THEN
            VV_IN_SEGMBSINI := '106';
         END IF;

    END IF;

      -- No hay segmento de CCAA de personas físicas para Fincom, se segmentan como resto Minorista.
      -- Tampoco segmento hipotecario, todo préstamo será consumo.
      -- Si no se consigue asignar segmento por defecto a empresas para personas jurídicas y resto minorista para físicas. XCG, 23/07/13.

      IF IN_REC.OR_ENTITY = 242 AND VV_IN_SEGMBSINI IN ('002', '017', '101', '102') AND IN_REC.OR_TIPIDE <> 11 THEN
            VV_IN_SEGMBSINI := '106';
      ELSIF IN_REC.OR_ENTITY = 242 AND IN_REC.TIPOPE = 'PR' AND IN_REC.OR_TIPIDE <> 11 THEN
            VV_IN_SEGMBSINI:= '104';
      ELSIF IN_REC.OR_ENTITY = 242 AND VV_IN_SEGMBSINI = '?' THEN
            IF IN_REC.OR_TIPIDE = 11 THEN
               VV_IN_SEGMBSINI := '006';
            ELSE
                 VV_IN_SEGMBSINI := '106';
            END IF;
      END IF;

      VN_NUMERR:= 9;

      -- RESEGMENTACION CONGREGACIONES RELIGIOSAS NIF QUE COMIENCEN POR R
      IF IN_REC.OR_TIPIDE IN (10,11,15,16) AND VV_IN_SEGMBSINI <> '015' AND IN_REC.OR_SEGGES IN (0,3,4,5) AND SUBSTR(IN_REC.OR_NIFCIF,1,1) = 'R'
         and IN_REC.OR_ENTITY not in (9157, 9158) THEN /* la letra R indica congregación religiosa, no se considera Mexico. NO deben entrar en el tratamiento los tipide 12. */
         VV_IN_SEGMBSINI := '015';
      END IF;

      -- (Ctas Fondos Epa) -- 2015/02/23 JCV
      IF IN_REC.OR_CTAIND IN (4536900, 4425200000, 4479800)  THEN
         VV_IN_SEGMBSINI := '008';
      END IF;

      IF in_rec.segmbsini_vida = '005' and in_rec.segmbsini_vida not in ('003', '005', '006', '009', '010', '019', '027') then/* BS VIDA*/
         VV_IN_SEGMBSINI:= in_rec.segmbsini_vida;
      END IF;

       --Segmentación Sociedades Civiles y Comunidades de Bienes.
      IF IN_REC.OR_PERSON NOT IN (831,833,816) AND IN_REC.or_persctavista IN (831,833,816) AND IN_REC.OR_TIPIDE IN (0,2,3,4,5)
         AND NOT(IN_REC.OR_PROCED =  'FACTORING' AND IN_REC.OR_CLUNICUENT != 999999999999999)
         AND IN_REC.OR_VERSPREST <> 9999
         AND (IN_REC.OR_SEGGES IN (1,2) OR IN_REC.OR_SEGGES = 0 AND IN_REC.OR_IDECNO IS NOT NULL AND IN_REC.OR_IDECNO NOT IN (0,999)) THEN

         VV_OR_TITUSCPCB   := IN_REC.or_tituctavista;
         VV_OR_PERSONSCPCB := IN_REC.or_persctavista;
         VV_OR_CNAESCPCB   := IN_REC.or_cnaectavis;
         VV_IN_SEGMBSINI   := IN_REC.IN_SEGMBSINI_SCPCB;

      END IF;

      -- Susceptibilidad y Scoring de Préstamos.
      /*CCAA con CNO incorrecto o que estén en el maestro de resegmentación de CCAA, se resegmentan como Resto Minoristas, Préstamos o Targetas.*/
--    IF (VV_IN_SEGMBSINI IN ('101', '102', '106') OR ( (VV_IN_SEGMBSINI IN ('002', '017') AND IN_REC.OR_TIPIDE < 10)) ) AND nvl(IN_REC.IND_VEN, '?') <> 'A' THEN
      IF  VV_IN_SEGMBSINI IN ('101', '102') AND nvl(IN_REC.IND_VEN, '?') <> 'A' THEN
--         IF IN_REC.CONTRATO IS NOT NULL THEN
--
--            IF (IN_REC.or_TIPOPE = 'PR' OR (SUBSTR(IN_REC.OR_PROCED,1,3) = 'PR-' AND IN_REC.or_TIPOPE = '?') OR (IN_REC.OR_CLUNIPROD = 'PR' AND IN_REC.or_TIPOPE = 'LI')) THEN
--
--               IF NVL(IN_REC.IN_SUCEPT, '?') <> '?' THEN /* 18/07/2013 Segmentamos por susceptibilidad y en su defecto por tipgar*/
--                  IF SUBSTR(IN_REC.IN_SUCEPT, 1, 1) = 'H' THEN
--                     VV_IN_SEGMBSINI:= '103';
--                  ELSE
--                     VV_IN_SEGMBSINI:= '104';
--                  END IF;
--               ELSE
--                    IF IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX') THEN
--                       VV_IN_SEGMBSINI:= '103';
--                    ELSE
--                       VV_IN_SEGMBSINI:= '104';
--                    END IF;
--
--               END IF;
--
--            ELSE
--                 VV_IN_SEGMBSINI := '106';
--
--                 IF (IN_REC.OR_TIPOPE = 'TC' OR (SUBSTR(IN_REC.OR_PROCED,1,4) = 'TARG' AND IN_REC.OR_TIPOPE = '?'))
--                                                                                       AND IN_REC.OR_CODGAR IN ('FIC00500','EXC00100') THEN
--                    VV_IN_SEGMBSINI:= '107';
--                 END IF;
--            END IF;
--
--       ELSIF NOT (((IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30
--                  )) and VV_IN_SEGMBSINI IN ('101', '102') THEN
         IF NOT ((IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30) THEN

             IF (IN_REC.OR_TIPOPE = 'TC' OR (SUBSTR(IN_REC.OR_PROCED,1,4) = 'TARG' AND IN_REC.OR_TIPOPE = '?'))
                                                                                   AND IN_REC.OR_CODGAR IN ('FIC00500','EXC00100') THEN
                VV_IN_SEGMBSINI:= '107';
             ELSE
                VV_IN_SEGMBSINI := '106';
             END IF;

         END IF;

      /* Relación de países para los que el Banco de España ha verificado la equivalencia de la normativa de supervisión y regulación con la de la UE:*/
      /* PERU, COLOMBIA, MEXICO, CHILE, BRASIL, URUGUAY, TURQUIA y los paises europeos, van a segmentos que ponderarán al 0% en el STDA.       */
      ELSIF IN_REC.OR_CODISO IN ('PE','CO','MX','CL','BR','UY','TR','AR','FR','NL','DE','IT','IE','GR','PT','BE','LU','FI','AT','MT','SI','YT','CY',
                                 'AD','VA','MC','ME','SM') AND VV_IN_SEGMBSINI IN ('036', '037', '038') THEN
            IF VV_IN_SEGMBSINI = '036' THEN
               VV_IN_SEGMBSINI:= '035';
            ELSIF VV_IN_SEGMBSINI = '037' THEN
                  VV_IN_SEGMBSINI:= '008';
            ELSIF VV_IN_SEGMBSINI = '038' AND IN_REC.OR_CODISO IN ('PE','CO','MX','CL','BR','UY','TR','AR') THEN
                  VV_IN_SEGMBSINI:= '022';
            END IF;
      END IF;

      VN_NUMERR:= 99;

      IF VV_IN_SEGMBSINI IN ('103', '104') THEN
         IF IN_REC.PROD_SCORE = 'HP' THEN -- Segmentación hipotecarios por comportamental. XCG, 05/06/2018
               VV_IN_SEGMBSINI:= '103';
         elsif IN_REC.PROD_SCORE = 'CO' THEN -- Segmentación consumo por comportamental. XCG, 05/06/2018
               VV_IN_SEGMBSINI:= '104';
         else
               VV_SUCEPT := IN_REC.IN_SUCEPT; -- susceptibilidad reactivo
               IF IN_REC.OR_PROCED = 'PRES-DIVIS' THEN -- segmentación préstamos en divisa reactivo
                  IF IN_REC.EMPLEADO = 1 THEN
                     IF VV_IN_SEGMBSINI = '103' THEN
                        VV_SUCEPT := 'HITEDV';
                     ELSE
                          VV_SUCEPT := 'COTEDV';
                     END IF;
                  ELSE
                       IF VV_IN_SEGMBSINI = '103' THEN
                          VV_SUCEPT := 'HISUDV';
                       ELSE
                            VV_SUCEPT := 'COSUDV';
                       END IF;
                  END IF;
               END IF;

               VN_NUMERR:= 100;

               BEGIN -- recuperación de mapa de uso y número de scoring para reactivo
                 SELECT ID_MAPA_DE_USO,
                        ID_SCORING_VALIDADO,
                        ID_MIG_RAT
                   INTO VV_SUCEPT     ,
                        VV_OR_NUMSCO,--numscofin
                        vv_or_migsco
                   FROM BAS_MEN.ERRORES_PSS_RECUPERADOS A
                  WHERE IN_REC.OR_REFOPE     = A.ID_NUM_PRE_SIBIS
                    AND IN_REC.OR_VERSPREST  = A.ID_NUMVERSPR;

               EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                         null;
               END;
         END IF;
      END IF;

      VN_NUMERR:= 101;

      /* Segmentación Cámaras de Compensación Cualificadas - Se identifican  por nif  a partir del MAESTRO_CONTRAPARTES o cuenta contable a partir del MAESTRO_CUENTAS_CONT_DEPOS   05/04/2017*/

      BEGIN
         SELECT '045'
           INTO VV_IN_SEGMBSINI
           FROM BAS_MEN.MAESTRO_CONTRAPARTES MCCC
          WHERE MCCC.OR_NIFCIF = IN_REC.OR_NIFCIF
             or MCCC.OR_CODIGO_BIC = IN_REC.OR_CODIGO_BIC;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;

      BEGIN
         SELECT '045'
           INTO VV_IN_SEGMBSINI
           FROM BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS MDEP
          WHERE MDEP.OR_ENTITY = IN_REC.OR_ENTITY
            AND MDEP.OR_CTAIND = IN_REC.OR_CTAIND;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;

      if SUBSTR(IN_REC.OR_EPIIND ,1,5) = '01005' and in_rec.segmbsini_bono = '034' then
          VV_IN_SEGMBSINI := in_rec.segmbsini_bono;
      end if;

      VN_NUMERR:= 102;

      -- Banco Sabadell de procedencia Manual y epígrafe 01004* no se segmenta.
      IF in_rec.OR_IDPERS = '11-A08000143' AND in_rec.OR_EPIIND LIKE '01004%' AND in_rec.OR_PROCED = 'MANUAL' then
         VV_IN_SEGMBS := '?';
         VV_IN_SEGMBSINI := '?';
         VV_IN_SEGMBS0 := '?';
         VV_IN_SEGMBSMOD := '?';
         VN_IN_TIPOREG := 'IN';
      /* FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
--    ELSIF NVL(IN_REC.IN_TIPOREG,'?') = 'OX' /*OR IN_REC.OR_ENTITY = 9804*/ THEN /*OFEX no enriquecido se segmenta por epígrafes segmentos*/
--       VV_IN_SEGMBSINI := '?';
--       VV_SUCEPT := '?';
      END IF;

      /* (INI) FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
      -- ALLA 08/07/2016 se añade RN correspondiente con el neteo de repos
      IF in_rec.in_tiporeg NOT IN ('SA','IN','?','OXE') THEN
         VN_IN_TIPOREG := IN_REC.IN_TIPOREG;
--    ELSIF VV_IN_SEGMBSINI <> '?' THEN
--       VN_IN_TIPOREG := 'SA';
--    ELSE
--       VN_IN_TIPOREG := 'IN';
--    END IF;
      ELSIF VV_IN_SEGMBSINI <> '?' THEN
         IF in_rec.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR (in_rec.OR_PROCED = 'MANUAL' AND in_rec.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)) THEN
            VN_IN_TIPOREG := 'OXE';
         ELSE
            VN_IN_TIPOREG := 'SA';
         END IF;
      ELSIF in_rec.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR (in_rec.OR_PROCED = 'MANUAL' AND in_rec.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)) THEN
            VN_IN_TIPOREG := 'OX';
      ELSE
            VN_IN_TIPOREG := 'IN';
      END IF;
      /* (FIN) FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */

      IF (VN_IN_TIPOREG IN ('OX', 'IN', '?', 'IIG', 'IIU', 'IIR') or IN_REC.OR_PROCED = 'ADJUDICADO') and in_rec.segmbsini_epicon <> '?' then /* segmentación por epígrafe consolidado para ofex no enriquecidas, inmuebles, ajustes y exposiciones no segmentadas.*/
         VV_IN_SEGMBSINI := in_rec.segmbsini_epicon;
      end if;

      IF IN_REC.OR_ENTITY in (9109, 9408) THEN /* La segmentación de Andorra y Renting ya llega de origen*/ --XCG 15/10/2021
         VV_IN_SEGMBSINI := in_rec.IN_segmbsini;
      END IF;

      VN_NUMERR:= 103;

      IF VV_IN_SEGMBSINI <> '?' THEN
         BEGIN
           SELECT IN_SEGBS, IN_SEGMBSMOD
             INTO VV_IN_SEGMBS, VV_IN_SEGMBSMOD
             FROM BAS_MEN.MAESTRO_SEGMENTOS
            WHERE IN_SEGMBSINI = VV_IN_SEGMBSINI;
         EXCEPTION
              WHEN OTHERS THEN
                   VV_IN_SEGMBS := '?';
                   VV_IN_SEGMBSMOD := '?';
         END;
      ELSE
           VV_IN_SEGMBS := '?';
           VV_IN_SEGMBSMOD := '?';
      END IF;

      VN_NUMERR:= 104;

       -- Promotores
     IF vv_IN_SEGMBSINI NOT IN ('007', '008', '018', '103', '104', '106', '107', '002', '017') AND in_rec.IN_SEGMBS2 = '020' then
        VV_IN_SEGMBS2 := in_rec.IN_SEGMBS2;
     ELSIF vv_IN_SEGMBSINI in ('002', '017') and in_rec.IN_SEGMBS2_CA = '020' then
        VV_IN_SEGMBS2 := in_rec.IN_SEGMBS2_CA;
       -- Tax Lease y RD874           /* FMRR 22/02/2021 -- TM-4152 -- Identificar el taxlease y RD874 */
     ELSIF in_rec.IN_SEGMBS2 = '301' then
        VV_IN_SEGMBS2 := in_rec.IN_SEGMBS2;
     ELSIF in_rec.IN_SEGMBS2 = '302' then
        VV_IN_SEGMBS2 := in_rec.IN_SEGMBS2;
     end if;

      VN_NUMERR:= 105;

      IF IN_REC.in_segmbs0 = '201' THEN
         VV_IN_SEGMBS := 'Project Finance';
         VV_IN_SEGMBS0 := IN_REC.in_segmbs0;
         if VV_IN_SEGMBSINI <> '019' then
            VV_IN_SEGMBSINI := '006';
            VV_IN_SEGMBSMOD := 'EM';
         end if;
      ELSIF IN_REC.in_segmbs0 = '203' THEN
            VV_IN_SEGMBS := 'Real Estate';
            VV_IN_SEGMBS0 := IN_REC.in_segmbs0;
            IF VN_IN_TIPOREG IN ('OX', 'OXE', 'MMOXE') THEN
               VV_IN_SEGMBSINI := '006';
               VV_IN_SEGMBSMOD := 'EM';
            end if;
      ELSIF IN_REC.in_segmbs0 = '204' THEN
            VV_IN_SEGMBS := 'Object Finance';
            VV_IN_SEGMBS0 := IN_REC.in_segmbs0;
            IF VN_IN_TIPOREG IN ('OX', 'OXE', 'MMOXE') THEN
               VV_IN_SEGMBSINI := '006';
               VV_IN_SEGMBSMOD := 'EM';
            end if;
      ELSIF IN_REC.in_segmbs0 = '202' THEN
            VV_IN_SEGMBS := 'Derechos Cobro';
            VV_IN_SEGMBS0 := IN_REC.in_segmbs0;
        ELSIF IN_REC.in_segmbs0 = '200' and VV_IN_SEGMBS2= '020'  THEN            --     Promotores con promocion
            VV_IN_SEGMBS0 := IN_REC.in_segmbs0;
                        /* IF in_rec.MADURACION_PRAL = 'Suelo' then VV_IN_PRESTPERCENT :=1;
                        elsif in_rec.MADURACION_PRAL ='Solar' then VV_IN_PRESTPERCENT :=1;
                        elsif in_rec.MADURACION_PRAL ='Obra'  then VV_IN_PRESTPERCENT :=2;
                        elsif in_rec.MADURACION_PRAL ='Producto Acabado'  then VV_IN_PRESTPERCENT :=3;
                        Se cambia a UPPER por incidencia de LGD nula por tener en origen el valor "Producto acabado". MR, 12/7/19
                        */
                        IF UPPER (in_rec.MADURACION_PRAL) = 'SUELO'                             then VV_IN_PRESTPERCENT :=1;
                        elsif UPPER (in_rec.MADURACION_PRAL) ='SOLAR'                         then VV_IN_PRESTPERCENT :=1;
                        elsif UPPER (in_rec.MADURACION_PRAL) ='OBRA'                          then VV_IN_PRESTPERCENT :=2;
                        elsif UPPER (in_rec.MADURACION_PRAL) ='PRODUCTO ACABADO'  then VV_IN_PRESTPERCENT :=3;
                    end if;
      END IF;

      VN_NUMERR:= 106;

      OUT_REC.IN_SEGMBSINI            := VV_IN_SEGMBSINI;
      OUT_REC.IN_SEGMBS0              := VV_IN_SEGMBS0;
      OUT_REC.IN_SEGMBS               := VV_IN_SEGMBS;
      out_rec.IN_SEGMBS2              := VV_IN_SEGMBS2;
      OUT_REC.IN_TIPOREG              := VN_IN_TIPOREG;
      OUT_REC.IN_SUCEPT               := nvl(VV_SUCEPT, '?');
      OUT_REC.OR_NUMSCOFIN            := VV_OR_NUMSCO;
      OUT_REC.OR_TITUSCPCB            := VV_OR_TITUSCPCB;
      OUT_REC.OR_PERSONSCPCB          := VV_OR_PERSONSCPCB;
      OUT_REC.OR_CNAESCPCB            := VV_OR_CNAESCPCB;
      OUT_REC.OR_IDREG                := IN_REC.OR_IDREG;
      out_rec.or_titularitat          := in_rec.or_titularitat;
      out_rec.or_idpers               := in_rec.or_idpers;
      out_rec.IN_PRESTPERCENT         := VV_IN_PRESTPERCENT;
      out_rec.OR_FECSCO               := IN_REC.FECHAULTIMA;
      OUT_REC.FI_ELIMI1               := in_rec.FI_ELIMI1;
      OUT_REC.OR_FECALTBLO            := in_rec.OR_FECALTBLO;
      OUT_REC.IN_ANTIGU               := in_rec.IN_ANTIGU;
      OUT_REC.OR_CODISO               := in_rec.OR_CODISO;
      OUT_REC.IN_HIPOAVAL             := in_rec.IN_HIPOAVAL;
      OUT_REC.OR_IMPLTV               := in_rec.OR_IMPLTV;
      OUT_REC.OR_CODGAR               := in_rec.OR_CODGAR;
      OUT_REC.OR_VALTAS               := in_rec.OR_VALTAS;
      OUT_REC.OR_FECPRREV             := in_rec.OR_FECPRREV;
      OUT_REC.IN_SEG_HIP              := in_rec.IN_SEG_HIP;
      OUT_REC.IN_INDMOR               := in_rec.IN_INDMOR;
      OUT_REC.OR_IDCNAEREL            := in_rec.OR_IDCNAEREL;
      OUT_REC.OR_INDHOLDINGREL        := in_rec.OR_INDHOLDINGREL;
      OUT_REC.IN_CAT_BDE_N            := in_rec.ID_CAT_DRC;

      pipe row(out_rec);

  END LOOP;

  EXCEPTION
    WHEN OTHERS THEN

  RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));

end F_SEGMENTACION;

end;

/

show errors;

/************************************************************************************/
/* CREATE DEL PROCEDIMIENTO FNC_SEGMENT                                             */
/************************************************************************************/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SEGMENT (PV_TABLA       IN  VARCHAR2,
                                         PV_OPC         IN  VARCHAR2,
                                         PN_FECPRO      IN  NUMBER) IS

  VN_NUMERR      NUMBER(3);
  VV_MENSAJE     VARCHAR2(255);
  VN_COUNT       NUMBER(9):=0;
  VV_ROWID       VARCHAR2(50);
  VV_MAX_MES     NUMBER(6)            DEFAULT 0;
  VReg_MaeSob     BAS_MEN.MAESTRO_SOBERANOS%ROWTYPE;

-------------------------------------------------------
-- PROCEDURE FNC_SEGMENTO
-------------------------------------------------------
PROCEDURE FNC_SEGMENTO IS
  v_NRegs NUMBER(12);
BEGIN

  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT) VALUES ('3.1 FNC_SEGMENTO '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_COUNT:= 0;
  VN_NUMERR:= 2;

  -- borramos los registros insertados por saldos
  -- RMR 15/01/2020 Ampliamos delete existente (añadidos desde FF)
  --delete /*+ parallel (a 8) */  BAS_MEN.BASILEA a
  --where IN_TIPOREG in ('SI', 'SX', 'DI', 'DX', 'FC', 'SC', 'DC', 'FF', 'DN', 'MMDN', 'RN', 'MMRN', 'CERENTVA', 'OXES0', 'OXES1', 'SAS0', 'SAS1', 'DTA');

  --commit;

   --
  -- Carga de las tablas SAS del proceso
  --

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS');

  INSERT INTO BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS
  SELECT * FROM DCRPROP_MENSUAL.EPIGRAFES_SEGMENTOS_SAS;

  COMMIT;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_GARANTIAS_RF');

    INSERT INTO BAS_MEN.MAESTRO_GARANTIAS_RF
    SELECT * FROM DCRPROP_MENSUAL.MAESTRO_GARANTIAS_RF_SAS;

    commit;

   --Actualizamos el listado de bloqueos obteniendo las fechas más antiguas.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.LISTADO_BLOQUEOS');

  COMMIT;

  INSERT /*+ parallel(x 4) */ INTO BAS_MEN.listado_bloqueos x
  SELECT /*+ parallel(a 4) */a.id_fch_datos, a.id_perbull, a.id_clatipavis, max(a.dt_fecalta) DT_FECALTA
    FROM BAS_MEN.BLOQUEOS_UNIF_X_PERSONA a,
         (SELECT /*+ parallel(c 4) */ id_perbull, id_clatipavis, MAX (id_fch_datos) AS id_fch_datos
            FROM BAS_MEN.bloqueos_unif_x_persona c
           GROUP BY id_perbull, id_clatipavis) b
   WHERE a.id_perbull = b.id_perbull
     AND a.id_clatipavis = b.id_clatipavis
     AND a.id_fch_datos = b.id_fch_datos
  group by a.id_fch_datos, a.id_perbull, a.id_clatipavis;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.LISTADO_BLOQUEOS_CORREGIDOS');

  insert /*+ parallel(a 8) */ into BAS_MEN.LISTADO_BLOQUEOS_CORREGIDOS a
  SELECT /*+ full(bas) parallel(bas 8) parallel(b 8) */ distinct OR_IDPERS, OR_CLAVISO, OR_FECALTBLO, FECALTBLO, or_idreg
    FROM BAS_MEN.basilea bas,
         BAS_MEN.LISTADO_BLOQUEOS B
   WHERE bas.OR_NIFCIF  = B.IDPERS
     AND bas.OR_CLAVISO = B.CLAVISO
     AND bas.OR_FECALTBLO > FECALTBLO;

  commit;

  VN_NUMERR:= 5;
  VN_COUNT := 0;

  -- Tabla para identificar correctamente las segundas hipotecas, si el contrato de la garantía no está en la tabla de
  --garantías otras entidades, es que no existe una segunda hipoteca. XCG, 3/02/14
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SEG_HIP_BDD_NO_GARANT');

    INSERT /*+ PARALLEL (C 8) */ INTO BAS_MEN.SEG_HIP_BDD_NO_GARANT C
         SELECT /*+ PARALLEL (A 8) PARALLEL (B 8) */ OR_IDMES, OR_IDREG, OR_CONTRATO_GARANTIA, IN_SEG_HIP, 'P' IN_SEG_HIP_NEW
           FROM BAS_MEN.BASILEA A,
                BAS_MEN.GARAN_HIPOTECAS_OTRAS_ENTID B
          WHERE A.OR_CONTRATO_GARANTIA = CODCONTRAT(+)
            AND IN_SEG_HIP = 'S'
            AND CODCONTRAT IS NULL;

    COMMIT;

    VN_NUMERR:= 6;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_LTV');

  INSERT /*+ parallel(LTV 8) */ INTO BAS_MEN.BASILEA_LTV LTV
  SELECT A.OR_REFOPE, case
                          when (DISPTO/VALTAS)*100 > 200 then
                               200
                          when (DISPTO/VALTAS)*100 < 0 then
                                 0
                          else (DISPTO/VALTAS)*100
                          end as impltv, OR_CLUNIPROD
    FROM (SELECT /*+ parallel(bas 8) */ OR_REFOPE, SUM(OR_DISPTO) DISPTO, OR_CLUNIPROD
            FROM BAS_MEN.BASILEA BAS
           WHERE OR_TIPGAR IN ('HC','HV','HR','HX')AND FI_TIPEXP NOT IN ('Ajustes', 'Pasivo') AND OR_CLUNIPROD in ('PR', 'PI') AND OR_IMPLTV <= 0
             AND fi_elimi1 = 'NO'
             AND OR_REFOPE <> 0
             AND OR_DISPTO <> 0
             and in_tiporeg not in ('OX', 'OXE', 'MMOXE')
           GROUP BY OR_REFOPE, OR_CLUNIPROD) A,
           /* 02/10/2020 RMR | Eliminado recalculo de LTV | TM-2885 */
         --(SELECT /*+ parallel(bas2 8) */ distinct OR_REFOPE, case when nvl(OR_VALTAS, 0) = 0 then OR_CONCED*1.25 else or_valtas end valtas
           (SELECT /*+ parallel(bas2 8) */ distinct OR_REFOPE, OR_CONCED*1.25 AS valtas
            FROM BAS_MEN.BASILEA BAS2
           WHERE OR_TIPGAR IN ('HC','HV','HR','HX')AND FI_TIPEXP NOT IN ('Ajustes', 'Pasivo') AND OR_CLUNIPROD in ('PR', 'PI') AND OR_IMPLTV <= 0
             AND fi_elimi1 = 'NO'
             AND OR_REFOPE <> 0
             AND OR_DISPTO <> 0
             AND in_tiporeg not in ('OX', 'OXE', 'MMOXE')
             /* 02/10/2020 RMR | Eliminado recalculo de LTV | TM-2885 */
           --AND (OR_VALTAS <> 0 or OR_CONCED <> 0)) B
             AND OR_VALTAS = 0
             AND OR_CONCED <> 0) B
   WHERE A.OR_REFOPE = B.OR_REFOPE;

  COMMIT;

  VN_NUMERR:= 7;

  INSERT /*+ parallel(LTV 8) */ INTO BAS_MEN.BASILEA_LTV LTV
  SELECT A.OR_REFOPE, case
                          when (DISPTO/VALTAS)*100 > 200 then
                               200
                          when (DISPTO/VALTAS)*100 < 0 then
                               0
                          else (DISPTO/VALTAS)*100
                          end as impltv, OR_CLUNIPROD
    FROM (SELECT /*+ parallel(bas 8) */ OR_REFOPE, OR_CLUNIPROD, SUM(OR_DISPTO) DISPTO
            FROM BAS_MEN.BASILEA BAS,
                 BAS_MEN.garantias_pignorativas gar
           WHERE or_tipobjeto IN (2010, 2011, 2020, 2021, 2030, 2031) AND FI_TIPEXP NOT IN ('Ajustes', 'Pasivo') AND OR_PROCED = 'LEASING'
             AND fi_elimi1 = 'NO'
             AND OR_REFOPE <> 0 AND OR_DISPTO <> 0
             and or_codgar = codgar(+)
             and codgar is null
           GROUP BY OR_REFOPE, OR_CLUNIPROD) A,
         (SELECT /*+ parallel(bas2 8) */ OR_REFOPE, max(nvl(OR_VALTAS, or_conced*1.25)) valtas
            FROM BAS_MEN.BASILEA BAS2
           WHERE or_tipobjeto IN (2010, 2011, 2020, 2021, 2030, 2031) AND FI_TIPEXP NOT IN ('Ajustes', 'Pasivo') AND OR_PROCED = 'LEASING'
             AND fi_elimi1 = 'NO'
             AND OR_REFOPE <> 0 AND OR_DISPTO <> 0 AND (OR_VALTAS <> 0 or or_conced <> 0)
           GROUP BY OR_REFOPE) B
   WHERE A.OR_REFOPE = B.OR_REFOPE;

        commit;

  SELECT *
    INTO VReg_MaeSob
    FROM BAS_MEN.MAESTRO_SOBERANOS
   WHERE CODI_NUM_PAIS = 724;

   VN_NUMERR:= 8;

-- se busca la titularidad relacioanda del rating para utes, y multititularidades básicamente.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULARIDAD_RELACIONADA_RATING');

  INSERT /*+ parallel (R 8) */ INTO BAS_MEN.TITULARIDAD_RELACIONADA_RATING R
  select distinct CODTIT, IDCALREC
      from (
        SELECT /*+ full(ute) parallel (ute 8)  */  DISTINCT UTE.CODTIT, UTE.IDCALREC
          FROM BAS_MEN.RSK_RT_ULT_RATING UTE,
               (SELECT /*+ full(rat) parallel (rat 8) parallel (bas 8) */ IDCALREC, MAX(FEC_CAL) FEC_CAL
                  FROM BAS_MEN.RSK_RT_ULT_RATING rat,
                       BAS_MEN.basilea bas
                 WHERE IDCALREC = IN_IDCALIFICREL
                   and IN_IDCALIFICREL <> 0
                GROUP BY IDCALREC) MAYOR
          WHERE UTE.IDCALREC = MAYOR.IDCALREC
            AND UTE.FEC_CAL    = MAYOR.FEC_CAL
      union
        SELECT     /*+ full(ute) parallel (ute 8)  */  distinct UTE.CODTIT, UTE.IDCALIFIC aS IDCALREC
                     FROM BAS_MEN.RSK_RT_ULT_RATING UTE,
                          (SELECT /*+ full(rat) parallel (rat 8) parallel (bas 8) */ IDCALIFIC, MAX(FEC_CAL) FEC_CAL
                             FROM BAS_MEN.RSK_RT_ULT_RATING rat,
                                  BAS_MEN.basilea bas
                            WHERE IDCALIFIC = IN_IDCALIFICREL
                              and IN_IDCALIFICREL <> 0
                            GROUP BY IDCALIFIC) MAYOR
                    WHERE UTE.IDCALIFIC = MAYOR.IDCALIFIC
                      AND UTE.FEC_CAL    = MAYOR.FEC_CAL);

  commit;

 -- se busca el cnae de la titularidad relacionada
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CNAESBASILEA');

 INSERT /*+ parallel (d 4)*/ INTO BAS_MEN.CNAESBASILEA  d
 select distinct IDCALREC, OR_IDCNAE
 from (
 SELECT /*+ full(a) parallel (a 8)*/ DISTINCT IDCALREC, OR_IDCNAE
   FROM BAS_MEN.BASILEA a,
        BAS_MEN.TITULARIDAD_RELACIONADA_RATING tit
  WHERE OR_IDCNAE = 4110
    and a.IN_IDCALIFICREL = tit.IDCALREC
  union
   SELECT  /*+ full(a) full(b) parallel (a 8) parallel (b 8)*/ IDCALREC, ID_CNAE as or_idcnae
     FROM BAS_MEN.TITULARITAT_PERSONA A,
          BAS_MEN.PERSONAS B,
          BAS_MEN.TITULARIDAD_RELACIONADA_RATING tit
    WHERE NUMPERSONA = ID_PERSONA
      and ID_CNAE = 4110
      and a.codtit = tit.codtit);

 COMMIT;

 -- Tabla que contiene por titularidad relacionada el indicador de holding
 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITU_INDHOLDING');

 INSERT /*+ parallel (d 8)*/ INTO BAS_MEN.TITU_INDHOLDING d
 select IDCALREC, max(OR_INDHOLDING)
 from (
 SELECT /*+ full(a) parallel (a 8)*/ IDCALREC, max(OR_INDHOLDING) as OR_INDHOLDING
   FROM BAS_MEN.BASILEA a,
        BAS_MEN.TITULARIDAD_RELACIONADA_RATING tit
  where OR_INDHOLDING in ('1', '3', '4')
    and a.in_IDCALIFICREL = tit.IDCALREC
    group by IDCALREC
  union
 select /*+ full(a) full(b) parallel (a 8) parallel (b 8)*/ IDCALREC, max(SW_EST_CIVIL) as OR_INDHOLDING
   from BAS_MEN.TITULARITAT_PERSONA A,
        BAS_MEN.PERSONAS B,
        BAS_MEN.TITULARIDAD_RELACIONADA_RATING tit
  WHERE NUMPERSONA = ID_PERSONA
    and SW_EST_CIVIL in ('1', '3', '4')
    and a.codtit = tit.codtit
    group by IDCALREC)
   group by IDCALREC;

 COMMIT;

--INI 06/02/2019 - Nav
-- Carga de las tablas BAS_MEN.TITULARITAT_EMPLEADOS y BAS_MEN.MAESTRO_EMPLEADOS
    -------------------------------------------------------------------------------------
    --                     CARGA TABLA MAESTRO_EMPLEADOS INI
    -- Tabla que contiene los empleados de BS para considerarlos como no susceptibles
    -------------------------------------------------------------------------------------

    VN_NUMERR:= 18;

    -- Información en el control de LOG (Tabla CONTROL_PROCESO) del inicio del proceso
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EMPLEADOS');

    INSERT /*+ parallel (s 8) */ INTO BAS_MEN.MAESTRO_EMPLEADOS s (DNI, FEC_SYSDATE)
    SELECT /*+ parallel (b 8) */ DECODE(SUBSTR(ID_LEGAL, 1, 1), 'X', ID_LEGAL, 'Y', ID_LEGAL, LPAD(ID_LEGAL, 12, '0')), sysdate
      FROM BAS_MEN.EMPLEADOS b
     WHERE FEC_ALTA_EMPLEADO <= PN_FECPRO
       AND (FEC_BAJA IS NULL OR FEC_BAJA >= PN_FECPRO);

    COMMIT;

    DELETE BAS_MEN.MAESTRO_EMPLEADOS
     WHERE DNI = '00090000965X';

    COMMIT;

    -------------------------------------------------------------------------------------
    --                     CARGA TABLA FNC_TITULARITAT_EMPLEADOS
    -- Tabla que contiene los empleados de BS para considerarlos como no susceptibles
    -------------------------------------------------------------------------------------
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULARITAT_EMPLEADOS');

    INSERT /*+ parallel (s 8) */ INTO BAS_MEN.TITULARITAT_EMPLEADOS s
    SELECT  /*+ full(b) parallel (b 8) */ B.*
      FROM BAS_MEN.MAESTRO_EMPLEADOS A,
           BAS_MEN.TITULARITAT_PERSONA B
     WHERE A.DNI = B.IDEPER;

    COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROJECT_FINANCE');

  insert into BAS_MEN.MAESTRO_PROJECT_FINANCE
  (ID_MES, OR_IDPERS, OR_NOMPER, IDRATING, SECTOR, OR_NUMRAT, OR_FECHA, OR_RATINT, OR_NOMPAIS, SITUACION, MODELO,
  OR_CTACLI, OR_PUNT0, OR_REFOPE, OR_PROYECTO, IN_CATEGO, OR_NUMOFI)
  select ID_MES, trim(NIF_PRESTATARIA), NOMBRE_PROYECTO, ID_RATING, TIPOLOGIA, OR_NUMRAT, FEC_CAL, RAT_GBL, OFEX, SITUACION, MODELO,
         OR_CTACLI, MODELO_PFF, ID_CONTRATO, IDPROYECTO, CATEGORIA_SUPERVISORA, OR_NUMOFI
    from dcrprop_mensual.maestro_project_finance_sas
   where CHECK_DE_CARGA = 1;

commit;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_REAL_ESTATE');

INSERT INTO BAS_MEN.MAESTRO_REAL_ESTATE
       (ID_MES, OR_IDPERS, OR_NOMPER, OR_NOMPAIS, OR_CTACLI, SECTOR, OR_NUMOFI)
 SELECT ID_MES, NIF_PRESTATARIA,  NOMBRE_PROYECTO, OFEX, OR_CTACLI, TIPOLOGIA, OR_NUMOFI
   FROM DCRPROP_MENSUAL.MAESTRO_REAL_ESTATE_SAS;

commit;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_OBJECT_FINANCE');

INSERT INTO BAS_MEN.MAESTRO_OBJECT_FINANCE
       (ID_MES, OR_IDPERS, OR_NOMPER, OR_NOMPAIS, OR_CTACLI, SECTOR, OR_NUMOFI)
 SELECT ID_MES, NIF_PRESTATARIA,  NOMBRE_PROYECTO, OFEX, OR_CTACLI, TIPOLOGIA, OR_NUMOFI
   FROM DCRPROP_MENSUAL.MAESTRO_OBJECT_FINANCE_SAS;

commit;


    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CNAES_SECTOR');

  INSERT INTO BAS_MEN.MAESTRO_CNAES_SECTOR
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_CNAES_SECTOR_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SEGMENTOS');

  INSERT INTO BAS_MEN.MAESTRO_SEGMENTOS
  SELECT DISTINCT * FROM DCRPROP_MENSUAL.MAESTRO_SEGMENTOS_SAS;

  COMMIT;


  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERSONALIDADES');

  INSERT INTO BAS_MEN.MAESTRO_PERSONALIDADES
  SELECT distinct * FROM DCRPROP_MENSUAL.MAESTRO_PERSONALIDADES_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CEDULAS_HIPOTECARIAS');

  INSERT INTO BAS_MEN.MAESTRO_CEDULAS_HIPOTECARIAS
  SELECT *
    FROM DCRPROP_MENSUAL.CEDULAS_HIPOTECARIAS_SAS;

  COMMIT;

-- 03/11/2021 - NAV - Por peticion de negocio dejamos de utilizar la tabla BAS_MEN.MAESTRO_RESEGMENTACION_CA_BASI
--  UPDATE BAS_MEN.MAESTRO_RESEGMENTACION_CA_BASI
--     SET OR_NIFCIF = TRIM(OR_NIFCIF),
--         OR_CLUNIENT = TRIM(OR_CLUNIENT),
--         OR_CLUNIPROD = TRIM(OR_CLUNIPROD);
--
--  COMMIT;


-- 05/04/2017

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS');
  INSERT INTO BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_CUENTAS_CONT_DEPOS_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CONTRAPARTES');
  INSERT INTO BAS_MEN.MAESTRO_CONTRAPARTES
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_CONTRAPARTES_SAS;

  COMMIT;

 /*INI ALLA 14/07/2016 */

  DELETE BAS_MEN.ERRORES_PSS_RECUPERADOS;

  INSERT INTO BAS_MEN.ERRORES_PSS_RECUPERADOS
  SELECT * FROM DCRPROP_MENSUAL.ERRORES_PSS_RECUPERADOS_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_RESEG_TOTAL');

  INSERT INTO BAS_MEN.MAESTRO_RESEG_TOTAL SELECT * FROM DCRPROP_MENSUAL.MAESTRO_RESEG_TOTAL_SAS;

  commit;


  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_RESEGMENTACION_BDE');

  INSERT INTO BAS_MEN.MAESTRO_RESEGMENTACION_BDE SELECT distinct a.* FROM DCRPROP_MENSUAL.MAESTRO_RESEGMENTACION_BDE_SAS a;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS');

  insert into BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS
  select * from DCRPROP_MENSUAL.EPIGRAFES_SEGMENTOS_SAS;

  commit;

  --
  -- Volcado de VH03_UA_ACTIVO_INMOB
  --

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.VH03_UA_ACTIVO_INMOB');

  -- Se obtiene el ultimo mes ;
    select /*+ parallel(s 4 ) full(s) */ max(ID_MES) into VV_MAX_MES FROM DCR_TRABILIDAD.BS_V3_UA_ACTIVO_INMOBILIARIO@FIN01PRO_PLUG S;


  INSERT /*+ parallel(I 4 ) */  INTO BAS_MEN.VH03_UA_ACTIVO_INMOB I -- Tabla Volcado
  SELECT /*+ parallel(s 4 ) full(s) */  distinct ID_MES,UNIDAD_ECONOMICA,CTO_SIN_DG,GRUPO
  FROM DCR_TRABILIDAD.BS_V3_UA_ACTIVO_INMOBILIARIO@FIN01PRO_PLUG S
    WHERE  s.ID_MES=VV_MAX_MES;

    commit;

    --
  -- Volcado de VH01_UNIDAD_ECONOMICA
  --

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.VH01_UNIDAD_ECONOMICA');

  -- Se obtiene el ultimo mes ;
    select /*+ parallel(s 4 ) full(s) */ max(ID_MES) into VV_MAX_MES FROM DCR_TRABILIDAD.BS_V1_UNIDAD_ECONOMICA@FIN01PRO_PLUG S;


  INSERT /*+ parallel(I 4 ) */  INTO BAS_MEN.VH01_UNIDAD_ECONOMICA I -- Tabla Volcado
  SELECT /*+ parallel(s 4 ) full(s) */  distinct ID_MES, UNIDAD_ECONOMICA, TRIM(MADURACION_PRAL), GRUPO /* 10/05/2022 RMR | Añadido TRIM por error LGD 99 */
    FROM DCR_TRABILIDAD.BS_V1_UNIDAD_ECONOMICA@FIN01PRO_PLUG S
   WHERE s.ID_MES = VV_MAX_MES;

    commit;

  --
  -- Promotores con promocion
  --

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PROMOTORES_CON_PROMOCION');

  insert  /*+ parallel(c 4 ) */ into BAS_MEN.PROMOTORES_CON_PROMOCION C
    select /*+ parallel(a 4) parallel(b 4) full(a) full(b) */
    distinct A.MES,A.UNIDAD_ECONOMICA,A.CTO_SIN_DG,B.MADURACION_PRAL,A.GRUPO
    from BAS_MEN.VH03_UA_ACTIVO_INMOB A,
    BAS_MEN.VH01_UNIDAD_ECONOMICA B
    where
    A.UNIDAD_ECONOMICA=B.UNIDAD_ECONOMICA and
    A.GRUPO=B.GRUPO and
    A.GRUPO='FINAN';

  commit;

  VN_NUMERR:= 19;

--BAS_MEN.OTROS_PRESTAMOS. XCG, 05/06/2017 Se deja de realizar el tratamiento de los 'Otros'

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SEGMENTACION');

 /************************************************************************************/
/* LLAMADA A LA FUNCION                                                             */
/************************************************************************************/
  insert /*+ PARALLEL (x 8) */ into BAS_MEN.SEGMENTACION x
  select CUR.OR_IDREG, CUR.IN_SEGMBSINI, CUR.IN_SEGMBS0, CUR.IN_SEGMBS, CUR.IN_TIPOREG, CUR.IN_SUCEPT, CUR.OR_NUMSCOFIN,
       CUR.OR_TITUSCPCB, CUR.OR_PERSONSCPCB,CUR.OR_CNAESCPCB, cur.or_titularitat, cur.or_idpers, cur.in_segmbs2,cur.IN_PRESTPERCENT, CUR.OR_FECSCO,
       CUR.FI_ELIMI1, CUR.OR_FECALTBLO, CUR.IN_ANTIGU, CUR.OR_CODISO, CUR.IN_HIPOAVAL, CUR.OR_IMPLTV, CUR.OR_CODGAR,
       CUR.OR_VALTAS, CUR.OR_FECPRREV, CUR.IN_SEG_HIP, CUR.IN_INDMOR, CUR.OR_IDCNAEREL, CUR.OR_INDHOLDINGREL, CUR.IN_CAT_BDE_N
    from table(BAS_MEN.PK_SEGMENTACION.F_SEGMENTACION
      (cursor(SELECT /*+ full(a) PARALLEL (A 8) parallel(drc 4) parallel (bloq 4) PARALLEL (SEG_HIP 4) */
        distinct A.OR_IDREG, a.OR_SEGGES, a.OR_TIPGAR, OR_TIPOPR, a.OR_TIPIDE, a.OR_IDECNO, A.OR_PROCED, OR_DESTPR, a.OR_PERSON,
        a.OR_IDPERS, a.OR_ENTITY, a.OR_IDCNAE, NVL(a.OR_TIPOPE,'?') TIPOPE, a.OR_CTAIND, OR_EPIIND,  OR_FECOPE,
        a.OR_REFOPE, OR_TITUSCPCB, OR_PERSONSCPCB, OR_CNAESCPCB,
        B.in_sucept, a.or_titularitat,
        NVL(B.ID_TIP_SCO,NVL(F.TIP_SCO,E.TIP_SCO)) TIP_SCO, NVL(F.COD_ACC,E.COD_ACC) COD_ACC, A.OR_CLUNIPROD, A.OR_TIPOPE,
        A.OR_DIVISA, A.OR_NIFCIF, nvl(A.OR_FINABE, '?') OR_FINABE, A.OR_CODPRODO, OR_DESCTAVISTA,
        NVL(SEGMENTO, 'OTROS') SEGMENTO_CNAE,
        case when a.or_entity = 9109 then a.in_segmbsini else NVL(PERSON.IN_SEGMBSINI, '?') end as IN_SEGMBSINI,
        decode(empleados.nifcif, NULL, 0,1) EMPLEADO,
        NVL(PERSON_SCPCB.IN_SEGMBSINI, '?') IN_SEGMBSINI_SCPCB, B.ID_MIG_RAT,
        B.IND_VEN, B.OR_NUMSCO1,
        A.or_tituctavista, a.or_persctavista, a.or_cnaectavis, /*G.CONTRATO,*/
        a.OR_CLUNICUENT, OR_VERSPREST, a.FI_EPICON,
        nvl(tot.IN_SEGMBSINI_NEW, '?') as segmbsini_tot,
        nvl(bde.IN_SEGMBSINI, '?') as segmbsini_bde,
        case when A.OR_NIFCIF = 'N0030939C' OR A.OR_TITULARITAT = 18776122 THEN '020' /* RMR 09/03/2020 - Añadido requerimiento promontoria */
           when prom.cnae93 is not null then '020'
           when UPPER (opgar.SUBTIPO) = 'TAX LEASE'  then '301'   /* FMRR 22/02/2021 -- TM-4152 -- Identificar el taxlease y RD874 */
           when opgar.SUBTIPO LIKE '%874%'           then '302'
           else '?'
        end IN_SEGMBS2,
        case when prom_CA.cnae93 is not null then '020' else '?' end    IN_SEGMBS2_CA,
        case when A.OR_NIFCIF = 'N0030939C' OR A.OR_TITULARITAT = 18776122 THEN '200'  /* RMR 09/03/2020 - Añadido requerimiento promontoria */
           when a.in_tiporeg = 'FMX' and nvl(a.IN_SEGMBS0, '?') <> '?' then a.IN_SEGMBS0  /* NAV 21/05/2021 - Para Mexico */
           when pf.or_idpers is not null then '201'
           when pf_ibm.or_idpers is not null then '201'
           when pf_ofex.OR_CTACLI is not null then '201'
           when NVL(re.or_idpers, re_bm.or_idpers) is not null then '203'/* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Real Estate, aparte del existente por OR_NIFCIF*/
           when re_ofex.OR_CTACLI is not null then '203'
           when NVL(ofi.or_idpers, ofi_bm.or_idpers) is not null then '204'/* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Project finance, aparte del existente por OR_NIFCIF*/
           when ofi_ofex.OR_CTACLI is not null then '204'
           when a.OR_PROCED in ('FORFAITING', 'FACTORING', 'EFECTES', 'CONFIRMING', 'ES-NEGDOC') then '202'
           when PromPro.MADURACION_PRAL is not null then '200'
        else '?'
        end in_SEGMBS0,
        case when ced.isin is not null then '034' else '?' end segmbsini_bono,
        case when vida.or_ctaind is not null then '005' else '?' end segmbsini_vida,
        case when epicon.fi_epicon is not null then epicon.in_segmbsini else '?' end segmbsini_epicon,
        /*case WHEN OR_FECOPE < PN_FECPRO-10000 THEN nvl(PROD_SCORE, '?') else '?' end PROD_SCORE,*/
        /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/
        /*case WHEN (OR_FECOPE < PN_FECPRO-10000 OR TO_NUMBER(TO_CHAR(FECHAULTIMA, 'YYYYMMDD')) < PN_FECPRO-10000)  THEN nvl(PROD_SCORE, '?') else '?' end PROD_SCORE,*/
        case WHEN OR_FECOPE > 19000101
            AND ( (ABS(MONTHS_BETWEEN(FECHAULTIMA, TO_DATE(OR_FECOPE,'YYYYMMDD'))) <= 6
               AND FECHAULTIMA < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
              OR
                (ABS(MONTHS_BETWEEN(FECHAULTIMA, TO_DATE(OR_FECOPE,'YYYYMMDD'))) > 6
               AND TO_DATE(OR_FECOPE,'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)) )
           THEN nvl(PROD_SCORE, '?')
           else '?' end PROD_SCORE,
        a.OR_CODIGO_BIC,
        PromPro.MADURACION_PRAL,
        A.IN_PRESTPERCENT,
        TO_NUMBER(TO_CHAR(FECHAULTIMA, 'YYYYMMDD')) FECHAULTIMA,
        case
           when a.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR
            (a.OR_PROCED = 'MANUAL' AND a.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)) then
             case
               when SUBSTR(a.OR_EPIIND,1,5) = '01005' then
                  'RX'  /*IDENTIFICACIÓN DE LAS OFEX, ('RX' PARA RENTA FIJA).*/
               when pf_ofex.OR_CTACLI is not null or pf.or_idpers is not null or pf_ibm.or_idpers is not null then
                  'PX'  /*IDENTIFICACIÓN DE LAS OFEX DE PROJECT FINANCE ('PX').                      */
             --when ofex_gar.OR_IDREG_NEW is not null then 'OXE'   /* FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
               else
                  'OXE' --nvl(ofex.in_tiporeg, 'OX')   /*  FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
             end
           when substr(a.in_tiporeg,1,2) in ('MM', 'CE', 'AV') then substr(a.in_tiporeg,3)
           else a.in_tiporeg
         end as in_tiporeg
       , a.fi_elimi1
       , NVL(bloq.FECALTBLO, a.OR_FECALTBLO) as OR_FECALTBLO
       , CASE
         WHEN a.OR_FECOPE in (0, 10101) THEN
          99999999
         WHEN PN_FECPRO < a.OR_FECOPE THEN
          99999999
         ELSE
          TO_DATE(PN_FECPRO,'YYYY/MM/DD') - TO_DATE(a.OR_FECOPE,'YYYY/MM/DD')
         END as IN_ANTIGU
       , CASE
         WHEN SOB.CODI_PAIS IS NOT NULL THEN
          SOB.CODI_PAIS
         ELSE VReg_MaeSob.CODI_PAIS
        END as OR_CODISO
       , case
         when fiador.ID_ENTIDADCTO_POTENCIAL is not null then
          'SI'
         ELSE
          'NO'
         END AS IN_HIPOAVAL
       , case
         when a.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR (a.OR_PROCED = 'MANUAL' AND a.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365))  then
          --RMR 08/10/2019 En caso de que que el LTV de OFEX sean negativo, forzamos un 0
          --a.or_impltv
          case
            when a.or_impltv < 0 then 0
            else a.or_impltv
          end
          /*RMR 08/10/2019 En caso de que que el LTV de OFEX sean negativo, forzamos un 0*/
         when ltv.IMPLTV is not null then IMPLTV
         when a.OR_TIPGAR IN ('HC','HV','HR','HX') AND a.OR_CLUNIPROD not in ('PR', 'LE', 'PI') AND a.OR_IMPLTV <= 0 then
          100
         when a.or_impltv < 0 or (a.or_valtas < 10 and a.OR_IMPLTV <> 100) then
          0
         when a.or_impltv > 200 then
          200
         else
          a.or_impltv
         end as or_impltv
       , case
         when a.OR_CTAIND in (4372631200, 4372641200) then     /* ADP 05/06/2018  cuentas contables de la seguridad social deben de tener un código de garantía GE 21109*/
                  'GE 21109'
         when gar_rf.or_coisin is not null and a.fi_tipexp not in ('OTC', 'Repos') then gar_rf.OR_CODGAR
         when a.or_codgar = '?' then 'FIC00800'
         when opgar.operacion is not null then 'GR 12102' /* RMR 09/06/2020 Para todas aquellas operaciones */
         else
          a.or_codgar
         end as or_codgar
       , case
         when a.or_valtas < 10 then
          0
         else
          a.or_valtas
         end as or_valtas
       , case
         when a.OR_PROCED IN ('INV-C/C-CR', 'INV-C/C-EX') AND NVL(a.OR_FECOPE,0) <> 0 AND a.OR_FECPRREV <> '?'
        AND TO_DATE(a.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD') > 365 THEN
          case
          when SUBSTR(a.OR_FECOPE, 5,4) = '0229' then
             case
             when TO_NUMBER(SUBSTR(PN_FECPRO,1,4)||'0228') < PN_FECPRO THEN
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)+1||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
             else
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
             end
          else
             case
             when TO_NUMBER(SUBSTR(PN_FECPRO,1,4)||SUBSTR(a.OR_FECOPE, 5,4)) < PN_FECPRO THEN
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)+1||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
             else
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
             end
          end
         when (a.OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA', 'OFEX-LI')
         OR (a.OR_PROCED = 'MANUAL' AND a.OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)))
        AND a.or_tipope = 'CR' AND NVL(a.OR_FECOPE,0) <> 0 AND a.OR_FECPRREV <> '?'
        AND TO_DATE(a.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD') > 365 THEN
          case
          when SUBSTR(a.OR_FECOPE, 5,4) = '0229' then
             case
             when TO_NUMBER(SUBSTR(PN_FECPRO,1,4)||'0228') < PN_FECPRO THEN
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)+1||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
             else
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)||'0228'),'YYYY-MM-DD'),'YYYY-MM-DD')
             end
          else
             case
             when TO_NUMBER(SUBSTR(PN_FECPRO,1,4)||SUBSTR(a.OR_FECOPE, 5,4)) < PN_FECPRO THEN
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)+1||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
             else
                TO_CHAR(TO_DATE(to_NUMBER(SUBSTR(PN_FECPRO,1,4)||SUBSTR(a.OR_FECOPE, 5,4)),'YYYY-MM-DD'),'YYYY-MM-DD')
             end
          end
         else
          a.OR_FECPRREV
         end as OR_FECPRREV
       , NVL(SEG_HIP.IN_SEG_HIP_NEW, a.IN_SEG_HIP) IN_SEG_HIP
       , /*case when a.or_proced = 'ADJUDICADO' then 'NO' else a.in_Indmor end*/ a.IN_INDMOR /* XCG. Adjudicados con la marca de mora que tenga de origen. 13/09/2019*/
       , case when nvl(in_idcalificrel,0) <> 0 then nvl(cnarel.or_idcnae, a.or_idcnae) else 0 end as OR_IDCNAEREL
       , case when nvl(in_idcalificrel,0) <> 0 then nvl(holrel.OR_INDHOLDING, a.OR_INDHOLDING) else '?' end as OR_INDHOLDINGREL
       , nvl(drc.ID_CAT_DRC, 9999) ID_CAT_DRC
       , a.OR_NUMOFI /*  FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
       FROM BAS_MEN.basilea A,
        BAS_MEN.MAESTRO_CNAES_SECTOR CNAES,
        BAS_MEN.MAESTRO_PERSONALIDADES PERSON,
        BAS_MEN.MAESTRO_PERSONALIDADES PERSON_SCPCB,
--        (select OR_TITULARITAT, OR_CLUNIENT, OR_CLUNIPROD, OR_CLUNICONTR CONTRATO
--           from BAS_MEN.MAESTRO_RESEGMENTACION_CA_BASI
--          where OR_CLUNICONTR <> 999999999999999) G,
        (SELECT DISTINCT lpad(id_legal,12,'0') nifcif
          FROM BAS_MEN.EMPLEADOS
           WHERE FEC_ALTA_EMPLEADO <= PN_FECPRO
           AND (FEC_BAJA IS NULL OR FEC_BAJA >= PN_FECPRO)) EMPLEADOS,
          BAS_MEN.TIPO_PRESTAMO_SIBIS F,
          BAS_MEN.TIPO_PRESTAMO E,
          BAS_MEN.MAESTRO_RESEG_TOTAL tot,
          BAS_MEN.MAESTRO_RESEGMENTACION_BDE bde,
          BAS_MEN.MAESTRO_PROJECT_FINANCE pf,
          BAS_MEN.MAESTRO_PROJECT_FINANCE pf_ibm,
          (select * from BAS_MEN.MAESTRO_PROJECT_FINANCE where NVL(OR_CTACLI,0) <> 0) pf_ofex,
          BAS_MEN.MAESTRO_REAL_ESTATE RE,
          BAS_MEN.MAESTRO_REAL_ESTATE RE_BM,/* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Real Estate, aparte del existente por OR_NIFCIF*/
          (select * from BAS_MEN.MAESTRO_REAL_ESTATE where NVL(OR_CTACLI,0) <> 0) RE_OFEX,
          BAS_MEN.MAESTRO_OBJECT_FINANCE OFI,
          BAS_MEN.MAESTRO_OBJECT_FINANCE OFI_BM, /* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Project finance, aparte del existente por OR_NIFCIF*/
          (select * from BAS_MEN.MAESTRO_OBJECT_FINANCE where NVL(OR_CTACLI,0) <> 0) OFI_OFEX,
          BAS_MEN.MAESTRO_CEDULAS_HIPOTECARIAS CED,
          (SELECT CNAE93 FROM BAS_MEN.MAESTRO_CNAES_SECTOR WHERE SEGMENTO = 'PROMOTOR') prom,
          (SELECT CNAE93 FROM BAS_MEN.MAESTRO_CNAES_SECTOR WHERE SEGMENTO = 'PROMOTOR') prom_CA,
          BAS_MEN.CUENTA_BS_VIDA vida,
          BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS epicon,
          (SELECT /*+ parallel (ScoCo 8) */  DISTINCT ScoCo.CONTRATO, ScoCo.CONTRATO_DISP, ScoCo.PROD_SCORE
           FROM BAS_MEN.SCORES_CONTRATO_COMPORTAMENTAL ScoCo
          WHERE scoco.PROD_SCORE IN ('HP','CO')) Scor,
          BAS_MEN.PROMOTORES_CON_PROMOCION PromPro,
          (SELECT ORI.IN_SUCEPT, ORI.ID_NUM_PRE_SIBIS, ORI.ID_NUMVERSPR, ORI.ID_TIP_SCO, ORI.ID_FCH_FEC_SCO_VAL, ORI.ID_MIG_RAT, ORI.OR_NUMSCO1, ORI.IND_VEN, PROP.FECHAULTIMA
           FROM (SELECT /*+ PARALLEL (d 8) */ D.ID_MAPA_DE_USO in_SUCEPT, D.ID_NUM_PRE_SIBIS, D.ID_NUMVERSPR, ID_TIP_SCO, ID_FCH_FEC_SCO_VAL, D.ID_MIG_RAT, ID_SCORING_VALIDADO as OR_NUMSCO1, IND_VEN
               FROM BAS_MEN.BS_CAL_SCORING_ORI D) ORI,
              (SELECT * FROM BAS_MEN.TM_CAL_PROPUESTA
              WHERE TO_NUMBER(TO_CHAR(FECHAULTIMA, 'YYYYMMDD')) <= PN_FECPRO
                AND FECHAULTIMA IS NOT NULL) PROP
          WHERE TO_NUMBER(ORI.OR_NUMSCO1) = TO_NUMBER(NUMSOLICITUD(+))) B
        , BAS_MEN.LISTADO_BLOQUEOS_CORREGIDOS bloq
        , (SELECT DISTINCT ID_ENTIDADCTO_POTENCIAL, ID_CODIGO_TIPOPROD_POTENCIAL, ID_COD_CONTRATO_POTENCIAL FROM BAS_MEN.MAESTRO_FIADOR) fiador
        , BAS_MEN.MAESTRO_SOBERANOS SOB
        , BAS_MEN.SEG_HIP_BDD_NO_GARANT SEG_HIP
        , BAS_MEN.BASILEA_LTV LTV
        , BAS_MEN.CNAESBASILEA cnarel
        , BAS_MEN.TITU_INDHOLDING holrel
        , BAS_MEN.MAESTRO_GARANTIAS_RF gar_rf
        , BAS_MEN.VW_APR_DRC drc
      /*  FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
      --, BAS_MEN.OFEX_T24_DATOS_PERSONAS ofex
      --, (SELECT OR_IDREG_NEW
      --     FROM BAS_MEN.OFEX_T24_REG_INSERTADOS_BDD
      --    WHERE IND_ACCION = 'INSERTA NUEVO') ofex_gar
        , (SELECT SUBSTR(OPERACION, 1, 10) AS OPERACION, SUBTIPO
           FROM BAS_MEN.MAESTRO_RD874) opgar /* RMR 09/06/2020 Añadido maestro para asignar codigo de garantia a los astilleros bajo el RD874 */
      WHERE A.OR_REFOPE = B.ID_NUM_PRE_SIBIS(+)
      AND A.OR_VERSPREST = B.ID_NUMVERSPR(+)
      AND A.OR_TIPOPR = E.TIP_PRE(+)
      AND A.OR_TIPOPR = F.TIP_PRE(+)
      AND A.OR_IDCNAE = cnaes.CNAE93(+)
      AND A.OR_PERSON = PERSON.OR_PERSON(+)
      AND A.OR_PERSCTAVISTA = PERSON_SCPCB.OR_PERSON(+)
      AND A.OR_NIFCIF = EMPLEADOS.NIFCIF(+)
--    AND A.OR_CLUNIENT = G.OR_CLUNIENT(+)
--    AND A.OR_CLUNIPROD = G.OR_CLUNIPROD(+)
--    AND A.OR_CLUNICONTR = G.CONTRATO(+)
      AND A.OR_IDPERS = tot.OR_IDPERS(+)
      and a.OR_NIFCIF = bde.OR_NIFCIF(+)
      and a.OR_NIFCIF = pF.OR_IDPERS (+)
      and a.OR_NIFCIFIBM = pF_ibm.OR_IDPERS(+)
      and a.OR_CTACLI         = pF_ofex.OR_CTACLI(+)
      AND a.OR_NUMOFI         = pf_ofex.OR_NUMOFI(+)
      and a.OR_NIFCIF         = re.OR_IDPERS (+)
      and a.OR_NIFCIFIBM      = re_bm.OR_IDPERS (+) /* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Real Estate, aparte del existente por OR_NIFCIF*/
      and a.OR_CTACLI         = re_ofex.OR_CTACLI(+)
      AND a.OR_NUMOFI         = re_ofex.OR_NUMOFI(+)
      and a.OR_NIFCIF         = ofi.OR_IDPERS (+)
      and a.OR_NIFCIFIBM      = ofi_bm.OR_IDPERS (+) /* RMR 19/11/2019 - Añadido cruce por OR_NIFCIFIBM para Project finance, aparte del existente por OR_NIFCIF*/
      and a.OR_CTACLI         = ofi_ofex.OR_CTACLI(+)
      AND a.OR_NUMOFI         = ofi_ofex.OR_NUMOFI(+)
    /*INI --30/10/2019 - NAV -- BORRADO DEL CAMPOS OR_ISINBO DE BASILEA POR ESO SUSTITUIMOS POR OR_COISIN
      and A.OR_ISINBO         = ced.ISIN(+) */
      and A.OR_COISIN         = ced.ISIN(+)
    --FIN
      and a.OR_IDCNAE         = prom.cnae93(+)
      and case when a.or_tituctavista <> 0 then a.or_cnaectavis else a.or_idcnae end = prom_CA.cnae93(+)
      and a.or_ctaind = vida.or_ctaind(+)
      and a.fi_epicon = epicon.fi_epicon(+)
      and CASE WHEN a.OR_CLUNICONTR IN (0, 999999999999999) THEN a.OR_REFOPE ELSE  a.OR_CLUNICONTR END = Scor.CONTRATO(+)
      and a.OR_REFOPE = scor.CONTRATO_DISP(+)
      and a.OR_CLUNICONTR=PromPro.CTO_SIN_DG(+)
      and a.OR_IDREG              = Bloq.OR_IDREG(+)
      and a.OR_CLUNIENT           = fiador.ID_ENTIDADCTO_POTENCIAL(+)
      AND a.OR_CLUNIPROD          = fiador.ID_CODIGO_TIPOPROD_POTENCIAL(+)
      AND a.OR_CLUNICONTR         = fiador.ID_COD_CONTRATO_POTENCIAL(+)
      AND a.OR_IDPAIS             = sob.CODI_NUM_PAIS(+)
      AND a.OR_IDREG              = SEG_HIP.OR_IDREG(+)
      AND a.OR_REFOPE             = LTV.OR_REFOPE(+)
      AND a.or_cluniprod          = ltv.or_cluniprod(+)
      and a.in_idcalificrel       = cnarel.IDCALREC(+)
      and a.in_idcalificrel       = holrel.IDCALREC(+)
      and a.OR_COISIN             = gar_rf.OR_COISIN(+)
      and a.OR_NIFCIF             = drc.OR_NIFCIF(+)
      and a.OR_CLUNICONTR         = drc.OR_CLUNICONTR(+)
      and a.OR_CONTRATO_GARANTIA  = drc.OR_CONTRATO_GARANTIA(+)
      and a.OR_CLUNICUENT         = drc.OR_CLUNICUENT(+)
      and a.OR_CLUNIOPERA         = drc.OR_CLUNIOPERA(+)
      and a.OR_CTAIND             = drc.OR_CTAIND(+)
   /* FMRR - 18/03/2022 -- HDEV-133268 - Eliminar el enriquecimiento de Ofex */
   -- and a.or_idreg              = ofex.or_idreg(+)
   -- and a.or_idreg              = ofex_gar.OR_IDREG_NEW(+)
      and a.OR_CLUNICONTR         = opgar.OPERACION(+)
      ),PN_FECPRO)) cur;

  COMMIT;

     VN_NUMERR:= 20;

  MERGE /*+ full(upd) parallel(Upd 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Upd
  USING BAS_MEN.SEGMENTACION Sel
     ON (Upd.OR_IDREG = Sel.OR_IDREG)
   WHEN MATCHED THEN
 UPDATE
    SET Upd.IN_SEGMBSINI = Sel.IN_SEGMBSINI
      , Upd.IN_SEGMBS    = Sel.IN_SEGMBS
      , Upd.IN_SEGMBS0    = Sel.IN_SEGMBS0
      , upd.in_segmbs2 = sel.in_segmbs2
      , Upd.IN_SUCEPT = Sel.IN_SUCEPT
      , Upd.OR_TITUSCPCB = Sel.OR_TITUSCPCB
      , Upd.OR_PERSONSCPCB    = Sel.OR_PERSONSCPCB
      , Upd.OR_CNAESCPCB = Sel.OR_CNAESCPCB
      , Upd.IN_TIPOREG = Sel.IN_TIPOREG
      , Upd.OR_NUMSCOFIN    = Sel.OR_NUMSCOFIN
      , Upd.IN_PRESTPERCENT = Sel.IN_PRESTPERCENT
      , Upd.OR_FECSCO = Sel.OR_FECSCO
    --, upd.FI_ELIMI1    = sel.FI_ELIMI1,
      , upd.OR_FECALTBLO = sel.OR_FECALTBLO,
        upd.IN_ANTIGU    = sel.IN_ANTIGU,
        upd.OR_CODISO    = sel.OR_CODISO,
        upd.IN_HIPOAVAL  = sel.IN_HIPOAVAL,
        upd.OR_IMPLTV    = sel.OR_IMPLTV,
        upd.OR_CODGAR    = sel.OR_CODGAR,
        upd.OR_VALTAS    = sel.OR_VALTAS,
        upd.OR_FECPRREV  = sel.OR_FECPRREV,
        upd.IN_SEG_HIP   = sel.IN_SEG_HIP,
      --upd.IN_INDMOR    = sel.IN_INDMOR,
        upd.OR_IDCNAEREL = sel.OR_IDCNAEREL,
        upd.OR_INDHOLDINGREL = sel.OR_INDHOLDINGREL,
        upd.IN_CAT_BDE_N = sel.in_cat_bde_n,
        upd.or_vidini = CASE
             WHEN OR_PROCED IN ('INV-C/C-CR', 'INV-C/C-EX') OR (OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') AND or_tipope = 'CR')
               OR (OR_PROCED = 'MANUAL' AND OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365) AND or_tipope = 'CR') THEN
                  CASE
                       WHEN NVL(sel.OR_FECPRREV, '?') NOT IN ('?','0000-00-00','0001-01-01','0000000000') AND OR_FECOPE <> 0 AND OR_FECOPE <> 10101 THEN /* NAV 31/05/2022 -  HDEV-153304 - Añadimos la fecha 0001-01-01 */
                            CASE
                                 WHEN TO_DATE(sel.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(OR_FECOPE,'YYYY/MM/DD') > 365 THEN
                                 365
                            ELSE
                                 TO_DATE(sel.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(OR_FECOPE,'YYYY/MM/DD')
                            END
                       ELSE OR_VIDINI
                  END
             ELSE OR_VIDINI
        END,
        upd.or_vidres = CASE
                             WHEN OR_PROCED IN ('INV-C/C-CR', 'INV-C/C-EX') OR (OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') AND or_tipope = 'CR')
                               OR (OR_PROCED = 'MANUAL' AND OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365) AND or_tipope = 'CR') THEN
                                  CASE
                                       WHEN NVL(sel.OR_FECPRREV, '?') NOT IN ('?','0000-00-00','0001-01-01','0000000000') THEN /* NAV 31/05/2022 -  HDEV-153304 - Añadimos la fecha 0001-01-01 */
                                            TO_DATE(sel.OR_FECPRREV,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD')
                                       ELSE OR_VIDRES
                                  END
                             ELSE OR_VIDRES
                        END,
        upd.or_tipope = CASE
                               WHEN SUBSTR(OR_EPIIND,1,5)  = '01005' AND OR_TIPOPE IN ('?', 'OT') THEN 'RF'
                               ELSE OR_TIPOPE
                          END;

commit;

  VN_NUMERR:= 12;
  BAS_MEN.SP_INFO_CONTROL_PROCES (PE_In_Proces =>'3.1 FNC_SEGMENTO '||PV_TABLA, PE_Estat=>'FINALIZADO', PE_Estado_Final=>'OK', PE_NRegs_Upd=>VN_COUNT);
  COMMIT;

EXCEPTION
   WHEN OTHERS THEN

  VV_MENSAJE:= SUBSTR('OR_IDREG:'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,255);
  BAS_MEN.SP_INFO_CONTROL_PROCES (PE_In_Proces =>'3.1 FNC_SEGMENTO '||PV_TABLA, PE_Estat=>'FINALIZADO', PE_Estado_Final=>'KO',PE_Desc_Error=>VV_MENSAJE, PE_Num_Error=>SUBSTR('NUMERR: '||VN_NUMERR,1,255));
    COMMIT;
    RAISE;

END;

-------------------------------------------------------
-- PROCEDURE FNC_SEGMENTO_RESTO
-------------------------------------------------------
PROCEDURE FNC_SEGMENT_RESTO IS

 --Segmentación de personas jurídicas que no tegan segmento por personalidad incorrecta. Contagio por NIF.
 CURSOR BASILEA IS
     SELECT /*+ full(c) PARALLEL (C 8)*/ C.OR_IDREG, D.IN_SEGMBSINI, D.IN_SEGMBS
       FROM (SELECT /*+ full(a) PARALLEL (A 8)*/ b.or_idpers, A.IN_SEGMBSINI, A.IN_SEGMBS,  a.in_tiporeg
               FROM BAS_MEN.BASILEA a,
                    BAS_MEN.SEGMBSINI_SIN_INFORMAR b
              WHERE a.OR_IDPERS = b.or_idpers
                AND SUBSTR(A.IN_SEGMBSINI,1,1) = '0') D,
            BAS_MEN.BASILEA C
      WHERE D.OR_IDPERS = C.OR_IDPERS
        AND C.IN_TIPOREG IN ('IN', '?')
        AND OR_TIPIDE NOT IN (0,2,3,4,5);

 CURSOR BASILEA_PF IS
     --SELECT /*+ full(b) PARALLEL (B 8) */ B.OR_IDREG, B.IN_SEGMBSINI, in_tiporeg tiporeg, f.* /* 11/03/2021 - NAV - dejamos de recuperar todos los campos de la tabla F */
     SELECT /*+ full(b) PARALLEL (B 8) */ B.OR_IDREG, B.IN_SEGMBSINI, in_tiporeg tiporeg, f.SECTOR, f.MODELO, f.OR_RATINT, f.OR_PUNT0, f.OR_FECHA, f.SITUACION, f.IDRATING
       FROM BAS_MEN.BASILEA                 B
          , BAS_MEN.MAESTRO_PROJECT_FINANCE F
      WHERE ( B.OR_NIFCIF = F.OR_IDPERS OR B.OR_NIFCIFIBM = F.OR_IDPERS)
      UNION
     --SELECT /*+ full(b) PARALLEL (B 8) */ B.OR_IDREG, B.IN_SEGMBSINI, 'PX' TIPOREG, f.* /* 11/03/2021 - NAV - dejamos de recuperar todos los campos de la tabla F */
     SELECT /*+ full(b) PARALLEL (B 8) */ B.OR_IDREG, B.IN_SEGMBSINI, 'PX' TIPOREG, f.SECTOR, f.MODELO, f.OR_RATINT, f.OR_PUNT0, f.OR_FECHA, f.SITUACION, f.IDRATING
       FROM BAS_MEN.BASILEA                 B
          , BAS_MEN.MAESTRO_PROJECT_FINANCE F
      WHERE B.OR_CTACLI         = F.OR_CTACLI
        AND B.OR_NUMOFI         = F.OR_NUMOFI
        AND NVL(F.OR_CTACLI,0) <> 0  ;

  VV_IN_SEGMBSINI  VARCHAR2(3);
  VV_SUCEPT        VARCHAR2(10);

BEGIN
  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('3.2. FNC_SEGMENT_RESTO '||PV_TABLA, SYSDATE, 'INICIADO');

    COMMIT;

  VN_NUMERR:= 2;
  VN_COUNT:= 0;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SEGMBSINI_SIN_INFORMAR');

  INSERT /*+ PARALLEL (B 8)*/ INTO BAS_MEN.SEGMBSINI_SIN_INFORMAR B
     SELECT /*+ full(a) PARALLEL (A 8)*/ DISTINCT OR_IDPERS
       FROM BAS_MEN.BASILEA A
      WHERE in_tiporeg in ('IN', '?')
        AND OR_TIPIDE NOT IN (0,2,3,4,5)
        AND OR_ENTITY in (81, 8211)
        AND OR_IDPERS NOT IN ('00-','00-000000000000','11-','12-','97-','11-000000000000','11-000000000', '95-', '05-');

  COMMIT;

  --Segmentación de personas jurídicas que no tegan segmento por personalidad incorrecta. Contagio por NIF.
  FOR CUR IN BASILEA LOOP

      VV_ROWID:= TO_CHAR(CUR.OR_IDREG);
      VN_COUNT:= VN_COUNT + 1;
      VN_NUMERR:= 3;

      UPDATE BAS_MEN.BASILEA
         SET IN_SEGMBSINI = CUR.IN_SEGMBSINI,
             IN_SEGMBS    = CUR.IN_SEGMBS,
             IN_TIPOREG   = DECODE(IN_TIPOREG, 'IN', 'SA', IN_TIPOREG)
       WHERE OR_IDREG = CUR.OR_IDREG;

      IF MOD(VN_COUNT,20000)=0 THEN

    BAS_MEN.SP_INFO_CONTROL_PROCES (PE_In_Proces =>'3.2. FNC_SEGMENT_RESTO '||PV_TABLA, PE_Estat=>'FINALIZADO', PE_NRegs_Upd=>VN_COUNT);
        COMMIT;

      END IF;

  END LOOP;

  COMMIT;

--XCG. 12/09/2022. OFEX se trata por contrato o IDPERS

  UPDATE BAS_MEN.BASILEA
     SET IN_SEGMBSINI = '106',
         IN_SEGMBS = 'Resto Minorista',
         IN_TIPOREG  = DECODE(IN_TIPOREG, 'IN', 'SA', IN_TIPOREG)
   WHERE OR_IDREG IN (SELECT  /*+ full(c) full(b) full(a) PARALLEL (c 8) PARALLEL (b 8) PARALLEL (A 8) */ DISTINCT c.or_idreg
                        FROM (SELECT /*+ PARALLEL (d 8) */ DISTINCT OR_CLUNICONTR
                                FROM BAS_MEN.basilea d
                               WHERE IN_SEGMBSINI = '107'
                                  AND or_clunicontr NOT IN (0, 999999999999999)) A,
                             BAS_MEN.basilea B,
                             BAS_MEN.basilea c
                       WHERE SUBSTR(B.OR_CODGAR,1,2) NOT IN ('EX','FI')
                         AND (B.OR_TIPOPE = 'TC'
                          OR (SUBSTR(B.OR_PROCED,1,4) = 'TARG' AND B.OR_TIPOPE = '?'))
                         AND B.OR_CLUNICONTR = A.OR_CLUNICONTR
                         --AND B.IN_TIPOREG <> 'OXE'
                         AND b.OR_CLUNICONTR = c.OR_CLUNICONTR);

  COMMIT;

  VN_NUMERR:= 3;

  UPDATE BAS_MEN.BASILEA
     SET IN_SEGMBSINI = '106',
         IN_SEGMBS = 'Resto Minorista',
         IN_TIPOREG  = DECODE(IN_TIPOREG, 'IN', 'SA', IN_TIPOREG)
   WHERE IN_SEGMBSINI = '107'
     --AND IN_TIPOREG <> 'OXE'
     AND OR_IDPERS IN (SELECT /*+ PARALLEL (A 8) */ OR_IDPERS
                         FROM BAS_MEN.basilea A
                        WHERE IN_SEGMBSINI = '107'
                          --AND IN_TIPOREG <> 'OXE'
                        GROUP BY OR_IDPERS
                       HAVING SUM(OR_DISPTO + OR_DISBLE) > 100000);

  COMMIT;
  VN_NUMERR:= 7;

  /*UPDATE BAS_MEN.BASILEA
      SET IN_SEGMBSINI = '106',
          IN_SEGMBS = 'Resto Minorista'
    WHERE IN_SEGMBSINI = '107'
      AND IN_TIPOREG = 'OXE'
      AND (OR_CTACLI, OR_NUMOFI) IN (SELECT /*+ PARALLEL (A 4)  OR_CTACLI, OR_NUMOFI
                          FROM BAS_MEN.basilea A
                         WHERE IN_SEGMBSINI = '107'
                           AND IN_TIPOREG = 'OXE'
                         GROUP BY OR_CTACLI, OR_NUMOFI
                        HAVING SUM(OR_DISPTO + OR_DISBLE) > 100000);*/

  --COMMIT;


   FOR CUR IN BASILEA_PF LOOP

      IF CUR.IN_SEGMBSINI = '019' THEN
         VV_IN_SEGMBSINI:= '019';
      ELSE
           VV_IN_SEGMBSINI:= '006';
      END IF;

      UPDATE BAS_MEN.BASILEA
         SET IN_SEGMBS0   = '201',
             IN_SEGMBSINI = VV_IN_SEGMBSINI,
             IN_SEGMBS    = 'Project Finance',
             OR_MODRAT0      = 'PF'||SUBSTR(cur.SECTOR,1,1)||cur.MODELO,
             OR_RATINT       = CUR.OR_RATINT,
             OR_PUNT0        = CUR.OR_PUNT0,
             OR_FECPUN0      = to_number(to_char(cur.or_fecha, 'YYYYMMDD')),
             OR_SITUAC0      = CUR.SITUACION,
             IN_IDCALIFIC    = CUR.IDRATING,
             in_tiporeg      = CUR.TIPOREG
       WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 17;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITS_SEGMBSINI_VARIAS_MARCAS');

  -- 201512 Sólo se modifica el IN_SEGMBS si el SEGMBS0 de CyA es '?'. Sino mantendrá el de CyA. Adicionalmente se deja de modificar el SEGMBS2
 INSERT /*+ PARALLEL(I 8)*/ INTO BAS_MEN.TITS_SEGMBSINI_VARIAS_MARCAS I
 SELECT /*+ full(Emp) full(CyA) PARALLEL (Emp 8) PARALLEL (CyA 8)*/
        Emp.OR_TITULARITAT
      , Emp.IN_SEGMBSINI, max(DECODE(CyA.IN_SEGMBS0, '?', Emp.IN_SEGMBS, CyA.IN_SEGMBS)) AS In_SegmBS
      , CyA.OR_IDREG
   FROM
      (
       SELECT DISTINCT
              BasEmp.OR_TITULARITAT
            , 'Emp'
            , BasEmp.IN_SEGMBSINI
            , BasEmp.IN_SEGMBS0
            , BasEmp.IN_SEGMBS2
            , BasEmp.IN_SEGMBS
         FROM BAS_MEN.BASILEA BasEmp
        WHERE BasEmp.FI_ELIMI1      IN('NO', 'SRABS')
          AND BasEmp.IN_SEGMBSINI   IN ('003','005','006','009','010','019','027') -- 'Empresas'
          AND BasEmp.OR_TITULARITAT <> 0
      ) Emp
      ,
      (
      SELECT  DISTINCT
             CASE
              WHEN BasCya.IN_SEGMBSINI = '002' OR BasCya.IN_SEGMBSINI = '017' THEN
                DECODE(BasCya.OR_TITUSCPCB,0,BasCya.OR_TITULARITAT,BasCya.OR_TITUSCPCB)
              ELSE BasCya.OR_TITULARITAT
             END or_titularitat
           , 'Cya' Segm
           , BasCya.OR_IDREG
           , BasCya.IN_SEGMBS0
           , BasCya.IN_SEGMBS
        FROM BAS_MEN.BASILEA BasCya
       WHERE BasCya.IN_SEGMBSINI   IN ('002','017', '101', '102') -- Cya
         AND DECODE(BasCya.OR_TITUSCPCB,0,BasCya.OR_TITULARITAT,BasCya.OR_TITUSCPCB) <> 0
      ) CyA
  WHERE Emp.OR_TITULARITAT = CyA.OR_TITULARITAT
    AND Emp.IN_SEGMBS0 = CyA.IN_SEGMBS0 (+)
    group by Emp.OR_TITULARITAT , Emp.IN_SEGMBSINI, CyA.OR_IDREG;

  COMMIT;

  MERGE /*+ full(Upd) parallel(Upd 8) */ INTO BAS_MEN.BASILEA Upd
     USING BAS_MEN.TITS_SEGMBSINI_VARIAS_MARCAS Sel
       ON (Sel.OR_IDREG = Upd.OR_IDREG)
     WHEN MATCHED THEN
        UPDATE
           SET Upd.IN_SEGMBSINI = Sel.IN_SEGMBSINI
              /* 201512: Sólo se hace el update de IN_SEGMBS si el SEGMBS0 de CyA es '?'. Se determina en la creación de la tabla TITS_SEGMBSINI_VARIAS_MARCAS.*/
             , Upd.IN_SEGMBS    = Sel.IN_SEGMBS;

   COMMIT;

  BAS_MEN.SP_INFO_CONTROL_PROCES (PE_In_Proces =>'3.2. FNC_SEGMENT_RESTO '||PV_TABLA, PE_Estat=>'FINALIZADO', PE_Estado_Final=>'OK', PE_NRegs_Upd=>VN_COUNT);
    COMMIT;

EXCEPTION

   WHEN OTHERS THEN

  VV_MENSAJE:= SUBSTR('OR_IDREG:'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,255);
  BAS_MEN.SP_INFO_CONTROL_PROCES (PE_In_Proces =>'3.2. FNC_SEGMENT_RESTO '||PV_TABLA, PE_Estat=>'FINALIZADO', PE_Estado_Final=>'KO',PE_Desc_Error=>VV_MENSAJE, PE_Num_Error=>SUBSTR('NUMERR: '||VN_NUMERR,1,255));
    COMMIT;
    RAISE;

END;

-------------------------------------------------------
-- PRINCIPAL
-------------------------------------------------------
BEGIN

  -- 201611 Se ha añadido el procedimiento renta fija que antes estaba en filto y se ha pasado aqui
  IF PV_OPC = 'SEGMENTO' THEN
    FNC_SEGMENTO;
  ELSIF PV_OPC = 'SEGMENTO_RESTO' THEN
    FNC_SEGMENT_RESTO;
  END IF;

END;

/

show errors;


/* RMR 1/07/2021
Este script incorpora a la base el desglose de registros de las participaciones
en IIC para el cálculo del Look thorugh approach */
create or replace PROCEDURE    BAS_MEN.FNC_DESGLOSE_IIC (MES_PROCESO IN NUMBER) AS

        CTE_Non_Procedimiento    CONSTANT VARCHAR2(32)               := 'FNC_DESGLOSE_IIC';
        VV_Programa              CONSTANT VARCHAR2(15)               := 'bka00006';
        VN_NumErr                NUMBER(3)                           DEFAULT 0;
        VV_Mensaje               VARCHAR2(255)                       DEFAULT '';
        VV_Proces                BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT '';

        VV_IDREG                 NUMBER(12)                          DEFAULT 0;

BEGIN

    VN_NumErr := 1;
    --
    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'INICIADO');
    commit;

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    VN_NumErr := 2;

   -- DELETE /*+ PARALLEL (a,4) */ FROM BAS_MEN.BASILEA a
    -- WHERE IN_TIPOREG IN ('IIC-LTA', 'IIC-FBA');

    --COMMIT;

    SELECT MAX(OR_IDREG)
     INTO VV_IDREG
     FROM BAS_MEN.BASILEA;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MAESTRO_IIC';

    VN_NumErr := 3;

    INSERT /*+ PARALLEL (a,4) */ INTO BAS_MEN.MAESTRO_IIC a
    SELECT /*+ PARALLEL (b,4) */ ROWNUM + VV_IDREG AS or_idreg, b.*
      FROM DCRPROP_MENSUAL.MAESTRO_IIC_SAS b;

    COMMIT;

    VN_NumErr := 4;

    INSERT /*+ PARALLEL (a, 4) */ INTO BAS_MEN.BASILEA a
         (OR_IDREG    , OR_IDPERS , OR_NIFCIF, OR_NOMPER, OR_ENTITY, OR_EPIIND, OR_CTAIND, FI_EPICON,  IN_SEGMBSINI, IN_SEGMBS, IN_METODE,  OR_CLUNICONTR, OR_DISPTO,
          OR_DISPTOCON, IN_TIPOREG, FI_TIPEXP, OR_CODGAR, OR_IDPAIS, OR_IDCNAE, OR_CODISO, OR_COISIN,  OR_TIPIDE   , FI_ELIMI1, OR_PERSON,  OR_DIVISA, OR_IDMES)
    SELECT /*+ PARALLEL (b, 4) */
          OR_IDREG    , OR_IDPERS , OR_NIFCIF, OR_NOMPER, OR_ENTITY, OR_EPIIND, OR_CTAIND, FI_EPICON,  IN_SEGMBSINI, IN_SEGMBS, IN_METODE,  OR_CLUNICONTR, OR_DISPTO,
          OR_DISPTOCON, IN_TIPOREG, FI_TIPEXP, OR_CODGAR, OR_IDPAIS, OR_IDCNAE, OR_CODISO, OR_COISIN,  OR_TIPIDE   , FI_ELIMI1, OR_PERSON,  OR_DIVISA, MES_PROCESO AS OR_IDMES
      FROM BAS_MEN.MAESTRO_IIC b;

    COMMIT;

    VN_NumErr := 90;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', 'OK');

EXCEPTION
    WHEN OTHERS THEN
    --
        -- Actualización de la tabla de control
        --
        VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
        --
        BAS_MEN.SP_INFO_CONTROL_PROCES  (VV_Proces, 'FINALIZADO', 'KO', VV_MENSAJE, VN_NumErr);
        COMMIT;
        --
        RAISE;
    --
END;

/

show errors;


create or replace PROCEDURE    BAS_MEN.BASI_SEGMENTACIO_1 IS

  -- bka00006.sql -- XBK0002M BAS_MEN - BK10MGBS13CCSEGM

    vProces             CONSTANT VARCHAR2(40)   := 'Segmentacion 1';
    vNumErr             NUMBER(2)               DEFAULT 1;
    vCodi               NUMBER(10)              DEFAULT 0;
    vDescripcio         VARCHAR2(255)           DEFAULT '';

    VV_TABLA            VARCHAR2(80):= 'BAS_MEN.BASILEA';
    VN_FProc_AAAAMMDD   NUMBER(8);   -- Ojo con la fecha del proceso.
    VN_FProc_AAAAMM     NUMBER(6); -- Ojo con la fecha del proceso.
    VD_FECPRO           DATE;
    VV_RETORNO          VARCHAR2(2) :='OK';

    v_Exis_Datos        VARCHAR2(1)     DEFAULT 'N';

BEGIN

commit;

EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_FProc_AAAAMM, VN_FProc_AAAAMMDD
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FProc_AAAAMMDD,'YYYYMMDD');

  -- Segmentación Genérica Inicial
  BAS_MEN.FNC_SEGMENT (VV_TABLA, 'SEGMENTO', VN_FProc_AAAAMMDD);
  COMMIT;

  -- Validación de existencia de datos. Si no EXISTIERAN abortará (La función realiza un raise).
  SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  -- Segmentación Resto: PJs sin segmento (por personalidad incorrecta), y Renting.
  BAS_MEN.FNC_SEGMENT (VV_TABLA, 'SEGMENTO_RESTO', VN_FProc_AAAAMMDD);
  COMMIT;

  -- RMR 1/07/2021 - Llama a la función para insertar en base el desglose de las participaciones en IIC
  BAS_MEN.FNC_DESGLOSE_IIC(VN_FProc_AAAAMM);
  COMMIT;

  --Llama a la funcion de UPDATES BASILEA
  BAS_MEN.UPDATE_PROCESO('UPDATE_PROCESO_SEGMENTO');
  COMMIT;

EXCEPTION

    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;

/

show errors;

--bka00130=====================================================================================================
Select 'bka00130' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CLIENTES_COMUNES_OFEX IS

  CTE_Nom_Procedimiento  CONSTANT VARCHAR2(32)  := 'FNC_CLIENTES_COMUNES_OFEX';
  VN_NumErr              NUMBER(3)              DEFAULT 0;
  VV_Mensaje             VARCHAR2(255)          DEFAULT '';

  VN_MESPRO              number(6);

  CURSOR OFEX_COMUNES IS
    SELECT DISTINCT e.or_idreg,c.or_titularitat, c.or_nomper, c.or_idpers, c.OR_TIPIDE, c.OR_NIFCIF, c.OR_TIPIDEIBM, c.OR_NIFCIFIBM,
                   c.OR_INDHOLDING, c.OR_IDCNAE, c.OR_IDECNO, c.OR_SEGGES, c.OR_SEGFAC, c.OR_PERSON,
                   c.OR_CLAVISO, c.OR_FECALTBLO, c.FI_MESCURA, c.IN_INDCURA, 
                   case when d.or_idpers is not null then 'Project Finance' else c.IN_SEGMBS end as IN_SEGMBS, 
                   c.IN_SEGMBSINI, c.IN_SEGMBS2, c.IN_SUCEPT,
                   c.or_modrat0, c.or_punt0, c.in_idcalific, c.or_situac0,    c.or_fecpun0, c.or_ratint, c.OR_IDPRAP,
                   C.IN_GRUP_TIPIDE, DECODE(NVL(C.IN_GRUP_IDPER,'?'), '?', C.OR_NIFCIF,C.IN_GRUP_IDPER) IN_GRUP_IDPER, C.IN_NOM_GRUP, C.IN_IDGRUPO, C.IN_VTAGRU, C.IN_VTAGRU_CONS, C.IN_ACTIVO,C.IN_ACTIVO_CONS ,
                   C.IN_EXISTENCIAS, C.IN_ACTIVO_CIR, C.IN_NUMEMP, C.IN_NIFGRUPCON,
                   c.IN_IDCALIFICREL, c.or_numpersona, c.or_puntgrup, c.OR_PESOW, c.IN_NUMEMP_CONS,
                   case when d.or_idpers is not null then '201' else '?' end as IN_SEGMBS0
      FROM BAS_MEN.BASILEA E,
           (select * from BAS_MEN.MAESTRO_OFEX_COMUNES where (or_ctacli, or_mes) in (select or_ctacli, max(or_mes) from BAS_MEN.MAESTRO_OFEX_COMUNES group by  or_ctacli)) C,
           bas_men.maestro_project_finance d 
     WHERE E.OR_ctacli = C.OR_ctacli
       AND c.or_nifcif = d.or_idpers(+)
       AND E.IN_TIPOREG IN ('OXE', 'OX', 'MMOXE');                --NAV 18/07/2019 - Añadido - 'MMOXE'

  CURSOR Cursor_OXC IS
    SELECT DISTINCT Basi.OR_IDREG, Oxc.OR_CTACLI, Oxc.OR_TITULARITAT, Basi.IN_SEGMBSINI, Basi.FI_ELIMI1
      FROM ( SELECT DISTINCT OR_CTACLI, OR_TITULARITAT
               FROM BAS_MEN.OFEX_CLIENTES_COMUNES
           )                             Oxc -- Hist. de Clientes Communes Ofex con info de Basilea
         , BAS_MEN.MAESTRO_OFEX_COMUNES  MOxc-- Hist. Maestro de Clientes Communes Ofex
         , BAS_MEN.BASILEA               Basi
         , BAS_MEN.RSK_RT_ULT_RATING     URat
     WHERE Oxc.OR_CTACLI               = MOxc.OR_CTACLI(+)
       AND MOxc.OR_CTACLI             IS NULL
       AND Basi.OR_CTACLI              = Oxc.OR_CTACLI
       AND SUBSTR(Basi.IN_TIPOREG,1,2) = 'OX'
       AND FI_ELIMI1                  IN('NO', 'SRABS')
       AND Basi.IN_SEGMBSINI          IN ('003', '005', '006', '009', '010', '019', '027', '002', '017')
       AND URat.CODTIT                 = Oxc.OR_TITULARITAT
       AND URat.SITUACION             <> 'D';

begin

    --
    -- Info. en el control del proceso del ini de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (CTE_Nom_Procedimiento, SYSDATE, 'INICIADO');

    COMMIT;

    SELECT TO_NUMBER(SUBSTR(VALPARM,1,6))
     INTO VN_MESPRO
     FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
    WHERE CODCSB = '0081'
      AND CODPARM = '0001'
      AND SECPARM = '01';

    VN_NumErr := 1;
    --
    -- Actaulización del tipo reg en BASILEA de los clientes comunes con el tipo reg. original
    --

    MERGE /*+ full(Upd) parallel(Upd 4) */
     INTO BAS_MEN.BASILEA Upd
    USING ( SELECT /*+ full(seg) parallel (seg 4)*/  seg.OR_IDREG, seg.IN_TIPOREG
              FROM BAS_MEN.SEGMENTACION seg
             WHERE IN_TIPOREG IN ('OX', 'OXE', 'MMOXE')         --NAV 18/07/2019 - Añadido - 'MMOXE'
          ) Sel
       ON (Sel.OR_IDREG = Upd.OR_IDREG)
     WHEN MATCHED THEN
     UPDATE
        SET Upd.IN_TIPOREG   = Sel.IN_TIPOREG
      WHERE Upd.IN_TIPOREG in ('OXC', 'MMOXC');                   --NAV 18/07/2019 - Añadido - 'MMOXC'

    COMMIT;

    VN_NumErr := 2;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CLIENTES_OFEX_JURIDICAS');


    insert /*+ parallel (a 4)*/ into BAS_MEN.CLIENTES_OFEX_JURIDICAS a
    SELECT /*+ parallel (bas 4)*/ OR_IDREG, OR_NUMOFI, OR_CTACLI, OR_TITULARITAT, OR_NOMPER, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM
         , OR_NIFCIFIBM, OR_INDHOLDING,OR_IDCNAE, OR_IDECNO, OR_SEGGES, OR_SEGFAC, OR_PERSON, IN_FECMORA, OR_CLAVISO, OR_FECALTBLO
         , FI_MESCURA, IN_INDCURA, IN_TIPOREG, in_segmbsini, OR_PROCED, OR_TIPOPE, IN_INDMOR, VN_MESPRO
      from BAS_MEN.basilea bas
     where (OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA', 'OFEX-LI')
        OR (OR_PROCED = 'MANUAL' AND OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)))
       AND in_segmbsini in ('003', '005', '006', '009', '010', '019', '027', '002', '017');

    COMMIT;

    VN_NumErr := 3;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CLIENTES_NO_OFEX_JURIDICAS');

    VN_NumErr := 4;

    INSERT /*+ parallel (a 4)*/ INTO  BAS_MEN.CLIENTES_NO_OFEX_JURIDICAS a
        SELECT /*+ FULL(BAS) parallel (bas 4)*/ OR_IDREG, OR_NUMOFI, OR_CTACLI, OR_TITULARITAT, OR_NOMPER, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM
             , OR_NIFCIFIBM, OR_INDHOLDING, OR_IDCNAE, OR_IDECNO, OR_SEGGES, OR_SEGFAC, OR_PERSON, IN_FECMORA, OR_CLAVISO, OR_FECALTBLO
             , FI_MESCURA, IN_INDCURA, IN_TIPOREG, in_segmbsini, OR_PROCED, FI_ELIMI1, VN_MESPRO
        from BAS_MEN.basilea bas
       WHERE NOT (OR_PROCED IN ('OFEX-GB','OFEX-FR','OFEX-MI','OFEX-CA','OFEX-LI') OR (OR_PROCED = 'MANUAL' AND OR_NUMOFI IN (800, 801, 813, 821, 825, 849, 4365)))
         AND in_segmbsini in ('003', '005', '006', '009', '010', '019', '027', '002', '017')
         AND FI_ELIMI1 IN('NO', 'SRABS')
         AND OR_TITULARITAT <> 0;

    COMMIT;

    VN_NumErr := 5;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.POSIBLES_CLIENTES_COMUNES_OFEX');

    VN_NumErr := 6;

    INSERT /*+ parallel (c 4)*/ INTO BAS_MEN.POSIBLES_CLIENTES_COMUNES_OFEX c
    SELECT /*+ parallel (a 4)*/ DISTINCT A.OR_NIFCIF, A.OR_TITULARITAT, A.OR_NOMPER, b.OR_CTACLI, B.OR_NIFCIF NIF_OFEX, B.OR_NOMPER NOMBRE_OFEX,
           B.OR_TITULARITAT TIT_OFEX, B.OR_NUMOFI, VN_MESPRO
      FROM BAS_MEN.CLIENTES_NO_OFEX_JURIDICAS A,
           BAS_MEN.CLIENTES_OFEX_JURIDICAS B
     WHERE A.OR_NIFCIF = B.OR_NIFCIF
       AND A.OR_NIFCIF <> '?';

    COMMIT;

    VN_NumErr := 7;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.POSIBLES_NOMBRES_COMUNES_OFEX');

    VN_NumErr := 8;

    INSERT INTO BAS_MEN.POSIBLES_NOMBRES_COMUNES_OFEX
    SELECT /*+ parallel (a 4)*/ DISTINCT A.OR_NIFCIF, A.OR_TITULARITAT, A.OR_NOMPER, b.OR_CTACLI, B.OR_NIFCIF NIF_OFEX, B.OR_NOMPER NOMBRE_OFEX,
           B.OR_TITULARITAT TIT_OFEX, B.OR_NUMOFI, VN_MESPRO
      FROM BAS_MEN.CLIENTES_NO_OFEX_JURIDICAS A,
           BAS_MEN.CLIENTES_OFEX_JURIDICAS B,
           BAS_MEN.OFEX_CLIENTES_COMUNES C
     WHERE TRIM(A.OR_NOMPER) = TRIM(B.OR_NOMPER)
       AND A.OR_NOMPER <> '?'
       AND A.OR_NIFCIF = C.OR_NIFCIF(+)
       AND C.OR_NIFCIF IS NULL;

    COMMIT;

    VN_NumErr := 9;
    
    Delete BAS_MEN.OFEX_CLIENTES_COMUNES 
     where OR_MES = VN_MESPRO; -- para eliminar los que se crean en el propio mes en caso de reprocesar.

    Commit;

    insert into BAS_MEN.OFEX_CLIENTES_COMUNES
    select * from dcrprop_mensual.OFEX_CLIENTES_COMUNES_sas;

    commit;

    --Maestro evolutivo en el que se insertan los nuevos clientes que puedan aparece en el cierre actual. No se borra.
    INSERT INTO BAS_MEN.OFEX_CLIENTES_COMUNES
    SELECT B.OR_CTACLI, B.NOMBRE_OFEX, B.OR_TITULARITAT, B.OR_NIFCIF, B.OR_NOMPER, VN_MESPRO
    FROM BAS_MEN.OFEX_CLIENTES_COMUNES A,
         BAS_MEN.POSIBLES_CLIENTES_COMUNES_OFEX B
    WHERE A.OR_TITULARITAT(+) = B.OR_TITULARITAT
    AND A.OR_TITULARITAT IS NULL;


    --
    COMMIT;
    --
    -- Eliminamos solo los nif¿s que se hayan encontrado en este pase y dejamos los que ya esten enriquecidos de otro anterior.
    VN_NumErr := 10;

    DELETE BAS_MEN.maestro_OFEX_COMUNES
    WHERE OR_NIFCIF IN (SELECT OR_NIFCIF FROM BAS_MEN.POSIBLES_CLIENTES_COMUNES_OFEX);

    COMMIT;

    VN_NumErr := 11;

    delete BAS_MEN.OFEX_CLIENTES_COMUNES
    where or_titularitat = 0;

    commit;

    VN_NumErr := 12;

    delete  BAS_MEN.maestro_OFEX_COMUNES
     where (or_ctacli, or_nifcif, or_titularitat) in (select or_ctacli, or_nifcif, or_titularitat
                                                        from BAS_MEN.maestro_OFEX_COMUNES
                                                       group by or_ctacli, or_nifcif, or_titularitat
                                                      having count(*) >1)
       and or_mes <> VN_MESPRO;

    COMMIT;

     VN_NumErr := 13;

    INSERT /*+ parallel (d 4)*/
      INTO BAS_MEN.MAESTRO_OFEX_COMUNES d
         ( OR_TITULARITAT, OR_CTACLI, OR_NOMPER, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, IN_TIPOREG
         , OR_INDHOLDING, OR_IDCNAE, OR_IDECNO, OR_SEGGES, OR_SEGFAC, OR_PERSON, in_fecmora, OR_CLAVISO, OR_FECALTBLO, FI_MESCURA
         , IN_INDCURA, IN_SEGMBS, IN_SEGMBSINI, IN_SEGMBS2
         , IN_SUCEPT, OR_MODRAT0, OR_PUNT0, IN_IDCALIFIC, OR_SITUAC0, OR_FECPUN0, OR_RATINT --OR_IDPRAP, JCVJCV ERR
         , IN_GRUP_TIPIDE, IN_GRUP_IDPER,  IN_NOM_GRUP, IN_IDGRUPO, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO, IN_EXISTENCIAS
         , IN_ACTIVO_CIR, IN_NUMEMP, IN_NIFGRUPCON, OR_MES, IN_IDCALIFICREL, or_numpersona, or_puntgrup, OR_PESOW, IN_ACTIVO_CONS, IN_NUMEMP_CONS
         )
    SELECT /*+ parallel (A 4) full(a) */
  DISTINCT A.OR_TITULARITAT, B.OR_CTACLI, trim(OR_NOMPER), OR_IDPERS, OR_TIPIDE, A.OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, IN_TIPOREG
         , OR_INDHOLDING, OR_IDCNAE,OR_IDECNO, OR_SEGGES, OR_SEGFAC, OR_PERSON, '?', OR_CLAVISO, OR_FECALTBLO, FI_MESCURA
         , IN_INDCURA, DECODE(A.IN_SEGMBS, 'Derechos Cobro', IN_SEGBS, A.IN_SEGMBS) IN_SEGMBS,A.IN_SEGMBSINI, IN_SEGMBS2
         , A.IN_SUCEPT, OR_MODRAT0, OR_PUNT0, IN_IDCALIFIC, OR_SITUAC0,    OR_FECPUN0, OR_RATINT --OR_IDPRAP, JCVJCV ERR
         , IN_GRUP_TIPIDE, DECODE(NVL(A.IN_GRUP_IDPER,'?'), '?', A.OR_NIFCIF,A.IN_GRUP_IDPER) IN_GRUP_IDPER, IN_NOM_GRUP, IN_IDGRUPO, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO, IN_EXISTENCIAS
         , IN_ACTIVO_CIR, IN_NUMEMP, IN_NIFGRUPCON, VN_MESPRO, a.IN_IDCALIFICREL, a.or_numpersona, or_puntgrup, OR_PESOW, IN_ACTIVO_CONS, IN_NUMEMP_CONS
      FROM BAS_MEN.BASILEA               A
         , (select distinct a.*
              from BAS_MEN.OFEX_CLIENTES_COMUNES a
             where (or_ctacli, or_mes) in (select or_ctacli, max(OR_MES)
                                             from BAS_MEN.OFEX_CLIENTES_COMUNES
                                            group by  or_ctacli)) B
         , BAS_MEN.MAESTRO_SEGMENTOS     C
     WHERE A.OR_TITULARITAT  = B.OR_TITULARITAT
       AND A.IN_SEGMBSINI    = C.IN_SEGMBSINI
       and a.in_segmbsini in ('003', '005', '006','009', '010', '019', '027', '002', '017')
       AND a.IN_TIPOREG   in ('SA', 'CESA', 'AVSA', 'MMSA', 'IIC-LTA', 'IIC-FBA')   --RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA'
       AND A.OR_TITULARITAT <> 0
       AND FI_ELIMI1      IN('NO', 'SRABS');

    commit;

    INSERT /*+ parallel (d 4)*/
      INTO BAS_MEN.MAESTRO_OFEX_COMUNES d
         ( OR_TITULARITAT, OR_CTACLI, OR_NOMPER, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, IN_TIPOREG
         , OR_INDHOLDING, OR_IDCNAE, OR_IDECNO, OR_SEGGES, OR_SEGFAC, OR_PERSON, in_fecmora, OR_CLAVISO, OR_FECALTBLO, FI_MESCURA
         , IN_INDCURA, IN_SEGMBS, IN_SEGMBSINI, IN_SEGMBS2
         , IN_SUCEPT, OR_MODRAT0, OR_PUNT0, IN_IDCALIFIC, OR_SITUAC0, OR_FECPUN0, OR_RATINT --OR_IDPRAP, JCVJCV ERR
         , IN_GRUP_TIPIDE, IN_GRUP_IDPER,  IN_NOM_GRUP, IN_IDGRUPO, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO, IN_EXISTENCIAS
         , IN_ACTIVO_CIR, IN_NUMEMP, IN_NIFGRUPCON, OR_MES, IN_IDCALIFICREL, or_numpersona, or_puntgrup, OR_PESOW, IN_ACTIVO_CONS, IN_NUMEMP_CONS
         )
    SELECT /*+ parallel (A 4) full(a) */
  DISTINCT A.OR_TITULARITAT, B.OR_CTACLI, trim(OR_NOMPER), OR_IDPERS, OR_TIPIDE, A.OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, IN_TIPOREG
         , OR_INDHOLDING, OR_IDCNAE,OR_IDECNO, OR_SEGGES, OR_SEGFAC, OR_PERSON, '?', OR_CLAVISO, OR_FECALTBLO, FI_MESCURA
         , IN_INDCURA, DECODE(A.IN_SEGMBS, 'Derechos Cobro', IN_SEGBS, A.IN_SEGMBS) IN_SEGMBS,A.IN_SEGMBSINI, IN_SEGMBS2
         , A.IN_SUCEPT, OR_MODRAT0, OR_PUNT0, IN_IDCALIFIC, OR_SITUAC0,    OR_FECPUN0, OR_RATINT --OR_IDPRAP, JCVJCV ERR
         , IN_GRUP_TIPIDE, DECODE(NVL(A.IN_GRUP_IDPER,'?'), '?', A.OR_NIFCIF,A.IN_GRUP_IDPER), IN_NOM_GRUP, IN_IDGRUPO, IN_VTAGRU, IN_VTAGRU_CONS, IN_ACTIVO, IN_EXISTENCIAS
         , a.IN_ACTIVO_CIR, a.IN_NUMEMP, a.IN_NIFGRUPCON, VN_MESPRO, a.IN_IDCALIFICREL, a.or_numpersona, or_puntgrup, OR_PESOW, a.IN_ACTIVO_CONS, a.IN_NUMEMP_CONS
      FROM BAS_MEN.BASILEA               A
         , BAS_MEN.OFEX_CLIENTES_COMUNES B
         , BAS_MEN.MAESTRO_SEGMENTOS     C
         , (select distinct or_titularitat from BAS_MEN.MAESTRO_OFEX_COMUNES) f
     WHERE A.OR_TITULARITAT  = B.OR_TITULARITAT
       AND A.IN_SEGMBSINI    = C.IN_SEGMBSINI
       and a.in_segmbsini in ('003', '005', '006','009', '010', '019', '027', '002', '017')
       AND a.IN_TIPOREG   in ('OXE', 'MMOXE')                   --NAV 18/07/2019 - Añadido - 'MMOXE'
       AND A.OR_TITULARITAT <> 0
       AND FI_ELIMI1      IN('NO', 'SRABS')
       and a.or_titularitat = f.or_titularitat(+)
       and f.or_titularitat is null;

    commit;

    VN_NumErr := 14;

    --
    -- Si no están en el Histórico para el pase (ID_MES), Actualización de los datos de Ventas a partir del Maestro de Ventas  JCVJCV 201312
    --
    MERGE /*+ parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.MAESTRO_OFEX_COMUNES Upd
          USING (
                SELECT DISTINCT
                       MOFExC.OR_NIFCIF
                     , MVentas.CIF_MATRIZ                                            AS IN_NIFGRUPCON_MVentas
                     , NVL(MVentas.VENTAS_IND,99)                                    AS IN_VTAGRU_MVentas
                     , NVL(MVentas.VENTAS_CON,99)                                    AS IN_VTAGRU_CONS_MVentas
                     , NVL(MVentas.ACTIVO,0)                                         AS IN_ACTIVO_MVentas
                     , NVL(MVentas.ACTIVO_CON,0)                                     AS IN_ACTIVO_CONS_MVentas
                     , NVL(MVentas.EXISTENCIAS,99)                                   AS IN_EXISTENCIAS_MVentas
                     , NVL(MVentas.ACTIVO_CIR,0)                                     AS IN_ACTIVO_CIR_MVentas
                     , NVL(MVentas.NUM_EMPLEADOS,0)                                  AS IN_NUMEMP_MVentas
                     , NVL(MVentas.NUM_EMPLEADOS_CON,0)                              AS IN_NUMEMP_CONS_MVentas
                 FROM BAS_MEN.MAESTRO_OFEX_COMUNES MOFExC
                    , BAS_MEN.MAESTRO_VENTAS       MVentas
                WHERE MVentas.CIF_FILIAL(+) = MOFExC.OR_NIFCIF
                  --AND MOFExC.OR_MES     <> VN_MESPRO
                 ) Sel
          ON (Upd.OR_NIFCIF = Sel.OR_NIFCIF)
          WHEN MATCHED THEN
             UPDATE
                SET Upd.IN_VTAGRU        = Sel.IN_VTAGRU_MVentas
                  , Upd.IN_VTAGRU_CONS   = Sel.IN_VTAGRU_CONS_MVentas
                  , Upd.IN_ACTIVO        = Sel.IN_ACTIVO_MVentas
                  , Upd.IN_ACTIVO_CONS   = Sel.IN_ACTIVO_CONS_MVentas
                  , Upd.IN_EXISTENCIAS   = Sel.IN_EXISTENCIAS_MVentas
                  , Upd.IN_ACTIVO_CIR    = Sel.IN_ACTIVO_CIR_MVentas
                  , Upd.IN_NUMEMP        = Sel.IN_NUMEMP_MVentas
                  , Upd.IN_NUMEMP_CONS   = Sel.IN_NUMEMP_CONS_MVentas;

    COMMIT;

     -- si no se ha encontrado ventas por nif, se asigna ventas por el nifcifibm. XCG, 20/04/17

    MERGE /*+ parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.MAESTRO_OFEX_COMUNES Upd
          USING (
                SELECT DISTINCT
                       MOFExC.OR_NIFCIF
                     , MVentas.CIF_MATRIZ                                            AS IN_NIFGRUPCON_MVentas
                     , NVL(MVentas.VENTAS_IND,99)                                    AS IN_VTAGRU_MVentas
                     , NVL(MVentas.VENTAS_CON,99)                                    AS IN_VTAGRU_CONS_MVentas
                     , NVL(MVentas.ACTIVO,0)                                         AS IN_ACTIVO_MVentas
                     , NVL(MVentas.ACTIVO_CON,0)                                     AS IN_ACTIVO_CONS_MVentas
                     , NVL(MVentas.EXISTENCIAS,99)                                   AS IN_EXISTENCIAS_MVentas
                     , NVL(MVentas.ACTIVO_CIR,0)                                     AS IN_ACTIVO_CIR_MVentas
                     , NVL(MVentas.NUM_EMPLEADOS,0)                                  AS IN_NUMEMP_MVentas
                     , NVL(MVentas.NUM_EMPLEADOS_CON,0)                              AS IN_NUMEMP_CONS_MVentas
                 FROM BAS_MEN.MAESTRO_OFEX_COMUNES MOFExC
                    , BAS_MEN.MAESTRO_VENTAS       MVentas
                WHERE MVentas.CIF_FILIAL(+) = MOFExC.OR_NIFCIFIBM
                  and IN_VTAGRU = 99
                  --AND MOFExC.OR_MES     <> VN_MESPRO
                 ) Sel
          ON (Upd.OR_NIFCIF = Sel.OR_NIFCIF)
          WHEN MATCHED THEN
             UPDATE
                SET Upd.IN_VTAGRU        = Sel.IN_VTAGRU_MVentas
                  , Upd.IN_VTAGRU_CONS   = Sel.IN_VTAGRU_CONS_MVentas
                  , Upd.IN_ACTIVO        = Sel.IN_ACTIVO_MVentas
                  , Upd.IN_ACTIVO_CONS   = Sel.IN_ACTIVO_CONS_MVentas
                  , Upd.IN_EXISTENCIAS   = Sel.IN_EXISTENCIAS_MVentas
                  , Upd.IN_ACTIVO_CIR    = Sel.IN_ACTIVO_CIR_MVentas
                  , Upd.IN_NUMEMP        = Sel.IN_NUMEMP_MVentas
                  , Upd.IN_NUMEMP_CONS   = Sel.IN_NUMEMP_CONS_MVentas;

    COMMIT;


    VN_NumErr := 15;
    DELETE  BAS_MEN.maestro_OFEX_COMUNES
     WHERE (or_ctacli, or_nifcif, or_titularitat) in ( select or_ctacli, or_nifcif, or_titularitat
                                                        from BAS_MEN.maestro_OFEX_COMUNES
                                                       group by or_ctacli, or_nifcif, or_titularitat
                                                      having count(*) >1
                                                      )
       AND or_mes <> VN_MESPRO;

    COMMIT;

    update BAS_MEN.maestro_OFEX_COMUNES
      set fi_mescura = 0,
          in_indcura = '?'
      where fi_mescura < VN_MESPRO- 100;

      commit;

  --
  -- Actualización de BBDD de los CLIENTES COMUNES OFEX.
  --
  VN_NumErr := 16;
  FOR CUR IN OFEX_COMUNES LOOP

        UPDATE BAS_MEN.BASILEA upd
            SET IN_TIPOREG      = 'OXC'               ,
                OR_TITULARITAT  = CUR.OR_TITULARITAT  ,
                OR_NOMPER       = CUR.OR_NOMPER       ,
                OR_IDPERS       = CUR.OR_IDPERS       ,
                OR_TIPIDE       = CUR.OR_TIPIDE       ,
                OR_NIFCIF       = CUR.OR_NIFCIF       ,
                OR_TIPIDEIBM    = CUR.OR_TIPIDEIBM    ,
                OR_NIFCIFIBM    = CUR.OR_NIFCIFIBM    ,
                OR_INDHOLDING   = CUR.OR_INDHOLDING   ,
                OR_IDCNAE       = CUR.OR_IDCNAE       ,
                OR_IDECNO       = CUR.OR_IDECNO       ,
                OR_SEGGES       = CUR.OR_SEGGES       ,
                OR_SEGFAC       = CUR.OR_SEGFAC       ,
                OR_PERSON       = CUR.OR_PERSON       ,
                --IN_FECMORA      = CUR.IN_FECMORA      ,
                OR_CLAVISO      = CUR.OR_CLAVISO      ,
                OR_FECALTBLO    = CUR.OR_FECALTBLO    ,
                FI_MESCURA      = CUR.FI_MESCURA      ,
                IN_INDCURA      = CUR.IN_INDCURA      ,
                IN_SEGMBS       = CUR.IN_SEGMBS       ,
                IN_SEGMBSINI    = CUR.IN_SEGMBSINI    ,
                IN_SEGMBS2      = CUR.IN_SEGMBS2      ,
                OR_MODRAT0      = cur.OR_MODRAT0      ,
                OR_PUNT0        = cur.OR_PUNT0        ,
                IN_IDCALIFIC    = cur.IN_IDCALIFIC    ,
                OR_SITUAC0      = cur.OR_SITUAC0      ,
                OR_FECPUN0      = cur.OR_FECPUN0      ,
                OR_RATINT       = cur.OR_RATINT       ,
                --OR_IDPRAP       = cur.OR_IDPRAP       ,
                IN_GRUP_TIPIDE  = CUR.IN_GRUP_TIPIDE  ,
                IN_GRUP_IDPER   = CUR.IN_GRUP_IDPER   ,
                IN_NOM_GRUP     = CUR.IN_NOM_GRUP     ,
                IN_IDGRUPO      = CUR.IN_IDGRUPO      ,
                IN_VTAGRU       = CUR.IN_VTAGRU       ,
                IN_VTAGRU_CONS  = CUR.IN_VTAGRU_CONS  ,
                IN_ACTIVO       = CUR.IN_ACTIVO       ,
                IN_ACTIVO_CONS  = CUR.IN_ACTIVO_CONS  ,
                IN_EXISTENCIAS  = CUR.IN_EXISTENCIAS  ,
                IN_ACTIVO_CIR   = CUR.IN_ACTIVO_CIR   ,
                IN_NUMEMP       = CUR.IN_NUMEMP       ,
                IN_NUMEMP_CONS  = CUR.IN_NUMEMP_CONS  ,
                IN_NIFGRUPCON   = CUR.IN_NIFGRUPCON   ,
                IN_IDCALIFICREL = cur.IN_IDCALIFICREL ,
                or_numpersona   = cur.or_numpersona   ,
                or_puntgrup     = cur.or_puntgrup     ,
                OR_PESOW        = cur.OR_PESOW        ,
                IN_SEGMBS0      = CASE WHEN CUR.IN_SEGMBS0 = '201' THEN CUR.IN_SEGMBS0 ELSE UPD.IN_SEGMBS0 END
          WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;
  --
  -- Actualización de los clientes comunes que no han llegado nunca como cliente nacional
  --
  VN_NumErr := 17;
  FOR Cur_OXC IN Cursor_OXC LOOP
        UPDATE BAS_MEN.BASILEA
            SET IN_TIPOREG      = 'OXC'
              , OR_TITULARITAT  = Cur_OXC.OR_TITULARITAT
          WHERE OR_IDREG = Cur_OXC.OR_IDREG;
  END LOOP;

  COMMIT;

  --
  -- Info. en el control del proceso del fin correcto (OK) de este
  --
  UPDATE BAS_MEN.CONTROL_PROCES  -- Fin Volcado/Copia maestros mensuales OK
     SET ESTAT       = 'FINALIZADO'
       , DATA_FIN    = SYSDATE
       , FINALITZAT  = 'OK'
   WHERE PROCES  = CTE_Nom_Procedimiento
     AND ESTAT   = 'INICIADO';

  COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización de la tabla de control
        --
         VV_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
         --
         ROLLBACK;

         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT       = 'FINALIZADO',
                DATA_FIN    = SYSDATE,
                FINALITZAT  = 'KO',
                ERROR_ORAC  = VV_MENSAJE,
                ERROR_PROG  = SUBSTR('* NUMERR: '||VN_NumErr,1,255),
                NUM_ERROR   = VN_NumErr
          WHERE PROCES  = CTE_Nom_Procedimiento
            AND ESTAT   = 'INICIADO';
        --
        COMMIT;
        --
        RAISE;
        --

END;
/

create or replace PROCEDURE       BAS_MEN.BASI_CLIENTES_COMUNES_OFEX IS

    vProces           CONSTANT VARCHAR2(40)   := 'CLIENTES COMUNES OFEX';
    vNumErr           NUMBER(2)               DEFAULT 1;
    vCodi             NUMBER(10)              DEFAULT 0;
    vDescripcio       VARCHAR2(255)           DEFAULT '';

BEGIN

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    BAS_MEN.FNC_CLIENTES_COMUNES_OFEX;

EXCEPTION

    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;

/

--bka00131=====================================================================================================
Select 'bka00131' As Compilando from dual;
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_Info_Marca_REFI ( In_Fecha_Proceso IN NUMBER )  IS


--
-- Marca Refinanciados
--
           
  Cte_Nom_Procedure CONSTANT VARCHAR2(64) := 'BAS_MEN.FNC_Info_Marca_REFI';
  
  v_Paso NUMBER(3);
  v_Proc BAS_MEN.CONTROL_PROCES.PROCES%TYPE;  
  
  v_NRegs_Refi NUMBER                                 DEFAULT 0; 
  v_NRegs_Basi NUMBER                                 DEFAULT 0;
  v_NRegs_Act  BAS_MEN.CONTROL_PROCES.REG_UPD_OK%TYPE DEFAULT 0;  

BEGIN

  
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    BAS_MEN.SP_Info_Control_Proces  (Cte_Nom_Procedure, 'INICIADO');
    --
    v_Paso := 1;
    --
    -- Contagio de la marca de refinanciados para empresas y CCAA por titularidad (o titularidad de la cuenta vista).
    --   
    v_NRegs_Act := 0;   
    --
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.AUX_CONTAGIO_REFIS');
    
    INSERT /*+ parallel(I 4)*/ INTO BAS_MEN.AUX_CONTAGIO_REFIS I 
    SELECT OR_IDREG 
      FROM 
          ( 
           SELECT /*+ parallel (basi 4) */ DISTINCT   
                  CASE
                   WHEN IN_SEGMBSINI = '002' OR IN_SEGMBSINI = '017' THEN DECODE(NVL(OR_TITUSCPCB,0), 0, NVL(OR_TITULARITAT,0), NVL(OR_TITUSCPCB,0))
                   ELSE                                                   OR_TITULARITAT
                  END AS Titularitat
                , CASE
                     WHEN IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN 'EMPRESAS'
                     WHEN IN_SEGMBSINI IN ('002','017', '101', '102')                 THEN 'CYA'
                     ELSE                                                                  'ERROR'        
                  END AS Segmento
            FROM BAS_MEN.BASILEA Basi
           WHERE IN_SEGMBSINI IN ('003','005','006','009','010','019','027', '002','017', '101', '102') 
             AND IN_REFINAN = 1
          ) Titus_Refi
          ,
          ( 
           SELECT /*+  parallel (basi2 4) */  Basi2.OR_IDREG   
                , CASE
                   WHEN IN_SEGMBSINI = '002' OR IN_SEGMBSINI = '017' THEN DECODE(NVL(OR_TITUSCPCB,0), 0, NVL(OR_TITULARITAT,0), NVL(OR_TITUSCPCB,0))
                   ELSE                                                   OR_TITULARITAT
                  END AS Titularitat
                , CASE
                     WHEN IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN 'EMPRESAS'
                     WHEN IN_SEGMBSINI IN ('002','017', '101', '102')                 THEN 'CYA'
                     ELSE                                                                  'ERROR'        
                  END AS Segmento
            FROM BAS_MEN.BASILEA Basi2
           WHERE IN_SEGMBSINI IN ('003','005','006','009','010','019','027', '002','017', '101', '102')
             AND Basi2.IN_REFINAN    = 0
          ) ID_A_Contagiar
     WHERE Titus_Refi.Titularitat   = ID_A_Contagiar.Titularitat
       AND Titus_Refi.Segmento      = ID_A_Contagiar.Segmento
       AND Titus_Refi.TITULARITAT <> 0;
       
       
     COMMIT;  

    --
    -- Actualización de BASILEA.
    --   
    v_Paso := 2;
    --  
    v_Proc := Cte_Nom_Procedure||' '||v_Paso;

    MERGE /*+ parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA Upd
    USING BAS_MEN.AUX_CONTAGIO_REFIS Sel
       ON (Upd.OR_IDREG = Sel.IDREG_Contagiar) -- Join
     WHEN MATCHED THEN
    UPDATE
       SET Upd.IN_REFINAN = 1; 

    v_NRegs_Act := SQL%ROWCOUNT;
           
    COMMIT;
             
   v_Paso := NULL;   

   BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Procedure, 'FINALIZADO', 'OK');
       
EXCEPTION 
     WHEN OTHERS THEN

         BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Procedure, 'FINALIZADO', 'KO', SQLERRM, v_Paso);
     
END; 
/



create or replace PROCEDURE       BAS_MEN.BASI_MARCA_REFI IS

    vProces         	CONSTANT VARCHAR2(40)   := 'MARCA REFI';
    vNumErr         	NUMBER(2)               DEFAULT 1;
    vCodi           	NUMBER(10)              DEFAULT 0;
    vDescripcio     	VARCHAR2(255)           DEFAULT '';
    VN_FProc_AAAAMMDD NUMBER(8);   -- Ojo con la fecha del proceso.
    VN_FProc_AAAAMM   NUMBER(6); -- Ojo con la fecha del proceso.
    VD_FECPRO     		DATE;
   
BEGIN

		EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
		
	  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM) 
	    INTO VN_FProc_AAAAMM, VN_FProc_AAAAMMDD
	    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
	   WHERE CODCSB = '0081'
	     AND CODPARM = '0001'
	     AND SECPARM = '01';

  	VD_FECPRO:= TO_DATE(VN_FProc_AAAAMMDD,'YYYYMMDD');
   
	  -- Actualización de la marca de Refinanciados 
	  BAS_MEN.FNC_Info_Marca_REFI ( VN_FProc_AAAAMM );
		
EXCEPTION 

    WHEN OTHERS THEN
        --   
        ROLLBACK;
        -- 
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        -- 
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;          
        --
        -- Devolver error al sistema.
        -- 
        RAISE;
        --
END;

/

--bka00132=====================================================================================================
Select 'bka00132' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_Info_Marca_CURA ( In_Fecha_Proceso IN NUMBER )  IS

--
-- Contagio CURA (IN_INDCURA y FI_MESCURA)
--
           
  Cte_Nom_Procedure CONSTANT VARCHAR2(64) := 'BAS_MEN.FNC_Info_Marca_CURA';
  
  v_Paso 			 BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE  DEFAULT 0; 
  v_NRegs_Ins  BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE DEFAULT 0;
  v_NRegs_Act  BAS_MEN.CONTROL_PROCES.REG_UPD_OK%TYPE DEFAULT 0;  

BEGIN

  
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    BAS_MEN.SP_Info_Control_Proces  (Cte_Nom_Procedure, 'INICIADO');
    
    v_Paso := 0;
    
    -- Marcaje de Cura para Personas Jurídicas y Comercios y autónomos (Por contrato - entidad - producto)
    
    v_Paso := 1; 
    
    MERGE /*+ full(upd) parallel(Upd 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Upd
		USING BAS_MEN.MAESTRO_PERIODO_CURA_CONTRATO Sel
		ON (    Upd.OR_CLUNICONTR = Sel.AT_NUM_CONTRATO_CLAVE_CONTRATO
		    AND Upd.OR_CLUNIPROD  = Sel.AT_CODIGO_PRODUCTO
		    AND Upd.OR_CLUNIENT   = Sel.AT_ENTIDAD_CONTRATO)
		WHEN MATCHED THEN 
		UPDATE SET Upd.IN_INDCURA = 'M',
		           Upd.FI_MESCURA = Sel.ID_MES
		 WHERE Upd.IN_SEGMBSINI IN ('103','104','106','107'); -- Empresas y CyA
		 
		COMMIT; 
		
		 
		-- Marcaje de Cura para el resto (Por nif)
		
		v_Paso := 2;
		
		MERGE /*+ full(upd) parallel(Upd 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Upd
		USING BAS_MEN.MAESTRO_PERIODO_CURA Sel
		ON (    Upd.OR_TITULARITAT = Sel.ID_TITULARITAT)
		WHEN MATCHED THEN 
		UPDATE SET Upd.IN_INDCURA = 'M',
		           Upd.FI_MESCURA = Sel.ID_MES
		 WHERE Upd.IN_SEGMBSINI NOT IN ('103','104','106','107'); -- Resto
		
		COMMIT;
		
		
		-- Marcaje de Cura para OFEX
		
		v_Paso := 3;
		
		MERGE /*+ full(upd) parallel(Upd 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Upd
		USING BAS_MEN.MAESTRO_PERIODO_CURA_OFEX Sel
		ON (Upd.OR_CTACLI = Sel.ID_NUMCTA AND 
				Upd.OR_NUMOFI = Sel.ID_NUMOFI)
		WHEN MATCHED THEN 
		UPDATE SET Upd.IN_INDCURA = 'M',
		           Upd.FI_MESCURA = Sel.MES;
		
		COMMIT;
         
    v_Paso := 4;   

    BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Procedure, 'FINALIZADO', 'OK', NULL, NULL, v_NRegs_Ins, v_NRegs_Act);
       
EXCEPTION 
     WHEN OTHERS THEN

         BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Procedure, 'FINALIZADO', 'KO', SQLERRM, v_Paso);
     
END;

/


create or replace PROCEDURE       BAS_MEN.BASI_MARCA_CURA IS

    vProces         	CONSTANT VARCHAR2(40)   := 'MARCA CURA';
    vNumErr         	NUMBER(2)               DEFAULT 1;
    vCodi           	NUMBER(10)              DEFAULT 0;
    vDescripcio     	VARCHAR2(255)           DEFAULT '';
    VN_FProc_AAAAMMDD NUMBER(8);   -- Ojo con la fecha del proceso.
    VN_FProc_AAAAMM   NUMBER(6); -- Ojo con la fecha del proceso.
    VD_FECPRO     		DATE;
    SW_MARCA_DEFAULT  VARCHAR2(4);
   
BEGIN

		EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
		
	  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM) 
	    INTO VN_FProc_AAAAMM, VN_FProc_AAAAMMDD
	    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
	   WHERE CODCSB = '0081'
	     AND CODPARM = '0001'
	     AND SECPARM = '01';
	     
	 /* RMR 06/05/2020 Añadida marca para saber si el proceso de NDOD o de CONTabilidad*/
	 BEGIN
	  SELECT VALPARM 
	    INTO SW_MARCA_DEFAULT
	    FROM BAS_MEN.parametros_proceso
	   WHERE CODCSB     = 81
       AND CODPARM    = '0002'
       AND SECPARM    = '01';
   EXCEPTION
      WHEN OTHERS THEN
         RAISE;
   END;
   
  	VD_FECPRO:= TO_DATE(VN_FProc_AAAAMMDD,'YYYYMMDD');
   
   /* RMR 06/05/2020 el contagio de cura se OMITE en los procesos bajo la NDoD, solo se haría bajo criterios de CONTabilidad*/
   IF SW_MARCA_DEFAULT = 'CONT' THEN
	   -- Actualización de la marca de Curados 
	   BAS_MEN.FNC_Info_Marca_CURA ( VN_FProc_AAAAMM );
	  
	 END IF;
		
EXCEPTION 
    WHEN OTHERS THEN
        --   
        ROLLBACK;
        -- 
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        -- 
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;          
        --
        -- Devolver error al sistema.
        -- 
        RAISE;
        --
END;

/
--bka40001=====================================================================================================
Select 'bka40001' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CONCILIACION_F1 (
    PV_TABLA       IN  VARCHAR2,
    PV_RET         OUT VARCHAR2) IS
      
    VN_NUMERR      NUMBER(3);
    VV_MENSAJE     VARCHAR2(255);
    VN_COUNT       NUMBER(9):=0;
    VV_ROWID       VARCHAR2(50);

   /* cursor para generar el campo seg_ofiex */
   /*cursor c_seg_ofiex is
     select  a.EMPRESA, a.EPIGRAF,DESC_EPI, a.COMPTE, a.DESC_COMPTE
            ,a.CONSSRCRE, a.CORRVAL,a.SEPIDE, a.DEBEBDD,a.LLEGABDD,a.BDDNOENBAL, a.TIPO_OXE
            , sum(CASE
                  when a.proc_saldos = 1 and b.tipo_oxe = 1 then
                      0
                  WHEN a.TIPO_OXE = 0 and b.tipo_oxe = 1 THEN -- Hay registos tipo_oxe
                      OFIEX+OFIEXPEN+NOBDDOFIEXPEN+OFIEXPEN_SALD+NOBDDOFIEXPEN_SALD
                  when (a.tipo_oxe = 1 and b.proc_saldos = 1)
                    or (a.tipo_oxe = 1 and b.proc_saldos = 0) then
                      OFIEXPEN+NOBDDOFIEXPEN+OFIEXPEN_SALD+NOBDDOFIEXPEN_SALD
                  when b.tipo_oxe = 0 then -- No hay registros tipo_oxe
                      OFIEX+OFIEXPEN+NOBDDOFIEXPEN+OFIEXPEN_SALD+NOBDDOFIEXPEN_SALD
                  ELSE 0
                  END) as seg_ofiex
       from BAS_MEN.conciliacion_ind_f1_tmp a
          , (select empresa, epigraf, compte, max(tipo_oxe) as tipo_oxe, max(proc_saldos) as proc_saldos
               from BAS_MEN.conciliacion_ind_f1_tmp
             group by empresa, epigraf, compte) b
      where a.empresa = b.empresa
        and a.epigraf = b.epigraf
        and a.compte  = b.compte
      --group by a.empresa, a.compte, a.epigraf
      GROUP BY  a.EMPRESA, a.EPIGRAF,DESC_EPI, a.COMPTE, a.DESC_COMPTE
               ,a.CONSSRCRE, a.CORRVAL,a.SEPIDE, a.DEBEBDD,a.LLEGABDD,a.BDDNOENBAL, a.TIPO_OXE;*/


BEGIN

    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
          VALUES ('19.1 FNC_CONCILIACION_F1 '||PV_TABLA, SYSDATE, 'INICIADO');

    COMMIT;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SRCRE_CUENTA');

    insert into BAS_MEN.MAESTRO_SRCRE_CUENTA
    select * from DCRPROP_mensual.maestro_srcre_cuenta_sas;

    commit;

    VN_NUMERR:= 1;
    VN_COUNT := 0;

-------------------------------------
-- TABLA AG_BASILEA_CONCF1
-------------------------------------

-- Se crea la tabla AG_BASILEA_CONCF1 que se utiliza como tabla previa a la de resultados de la conciliación,
-- en la que se agrupan los datos antes de comparar con el Balance Individual
-- En ella se introducen los datos de la BBDD Exposiciones, sumando y agrupan las diferentes columnas por empresa, epígrafe y cuenta.

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.AG_BASILEA_CONCF1');

    INSERT /*+ parallel (I 4) */ INTO BAS_MEN.AG_BASILEA_CONCF1 I
    (EMPRESA, EPIGRAF, COMPTE, PROC_SALDOS,SALDOBDDORI,SALDOFAIRVA, SALDOBDDINI, FONINV, OPCVEN,
    SRCRE,IDRE, CSIGNOA,CSIGNOM,CSIGNOP, CSIGNOR1, CSIGNOR2, CSIGNOX1, CSIGNOX2, CSIGNOX4,CSIGNOX5, FAIRVA, TITACT, TITACT2,BONTIT, CRSUB, LINLIQ,
    SWATIT, EQUITY,RFNEG,ACTIVOS_TITULIZADOS, AJUSTES, OFIEX, RESTO, NOENBAL,
    TOT_SEG, SEG_COMYAUT,SEG_CORPLOC, SEG_DCOB, SEG_EMP, SEG_EEFF, SEG_HV,
    SEG_OTRINST,SEG_OTRACTIV, SEG_PF, SEG_PREST, SEG_PYMEEMP, SEG_PYMEMIN, SEG_RESTMIN,
    SEG_SOB,SEG_TARJC,  SIN_SEG, NO, GAROPE, GAROFEX, TIPO_OXE)
    SELECT /*+ parallel (b 4) */ b.OR_ENTITY as EMPRESA, b.OR_EPIIND as EPIGRAF, b.OR_CTAIND as COMPTE, 0 as PROC_SALDOS,
    SUM(b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+
    decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)+ b.OR_AJUVAL+ OR_FAIRVA) as SALDOBDDORI,--SALDOBDDORI
    SUM(decode(substr(b.OR_EPIIND,1,5),'03003',b.OR_FAIRVA
                                      ,decode(fi_tipexp, 'Repos',b.OR_FAIRVA,0))), --SALDOFAIRVA
    SUM(DECODE(fi_elimi1, 'GAROPE', 0, 'GAROFEX', 0, 'GAROMX', 0, /* 07/09/2021 - NAV - añadimos FI_ELIMI1 de MExico */
    DECODE(b.FI_TIPEXP,'Repos',DECODE(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS),
    b.OR_REPOS,0,b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+
    b.OR_AJUVAL + decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)))),--SALDOBDDINI
    sum(decode(FI_ELIMI1,'FONINV',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--FONINV
    sum(decode(FI_ELIMI1,'OPCVEN',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--OPCVEN
    sum(decode(FI_ELIMI1,'SRCRE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--SRCRE
    sum(decode(FI_ELIMI1,'IDRE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--IDRE
    sum(decode(FI_ELIMI1,'CSIGNOA',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOA
    sum(decode(FI_ELIMI1,'CSIGNOM',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)) + --CSIGNOM  -- VJB 05/06/'08 + CSIGNOM2
    sum(decode(FI_ELIMI1,'CSIGNOM2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),
    sum(decode(FI_ELIMI1,'CSIGNOP',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOP
    sum(decode(FI_ELIMI1,'CSIGNOR1',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--'CIGNOR1
    sum(decode(FI_ELIMI1,'CSIGNOR2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOR2
    sum(decode(FI_ELIMI1,'CSIGNOX1',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX1
    sum(decode(FI_ELIMI1,'CSIGNOX2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX2
    sum(decode(FI_ELIMI1,'CSIGNOX4',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX4
    sum(decode(FI_ELIMI1,'CSIGNOX5',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX5
    sum(decode(FI_ELIMI1,'FAIRVA',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--FAIRVA
    sum(decode(FI_ELIMI1,'TITACT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--TITACT
    sum(decode(FI_ELIMI1,'TITACT2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--TITACT2
    sum(decode(FI_ELIMI1,'BONTIT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--BONTIT
    sum(decode(FI_ELIMI1,'CRSUB',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CRSUB
    sum(decode(FI_ELIMI1,'LINLIQ',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--LINLIQ
    sum(decode(FI_ELIMI1,'SWATIT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)), --SWATIT
    sum(decode(FI_ELIMI1,'EQUITY',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--EQUITY
    sum(decode(FI_ELIMI1,'RFNEG',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),
    SUM(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',DECODE(UPPER(IN_ITITSN),'SI',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)) as Activos_titulizados, --Activos titulizados
    0 as Ajustes, --Ajustes
    SUM(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',DECODE(UPPER(IN_ITITSN),'SI',0,decode(IN_TIPOREG ,
    'SX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'DX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'MMOXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OXC',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'MMOXC',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'PX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'RX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as OFIEX,--OFIEX
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',DECODE(UPPER(IN_ITITSN),'SI',0,decode(IN_TIPOREG ,'OX',0, 'OXE',0, 'MMOXE', 0, 'OXC', 0, 'MMOXC', 0, 'PX',0,'RX',0,'SX',0,'DX',0,
    decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)))),0)) as RESTO,--RESTO
    sum(decode(FI_ELIMI1,'NOENBALANCE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--NOENBALANCE
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS))),0)) as TOT_SEG,-- TOT_SEG
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS,'Comercios y Autónomos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_COMYAUT,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Corporaciones Locales',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_CORPLOC,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Derechos Cobro',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_DCOB,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(decode(IN_SEGMBS,'Pyme Empresas','Empresas','Pyme Minoristas', 'Empresas',IN_SEGMBS), 'Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) SEG_EMP,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Entidades Financieras',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_EEFF,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Préstamos Hipotecarios',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_HV,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Otras Instituciones',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_OTRINST,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Otros Activos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_OTRACTIV,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO', decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS0,
    '201',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    '203',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    '204',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_PF, --SEGMENTO pf/re/of
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Préstamos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_PREST,
    0 as SEG_PYMEEMP,
    0 as SEG_PYMEMIN,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Resto Minorista',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,decode(b.fi_tipexp,'Repos',0,b.OR_FAIRVA))*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_RESTMIN,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Soberanos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_SOB,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, 'Tarjetas Crédito',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SEG_TARJC,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(IN_TIPOREG ,'OX',0,decode(IN_SEGMBS, '?',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as SIN_SEG,
    sum(decode(decode(fi_elimi1,'NETTING','NO','SRABS','NO', 'SOBFASEADO', 'NO',FI_ELIMI1),'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--NO
    /*sum(decode(FI_ELIMI1,'GAROPE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)), --GAROPE*/
    sum(case when FI_ELIMI1 in ('GAROPE', 'GAROMX') THEN
                decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
                decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS))
             else 0
        end), --GAROPE
    sum(decode(FI_ELIMI1,'GAROFEX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)), --GAROFEX
    0-- TIPO_OXE
    FROM BAS_MEN.BASILEA b
    where or_entity in (81,8211)
    and in_tiporeg in ('SA', 'AVSA', 'MMSA', 'CESA', 'IN', 'OX', 'PX', 'RX', 'OXE', 'OXC', 'MMOXC', 'MMOXE', 'IIC-LTA', 'IIC-FBA') --RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA'
    /*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
    --and fi_elimi1 <> 'ACCBS'
    and fi_elimi1 NOT IN ('ACCBS', 'STSORI') --FIN
    and OR_CTAIND <> 9999999999999  /* 16/02/2021 - NAV - Descartamos este cuanta individual */
    GROUP BY b.or_entity, b.or_epiind, b.or_ctaind, 0, 0;

    COMMIT;

    VN_NUMERR:= 6;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONCILIACION_IND_F1_TMP');

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F1_TMP
      (EMPRESA, EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE, PROC_SALDOS,SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI,   --VJB 070905 se añade el epígrafe homogeneo
       DEBEBDD, LLEGABDD ,NOENBAL, IDRE, CSIGNOA, CSIGNOM, CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1,
       CSIGNOX2,CSIGNOX4,CSIGNOX5,TITACT, FAIRVA, TITACT2, BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG, FONINV, OPCVEN,
       SRCRE, OFIEX, EQUITY,AJUSTES,ACTIVOS_TITULIZADOS,RESTO,TOT_SEG,SEG_COMYAUT,
       SEG_CORPLOC, SEG_DCOB,SEG_EMP,SEG_EEFF,SEG_HV,SEG_OTRINST,  SEG_OTRACTIV,
       SEG_PF,SEG_PREST,SEG_PYMEEMP,SEG_PYMEMIN,SEG_RESTMIN,SEG_SOB,SEG_TARJC,SIN_SEG,NO,GAROPE, GAROFEX, TIPO_OXE)
    SELECT a.EMPRESA, a.EPIGRAF,a.DESCRIPCIO, a.COMPTE,A.NOM, NVL(PROC_SALDOS,0),
      /*NVL(-1*a.SALDO,0)*/DECODE(DECODE(substr(A.EPIGRAF,1,8),'02002006','REPOS'
                                                              ,'02003001','REPOS'
                                                                        ,decode(substr(A.EPIGRAF,1,11),'02004002004','REPOS'
                                                                                                      ,'02004004004','REPOS','?')),'REPOS',NVL(a.SALDO,0),NVL(-1*a.SALDO,0)) SALDOBAL,
      NVL(b.SALDOBDDORI,0),NVL(b.SALDOFAIRVA,0),NVL(b.SALDOBDDINI,0),
      DECODE (a.compte,0,0,1),DECODE(b.empresa,NULL,0,1), NVL(b.NOENBAL,0), NVL(B.IDRE,0),
      NVL(b.CSIGNOA,0),NVL(b.CSIGNOM,0),NVL(b.CSIGNOP,0), NVL(b.CSIGNOR1,0), NVL(b.CSIGNOR2,0), NVL(b.CSIGNOX1,0), NVL(b.CSIGNOX2,0),
      NVL(b.CSIGNOX4,0),NVL(b.CSIGNOX5,0),NVL(b.TITACT,0), NVL(b.FAIRVA,0),NVL(b.TITACT2,0), NVL(b.BONTIT,0),
      NVL(b.CRSUB,0), NVL(b.LINLIQ,0), NVL(b.SWATIT,0),NVL(b.RFNEG,0),NVL(b.FONINV,0), NVl(b.OPCVEN,0),
      NVL(b.SRCRE,0), NVL(b.OFIEX,0), NVL(b.EQUITY,0),NVL(b.AJUSTES,0), NVL(b.ACTIVOS_TITULIZADOS,0),
      NVL(b.RESTO,0),NVL(b.TOT_SEG,0),NVL(b.SEG_COMYAUT,0), NVL(b.SEG_CORPLOC,0), NVL(b.SEG_DCOB,0), NVL(b.SEG_EMP,0), NVL(b.SEG_EEFF,0),
      NVL(b.SEG_HV,0), NVL(b.SEG_OTRINST,0),   NVL(SEG_OTRACTIV,0), NVL(b.SEG_PF,0), NVL(b.SEG_PREST,0), NVL(b.SEG_PYMEEMP,0),
      NVL(b.SEG_PYMEMIN,0), NVL(b.SEG_RESTMIN,0),NVL(b.SEG_SOB,0), NVL(b.SEG_TARJC,0),NVL(b.SIN_SEG,0),NVL(b.NO,0), NVL(B.GAROPE,0), NVL(B.GAROFEX,0),
      NVL(TIPO_OXE,0)
       FROM BAS_MEN.AG_BASILEA_CONCF1 b,
            --BAS_MEN.balance_individual a
          ( select EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM, SUM(SALDO) AS SALDO
              from BAS_MEN.balance_individual
             group by EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM ) a
     where a.empresa = b.empresa(+)
       and a.compte  = b.compte(+)
       AND a.epigraf = b.epigraf(+)
       and (a.epigraf like '010%' or  a.epigraf like '020%' or a.epigraf like '030%')
       and a.epigraf not in ('030010100000000000','030020100000000000','030050030010100000')
       and a.compte<>0;

    COMMIT;

    VN_NUMERR:= 8;
---------------------------------------------------------------------------------------------------------------------------------------------

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F1_TMP
      (EMPRESA, EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE, PROC_SALDOS,
       SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI,
       DEBEBDD, LLEGABDD,  BDDNOENBAL,NOENBAL, IDRE,CSIGNOA,CSIGNOM,CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1,CSIGNOX2,
       CSIGNOX4,CSIGNOX5,TITACT,FAIRVA,TITACT2,BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG,FONINV,OPCVEN,
       SRCRE,OFIEX,EQUITY,AJUSTES,ACTIVOS_TITULIZADOS,RESTO,TOT_SEG,SEG_COMYAUT, SEG_CORPLOC, SEG_DCOB,SEG_EMP,SEG_EEFF,SEG_HV,
       SEG_OTRINST, SEG_OTRACTIV,SEG_PF,SEG_PREST,SEG_PYMEEMP,SEG_PYMEMIN,
       SEG_RESTMIN,SEG_SOB,SEG_TARJC,SIN_SEG, NO, GAROPE, GAROFEX, TIPO_OXE)
    SELECT b.empresa, b.epigraf,a.DESCRIPCIO,b.COMPTE,a.NOM, NVL(PROC_SALDOS,0),
       /*NVL(-1*a.SALDO,0)*/DECODE(DECODE(substr(A.EPIGRAF,1,8),'02002006','REPOS'
                                                               ,'02003001','REPOS'
                                                                         ,decode(substr(A.EPIGRAF,1,11),'02004002004','REPOS'
                                                                                                       ,'02004004004','REPOS','?')),'REPOS',NVL(a.SALDO,0),NVL(-1*a.SALDO,0)),
       NVL(b.SALDOBDDORI,0),NVL(b.SALDOFAIRVA,0),NVL(b.SALDOBDDINI,0),DECODE (b.compte,0,0,1),1,1, NVL(b.NOENBAL,0), NVL(B.IDRE,0), NVL(b.CSIGNOA,0),NVL(b.CSIGNOM,0),NVL(b.CSIGNOP,0),
       NVL(b.CSIGNOR1,0),NVL(b.CSIGNOR2,0),NVL(b.CSIGNOX1,0),NVL(b.CSIGNOX2,0),NVL(b.CSIGNOX4,0),NVL(b.CSIGNOX5,0),NVL(b.TITACT,0),NVL(b.FAIRVA,0),
       NVL(b.TITACT2,0), NVL(b.BONTIT,0),NVL(b.CRSUB,0), NVL(b.LINLIQ,0),
       NVL(b.SWATIT,0),NVL(b.RFNEG,0),NVL(b.FONINV,0),NVL(b.OPCVEN,0),
       NVL(b.SRCRE,0),NVL(b.OFIEX,0),NVL(b.EQUITY,0),NVL(b.AJUSTES,0),NVL(b.ACTIVOS_TITULIZADOS,0),
       NVL(b.RESTO,0),NVL(b.TOT_SEG,0), NVL(b.SEG_COMYAUT,0),NVL(b.SEG_CORPLOC,0), NVL(b.SEG_DCOB,0), NVL(b.SEG_EMP,0),NVL(b.SEG_EEFF,0),NVL(b.SEG_HV,0),
       NVL(b.SEG_OTRINST,0), NVL(SEG_OTRACTIV,0), NVL(b.SEG_PF,0), NVL(b.SEG_PREST,0), NVL(b.SEG_PYMEEMP,0),
       NVL(b.SEG_PYMEMIN,0), NVL(b.SEG_RESTMIN,0),NVL(b.SEG_SOB,0), NVL(b.SEG_TARJC,0),NVL(b.SIN_SEG,0),
       NVL(b.NO,0), NVL(B.GAROPE,0), NVL(B.GAROFEX,0), NVL(TIPO_OXE,0)
      FROM BAS_MEN.AG_BASILEA_CONCF1 b,
           --BAS_MEN.balance_individual a
          ( select EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM, SUM(SALDO) AS SALDO
              from BAS_MEN.balance_individual
             group by EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM ) a
     where b.empresa = a.empresa(+)
       and b.compte  = a.compte(+)
       AND b.epigraf = a.epigraf(+)
       AND a.empresa is null;

    COMMIT;

    VN_NUMERR:= 10;

--Se marcan como sin riesgo de crédito (CONSCRE=1) y como no necesario que lleguen a la base de datos (DEBEBDD=0) las cuentas encontradas
--en MAESTRO_SRCRE_CUENTA_CONC
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP a
    set a.CONSSRCRE =1,
        a.DEBEBDD =0
    WHERE a.COMPTE IN (SELECT distinct b.OR_CTAIND FROM BAS_MEN.maestro_srcre_cuenta b);

    commit;

    VN_NUMERR:= 12;

--Se marcan como sin riesgo de crédito (CONSCRE=1) y como no necesario que lleguen a la base de datos (DEBEBDD=0) los epígrafes encontrados
--en MAESTRO_SRCRE_EPIGRAFE.
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP a
    set a.CONSSRCRE =1,
        a.DEBEBDD =0
    WHERE a.EPIGRAF IN (SELECT b.OR_EPIIND FROM BAS_MEN.maestro_srcre_epigrafe b WHERE a.EPIGRAF=b.OR_EPIIND);

    COMMIT;

--Se marcan como correcciones de valor (CORRVAL=1) y como no necesario que lleguen a la base de datos (DEBEBDD=0) los epígrafes encontrados
--en MAESTRO_CORREC_VALOR.
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP a
    set a.CORRVAL=1,
        a.DEBEBDD =0
    WHERE
    a.EPIGRAF IN (SELECT b.OR_EPIIND FROM
    BAS_MEN.maestro_CORREC_VALOR b
    WHERE a.EPIGRAF=b.OR_EPIIND);

    VN_NUMERR:= 20;

--vjb 20071113 Se marcan como SEPIDE=1 los epígrafes encontrados en MAESTRO_EPS_SE_PIDE
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP a
    set a.SEPIDE=1
    WHERE a.EPIGRAF IN (SELECT b.EPIGRAF FROM
    BAS_MEN.MAESTRO_EPS_SEPIDE b
    WHERE a.EPIGRAF=b.EPIGRAF
    AND SEPIDE=1);

    COMMIT;

-- Actualiza el campo DEBEBDD. El campo se inicializa a 1. Se establece a 0 (no deben llegar) para aquellas cuentas sin riesgo de crédito o que
--son correcciones de valor o que no se piden.
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP a
    set a.DEBEBDD=1;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP a
    set a.DEBEBDD=0
    WHERE
    COMPTE=0 OR CONSSRCRE=1 OR CORRVAL=1 OR SEPIDE=0;

    COMMIT;

    VN_NUMERR:= 22;

--Se establecen a 0 los campos Equity y segmento Equity para las correcciones de valor.
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
    SET EQUITY=0
    WHERE CORRVAL=1;

    COMMIT;

    VN_NUMERR:= 24;

/* INICIALIZA A 0 EL SALDO DEL BALANCE PARA LOS REGISTROS DUPLICADOS POR EMPRESA, CUENTA, EPÍGRAFE QUE TENGAN PROCEDENCIA SALDOS */
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       SET SALDOBAL = 0
     WHERE (EMPRESA,EPIGRAF,COMPTE) IN (SELECT EMPRESA, EPIGRAF, COMPTE
                                          FROM BAS_MEN.AG_BASILEA_CONCF1
                                      GROUP BY EMPRESA, EPIGRAF, COMPTE
                                      HAVING COUNT(*) > 1)
       AND PROC_SALDOS = 1;

    COMMIT;

--Cálculo de los campos de ajustes, ofiex y resto pendientes (tanto los que llegan a la base de datos como los que no)
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
    SET
    AJUSTESPEN=NVL(DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,DECODE(AJUSTES,0,0,(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+
               CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+ CSIGNOX2+ CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT
               + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+ RESTO))/*,0*/),0),0),0),0),0)
    , OFIEXPEN=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
               DECODE(AJUSTES,0,DECODE(OFIEX,0,DECODE(GAROFEX,0,0,(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
               CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
               OFIEX + RESTO))),(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
               CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
               OFIEX + RESTO))),0),0),0),0),0)
    , RESTOPEN=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
               DECODE(AJUSTES,0,
               DECODE(OFIEX,0,(SALDOBAL - (RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+ CSIGNOX1+ CSIGNOX2
               +CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+ BONTIT+ CRSUB+ LINLIQ+ SWATIT+ EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+
               RESTO+AJUSTESPEN+OFIEXPEN)) ,0) ,0) ,0) ,0) ,0) ,0)
    WHERE PROC_SALDOS <> 1;

    COMMIT;

    VN_NUMERR:= 28;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
    SET
    AJUSTESPEN_SALD=NVL(DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,DECODE(AJUSTES,0,0,(/*SALDOBAL-*/(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+
                    CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+ CSIGNOX2+ CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT
                    + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+ RESTO))/*,0*/),0),0),0),0),0)
    , OFIEXPEN_SALD=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
                    DECODE(AJUSTES,0,DECODE(OFIEX,0,DECODE(GAROFEX,0,0,(/*SALDOBAL-*/(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
                    CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
                    OFIEX+ RESTO))),((RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
                    CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
                    OFIEX+ RESTO))),0),0),0),0),0)
    , RESTOPEN_SALD=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
                    DECODE(AJUSTES,0,
                    DECODE(OFIEX,0,(/*SALDOBAL - */(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+ CSIGNOX1+ CSIGNOX2
                    +CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+ BONTIT+ CRSUB+ LINLIQ+ SWATIT+ EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+
                    RESTO+AJUSTESPEN+OFIEXPEN)) ,0) ,0) ,0) ,0) ,0) ,0)
    WHERE PROC_SALDOS = 1;

    COMMIT;

    VN_NUMERR:= 30;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       set NOBDDAJUSTESPEN=SALDOBAL
     WHERE DEBEBDD =1
       AND LLEGABDD=0
       AND (SUBSTR(EPIGRAF,1,8)  IN ('01001004','01002007','01003002','01005008') OR
            SUBSTR(EPIGRAF,1,11) IN ('01004001006','01004002009','01004003003','01004004009','01012001002','01012002002','01012003002','01015001002',
                                     '01015002002','01015003002','01015004002','01016002002','01019001002'))
       AND PROC_SALDOS <> 1;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       set NOBDDAJUSTESPEN_SALD=SALDOBAL
     WHERE DEBEBDD =1
       AND LLEGABDD=0
       AND (SUBSTR(EPIGRAF,1,8)  IN ('01001004','01002007','01003002','01005008') OR
            SUBSTR(EPIGRAF,1,11) IN ('01004001006','01004002009','01004003003','01004004009','01012001002','01012002002','01012003002','01015001002',
                                     '01015002002','01015003002','01015004002','01016002002','01019001002'))
       AND PROC_SALDOS = 1;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       set NOBDDOFIEXPEN=SALDOBAL
     WHERE (DEBEBDD =1 AND LLEGABDD=0)
       AND COMPTE NOT IN(SELECT COMPTE
                           FROM BAS_MEN.CONCILIACION_IND_F1_TMP
                          WHERE LENGTH(COMPTE) = 8
                         GROUP BY COMPTE
                         HAVING SUM(NOBDDAJUSTESPEN) <> 0)
       AND LENGTH(COMPTE) = 8
       AND EMPRESA in (81, 42)
       AND EPIGRAF NOT LIKE '0100500%'
       AND PROC_SALDOS <> 1;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       set NOBDDOFIEXPEN_SALD=SALDOBAL
     WHERE (DEBEBDD =1 AND LLEGABDD=0)
       AND COMPTE NOT IN(SELECT COMPTE
                           FROM BAS_MEN.CONCILIACION_IND_F1_TMP
                          WHERE LENGTH(COMPTE) = 8
                         GROUP BY COMPTE
                         HAVING SUM(NOBDDAJUSTESPEN_SALD) <> 0)
       AND LENGTH(COMPTE) = 8
       AND EMPRESA in (81, 42)
       AND EPIGRAF NOT LIKE '0100500%'
       AND PROC_SALDOS = 1;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       set NOBDDRESTOPEN=SALDOBAL-NOBDDAJUSTESPEN-NOBDDOFIEXPEN
     WHERE (DEBEBDD =1 AND LLEGABDD=0)
       AND PROC_SALDOS <> 1;

    COMMIT;
    VN_NUMERR:= 35;

/* INICIALIZA A 0 EL SALDO DEL BALANCE PARA LOS REGISTROS DUPLICADOS POR EMPRESA, CUENTA, EPÍGRAFE QUE TENGAN PROCEDENCIA SALDOS */
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       SET SALDOBAL = 0
     WHERE (EMPRESA,EPIGRAF,COMPTE) IN (SELECT EMPRESA, EPIGRAF, COMPTE
                                          FROM BAS_MEN.AG_BASILEA_CONCF1
                                        GROUP BY EMPRESA, EPIGRAF, COMPTE
                                        HAVING COUNT(*) > 1)
       AND PROC_SALDOS = 1;

    COMMIT;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       set NOBDDRESTOPEN_SALD=SALDOBAL-NOBDDAJUSTESPEN_sald-NOBDDOFIEXPEN_sald
     WHERE (DEBEBDD =1 AND LLEGABDD=0)
       AND PROC_SALDOS = 1;

    COMMIT;

    VN_NUMERR:= 40;

    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP
       SET  --SALDOBAL = DECODE(BDDNOENBAL,1,SALDOBAL,0)
           /*,*/SALDOBDDORI          = 0
           ,SALDOFAIRVA          = 0
           ,SALDOBDDINI          = 0
           ,NOENBAL              = 0
           ,IDRE                 = 0
           ,CSIGNOA              = 0
           ,CSIGNOM              = 0
           ,CSIGNOP              = 0
           ,CSIGNOR1             = 0
           ,CSIGNOR2             = 0
           ,CSIGNOX1             = 0
           ,CSIGNOX2             = 0
           ,CSIGNOX4             = 0
           ,CSIGNOX5             = 0
           ,TITACT               = 0
           ,FAIRVA               = 0
           ,TITACT2              = 0
           ,BONTIT               = 0
           ,CRSUB                = 0
           ,LINLIQ               = 0
           ,SWATIT               = 0
           ,RFNEG                = 0
           ,FONINV               = 0
           ,OPCVEN               = 0
           ,SRCRE                = 0
           ,EQUITY               = 0
           ,ACTIVOS_TITULIZADOS  = 0
           ,AJUSTES              = 0
           ,OFIEX                = 0
           ,RESTO                = 0
           ,AJUSTESPEN           = DECODE(AJUSTESPEN_SALD,0,0,SALDOBAL - AJUSTESPEN_SALD)
           ,OFIEXPEN             = DECODE(OFIEXPEN_SALD,0,0,SALDOBAL - OFIEXPEN_SALD)
           ,RESTOPEN             = DECODE(RESTOPEN_SALD,0,0,SALDOBAL - RESTOPEN_SALD)
           ,NOBDDAJUSTESPEN      = DECODE(NOBDDAJUSTESPEN_SALD,0,0,SALDOBAL - NOBDDAJUSTESPEN_SALD)
           ,NOBDDOFIEXPEN        = DECODE(NOBDDOFIEXPEN_SALD,0,0,SALDOBAL - NOBDDOFIEXPEN_SALD)
           ,NOBDDRESTOPEN        = DECODE(NOBDDRESTOPEN_SALD,0,0,SALDOBAL - NOBDDRESTOPEN_SALD + IDRE)
           ,SRCREGLOB            = 0
           ,IMPCORRVAL           = 0
           ,IMPRCNOSEPIDE        = 0
           ,TOT_SEG              = 0
           ,SEG_COMYAUT          = 0
           ,SEG_CORPLOC          = 0
           ,SEG_DCOB             = 0
           ,SEG_EMP              = 0
           ,SEG_EEFF             = 0
           ,SEG_HV               = 0
           ,SEG_OTRINST          = 0
           ,SEG_OTRACTIV         = 0
           ,SEG_PF               = 0
           ,SEG_PREST            = 0
           ,SEG_PYMEEMP          = 0
           ,SEG_PYMEMIN          = 0
           ,SEG_RESTMIN          = 0
           ,SEG_SOB              = 0
           ,SEG_TARJC            = 0
           ,SIN_SEG              = 0
           ,SEG_OFIEX            = 0
           ,SEG_SINASIG          = 0
           ,NO                   = 0
           ,GAROPE               = 0
           ,GAROFEX                             = 0
           --,LLEGABDD             = 0
     WHERE PROC_SALDOS = 1;

    COMMIT;

    VN_NUMERR:= 42;

/* reagrupación de la información para eliminar el campo de procedencia saldos de la tabla */
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONCILIACION_IND_F1_TMP_2');

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F1_TMP_2
    (EMPRESA,EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE,SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI,CONSSRCRE,CORRVAL,SEPIDE,DEBEBDD,LLEGABDD,BDDNOENBAL,NOENBAL,IDRE,CSIGNOA
    ,CSIGNOM,CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1,CSIGNOX2,CSIGNOX4,CSIGNOX5,TITACT,FAIRVA,TITACT2
    ,BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG,FONINV,OPCVEN,SRCRE,EQUITY,ACTIVOS_TITULIZADOS,AJUSTES,OFIEX,RESTO
    ,AJUSTESPEN,OFIEXPEN,RESTOPEN,AJUSTESPEN_SALD,OFIEXPEN_SALD,RESTOPEN_SALD,NOBDDAJUSTESPEN,NOBDDOFIEXPEN
    ,NOBDDRESTOPEN,NOBDDAJUSTESPEN_SALD,NOBDDOFIEXPEN_SALD,NOBDDRESTOPEN_SALD,SRCREGLOB,IMPCORRVAL,IMPRCNOSEPIDE
    ,TOT_SEG,SEG_COMYAUT,SEG_CORPLOC,SEG_DCOB,SEG_EMP,SEG_EEFF,SEG_HV,SEG_OTRINST,SEG_OTRACTIV,SEG_PF
    ,SEG_PREST,SEG_PYMEEMP,SEG_PYMEMIN,SEG_RESTMIN,SEG_SOB,SEG_TARJC,SIN_SEG,SEG_OFIEX,SEG_SINASIG,NO,GAROPE,GAROFEX
    , TIPO_OXE)
    (SELECT
     EMPRESA
    ,EPIGRAF
    ,DESC_EPI
    ,COMPTE
    ,DESC_COMPTE
    ,SUM(SALDOBAL)
    ,SUM(SALDOBDDORI)
    ,SUM(SALDOFAIRVA)
    ,SUM(SALDOBDDINI)
    ,CONSSRCRE
    ,CORRVAL
    ,SEPIDE
    ,DEBEBDD
    ,LLEGABDD
    ,BDDNOENBAL
    ,SUM(NOENBAL)
    ,SUM(IDRE)
    ,SUM(CSIGNOA)
    ,SUM(CSIGNOM)
    ,SUM(CSIGNOP)
    ,SUM(CSIGNOR1)
    ,SUM(CSIGNOR2)
    ,SUM(CSIGNOX1)
    ,SUM(CSIGNOX2)
    ,SUM(CSIGNOX4)
    ,SUM(CSIGNOX5)
    ,SUM(TITACT)
    ,SUM(FAIRVA)
    ,SUM(TITACT2)
    ,SUM(BONTIT)
    ,SUM(CRSUB)
    ,SUM(LINLIQ)
    ,SUM(SWATIT)
    ,SUM(RFNEG)
    ,SUM(FONINV)
    ,SUM(OPCVEN)
    ,SUM(SRCRE)
    ,SUM(EQUITY)
    ,SUM(ACTIVOS_TITULIZADOS)
    ,SUM(AJUSTES)
    ,SUM(OFIEX)
    ,SUM(RESTO)
    ,SUM(AJUSTESPEN)
    ,SUM(NVL(OFIEXPEN,0))
    ,SUM(RESTOPEN)
    ,SUM(AJUSTESPEN_SALD)
    ,SUM(OFIEXPEN_SALD)
    ,SUM(RESTOPEN_SALD)
    ,SUM(NOBDDAJUSTESPEN)
    ,SUM(NOBDDOFIEXPEN)
    ,SUM(NOBDDRESTOPEN)
    ,SUM(NOBDDAJUSTESPEN_SALD)
    ,SUM(NOBDDOFIEXPEN_SALD)
    ,SUM(NOBDDRESTOPEN_SALD)
    ,SUM(SRCREGLOB)
    ,SUM(IMPCORRVAL)
    ,SUM(IMPRCNOSEPIDE)
    ,SUM(TOT_SEG)
    ,SUM(SEG_COMYAUT)
    ,SUM(SEG_CORPLOC)
    ,SUM(SEG_DCOB)
    ,SUM(SEG_EMP)
    ,SUM(SEG_EEFF)
    ,SUM(SEG_HV)
    ,SUM(SEG_OTRINST)
    ,SUM(SEG_OTRACTIV)
    ,SUM(SEG_PF)
    ,SUM(SEG_PREST)
    ,SUM(SEG_PYMEEMP)
    ,SUM(SEG_PYMEMIN)
    ,SUM(SEG_RESTMIN)
    ,SUM(SEG_SOB)
    ,SUM(SEG_TARJC)
    ,SUM(SIN_SEG)
    ,SUM(SEG_OFIEX)
    ,SUM(SEG_SINASIG)
    ,SUM(NO)
    ,SUM(GAROPE)
    ,SUM(GAROFEX)
    ,TIPO_OXE
    FROM BAS_MEN.CONCILIACION_IND_F1_TMP
    GROUP BY  EMPRESA,EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE
             ,CONSSRCRE,CORRVAL,SEPIDE,DEBEBDD,LLEGABDD,BDDNOENBAL, TIPO_OXE);

    COMMIT;

    VN_NUMERR:= 44;

--Cálculo de los campos SIn riesgo de crédito global, correcciones de valor, segmento Ofiex, segmento sin asignar e importe que no se pide.
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP_2
    set SRCREGLOB=DECODE(CONSSRCRE,1,SALDOBAL,RFNEG+FONINV+ OPCVEN+ SRCRE),
    IMPCORRVAL=DECODE(CORRVAL,1,SALDOBAL,0),
    /*SEG_OFIEX=CASE
              WHEN TIPO_OXE = 0 THEN
                  OFIEX+OFIEXPEN+NOBDDOFIEXPEN+OFIEXPEN_SALD+NOBDDOFIEXPEN_SALD
              ELSE 0
              END,*/
    SEG_SINASIG=AJUSTES+AJUSTESPEN+RESTOPEN+NOBDDAJUSTESPEN+NOBDDRESTOPEN+AJUSTESPEN_SALD+RESTOPEN_SALD+NOBDDAJUSTESPEN_SALD+NOBDDRESTOPEN_SALD,
     IMPRCNOSEPIDE=DECODE(CORRVAL,1,0,DECODE(SEPIDE,0,DECODE(CONSSRCRE,0,SALDOBAL,0),0));

/* calculo de la columan segofiex */
/*for cur in c_seg_ofiex loop

    update BAS_MEN.CONCILIACION_IND_F1_TMP_2
       set seg_ofiex   = cur.seg_ofiex
     where EMPRESA     = cur.EMPRESA
       and EPIGRAF     = cur.EPIGRAF
       and DESC_EPI    = cur.DESC_EPI
       and COMPTE      = cur.COMPTE
       and DESC_COMPTE = cur.DESC_COMPTE
       and CONSSRCRE   = cur.CONSSRCRE
       and CORRVAL     = cur.CORRVAL
       and SEPIDE      = cur.SEPIDE
       and DEBEBDD     = cur.DEBEBDD
       and LLEGABDD    = cur.LLEGABDD
       and BDDNOENBAL  = cur.BDDNOENBAL
       and TIPO_OXE    = cur.TIPO_OXE;

end loop;

commit;*/

-- JOM 201512 - Se añade la suma del RESTO en el cálculo de SEG_OFIEX. En 201509 se ha dado un caso con valor en RESTO (cuenta 3116900).
    update BAS_MEN.CONCILIACION_IND_F1_TMP_2
           set seg_ofiex = ( OFIEXPEN + NOBDDOFIEXPEN + OFIEX + RESTO )- TOT_SEG
           WHERE ( OFIEXPEN + NOBDDOFIEXPEN + OFIEX ) <> 0;

    commit;

    VN_NUMERR:= 46;

 --Se suman campo total a segmentar los segmentos Ofex y Sin asignar calculados en el paso anterior.
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP_2
       SET TOT_SEG=TOT_SEG+ SEG_OFIEX+SEG_SINASIG;

    commit;

    VN_NUMERR:= 48;

/*Comprobaciones:
COMP1:LLEGA/NOLLEGA A BBDD CORRECTO
COMP2:SALTA A SRCRE
COMP3:SRCRE <= SALDO CONTABLE
COMP4:Suma columnas
COMP5: Dif suma colummnas con Saldo BDD
COMP6:COHERENCIA SIGNO
COMP7:SUM FI_ELIMI1=NO
COMP8:dif FI_ELIMI1=NO
COMP9:CHECK - TOTAL A SEGMENTAR
COMP10:CHECK - OFEX
COMP11:CHECK - SIN ASIGNAR
COMP12:"TOTAL A SEGMENTAR =TOTAL CONSIDERADO + PENDIENTES"
COMP13:"TOTAL A SEGMENTAR = SALDO CONTABLE - POS. DE TIT. - ACTIVOS TITULIZADOS CON T.E.R. - SRCRE GLOBAL - IMPORTE CORRECC. -
IMPORTE CTAS C/R QUE NO SE PIDEN- DOBLES CONTAB."
COMP14:DIFERENCIA SALDO CONT-(SALDO BDD- Saldo No en Balance - Saldo IDRE).
COMP15:% PENDIENTE AJUSTES
COMP16:% PENDIENTE OFIEX
COMP17:% PENDIENTE RESTO
COMP18:% PENDIENTE RESTO SOBRE TOTAL BALANCE
*/

/* MARCA CON 0 EL INDICADOR DE LLEGA A BDD PARA AQUELLOS REGISTROS QUE SÓLO TENGAN PROCEDENCIA SALDOS */
    UPDATE BAS_MEN.CONCILIACION_IND_F1_TMP_2
       SET LLEGABDD = 0
         , NOBDDAJUSTESPEN_SALD = AJUSTESPEN_SALD + NOBDDAJUSTESPEN_SALD
         , NOBDDOFIEXPEN_SALD   = OFIEXPEN_SALD   + NOBDDOFIEXPEN_SALD
         , NOBDDRESTOPEN_SALD   = RESTOPEN_SALD   + NOBDDRESTOPEN_SALD
         , AJUSTESPEN_SALD      = 0
         , OFIEXPEN_SALD        = 0
         , RESTOPEN_SALD        = 0
     WHERE (EMPRESA,EPIGRAF,COMPTE) IN(SELECT EMPRESA,EPIGRAF,COMPTE
                                         FROM BAS_MEN.CONCILIACION_IND_F1_TMP
                                        WHERE (EMPRESA,EPIGRAF,COMPTE) IN(SELECT EMPRESA,EPIGRAF,COMPTE FROM BAS_MEN.CONCILIACION_IND_F1_TMP WHERE PROC_SALDOS = 1)
                                       GROUP BY EMPRESA,EPIGRAF,COMPTE
                                       HAVING COUNT(*) = 1);

    COMMIT;

    VN_NUMERR:= 50;

/* reagrupación de la información para eliminar el campo de procedencia saldos de la tabla */
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONCILIACION_IND_F1');

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F1
    (EMPRESA,EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE,SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI,CONSSRCRE,CORRVAL,SEPIDE,DEBEBDD,LLEGABDD,BDDNOENBAL,NOENBAL,IDRE,CSIGNOA
    ,CSIGNOM,CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1,CSIGNOX2,CSIGNOX4,CSIGNOX5,TITACT,FAIRVA,TITACT2
    ,BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG,FONINV,OPCVEN,SRCRE,EQUITY,ACTIVOS_TITULIZADOS,AJUSTES,OFIEX,RESTO
    ,AJUSTESPEN,OFIEXPEN,RESTOPEN,AJUSTESPEN_SALD,OFIEXPEN_SALD,RESTOPEN_SALD,NOBDDAJUSTESPEN,NOBDDOFIEXPEN
    ,NOBDDRESTOPEN,NOBDDAJUSTESPEN_SALD,NOBDDOFIEXPEN_SALD,NOBDDRESTOPEN_SALD,SRCREGLOB,IMPCORRVAL,IMPRCNOSEPIDE
    ,TOT_SEG,SEG_COMYAUT,SEG_CORPLOC,SEG_DCOB,SEG_EMP,SEG_EEFF,SEG_HV,SEG_OTRINST,SEG_OTRACTIV,SEG_PF
    ,SEG_PREST,SEG_PYMEEMP,SEG_PYMEMIN,SEG_RESTMIN,SEG_SOB,SEG_TARJC,SIN_SEG,SEG_OFIEX,SEG_SINASIG,NO,GAROPE,GAROFEX
    ,COMP1
    ,COMP2
    ,COMP3
    ,COMP4
    ,COMP5
    ,COMP6
    ,COMP7
    ,COMP8
    ,COMP9
    ,COMP10
    ,COMP11
    ,COMP12
    ,COMP13
    ,COMP14
    ,COMP15
    ,COMP16
    ,COMP17
    ,COMP18
    ,COMP19
    ,TOT_BAL)
    (SELECT
     EMPRESA
    ,EPIGRAF
    ,DESC_EPI
    ,COMPTE
    ,DESC_COMPTE
    ,SUM(SALDOBAL)
    ,SUM(SALDOBDDORI)
    ,SUM(SALDOFAIRVA)
    ,SUM(SALDOBDDINI)
    ,CONSSRCRE
    ,CORRVAL
    ,SEPIDE
    ,DEBEBDD
    ,LLEGABDD
    ,BDDNOENBAL
    ,SUM(NOENBAL)
    ,SUM(IDRE)
    ,SUM(CSIGNOA)
    ,SUM(CSIGNOM)
    ,SUM(CSIGNOP)
    ,SUM(CSIGNOR1)
    ,SUM(CSIGNOR2)
    ,SUM(CSIGNOX1)
    ,SUM(CSIGNOX2)
    ,SUM(CSIGNOX4)
    ,SUM(CSIGNOX5)
    ,SUM(TITACT)
    ,SUM(FAIRVA)
    ,SUM(TITACT2)
    ,SUM(BONTIT)
    ,SUM(CRSUB)
    ,SUM(LINLIQ)
    ,SUM(SWATIT)
    ,SUM(RFNEG)
    ,SUM(FONINV)
    ,SUM(OPCVEN)
    ,SUM(SRCRE)
    ,SUM(EQUITY)
    ,SUM(ACTIVOS_TITULIZADOS)
    ,SUM(AJUSTES)
    ,SUM(OFIEX)
    ,SUM(RESTO)
    ,SUM(AJUSTESPEN)
    ,SUM(OFIEXPEN)
    ,SUM(RESTOPEN)
    ,SUM(AJUSTESPEN_SALD)
    ,SUM(OFIEXPEN_SALD)
    ,SUM(RESTOPEN_SALD)
    ,SUM(NOBDDAJUSTESPEN)
    ,SUM(NOBDDOFIEXPEN)
    ,SUM(NOBDDRESTOPEN)
    ,SUM(NOBDDAJUSTESPEN_SALD)
    ,SUM(NOBDDOFIEXPEN_SALD)
    ,SUM(NOBDDRESTOPEN_SALD)
    ,SUM(SRCREGLOB)
    ,SUM(IMPCORRVAL)
    ,SUM(IMPRCNOSEPIDE)
    ,SUM(TOT_SEG)
    ,SUM(SEG_COMYAUT)
    ,SUM(SEG_CORPLOC)
    ,SUM(SEG_DCOB)
    ,SUM(SEG_EMP)
    ,SUM(SEG_EEFF)
    ,SUM(SEG_HV)
    ,SUM(SEG_OTRINST)
    ,SUM(SEG_OTRACTIV)
    ,SUM(SEG_PF)
    ,SUM(SEG_PREST)
    ,SUM(SEG_PYMEEMP)
    ,SUM(SEG_PYMEMIN)
    ,SUM(SEG_RESTMIN)
    ,SUM(SEG_SOB)
    ,SUM(SEG_TARJC)
    ,SUM(SIN_SEG)
    ,SUM(SEG_OFIEX)
    ,SUM(SEG_SINASIG)
    ,SUM(NO)
    ,SUM(GAROPE)
    ,SUM(GAROFEX)
    ,COMP1
    ,COMP2
    ,COMP3
    ,sum(COMP4)
    ,sum(COMP5)
    ,COMP6
    ,sum(COMP7)
    ,sum(COMP8)
    ,sum(COMP9)
    ,sum(COMP10)
    ,sum(COMP11)
    ,sum(COMP12)
    ,sum(COMP13)
    ,sum(COMP14)
    ,sum(COMP15)
    ,sum(COMP16)
    ,sum(COMP17)
    ,sum(COMP18)
    ,sum(nvl(COMP19,0))
    ,sum(nvl(TOT_BAL,0))
    FROM BAS_MEN.CONCILIACION_IND_F1_TMP_2
    GROUP BY  EMPRESA,EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE
             ,CONSSRCRE,CORRVAL,SEPIDE,DEBEBDD,LLEGABDD,BDDNOENBAL, comp1, comp2, comp3, comp6);

    COMMIT;

    VN_NUMERR:= 52;

 /* update BAS_MEN.CONCILIACION_IND_F1
     SET OFIEXPEN = 0
       , RESTOPEN = 0
       , SEG_SINASIG = 0
       , SEG_OFIEX = 0
   WHERE EMPRESA = 81
     AND COMPTE = 90447100;

  COMMIT;

  update BAS_MEN.CONCILIACION_IND_F1
     SET RESTOPEN = 0
   WHERE EMPRESA = 81
     AND COMPTE = 5210110500;

  COMMIT;*/

    UPDATE BAS_MEN.CONCILIACION_IND_F1
    SET
    /*COMP1=DECODE(CONSSRCRE,0,DECODE(CORRVAL,0, DECODE(LLEGABDD,1,'VERDADERO','FALSO'),DECODE(LLEGABDD,0,'VERDADERO','FALSO')),
    DECODE(LLEGABDD,0,'VERDADERO','FALSO')),*/
    COMP1=DECODE(SEPIDE,0,DECODE(LLEGABDD,0,'VERDADERO','FALSO'),DECODE(LLEGABDD,0,'FALSO','VERDADERO')),
    COMP2=DECODE(LLEGABDD,1,DECODE(CONSSRCRE ,1,DECODE(RFNEG+FONINV+OPCVEN+SRCRE,0,'FALSO','VERDADERO'),'VERDADERO'),
    'VERDADERO'),
    COMP3=DECODE(LLEGABDD,0,'VERDADERO',DECODE(CONSSRCRE,0,'VERDADERO',DECODE(SIGN(ABS(SRCRE)-ABS(SALDOBAL)),-1,'VERDADERO',
    DECODE(SIGN(ABS(SRCRE)-ABS(SALDOBAL)),0,'VERDADERO','FALSO')))),
    COMP4=(FONINV+OPCVEN+SRCRE+ IDRE +CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+CSIGNOX1+CSIGNOX2+
    CSIGNOX4+CSIGNOX5+RFNEG+FAIRVA+TITACT+TITACT2+BONTIT+CRSUB+LINLIQ+SWATIT+
    EQUITY+AJUSTES+OFIEX+ACTIVOS_TITULIZADOS+NOENBAL+RESTO),
    COMP5=SALDOBDDINI-(FONINV+OPCVEN+SRCRE+ IDRE +CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+CSIGNOX1+CSIGNOX2
    +CSIGNOX4+CSIGNOX5+RFNEG+FAIRVA+TITACT+TITACT2+BONTIT+CRSUB+LINLIQ+SWATIT+
    EQUITY+AJUSTES+OFIEX+ACTIVOS_TITULIZADOS+NOENBAL+RESTO),
    COMP6=DECODE(LLEGABDD,0,'VERDADERO',DECODE(BDDNOENBAL ,1,'VERDADERO',
    DECODE(SIGN(SALDOBAL*SALDOBDDINI),1,'VERDADERO',
    DECODE(SIGN(SALDOBAL*SALDOBDDINI),0,'VERDADERO','FALSO')))),
    COMP7=(ACTIVOS_TITULIZADOS+AJUSTES+RESTO+OFIEX),
    COMP8=NO-(ACTIVOS_TITULIZADOS+AJUSTES+RESTO+OFIEX),
    COMP9=TOT_SEG-(SEG_COMYAUT+SEG_CORPLOC+SEG_DCOB+SEG_EMP+SEG_EEFF+SEG_HV+SEG_OTRINST+SEG_OTRACTIV+SEG_PF+SEG_PREST+SEG_PYMEEMP
    +SEG_PYMEMIN+SEG_RESTMIN+SEG_SOB+SEG_TARJC+SIN_SEG+SEG_OFIEX+SEG_SINASIG),
    COMP10= SEG_OFIEX-(OFIEX+OFIEXPEN+NOBDDOFIEXPEN+OFIEXPEN_SALD+NOBDDOFIEXPEN_SALD),
    COMP11= SEG_SINASIG-(AJUSTES+AJUSTESPEN+RESTOPEN+NOBDDAJUSTESPEN+NOBDDRESTOPEN+AJUSTESPEN_SALD+RESTOPEN_SALD+NOBDDAJUSTESPEN_SALD+NOBDDRESTOPEN_SALD),
    COMP12=TOT_SEG-(/*EQUITY+*/ACTIVOS_TITULIZADOS+AJUSTES+OFIEX+RESTO+AJUSTESPEN+OFIEXPEN+RESTOPEN+NOBDDAJUSTESPEN+NOBDDOFIEXPEN+NOBDDRESTOPEN
                                                                  +AJUSTESPEN_SALD+OFIEXPEN_SALD+RESTOPEN_SALD+NOBDDAJUSTESPEN_SALD+NOBDDOFIEXPEN_SALD+NOBDDRESTOPEN_SALD),
    --VJB --ACC-- 11/2007
    COMP13=TOT_SEG-SALDOBAL+(BONTIT+CRSUB+LINLIQ+SWATIT)+TITACT2+SRCREGLOB+IMPCORRVAL+ IMPRCNOSEPIDE+(CSIGNOA+ CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+ CSIGNOX1+ CSIGNOX2
    + CSIGNOX4+CSIGNOX5+ FAIRVA+ TITACT) ,
    COMP14=SALDOBAL-(SALDOBDDINI-NOENBAL-IDRE),
    COMP15=DECODE(SALDOBAL, 0, 0, DECODE(BDDNOENBAL  ,1,0,/*ABS*/((AJUSTESPEN+NOBDDAJUSTESPEN+AJUSTESPEN_SALD+NOBDDAJUSTESPEN_SALD)/SALDOBAL)*100)),
    COMP16=DECODE(SALDOBAL, 0, 0, DECODE(BDDNOENBAL  ,1,0,/*ABS*/((OFIEXPEN+NOBDDOFIEXPEN+OFIEXPEN_SALD+NOBDDOFIEXPEN_SALD)/SALDOBAL)*100)),
    COMP17=DECODE(SALDOBAL, 0, 0, DECODE(BDDNOENBAL  ,1,0,/*ABS*/((RESTOPEN+NOBDDRESTOPEN+RESTOPEN_SALD+NOBDDRESTOPEN_SALD)/SALDOBAL)*100)) ,
    COMP18=DECODE(BDDNOENBAL  ,1,0,/*ABS*/( (AJUSTESPEN+OFIEXPEN+RESTOPEN+NOBDDAJUSTESPEN+NOBDDOFIEXPEN+NOBDDRESTOPEN+
                                         AJUSTESPEN_SALD+OFIEXPEN_SALD+RESTOPEN_SALD+NOBDDAJUSTESPEN_SALD+NOBDDOFIEXPEN_SALD+NOBDDRESTOPEN_SALD) /
                                        (SELECT SUM(ABS(SALDO)) FROM BAS_MEN.balance_individual
                                          WHERE (epigraf like '010%' or  epigraf like '020%' or epigraf like '030%')
                                            and epigraf not in ('030010100000000000','030020100000000000','030050030010100000')
                                            and compte<>0))*100);

    commit;

--  BASPROD.BASI_COPIA_TABLAS_A_DCRPROP ( 'CONCILIACION_F1', 'N' );

    VN_NUMERR:= 99;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           REG_UPD_OK = VN_COUNT
     WHERE PROCES = '19.1 FNC_CONCILIACION_F1 '||PV_TABLA
       AND ESTAT  = 'INICIADO';

     COMMIT;

EXCEPTION
    WHEN OTHERS THEN
       VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
       UPDATE BAS_MEN.CONTROL_PROCES
          SET ESTAT = 'FINALIZADO',
              DATA_FIN = SYSDATE,
              FINALITZAT = 'KO',
              REG_UPD_OK = VN_COUNT,
              ERROR_ORAC = VV_MENSAJE,
              ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
              NUM_ERROR  = VN_NUMERR
        WHERE PROCES = '19.1 FNC_CONCILIACION_F1 '||PV_TABLA
          AND ESTAT  = 'INICIADO';

     COMMIT;
     RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_CONCILIACION_F1';

/*

--
-- Informe Conciliaci¢n F1. Tambi‚n esta en N:\C lculo_Capital\AAAAMMDD\Conciliacion Fase 1 Querys informe F1.sql
--

-- *************** --
-- Agrup EMP - EPI --
-- *************** --

select EMPRESA,EPIGRAF,DESC_EPI,sum(SALDOBAL) SALDOBAL,sum(SALDOBDDORI) SALDOBDDORI,sum(SALDOFAIRVA) SALDOFAIRVA,sum(GAROPE) GAROPE
     , sum(GAROFEX) GAROFEX ,sum(SALDOBDDINI) SALDOBDDINI,sum(NOENBAL) NOENBAL, sum(IDRE) IDRE,sum(CSIGNOA) CSIGNOA,sum(CSIGNOM) CSIGNOM
     , sum(CSIGNOP) CSIGNOP,sum(CSIGNOR1) CSIGNOR1,sum(CSIGNOR2) CSIGNOR2,sum(CSIGNOX1) CSIGNOX1,sum(CSIGNOX2) CSIGNOX2,sum(CSIGNOX4) CSIGNOX4
     , sum(CSIGNOX5) CSIGNOX5,sum(TITACT) TITACT,sum(FAIRVA) FAIRVA,sum(TITACT2) TITACT2
     , sum(BONTIT) BONTIT,sum(CRSUB) CRSUB,sum(LINLIQ) LINLIQ,sum(SWATIT) SWATIT,sum(RFNEG) RFNEG,sum(FONINV) FONINV,sum(OPCVEN) OPCVEN,sum(SRCRE) SRCRE
     , sum(EQUITY) EQUITY, sum(ACTIVOS_TITULIZADOS) ACTIVOS_TITULIZADOS,sum(AJUSTES) AJUSTES,sum(ofiex) ofiex,sum(RESTO) RESTO,sum(AJUSTESPEN) AJUSTESPEN
     , sum(OFIEXPEN) OFIEXPEN, sum(RESTOPEN) RESTOPEN,SUM(AJUSTESPEN_SALD) AJUSTESPEN_SALD,sum(OFIEXPEN_SALD) OFIEXPEN_SALD,sum(RESTOPEN_SALD) RESTOPEN_SALD
     , sum(NOBDDAJUSTESPEN) NOBDDAJUSTESPEN,sum(NOBDDOFIEXPEN) NOBDDOFIEXPEN,sum(NOBDDRESTOPEN) NOBDDRESTOPEN,sum(NOBDDAJUSTESPEN_SALD) NOBDDAJUSTESPEN_SALD
     , sum(NOBDDOFIEXPEN_SALD) NOBDDOFIEXPEN_SALD,sum(NOBDDRESTOPEN_SALD) NOBDDRESTOPEN_SALD,SPACES1,sum(SRCREGLOB) SRCREGLOB,sum(IMPCORRVAL) IMPCORRVAL
     , sum(IMPRCNOSEPIDE) IMPRCNOSEPIDE,SPACES2,sum(TOT_SEG) TOT_SEG,sum(SEG_COMYAUT) SEG_COMYAUT,sum(SEG_CORPLOC) SEG_CORPLOC
     , sum(SEG_DCOB) SEG_DCOB,sum(SEG_EMP) SEG_EMP,sum(SEG_EEFF) SEG_EEFF,sum(SEG_HV) SEG_HV,sum(SEG_OTRINST) SEG_OTRINST,sum(SEG_OTRACTIV) SEG_OTRACTIV
     , sum(SEG_PF) SEG_PF,sum(SEG_PREST) SEG_PREST,sum(SEG_PYMEEMP) SEG_PYMEEMP,sum(SEG_PYMEMIN) SEG_PYMEMIN,sum(SEG_RESTMIN) SEG_RESTMIN
     , sum(SEG_SOB) SEG_SOB,sum(SEG_TARJC) SEG_TARJC,sum(SIN_SEG) SIN_SEG,sum(SEG_OFIEX) SEG_OFIEX,sum(SEG_SINASIG) SEG_SINASIG,SPACES3,sum(NO) NO
  from &Schema..CONCILIACION_IND_F1
 group by EMPRESA, EPIGRAF, DESC_EPI,SPACES1,SPACES2,SPACES3
 order by 1,2

-- ********************************** --
-- Agrup EMP - EPI - CTA (Con cuenta) --
-- ********************************** --

SELECT EMPRESA, EPIGRAF, DESC_EPI, COMPTE, DESC_COMPTE, SALDOBAL, SALDOBDDORI, SALDOFAIRVA
     , GAROPE, GAROFEX, SALDOBDDINI, CONSSRCRE, CORRVAL, SEPIDE, DEBEBDD, LLEGABDD, BDDNOENBAL
     , NOENBAL, IDRE, CSIGNOA, CSIGNOM, CSIGNOP, CSIGNOR1, CSIGNOR2, CSIGNOX1, CSIGNOX2, CSIGNOX4
     , CSIGNOX5, TITACT, FAIRVA, TITACT2, BONTIT, CRSUB, LINLIQ, SWATIT, RFNEG, FONINV, OPCVEN
     , SRCRE, EQUITY, ACTIVOS_TITULIZADOS, AJUSTES, OFIEX, RESTO, AJUSTESPEN, OFIEXPEN, RESTOPEN
     , AJUSTESPEN_SALD, OFIEXPEN_SALD, RESTOPEN_SALD, NOBDDAJUSTESPEN, NOBDDOFIEXPEN, NOBDDRESTOPEN
     , NOBDDAJUSTESPEN_SALD, NOBDDOFIEXPEN_SALD, NOBDDRESTOPEN_SALD, SPACES1, SRCREGLOB, IMPCORRVAL
     , IMPRCNOSEPIDE, SPACES2, TOT_SEG, SEG_COMYAUT, SEG_CORPLOC, SEG_DCOB, SEG_EMP, SEG_EEFF, SEG_HV
     , SEG_OTRINST, SEG_OTRACTIV, SEG_PF, SEG_PREST, SEG_PYMEEMP, SEG_PYMEMIN, SEG_RESTMIN
     , SEG_SOB, SEG_TARJC, SIN_SEG, SEG_OFIEX, SEG_SINASIG, SPACES3, COMP1, COMP2, COMP3, COMP4, COMP5, COMP6, NO, COMP7, COMP8, COMP9, COMP10
     , COMP11, COMP12, COMP13, COMP14, COMP15, COMP16, COMP17, COMP18, TOT_BAL
  FROM &Schema..CONCILIACION_IND_F1
 order by 1,2, COMPTE;

*/


create or replace PROCEDURE   BAS_MEN.BASI_CONCILIACION_F1 IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

BEGIN

    ROLLBACK; -- Ejecución del commit por si acaso queda alguna transacción ABIERTA.

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
      INTO VN_MESPRO, VN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

    VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    BAS_MEN.FNC_CONCILIACION_F1 (VV_TABLA, VV_RETORNO);
    COMMIT;

END;

/
--bkd10006=====================================================================================================
Select 'bkd10006' As Compilando from dual;

CREATE OR REPLACE PACKAGE BAS_MEN.SUCEPT is

    TYPE cursor_basilea is REF CURSOR RETURN BAS_MEN.MAESTRO_SUCEPT_TEMP%ROWTYPE;
    TYPE t_array_basilea_SUCEPT IS TABLE OF BAS_MEN.MAESTRO_SUCEPT_TEMP_2%ROWTYPE;

    FUNCTION F_SUCEPT (cur IN cursor_basilea, PN_FECPRO IN NUMBER) return t_array_basilea_SUCEPT
    parallel_enable(PARTITION cur by any)
    PIPELINED;

end;
/

/************************************************************************************/
/* CREATE DE LA DEFINICION DE LA FUNCION DEL PACKAGE                                */
/************************************************************************************/

CREATE OR REPLACE PACKAGE BODY BAS_MEN.SUCEPT AS

FUNCTION F_SUCEPT (cur IN cursor_basilea, PN_FECPRO IN NUMBER) RETURN t_array_basilea_SUCEPT
    parallel_enable(PARTITION cur by any)
    PIPELINED
    as

    in_rec cur%ROWTYPE;
    out_rec BAS_MEN.MAESTRO_SUCEPT_TEMP_2%ROWTYPE;
    v_num NUMBER;

---------------------------------------------------------------------------------------
-- DEFINICION DE VARIABLES            -
---------------------------------------------------------------------------------------
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);
VN_CONT        NUMBER(2);
VV_ORIG_DESCUB_DIVR VARCHAR2(12);
VV_SUCEPT       VARCHAR2(10);
VV_ORIG         VARCHAR2(10);
VV_ORIG_TIPOPE  VARCHAR2(10);
VV_ORIG_DESCUB  VARCHAR2(12);
VN_TOT_CONCED   FLOAT;
VN_TOT_CONCED_AVALES   FLOAT;
VV_CONCED       FLOAT;
VN_FECOPE       NUMBER(8);
VN_LIMIT        NUMBER(8);
VN_FI_EADAIRB   FLOAT;
VN_FI_CCFAIRB   NUMBER(6,4);
VV_FI_EXCEDID   VARCHAR2(2);
VV_SECTOR       VARCHAR2(15);
VN_UTIL         FLOAT;
VV_SUCEPT_DF    VARCHAR2(10);
VV_SUCEPT_DIVR  VARCHAR2(10);
VV_CONCED_DF    FLOAT;
VN_NUM_AVA_POST NUMBER(8);
VN_OR_SEGGES     NUMBER(2);
VV_ORIG_AVA_OLD  varchar2(10);
VV_TROBAT           VARCHAR2(2);
VN_FEC_CAL          NUMBER(8);
VV_OR_SITUAC        VARCHAR2(3);
VN_RAT_GBL          NUMBER(6,2);
VV_CODMODELO        VARCHAR2(5);
VN_MOD_AJUS_SMA     NUMBER(17,7);
VN_IDFCALIFIC       NUMBER(9);
VN_IDFCALIFICREL    NUMBER(9);
VV_OR_SEGRIE        VARCHAR2(10);
VV_OR_SEGFIC        VARCHAR2(2); --06/02/2019 - NAV
VV_OR_PESOW         NUMBER;      --21/10/2019 - NAV -- Actualizar el peso para clientes comunes.
VV_OR_PUNTGRUP      NUMBER;
VV_OR_MODGRUP       VARCHAR2(5 BYTE); /* RMR 26/02/2020 Añadido campo de modelo de grupo */
VN_OR_TITULARITAT   NUMBER(8);

BEGIN
  LOOP

     fetch cur into in_rec;
     EXIT WHEN cur%notfound;

     VN_COUNT:= VN_COUNT + 1;
     VV_ROWID:= TO_CHAR(in_rec.OR_IDREG);
     VV_SUCEPT:= '?';
     VN_TOT_CONCED_AVALES:=0;
     VV_SUCEPT_DF := '?';
     VV_CONCED_DF := 0;
     VV_CONCED    := 0;
     VN_TOT_CONCED := 0;
     VN_NUMERR:= 99;
     VN_FEC_CAL        := in_REC.OR_FECPUN0;
     VN_RAT_GBL        := in_REC.OR_RATINT;
     VN_MOD_AJUS_SMA   := in_REC.OR_PUNT0;
     VN_IDFCALIFIC     := in_REC.IN_IDCALIFIC;
     VN_IDFCALIFICREL  := in_REC.IN_IDCALIFICREL;
     VV_CODMODELO      := in_REC.OR_MODRAT0;
     VV_OR_SITUAC      := in_REC.OR_SITUAC0;
     VV_OR_SEGRIE      := '?';
     VV_OR_SEGFIC      :=IN_REC.OR_SEGFIC; --06/02/2019 - NAV
     VV_OR_PESOW       :=IN_REC.OR_PESOW;  --21/10/2019 - NAV -- Actualizar el peso para clientes comunes.
     VV_OR_PUNTGRUP    :=IN_REC.OR_PUNTGRUP;
     VV_OR_MODGRUP     :=IN_REC.OR_MODGRUP /* RMR 26/02/2020 Añadido campo de modelo de grupo */
     ; --21/10/2019 - NAV -- Actualizar el peso para clientes comunes.

if in_rec.or_titularitat not in (0,9) then

-- @RMC mod. 30-09-2009: Aplicar la No susceptibilidad a los No clientes deudores de Factoring sin recurso
--                       superiores a 1800€ de manera que si una titularidad tiene una casuística de la
--                       prelación que la pueda hacer quedar marcada como No susceptible se marque. Por ejemplo
--                       una titularidad con personalidad no susceptible debe quedar marcada como DFPEXX

--FACTORING SIN RECURSO CLIENTE Y CONCEDIDO<1800: Tratamiento para Factoring con titular de cuenta vista (clientes) y concedido<=1800E
--FACTORING SIN RECURSO NO CLIENTE: Tratamiento para Factoring NO titular de cuenta vista (No clientes)
     BEGIN
         SELECT DECODE(CVISTA, 1, DECODE(SIGN(1800 - CONCED),-1,'?','EMFACL'),0,'EMFANC','?'), CONCED
           INTO VV_SUCEPT_DF, VV_CONCED_DF
           FROM BAS_MEN.MAESTRO_CV
          WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
      EXCEPTION
         WHEN OTHERS THEN
            VV_SUCEPT_DF := '?';
            VV_CONCED_DF := 0;
     END;

--PROJECT FINANCE: Tratamiento Project Finance susceptibles
     IF VV_SUCEPT ='?' AND (in_rec.IN_SEGMBS = 'Project Finance' OR in_rec.IN_SEGMBS0 = '201') THEN
        VV_SUCEPT:= 'PFSUCP';
     END IF;

--REAL ESTATE: Tratamiento Real Estate no susceptible
     IF VV_SUCEPT ='?' AND in_rec.IN_SEGMBS0 = '203' THEN
           VV_SUCEPT:= 'FERENS';
     END IF;

     VN_NUMERR:= 100;

--OBJECT_FINANCE: Tratamiento Object_Finance no susceptible
     IF VV_SUCEPT ='?' AND in_rec.IN_SEGMBS0 = '204' THEN
           VV_SUCEPT:= 'FEOFNS';
     END IF;

     VN_NUMERR:= 101;

--AJUSTES: Tratamiento Ajustes:
     IF VV_SUCEPT ='?' THEN
        BEGIN
           SELECT 'EMAJUS'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_AJUSTES
            WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

--OFICINA 602: Tratamiento    Clientes exclusivos de la oficina 602  (Oficina Institucional – Sabadell):
     IF VV_SUCEPT = '?' THEN
        BEGIN
           SELECT 'EMOFIN'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_EMOFIN
            WHERE OR_TITULARITAT = in_rec.OR_TITULARITAT;
        EXCEPTION
             WHEN OTHERS THEN
                  VV_SUCEPT:= '?';
        END;
     END IF;

--PERSONALIDAD: Tratamiento No Susceptibles por personalidad
     IF VV_SUCEPT = '?' THEN
        BEGIN
           SELECT DISTINCT 'EM'||MOTIU
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_PERSONALIDAD_NOSUCEPT --Se consulta y extrae EMSUCP del MAESTRO_PERSONALIDAD_NOSUCEPT para identificar aquellas personalidades no susceptibles
            WHERE PERSONALIDAD = in_rec.OR_PERSON
              AND MOTIU IS NOT NULL;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

     VN_NUMERR:= 102;

--FACTORING SIN RECURSO CON COBERTURA: Tratamiento para los Deudores de Factoring con Cobertura 30/10/07 XCG
     IF VV_SUCEPT = '?'  THEN
         BEGIN
           SELECT 'EMFACO'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_CV_PROD_FSR
            WHERE ID_TITULARITAT = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

     VN_NUMERR:= 103;

--FACTORING SIN RECURSO CLIENTE Y CONCEDIDO<1800: Tratamiento para Factoring con titular de cuenta vista (clientes) y concedido<1800E
--FACTORING SIN RECURSO NO CLIENTE: Tratamiento para Factoring NO titular de cuenta vista (No clientes)
     IF VV_SUCEPT = '?'  THEN
        --@RMC 14/11/2008: EMFANC1 : No susceptible por ser No cliente de Factoring Sin Recurso con menos o igual a 1800 euros, o promotores o no residentes
        --                           o cuyo OR_NIFCIF empiece por 777 o cuya personalidad sea de UTE (OR_PERSON='805') o de Multititularidad..
        --                 NCSUCP :  Susceptible por ser No cliente de Factoring Sin Recurso con más   de 1800 euros , que no sean promotores y sean residentes.
        IF VV_SUCEPT_DF = 'EMFANC' THEN
           IF (VV_CONCED_DF <= 1800
               OR in_rec.IN_SEGMBS2= '020'
               OR in_rec.OR_TIPIDE in (12, 10) --@RMC 20100331: Se añade el 10 como TIPIDE externo
               OR in_rec.OR_PERSON = '805'
               OR in_rec.IN_SEGMBSINI = '019'
               OR SUBSTR(in_rec.OR_NIFCIF,1,3) = '777') THEN

              VV_SUCEPT := 'NCFANC1';

           ELSIF VV_CONCED_DF > 1800
             AND in_rec.IN_SEGMBS2 <> '020'
             AND in_rec.OR_TIPIDE in(11) THEN

              VV_SUCEPT := 'NCSUCP';
           END IF;
        ELSIF VV_SUCEPT_DF = 'EMFACL' AND in_rec.OR_PROCED <> 'FORFAITING' THEN
          VV_SUCEPT := VV_SUCEPT_DF;
        END IF;

     END IF;

     VN_NUMERR:= 104;

--MULTITITULARIDADES: Tratamiento Multitularidades que no son 100% Personas Jurídicas  ACC-VJB 04/07/2008
    IF  VV_SUCEPT = '?' THEN--VV_SUCEPT IN( '?', 'EMSUCP')  THEN
        BEGIN
           SELECT 'ETNSPJ'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_MTIT
            WHERE OR_TITULARITAT = in_rec.OR_TITULARITAT
              AND TIPO = 'NO JURIDICA';
        EXCEPTION
           WHEN OTHERS THEN
             NULL; --VV_SUCEPT:= '?';   --ACC-VJB 05/02/'08 LAS MTITS NO PUEDEN SER SUSCEPTIBLES
        END;
     END IF;

--MULTITITULARIDADES: Tratamiento Multitularidades Mancomunadas como no susceptibles
    IF  VV_SUCEPT = '?' THEN--VV_SUCEPT IN( '?', 'EMSUCP') THEN    --ACC-VJB 05/02/'08 LAS Mancomunadas NO PUEDEN SER SUSCEPTIBLES
        BEGIN
           SELECT 'ETNSMA'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_MTIT A,
                  BAS_MEN.MTIT_MANCOMUNADA B
            WHERE A.OR_TITULARITAT = in_rec.OR_TITULARITAT
                AND A.OR_TITULARITAT = B.CODTIT;
        EXCEPTION
           WHEN OTHERS THEN
             NULL; --VV_SUCEPT:= '?';   --ACC-VJB 05/02/'08 LAS Mancomunadas NO PUEDEN SER SUSCEPTIBLES
        END;
     END IF;

     VN_NUMERR:= 105;

--IDENTIFICACIÓN DE LA PROCEDENCIA: Se identifica la procedencia por titularidad mediante el MAESTRO_PROCED
     IF VV_SUCEPT = '?' THEN
        VV_ORIG:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED
            WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG:= '?';
        END;

        VV_ORIG_TIPOPE:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG_TIPOPE
             FROM BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE
            WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG_TIPOPE:= '?';
        END;

        VN_NUMERR:= 106;

--TOTAL CONCEDIDO: Se busca el total concedido del MAESTRO_TOTAL_CONCEDIDO
        BEGIN
           SELECT TOT_CONCED, SUBSTR(OR_FECOPE,1,4)
             INTO VN_TOT_CONCED, VN_FECOPE
             FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO
            WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;

--TOTAL CONCEDIDO AVALES: VJB-ACC 10/01/'08 Si es un Aval se busca el total concedido del MAESTRO_TOTAL_CONCEDIDO_AVALES
        IF VV_ORIG = 'AVALES' THEN
          BEGIN
             SELECT TOT_CONCED
               INTO VN_TOT_CONCED_AVALES
               FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_AVALES
              WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
          EXCEPTION
           WHEN OTHERS THEN
              VN_TOT_CONCED_AVALES:= 0;
          END;
        END IF;

        VN_NUMERR:= 107;

--CONCEDIDO>=30.000: Tratamiento susceptibles por total concedido>=30.000E
        IF VN_TOT_CONCED >= 30000 AND VV_ORIG_TIPOPE NOT IN ('TIPOPE','TIPOPE_INT') THEN
           VV_SUCEPT:= 'EMSUCP';
        END IF;

--Avales con concedido superior a 30.000 euros pero que son todos anteriores a 2001
-----------------------------------------------------------------------------------
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG_AVA_OLD
             FROM BAS_MEN.MAESTRO_PROCED_AVA_OLD
            WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG_AVA_OLD:= '?';
        END;

        IF VV_ORIG_AVA_OLD = 'AVALES_OLD' /*AND VN_TOT_CON_DIS >= 30000*/ THEN
            VV_SUCEPT := 'EMAVAL';
        END IF;

     END IF;

     VN_NUMERR:= 108;

--TARJETAS: Tratamiento Tarjetas: Según el límite seran susceptibles o no
     IF VV_SUCEPT = '?' THEN
        IF VV_ORIG = 'TARGES' THEN
           VN_LIMIT:= 10000;
           IF in_rec.OR_SEGGES = 3 THEN
/*INI --30/10/2019 - NAV -- BORRADO DEL CAMPOS OR_SUBSEG DE BASILEA Y SUSTITUIMOS POR OR_SEGFAC
            IF in_rec.OR_SUBSEG = 1 THEN
                 VN_LIMIT:= 10000;
              ELSIF in_rec.OR_SUBSEG = 2 THEN
                 VN_LIMIT:= 15000;
              ELSIF in_rec.OR_SUBSEG = 3 THEN
                 VN_LIMIT:= 20000;
              ELSIF in_rec.OR_SUBSEG IN (4,5) THEN
                 VN_LIMIT:= 25000;
              END IF;
*/
              IF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 1 THEN
                 VN_LIMIT:= 10000;
              ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN
                 VN_LIMIT:= 15000;
              ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                 VN_LIMIT:= 20000;
              ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) IN (4,5) THEN
                 VN_LIMIT:= 25000;
              END IF;
--FIN --30/10/2019 - NAV
           ELSIF in_rec.OR_SEGGES IN (4,5) THEN
              VN_LIMIT:= 25000;
           END IF;

           IF VN_TOT_CONCED < VN_LIMIT THEN
              VV_SUCEPT:= 'EMTARG';
           ELSE
              VV_SUCEPT:= 'EMSUCP';
           END IF;

           VN_NUMERR:= 109;

--AVALES: Tratamiento de Avales
        ELSIF VV_ORIG = 'AVALES' THEN
           IF VN_FECOPE >= 2001 AND VN_TOT_CONCED_AVALES < 6000 THEN
              VV_SUCEPT:= 'EMAVAL';
           ELSE
               IF VN_TOT_CONCED_AVALES >= 6000 AND VN_FECOPE >= 2001 THEN
                  VV_SUCEPT:= 'EMSUCP';
               END IF;
           END IF;

--COMBINACIÓN DE PRODUCTOS: Tratamiento PARA REGISTROS COMBINADOS DE Tarjetas, Avales y Factoring 5/11/' 07.-- dic '07: se cambia el orden de prelación y se sitúa por encima de EMTIPO
        ELSIF VV_ORIG IN ('TA-AV-FA') THEN

             VN_CONT := 0;
             VN_TOT_CONCED := 0;
             VN_LIMIT := 0;
             VV_SUCEPT_DIVR := 'EMDIVR';

/* @RMC 20090930: Marcar como Riesgo Diverso a los clientes que todos sus productos cumpla los criterios individuales
                  de no susceptibilidad (actualmente se marcaban siempre que tuviera dos productos que lo cumplieran
                  aunque el tercero no lo hiciera) Cuando un producto no cumpla para ser riesgo diverso se marca como
                  susceptible la titularidad*/

-- Tratamiento Factoring
             BEGIN
               SELECT RIESGO_DIVERSO
                    , 'EM'||IN_SUCEPT
                 INTO VN_CONT
                    , VV_SUCEPT_DIVR
                 FROM BAS_MEN.MAESTRO_FACTORING_DIVR
                WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
             EXCEPTION
                  WHEN OTHERS THEN
                       VN_CONT := 0;
                       VV_SUCEPT_DIVR := 'EMDIVR';
             END;

             VN_NUMERR:= 110;

-- Tratamiento Avales
             --Comprueba si hay avales posteriores a 2001
             --IF in_rec.OR_TIPOPE IN('AF','AT') OR in_rec.OR_PROCED IN('AVALES','ES-AVALES') THEN
            IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                BEGIN
                   SELECT TOT_AVALES
                     INTO VN_TOT_CONCED_AVALES
                     FROM BAS_MEN.MAESTRO_TOT_CONC_AVALES_DIVR
                    WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
                EXCEPTION
                     WHEN OTHERS THEN
                        VN_TOT_CONCED_AVALES:= 0;
                END;

                IF VN_TOT_CONCED_AVALES <> 0 THEN
                    BEGIN
                      SELECT NUM_AVALES
                        INTO VN_NUM_AVA_POST
                        FROM BAS_MEN.MAESTRO_PROCED_AVAL_POST_DIVR
                       WHERE IN_TITULFIN = in_rec.OR_TITULARITAT
                         AND ROWNUM = 1;
                    EXCEPTION
                         WHEN OTHERS THEN
                              VN_NUM_AVA_POST := 0;
                    END;

                    IF VN_NUM_AVA_POST <> 0 AND VN_TOT_CONCED_AVALES >= 6000 THEN
                       VV_SUCEPT_DIVR := 'EMSUCP';
                    END IF;
                END IF;
            END IF;

            VN_NUMERR:= 111;

-- Tratamiento Tarjetas
             IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                VN_OR_SEGGES:= -1;
                BEGIN
                      SELECT DISTINCT OR_SEGGES
                        INTO VN_OR_SEGGES
                        FROM BAS_MEN.MAESTRO_PROCED_TARGES_DIVR
                       WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
                    EXCEPTION
                         WHEN TOO_MANY_ROWS THEN
                              VN_OR_SEGGES := in_rec.OR_SEGGES;
                         WHEN OTHERS THEN
                              VN_OR_SEGGES := -1;
                END;

                IF VN_OR_SEGGES <> -1 THEN
                    BEGIN
                      SELECT TOT_CONC
                           INTO VN_TOT_CONCED
                           FROM BAS_MEN.MAESTRO_TOT_CONC_TARGES_DIVR
                          WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
                      EXCEPTION
                           WHEN OTHERS THEN
                              VN_TOT_CONCED := 999999;
                    END;

                    VN_LIMIT:= 10000;
                    IF VN_OR_SEGGES = 3 THEN
/*INI --30/10/2019 - NAV -- BORRADO DEL CAMPOS OR_SUBSEG DE BASILEA Y SUSTITUIMOS POR OR_SEGFAC
                       IF VN_OR_SUBSEG = 1 THEN
                          VN_LIMIT:= 10000;
                       ELSIF VN_OR_SUBSEG = 2 THEN
                          VN_LIMIT:= 15000;
                       ELSIF VN_OR_SUBSEG = 3 THEN
                          VN_LIMIT:= 20000;
                       ELSIF VN_OR_SUBSEG IN (4,5) THEN
                          VN_LIMIT:= 25000;
                       END IF;
*/
                       IF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 1 THEN
                          VN_LIMIT:= 10000;
                       ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN
                          VN_LIMIT:= 15000;
                       ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                          VN_LIMIT:= 20000;
                       ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) IN (4,5) THEN
                          VN_LIMIT:= 25000;
                       END IF;
--FIN
                    ELSIF VN_OR_SEGGES IN (4,5) THEN
                       VN_LIMIT:= 25000;
                    END IF;

                    -- Si el total es mayor o igual al limite se marca como susceptible
                    IF VN_TOT_CONCED >= VN_LIMIT THEN
                       VV_SUCEPT_DIVR := 'EMSUCP';
                    END IF;
                END IF;
            END IF;

            VN_NUMERR:= 112;

-- TRATAMIENTO DESCUBIERTOS DE RIESGO DIVERSO Modificación:26/03/09
             IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                BEGIN
                 SELECT ORIGEN
                   INTO VV_ORIG_DESCUB_DIVR
                   FROM BAS_MEN.MAESTRO_PROCED_DESCUB_DIVR
                  WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
                EXCEPTION
                 WHEN OTHERS THEN
                    VV_ORIG_DESCUB_DIVR:= '?';
                END;

                IF VV_ORIG_DESCUB_DIVR IN ('DESCUBIERTOS') THEN

                  BEGIN
                     SELECT TOT_CONCED
                       INTO VN_TOT_CONCED
                       FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO
                      WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
                  EXCEPTION
                     WHEN OTHERS THEN
                        VV_SUCEPT_DIVR := 'EMSUCP';
                  END;

                  -- Si el concedido es mayor o igual a 30.000€ es susceptible
                  IF VN_TOT_CONCED >= 30000 THEN
                      VV_SUCEPT_DIVR := 'EMSUCP';
                  END IF;
                END IF;
            END IF;

            VV_SUCEPT := VV_SUCEPT_DIVR;

        END IF;

        VN_NUMERR:= 113;

--TRATAMIENTO DESCUBIERTOS inferiores a 30.000 euros. CONCEDIDO <30.000 y procedencia sólo descubiertos se marcan como EMDESC: @RMC MODIFICACION CIERRE 30-09-2009
        BEGIN
          SELECT ORIGEN
            INTO VV_ORIG_DESCUB
            FROM BAS_MEN.MAESTRO_PROCED_DESCUB
           WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
              WHEN OTHERS THEN
                 VV_ORIG_DESCUB:= '?';
        END;

        IF VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
           BEGIN
              SELECT TOT_CONCED
                INTO VN_TOT_CONCED
                FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO
               WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
           EXCEPTION
              WHEN OTHERS THEN
                 VV_SUCEPT:= '?';
           END;

           IF VN_TOT_CONCED < 30000 THEN
               VV_SUCEPT:= 'EMDESC';
           END IF;
        END IF;

        VN_NUMERR:= 114;

--TIPO DE OPERACIÓN: Tratamiento Tipope
        IF VV_ORIG_TIPOPE IN ('TIPOPE','TIPOPE_INT') AND VV_SUCEPT = '?' THEN

           BEGIN
              SELECT ORIGEN
                INTO VV_ORIG_DESCUB
                FROM BAS_MEN.MAESTRO_PROCED_DESCUB
               WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
           EXCEPTION
              WHEN OTHERS THEN
                 VV_ORIG_DESCUB:= '?';
           END;

--CONCEDIDO>=30.000: Tratamiento susceptibles por total concedido>=30.000E PARA LOS EMTIPO
           IF VN_TOT_CONCED >= 30000 AND VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
               VV_SUCEPT:= 'EMSUCP';
--CONCEDIDO <30.000 y procedencia sólo descubiertos se marcan como EMDESC: @RMC MODIFICACION CIERRE 30-09-2009
/*           ELSIF VN_TOT_CONCED <  30000 AND VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
               VV_SUCEPT:= 'EMDESC';*/
           ELSE
               VV_SUCEPT:= 'EMTIPO';
           END IF;

        END IF;

     END IF;

     VN_NUMERR:= 115;

--PROCEDENCIA: Tratamiento Procedencia no susceptible             ACC-VJB 02/07/'08 VJB-ACC
--             todas las procedencias de la titularidad han de ser no susceptibles segun maestro_procedencia_sucept
     IF VV_SUCEPT IN ('?','EMSUCP') THEN
        BEGIN
           SELECT IN_SUCEPT
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_PROCED_NOSUSCEPT
            WHERE OR_TITULARITAT = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

--BLOQUEOS: Tratamiento Bloqueos  --- MODIFICACIÓN 27/03/2009: añadido nuevo bloqueo para DFSUCP
     -- JCVJCVJCV  201406. 20140703 - Bloqueo a extinguir (9053) y refinanciado no XXBLQR.
     IF VV_SUCEPT IN ('?','EMSUCP','NCSUCP','PFSUCP') AND NOT (in_rec.OR_CLAVISO = 9053 AND NVL(IN_REC.IN_REFINAN,0) = 1) THEN --AND NVL(IN_REC.IN_REFINAN,0) = 0 THEN
        IF (in_rec.OR_CLAVISO IN (9051,9052,9053,9054,9050) AND TO_NUMBER(TO_CHAR(TO_DATE(in_rec.OR_FECALTBLO,'YYYY-MM-DD'),'YYYYMMDD')) <= PN_FECPRO) THEN
           IF VV_SUCEPT='NCSUCP' THEN
              VV_SUCEPT := 'NCBLQR';
           ELSIF VV_SUCEPT='PFSUCP' THEN
                 VV_SUCEPT := 'PFBLQR';
           ELSE
                VV_SUCEPT := 'EMBLQR';
           END IF;

        END IF;
     END IF;

     VN_NUMERR:= 116;

--Marcaje de las titularidades susceptibles que tienen operaciones con procedencias PR-MOROS
     IF SUBSTR(VV_SUCEPT,3,4) IN ('SUCP') OR VV_SUCEPT = '?' THEN
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_MOROSOS
            WHERE IN_TITULFIN = in_rec.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG := '?';
        END;

        IF VV_ORIG = 'PR-MOROS' AND in_rec.IN_INDMOR = 'SI' THEN
           VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'PRMO';
           VV_SUCEPT := REPLACE(VV_SUCEPT,'?','EM');
        END IF;

     END IF;

     VN_NUMERR:= 117;

--PERSONALIDAD INCORRECTA O NO INFORMADA: ACC-VJB 04/01/08 SE PASAN ESTAS MARCAS A LA SUSCEPTIBILIDAD
  --UTES PERSONALIDAD INCORRECTA: Tratamiento UTEs con personalidad incorrecta
     IF (in_rec.IN_SEGMBSINI = '019' AND /*VV_SUCEPT = 'EMTUTE' THEN*/ SUBSTR(in_rec.OR_NIFCIF,1,1) in ('U','G') AND in_rec.OR_PERSON <> 805) THEN
        VV_SUCEPT:= 'EMNSSP';
     END IF;

  --PERSONALIDAD NO INFORMADA
     IF VV_SUCEPT = '?' AND in_rec.OR_PERSON = 0 THEN
           VV_SUCEPT:= 'EMNSSP';
     END IF;

--EL RESTO QUEDA COMO SUSCEPTIBLE: Todos aquellos registros que no se hayan tratado se marcan como susceptibles
     IF VV_SUCEPT = '?' THEN
        VV_SUCEPT := 'EMSUCP';
     END IF;

--@RMC: Aplicar la No susceptibilidad a los No clientes deudores de Factoring sin recurso superiores a 1800€
--      de manera que si una titularidad tiene una casuística de la prelación que la pueda hacer quedar marcada como No susceptible se marque
     IF VV_SUCEPT_DF = 'EMFANC' AND SUBSTR(VV_SUCEPT,3,8) <> 'FACO' THEN --No se puede dar la Marca 'NCFACO' 4/06/10
        VV_SUCEPT := 'NC'||SUBSTR(VV_SUCEPT,3,8);
     END IF;

elsif in_rec.or_titularitat in (0,9) then
     VN_COUNT:= VN_COUNT + 1;
     VV_ROWID:= TO_CHAR(in_rec.OR_IDREG);
     VV_SUCEPT:= '?';

--PROJECT FINANCE: Tratamiento Project Finance
     IF in_rec.IN_SEGMBS = 'Project Finance' OR in_rec.IN_SEGMBS0 = '201' THEN
        VV_SUCEPT:= 'PFSUCP';
     END IF;

--REAL ESTATE: Tratamiento Real Estate 11/12/07 VJB-ACC PASE DICIEMBRE '07: REAL ESTATE (SEGMBS0='203') MARCAR COMO IN_SUCEPT='FERENS'
     IF VV_SUCEPT = '?' AND in_rec.IN_SEGMBS0 = '203' THEN
        VV_SUCEPT:= 'FERENS';
     END IF;

     VN_NUMERR:= 118;

--OBJECT_FINANCE: Tratamiento Object_Finance
     IF VV_SUCEPT = '?' AND in_rec.IN_SEGMBS0 = '204' THEN
        VV_SUCEPT:= 'FEOFNS';
     END IF;

     VN_NUMERR:= 119;

--CIF NO INFORMADO Tratamiento titularidades con CIF no informado -JMC-ACC
     IF VV_SUCEPT = '?' AND in_rec.OR_NIFCIF='?' THEN
         VV_SUCEPT:= 'TITCIFNI';
     END IF;

--OFICINA 602: Tratamiento    Clientes exclusivos de la oficina 602  (Oficina Institucional – Sabadell) --ACC-VJB 14/01/'08 (a partir pase dic '07)
     IF VV_SUCEPT = '?' and in_rec.OR_NUMOFI = '602' THEN
        VV_SUCEPT:= 'EMOFIN';
     END IF;

--PERSONALIDAD: Tratamiento personalidad no susceptible
     IF VV_SUCEPT = '?' THEN
        BEGIN
           SELECT 'EM'||MOTIU
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_PERSONALIDAD_NOSUCEPT
            WHERE PERSONALIDAD = in_rec.OR_PERSON
              AND MOTIU IS NOT NULL;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

     VN_NUMERR:= 120;

--BLOQUEOS: Tratamiento Bloqueos
     -- JCVJCVJCV  201406. 20140703 - Bloqueo a extinguir (9053) y refinanciado no XXBLQR.
     IF VV_SUCEPT IN ('?','EMSUCP','NCSUCP','PFSUCP') AND NOT (in_rec.OR_CLAVISO = 9053 AND NVL(IN_REC.IN_REFINAN,0) = 1) THEN -- AND NVL(IN_REC.IN_REFINAN,0) = 0 THEN -- JCVJCVJCV  201406. 20140703 - Bloqueo a extinguir (9053) y refinanciado no XXBLQR.
        IF (in_rec.OR_CLAVISO IN (9051,9052,9053,9054,9050) AND TO_NUMBER(TO_CHAR(TO_DATE(in_rec.OR_FECALTBLO,'YYYY-MM-DD'),'YYYYMMDD')) <= PN_FECPRO) THEN
           IF VV_SUCEPT='NCSUCP' THEN
              VV_SUCEPT := 'NCBLQR';
           ELSIF VV_SUCEPT='PFSUCP' THEN
                 VV_SUCEPT := 'PFBLQR';
           ELSE
                VV_SUCEPT := 'EMBLQR';
           END IF;

        END IF;
     END IF;

-- UTES Tratamiento Uniones Temporales de Empresas con persnalidad mal informada
     IF in_rec.IN_SEGMBSINI = '019' AND SUBSTR(in_rec.OR_NIFCIF,1,1) = 'G' AND in_rec.OR_PERSON <> 805
        AND (in_rec.OR_NOMPER LIKE '% UTE%'
          OR in_rec.OR_NOMPER LIKE '%,UTE'
          OR in_rec.OR_NOMPER LIKE '%.UTE'
          OR in_rec.OR_NOMPER LIKE '%,UTE '
          OR in_rec.OR_NOMPER LIKE '%.UTE '
          OR in_rec.OR_NOMPER LIKE '%U.T.E%'
          OR in_rec.OR_NOMPER LIKE '%U TE%'
          OR in_rec.OR_NOMPER LIKE '%UTE,%'
          OR in_rec.OR_NOMPER LIKE '%UTE.%'
          OR in_rec.OR_NOMPER LIKE '%UTE-%'
          OR in_rec.OR_NOMPER LIKE '%UTE2%'
          OR in_rec.OR_NOMPER LIKE '%-UTE%') THEN
              VV_SUCEPT:= 'EMNSSP';
     END IF;

     VN_NUMERR:= 121;

  --PERSONALIDAD NO INFORMADA
     IF VV_SUCEPT = '?' AND in_rec.OR_PERSON = 0 THEN
           VV_SUCEPT:= 'EMNSSP';
     END IF;

--MARCA SUSCEPTIBILIDAD: Todos aquellos registros que no se hayan tratado se marcan como susceptibles
     IF VV_SUCEPT = '?' THEN
        VV_SUCEPT := 'EMSUCP';
     END IF;

END IF;

   VV_TROBAT:= 'SI';

   --XCG para clientes comunes o posibles cambios de segmentos.
-- IF IN_REC.IN_TIPOREG IN ('OXC','MMOXC') or substr(IN_REC.or_modrat0,1,3) in ('EEF', 'SO0') THEN --NAV 18/07/2019 - Añadido - 'MMOXC'
   IF (IN_REC.IN_TIPOREG IN ('OXC','MMOXC') or substr(IN_REC.or_modrat0,1,3) in ('EEF', 'SO0') or (in_rec.in_segmbs0 <> '201' and substr(IN_REC.or_modrat0,1,2) = 'PF')) THEN /* NAV 12/05/20 - Para corregir los 4 ratings vigentes sin PD. */

      BEGIN
         SELECT FEC_CAL, RAT_GBL, CODMODELO,  MOD_AJUS_SMA, IDCALIFIC, SITUACION, PES_APLI, SMA_CALREL, CODMODELO_REL, 'SI'   --21/10/2019 - NAV -- Recuperamos el peso(PES_APLI) para actualizadar.
           INTO VN_FEC_CAL, VN_RAT_GBL, VV_CODMODELO,  VN_MOD_AJUS_SMA, VN_IDFCALIFIC, VV_OR_SITUAC, VV_OR_PESOW, VV_OR_PUNTGRUP, VV_OR_MODGRUP, VV_TROBAT /* NAV 01/06/2022 - HDEV-165785 - Añadimos  VV_TROBAT = SI */
           FROM BAS_MEN.RSK_RT_ULT_RATING
          WHERE CODTIT = in_rec.OR_TITULARITAT
            AND NVL(CODMODELO, '?') <> 'AG001'
            and codtit <> 0;
      EXCEPTION
           WHEN OTHERS THEN
                BEGIN
                   SELECT FEC_CAL_R, RAT_GBL_R, CODMODELO_R,  MOD_AJUS_SMA_R, IDCALIFIC, SITUACION_R, IDCALREL, 'SI'
                     INTO VN_FEC_CAL, VN_RAT_GBL, VV_CODMODELO, VN_MOD_AJUS_SMA, VN_IDFCALIFIC, VV_OR_SITUAC, VN_IDFCALIFICREL, VV_TROBAT /* NAV 01/06/2022 - HDEV-165785 - Añadimos  VV_TROBAT = SI */
                     FROM BAS_MEN.RSK_RT_ULT_RATING
                    WHERE CODTIT = in_rec.OR_TITULARITAT
                      AND NVL(CODMODELO, '?') = 'AG001'
                      and codtit <> 0;
                EXCEPTION
                     WHEN OTHERS THEN
                          VV_TROBAT:= 'NO';
                END;
      END;

      --XCG, 13/09/2021. Si está en ratings recuperados, se obtiene de allí
      BEGIN
         SELECT OR_FECPUN0, OR_RATINT, OR_MODRAT0, OR_PUNT0, IN_IDCALIFIC, OR_SITUAC0, OR_PESOW, OR_PUNTGRUP, CODMODELO_REL, 'SI'   --21/10/2019 - NAV -- Recuperamos el peso(PES_APLI) para actualizadar.
           INTO VN_FEC_CAL, VN_RAT_GBL, VV_CODMODELO, VN_MOD_AJUS_SMA, VN_IDFCALIFIC, VV_OR_SITUAC, VV_OR_PESOW, VV_OR_PUNTGRUP, VV_OR_MODGRUP, VV_TROBAT  /* RMR 26/02/2020 Añadido campo de modelo de grupo */
           FROM BAS_MEN.RATINGS_RECUPERADOS
          WHERE or_titularitat = in_rec.OR_TITULARITAT
            and or_titularitat <> 0;
      EXCEPTION
           WHEN OTHERS THEN
                /* NAV 01/06/2022 - HDEV-165785 - Cuando se ha encontrado RATINT en RSK_RT_ULT_RATING y no en RATINGS_RECUPERADOS no hace falta buscar en RATINGSIBISOFEX */
                IF VV_TROBAT = 'SI' THEN 
                  VV_TROBAT:= 'SI';
                ELSE
                  VV_TROBAT:= 'NO';
                END IF;
      END;

      VN_NUMERR:= 118;

      --XCG si no se encuentra rating por empresa del banco, se intenta recuperar rating de ofex (incluídos los depurados). 14/07/2016
      if ((VV_TROBAT = 'NO' or VV_OR_SITUAC = 'D') and IN_REC.IN_TIPOREG IN ('OXC','MMOXC'))  THEN   --NAV 18/07/2019 - Añadido - 'MMOXC'
         BEGIN
            SELECT FEC_CAL, RAT_GBL, CODMODELO, MOD_AJUS_SMA, IDCALIFIC, IND_SIT
              INTO VN_FEC_CAL, VN_RAT_GBL, VV_CODMODELO, VN_MOD_AJUS_SMA, VN_IDFCALIFIC, VV_OR_SITUAC
              FROM (
                    SELECT FEC_CAL, RAT_GBL, CODMODELO, MOD_AJUS_SMA, IDCALIFIC, IND_SIT
                    --INTO VN_FEC_CAL, VN_RAT_GBL, VV_CODMODELO, VN_MOD_AJUS_SMA, VN_IDFCALIFIC, VV_OR_SITUAC
                      FROM BAS_MEN.RATINGSIBISOFEX
                     WHERE IDUNICO = IN_REC.OR_CTACLI
                       AND ofex = IN_REC.OR_NUMOFI
                       AND IND_SIT NOT IN ('L','ANP') /* TM-3297 - RMR - Abierto filtro para que pasen los depurados 'D' */
                       AND ESTADO  NOT IN ('PO')      /* Hay que quedarse con el registro con la mayor fecha (FEC_CAL)*/
                     ORDER BY FEC_CAL DESC
                   )
             WHERE rownum = 1;
         EXCEPTION
              WHEN OTHERS THEN
                   null;
         END;

      elsif VV_TROBAT = 'NO' then

            VN_FEC_CAL        := 9999;
            VN_RAT_GBL        := 99;
            VN_MOD_AJUS_SMA   := 9999;
            VN_IDFCALIFIC     := 0;
            VN_IDFCALIFICREL  := 0;
            VV_CODMODELO      := '?';
            VV_OR_SITUAC      := '?';

      end if;

   END if;

   IF VV_CODMODELO <> '?' THEN

      BEGIN
         SELECT DESC_BREV
           INTO VV_OR_SEGRIE
           FROM BAS_MEN.MAESTRO_DETALLE_MODELOS
          WHERE CODMODELO = VV_CODMODELO;
      EXCEPTION
           WHEN OTHERS THEN
                VV_OR_SEGRIE:= '?';
      END;

   END IF;

--INI 06/02/2019 - NAV
  IF  VV_OR_SEGRIE = 'GR' AND NVL(VV_OR_SITUAC, IN_REC.OR_SITUAC0) <> 'D' THEN
        VV_OR_SEGFIC := 'E5';
  ELSIF IN_REC.IN_SEGMBSINI = '019' OR IN_REC.IN_SEGMBS0 IN ('201', '203', '204') OR IN_REC.OR_INDHOLDING IN ('1','3','4') OR IN_REC.IN_SEGMBS2 = '020' THEN
            IF NVL(IN_REC.OR_SEGFAC,0) = 0 THEN
                VV_OR_SEGFIC :=  'E3';
            ELSIF IN_REC.OR_SEGGES IN (0,4,5,9) THEN
                VV_OR_SEGFIC :=  'E0';
            ELSIF IN_REC.OR_SEGGES = 3 THEN
                    IF IN_REC.OR_SEGFAC = 11 THEN
                        VV_OR_SEGFIC := 'E0';
                    ELSIF IN_REC.OR_SEGFAC = 12 THEN
                        VV_OR_SEGFIC := 'E1';
                    ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN
                        VV_OR_SEGFIC := 'E2';
                    ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                        VV_OR_SEGFIC := 'E3';
                    ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 4 THEN
                        VV_OR_SEGFIC := 'E4';
                    ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 5 THEN
                        VV_OR_SEGFIC := 'E5';
                    ELSE
                        VV_OR_SEGFIC := 'E3';
                    END IF;
            ELSE
                VV_OR_SEGFIC := 'E3';
            END IF;
    ELSIF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '027') AND SUBSTR(NVL(VV_OR_SEGRIE,'?'), 1, 1) NOT IN ('?', 'C', 'P')
      AND SUBSTR(VV_SUCEPT, 1, 1) = SUBSTR(NVL(VV_CODMODELO, IN_REC.OR_MODRAT0), 1, 1) AND NVL(VV_OR_SITUAC, IN_REC.OR_SITUAC0) <> 'D' THEN
         VV_OR_SEGFIC := SUBSTR(VV_OR_SEGRIE,1,2);
    ELSIF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '027') AND SUBSTR(NVL(VV_OR_SEGRIE,'?'), 1, 1) NOT IN ('?', 'C', 'P')
      AND SUBSTR(VV_SUCEPT, 1, 2) = 'NC' AND SUBSTR(NVL(VV_CODMODELO, IN_REC.OR_MODRAT0), 1, 2) = 'DF' AND NVL(VV_OR_SITUAC, IN_REC.OR_SITUAC0) <> 'D' THEN
         VV_OR_SEGFIC := SUBSTR(VV_OR_SEGRIE,1,2);
    ELSIF NVL(IN_REC.OR_SEGFAC,0) = 0 THEN
         VV_OR_SEGFIC := 'E0';
    ELSIF IN_REC.OR_SEGGES IN (0,4,5,9) THEN
         VV_OR_SEGFIC := 'E0';
    ELSIF IN_REC.OR_SEGGES = 3 THEN
            IF IN_REC.OR_SEGFAC = 11 THEN
                VV_OR_SEGFIC := 'E0';
            ELSIF IN_REC.OR_SEGFAC = 12 THEN
                VV_OR_SEGFIC := 'E1';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN
                VV_OR_SEGFIC := 'E2';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                VV_OR_SEGFIC := 'E3';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 4 THEN
                VV_OR_SEGFIC := 'E4';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 5 THEN
                VV_OR_SEGFIC := 'E5';
            ELSE
                VV_OR_SEGFIC := 'E0';
      END IF;
    ELSE
        VV_OR_SEGFIC := 'E0';
  END IF;
--FIN 06/02/2019 - NAV

OUT_REC.OR_IDREG               := IN_REC.OR_IDREG          ;
OUT_REC.OR_TIPIDE              := IN_REC.OR_TIPIDE         ;
OUT_REC.OR_NIFCIF              := IN_REC.OR_NIFCIF         ;
OUT_REC.OR_PERSON              := IN_REC.OR_PERSON         ;
OUT_REC.OR_PROCED              := IN_REC.OR_PROCED         ;
OUT_REC.OR_IDCNAE              := IN_REC.OR_IDCNAE         ;
OUT_REC.OR_SEGRIE              := VV_OR_SEGRIE             ; -------- campo que se calcula por proceso
OUT_REC.OR_DISPTO              := IN_REC.OR_DISPTO         ;
OUT_REC.OR_DISBLE              := IN_REC.OR_DISBLE         ;
OUT_REC.OR_AVALES              := IN_REC.OR_AVALES         ;
OUT_REC.OR_FUTURS              := IN_REC.OR_FUTURS         ;
OUT_REC.OR_REPOS               := IN_REC.OR_REPOS          ;
OUT_REC.OR_IDPERS              := IN_REC.OR_IDPERS         ;
OUT_REC.OR_REFOPE              := IN_REC.OR_REFOPE         ;
OUT_REC.OR_TITULARITAT         := IN_REC.OR_TITULARITAT    ;
OUT_REC.OR_FECOPE              := IN_REC.OR_FECOPE         ;
OUT_REC.OR_TIPOPE              := IN_REC.OR_TIPOPE         ;
OUT_REC.IN_SEGMBS              := IN_REC.IN_SEGMBS         ;
OUT_REC.OR_TITULARITA2         := IN_REC.OR_TITULARITA2    ;
OUT_REC.IN_SEGMBS0             := IN_REC.IN_SEGMBS0        ;
OUT_REC.OR_SITUAC0             := VV_OR_SITUAC             ; -------- campo que se calcula por proceso
OUT_REC.IN_SRATIN              := IN_REC.IN_SRATIN         ;
OUT_REC.IN_TITULFIN            := IN_REC.IN_TITULFIN       ;
OUT_REC.IN_SUCEPT              := VV_SUCEPT                ; -------- campo que se calcula por proceso
OUT_REC.OR_SEGGES              := IN_REC.OR_SEGGES         ;
OUT_REC.OR_TIPIDEIBM           := IN_REC.OR_TIPIDEIBM      ;
OUT_REC.OR_CLAVISO             := IN_REC.OR_CLAVISO        ;
OUT_REC.OR_FECALTBLO           := IN_REC.OR_FECALTBLO      ;
OUT_REC.OR_NUMOFI              := IN_REC.OR_NUMOFI         ;
OUT_REC.IN_VTAGRU              := IN_REC.IN_VTAGRU         ;
OUT_REC.IN_SEGMBSINI           := IN_REC.IN_SEGMBSINI      ;
OUT_REC.OR_PUNT0               := VN_MOD_AJUS_SMA          ; -------- campo que se calcula por proceso
OUT_REC.IN_SEGMBS2             := IN_REC.IN_SEGMBS2        ;
OUT_REC.OR_INDHOLDING          := IN_REC.OR_INDHOLDING     ;
OUT_REC.FI_TIPEXP              := IN_REC.FI_TIPEXP         ;
OUT_REC.OR_NOMPER              := IN_REC.OR_NOMPER         ;
OUT_REC.OR_CODPRODO            := IN_REC.OR_CODPRODO       ;
OUT_REC.OR_TITULARITAT_CTR     := IN_REC.OR_TITULARITAT_CTR;
OUT_REC.OR_PROYECTO            := IN_REC.OR_PROYECTO       ;
OUT_REC.OR_CTACLI              := IN_REC.OR_CTACLI         ;
OUT_REC.IN_INDMOR              := IN_REC.IN_INDMOR         ;
OUT_REC.FI_EADAIRB             := IN_REC.FI_EADAIRB        ;
OUT_REC.IN_IDGRUPO             := IN_REC.IN_IDGRUPO        ;
OUT_REC.OR_AJUVAL              := IN_REC.OR_AJUVAL         ;
OUT_REC.IN_REFINAN             := IN_REC.IN_REFINAN        ;
out_rec.OR_MODRAT0             := VV_CODMODELO             ; -------- campo que se calcula por proceso
out_rec.OR_RATINT              := VN_RAT_GBL               ; -------- campo que se calcula por proceso
out_rec.OR_FECPUN0             := VN_FEC_CAL               ; -------- campo que se calcula por proceso
out_rec.IN_IDCALIFIC           := VN_IDFCALIFIC            ; -------- campo que se calcula por proceso
out_rec.IN_IDCALIFICREL        := VN_IDFCALIFICREL         ; -------- campo que se calcula por proceso
OUT_REC.OR_MODRAT0             := VV_CODMODELO             ; -------- campo que se calcula por proceso
OUT_REC.OR_PESOW               := VV_OR_PESOW              ; -------- campo que se calcula por proceso
OUT_REC.OR_PUNTGRUP            := VV_OR_PUNTGRUP           ; -------- campo que se calcula por proceso
OUT_REC.OR_SEGFAC              := IN_REC.OR_SEGFAC         ;
OUT_REC.OR_MODGRUP             := VV_OR_MODGRUP            ; /* RMR 26/02/2020 Añadido campo de modelo de grupo calculado por proceso */
OUT_REC.OR_SEGFIC              := VV_OR_SEGFIC             ; -------- campo que se calcula por proceso

      pipe row(out_rec);

  END LOOP;

EXCEPTION
   WHEN OTHERS THEN

        RAISE_APPLICATION_ERROR(-20000, 'VN_NUMERR:'||VN_NUMERR);

end F_SUCEPT;

end;
/

/************************************************************************************/
/* CREATE DE LA FUNCION                                                             */
/************************************************************************************/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT (
PV_TABLA       IN  VARCHAR2,
PN_OPC         IN  NUMBER,
PN_FECPRO      IN  NUMBER,        --FORMATO:YYYYMMDD
PV_FECHA       IN  NUMBER,        --FORMATO:YYYYMM
PN_OPC_DER     IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);
VN_NUM_AVA_POST NUMBER(8);
VN_OR_SEGGES     NUMBER(2);
VV_ORIG_AVA_OLD  varchar2(10);


PROCEDURE FNC_SUCEPT (
PV_TABLA   IN  VARCHAR2,
PN_FECPRO  IN  NUMBER,        --FORMATO:YYYYMMDD
PV_FECHA   IN  NUMBER,        --FORMATO:YYYYMM
PN_OPC_DER IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F       IN  NUMBER,
PV_RET     OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);
VN_CONT        NUMBER(2);
VV_ORIG_DESCUB_DIVR VARCHAR2(12);
VV_SUCEPT       VARCHAR2(10);
  VV_ORIG         VARCHAR2(10);
  VV_ORIG_TIPOPE  VARCHAR2(10);
  VV_ORIG_DESCUB  VARCHAR2(12);
  VN_TOT_CONCED   FLOAT;
  VN_TOT_CONCED_AVALES   FLOAT;
  VV_CONCED       FLOAT;
  VN_FECOPE       NUMBER(8);
  VN_LIMIT        NUMBER(8);
  VN_FI_EADAIRB   FLOAT;
  VN_FI_CCFAIRB   NUMBER(6,4);
  VV_FI_EXCEDID   VARCHAR2(2);
  VV_SECTOR       VARCHAR2(15);
  VN_UTIL         FLOAT;
  VV_SUCEPT_DF    VARCHAR2(10);
  VV_SUCEPT_DIVR  VARCHAR2(10);
  VV_CONCED_DF    FLOAT;

  v_NRegs NUMBER(12);

--INI - 21/02/2019 - NAV - MAPA_DE_USO_EMP
  VN_IN_GCORP     NUMBER(2);
  VN_IN_FACTD     NUMBER(2);
  VN_IN_NCONS     NUMBER(2);
  VN_IN_NORES     NUMBER(2);
  VN_IN_RESTR     NUMBER(2);
  VN_IN_BMIG      NUMBER(2);
  VN_IN_CRSIND    NUMBER(2);
  VN_FECHA        NUMBER(8);
  VN_DATNAI       NUMBER(8);
  VN_ANTI         NUMBER(5);
  VN_OR_NUMOFI    NUMBER(4);
  VN_IN_VTAGRU    FLOAT;
  VN_SRAT         VARCHAR2(2);
  VN_N            NUMBER(8);
--FIN - 21/02/2019 - NAV - MAPA_DE_USO_EMP


-------------------------------------------------------
-- CURSOR BASILEA2
-- Cursor para el calculo del FI_EDAIRB
-------------------------------------------------------
  CURSOR BASILEA2 IS
     SELECT /*+ parallel (b 8) */ OR_IDREG,  IN_SEGMBS, IN_VTAGRU, IN_INDMOR,    OR_TIPOPE,  IN_SEGMBS0, IN_SEGMBSINI, IN_TIPOREG,
            OR_PROCED, OR_CODGAR, OR_VIDRES, OR_VIDINI,    FI_PORCON, OR_IDCNAE, OR_CTAIND, OR_ENTITY, OR_CLUNICUENT,
            FI_TIPEXP, OR_FAIRVA, OR_EPIIND, FI_EPICON, OR_FAIRVACON, IN_FAIRVABO, OR_TITULARITAT, OR_CODPRODO, IN_SUCEPT,
            OR_TIPAVA, OR_RATINT, OR_TIPIDEIBM, OR_TIPGAR,
            (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) TOTAL, OR_SEGFIC, OR_INDHOLDING, IN_SEGMBS2 -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
      FROM BAS_MEN.BASILEA B
     WHERE FI_TIPEXP IN ('OTC','Repos');

  CURSOR CONTAGIO_SUCEPT IS
   select D.*
     from
          (SELECT /*+ parallel (B 8) */ DISTINCT or_titularitat
            FROM BAS_MEN.MAESTRO_SUCEPT  B
           WHERE IN_SUCEPT = 'EMSUCP') A
        , (SELECT /*+ parallel (C 8) */ OR_IDREG, or_titularitat, IN_SUCEPT
            FROM BAS_MEN.MAESTRO_SUCEPT  C
           WHERE IN_SUCEPT <> 'EMSUCP') d
     where a.or_titularitat = d.or_titularitat;

--INI - 21/02/2019 - NAV - MAPA_DE_USO_EMP
  -------------------------------------------------
  ----CURSOR CONTAGIOCNAE
  -------------------------------------------------
  -- cursor para el tratamiento de la susceptibilidad de los CNAEs ACC-VJB 03/07/'08
   CURSOR CONTAGIOCNAE IS
    SELECT A.OR_TITULARITAT
        FROM (SELECT /*+ parallel (d 8)*/ DISTINCT OR_TITULARITAT
                FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG d
                    WHERE SUBSTR(IN_SUCEPT,3) = 'CNAE') A,
                 (SELECT /*+ parallel (c 8)*/ DISTINCT OR_TITULARITAT
                    FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG c
                    WHERE SUBSTR(IN_SUCEPT,3) = 'SUCP') B
          WHERE A.OR_TITULARITAT = B.OR_TITULARITAT
            AND A.OR_TITULARITAT NOT IN (0,9);

  -------------------------------------------------
  ----CURSOR CONTAGIOCNAE NIF
  -------------------------------------------------
  -- cursor para el tratamiento de la susceptibilidad de los CNAEs ACC-VJB 03/07/'08
   CURSOR CONTAGIOCNAENIF IS
    SELECT A.OR_IDPERS
      FROM (SELECT /*+ parallel (d 8)*/ DISTINCT OR_IDPERS, or_titularitat
              FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG d
             WHERE SUBSTR(IN_SUCEPT,3) = 'CNAE'
               AND d.OR_TITULARITAT IN (0,9)) A,
           (SELECT /*+ parallel (c 8)*/ DISTINCT OR_IDPERS
              FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG c
             WHERE SUBSTR(IN_SUCEPT,3) = 'SUCP') B
     WHERE A.OR_IDPERS = B.OR_IDPERS
       AND A.OR_TITULARITAT IN (0,9);

  -------------------------------------------------
  ----CURSOR Contagio UTES y NO UTES a UTES
  -------------------------------------------------
  -- update IN_SUCEPT a UTE (EU*) para NO UTEs que tienen alguna exp. con ind. suscept EU*
     CURSOR UTES_NO_UTES IS
     SELECT  Ute.OR_TITULARITAT, Ute.IN_SUCEPT SUCEPT_UTE, NoUte.IN_SUCEPT AS Sucept_NO_UTE
       FROM (SELECT /*+ parallel (MuE 8)*/ DISTINCT OR_TITULARITAT, IN_SUCEPt
              FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG MuE
             WHERE SUBSTR(MuE.IN_SUCEPT,1,2) in ('EU', 'PU')
               AND MuE.OR_TITULARITAT NOT IN (0,9)
            ) UTE
          , (SELECT /*+ parallel (MuE2 8)*/ DISTINCT OR_TITULARITAT, in_sucept
              FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG MuE2
             WHERE SUBSTR(MuE2.IN_SUCEPT,3) = 'SUCP'
            ) NoUTE
      WHERE UTE.OR_TITULARITAT = NoUTE.OR_TITULARITAT
        AND UTE.IN_SUCEPT <> NoUTE.IN_SUCEPT;

   -------------------------------------------------
  ----CURSOR titularidades con más de un indicador de susceptibilidad (duplicidad entre promotores y empresas de Ute´s y multititularidades
  -------------------------------------------------

  CURSOR CONTAGIO_TITU_DUPLI IS
 SELECT DISTINCT A.OR_TITULARITAT, DECODE(SIGN(A.TOTAL-B.TOTAL),1, A.SUCEPT, B.SUCEPT) SUCEPT
   FROM (SELECT /*+ parallel (d 8)*/ OR_TITULARITAT, SUBSTR(IN_SUCEPT,1,2) SUCEPT, SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) TOTAL
           FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG   d
          WHERE SUBSTR(IN_SUCEPT,1,2) IN ('ET', 'EU', 'EM','GR')
          GROUP BY OR_TITULARITAT, SUBSTR(IN_SUCEPT,1,2)) A,
        (SELECT /*+ parallel (c 8)*/ OR_TITULARITAT, SUBSTR(IN_SUCEPT,1,2) SUCEPT, SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) TOTAL
           FROM BAS_MEN.MAPA_USO_EMPRESAS_ORIG   c
          WHERE SUBSTR(IN_SUCEPT,1,2) IN ('PT', 'PU', 'PA', 'PR', 'HO')
          GROUP BY OR_TITULARITAT, SUBSTR(IN_SUCEPT,1,2)) B
  WHERE A.OR_TITULARITAT = B.OR_TITULARITAT
    AND A.OR_TITULARITAT NOT IN (0,9)
    AND (  SUBSTR(A.SUCEPT,1,2) IN    ('ET', 'EU') AND SUBSTR(B.SUCEPT,1,2) IN ('PT', 'PU')
        OR SUBSTR(A.SUCEPT,1,2) IN    ('EM', 'GR')       AND SUBSTR(B.SUCEPT,1,2) IN ('PA', 'PR', 'HO')
        )  ;
--FIN - 21/02/2019 - NAV - MAPA_DE_USO_EMP
-------------------------------------------------------
-- DECLARACIÓN DE VARIABLES
-------------------------------------------------------

BEGIN

  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('9.0 FNC_SUCEPT_EMPRESAS '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_NUMERR:= 1;

  BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.MAESTRO_DETALLE_MODELOS');

  COMMIT;

  insert into BAS_MEN.MAESTRO_DETALLE_MODELOS
  select * from DCRPROP_MENSUAL.MAESTRO_DETALLE_MODELOS_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT');

  insert into BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT
  select * from DCRPROP_MENSUAL.MAESTRO_PROCEDENCIA_SUCEPT_sas;

  commit;

  UPDATE BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT
     SET AT_PROCED = TRIM(AT_PROCED);

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERSONALIDAD_NOSUCEPT');

  INSERT INTO BAS_MEN.MAESTRO_PERSONALIDAD_NOSUCEPT
  SELECT *
    FROM DCRPROP_MENSUAL.MAESTRO_PERSON_NOSUCEPT_SAS;

 COMMIT;

--TABLA PARA IDENTIFICAR LAS Multitularidades NO SUSCEPTIBLES por se Mancomunadas.
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MTIT_MANCOMUNADA');

INSERT INTO BAS_MEN.MTIT_MANCOMUNADA
    SELECT CODTIT, SEC_TOR, IDCALIFIC, IDCALREL, FEC_CAL, CODMODELO, ESTADO, SITUACION, RAT_GBL
        FROM BAS_MEN.RSK_RT_ULT_RATING
        WHERE SEC_TOR = 'MM';

COMMIT;


 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_RECUPERADOS');

 INSERT INTO BAS_MEN.RATINGS_RECUPERADOS
 SELECT * FROM DCRPROP_MENSUAL.RATINGS_RECUPERADOS_SAS;

 COMMIT;

-------------------------------------------------------
-- CARGA MAESTRO_SUCEPT_TEMP
-- los datos se obtienen a partir de BASILEA
-- filtrando los segmentos de empresas
-------------------------------------------------------

-- 22/03/2019 Renta Fija de OFEX pasa a tratarse en el MdU de Ofex

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_TEMP');

INSERT /*+ parallel (a 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP a
     SELECT /*+ full(b) parallel (b 8) */  distinct OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
            OR_AVALES, OR_FUTURS, OR_REPOS, B.OR_IDPERS, B.OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE,
            case
                 when in_segmbs = 'Derechos Cobro'  then
                      case
                           when OR_PROCED = 'FACTORING' and OR_CLUNICUENT != 999999999999999 then
                                'Derechos Cobro'
                           else 'Derechos'
                      end
                 else in_segmbs
            end as in_segmbs,
            0, IN_SEGMBS0,  OR_SITUAC0, IN_SRATIN, OR_TITULARITAT IN_TITULFIN, '?', OR_SEGGES, /*OR_SUBSEG ,*/
            OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, OR_NUMOFI, IN_VTAGRU, IN_SEGMBSINI, OR_PUNT0, IN_SEGMBS2,
            OR_INDHOLDING, FI_TIPEXP, OR_NOMPER, OR_CODPRODO, 0,
            DECODE(IN_SEGMBS0, '201', decode(PFofex.OR_PROYECTO, null, decode(PFref.OR_PROYECTO, null, nvl(PFpers.OR_PROYECTO, '?')
                                                                                               , PFref.OR_PROYECTO)
                                                               , PFofex.OR_PROYECTO), '?') OR_PROYECTO,
            B.OR_CTACLI, IN_INDMOR, 0, IN_IDGRUPO, OR_AJUVAL, OR_CLUNICUENT, NVL(b.IN_REFINAN,0),
            b.OR_FECPUN0, b.OR_RATINT, b.IN_IDCALIFIC, b.IN_IDCALIFICREL, b.OR_MODRAT0, b.IN_TIPOREG , b.OR_PESOW, b.OR_PUNTGRUP, b.OR_SEGFAC, b.or_segfic,
            b.OR_MODGRUP /* RMR 26/02/2020 Añadido campo de modelo de grupo */
       FROM BAS_MEN.BASILEA b,
            (select distinct OR_PROYECTO, or_ctaCli from BAS_MEN.MAESTRO_PROJECT_FINANCE WHERE NVL(OR_CTACLI,0) <> 0) PFofex,
            (select distinct or_idpers, or_refope, OR_PROYECTO
               from BAS_MEN.MAESTRO_PROJECT_FINANCE where or_refope is not null) PFref,
            (select distinct or_idpers, OR_PROYECTO from BAS_MEN.MAESTRO_PROJECT_FINANCE where or_refope is null) PFpers
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS),
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS
          , (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = PV_FECHA) acc
          , (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX    where OR_IDMES = PV_FECHA) titu
--    WHERE FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG', 'TITACT2', 'NETTING')
/*19/03/2020 - NAV - TM-614 - calcular todas las variables de proceso para los eliminados por TITACT*/
/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
      WHERE FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'TITACT2', 'NETTING', 'TITACT', 'STSORI')
      --and b.or_idreg < acc.idreg_new
        AND b.or_idreg <> acc.idreg_new   /* RMR 15/04/2020 */
        AND b.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */
        and b.or_nifcif = PFpers.OR_IDPERS(+)
        and b.OR_nifcif = PFref.OR_IDPERS(+)
        and b.OR_REFOPE = PFref.OR_REFOPE(+)
        AND b.OR_ctacli = PFofex.OR_ctacli(+)
        AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
        AND OR_ENTITY IN (81, 8211)
        AND (IN_TIPOREG IN ('SA', 'PX', 'OXC', 'MMSA', 'MMOXC', 'AVSA', 'CESA', 'IIC-LTA', 'IIC-FBA') OR IN_SEGMBS0 = '201');     --NAV 18/07/2019 - Añadido - 'AVSA', 'CESA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */

    COMMIT;

--06/02/2019 - Nav - En lugar de actualizar estos campos en BASILEA actualizamos en la tabla MAESTRO_SUCEPT_TEMP
--  MERGE /*+ parallel(dst 4) parallel(src 4) */ INTO bas_men.basilea dst
--
  MERGE /*+ parallel(dst 4) parallel(src 4) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP dst
     USING (SELECT IN_IDCALIFIC, OR_TITULARITAT, OR_FECPUN0, OR_MODRAT0, OR_PUNT0, OR_RATINT, OR_SITUAC0, IN_IDCALIFICREL, OR_PESOW, OR_PUNTGRUP, CODMODELO_REL
              FROM BAS_MEN.RATINGS_RECUPERADOS) sCR
     ON (dst.OR_TITULARITAT = scR.OR_TITULARITAT AND IN_SEGMBS0 <> '201') -- RMR 16/01/2020 Añadido filtro para no actualizar los Project Finance
     WHEN MATCHED THEN
        UPDATE
           SET dst.IN_IDCALIFIC     = scr.IN_IDCALIFIC,
               dst.OR_FECPUN0       = scr.OR_FECPUN0,
               dst.OR_MODRAT0       = scr.OR_MODRAT0,
               dst.OR_PUNT0         = scr.OR_PUNT0,
               dst.OR_RATINT        = scr.OR_RATINT,
               dst.OR_SITUAC0       = scr.OR_SITUAC0,
               dst.IN_IDCALIFICREL  = scr.IN_IDCALIFICREL,
               dst.OR_PESOW         = scr.OR_PESOW,
               dst.OR_PUNTGRUP      = scr.OR_PUNTGRUP,
               dst.or_modgrup       = scr.CODMODELO_REL;

--FIN 06/02/2019 - Nav

    COMMIT;

    VN_NUMERR:= 2;

-------------------------------------------------------
-- CARGA SOLO_FSR (Identifica los Factoring sin recurso)
-- Tabla que guarda los registros q únicamente son Derechos de Cobro.
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SOLO_FSR');

   INSERT  INTO BAS_MEN.SOLO_FSR
     SELECT A.OR_TITULARITAT, A.CONCED
       FROM (SELECT OR_TITULARITAT
                  , SUM(CASE -- @RMC 20090930: FACTORING CON COBERTURA NO SUMA
                          WHEN OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009'
                                             , 'FA 00010', 'FA 00011', 'FA 00012') THEN
                               0
                          ELSE OR_DISPTO+OR_DISBLE
                        END) CONCED
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP
              WHERE (IN_SEGMBS = 'Derechos Cobro'
                     or or_proced in('FORFAITING')) --@RMC 20100331: Se añade forfaiting
                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                AND FI_TIPEXP <> 'Ajustes'
              group by OR_TITULARITAT) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP
              WHERE IN_SEGMBS != 'Derechos Cobro'
                and or_proced not in('FORFAITING') --@RMC 20100331: Se añade forfaiting
                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                AND FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

   COMMIT;

    VN_NUMERR:= 6;

-------------------------------------------------------
-- CARGA MAESTRO_CV (Identifica los Factoring sin recurso No Cliente)
-- Tabla que guarda los registros q únicamente son Derechos de Cobro y no tienen una titularidad de cuenta vista. 9/07/07.
-------------------------------------------------------
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CV');

   INSERT  INTO BAS_MEN.MAESTRO_CV
      SELECT A.IN_TITULFIN,  MAX(DECODE(C.TIPPRODUCT,'DV',1,0)) CVISTA, A.CONCED
        FROM BAS_MEN.SOLO_FSR A,
             BAS_MEN.TITULARITAT_COMPTE C
       WHERE A.IN_TITULFIN = C.CODTIT(+)
         AND A.IN_TITULFIN NOT IN (0,9)
       GROUP BY A.IN_TITULFIN, A.CONCED;

   COMMIT;

    VN_NUMERR:= 7;

-------------------------------------------------------
-- CARGA MAESTRO_CV_PROD
-- Tabla que guarda las titularidades con código de producto de Factoring con cobertura.
-- identificados por los productos FA 00013 y FA 00014
-- @RMC: Modificacion 30-09-2009 Se añaden los productos FA 00009, FA 00010, FA 00011, FA 00012
-------------------------------------------------------
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CV_PROD');

   INSERT  INTO BAS_MEN.MAESTRO_CV_PROD
      SELECT A.OR_TITULARITAT, '?',PV_FECHA
        FROM (SELECT /*+ parallel (a 8) */ DISTINCT OR_TITULARITAT
                FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
               WHERE OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012')
                 AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                 AND FI_TIPEXP <> 'Ajustes') A
           , (SELECT /*+ parallel (c 8) */ DISTINCT OR_TITULARITAT
                FROM BAS_MEN.MAESTRO_SUCEPT_TEMP c
               WHERE OR_CODPRODO NOT IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012')
                 AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                 AND FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

   COMMIT;

     VN_NUMERR:= 8;

-------------------------------------------------------
-- CARGA MAESTRO_CV_PROD_FSR (Identifica Factoring sin Recurso con Cobertura)
-- Tabla que guarda las titularidades con código de producto de Factoring con cobertura. 30/10/07.
-- identificados por los productos FA 00013 y FA 00014  que ademas son derechos de cobro exclusivamente.
-------------------------------------------------------
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CV_PROD_FSR');

   INSERT  INTO BAS_MEN.MAESTRO_CV_PROD_FSR
      SELECT A.ID_TITULARITAT
        FROM BAS_MEN.MAESTRO_CV_PROD  A
           , BAS_MEN.SOLO_FSR         B
      WHERE A.ID_TITULARITAT = B.IN_TITULFIN;

   COMMIT;

    VN_NUMERR:= 8;

-------------------------------------------------------
-- LOOP BASILEA2
-- Calculo FI_EDAIRB
-------------------------------------------------------
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_SUCEPT_2');

  FOR CUR IN BASILEA2 LOOP

    VV_FI_EXCEDID:= 'NO';

    VN_COUNT:= VN_COUNT + 1;

     BAS_MEN.FNC_CALCUL_CCF('AIRB',
                             PN_OPC_DER,
                             PN_F,
                             UPPER(CUR.IN_SEGMBS),
                             UPPER(CUR.FI_TIPEXP),
                             UPPER(CUR.OR_PROCED),
                             UPPER(CUR.OR_TIPOPE),
                             CUR.OR_VIDINI,
                             CUR.OR_VIDRES,
                             CUR.OR_CLUNICUENT,
                             'NO',
                             CUR.OR_TIPAVA,
                             CUR.IN_SEGMBSINI,
                             CUR.OR_EPIIND,
                             CUR.FI_EPICON,
                             CUR.IN_SEGMBS0,
                             VV_FI_EXCEDID,
                             CUR.OR_CTAIND,
                             0,
                             CUR.OR_TIPGAR,
                             CUR.OR_ENTITY,
                             CUR.IN_SUCEPT,
                             CUR.IN_TIPOREG,
                             CUR.OR_SEGFIC, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                             CUR.OR_INDHOLDING,
                             CUR.IN_SEGMBS2,
                             VN_FI_CCFAIRB,
                             PV_RET);

        VN_FI_EADAIRB:= CUR.TOTAL * VN_FI_CCFAIRB;

/* 16/12/2020 - INI */
--      IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,VN_FI_EADAIRB + CUR.OR_FAIRVA);
--      ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.OR_EPIIND,1,5) NOT IN ('02002','02003','02004') THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
--      END IF;

        IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
           VN_FI_EADAIRB:= VN_FI_EADAIRB + BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '01' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '02' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.IN_FAIRVABO - CUR.OR_FAIRVA);
        END IF;
/* 16/12/2020 - FIN */

        IF UPPER(CUR.IN_INDMOR) = 'SI' THEN
             VN_FI_EADAIRB:= CUR.TOTAL;
        END IF;

        VN_NUMERR:= 6;

        INSERT INTO BAS_MEN.TEMP_SUCEPT_2 (OR_IDREG, FI_EADAIRB)
            VALUES (CUR.OR_IDREG, VN_FI_EADAIRB);

        UPDATE BAS_MEN.MAESTRO_SUCEPT_TEMP
           SET FI_EADAIRB =   VN_FI_EADAIRB
         WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;

     VN_NUMERR:= 9;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET  NUM_ERROR = VN_NUMERR
     WHERE PROCES = '9.0 FNC_SUCEPT_EMPRESAS '||PV_TABLA
       AND ESTAT  = 'INICIADO';

    COMMIT;

-------------------------------------------------------
-- CARGA MAESTRO_TOTAL_CONCEDIDO
-- Tabla que contiene el total concedido por titularidad
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOTAL_CONCEDIDO');

  INSERT  /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO c
     SELECT /*+ parallel (a 8) */ OR_TITULARITAT, MAX(OR_FECOPE) FECOPE,
            SUM(OR_DISPTO+OR_DISBLE+OR_AVALES+DECODE(OR_REPOS,0,0,A.FI_EADAIRB)+DECODE(OR_FUTURS,0,0,A.FI_EADAIRB)) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_TEMP A
      WHERE  A.OR_CODPRODO NOT IN('FA 00013', 'FA 00014', 'FA 00009'
                               , 'FA 00010', 'FA 00011', 'FA 00012') -- @RMC 20090930: FACTORING CON COBERTURA NO TIENEN RIESGO
        AND A.OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
      GROUP BY OR_TITULARITAT;

   COMMIT;

    VN_NUMERR:= 10;

-------------------------------------------------------
-- CARGA MAESTRO_TITULARITAT_PERSONA
-- Tabla que identifica las mulititularidades que se encuentran en el maestro de susceptibilidad
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITULARITAT_PERSONA');

  INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_TITULARITAT_PERSONA c
  SELECT /*+ parallel (a 8) */ DISTINCT OR_TITULARITAT
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
  WHERE OR_TITULARITAT IN (
     SELECT CODTIT
       FROM BAS_MEN.TITULARITAT_PERSONA
      GROUP BY CODTIT
      HAVING COUNT(*) > 1);

  COMMIT;

    VN_NUMERR:= 11;

-------------------------------------------------------
-- CARGA MAESTRO_AJUSTES
-- Tabla que identifica aquellas titularidades que exclusivamente son Ajustes
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_AJUSTES');

  INSERT /*+ parallel (x 8) */ INTO BAS_MEN.MAESTRO_AJUSTES x
      SELECT A.OR_TITULARITAT, 'EMAJUS' ORIGEN
       FROM (SELECT /*+ parallel (a 8) */ DISTINCT OR_TITULARITAT
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT /*+ parallel (c 8) */ DISTINCT OR_TITULARITAT
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP c
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

  COMMIT;

    VN_NUMERR:= 12;

-------------------------------------------------------
-- CARGA MAESTRO_PERSONAS_JURIDICAS
-- Tabla que identifica aquellas titularidades  100% personas jurídicas
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERSONAS_JURIDICAS');

  INSERT /*+ parallel (x 8) */ INTO BAS_MEN.MAESTRO_PERSONAS_JURIDICAS x
      SELECT DISTINCT A.CODTIT,'JURIDICA'
       FROM (SELECT /*+ parallel (a 8) */ DISTINCT CODTIT
               FROM BAS_MEN.TITULARITAT_PERSONA a
              WHERE TIPIDE IN (11,12)) A,
            (SELECT /*+ parallel (b 8) */ DISTINCT CODTIT
               FROM BAS_MEN.TITULARITAT_PERSONA b
              WHERE TIPIDE NOT IN (11,12)) B
      WHERE A.CODTIT = B.CODTIT(+)
        AND B.CODTIT IS NULL;

COMMIT;
-------------------------------------------------------
-- CARGA MAESTRO_MTIT
-- Tabla que contiene las MTITs y las identifica como juridicas al 100% o no
-------------------------------------------------------
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MTIT');

INSERT  INTO BAS_MEN.MAESTRO_MTIT
select A.CODTIT, DECODE(B.TIPO,'JURIDICA','JURIDICA','NO JURIDICA') from
BAS_MEN.MAESTRO_TITULARITAT_PERSONA A,
BAS_MEN.MAESTRO_PERSONAS_JURIDICAS  B
WHERE A.CODTIT=B.OR_TITULARITAT(+);

COMMIT;

    VN_NUMERR:= 12;

-------------------------------------------------------
-- CARGA MAESTRO_PROCED_NOSUSCEPT
-- Identificación de las titularidades que solamente tienen procedencias no susceptibles
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_NOSUSCEPT');

  INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_PROCED_NOSUSCEPT c
  SELECT DISTINCT A.OR_TITULARITAT, 'EMPROC'
            FROM (SELECT /*+ parallel (a 8) */ DISTINCT A.OR_TITULARITAT
                    FROM BAS_MEN.MAESTRO_SUCEPT_TEMP A,
                         BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT B
                   WHERE A.OR_PROCED=B.AT_PROCED
                     AND A.FI_TIPEXP <> 'Ajustes'
                     AND SUCEPTIBLE = 'N'
                     AND B.AT_PROCED not in('PR-MOROS','INV-C/C-CO','INV-C/E-CO', 'CONTENCIOS', 'PR-CONTENC')) A,   --@XCG 201012: No se tienen en cuenta para marcarse como emproc.
                 (SELECT /*+ parallel (a 8) */ DISTINCT A.OR_TITULARITAT
                    FROM BAS_MEN.MAESTRO_SUCEPT_TEMP A,
                         BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT B
                   WHERE A.OR_PROCED=B.AT_PROCED
                     AND A.FI_TIPEXP <> 'Ajustes'
                     AND NOT (SUCEPTIBLE = 'N'
                       AND B.AT_PROCED not in('PR-MOROS','INV-C/C-CO','INV-C/E-CO', 'CONTENCIOS', 'PR-CONTENC'))) B   --@XCG 201012: No se tienen en cuenta para marcarse como emproc.
            WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

   COMMIT;

     VN_NUMERR:= 13;

-------------------------------------------------------
-- CARGA MAESTRO_PROCED
-- Identificación de la procedencia de la titularidad
-- Tabla que identifica aquellas titularidades que exclusivamente son
-- avales, tarjetas, tipope o una combinación de tarjetas, avales , factoring y descubiertos
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED');

   --tarjetas
  INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_PROCED c
     SELECT A.OR_TITULARITAT, 'TARGES'
       FROM (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT /*+ parallel (a 8) */ a.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance'
                AND (OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC')))) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT /*+ parallel (b 8) */ b.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP b
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE  IN_SEGMBS <> 'Project Finance'
                AND OR_TIPOPE != 'TC' AND (OR_PROCED NOT IN ('TARGES','TARGES-PC'))) B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

  COMMIT;

  VN_NUMERR:= 14;

--avales
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED d
     SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'AVALES'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (SELECT /*+ parallel (a 8) */ a.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
                              WHERE FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))) A,
                    (SELECT DISTINCT OR_TITULARITAT
                       FROM (SELECT /*+ parallel (b 8) */ b.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP b
                              WHERE FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE NOT IN ('AF','AT')
                        AND OR_PROCED NOT IN ('AVALES','ES-AVALES')) B
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN IS NULL;

    COMMIT;

--se identifican los factoring para que así no se traten mas adelante como riesgo diverso
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED d
     SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'FACT'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (a 8) */ a.* from BAS_MEN.MAESTRO_SUCEPT_TEMP a
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE  IN_SEGMBS <> 'Project Finance'
                        AND (in_segmbs   = 'Derechos Cobro')) A,
                    (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (b 8) */ b.* from BAS_MEN.MAESTRO_SUCEPT_TEMP b
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND NOT (in_segmbs   = 'Derechos Cobro')) B
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN IS NULL;

  COMMIT;

  VN_NUMERR:= 15;

--se identifican los descubiertos para que así no se traten mas adelante como riesgo diverson
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED d
     SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'DESCUBIERT'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (a 8) */ a.* from BAS_MEN.MAESTRO_SUCEPT_TEMP a
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE  IN_SEGMBS <> 'Project Finance'
                        AND (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) A,
                    (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (b 8) */ b.* from BAS_MEN.MAESTRO_SUCEPT_TEMP b
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND NOT (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) B
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN IS NULL;

  COMMIT;

--Se introducen registros que combinan TARGETAS/AVALES/FACTORING SIN RECURSO 5/11/07.

  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED d
  SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'TA-AV-FA'
               FROM (SELECT DISTINCT OR_TITULARITAT   -- RECOGE TAJETAS, AVALES , FACTORING O DESCUBIERTOS
                       FROM (select /*+ parallel (a 8) */ a.* from BAS_MEN.MAESTRO_SUCEPT_TEMP a
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE (IN_SEGMBS <> 'Project Finance')
                        AND (   (OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC'))) --TARJETAS
                             OR ((OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))) --AVALES
                             OR (in_segmbs   = 'Derechos Cobro') --FACTORING
                             OR ( OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) --DESCUBIERTO  MODIFICACIÓN
                     ) A,
                    (SELECT DISTINCT OR_TITULARITAT   -- RECOGE LOS QUE NO TIENEN NI TARJETAS NI FACTORING NI AVALES NI DSCUBIERTOS
                       FROM (select /*+ parallel (b 8) */ b.* from BAS_MEN.MAESTRO_SUCEPT_TEMP b
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE (IN_SEGMBS <> 'Project Finance')
                        AND NOT(OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC'))) --TARJETAS
                        AND NOT((OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES')))  --AVALES
                        AND NOT(IN_SEGMBS = 'Derechos Cobro') --FACTORING
                        AND NOT ( OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC')) --DESCUBIERTO  MODIFICACIÓN
                                 ) B
               WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                       AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED D,
            BAS_MEN.SOLO_FSR E
            WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
              AND C.OR_TITULARITAT = E.IN_TITULFIN(+)
          AND D.IN_TITULFIN IS NULL
          AND E.IN_TITULFIN IS NULL;

   COMMIT;

   VN_NUMERR:= 16;

-- Se introducen registros solamente tienen un tipope '?' y su procedencia no es susceptible. 9/11/07.
-- se consulta el BAS_MEN.MAESTRO_PROCED_TIPOPE para identificar las no suceptibles
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE');

COMMIT;

 INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE d
     SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'TIPOPE_INT'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (a 8) */ a.* from BAS_MEN.MAESTRO_SUCEPT_TEMP a  where FI_TIPEXP <> 'Ajustes')
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE = '?'
                        AND OR_PROCED NOT IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                    ) A
                  ,(SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (b 8) */ b.* from BAS_MEN.MAESTRO_SUCEPT_TEMP  b where FI_TIPEXP <> 'Ajustes')
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE <> '?'
                   ) B
             WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
               AND B.OR_TITULARITAT IS NULL
            ) C
          , (SELECT * FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN NOT IN('TA-AV-FA', 'DESCUBIERT')) D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN   IS NULL;

  COMMIT;

 VN_NUMERR:= 17;

  --se identifican las titularidades con tipope   ('?','AA','AD','DC','IP','LI','OT','RF','RV','SS','TC') -- 201512 Se añaden las 'OV' por arranque aplicaciones BDU
  --@RMC Modificacion 30-09-2009: Se eliminan del filtro las operacion con TIPOPE TC o DC
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE d
     SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'TIPOPE'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (a 8) */ a.* from BAS_MEN.MAESTRO_SUCEPT_TEMP  a where FI_TIPEXP <> 'Ajustes')
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE IN ('?','AA','AD','IP',/*'LI',*/'OT','RF','RV','SS'/*,'TC','DC'*/, 'OV') -- 201512 Se añaden las 'OV' por arranque aplicaciones BDU
                    ) A -- /*@RMC 201012: LI se considera susceptible */
                  , (SELECT DISTINCT OR_TITULARITAT
                       FROM (select /*+ parallel (b 8) */ b.* from BAS_MEN.MAESTRO_SUCEPT_TEMP  b where FI_TIPEXP <> 'Ajustes')
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE NOT IN ('?','AA','AD','IP',/*'LI',*/'OT','RF','RV','SS'/*,'TC','DC'*/, 'OV') -- 201512 Se añaden las 'OV' por arranque aplicaciones BDU
                     ) B --/*@RMC 201012: LI se considera susceptible */
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL
            ) C
          , (SELECT * FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN NOT IN('TA-AV-FA', 'DESCUBIERT')) D
          , BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE E
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN   IS NULL
        AND C.OR_TITULARITAT = E.IN_TITULFIN(+)
        AND E.IN_TITULFIN   IS NULL; -- JCV 16/04/2015


   UPDATE BAS_MEN.CONTROL_PROCES
      SET NUM_ERROR = VN_NUMERR
    WHERE PROCES = '9.0 FNC_SUCEPT_EMPRESAS '||PV_TABLA
      AND ESTAT  = 'INICIADO';

  COMMIT;

-- Descubiertos
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_DESCUB');

  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.MAESTRO_PROCED_DESCUB d
     SELECT A.OR_TITULARITAT, 'DESCUBIERTOS'
       FROM (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT /*+ parallel (a 8) */ a.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance'
                AND (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT /*+ parallel (b 8) */b.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP b
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance'
                AND (OR_PROCED NOT IN ('INV-C/C-DC','INV-C/E-DC'))) B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

  COMMIT;

-- AVALES CON EOPERACIONES ANTERIORES AL AÑO 2001
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_AVA_OLD');
  COMMIT;

  VN_NUMERR:= 18;

  INSERT  INTO BAS_MEN.MAESTRO_PROCED_AVA_OLD
  SELECT DISTINCT A.*, 'AVALES_OLD'
    FROM (SELECT OR_TITULARITAT
            FROM BAS_MEN.MAESTRO_PROCED PR
               , BAS_MEN.MAESTRO_SUCEPT_TEMP SU
           WHERE PR.IN_TITULFIN = SU.OR_TITULARITAT
             AND SU.FI_TIPEXP <> 'Ajustes'
             AND SU.IN_SEGMBS <> 'Project Finance'
             AND SU.OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
             AND PR.ORIGEN = 'AVALES'
             AND SU.OR_FECOPE<20010101) A,
         (SELECT OR_TITULARITAT
            FROM BAS_MEN.MAESTRO_PROCED PR
               , BAS_MEN.MAESTRO_SUCEPT_TEMP SU
           WHERE PR.IN_TITULFIN = SU.OR_TITULARITAT
             AND SU.FI_TIPEXP <> 'Ajustes'
             AND SU.IN_SEGMBS <> 'Project Finance'
             AND SU.OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
             AND PR.ORIGEN = 'AVALES'
             AND SU.OR_FECOPE>=20010101) B
   WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
     AND B.OR_TITULARITAT IS NULL;

   COMMIT;

-- IDENTIFICA LAS TITULARIDADES CON OPERACIONES PR-MOROS
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_MOROSOS');
  COMMIT;

  /* XCG 201104: Si parte de la titularidad tiene procedencia morosos */
  INSERT /*+ parallel (b 8) */ INTO BAS_MEN.MAESTRO_PROCED_MOROSOS b
  SELECT DISTINCT a.OR_TITULARITAT, 'PR-MOROS'
    from (select /*+ parallel (a 8) */ or_titularitat
            FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
           WHERE FI_TIPEXP <> 'Ajustes'
             AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
             AND OR_PROCED in ('PR-MOROS' ,'INV-C/C-CO','INV-C/E-CO','CONTENCIOS', 'PR-CONTENC')) A;

  COMMIT;

    VN_NUMERR:= 19;

-------------------------------------------------------
-- CARGA MAESTRO_TOTAL_CONCEDIDO_AVALES
-- Tabla que contiene el total concedido de los avales >=2001 de titularidades que solamente son avales
-- VJB-ACC 080110
-------------------------------------------------------
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_AVALES');

INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_AVALES c
     SELECT /*+ parallel (a 8) */ A.OR_TITULARITAT, MAX(A.OR_FECOPE) FECOPE, SUM(OR_AVALES) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_TEMP   A,
                  BAS_MEN.MAESTRO_PROCED B
      WHERE A.OR_TITULARITAT=B.IN_TITULFIN
              AND B.ORIGEN='AVALES'
      GROUP BY A.OR_TITULARITAT;

COMMIT;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOT_CONC_AVALES_DIVR');

INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_TOT_CONC_AVALES_DIVR c
SELECT /*+ parallel (a 8) */ OR_TITULARITAT IN_TITULFIN, SUM(OR_AVALES) TOT_AVALES
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))
GROUP BY OR_TITULARITAT;

COMMIT;

VN_NUMERR:= 20;

-----------------------------------------------------------------------------------------------
-- CARGA MAESTRO_TOT_CONC_TARGES_DIVR TITULARIDADES RIESGO DIVERSO
-----------------------------------------------------------------------------------------------
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOT_CONC_TARGES_DIVR');

INSERT /*+ parallel (b 8) */ INTO BAS_MEN.MAESTRO_TOT_CONC_TARGES_DIVR b
SELECT /*+ parallel (a 8) */ OR_TITULARITAT IN_TITULFIN, SUM(OR_DISPTO + OR_DISBLE) TOT_CONC
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC')))
 GROUP BY OR_TITULARITAT;

 COMMIT;

 VN_NUMERR:= 21;

 -------------------------------------------------------------
-- CARGA MAESTRO_FACTORING_DIVR TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_FACTORING_DIVR');

INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_FACTORING_DIVR c
SELECT IN_TITULFIN
     , CASE
            WHEN CONCED <= 1800 THEN 1
            ELSE  0
       END RIESGO_DIVERSO
     , CASE
            WHEN CONCED <= 1800 THEN 'DIVR'
            ELSE  'SUCP'
       END IN_SUCEPT
  FROM (SELECT /*+ parallel (a 8) */ OR_TITULARITAT IN_TITULFIN
             , SUM(CASE
                     WHEN OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009'
                                        , 'FA 00010', 'FA 00011', 'FA 00012') THEN
                          0
                     ELSE OR_DISPTO+OR_DISBLE
                   END) CONCED
             , 0 PROMOTOR
          FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
         WHERE IN_SEGMBS = 'Derechos Cobro'
           AND OR_TITULARITAT IN (SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
         group by OR_TITULARITAT) A
     , BAS_MEN.TITULARITAT_COMPTE C
 WHERE A.IN_TITULFIN = C.CODTIT(+)
   AND A.IN_TITULFIN IN (SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
   AND A.IN_TITULFIN NOT IN (0,9)
GROUP BY A.IN_TITULFIN, A.CONCED;

COMMIT;

-------------------------------------------------------------
-- CARGA MAESTRO AVALES POSTERIORES 2001 PERTANECIENTE TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_AVAL_POST_DIVR');

INSERT /*+ parallel (b 8) */ INTO BAS_MEN.MAESTRO_PROCED_AVAL_POST_DIVR b
SELECT /*+ parallel (a 8) */ IN_TITULFIN, COUNT(*) NUM_AVALES
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))
   AND OR_FECOPE >= 20010101
GROUP BY IN_TITULFIN;

  COMMIT;

  VN_NUMERR:= 22;

-------------------------------------------------------------
-- CARGA MAESTRO TARGETAS PERTANECIENTE TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_TARGES_DIVR');

INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_PROCED_TARGES_DIVR c
SELECT /*+ parallel (a 8) */ IN_TITULFIN, OR_SEGGES
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
 WHERE IN_TITULFIN IN (SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE = 'TC' OR (/*OR_TIPOPE = '?' AND*/ OR_PROCED IN ('TARGES','TARGES-PC')))
 GROUP BY IN_TITULFIN, OR_SEGGES;

 COMMIT;

 -------------------------------------------------------------
-- CARGA MAESTRO DESCUBIERTOS PERTANECIENTE TITULARIDADES RIESGO DIVERSO --- MODIFICACIÓN : 26/03/09
-------------------------------------------------------------
 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_DESCUB_DIVR');

INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_PROCED_DESCUB_DIVR c
SELECT /*+ parallel (a 8) */ IN_TITULFIN, 'DESCUBIERTOS'
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP a
 WHERE IN_TITULFIN IN (SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC')
 GROUP BY IN_TITULFIN, 'DESCUBIERTOS';

   COMMIT;

 ----------------------------------------------------------------------------------------
-- CARGA MAESTRO QUE IDENTIFICA TODAS LAS TITULARIDADES CON NUMERO DE OFICINA 602
-----------------------------------------------------------------------------------------
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EMOFIN');

  INSERT /*+ PARALLEL (F 8) */ INTO BAS_MEN.MAESTRO_EMOFIN F
           SELECT B.OR_TITULARITAT
           FROM (SELECT /*+ PARALLEL (A 8) */ DISTINCT OR_TITULARITAT
                   FROM BAS_MEN.MAESTRO_SUCEPT_TEMP A
                  WHERE OR_NUMOFI='602'
                    AND OR_TITULARITAT NOT IN (0,9)) B,
                (SELECT /*+ PARALLEL (C 8) */ DISTINCT OR_TITULARITAT
                   FROM BAS_MEN.MAESTRO_SUCEPT_TEMP C
                  WHERE OR_NUMOFI <> '602'
                    AND OR_TITULARITAT NOT IN (0,9)) D
           WHERE B.OR_TITULARITAT  = D.OR_TITULARITAT(+)
           AND D.OR_TITULARITAT IS NULL;

commit;

    VN_NUMERR:= 23;
   VN_COUNT:=0;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_TEMP_2');

/************************************************************************************/
/* LLAMADA A LA FUNCION                                                             */
/************************************************************************************/
insert /*+ PARALLEL (x 8) */ into BAS_MEN.MAESTRO_SUCEPT_TEMP_2 x
select cur.*
  from table(BAS_MEN.SUCEPT.F_SUCEPT(cursor(select /*+ PARALLEL(ua 8) */ UA.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP ua),PN_FECPRO)) cur;

COMMIT;

VN_NUMERR:= 24;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONTAGIO_SUCEPT');

INSERT /*+ parallel (a 8) */ INTO BAS_MEN.CONTAGIO_SUCEPT a
SELECT a.clave, nvl(c.in_sucept,b.in_sucept) as IN_SUCEPT, 0 orden
      FROM (SELECT /*+ parallel (C1 8) */ DISTINCT decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) clave
              FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_2  C1
             WHERE (IN_SUCEPT = 'EMTIPO'
                    or SUBSTR(IN_SUCEPT,1,4) = 'EMPE'
                   )
                ) A,
           (SELECT /*+ parallel (C2 8) */ DISTINCT decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) clave, in_sucept
              FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_2  C2
             WHERE IN_SUCEPT = 'EMSUCP'
             ) B
           ,
           ( SELECT /*+ parallel (C3 8) */ DISTINCT decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) clave, in_sucept
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_2 C3
              WHERE OR_CLAVISO IN (9051,9052,9053,9054,9050)
                AND NOT (OR_CLAVISO = 9053 AND NVL(IN_REFINAN,0) = 1
                AND TO_NUMBER(TO_CHAR(TO_DATE(replace(OR_FECALTBLO,'?',null),'YYYY-MM-DD'),'YYYYMMDD')) <= TO_NUMBER(SUBSTR(PN_FECPRO,1,6)))
             ) C
     WHERE A.clave = B.clave
       AND A.CLAVE = C.CLAVE(+);

COMMIT;

VN_NUMERR:= 25;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONTAGIO_SUCEPT_3');

INSERT /*+ parallel (D 8) */ INTO BAS_MEN.CONTAGIO_SUCEPT_3 D
SELECT /*+ parallel (C 8) */ DISTINCT decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) clave,
               decode(in_sucept, 'EMSUCP', 'EMBLQR', in_sucept) in_sucept,
               decode(in_sucept, 'EMPRMO', 3, 'NCBLQR', 1, 'EMBLQR', 2, 'EMSUCP', 4, 'EMNSSP', 5) orden
          FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_2 C
         WHERE IN_SUCEPT in ('EMPRMO','NCBLQR','EMNSSP', 'EMBLQR')
            OR (IN_SUCEPT = 'EMSUCP'
           AND OR_CLAVISO IN (9051,9052,9053,9054,9050)
           and NOT (OR_CLAVISO = 9053 AND NVL(IN_REFINAN,0) = 1)
           AND TO_NUMBER(TO_CHAR(TO_DATE(replace(OR_FECALTBLO,'?',null),'YYYY-MM-DD'),'YYYYMMDD')) <= TO_NUMBER(SUBSTR(PN_FECPRO,1,6)));

commit;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONTAGIO_SUCEPT_2');

INSERT /*+ parallel (D 8) */ INTO BAS_MEN.CONTAGIO_SUCEPT_2 D
SELECT distinct a.CLAVE, IN_SUCEPT
  FROM (select /*+ parallel (e 8) */ clave, min(orden) orden from BAS_MEN.CONTAGIO_SUCEPT_3 e group by clave) A,
       (select /*+ parallel (c 8) */ DISTINCT decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) clave,
               decode(in_sucept, 'EMSUCP', 'EMBLQR', in_sucept) in_sucept,
               decode(in_sucept, 'EMPRMO', 3, 'NCBLQR', 1, 'EMBLQR', 2, 'EMSUCP', 4, 'EMNSSP', 5) orden
          FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_2 C
         WHERE IN_SUCEPT in ('EMPRMO','NCBLQR','EMNSSP', 'EMBLQR')
            OR (IN_SUCEPT = 'EMSUCP'
           AND OR_CLAVISO IN (9051,9052,9053,9054,9050)
           and NOT (OR_CLAVISO = 9053 AND NVL(IN_REFINAN,0) = 1)
           AND TO_NUMBER(TO_CHAR(TO_DATE(replace(OR_FECALTBLO,'?',null),'YYYY-MM-DD'),'YYYYMMDD')) <= TO_NUMBER(SUBSTR(PN_FECPRO,1,6)))) b
 WHERE a.ORDEN = b.orden
   and a.clave = b.clave;

COMMIT;

VN_NUMERR:= 26;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT');

INSERT /*+ parallel (a 8) */ INTO BAS_MEN.MAESTRO_SUCEPT A
SELECT /*+ parallel (B 8) */ distinct OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
       OR_AVALES, OR_FUTURS, OR_REPOS, B.OR_IDPERS, B.OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,
       0, IN_SEGMBS0,  OR_SITUAC0, IN_SRATIN, OR_TITULARITAT IN_TITULFIN, DECODE(C.IN_SUCEPT, NULL, NVL(D.IN_SUCEPT, B.IN_SUCEPT), C.IN_SUCEPT),
       OR_SEGGES, OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, OR_NUMOFI, IN_VTAGRU, IN_SEGMBSINI, OR_PUNT0, OR_PUNT1,
       IN_SEGMBS2, OR_INDHOLDING, FI_TIPEXP, OR_NOMPER, OR_CODPRODO, 0,
       OR_PROYECTO, B.OR_CTACLI, IN_INDMOR, 0, IN_IDGRUPO, OR_AJUVAL, OR_CLUNICUENT, NVL(B.IN_REFINAN,0), OR_FECPUN0, OR_RATINT, IN_IDCALIFIC, IN_IDCALIFICREL, OR_MODRAT0,
       b.OR_PESOW, b.OR_PUNTGRUP, b.OR_SEGFAC, b.OR_SEGFIC, b.OR_MODGRUP /* RMR 26/02/2020 Añadido campo de modelo de grupo */
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_2 B,
       BAS_MEN.contagio_sucept C,
       BAS_MEN.contagio_sucept_2 D
 WHERE decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) = C.CLAVE(+)
   AND decode(nvl(or_titularitat,0), 0, OR_IDPERS, 9, or_idpers, or_titularitat) = D.CLAVE(+);

COMMIT;

  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '9.0 FNC_SUCEPT_EMPRESAS '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

--INI 06/02/2019 - Nav - MAPA_USO_EMP

  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('12.0 FNC_MAPA_USO '||PV_TABLA,SYSDATE, 'INICIADO');

  COMMIT;

   VN_NUMERR:= 27;

   -- 22/03/2019 Renta Fija de OFEX pasa a tratarse en el MdU de Ofex

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_EMPRESAS_ORIG');

  INSERT /*+ parallel (d 8)*/ INTO BAS_MEN.MAPA_USO_EMPRESAS_ORIG d
       (OR_IDREG,OR_IDPERS,OR_TIPIDE,OR_NIFCIF,OR_TIPIDEIBM,OR_NIFCIFIBM,OR_TITULARITAT, OR_NOMPER,OR_PERSON,OR_IDECNO,OR_IDCNAE,
       OR_PROCED,
        OR_NUMOFI,OR_REFOPE,OR_REFOPE2,OR_TIPOPE,OR_FECOPE,OR_FECVTO,OR_VIDINI,
        OR_VIDRES,IN_ANTIGU,OR_SEGGES,OR_SUBSEG,OR_TIPAVA,
        OR_TIPGAR,OR_DESTPR,OR_TIPOFI,OR_TIPOPR, OR_IMPLTV,OR_VALTAS,OR_CONCED,OR_IDPAIS,
        OR_CODSOL,IN_BCOATL,IN_ITITSN,IN_INDMOR,OR_IDPRO1,OR_ENTITY,OR_DIVISA,FI_TIPEXP,OR_DISPTO,OR_DISBLE,
        OR_AVALES,OR_DISPTOCON,OR_DISBLECON,OR_AVALESCON,OR_AJUVALCON,IN_VTAGRU,OR_RATINT,
        OR_MODRAT0,OR_SEGRIE,OR_PUNT0,OR_SITUAC0,
        OR_FECPUN0,IN_SEGMBSINI,IN_SEGMBS0,
        IN_SEGMBS1,IN_SEGMBS2,IN_SEGMBS,
        IN_SUCEPT, OR_CLUNIENT,OR_CLUNIPROD,OR_CLUNICONTR,OR_CLUNICUENT,OR_CLUNIOPERA,
        FI_MESCURA,OR_FECCAR,OR_PRESTMIG, OR_CLAVISO, OR_FECALTBLO, IN_BLOQ, IN_IDCALIFIC,OR_SEGFIC,IN_IDCALIFICREL,
        OR_REPOS, OR_FUTURS, FI_EADAIRB, OR_CONTRATO_CRDGBL,
        OR_INDHOLDING, OR_CODPRODO, OR_PROYECTO, OR_CNAEREL,IN_IDGRUPO, OR_CTACLI, OR_NUMPERSONA, OR_PESOW, OR_PUNTGRUP, OR_SEGFAC, OR_MODGRUP /* RMR 26/02/2020 Añadido campo de modelo de grupo */
        , FI_ELIMI1) /* NAV - 05/05/20 - TM-1428 - Incluir FI_ELIMI1 en el MDU Empresas */
SELECT /*+ full(a) full(b) parallel (a 8) parallel (b 8)*/
        A.OR_IDREG,A.OR_IDPERS,A.OR_TIPIDE,A.OR_NIFCIF,A.OR_TIPIDEIBM,A.OR_NIFCIFIBM,A.OR_TITULARITAT, A.OR_NOMPER,A.OR_PERSON,A.OR_IDECNO,A.OR_IDCNAE,
        A.OR_PROCED,
        A.OR_NUMOFI,A.OR_REFOPE,A.OR_REFOPE2,A.OR_TIPOPE,A.OR_FECOPE,A.OR_FECVTO,A.OR_VIDINI,
        A.OR_VIDRES,A.IN_ANTIGU,A.OR_SEGGES, 0 OR_SUBSEG,A.OR_TIPAVA,
        A.OR_TIPGAR,A.OR_DESTPR,A.OR_TIPOFI,A.OR_TIPOPR,A.OR_IMPLTV,A.OR_VALTAS,A.OR_CONCED,A.OR_IDPAIS,
        0 OR_CODSOL, null IN_BCOATL,A.IN_ITITSN,A.IN_INDMOR,A.OR_IDPRO1,A.OR_ENTITY,A.OR_DIVISA,A.FI_TIPEXP,A.OR_DISPTO,A.OR_DISBLE,
        A.OR_AVALES,A.OR_DISPTOCON,A.OR_DISBLECON,A.OR_AVALESCON,A.OR_AJUVALCON,A.IN_VTAGRU,B.OR_RATINT,
        B.OR_MODRAT0,B.OR_SEGRIE,B.OR_PUNT0, B.OR_SITUAC0,
        B.OR_FECPUN0,A.IN_SEGMBSINI,A.IN_SEGMBS0,
        A.IN_SEGMBS1,A.IN_SEGMBS2,
        case
             when a.in_segmbs = 'Derechos Cobro'  then
                  case
                       when A.OR_PROCED = 'FACTORING' and a.OR_CLUNICUENT != 999999999999999 then
                            'Derechos Cobro'
                       else 'Derechos'
                  end
             else a.in_segmbs
        end as in_segmbs,
        CASE
             WHEN B.IN_SUCEPT NOT IN ('PFSUCP','FERENS','FEOFNS','EMNSNC','EMAJUS','EMOFIN','EMAVAL','EMBLQR','EMDIVR','EMFACO','EMPROC', 'EMTARG', 'EMTIPO', 'TITCIFNI', 'ETNSPJ', 'EMNSSP')
              AND SUBSTR(B.IN_SUCEPT,3) NOT IN ('NSNC','AJUS','OFIN','AVAL','BLQR','DIVR','FACO','PROC','TARG','TIPO','DESC','NSPJ','TIPO','FACO','FANC1','PRMO')
              AND SUBSTR(B.IN_SUCEPT,1,4) NOT IN ('EMPE','NCPE')
              AND (SUBSTR(B.OR_SEGRIE,1,2) IN ('E3','E4', 'E5') OR ((B.OR_SEGRIE = '?' or SUBSTR(B.OR_SITUAC0,1,1) = 'D') AND SUBSTR(B.OR_SEGFIC,1,2) IN ('E3','E4', 'E5')))
              AND DESC_FINAL_OK = 'NO SUSCEPTIBLE' THEN --BNM 23/10/2020 TM-2779,marca xxCNAE en mapa de uso
                    case
                          when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' then
                               'PUCNAE'
                          when a.in_segmbsini = '019' then
                               'EUCNAE'
                          when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                               'PTCNAE'
                          when mtit.codtit is not null then
                               'ETCNAE'
                          when gr.NUMPERMA is not null then
                               'GRCNAE'
                          when a.OR_INDHOLDING = '1' then
                                  case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                            'HOFANC1'
                                       else
                                            'HOCNAE'
                                  end
                          when a.OR_INDHOLDING IN ('3', '4') then
                                  case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                            'PAFANC1'
                                       else
                                            'PACNAE'
                                   end
                          when A.in_segmbs2 = '020' then
                                  case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                            'PRFANC1'
                                       else
                                            'PRCNAE'
                                   end
                         else
                                SUBSTR(B.IN_SUCEPT,1,2)||'CNAE'
                    end
             WHEN SUBSTR(b.IN_SUCEPT,3) = 'SUCP' and SUBSTR(b.IN_SUCEPT,1,2) not in ('FE','PF') THEN /*-- Empresas y No clientes  FMRR -- 25/01/2021*/
                     CASE
                          WHEN (SUBSTR(B.OR_SEGRIE,1,2) IN ('E3','E4') AND A.OR_IDCNAE in (0,99999)) or (NVL(B.OR_SEGRIE,'?') = '?' AND SUBSTR(B.OR_SEGFIC,1,2) IN ('E3','E4') AND A.OR_IDCNAE in (0,99999)) THEN  -- No Susceptible por CNAE sin informar
                                  case
                                       when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' then
                                            'PUNCSC'
                                       when a.in_segmbsini = '019' and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when a.in_segmbsini = '019' then
                                            'EUNCSC'
                                       when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                                            'PTNCSC'
                                       when mtit.codtit is not null and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when mtit.codtit is not null then
                                            'ETNCSC'
                                       when gr.NUMPERMA is not null then
                                            'GRNCSC'
                                       when a.OR_INDHOLDING = '1' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'HOFANC1'
                                                    else
                                                           'HONCSC'
                                               end
                                       when a.OR_INDHOLDING IN ('3', '4') then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PAFANC1'
                                                      else
                                                              'PANCSC'
                                               end
                                       when A.in_segmbs2 = '020' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PRFANC1'
                                                      else
                                                         'PRNCSC'
                                               end
                                       else
                                               SUBSTR(b.IN_SUCEPT,1,2)||'NCSC'
                                  end
                          WHEN nvl(B.OR_PUNT0, 9999) = 9999 THEN -- Susceptible sin rating
                            case
                                       when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' then
                                            'PUSCSR'
                                       when a.in_segmbsini = '019' and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when a.in_segmbsini = '019' then
                                            'EUSCSR'
                                       when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                                            'PTSCSR'
                                       when mtit.codtit is not null and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when mtit.codtit is not null then
                                            'ETSCSR'
                                       when gr.NUMPERMA is not null then
                                            'GRSCSR'
                                       when a.OR_INDHOLDING = '1' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                         'HOFANC1'
                                                    else
                                                         'HOSCSR'
                                               end
                                       when a.OR_INDHOLDING IN ('3', '4') then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PAFANC1'
                                                      else
                                                              'PASCSR'
                                               end
                                       when A.in_segmbs2 = '020' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PRFANC1'
                                                      else
                                                         'PRSCSR'
                                               end
                                       else
                                               SUBSTR(b.IN_SUCEPT,1,2)||'SCSR'
                                  end
                       WHEN A.OR_TITULARITAT in(0,9) THEN -- Susceptible con rating sin Titularidad
                            case
                                       when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' then
                                            'PUSCST'
                                       when a.in_segmbsini = '019' and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when a.in_segmbsini = '019' then
                                            'EUSCST'
                                       when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                                            'PTSCST'
                                       when mtit.codtit is not null and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when mtit.codtit is not null then
                                            'ETSCST'
                                       when gr.NUMPERMA is not null then
                                            'GRSCST'
                                       when a.OR_INDHOLDING = '1' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'HOFANC1'
                                                    else
                                                           'HOSCST'
                                               end
                                       when a.OR_INDHOLDING IN ('3', '4') then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PAFANC1'
                                                      else
                                                              'PASCST'
                                               end
                                       when A.in_segmbs2 = '020' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PRFANC1'
                                                      else
                                                         'PRSCST'
                                               end
                                       else
                                               SUBSTR(b.IN_SUCEPT,1,2)||'SCST'
                                  end
                       WHEN SUBSTR(B.OR_SITUAC0,1,1) = 'D' THEN -- Susceptible con rating Depurado
                            case
                                       when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' then
                                            'PUSCP1'
                                       when a.in_segmbsini = '019' and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when a.in_segmbsini = '019' then
                                            'EUSCP1'
                                       when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                                            'PTSCP1'
                                       when mtit.codtit is not null and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                                            'EUCCAA'
                                       when mtit.codtit is not null then
                                            'ETSCP1'
                                       when gr.NUMPERMA is not null then
                                            'GRSCP1'
                                       when a.OR_INDHOLDING = '1' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'HOFANC1'
                                                    else
                                                           'HOSCP1'
                                               end
                                       when a.OR_INDHOLDING IN ('3', '4') then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PAFANC1'
                                                      else
                                                              'PASCP1'
                                               end
                                       when A.in_segmbs2 = '020' then
                                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                                           'PRFANC1'
                                                      else
                                                         'PRSCP1'
                                               end
                                       else
                                               SUBSTR(b.IN_SUCEPT,1,2)||'SCP1'
                                  end
                       when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' THEN
                            'PU'||SUBSTR(b.IN_SUCEPT,3)
                       when a.in_segmbsini = '019' and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                            'EUCCAA'
                       when a.in_segmbsini = '019' then
                            'EU'||SUBSTR(b.IN_SUCEPT,3)
                       when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                            'PT'||SUBSTR(b.IN_SUCEPT,3)
                       when mtit.codtit is not null and SUBSTR(B.OR_MODRAT0,1,2) = 'CA' then
                            'EUCCAA'
                       when mtit.codtit is not null then
                            'ET'||SUBSTR(b.IN_SUCEPT,3)
                       when gr.NUMPERMA is not null then
                            'GR'||SUBSTR(b.IN_SUCEPT,3)
                       when a.OR_INDHOLDING = '1' then
                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                         'HOFANC1'
                                    else
                                         'HO'||SUBSTR(b.IN_SUCEPT,3)
                               end
                       when a.OR_INDHOLDING IN ('3', '4') then
                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                           'PAFANC1'
                                      else
                                              'PA'||SUBSTR(b.IN_SUCEPT,3)
                               end
                       when A.in_segmbs2 = '020' then
                               case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                                           'PRFANC1'
                                      else
                                         'PR'||SUBSTR(b.IN_SUCEPT,3)
                               end
                       else b.in_sucept
                  end
             WHEN B.IN_SUCEPT = 'PFSUCP' THEN  -- Project Finance
                  CASE
                      WHEN nvl(B.OR_PUNT0, 9999) = 9999 THEN
                            'PFSCSR' -- Susceptible sin rating
                       WHEN SUBSTR(B.OR_SITUAC0,1,1) = 'D' THEN
                            'PFSCP1'  -- Susceptible con rating Depurado
                       else
                            B.IN_SUCEPT
                  end
             WHEN B.IN_SUCEPT IN ('FERENS','FEOFNS') then
                  B.IN_SUCEPT
             when a.in_segmbsini = '019' and A.IN_SEGMBS2 = '020' THEN
                  'PU'||SUBSTR(b.IN_SUCEPT,3)
             when a.in_segmbsini = '019' then
                  'EU'||SUBSTR(b.IN_SUCEPT,3)
             when mtit.codtit is not null and A.IN_SEGMBS2 = '020' then
                  'PT'||SUBSTR(b.IN_SUCEPT,3)
             when mtit.codtit is not null then
                  'ET'||SUBSTR(b.IN_SUCEPT,3)
             when gr.NUMPERMA is not null then
                  'GR'||SUBSTR(b.IN_SUCEPT,3)
             when a.OR_INDHOLDING = '1' then
                  case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                            'HOFANC1'
                       else
                            'HO'||SUBSTR(b.IN_SUCEPT,3)
                  end
             when a.OR_INDHOLDING IN ('3', '4') then
                  case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                            'PAFANC1'
                       else
                            'PA'||SUBSTR(b.IN_SUCEPT,3)
                  end
             when A.in_segmbs2 = '020' then
                  case when SUBSTR(b.IN_SUCEPT,1,2) = 'NC' THEN
                            'PRFANC1'
                       else
                            'PR'||SUBSTR(b.IN_SUCEPT,3)
                  end
             else b.in_sucept
        END AS IN_SUCEPT,
        A.OR_CLUNIENT, A.OR_CLUNIPROD,A.OR_CLUNICONTR,A.OR_CLUNICUENT,A.OR_CLUNIOPERA,FI_MESCURA,A.OR_FECCAR,A.OR_PRESTMIG,
        A.OR_CLAVISO, A.OR_FECALTBLO, B.IN_SUCEPT, B.IN_IDCALIFIC, B.OR_SEGFIC, B.IN_IDCALIFICREL,A.OR_REPOS, A.OR_FUTURS,
        0, 0 OR_CONTRATO_CRDGBL, A.OR_INDHOLDING, A.OR_CODPRODO, B.OR_PROYECTO, NVL(A.OR_IDCNAEREL, 0) OR_IDCNAEREL, A.IN_IDGRUPO, A.OR_CTACLI, OR_NUMPERSONA,
        B.OR_PESOW, B.OR_PUNTGRUP, B.OR_SEGFAC, B.OR_MODGRUP /* RMR 26/02/2020 Añadido campo de modelo de grupo */
        , A.FI_ELIMI1 /* NAV - 05/05/20 - TM-1428 - Incluir FI_ELIMI1 en el MDU Empresas */
      FROM BAS_MEN.BASILEA A,
           BAS_MEN.MAESTRO_SUCEPT B,
           (select cnae93, DESC_FINAL_OK from BAS_MEN.MAESTRO_CNAES_SECTOR where DESC_FINAL_OK = 'NO SUSCEPTIBLE') cnae,
            BAS_MEN.MAESTRO_TITULARITAT_PERSONA mtit,
            bas_men.RELACION_GRUPOS_MATRICES gr
      WHERE A.OR_IDREG = B.OR_IDREG
        and DECODE(NVL(A.OR_IDCNAEREL, 0), 0, A.OR_IDCNAE, 99999, A.OR_IDCNAE, A.OR_IDCNAEREL)  = cnae.CNAE93(+)
        AND A.OR_TITULARITAT = mtit.CODTIT(+)
        and a.or_numpersona = gr.NUMPERMA(+)
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS),
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS
--      AND A.FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG', 'TITACT2', 'NETTING')
/*19/03/2020 - NAV - TM-614 - calcular todas las variables de proceso para los eliminados por TITACT*/
/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
        AND A.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'TITACT2', 'NETTING', 'TITACT', 'STSORI')
--FIN
        AND ((A.IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
        AND A.IN_TIPOREG IN ('SA', 'PX', 'OXC', 'MMSA', 'MMOXC', 'DN', 'MMDN','RN','MMRN', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA'))     --NAV 18/07/2019 - Añadido - 'CESA', 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
         OR a.IN_SEGMBS0 = '201');

      COMMIT;

 VN_NUMERR:= 28;

-------------------------------------------------------
-- LOOP CONTAGIOCNAE
-- registros no susc y susceptibles: se realiza el contagio por EMSUCP   -ACC-VJB 03/07/2008
-------------------------------------------------------

  FOR CUR IN CONTAGIOCNAE LOOP

    UPDATE BAS_MEN.MAPA_USO_EMPRESAS_ORIG
       SET IN_SUCEPT = SUBSTR(IN_SUCEPT,1,2)||'SUCP'
       WHERE SUBSTR(IN_SUCEPT,3) = 'CNAE'
         AND OR_TITULARITAT = CUR.OR_TITULARITAT;

  END LOOP;

  COMMIT;

   VN_NUMERR:= 29;
  -------------------------------------------------------
-- LOOP CONTAGIOCNAENIF
-- registros no susc y susceptibles: se realiza el contagio por EMSUCP   -ACC-VJB 03/07/2008
-------------------------------------------------------

  FOR CUR IN CONTAGIOCNAENIF LOOP

    UPDATE BAS_MEN.MAPA_USO_EMPRESAS_ORIG
       SET IN_SUCEPT = SUBSTR(IN_SUCEPT,1,2)||'SUCP'
       WHERE SUBSTR(IN_SUCEPT,3) = 'CNAE'
         AND OR_IDPERS = CUR.OR_IDPERS;

  END LOOP;

  COMMIT;

 VN_NUMERR:= 30;

-------------------------------------------------------
--  UTES_NO_UTES
-------------------------------------------------------

 FOR CUR IN  UTES_NO_UTES LOOP

     UPDATE BAS_MEN.MAPA_USO_EMPRESAS_ORIG
        SET IN_SUCEPT = Cur.SUCEPT_UTE
      WHERE OR_TITULARITAT = CUR.OR_TITULARITAT;

 END LOOP;

 COMMIT;

 VN_NUMERR:= 31;


 --Contagio Para multititularidades duplicadas (empresas y promotores). XCG, 26/01/11

 FOR CUR IN CONTAGIO_TITU_DUPLI LOOP

     UPDATE BAS_MEN.MAPA_USO_EMPRESAS_ORIG
        SET IN_SUCEPT = CUR.SUCEPT||SUBSTR(IN_SUCEPT,3,5)
      WHERE OR_TITULARITAT = CUR.OR_TITULARITAT;

 END LOOP;

 COMMIT;

 VN_NUMERR:= 32;

--     MERGE /*+ full(dst) parallel(dst 8) parallel(src 8) */ INTO bas_men.basilea dst
--     USING (SELECT or_idreg, in_sucept
--              FROM bas_men.MAPA_USO_EMPRESAS_ORIG a) src
--     ON (dst.or_idreg = src.or_idreg)
--     WHEN MATCHED THEN
--        UPDATE
--           SET dst.in_sucept = src.in_sucept;

--  COMMIT;

  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '12.0 FNC_MAPA_USO '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;
--FIN 06/02/2019 - Nav - MAPA_USO_EMP

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '9.0 FNC_SUCEPT '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   RAISE;
END;

-------------------------------------------------------
-- PROCESO PRINCIPAL
-------------------------------------------------------

BEGIN

 IF PN_OPC = 1 THEN
    FNC_SUCEPT (PV_TABLA, PN_FECPRO, PV_FECHA, PN_OPC_DER, PN_F, PV_RET);
 END IF;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '9.0 FNC_SUCEPT '||PV_TABLA
        AND ESTAT  = 'INICIADO';

     COMMIT;
     RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_SUCEPT';


create or replace PROCEDURE    BAS_MEN.BASI_SUSCEPTIBILIDAD IS

   -- bkd10006.sql -- XBK0003M - BK10MGBS14CCMDUE
   -- bka00010.sql -- XBK0010P - BK05PGBS20SUSCEP (Obsoleta)


   VV_TABLA      VARCHAR2(200):= 'bas_men.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';
   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';

BEGIN

  commit;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  --EXECUTE IMMEDIATE ('ALTER TABLE bas_men.BASILEA_SUSCEPTIBILIDAD NOPARALLEL');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM bas_men.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  --
  -- Susceptibilidad Empresas
  --

  -- Validación de existencia de datos. Si no EXISTIERAN abortará (La función realiza un raise).
  SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  BAS_MEN.FNC_SUCEPT (VV_TABLA, 1, VN_FECPRO, VN_MESPRO, VN_OPC_DER, VN_F, VV_RETORNO);
  COMMIT;

END;

/
--bkd10007=====================================================================================================
Select 'bkd10007' As Compilando from dual;

CREATE OR REPLACE PACKAGE BAS_MEN.SUCEPT_CA is
    
    TYPE cursor_basilea is REF CURSOR RETURN BAS_MEN.MAESTRO_SUCEPT_TEMP_CA%ROWTYPE;
    TYPE t_array_basilea_SUCEPT_CA IS TABLE OF BAS_MEN.MAESTRO_SUCEPT_CA%ROWTYPE;
        
    FUNCTION F_SUCEPT_CA (cur IN cursor_basilea, PN_FECPRO IN NUMBER) return t_array_basilea_SUCEPT_CA 
    parallel_enable(PARTITION cur by any)
    PIPELINED;
    
end;
/

/************************************************************************************/
/* CREATE DEL CUERPO DEL PACKAGE                                                    */
/************************************************************************************/

CREATE OR REPLACE PACKAGE BODY BAS_MEN.SUCEPT_CA AS

FUNCTION F_SUCEPT_CA (cur IN cursor_basilea, PN_FECPRO IN NUMBER) RETURN t_array_basilea_SUCEPT_CA 
    parallel_enable(PARTITION cur by any)
    PIPELINED
    as
    
    in_rec cur%ROWTYPE;        
    out_rec BAS_MEN.MAESTRO_SUCEPT_CA%ROWTYPE;
    v_num NUMBER;
    
 VV_SUCEPT       VARCHAR2(10);
 VV_SUCEPT_BLQR   VARCHAR2(10);
  VV_SUCEPT_DIVR  VARCHAR2(10);
  VV_ORIG         VARCHAR2(10);
  VV_ORIG_TIPOPE  VARCHAR2(10);
  VV_ORIG_DESCUB  VARCHAR2(12);
  VV_ORIG_AVA_OLD  VARCHAR2(10);
  VN_TOT_CONCED   FLOAT;
  VN_TOT_CONCED_AVALES FLOAT;
  VN_TOT_CON_DIS  FLOAT;
  VN_FECOPE       NUMBER(8);
  VN_LIMIT        NUMBER(8);
  VN_ANO          NUMBER(8,2);
  VN_FI_EADAIRB   FLOAT;
  VN_FI_CCFAIRB   NUMBER(6,4);
  VV_FI_EXCEDID   VARCHAR2(2);
  VV_SECTOR       VARCHAR2(15);
  VN_UTIL         FLOAT;
--  VN_DATNAI       NUMBER(8);
  VV_DNI_EMPLEADO  VARCHAR2(10);
  VN_CONT          NUMBER(2);
  VN_NUM_AVA_POST  NUMBER(8);
  VN_OR_SEGGES     NUMBER(2);
  VN_OR_SEGFAC     NUMBER(2);
  VV_ORIG_PROCED_DIVR VARCHAR2(20);
  VV_ORIG_UNITIT   VARCHAR2(10);
  VN_NUMERR      NUMBER(3);
  VV_MENSAJE     VARCHAR2(255);
  VN_COUNT       NUMBER(9):=0;
  VV_ROWID       VARCHAR2(50);

  VV_FecAltBlo   VARCHAR2(10);
  VV_Claviso     NUMBER(10);
  VV_OR_SEGRIE        VARCHAR2(10);
  
BEGIN 
  LOOP
            
     fetch cur into in_rec;
     EXIT WHEN cur%notfound;       
    
     VN_COUNT:= VN_COUNT + 1;
     VV_ROWID:= TO_CHAR(IN_REC.OR_IDREG);
     VV_SUCEPT:= '?';
     VN_TOT_CONCED  := 0;
     VN_TOT_CONCED_AVALES :=0;
     VN_TOT_CON_DIS  := 0;
 
     VV_FecAltBlo := IN_REC.OR_FECALTBLO;
     VV_Claviso   := IN_REC.OR_CLAVISO;
     VV_OR_SEGRIE      := '?';
     
     
IF IN_REC.OR_TITULARITAT NOT IN (0,9) THEN       

--NO CLIENTES: Tratamiento No Clientes -- ACC-VJB 16/01/'08 (nuevo en el pase de dic'07)
--12-11-2008 @RMC: Incidencia 22 (Debería marcase siempre que no sea factoring, no cuando únicamente tienen forfaiting y confirming)
--02/04/2009@AALL: Incidencia 41: se cambia incidencia anterior(22) y se vuelve a filtrar por procedencia 
--FACTORING, CONFIRMING, FORFAITING, TARGES, DERIVAT-E4, EFECTES. (Norma 19 pendiende de añadir)
     VV_ORIG_UNITIT:= '?';
      
     BEGIN
        SELECT ORIGEN
          INTO VV_ORIG_UNITIT
          FROM BAS_MEN.MAESTRO_PROCED_UNITITU_CA
         WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
     EXCEPTION
        WHEN OTHERS THEN
           VV_ORIG_UNITIT:= '?';
     END;
     
     IF VV_ORIG_UNITIT = 'DIFTITULAR' THEN        
        BEGIN
            SELECT '?'
              INTO VV_SUCEPT
              FROM BAS_MEN.TITULARITAT_COMPTE_CLIENTE
             WHERE CODTIT = IN_REC.OR_TITULARITAT
               AND ROWNUM = 1;
        EXCEPTION
            WHEN OTHERS THEN
                VV_SUCEPT := 'CANSNC';
        END;
        
     END IF;
        
--AJUSTES:  (A NIVEL DE TITULARIDAD)
     IF VV_SUCEPT = '?' THEN  --Marcamos susceptibilidad por ajustes. 5/11/07.
        VV_ORIG:= '?';
        BEGIN
           SELECT 'CAAJUS'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_AJUSTES_CA
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

--EMPLEADOS BANCO SABADELL: ACC-VJB 17/01/2008 EMPLEADOS
    IF VV_SUCEPT ='?' THEN
        BEGIN
            SELECT 'CANSBS'
              INTO VV_SUCEPT
              FROM BAS_MEN.MAESTRO_EMPLEADOS
             WHERE DNI = IN_REC.OR_NIFCIF;
        EXCEPTION
             WHEN OTHERS THEN
                 VV_SUCEPT:= '?';
        END;
     END IF;

--FACTORING SIN RECURSO CON COBERTURA: Tratamiento para los Deudores de Factoring con Cobertura
     IF VV_SUCEPT = '?'  THEN
         BEGIN
           SELECT 'CAFACO'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_CV_PROD_FSR_CA
            WHERE ID_TITULARITAT = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

--FACTORING CLIENTE O NO CLIENTE
     IF VV_SUCEPT = '?' THEN
       BEGIN
           SELECT DECODE(CVISTA, 1, DECODE(SIGN(1800 - CONCED),-1,'?',DECODE(IN_REC.OR_PROCED,'FORFAITING','?','CAFACL')),0,'CAFANC','?')
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_CV_CA
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

--TOTAL CONCEDIDO >=30.000E
     IF VV_SUCEPT = '?' THEN
        BEGIN
           SELECT MAX(TOT_CONCED)
             INTO VN_TOT_CON_DIS
             FROM  (SELECT TOT_CONCED
                      FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA
                     WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT
                   /* UNION
                   SELECT TOT_DISPTO
                     FROM BAS_MEN.MAESTRO_TOTAL_DISPTO_CA
                    WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT*/) ;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;

        BEGIN
           SELECT TOT_CONCED, SUBSTR(OR_FECOPE,1,4)
             INTO VN_TOT_CONCED, VN_FECOPE
             FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;

--VJB-ACC 16/01/'08  Si es un Aval se busca el total concedido del MAESTRO_TOTAL_CONCEDIDO_AVALES
          BEGIN
             SELECT TOT_CONCED
               INTO VN_TOT_CONCED_AVALES
               FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA_AVA
              WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
          EXCEPTION
            WHEN OTHERS THEN
               VN_TOT_CONCED_AVALES:= 0;
           END;


/* Recupera el origen de la titularidad a partir del maestro de procedencias */
/* ------------------------------------------------------------------------- */
        VV_ORIG:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_CA
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG:= '?';
        END;
        
        VV_ORIG_TIPOPE:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG_TIPOPE
             FROM BAS_MEN.MAESTRO_PROCED_CA_TIPOPE
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG_TIPOPE:= '?';
        END;

--Tratamiento susceptibles por total concedido>=30.000E
        IF VN_TOT_CON_DIS >= 30000 AND (VV_ORIG_TIPOPE NOT IN ('TIPOPE','TIPOPE_INT')) THEN
           VV_SUCEPT:= 'CASUCP';
        END IF;

--01/12/2008 @RMC
--Avales con concedido superior a 30.000 euros pero que son todos anteriores a 2001 
-----------------------------------------------------------------------------------
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG_AVA_OLD
             FROM BAS_MEN.MAESTRO_PROCED_CA_AVA_OLD
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG_AVA_OLD:= '?';
        END;
        
        IF VV_ORIG_AVA_OLD = 'AVALES_OLD' /*AND VN_TOT_CON_DIS >= 30000*/ THEN
            VV_SUCEPT := 'CAAVAL';
        END IF; 
-----------------------------------------------------------------------------------

     END IF;

     -- IDENTIFICACIÓN DE LAS TITULARIDADES QUE EXCLUSIVAMENTE SON TARGETAS, AVALES, TARJETAS Y AVALES, TIPOPE

     IF VV_SUCEPT = '?' THEN
        VV_ORIG:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_CA
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG:= '?';
        END;

     --TARJETAS
       IF VV_ORIG = 'TARGES' THEN
       
          -- @RMC 20090930: Si la titularidad unica no coincide co la del contrato accedemos al maestro 
          --                para obtener el segmento del contrato. En caso de no encontrarlo nos quedamos 
          --                con el del registro.
          IF IN_REC.OR_TITULARITAT <> IN_REC.OR_TITULARITAT_CTR THEN
              
              BEGIN
              SELECT DISTINCT OR_SEGGES, OR_SEGFAC
                INTO VN_OR_SEGGES, VN_OR_SEGFAC
                FROM BAS_MEN.MAESTRO_TITULAR_SEGGES_CA
               WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
              EXCEPTION
                WHEN OTHERS THEN
                    VN_OR_SEGGES := IN_REC.OR_SEGGES;
                    VN_OR_SEGFAC := IN_REC.OR_SEGFAC;
              END;
              
              IN_REC.OR_SEGGES := VN_OR_SEGGES;
              IN_REC.OR_SEGFAC := VN_OR_SEGFAC;
              
          END IF;
       
          VN_LIMIT:= 10000;
          IF IN_REC.OR_SEGGES = 3 THEN
             IF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 1 THEN
                VN_LIMIT:= 10000;
             ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN
                VN_LIMIT:= 15000;
             ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                VN_LIMIT:= 20000;
             ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) IN (4,5) THEN
                VN_LIMIT:= 25000;
             END IF;      
          ELSIF IN_REC.OR_SEGGES IN (4,5) THEN  --
             VN_LIMIT:= 25000;
          END IF;

          IF VN_TOT_CONCED < VN_LIMIT THEN
             VV_SUCEPT:= 'CATARG';
          ELSE
             VV_SUCEPT:= 'CASUCP';
          END IF;

       --AVALES
       ELSIF VV_ORIG = 'AVALES' THEN
          IF VN_FECOPE >= 2001 AND VN_TOT_CONCED_AVALES < 6000 THEN
             VV_SUCEPT:= 'CAAVAL';
          ELSE
              IF VN_TOT_CONCED_AVALES >= 6000 AND VN_FECOPE >= 2001 THEN
                 VV_SUCEPT:= 'CASUCP';
              END IF;
          END IF;

--Tratamiento PARA REGISTROS COMBINADOS DE Tarjetas y Avales 5/11/07.
-- dic '07: se cambia el orden de prelacion: CADIVR antes que CATIPO
       ELSIF VV_ORIG IN ('TA-AV-FA') THEN
             
             VN_CONT := 0;
             VN_TOT_CONCED := 0;
             VN_LIMIT := 0;
             VV_SUCEPT_DIVR := 'CADIVR';
             
/* @RMC 20090930: Marcar como Riesgo Diverso a los clientes que todos sus productos cumpla los criterios individuales 
                  de no susceptibilidad (actualmente se marcaban siempre que tuviera dos productos que lo cumplieran
                  aunque el tercero no lo hiciera) Cuando un producto no cumpla para ser riesgo diverso se marca como
                  susceptible la titularidad
*/
-- Tratamiento Factoring
             BEGIN
               SELECT RIESGO_DIVERSO
                    , 'CA'||IN_SUCEPT
                 INTO VN_CONT
                    , VV_SUCEPT_DIVR
                 FROM BAS_MEN.MAESTRO_FACTORING_DIVR_CA
                WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
             EXCEPTION
                  WHEN OTHERS THEN
                       VN_CONT := 0;
                       VV_SUCEPT_DIVR := 'CADIVR';
             END;
             
-- Tratamiento Avales
             --Comprueba si hay avales posteriores a 2001
             --IF IN_REC.OR_TIPOPE IN('AF','AT') OR IN_REC.OR_PROCED IN('AVALES','ES-AVALES') THEN
/*AVAL*/     IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                BEGIN
                   SELECT TOT_AVALES
                     INTO VN_TOT_CONCED_AVALES
                     FROM BAS_MEN.MAESTRO_TOT_CONC_AVAL_DIVR_CA
                    WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
                EXCEPTION
                     WHEN OTHERS THEN
                        VN_TOT_CONCED_AVALES:= 0;
                END;
                
                IF VN_TOT_CONCED_AVALES <> 0 THEN
                    BEGIN
                      SELECT NUM_AVALES
                        INTO VN_NUM_AVA_POST
                        FROM BAS_MEN.MAESTRO_PROC_AVAL_POST_DIVR_CA
                       WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT
                         AND ROWNUM = 1;
                    EXCEPTION
                         WHEN OTHERS THEN
                              VN_NUM_AVA_POST := 0;
                    END;
                    
                    -- Si hay avales posteriores a 2001 y el total concedido es mayor y igual a 6000€
                    -- es susceptible.
                    IF VN_NUM_AVA_POST <> 0 AND VN_TOT_CONCED_AVALES >= 6000 THEN
                       VV_SUCEPT_DIVR := 'CASUCP';
                    END IF;
                END IF;
/*FinAval*/  END IF;
             
-- Tratamiento Tarjetas 
/*Targes*/   IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                VN_OR_SEGGES:= -1;
                VN_OR_SEGFAC:= -1;
                
                BEGIN
                   SELECT TOT_CONC, ORIGEN
                        INTO VN_TOT_CONCED, VV_ORIG_PROCED_DIVR
                        FROM BAS_MEN.MAESTRO_TOT_CONC_TARG_DIVR_CA
                       WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
                   EXCEPTION
                        WHEN OTHERS THEN
                           VN_TOT_CONCED := 999999;
                           VV_ORIG_PROCED_DIVR := '?';
                END;
                
                IF VV_ORIG_PROCED_DIVR = 'TARGES-DIVR' THEN
                    -- @RMC 20090930: Si la titularidad unica no coincide co la del contrato accedemos al maestro 
                    --                para obtener el segmento del contrato. En caso de no encontrarlo nos quedamos 
                    --                con el del registro.
                    IF IN_REC.OR_TITULARITAT <> IN_REC.OR_TITULARITAT_CTR THEN
                        BEGIN
                          SELECT DISTINCT OR_SEGGES, OR_SEGFAC
                            INTO VN_OR_SEGGES, VN_OR_SEGFAC
                            FROM BAS_MEN.MAESTRO_SEGGES_TARGES_DIVR_CA
                           WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
                        EXCEPTION
                             WHEN OTHERS THEN
                                  VN_OR_SEGGES := IN_REC.OR_SEGGES;
                                  VN_OR_SEGFAC := IN_REC.OR_SEGFAC;
                        END;
                    ELSE
                        VN_OR_SEGGES := IN_REC.OR_SEGGES;
                        VN_OR_SEGFAC := IN_REC.OR_SEGFAC;
                    END IF;
                    
                    VN_LIMIT:= 10000;
                    IF VN_OR_SEGGES = 3 THEN               	
					             IF SUBSTR(VN_OR_SEGFAC,1,1) = 1 THEN
					                VN_LIMIT:= 10000;
					             ELSIF SUBSTR(VN_OR_SEGFAC,1,1) = 2 THEN
					                VN_LIMIT:= 15000;
					             ELSIF SUBSTR(VN_OR_SEGFAC,1,1) = 3 THEN
					                VN_LIMIT:= 20000;
					             ELSIF SUBSTR(VN_OR_SEGFAC,1,1) IN (4,5) THEN
					                VN_LIMIT:= 25000;
					             END IF;                                           
                    ELSIF VN_OR_SEGGES IN (4,5) THEN  --
                       VN_LIMIT:= 25000;
                    END IF;

                    -- Si el total es mayor o igual al limite se marca como susceptible
                    IF VN_TOT_CONCED >= VN_LIMIT THEN
                       VV_SUCEPT_DIVR := 'CASUCP';
                    END IF;
                END IF;
/*FinTarges*/END IF;
             
-- TRATAMIENTO DESCUBIERTOS DE RIESGO DIVERSO Modificación:26/03/09
/*Descub*/   IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                BEGIN
                 SELECT ORIGEN
                   INTO VV_ORIG_PROCED_DIVR
                   FROM BAS_MEN.MAESTRO_PROCED_DESCUB_DIVR_CA
                  WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
                EXCEPTION
                 WHEN OTHERS THEN
                    VV_ORIG_PROCED_DIVR:= '?';
                END;
                      
                IF VV_ORIG_PROCED_DIVR IN ('DESCUBIERTOS-DIVR') THEN
                    
                   BEGIN
                      SELECT TOT_CONCED
                        INTO VN_TOT_CONCED
                        FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA
                       WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
                   EXCEPTION
                        WHEN OTHERS THEN
                             VV_SUCEPT_DIVR := 'CASUCP';
                   END;

                   -- Si el concedido es mayor o igual a 30.000€ es susceptible
                   IF VN_TOT_CONCED >= 30000 THEN
                       VV_SUCEPT_DIVR := 'CASUCP';
                   END IF;
                END IF;
   
/*FinDescub*/END IF;

             VV_SUCEPT := VV_SUCEPT_DIVR;          

       END IF;
       
        
--TRATAMIENTO DESCUBIERTOS inferiores a 30.000 euros. CONCEDIDO <30.000 y procedencia sólo descubiertos se marcan como EMDESC: @RMC MODIFICACION CIERRE 30-09-2009
        BEGIN
          SELECT ORIGEN
            INTO VV_ORIG_DESCUB
            FROM BAS_MEN.MAESTRO_PROCED_CA_DESCUB
           WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
              WHEN OTHERS THEN
                 VV_ORIG_DESCUB:= '?';
        END;

       IF VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
           BEGIN
              SELECT TOT_CONCED
                INTO VN_TOT_CONCED
                FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA
               WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
           EXCEPTION
              WHEN OTHERS THEN
                 VV_SUCEPT:= '?';
           END;
           
           IF VN_TOT_CONCED < 30000 THEN
               VV_SUCEPT:= 'CADESC';
           END IF;
       END IF;
        
--Tratamiento Tipope       
       --ELSIF VV_ORIG IN ('TIPOPE', 'TIPOPE_INT') THEN
       IF VV_ORIG_TIPOPE IN ('TIPOPE', 'TIPOPE_INT') AND VV_SUCEPT = '?' THEN
           
           BEGIN
              SELECT ORIGEN
                INTO VV_ORIG_DESCUB
                FROM BAS_MEN.MAESTRO_PROCED_CA_DESCUB
               WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
           EXCEPTION
              WHEN OTHERS THEN
                 VV_ORIG_DESCUB:= '?';
           END;

--CONCEDIDO>=30.000: Tratamiento susceptibles por total concedido>=30.000E PARA LOS CATIPO
           IF VN_TOT_CONCED >= 30000 AND VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
               VV_SUCEPT:= 'CASUCP';
           ELSE
               VV_SUCEPT:= 'CATIPO';
           END IF;
          
       END IF;
     END IF;
     
--PROCEDENCIA: Tratamiento Procedencia no susceptible             ACC-VJB 02/07/'08 VJB-ACC
--             todas las procedencias de la titularidad han de ser no susceptibles segun maestro_procedencia_sucept 
     IF VV_SUCEPT IN ('?','CASUCP') THEN
        BEGIN
           SELECT 'CAPROC'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_PROCED_NOSUSCEPT_CA  
            WHERE OR_TITULARITAT = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;         
     END IF;     

     -- BLOQUEOS
     -- Bajamos los bloqueos en la prelación. 8/11/07.
     -- JCVJCVJCV  201406. 20140703 - Bloqueo a extinguir (9053) y refinanciado no XXBLQR.
     VV_SUCEPT_BLQR := VV_SUCEPT;
     IF VV_SUCEPT IN ('?','CASUCP') /*AND NOT (in_rec.OR_CLAVISO = 9053 AND NVL(IN_REC.IN_REFINAN,0) = 1) */THEN-- AND NVL(IN_REC.IN_REFINAN,0) = 0 THEN
        BEGIN 
           SELECT MAX_DT_FECALTA, ID_CLATIPAVIS, 'CABLQR'
             into VV_FecAltBlo, VV_Claviso, VV_SUCEPT_BLQR
             FROM (SELECT DISTINCT CODTIT, MAX(DT_FECALTA) OVER (PARTITION BY CODTIT) MAX_DT_FECALTA, A.DT_FECALTA, A.ID_CLATIPAVIS
                     FROM BAS_MEN.BLOQUEOS_UNIF_X_PERSONA A,
                          BAS_MEN.TITULARITAT_PERSONA B
                    WHERE A.ID_PERBULL = B.IDEPER
                      AND in_rec.IN_TITULFIN = B.CODTIT
                  --    AND ID_FCH_DATOS = SUBSTR(PN_FECPRO,1,6)
                    )
                    WHERE MAX_DT_FECALTA = DT_FECALTA;
        EXCEPTION
             WHEN TOO_MANY_ROWS THEN -- JCV. 01/01/14 Prelación cuando hay más de un código de bloqueo.
               SELECT MAX_DT_FECALTA, ID_CLATIPAVIS, 'CABLQR' AS Sucept
                 INTO VV_FecAltBlo, VV_Claviso, VV_SUCEPT_BLQR
                 FROM 
                    ( 
                    SELECT CODTIT, MAX_DT_FECALTA, ID_CLATIPAVIS
                         , ROW_NUMBER() OVER (PARTITION BY CODTIT ORDER BY DECODE(ID_CLATIPAVIS,9050,1,9051,2,9053,3,4)) Orden
                      FROM (
                            SELECT DISTINCT B.CODTIT, MAX(DT_FECALTA) OVER (PARTITION BY B.CODTIT) MAX_DT_FECALTA, A.DT_FECALTA, A.ID_CLATIPAVIS
                              FROM BAS_MEN.BLOQUEOS_UNIF_X_PERSONA A
                                 , BAS_MEN.TITULARITAT_PERSONA     B
                             WHERE A.ID_PERBULL       = B.IDEPER
                               AND in_rec.IN_TITULFIN = B.CODTIT
                         --      AND ID_FCH_DATOS       = SUBSTR(PN_FECPRO,1,6)                  
                            )
                     WHERE MAX_DT_FECALTA = DT_FECALTA
                      )
                  WHERE Orden = 1;

             WHEN OTHERS THEN
                  VV_FecAltBlo := '?';
                  VV_Claviso   := 9999999999;
        END;     

        IF NOT (VV_Claviso = 9053 AND NVL(IN_REC.IN_REFINAN,0) = 1 ) THEN
        	 VV_SUCEPT := VV_SUCEPT_BLQR; 
        END IF;
        
     END IF;
     
     --Marcaje de las titularidades susceptibles que tienen operaciones con procedencias PR-MOROS
     IF SUBSTR(VV_SUCEPT,3,4) IN ('SUCP') OR VV_SUCEPT = '?' THEN
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_MOROSOS_CA
            WHERE IN_TITULFIN = IN_REC.OR_TITULARITAT;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG := '?';
        END;  
        
        IF VV_ORIG = 'PR-MOROS' AND IN_REC.IN_INDMOR = 'SI' THEN 
           VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'PRMO';
           VV_SUCEPT := REPLACE(VV_SUCEPT,'?','CA');
        END IF;
        
     END IF;

     IF IN_REC.OR_PERSON NOT IN (831, 833, 816) AND IN_REC.OR_PERSONSCPCB NOT IN (831, 833, 816) AND IN_REC.in_segmbsini IN ('002', '017') THEN
        VV_SUCEPT:= 'CANSSP';
     END IF;
   
--CNO: 903. JUBILADOS Y PENSIONISTAS (CANSJU)
  IF VV_SUCEPT IN ('?','CASUCP') THEN
      IF IN_REC.OR_IDECNO = 903 THEN
         VV_SUCEPT:= 'CANSJU';
      END IF;
  END IF;

--CNAE NO INFORMADO CORRECTAMENTE
  IF VV_SUCEPT IN ('?','CASUCP') THEN
      IF IN_REC.IN_SEGMBSINI IN ('101','102') AND IN_REC.OR_IDECNO NOT BETWEEN 200 AND 299 AND IN_REC.OR_IDECNO NOT IN (30,0) THEN
         VV_SUCEPT:= 'CANSSC';
      END IF;

      IF IN_REC.IN_SEGMBSINI IN ('101','102') AND IN_REC.OR_IDECNO =0 THEN
         VV_SUCEPT:= 'CANSSC';
      END IF;

      IF IN_REC.IN_SEGMBSINI IN ('002','017')  THEN
              IF (IN_REC.OR_TITUSCPCB<> 0  AND IN_REC.OR_CNAESCPCB=0 ) THEN
                 VV_SUCEPT:= 'CANSSC';
         END IF;
             IF (IN_REC.OR_TITUSCPCB= 0  AND IN_REC.OR_IDCNAE=0 ) THEN
                 VV_SUCEPT:= 'CANSSC';
         END IF;
     END IF;
  END IF;
   
  IF VV_SUCEPT = '?' THEN
     VV_SUCEPT:= 'CASUCP'; --Para los registros que no se hayan marcado como susceptibles, pasarán a serlo.
  END IF;
  
ELSIF IN_REC.OR_TITULARITAT IN (0,9) THEN  
  
      VV_SUCEPT:= '?';
      --BLOQUEOS
     
     -- JCVJCVJCV  201406. 20140703 - Bloqueo a extinguir (9053) y refinanciado no XXBLQR.
     IF VV_SUCEPT IN ('?','CASUCP') AND NOT (in_rec.OR_CLAVISO = 9053 AND NVL(IN_REC.IN_REFINAN,0) = 1) THEN --AND NVL(IN_REC.IN_REFINAN,0) = 0 THEN
        IF IN_REC.OR_CLAVISO IN (9051,9052,9053,9054,9050) AND TO_NUMBER(TO_CHAR(TO_DATE(IN_REC.OR_FECALTBLO,'YYYY-MM-DD'),'YYYYMMDD')) <= PN_FECPRO THEN
           VV_SUCEPT := 'CABLQR';
        END IF;
     END IF;

     --CNAE NO INFORMADO CORRECTAMENTE
     IF VV_SUCEPT IN ('?','CASUCP') THEN
         IF IN_REC.IN_SEGMBSINI IN ('101','102') AND IN_REC.OR_IDECNO NOT BETWEEN 200 AND 299 AND IN_REC.OR_IDECNO NOT IN (30,0) THEN
            VV_SUCEPT:= 'CANSSC';
         END IF;

         IF IN_REC.IN_SEGMBSINI IN ('101','102') AND IN_REC.OR_IDECNO =0 THEN
            VV_SUCEPT:= 'CANSSC';
         END IF;

         IF IN_REC.IN_SEGMBSINI IN ('002','017')  THEN
                 IF (IN_REC.OR_TITUSCPCB<> 0  AND IN_REC.OR_CNAESCPCB=0 ) THEN
                    VV_SUCEPT:= 'CANSSC';
            END IF;
                IF (IN_REC.OR_TITUSCPCB= 0  AND IN_REC.OR_IDCNAE=0 ) THEN
                    VV_SUCEPT:= 'CANSSC';
            END IF;
        END IF;
     END IF;

     --RESTO: SUCEPTIBLES
     IF VV_SUCEPT = '?' THEN
        VV_SUCEPT:= 'CASUCP'; --Para los registros que no se hayan marcado como susceptibles, pasarán a serlo.
     END IF;
    
END IF;  

   IF in_rec.or_modrat0 <> '?' THEN

      BEGIN
         SELECT DESC_BREV
           INTO VV_OR_SEGRIE
           FROM BAS_MEN.MAESTRO_DETALLE_MODELOS
          WHERE CODMODELO = in_rec.or_modrat0;
      EXCEPTION
           WHEN OTHERS THEN
                VV_OR_SEGRIE:= '?';
      END;

   END IF;
  
OUT_REC.OR_IDREG             := IN_REC.OR_IDREG          ;
OUT_REC.OR_TIPIDE            := IN_REC.OR_TIPIDE         ;
OUT_REC.OR_NIFCIF            := IN_REC.OR_NIFCIF         ;
OUT_REC.OR_PERSON            := IN_REC.OR_PERSON         ;
OUT_REC.OR_PROCED            := IN_REC.OR_PROCED         ;
OUT_REC.OR_IDCNAE            := IN_REC.OR_IDCNAE         ;
OUT_REC.OR_SEGRIE            := VV_OR_SEGRIE             ; -- CAMPO MODIFICADO EN EL PROCESO
OUT_REC.OR_DISPTO            := IN_REC.OR_DISPTO         ;
OUT_REC.OR_DISBLE            := IN_REC.OR_DISBLE         ;
OUT_REC.OR_AVALES            := IN_REC.OR_AVALES         ;
OUT_REC.OR_FUTURS            := IN_REC.OR_FUTURS         ;
OUT_REC.OR_REPOS             := IN_REC.OR_REPOS          ;
OUT_REC.OR_IDPERS            := IN_REC.OR_IDPERS         ;
OUT_REC.OR_REFOPE            := IN_REC.OR_REFOPE         ;
OUT_REC.OR_TITULARITAT       := IN_REC.OR_TITULARITAT    ;
OUT_REC.OR_FECOPE            := IN_REC.OR_FECOPE         ;
OUT_REC.OR_TIPOPE            := IN_REC.OR_TIPOPE         ;
OUT_REC.IN_SEGMBS            := IN_REC.IN_SEGMBS         ;
OUT_REC.OR_TITULARITA2       := IN_REC.OR_TITULARITA2    ;
OUT_REC.IN_SEGMBS0           := IN_REC.IN_SEGMBS0        ;
OUT_REC.OR_SITUAC0           := IN_REC.OR_SITUAC0        ;
OUT_REC.IN_SRATIN            := IN_REC.IN_SRATIN         ;
OUT_REC.IN_TITULFIN          := IN_REC.IN_TITULFIN       ;
OUT_REC.IN_SUCEPT            := VV_SUCEPT                ; -- CAMPO MODIFICADO EN EL PROCESO
OUT_REC.OR_SEGGES            := IN_REC.OR_SEGGES         ;
OUT_REC.OR_TIPIDEIBM         := IN_REC.OR_TIPIDEIBM      ;
OUT_REC.OR_CLAVISO           := VV_ClAviso               ; -- Campo MODIFICADO EN EL PROCESO
OUT_REC.OR_FECALTBLO         := VV_FecAltBlo             ; -- Campo MODIFICADO EN EL PROCESO
OUT_REC.IN_SEGMBS2           := IN_REC.IN_SEGMBS2        ;
OUT_REC.IN_SEGMBSINI         := IN_REC.IN_SEGMBSINI      ;
OUT_REC.OR_NUMOFI            := IN_REC.OR_NUMOFI         ;
OUT_REC.IN_VTAGRU            := IN_REC.IN_VTAGRU         ;
OUT_REC.FI_TIPEXP            := IN_REC.FI_TIPEXP         ;
OUT_REC.OR_NOMPER            := IN_REC.OR_NOMPER         ;
OUT_REC.OR_PERSONSCPCB       := IN_REC.OR_PERSONSCPCB    ;
OUT_REC.OR_CODPRODO          := IN_REC.OR_CODPRODO       ;
OUT_REC.OR_IDECNO            := IN_REC.OR_IDECNO         ;
OUT_REC.OR_TITUSCPCB         := IN_REC.OR_TITUSCPCB      ;
OUT_REC.OR_CNAESCPCB         := IN_REC.OR_CNAESCPCB      ;
OUT_REC.OR_TITULARITAT_CTR   := IN_REC.OR_TITULARITAT_CTR;
OUT_REC.OR_PERSON_CTR        := IN_REC.OR_PERSON_CTR     ;
OUT_REC.OR_IDCNAE_CTR        := IN_REC.OR_IDCNAE_CTR     ;
OUT_REC.OR_TITUCTAVISTA      := IN_REC.OR_TITUCTAVISTA   ;
OUT_REC.IN_INDMOR            := IN_REC.IN_INDMOR         ;
OUT_REC.IN_REFINAN           := NVL(IN_REC.IN_REFINAN,0) ;
OUT_REC.OR_MODRAT0           := IN_REC.OR_MODRAT0        ;
OUT_REC.IN_IDCALIFIC         := IN_REC.IN_IDCALIFIC      ;
OUT_REC.OR_FECPUN0         	 := IN_REC.OR_FECPUN0        ;
OUT_REC.OR_PUNT0         		 := IN_REC.OR_PUNT0          ;
OUT_REC.OR_RATINT         	 := IN_REC.OR_RATINT         ;


  pipe row(out_rec);

  END LOOP;
  
EXCEPTION
   WHEN OTHERS THEN
   
        RAISE_APPLICATION_ERROR(-20000, 'VN_NUMERR:'||VN_NUMERR);  

end F_SUCEPT_CA;

end;   
/
-------------------------------------------------------
-------------------------------------------------------
--          SUSCEPTIBILIDAD COMERCIOS Y AUTÓNOMOS
-------------------------------------------------------

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_CA (
PV_TABLA       IN  VARCHAR2,
PN_FECPRO      IN  NUMBER,        --FORMATO:YYYYMMDD
PN_OPC_DER     IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);

PROCEDURE FNC_SUCEPT_CA1 (PV_TABLA   IN  VARCHAR2,
PN_FECPRO  IN  NUMBER,        --FORMATO:YYYYMMDD
PN_OPC_DER IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F       IN  NUMBER,
PV_RET     OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);

  -------------------------------------------------------
  -- CURSOR BASILEA5 Cursor para el calculo del FI_EDAIRB
  -------------------------------------------------------
  CURSOR BASILEA5 IS
     SELECT /*+ parallel (b 8) */ OR_IDREG,  IN_SEGMBS, IN_VTAGRU, IN_INDMOR,    OR_TIPOPE,  IN_SEGMBS0, IN_SEGMBSINI,OR_ENTITY,IN_TIPOREG,
            OR_PROCED, OR_CODGAR, OR_VIDRES, OR_VIDINI,    FI_PORCON, OR_IDCNAE, OR_CTAIND, OR_CODPRODO, OR_CLUNICUENT,
            FI_TIPEXP, OR_FAIRVA, OR_EPIIND, FI_EPICON, OR_FAIRVACON, IN_FAIRVABO, OR_TITULARITAT, OR_NIFCIFIBM,
          	OR_TIPAVA, OR_RATINT, OR_TIPIDEIBM, OR_TIPGAR,
            (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) TOTAL, IN_SUCEPT, OR_SEGFIC, OR_INDHOLDING, IN_SEGMBS2 /* 22/06/2022 - HDEV-107786 - JRJ Se añaden por modificar la funcion ccf */
      FROM BAS_MEN.BASILEA B
     WHERE FI_TIPEXP IN ('OTC','Repos')
       AND IN_SEGMBSINI IN ('002','017','101','102');
       
 -- JCVJCVJCV  201406. 20140703 - Bloqueo a extinguir (9053) y refinanciado no XXBLQR.
 CURSOR CONTAGIOBLQR IS 
     SELECT /*+ parallel (b 8) */ DISTINCT OR_TITULARITAT
       FROM BAS_MEN.MAESTRO_SUCEPT_CA B
      WHERE (IN_SUCEPT = 'CABLQR'
            OR (IN_SUCEPT = 'CASUCP'
               AND OR_CLAVISO IN (9051,9052,9053,9054,9050) 
               AND OR_TITUSCPCB = 0
               AND NOT (OR_CLAVISO = 9053 AND NVL(IN_REFINAN,0) = 1)
               AND TO_NUMBER(TO_CHAR(TO_DATE(replace(OR_FECALTBLO,'?',null),'YYYY-MM-DD'),'YYYYMMDD')) <= PN_FECPRO
               )
            )
        AND OR_TITULARITAT NOT IN (0,9); --AND NVL(IN_REFINAN,0) = 0;            

-------------------------------------------------------
-- DECLARACIÓN DE VARIABLES
-------------------------------------------------------
  VV_SUCEPT       VARCHAR2(10);
  VV_SUCEPT_DIVR  VARCHAR2(10);
  VV_ORIG         VARCHAR2(10);
  VV_ORIG_TIPOPE  VARCHAR2(10);
  VV_ORIG_DESCUB  VARCHAR2(12);
  VV_ORIG_AVA_OLD  VARCHAR2(10);
  VN_TOT_CONCED   FLOAT;
  VN_TOT_CONCED_AVALES FLOAT;
  VN_TOT_CON_DIS  FLOAT;
  VN_FECOPE       NUMBER(8);
  VN_LIMIT        NUMBER(8);
  VN_ANO          NUMBER(8,2);
  VN_FI_EADAIRB   FLOAT;
  VN_FI_CCFAIRB   NUMBER(6,4);
  VV_FI_EXCEDID   VARCHAR2(2);
  VV_SECTOR       VARCHAR2(15);
  VN_UTIL         FLOAT;
--  VN_DATNAI       NUMBER(8);
  VV_DNI_EMPLEADO  VARCHAR2(10);
  VN_CONT          NUMBER(2);
  VN_NUM_AVA_POST  NUMBER(8);
  VN_OR_SEGGES     NUMBER(2);
  VN_OR_SEGFAC     NUMBER(2);
  VV_ORIG_PROCED_DIVR VARCHAR2(20);
  VV_ORIG_UNITIT   VARCHAR2(10);

  v_NRegs NUMBER(12);

BEGIN


 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_RECUPERADOS_CCAA');

 INSERT INTO BAS_MEN.RATINGS_RECUPERADOS_CCAA
 SELECT * FROM DCRPROP_MENSUAL.RATINGS_RECUPERADOS_CCAA_SAS;

 COMMIT;

  VN_NUMERR:= 1;
   
  -------------------------------------------------
  ----CARGA TABLA MAESTRO_SUCEPT_TEMP_CA
  -------------------------------------------------

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_TEMP_CA');

  INSERT /*+ parallel (B 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP_CA B
     SELECT /*+ parallel (a 8) */ OR_IDREG, OR_TIPIDE, OR_NIFCIF,
            DECODE(OR_TITUSCPCB,NULL, OR_PERSON, 0, OR_PERSON, OR_PERSONSCPCB) OR_PERSON, OR_PROCED,
            DECODE(OR_TITUSCPCB,NULL, OR_IDCNAE, 0, OR_IDCNAE, OR_CNAESCPCB)   OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
            OR_AVALES, OR_FUTURS, OR_REPOS, OR_IDPERS, OR_REFOPE, DECODE(OR_TITUSCPCB,NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB),
            OR_FECOPE, OR_TIPOPE, 
            case
                 when in_segmbs = 'Derechos Cobro'  then
                      case 
                           when OR_PROCED = 'FACTORING' and OR_CLUNICUENT != 999999999999999 then
                                'Derechos Cobro'
                           else 'Derechos'
                      end
                 else in_segmbs          
            end as in_segmbs, 
            or_titularitat, IN_SEGMBS0,  OR_SITUAC0, '?',
            DECODE(OR_TITUSCPCB,NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB) IN_TITULFIN, '?', OR_SEGGES,
            OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_VTAGRU, FI_TIPEXP, OR_NOMPER,
            OR_PERSONSCPCB, OR_CODPRODO, OR_IDECNO, OR_TITUSCPCB, OR_CNAESCPCB,
            OR_TITULARITAT OR_TITULARITAT_CTR, OR_PERSON OR_PERSON_CTR, OR_IDCNAE OR_IDCNAE_CTR, OR_TITUCTAVISTA, IN_INDMOR, OR_AJUVAL,
            OR_CLUNICUENT, NVL(IN_REFINAN,0), or_modrat0, IN_IDCALIFIC, OR_FECPUN0, OR_PUNT0, OR_RATINT, IN_IDCALIFICREL, OR_SEGFAC
       FROM BAS_MEN.BASILEA A        
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS 
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FECPRO,1,6)) acc
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = substr(PN_FECPRO,1,6)) titu	
--    WHERE FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG', 'TITACT2', 'NETTING')
/*19/03/2020 - NAV - TM-614 - calcular todas las variables de proceso para los eliminados por TITACT*/
/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
      WHERE FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'TITACT2', 'NETTING', 'TITACT', 'STSORI') 
      --AND a.or_idreg < acc.idreg_new
      	AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
      	AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */ 
        AND IN_TIPOREG IN ('SA', 'RX', 'PX', 'ITSA', 'OXC', 'MMOXC', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA')		--NAV 18/07/2019 - Añadido - 'CESA', 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
        AND IN_SEGMBSINI IN ('002','017','101','102');    
                                                          
   COMMIT;                                                

  VN_NUMERR:= 2;
  
  MERGE /*+ parallel(dst 4) parallel(src 4) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP_CA dst
     USING (SELECT IN_IDCALIFIC, TITULFIN, OR_FECPUN0, OR_MODRAT0, OR_PUNT0, OR_RATINT, OR_SITUAC0, IN_IDCALIFICREL
              FROM BAS_MEN.RATINGS_RECUPERADOS_CCAA) sCR
     ON (dst.IN_TITULFIN = scR.TITULFIN)
     WHEN MATCHED THEN
        UPDATE
           SET dst.IN_IDCALIFIC   	= scr.IN_IDCALIFIC, 
               dst.OR_FECPUN0     	= scr.OR_FECPUN0, 
               dst.OR_MODRAT0  			= scr.OR_MODRAT0, 
               dst.OR_PUNT0 				= scr.OR_PUNT0, 
               dst.OR_RATINT    		= scr.OR_RATINT, 
               dst.OR_SITUAC0  			= scr.OR_SITUAC0, 
               dst.IN_IDCALIFICREL	= scr.IN_IDCALIFICREL;

--FIN 06/02/2019 - Nav

    COMMIT;
    
/* CARGA LA TABLA DE CLIENTES */

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULARITAT_COMPTE_CLIENTE');
COMMIT;

INSERT /*+ parallel (B 8) */ INTO BAS_MEN.TITULARITAT_COMPTE_CLIENTE b
SELECT /*+ parallel (A 8) */ a.* FROM BAS_MEN.TITULARITAT_COMPTE a WHERE TIPPRODUCT = 'DV';

COMMIT;

-------------------------------------------------------
-- CALCULO FI_EDAIRB
-------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_SUCEPT_2_CCAA'); --TABLA USADA EN EL SIGUIENTE CURSOR.

  FOR CUR IN BASILEA5 LOOP -- ABRIMOS CURSOR Y LLAMAMOS A LA FUNCION PARA CALCULAR FI_EDAIRB
        VN_NUMERR:= 4;
        VV_FI_EXCEDID:= 'NO';
        VN_COUNT:= VN_COUNT + 1;
        
     BAS_MEN.FNC_CALCUL_CCF('AIRB',
                               PN_OPC_DER,
                               PN_F,
                               UPPER(CUR.IN_SEGMBS),
                               UPPER(CUR.FI_TIPEXP),
                               UPPER(CUR.OR_PROCED),
                               UPPER(CUR.OR_TIPOPE),
                               CUR.OR_VIDINI,
                               CUR.OR_VIDRES,
                               CUR.OR_CLUNICUENT,
                               'NO',
                               CUR.OR_TIPAVA,
                               CUR.IN_SEGMBSINI,
                               CUR.OR_EPIIND,
                               CUR.FI_EPICON,
                               CUR.IN_SEGMBS0,
                               VV_FI_EXCEDID,
                               CUR.OR_CTAIND,
                               0,
                               CUR.OR_TIPGAR,
                               CUR.OR_ENTITY,
                               CUR.IN_SUCEPT,
                               CUR.IN_TIPOREG,
                               CUR.OR_SEGFIC, /* 22/06/2022 - HDEV-107786 - JRJ Se añaden por modificar la funcion ccf */
                               CUR.OR_INDHOLDING,
                               CUR.IN_SEGMBS2,
                               VN_FI_CCFAIRB,
                               PV_RET);

        VN_FI_EADAIRB:= CUR.TOTAL * VN_FI_CCFAIRB;

/* 16/12/2020 - INI */
--      IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,VN_FI_EADAIRB + CUR.OR_FAIRVA);
--      ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.OR_EPIIND,1,5) NOT IN ('02002','02003','02004') THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
--      END IF;
--        
        IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
           VN_FI_EADAIRB:= VN_FI_EADAIRB + BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '01' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '02' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.IN_FAIRVABO - CUR.OR_FAIRVA);
        END IF;
/* 16/12/2020 - FIN */

        IF UPPER(CUR.IN_INDMOR) = 'SI' THEN
             VN_FI_EADAIRB:= CUR.TOTAL;
        END IF;


        VN_NUMERR:= 7; --insertamos en la tabla temporal una vez calculado FI_EDAIRB
        INSERT INTO BAS_MEN.TEMP_SUCEPT_2_CCAA (OR_IDREG, FI_EADAIRB)
            VALUES (CUR.OR_IDREG, VN_FI_EADAIRB);

  END LOOP;

  COMMIT;

  VN_NUMERR:= 8;

  -------------------------------------------------
  ----CARGA TABLA MAESTRO_TOTAL_CONCEDIDO_CA
  -- Tabla que contiene el total concedido por titularidad
  -------------------------------------------------
  

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA
     SELECT OR_TITULARITAT, MAX(OR_FECOPE) FECOPE,
            SUM(OR_DISPTO+OR_DISBLE+OR_AVALES+DECODE(OR_REPOS,0,0,B.FI_EADAIRB)+DECODE(OR_FUTURS,0,0,B.FI_EADAIRB)) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA A,
               BAS_MEN.TEMP_SUCEPT_2_CCAA B
      WHERE A.OR_IDREG = B.OR_IDREG(+)
        AND A.OR_CODPRODO NOT IN('FA 00013', 'FA 00014', 'FA 00009'
                               , 'FA 00010', 'FA 00011', 'FA 00012') -- @RMC 20090930: FACTORING CON COBERTURA NO TIENEN RIESGO
        AND A.OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
      GROUP BY OR_TITULARITAT;                                                                                            

  COMMIT;

  VN_NUMERR:= 9;

  -------------------------------------------------
  -- CARGA TABLA BAS_MEN.MAESTRO_AJUSTES_CA
  -- Tabla que identifica aquellas titularidades que exclusivamente son Ajustes
  -------------------------------------------------

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_AJUSTES_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_AJUSTES_CA
      SELECT A.OR_TITULARITAT, 'CAAJUS' ORIGEN
       FROM (SELECT DISTINCT OR_TITULARITAT
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

  COMMIT;

  VN_NUMERR:= 10;

  -------------------------------------------------
  ----CARGA TABLA MAESTRO_PROCED_CA
  -- Identificación de la procedencia de la titularidad
  -- Tabla que identifica aquellas titularidades que exclusivamente son
  -- avales, tarjetas, tipope o una combinación de tarjetas y avales
  -------------------------------------------------
  -- ACC-VJB 16/01/'08 Se excluyen los Ajustes
 
  VN_NUMERR:= 11;
  

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_CA');

--tarjetas
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA
     SELECT A.OR_TITULARITAT, 'TARGES'
       FROM (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance'
                AND (OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC')))) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA 
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance'
                AND OR_TIPOPE != 'TC' AND (OR_PROCED NOT IN ('TARGES','TARGES-PC'))) B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

    COMMIT;
    
  VN_NUMERR:= 12;
    
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA
     SELECT C.*
       FROM (SELECT A.OR_TITULARITAT, 'AVALES'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                              WHERE FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))) A,
                    (SELECT DISTINCT OR_TITULARITAT
                       FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                              WHERE FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE NOT IN ('AF','AT')
                        AND OR_PROCED NOT IN ('AVALES','ES-AVALES')) B
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED_CA D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN IS NULL;

  COMMIT;

  VN_NUMERR:= 13;
  
--se identifican los factoring para que así no se traten mas adelante como riesgo diverson ACC-VJB 23/07/2008
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA 
     SELECT C.* 
       FROM (SELECT A.OR_TITULARITAT, 'FACT'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (select * from BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE  IN_SEGMBS <> 'Project Finance' 
                        AND (in_segmbs   = 'Derechos Cobro')) A,
                    (SELECT DISTINCT OR_TITULARITAT
                       FROM (select * from BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance' 
                        AND NOT (in_segmbs   = 'Derechos Cobro')) B
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED_CA D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN IS NULL;
        
  COMMIT;      
        
--se identifican los descubiertos para que así no se traten mas adelante como riesgo diverson ACC-VJB 23/07/2008
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA 
     SELECT C.* 
       FROM (SELECT A.OR_TITULARITAT, 'DESCUBIERT'
               FROM (SELECT DISTINCT OR_TITULARITAT
                       FROM (select * from BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE  IN_SEGMBS <> 'Project Finance' 
                        AND (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) A,
                    (SELECT DISTINCT OR_TITULARITAT
                       FROM (select * from BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                              where FI_TIPEXP <> 'Ajustes'
                                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
                      WHERE IN_SEGMBS <> 'Project Finance' 
                        AND NOT (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) B
              WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                AND B.OR_TITULARITAT IS NULL) C,
            BAS_MEN.MAESTRO_PROCED_CA D
      WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
        AND D.IN_TITULFIN IS NULL;
        
  COMMIT;
  -- MODIFICACIÓN 25/03/09@AALL: agregar Descubiertos para riesgos diversos  
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA
  SELECT C.*
    FROM (SELECT A.OR_TITULARITAT, 'TA-AV-FA'
            FROM (SELECT DISTINCT OR_TITULARITAT   -- RECOGE TAJETAS, AVALES Y FACTORING
                    FROM (SELECT * 
                            FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                           WHERE FI_TIPEXP <> 'Ajustes'
                             AND OR_PROCED NOT IN (SELECT DISTINCT AT_PROCED 
                                                     FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT 
                                                    WHERE SUCEPTIBLE = 'N'))
                   WHERE (IN_SEGMBS <> 'Project Finance')
                     AND ((OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC')))      --TARJETAS
                      OR (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES')) --AVALES   --AVJ-ACC 16/01/'08 AVALES ANTERIORES A 2001
                      OR (in_segmbs   = 'Derechos Cobro')                                  --FACTORING 12/02/08 - VJB -
                      OR (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC')))) A,                   -- DESCUBIERTO  MODIFICACIÓN 25/03/09           
                 (SELECT DISTINCT OR_TITULARITAT                                           -- RECOGE LOS QUE NO TIENEN NI TARJETAS NI FACTORING NI AVALES
                    FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                           WHERE FI_TIPEXP <> 'Ajustes'
                             AND OR_PROCED NOT IN (SELECT DISTINCT AT_PROCED 
                                                     FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT 
                                                    WHERE SUCEPTIBLE = 'N'))
                   WHERE (IN_SEGMBS <> 'Project Finance')
                     AND NOT(OR_TIPOPE = 'TC' OR (OR_PROCED IN ('TARGES','TARGES-PC')))       --TARJETAS
                     AND NOT(OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES')) --AVALES     --AVJ-ACC 16/01/'08 AVALES ANTERIORES A 2001
                     AND NOT(IN_SEGMBS = 'Derechos Cobro')                                    --FACTORING 12/02/08 - VJB -
                     AND NOT (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) B                    ---DESCUBIERTO MODIFICACIÓN 25/03/09 
           WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
             AND B.OR_TITULARITAT IS NULL) C,
         BAS_MEN.MAESTRO_PROCED_CA D
   WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
     AND D.IN_TITULFIN IS NULL; 

COMMIT;

  VN_NUMERR:= 14;
--Se introducen registros que tienen un tipope '?' y su procedencia no es susceptible. 9/11/07.

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_CA_TIPOPE');

  COMMIT;

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA_TIPOPE
  SELECT C.*
    FROM (SELECT A.OR_TITULARITAT, 'TIPOPE_INT'
            FROM (SELECT DISTINCT OR_TITULARITAT
                    FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA WHERE FI_TIPEXP <> 'Ajustes')
                   WHERE IN_SEGMBS <> 'Project Finance'
                     AND OR_TIPOPE = '?'
                                 AND OR_PROCED NOT IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')) A,
                 (SELECT DISTINCT OR_TITULARITAT
                    FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA WHERE FI_TIPEXP <> 'Ajustes')
                   WHERE IN_SEGMBS <> 'Project Finance'
                     AND OR_TIPOPE <> '?') B
                   WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
                     AND B.OR_TITULARITAT IS NULL
          ) C
       , (SELECT * FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN NOT IN('TA-AV-FA', 'DESCUBIERT')) D
   WHERE C.OR_TITULARITAT = D.IN_TITULFIN(+)
     AND D.IN_TITULFIN IS NULL;
    
  COMMIT;
  
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA_TIPOPE
  SELECT C.*
    FROM (SELECT A.OR_TITULARITAT, 'TIPOPE'
            FROM (SELECT DISTINCT OR_TITULARITAT
                    FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA WHERE FI_TIPEXP <> 'Ajustes')
                   WHERE IN_SEGMBS <> 'Project Finance'
                     AND OR_TIPOPE IN ('?','AA','AD','IP','OT','RF','RV','SS', 'OV') -- 201512 Se añaden las 'OV' por arranque aplicaciones BDU 
                 ) A -- /*@RMC 201012: LI se considera susceptible */
               , (SELECT DISTINCT OR_TITULARITAT
                    FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA WHERE FI_TIPEXP <> 'Ajustes')
                   WHERE  IN_SEGMBS <> 'Project Finance'
                     AND OR_TIPOPE NOT IN ('?','AA','AD','IP','OT','RF','RV','SS', 'OV') -- 201512 Se añaden las 'OV' por arranque aplicaciones BDU 
                 ) B /*@RMC 201012: LI se considera susceptible */
           WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
             AND B.OR_TITULARITAT IS NULL
         ) C
       , (SELECT * FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN NOT IN('TA-AV-FA', 'DESCUBIERT')) D
       , BAS_MEN.MAESTRO_PROCED_CA_TIPOPE E
   WHERE C.OR_TITULARITAT  = D.IN_TITULFIN(+)
     AND D.IN_TITULFIN    IS NULL
     AND C.OR_TITULARITAT  = E.IN_TITULFIN (+)
     AND E.IN_TITULFIN    IS NULL; -- JCV 16/04/2015

  COMMIT;

-- IDENTIFICA LAS TITULARIDADES FORMADAS UNICAMENTE POR PRODUCTOS DE UNITITULARIDAD

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_UNITITU_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_UNITITU_CA
  SELECT A.OR_TITULARITAT, 'DIFTITULAR'
       FROM (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA  WHERE FI_TIPEXP <> 'Ajustes')
              WHERE IN_SEGMBS <> 'Project Finance' 
                AND (OR_PROCED IN (/*'FACTORING',*/'CONFIRMING','FORFAITING','TARGES','DERIVAT-E4','EFECTES'))) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA  WHERE FI_TIPEXP <> 'Ajustes')
              WHERE  IN_SEGMBS <> 'Project Finance' 
                AND (OR_PROCED NOT IN (/*'FACTORING',*/'CONFIRMING','FORFAITING','TARGES','DERIVAT-E4','EFECTES'))) B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;
        
  COMMIT;
  
-- Descubiertos

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_CA_DESCUB');
  COMMIT;
  
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA_DESCUB
     SELECT A.OR_TITULARITAT, 'DESCUBIERTOS'
       FROM (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance' 
                AND (OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC'))) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM (SELECT * FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
                      WHERE FI_TIPEXP <> 'Ajustes'
                        AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S'))
              WHERE IN_SEGMBS <> 'Project Finance' 
                AND (OR_PROCED NOT IN ('INV-C/C-DC','INV-C/E-DC'))) B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;
        
  COMMIT ;
  
-- AVALES CON EOPERACIONES ANTERIORES AL AÑO 2001

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_CA_AVA_OLD');
  COMMIT;
  
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_CA_AVA_OLD
  SELECT DISTINCT A.*, 'AVALES_OLD'
    FROM (SELECT OR_TITULARITAT
            FROM BAS_MEN.MAESTRO_PROCED_CA PR
               , BAS_MEN.MAESTRO_SUCEPT_TEMP_CA SU
           WHERE PR.IN_TITULFIN = SU.OR_TITULARITAT 
             AND SU.FI_TIPEXP <> 'Ajustes'
             AND SU.IN_SEGMBS <> 'Project Finance'
             AND SU.OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
             AND PR.ORIGEN = 'AVALES'
             AND SU.OR_FECOPE<20010101) A,
         (SELECT OR_TITULARITAT
            FROM BAS_MEN.MAESTRO_PROCED_CA PR
               , BAS_MEN.MAESTRO_SUCEPT_TEMP_CA SU
           WHERE PR.IN_TITULFIN = SU.OR_TITULARITAT 
             AND SU.FI_TIPEXP <> 'Ajustes'
             AND SU.IN_SEGMBS <> 'Project Finance'
             AND SU.OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
             AND PR.ORIGEN = 'AVALES'
             AND SU.OR_FECOPE>=20010101) B
   WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
     AND B.OR_TITULARITAT IS NULL;
   
  COMMIT;

-- IDENTIFICA LAS TITULARIDADES CON OPERACIONES PR-MOROS  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_MOROSOS_CA');
  COMMIT;
  
  /* xcg 201103: SI LA TITULARIDAD TIENE ALGUNA PROCEDENCIA MOROSA */
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_MOROSOS_CA
  SELECT DISTINCT a.OR_TITULARITAT, 'PR-MOROS'
    from (select or_titularitat
            from BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
           WHERE FI_TIPEXP <> 'Ajustes'
             AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S') 
             AND OR_PROCED in('PR-MOROS','INV-C/C-CO','INV-C/E-CO','CONTENCIOS', 'PR-CONTENC')) A;            
   
  COMMIT;
  
  VN_NUMERR:= 15;

-------------------------------------------------------
-- CARGA MAESTRO_NOCL_CA
-- Identifica las titularidades que son NO Cliente
-- CVISTA=1 Cliente
-- CVISTA=0 NO Cliente
-------------------------------------------------------
-- ACC-VJB 16/01/'08

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_NOCL_CA');

   INSERT /*+ full(c) parallel (c 8) */  INTO BAS_MEN.MAESTRO_NOCL_CA c
      SELECT /*+ full(a) parallel (a 8) full(b) parallel (b 8) */  A.OR_TITULARITAT, MAX(DECODE(b.TIPPRODUCT,'DV',1,0)) CVISTA
        FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA A,
             BAS_MEN.TITULARITAT_COMPTE B
       WHERE A.OR_TITULARITAT = B.CODTIT(+)
         AND A.IN_TITULFIN NOT IN (0,9)
       GROUP BY A.OR_TITULARITAT;

  COMMIT;

  VN_NUMERR:= 16;

  
-------------------------------------------------------
-- CARGA MAESTRO_TOTAL_CONCEDIDO_CA_ava
-- Tabla que contiene el total concedido de los avales >=2001 de titularidades que solamente son avales
-- VJB-ACC 16/01/'08
-------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA_ava');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_CA_ava
     SELECT A.OR_TITULARITAT, MAX(A.OR_FECOPE) FECOPE, SUM(OR_AVALES) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA A,
                  BAS_MEN.MAESTRO_PROCED_CA B
      WHERE A.OR_TITULARITAT=B.IN_TITULFIN
              AND B.ORIGEN='AVALES'
                --AND A.OR_FECOPE>20010000
      GROUP BY A.OR_TITULARITAT;
 
  COMMIT;     
-------------------------------------------------------------      
-- CARGA MAESTRO TOTAL CONCIDO AVALES TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOT_CONC_AVAL_DIVR_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOT_CONC_AVAL_DIVR_CA
SELECT OR_TITULARITAT IN_TITULFIN, SUM(OR_AVALES) TOT_AVALES
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))
GROUP BY OR_TITULARITAT;

  COMMIT;

-------------------------------------------------------------      
-- CARGA MAESTRO TOTAL CONCIDO TARGETAS TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOT_CONC_TARG_DIVR_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOT_CONC_TARG_DIVR_CA
SELECT OR_TITULARITAT IN_TITULFIN, SUM(OR_DISPTO + OR_DISBLE) TOT_CONC, 'TARGES-DIVR'
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE = 'TC' OR (/*OR_TIPOPE = '?' AND*/ OR_PROCED IN ('TARGES','TARGES-PC')))
 GROUP BY OR_TITULARITAT;

  COMMIT;

-------------------------------------------------------------      
-- CARGA MAESTRO_FACTORING_DIVR_CA TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------
 
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_FACTORING_DIVR_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_FACTORING_DIVR_CA
SELECT IN_TITULFIN
     , CASE
         WHEN MAX(DECODE(C.TIPPRODUCT,'DV',1,0)) = 0 THEN 1
         WHEN MAX(PROMOTOR) = 1                      THEN 1
         WHEN MAX(DECODE(C.TIPPRODUCT,'DV',1,0)) = 1
              AND CONCED < 1800                      THEN 1
         ELSE  0
       END RIESGO_DIVERSO
     , CASE
         WHEN MAX(DECODE(C.TIPPRODUCT,'DV',1,0)) = 0 THEN 'DIVR'
         WHEN MAX(PROMOTOR) = 1                      THEN 'DIVR'
         WHEN MAX(DECODE(C.TIPPRODUCT,'DV',1,0)) = 1
              AND CONCED < 1800                      THEN 'DIVR'
         ELSE  'SUCP'
       END IN_SUCEPT
  FROM (SELECT OR_TITULARITAT IN_TITULFIN
             , SUM(CASE -- @RMC 20090930: FACTORING CON COBERTURA NO SUMA
                     WHEN OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009'
                                        , 'FA 00010', 'FA 00011', 'FA 00012') THEN
                          0
                     ELSE OR_DISPTO+OR_DISBLE
                   END) CONCED
             , MAX(CASE
                     WHEN IN_SEGMBS2 = '020'                THEN 1 -- Promotor
                     WHEN OR_TIPIDE = 12                    THEN 1 -- No residente
                     WHEN OR_PERSON = 805                   THEN 1 -- Personalidad UTE
                     WHEN IN_SEGMBSINI = '019'              THEN 1 -- Multitularidad
                     WHEN SUBSTR(OR_NIFCIF,1,3) = '777' THEN 1 -- Nif comienza por 777
                     ELSE 0
               END) PROMOTOR 
          FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA 
         WHERE IN_SEGMBS = 'Derechos Cobro'
           AND OR_TITULARITAT IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
         group by OR_TITULARITAT) A
     , BAS_MEN.TITULARITAT_COMPTE C
 WHERE A.IN_TITULFIN = C.CODTIT(+)
   AND A.IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND A.IN_TITULFIN NOT IN (0,9)
GROUP BY A.IN_TITULFIN, A.CONCED;

  COMMIT;

-------------------------------------------------------------      
-- CARGA MAESTRO AVALES POSTERIORES 2001 PERTANECIENTE TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROC_AVAL_POST_DIVR_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROC_AVAL_POST_DIVR_CA
SELECT IN_TITULFIN, COUNT(*) NUM_AVALES
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND (OR_TIPOPE IN ('AF','AT') OR OR_PROCED IN ('AVALES','ES-AVALES'))
   AND OR_FECOPE >= 20010101
GROUP BY IN_TITULFIN;

  COMMIT;
-------------------------------------------------------------      
-- CARGA MAESTRO TARGETAS PERTENECIENTE TITULARIDADES RIESGO DIVERSO
-------------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SEGGES_TARGES_DIVR_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_SEGGES_TARGES_DIVR_CA
SELECT IN_TITULFIN, OR_SEGGES,OR_SEGFAC
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
   AND IN_TITULFIN = OR_TITULARITAT_CTR
 GROUP BY IN_TITULFIN, OR_SEGGES, OR_SEGFAC, OR_TITULARITAT_CTR;

  COMMIT;

--
-- Se añaden los Ajustes si no existe ya la titularidad. JCVJCV
--
INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_SEGGES_TARGES_DIVR_CA
SELECT MSus.IN_TITULFIN, MSus.OR_SEGGES, MSus.OR_SEGFAC
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA       MSus
     , BAS_MEN.MAESTRO_SEGGES_TARGES_DIVR_CA MTit
 WHERE MSus.IN_TITULFIN   IN (SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND MSus.FI_TIPEXP      = 'Ajustes'
   AND MSus.OR_PROCED     IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
   AND MSus.IN_TITULFIN    = MSus.OR_TITULARITAT_CTR
   AND MSus.IN_TITULFIN    = MTit.IN_TITULFIN (+)
   AND MTit.IN_TITULFIN   IS NULL
 GROUP BY MSus.IN_TITULFIN, MSus.OR_SEGGES, MSus.OR_SEGFAC;

  COMMIT;
  
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITULAR_SEGGES_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TITULAR_SEGGES_CA
SELECT IN_TITULFIN, OR_SEGGES, OR_SEGFAC
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TARGES')
   AND IN_TITULFIN = OR_TITULARITAT_CTR
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
 GROUP BY IN_TITULFIN, OR_SEGGES, OR_SEGFAC;

  COMMIT;

--
-- Se añaden los Ajustes si no existe ya la titularidad. JCVJCV
--
INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TITULAR_SEGGES_CA
SELECT MSus.IN_TITULFIN, MSus.OR_SEGGES, MSus.OR_SEGFAC
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA    MSus
     , BAS_MEN.MAESTRO_TITULAR_SEGGES_CA MTit
 WHERE MSus.IN_TITULFIN IN (SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TARGES')
   AND MSus.IN_TITULFIN  = MSus.OR_TITULARITAT_CTR
   AND Msus.FI_TIPEXP    = 'Ajustes'
   AND MSus.IN_TITULFIN  = MTit.IN_TITULFIN (+)
   AND MTit.IN_TITULFIN IS NULL
 GROUP BY MSus.IN_TITULFIN, MSus.OR_SEGGES, MSus.OR_SEGFAC;

  COMMIT;

-------------------------------------------------------------      
-- CARGA MAESTRO DESCUBIERTOS PERTANECIENTE TITULARIDADES RIESGO DIVERSO --- MODIFICACIÓN : 25/03/09
-------------------------------------------------------------

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_DESCUB_DIVR_CA');

INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_DESCUB_DIVR_CA
SELECT IN_TITULFIN, 'DESCUBIERTOS-DIVR'
  FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
 WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.MAESTRO_PROCED_CA WHERE ORIGEN ='TA-AV-FA')
   AND FI_TIPEXP <> 'Ajustes'
   AND IN_SEGMBS <> 'Project Finance'
   AND OR_PROCED IN ('INV-C/C-DC','INV-C/E-DC')
 GROUP BY IN_TITULFIN, 'DESCUBIERTOS';

  COMMIT;

  VN_NUMERR:= 17;

--INI 06/02/2019 - Nav - Carga de la tabla MAESTRO_EMPLEADOS hemos llevadoe en FNC_FILTRO.sql
-------------------------------------------------------
-- CARGA TABLA MAESTRO_EMPLEADOS
-- Tabla que contiene los empleados de BS para considerarlos como no susceptibles
-- VJB-ACC 16/01/'08
-------------------------------------------------------

--BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EMPLEADOS');
--
-- INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_EMPLEADOS
--        (DNI)
-- SELECT DECODE(SUBSTR(ID_LEGAL, 1, 1), 'X', ID_LEGAL, 'Y', ID_LEGAL, LPAD(ID_LEGAL, 12, '0'))
--   FROM BAS_MEN.EMPLEADOS
--  WHERE FEC_ALTA_EMPLEADO <= PN_FECPRO
--    AND (FEC_BAJA IS NULL OR FEC_BAJA >= PN_FECPRO);
--
--  COMMIT;
--
--  DELETE BAS_MEN.MAESTRO_EMPLEADOS
--   WHERE DNI = '00090000965X';
--
--  COMMIT;
--
--  VN_NUMERR:= 18;
--FIN 06/02/2019 - Nav


-------------------------------------------------------
-- CARGA SOLO_FSR_CA (Identifica los Factoring sin recurso)
-- Tabla que guarda los registros q únicamente son Derechos de Cobro. 9/07/07.
-------------------------------------------------------

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SOLO_FSR_CA');

   COMMIT;

   INSERT /*+ APPEND */ INTO BAS_MEN.SOLO_FSR_CA
     SELECT A.OR_TITULARITAT, A.CONCED
       FROM (SELECT OR_TITULARITAT
                  , SUM(CASE -- @RMC 20090930: FACTORING CON COBERTURA NO SUMA
                          WHEN OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009'
                                             , 'FA 00010', 'FA 00011', 'FA 00012') THEN
                               0
                          ELSE OR_DISPTO+OR_DISBLE
                        END) CONCED
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
              WHERE (IN_SEGMBS = 'Derechos Cobro' 
                     or or_proced in('FORFAITING')) --@RMC 20100331: Se añade confirming y forfaiting
                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                AND FI_TIPEXP <> 'Ajustes'
              group by OR_TITULARITAT) A,
            (SELECT DISTINCT OR_TITULARITAT
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
              WHERE IN_SEGMBS != 'Derechos Cobro'
                and or_proced not in('FORFAITING') --@RMC 20100331: Se añade confirming y forfaiting
                AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                AND FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

   COMMIT;

  VN_NUMERR:= 19;

-------------------------------------------------------
-- CARGA MAESTRO_CV_CA (Identifica los Factoring sin recurso No Cliente)
-- Tabla que guarda los registros q únicamente son Derechos de Cobro y no tienen una titularidad de cuenta vista. 9/07/07.
-------------------------------------------------------
   
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CV_CA');

   INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_CV_CA
      SELECT A.IN_TITULFIN,  MAX(DECODE(C.TIPPRODUCT,'DV',1,0)) CVISTA, A.CONCED
        FROM BAS_MEN.SOLO_FSR_CA A,
             BAS_MEN.TITULARITAT_COMPTE C
       WHERE A.IN_TITULFIN = C.CODTIT(+)
         AND A.IN_TITULFIN NOT IN (0,9)
       GROUP BY A.IN_TITULFIN, A.CONCED;

   COMMIT;

  VN_NUMERR:= 20;


-------------------------------------------------------
-- CARGA MAESTRO_CV_PROD
-- Tabla que guarda las titularidades con código de producto de Factoring con cobertura. 30/10/07.
-- identificados por los productos FA 00013 y FA 00014
-------------------------------------------------------
--VJB-ACC 18/01/'07 coger el dato directamente del campo OR_CODPRODO

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CV_PROD_CA');

   INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_CV_PROD_CA
      SELECT DISTINCT A.OR_TITULARITAT
        FROM (SELECT DISTINCT OR_TITULARITAT
                FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
               WHERE OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012')
                 AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                 AND FI_TIPEXP <> 'Ajustes') A
           , (SELECT DISTINCT OR_TITULARITAT
                FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA
               WHERE OR_CODPRODO NOT IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012')
                 AND OR_PROCED IN (SELECT DISTINCT AT_PROCED FROM BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT WHERE SUCEPTIBLE = 'S')
                 AND FI_TIPEXP <> 'Ajustes') B
           --, BAS_MEN.SOLO_FSR_CA C
      WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;

  COMMIT;

  VN_NUMERR:= 21;

-------------------------------------------------------
-- CARGA MAESTRO_CV_PROD_FSR_CA (Identifica Factoring sin Recurso con Cobertura)
-- Tabla que guarda las titularidades con código de producto de Factoring con cobertura. 30/10/07.
-- identificados por los productos FA 00013 y FA 00014  que ademas son derechos de cobro exclusivamente 29/01/08 ACC/VJB
-------------------------------------------------------

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CV_PROD_FSR_CA');

   INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_CV_PROD_FSR_CA
      SELECT A.ID_TITULARITAT
        FROM BAS_MEN.MAESTRO_CV_PROD_CA  A
           , BAS_MEN.SOLO_FSR_CA         B
      WHERE A.ID_TITULARITAT = B.IN_TITULFIN;

   COMMIT;

  VN_NUMERR:= 22;

-------------------------------------------------------
-- CARGA MAESTRO_PROCED_NOSUSCEPT_CA
-- Identificación de las titularidades que solamente tienen procedencias no susceptibles
-- ACC-VJB 02/07/2008
-------------------------------------------------------      

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_NOSUSCEPT_CA');
  
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_NOSUSCEPT_CA
  SELECT DISTINCT A.OR_TITULARITAT, 'CAPROC'
            FROM (
            SELECT DISTINCT A.OR_TITULARITAT
            FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA A,
                 BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT B
            WHERE  A.OR_PROCED=B.AT_PROCED
            AND A.FI_TIPEXP <> 'Ajustes'
            /*AND B.AT_PROCED not in('PR-MOROS','INV-C/C-CO','INV-C/E-CO')*/) A,   --@RMC 201003: Se quitan del tratamiento 
            (
            SELECT DISTINCT A.OR_TITULARITAT
            FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA A,
                 BAS_MEN.MAESTRO_PROCEDENCIA_SUCEPT B
            WHERE  A.OR_PROCED=B.AT_PROCED
            AND A.FI_TIPEXP <> 'Ajustes'
            AND NOT (SUCEPTIBLE = 'N'
                          /*AND B.AT_PROCED not in('PR-MOROS','INV-C/C-CO','INV-C/E-CO')*/)) B   --@RMC 201003: Se quitan del tratamiento 
            WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
        AND B.OR_TITULARITAT IS NULL;
  
   COMMIT;

  VN_NUMERR:= 23;
   
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_CA');    

 /************************************************************************************/
/* LLAMADA A LA FUNCION                                                             */
/************************************************************************************/
insert /*+ PARALLEL (x 8) */ into BAS_MEN.MAESTRO_SUCEPT_CA x
select cur.* 
  from table(BAS_MEN.SUCEPT_CA.F_SUCEPT_CA(cursor(select /*+ PARALLEL(ua 8) */ UA.* FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CA ua),PN_FECPRO)) cur; 
  
COMMIT;   
  
  VN_NUMERR:= 24;

  -------------------------------------------------
  ----CONTAGIO POR CANSBS
  -------------------------------------------------
  --contagiamos empleado no susceptible a toda la titularidad

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  COMMIT;

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
    SELECT DISTINCT a.IN_TITULFIN, '?'
      FROM BAS_MEN.MAESTRO_SUCEPT_CA A
     WHERE A.IN_SUCEPT = 'CANSBS'
       AND A.IN_TITULFIN NOT IN (0,9);

  COMMIT;
  
  UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
     SET IN_SUCEPT= 'CANSBS'
   WHERE IN_TITULFIN IN (SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA);

    VN_NUMERR:= 25;

  --------------------------------------------------------------
  ----CONTAGIO POR PERSONALIDAD INCORRECTA O SIN CNAE INFORMADO
  --------------------------------------------------------------
--VJB-ACC 16/01/'08
--Corrección no susceptibilidad por PERSONALIDAD INCORRECTA o sin CNAE informado: marcamos como susceptibles las titularidades
--que tengan exposiciones marcadas como susceptibles y no susceptibles por personalidad incorrecta o sin CNAE informado

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
  SELECT A.IN_TITULFIN, '?'
      FROM (SELECT DISTINCT IN_TITULFIN
              FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT IN ('CANSSP','CANSSC')) A,
               (SELECT DISTINCT IN_TITULFIN
                  FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CASUCP') B
        WHERE A.IN_TITULFIN = B.IN_TITULFIN
        AND A.IN_TITULFIN NOT IN (0,9) ;

   COMMIT;

   UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
      SET IN_SUCEPT = 'CASUCP'
    WHERE IN_SUCEPT IN ('CANSSP','CANSSC')
      AND IN_TITULFIN IN ( SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA);

  COMMIT;
  
  VN_NUMERR:= 26;
  
-------------------------------------------------------------------------------------
----CONTAGIO DE NO SUSCEPTIBLE SIN PERSONALIDAD/CNO A NO SUSCEPTIBLE POR MOTIVO X ---
-------------------------------------------------------------------------------------
--@RMC 17/11/2008
-- Si hay duplicidad del IN_SUCEPT por No suceptible motivo X y No susceptible por
-- Personalidad/CNO: Se contagian todos los registros a No suceptible motivo X 

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
  SELECT A.IN_TITULFIN, IN_SUCEPT
      FROM (SELECT DISTINCT IN_TITULFIN
              FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT IN ('CANSSP','CANSSC')) A,
               (SELECT DISTINCT IN_TITULFIN, IN_SUCEPT
                  FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE SUBSTR(IN_SUCEPT,1,4) = 'CANS'
                    AND IN_SUCEPT NOT IN('CANSSP','CANSSC')) B
        WHERE A.IN_TITULFIN = B.IN_TITULFIN
        AND A.IN_TITULFIN NOT IN (0,9);

  COMMIT;

  UPDATE /*+ FULL(B) */ BAS_MEN.MAESTRO_SUCEPT_CA B
     SET IN_SUCEPT = (SELECT IN_SUCEPT FROM BAS_MEN.TITULFIN_TEMP_CA SU
                                        WHERE B.IN_TITULFIN = SU.IN_TITULFIN)
   WHERE IN_TITULFIN IN(SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA SU
                                        WHERE B.IN_TITULFIN = SU.IN_TITULFIN)
     AND IN_SUCEPT IN ('CANSSP','CANSSC');

  COMMIT;
  
  VN_NUMERR:= 27;

 -------------------------------------------------
  ----CONTAGIO POR TIPO DE OPERACION
  -------------------------------------------------
--VJB-ACC 16/01/'08
--Corrección no susceptibilidad por tipo de operacion: marcamos como susceptibles las titularidades
--que tengan exposiciones marcadas como susceptibles y no susceptibles por tipo de operacion

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
  SELECT A.IN_TITULFIN, '?'
      FROM (SELECT DISTINCT IN_TITULFIN
              FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CATIPO') A,
               (SELECT DISTINCT IN_TITULFIN
                  FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CASUCP') B
        WHERE A.IN_TITULFIN = B.IN_TITULFIN
        AND A.IN_TITULFIN NOT IN (0,9);

   COMMIT;

   UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
      SET IN_SUCEPT = 'CASUCP'
    WHERE IN_SUCEPT = 'CATIPO'
      AND IN_TITULFIN IN ( SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA);

  COMMIT;
  
  -------------------------------------------------
  ----CONTAGIO POR TIPO DE OPERACION
  -------------------------------------------------
--@RMC 15/10/2008
--Incidencia nº26: Los contagios que aparecen en el  documento son correctos, si bien falta un contagio 
--análogo al del CATIPO, el del CAPROC. Por otro lado, es necesario puntualizar que el contagio no se realiza
--únicamente a CASUCP (puede ser a CASCSR...etc). 

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
  SELECT A.IN_TITULFIN, '?'
      FROM (SELECT DISTINCT IN_TITULFIN
              FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CAPROC') A,
               (SELECT DISTINCT IN_TITULFIN
                  FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CASUCP') B
        WHERE A.IN_TITULFIN = B.IN_TITULFIN
        AND A.IN_TITULFIN NOT IN (0,9) ;

   COMMIT;

   UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
      SET IN_SUCEPT = 'CASUCP'
    WHERE IN_SUCEPT = 'CAPROC'
      AND IN_TITULFIN IN ( SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA);

  COMMIT;

  VN_NUMERR:= 28;
 
  -------------------------------------------------
  ----CONTAGIO POR BLOQUEO
  -------------------------------------------------
  --contagiamos bloqueo a toda la titularidad excepto promotores

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  COMMIT;

  for cur in CONTAGIOBLQR loop

    UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
       SET IN_SUCEPT= 'CABLQR'
     WHERE OR_TITULARITAT = CUR.OR_TITULARITAT; 

  end loop;

  COMMIT;
    
  VN_NUMERR:= 29;

  -------------------------------------------------
  ----CONTAGIO DE JUBILADOS A SUSCEPTIBLES
  -------------------------------------------------

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
  SELECT A.IN_TITULFIN, '?'
      FROM (SELECT DISTINCT IN_TITULFIN
              FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CANSJU') A,
               (SELECT DISTINCT IN_TITULFIN
                  FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CASUCP') B
        WHERE A.IN_TITULFIN = B.IN_TITULFIN
        AND A.IN_TITULFIN NOT IN (0,9) ;

   COMMIT;

   UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
      SET IN_SUCEPT = 'CASUCP'
    WHERE IN_SUCEPT = 'CANSJU'
      AND IN_TITULFIN IN ( SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA);

  COMMIT;
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TITULFIN_TEMP_CA');

  INSERT /*+ APPEND */ INTO BAS_MEN.TITULFIN_TEMP_CA
  SELECT A.IN_TITULFIN, '?'
      FROM (SELECT DISTINCT IN_TITULFIN
              FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT = 'CAPRMO') A,
               (SELECT DISTINCT IN_TITULFIN
                  FROM BAS_MEN.MAESTRO_SUCEPT_CA
                  WHERE IN_SUCEPT <> 'CAPRMO') B
        WHERE A.IN_TITULFIN = B.IN_TITULFIN
        AND A.IN_TITULFIN NOT IN (0,9) ;

   COMMIT;

   UPDATE BAS_MEN.MAESTRO_SUCEPT_CA
      SET IN_SUCEPT = 'CAPRMO'
     WHERE IN_SUCEPT <> 'CAPRMO'
       AND IN_TITULFIN IN ( SELECT IN_TITULFIN FROM BAS_MEN.TITULFIN_TEMP_CA);

  COMMIT;
    
  VN_NUMERR:= 30;
  
 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_CCAA_ORIG');
        
INSERT /*+ parallel (d 8)*/ INTO BAS_MEN.MAPA_USO_CCAA_ORIG d
        (OR_IDREG,OR_IDPERS,OR_TIPIDE,OR_NIFCIF,OR_TIPIDEIBM,OR_NIFCIFIBM,OR_TITULARITAT, OR_TITULARITA2,
        OR_NOMPER,OR_PERSON,OR_IDECNO,OR_IDCNAE,OR_PROCED, OR_NUMOFI,
        OR_REFOPE,OR_REFOPE2,OR_TIPOPE,OR_FECOPE,OR_FECVTO,OR_VIDINI,
        OR_VIDRES,IN_ANTIGU,OR_SEGGES,OR_SUBSEG,OR_TIPAVA,
        OR_TIPGAR,OR_DESTPR,OR_TIPOFI,OR_TIPOPR,OR_IMPLTV,OR_VALTAS,OR_CONCED,OR_IDPAIS,
        OR_CODSOL,IN_BCOATL,IN_ITITSN,IN_INDMOR,OR_IDPRO1,OR_ENTITY,OR_DIVISA,FI_TIPEXP,OR_DISPTO,OR_DISBLE,
        OR_AVALES,OR_DISPTOCON,OR_DISBLECON,OR_AVALESCON,OR_AJUVALCON,IN_VTAGRU,OR_RATINT,
        OR_MODRAT0,OR_SEGRIE,OR_PUNT0,OR_SITUAC0,
        OR_FECPUN0,IN_SEGMBSINI,IN_SEGMBS0,
        IN_SEGMBS1,IN_SEGMBS2,IN_SEGMBS,IN_SUCEPT,
        OR_CLUNIENT,OR_CLUNIPROD,OR_CLUNICONTR,OR_CLUNICUENT,OR_CLUNIOPERA,FI_MESCURA,OR_FECCAR,OR_PRESTMIG,
        OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB, OR_CNAESCPCB, OR_INDHOLDING,
        OR_DESCTAVISTA , OR_CODPRODO, OR_PERSCTAVISTA,  
        OR_REPOS, OR_FUTURS, FI_EADAIRB, OR_MOTERROR, OR_CONTRATO_CRDGBL,
        IN_IDCALIFIC, OR_TITULARITAT_CTR, OR_PERSON_CTR, OR_IDCNAE_CTR, OR_FINABE, OR_TITUCTAVISTA, OR_SEGFIC)
      SELECT /*+ full(a) full(b) parallel (a 8) parallel (b 8)*/
        A.OR_IDREG,A.OR_IDPERS,A.OR_TIPIDE,A.OR_NIFCIF,A.OR_TIPIDEIBM,A.OR_NIFCIFIBM, B.OR_TITULARITAT, IN_TITULFIN,
        A.OR_NOMPER, A.OR_PERSON, A.OR_IDECNO, A.OR_IDCNAE,A.OR_PROCED, A.OR_NUMOFI,
        A.OR_REFOPE,A.OR_REFOPE2,A.OR_TIPOPE,A.OR_FECOPE,A.OR_FECVTO,A.OR_VIDINI,
        A.OR_VIDRES,A.IN_ANTIGU,A.OR_SEGGES,0 OR_SUBSEG,A.OR_TIPAVA,
        A.OR_TIPGAR,A.OR_DESTPR,A.OR_TIPOFI,A.OR_TIPOPR, A.OR_IMPLTV,A.OR_VALTAS,A.OR_CONCED,A.OR_IDPAIS,
      	0 OR_CODSOL, null IN_BCOATL,A.IN_ITITSN,A.IN_INDMOR,A.OR_IDPRO1,A.OR_ENTITY,A.OR_DIVISA,A.FI_TIPEXP,A.OR_DISPTO,A.OR_DISBLE,
        A.OR_AVALES,A.OR_DISPTOCON,A.OR_DISBLECON,A.OR_AVALESCON,A.OR_AJUVALCON,A.IN_VTAGRU,b.OR_RATINT,
        b.OR_MODRAT0, B.OR_SEGRIE, b.OR_PUNT0,b.OR_SITUAC0,
        b.OR_FECPUN0,A.IN_SEGMBSINI,A.IN_SEGMBS0,
        A.IN_SEGMBS1,A.IN_SEGMBS2,
        case
             when a.in_segmbs = 'Derechos Cobro'  then
                  case 
                       when a.OR_PROCED = 'FACTORING' and a.OR_CLUNICUENT != 999999999999999 then
                            'Derechos Cobro'
                       else 'Derechos'
                  end
             else a.in_segmbs          
        end as in_segmbs,
        case
             when SUBSTR(b.IN_SUCEPT,1,2) = 'CA' AND a.IN_SEGMBS2 = '020'	then 
             	    'CRNSUP'
             when a.OR_PUNT0 = 9999 and b.in_sucept = 'CASUCP' then
             	    'CASCSR'
             when a.oR_TITULARITAT in (0,9) and b.in_sucept = 'CASUCP' THEN 
             	    'CASCST'
             when SUBSTR(a.OR_SITUAC0,1,1) = 'D' and b.in_sucept = 'CASUCP' THEN
             	    'CASCP1'       	    
             else b.IN_SUCEPT     
        end IN_SUCEPT,
        A.OR_CLUNIENT,A.OR_CLUNIPROD,A.OR_CLUNICONTR,A.OR_CLUNICUENT,A.OR_CLUNIOPERA,A.FI_MESCURA,A.OR_FECCAR,A.OR_PRESTMIG,
        b.OR_CLAVISO, b.OR_FECALTBLO, A.OR_TITUSCPCB, A.OR_PERSONSCPCB, A.OR_CNAESCPCB, A.OR_INDHOLDING,
        A.OR_DESCTAVISTA , A.OR_CODPRODO, A.OR_PERSCTAVISTA, 
        A.OR_REPOS, A.OR_FUTURS, A.FI_EADAIRB, '?', 0 OR_CONTRATO_CRDGBL,
        b.IN_IDCALIFIC, B.OR_TITULARITAT_CTR, B.OR_PERSON_CTR, B.OR_IDCNAE_CTR, A.OR_FINABE, B.OR_TITUCTAVISTA
        ,case    			--INI 06/02/2019 - nav                                  
            when nvl(a.OR_SEGFAC,0) = 0 THEN
                 'E0'               
            when a.OR_SEGGES IN (0,4,5,9) THEN 
                 'E0'
            when a.OR_SEGGES = 3 THEN
                 case 
                      when a.OR_SEGFAC = 11 THEN
                           'E0'
                      when a.OR_SEGFAC = 12 THEN
                           'E1'
                      when SUBSTR(a.OR_SEGFAC,1,1) = 2 THEN
                          'E2'
                      when SUBSTR(a.OR_SEGFAC,1,1) = 3 THEN
                           'E3'     
                      when SUBSTR(a.OR_SEGFAC,1,1) = 4 THEN
                           'E4'
                      when SUBSTR(a.OR_SEGFAC,1,1) = 5 THEN
                           'E5'                                                 
                      else
                           'E0'
                 end 
            else 'E0'      
         end as OR_SEGFIC 	--FIN 06/02/2019 - nav
      FROM BAS_MEN.BASILEA A
         , BAS_MEN.MAESTRO_SUCEPT_CA B
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS          
--    WHERE A.FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG', 'TITACT2', 'NETTING')
/*19/03/2020 - NAV - TM-614 - calcular todas las variables de proceso para los eliminados por TITACT*/
/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
      WHERE A.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'TITACT2', 'NETTING', 'TITACT', 'STSORI') 
--FIN      
        AND A.IN_SEGMBSINI IN ('002','017','101','102')     
        AND A.IN_TIPOREG IN ('SA', 'RX', 'PX', 'ITSA', 'OXC', 'MMSA', 'MMOXC', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA')   	--NAV 18/07/2019 - Añadido - 'CESA', 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
        AND A.OR_IDREG=B.OR_IDREG;
        
      COMMIT;      

--INI 06/02/2019 - nav - Este update sobre BASILEA lo haremos en el nuevo proceso FNC_SUCEPT_BASILEA_UPDATE 
--
--    MERGE /*+ full(dst) parallel(dst 8) parallel(src 8) */ INTO bas_men.basilea dst
--    USING (SELECT or_idreg, OR_FECALTBLO, OR_CLAVISO, in_sucept, or_segrie
--             FROM BAS_MEN.MAPA_USO_CCAA_ORIG) src
--    ON (dst.or_idreg = src.or_idreg)
--    WHEN MATCHED THEN
--       UPDATE
--          SET dst.in_sucept    = src.in_sucept,
--              dst.OR_FECALTBLO = src.OR_FECALTBLO, 
--              dst.OR_CLAVISO   = src.OR_CLAVISO,
--              dst.or_segrie   = src.or_segrie,
--              dst.or_segfic   = case                                      
--                                      when nvl(OR_SEGFAC,0) = 0 THEN
--                                           'E0'               
--                                      when OR_SEGGES IN (0,4,5,9) THEN 
--                                           'E0'
--                                      when OR_SEGGES = 3 THEN
--                                           case 
--                                                when OR_SEGFAC = 11 THEN
--                                                     'E0'
--                                                when OR_SEGFAC = 12 THEN
--                                                     'E1'
--                                                when SUBSTR(OR_SEGFAC,1,1) = 2 THEN
--                                                    'E2'
--                                                when SUBSTR(OR_SEGFAC,1,1) = 3 THEN
--                                                     'E3'     
--                                                when SUBSTR(OR_SEGFAC,1,1) = 4 THEN
--                                                     'E4'
--                                                when SUBSTR(OR_SEGFAC,1,1) = 5 THEN
--                                                     'E5'                                                 
--                                                else
--                                                     'E0'
--                                           end 
--                                     else 'E0'      
--                                 end;
--	COMMIT; 
-- 
--FIN 06/02/2019 - Nav 
      
   VN_NUMERR:= 31;    
    
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '9.1 FNC_SUCEPT_CA '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '9.1 FNC_SUCEPT_CA '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
END;

-------------------------------------------------------
-------------------------------------------------------
-- PROCESO PRINCIPAL
-------------------------------------------------------
-------------------------------------------------------
BEGIN

  VN_NUMERR:= 0;

  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('9.1 FNC_SUCEPT_CA '||PV_TABLA,SYSDATE, 'INICIADO');
  COMMIT;
  
  FNC_SUCEPT_CA1 (PV_TABLA, PN_FECPRO, PN_OPC_DER, PN_F, PV_RET);

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           REG_UPD_OK = VN_COUNT
     WHERE PROCES = '9.1 FNC_SUCEPT_CA '||PV_TABLA
       AND ESTAT  = 'INICIADO';
    
    COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
         VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT = 'FINALIZADO',
                DATA_FIN = SYSDATE,
                FINALITZAT = 'KO',
                REG_UPD_OK = VN_COUNT,
                ERROR_ORAC = VV_MENSAJE,
                ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
                NUM_ERROR  = VN_NUMERR
          WHERE PROCES = '9.1 FNC_SUCEPT_CA '||PV_TABLA
            AND ESTAT  = 'INICIADO';
    
    COMMIT;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_SUCEPT_CA';


create or replace PROCEDURE    BAS_MEN.BASI_SUSCEPTIBILIDAD_CA IS

   -- bkd10007.sql -- XBK0004M - BK10MGBS15CCMDUC 
   -- bka00020.sql -- XBK0011M - BK10MGBS05CAPREG (Obsoleta)
   
   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';
   
   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';
   
BEGIN

  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  --EXECUTE IMMEDIATE ('ALTER TABLE BAS_MEN.BASILEA_SUSCEPTIBILIDAD_CA NOPARALLEL');
  
  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');


  --***********************************************************************************************************--
  -- Susceptibilidad/Ratings/Mdu CA
  --***********************************************************************************************************--

  -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
  SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  BAS_MEN.FNC_SUCEPT_CA (VV_TABLA, VN_FECPRO, VN_OPC_DER, VN_F, VV_RETORNO);
  COMMIT;
/*
-- --***********************************************************************************************************--
-- -- Susceptibilidad/Ratings/Mdu EFF
-- --***********************************************************************************************************--
         -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
         SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  BAS_MEN.FNC_SUCEPT_EEFF (VV_TABLA, VN_FECPRO, VN_OPC_DER, VN_F, VV_RETORNO);
  COMMIT;

-- --***********************************************************************************************************--
-- -- Susceptibilidad/Ratings/Mdu Soberanos
-- --***********************************************************************************************************--

      -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
      SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  BAS_MEN.FNC_SUCEPT_SOB (VV_TABLA, VN_FECPRO,VN_MESPRO, VN_OPC_DER ,VN_F,  VV_RETORNO);
  COMMIT;

-- --***********************************************************************************************************--
-- -- Susceptibilidad/Ratings/Mdu OFEX
-- --***********************************************************************************************************--

      -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
      SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  BAS_MEN.FNC_SUCEPT_OFEX(VV_TABLA, 1,VN_FECPRO, VN_MESPRO, VN_OPC_DER, VN_F, VV_RETORNO);
  COMMIT;

      -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
      SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;
*/
END;

/

--bkd10090=====================================================================================================
Select 'bkd10090' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_EEFF (
PV_TABLA       IN  VARCHAR2,
PN_FECPRO      IN  NUMBER,        --FORMATO:YYYYMMDD
PN_OPC_DER     IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);

  -------------------------------------------------------
  -- CURSOR BASILEA7 para el calculo del FI_EDAIRB
  -------------------------------------------------------
  CURSOR BASILEA7 IS
     SELECT /*+ parallel (a 8) */ OR_IDREG,  IN_SEGMBS, IN_INDMOR,    OR_TIPOPE,  IN_SEGMBS0, IN_SEGMBSINI,
            OR_PROCED,  OR_VIDRES, OR_VIDINI,    OR_CTAIND,  OR_CLUNICUENT,
            FI_TIPEXP, OR_FAIRVA, OR_EPIIND, FI_EPICON,  IN_FAIRVABO, OR_TITULARITAT,  IN_TIPOREG,
              OR_TIPAVA,    OR_TIPGAR,
            (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) TOTAL, or_entity, IN_SUCEPT
      FROM BAS_MEN.MAESTRO_SUCEPT_eeff a
     WHERE FI_TIPEXP IN ('OTC','Repos')
       AND IN_SEGMBSINI IN ('007','018','021','028','029','034');
 
-------------------------------------------------------
-- DECLARACIÓN DE VARIABLES
-------------------------------------------------------
  VV_SUCEPT         VARCHAR2(10);
  VN_TOT_CONCED     FLOAT;
  VN_FECOPE         NUMBER(8);
  VV_FI_EXCEDID     VARCHAR2(2);
  VN_UTIL           FLOAT;
  VV_SECTOR         VARCHAR2(15);
  VN_FI_CCFAIRB     NUMBER(6,4);
  VN_FI_EADAIRB     FLOAT;

BEGIN

  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('09_2_fnc_sucept_EEFF '||PV_TABLA, SYSDATE, 'INICIADO');
  COMMIT;

  VN_NUMERR:= 2;
  update BAS_MEN.MAESTRO_EEFF_NOSUSC
     set in_bicrevisat = trim(in_bicrevisat);

  COMMIT;

  VN_NUMERR:= 3;
  update BAS_MEN.MAESTRO_FUSIONES_EEFF
     SET CODIGO_BIC_OLD = upper(trim(CODIGO_BIC_OLD)),
         CODIGO_BIC_NEW = upper(trim(CODIGO_BIC_NEW));

  COMMIT;
  
   update BAS_MEN.SITUACION_RATINGS_FIN_MES_EIP
      set IND_SIT = 'OO'
    where IND_SIT is null;
      
  commit;  
  
  update BAS_MEN.SITUACION_RATINGS_FIN_MES_EIP
      set cod_tit = trim(cod_tit);
      
  commit;    
  
  update BAS_MEN.EEFF_RATINGS_SUCURSALES
     set bic_suc = trim(bic_suc);
    
  commit;
  
  update BAS_MEN.RATINGS_NOU_RATING_SIBIS_EEFF
     set codibic = trim(codibic);
     
  commit;

  VN_NUMERR:= 4;
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PD_CEDULAS_CAM');

  VN_NUMERR:= 5;
  INSERT INTO BAS_MEN.PD_CEDULAS_CAM
    SELECT * FROM DCRPROP_MENSUAL.PD_CEDULAS_CAM_SAS;

  commit;

  VN_NUMERR:= 6;
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EEFF_NOSUSC_NIF');

  VN_NUMERR:= 7;
  insert into BAS_MEN.MAESTRO_EEFF_NOSUSC_NIF
  select *
    from DCRPROP_MENSUAL.MAESTRO_EEFF_NOSUSC_NIF_SAS;

  commit;

  VN_NUMERR:= 8;
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPEO_NIF_BIC');

  VN_NUMERR:= 9;
  INSERT INTO BAS_MEN.MAPEO_NIF_BIC
  SELECT * FROM DCRPROP_MENSUAL.MAPEO_NIF_BIC_SAS;

  COMMIT;

  VN_NUMERR:= 10;
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.OPERACIONES_BICS_VENDIDAS');

  VN_NUMERR:= 11;
  insert into BAS_MEN.OPERACIONES_BICS_VENDIDAS
  select * from DCRPROP_MENSUAL.OPERACIONES_BICS_VENDIDAS_SAS;

  commit;

  VN_NUMERR:= 12;
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPEO_ISIN_BIC');

  VN_NUMERR:= 13;
  insert into BAS_MEN.MAPEO_ISIN_BIC
  select * from DCRPROP_MENSUAL.MAPEO_ISIN_BIC_SAS;

  commit;

 VN_NUMERR:= 14;
 
  -- Actualizamos el bic con el banco al cual se le ha vendido el riesgo de la operación.
 MERGE /*+ full(dst) parallel(dst 8) */ INTO BAS_MEN.BASILEA dst
     USING (SELECT DISTINCT BIC_NUEVO, TO_NUMBER(REFERENCIA) as REFERENCIA FROM BAS_MEN.OPERACIONES_BICS_VENDIDAS) sCR
     ON (dst.OR_REFOPE =  REFERENCIA)
     WHEN MATCHED THEN
        UPDATE
           SET dst.OR_CODIGO_BIC = scr.BIC_NUEVO;
           
  COMMIT;

  VN_NUMERR:= 15;
   -- Actualizamos el bic con el banco al cual se le ha vendido el riesgo de la operación por silent risk.
  MERGE /*+ full(dst) parallel(dst 8) */ INTO BAS_MEN.BASILEA dst
     USING (SELECT DISTINCT GARANTE, TO_NUMBER(REFERENCIA) as REFERENCIA FROM BAS_MEN.CREDITOS_DOC_SILENRISK WHERE GARANTE is not null) sCR
     ON (dst.OR_REFOPE =  REFERENCIA)
     WHEN MATCHED THEN
        UPDATE
           SET dst.OR_CODIGO_BIC = scr.GARANTE;
           
   COMMIT; 
   
    -- Actualizamos el bic con el bic relacionado al nif cuando llega sin informar.
    MERGE /*+ full(dst) parallel(dst 8) */ INTO BAS_MEN.BASILEA dst
     USING (SELECT BIC, NIFCIF FROM BAS_MEN.MAPEO_NIF_BIC) sCR
     ON (dst.or_nifcif = NIFCIF)
     WHEN MATCHED THEN
        UPDATE
           SET dst.OR_CODIGO_BIC = BIC
         where dst.or_codigo_bic = '?';

   COMMIT;

  VN_NUMERR:= 16;
  
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MODELO_EEFF');

  -- XCG. 01/01/14. Nos quedamos con los ratings más actuales, en caso de haber más de uno, con el idcalific mayor.

  INSERT INTO BAS_MEN.MAESTRO_MODELO_EEFF
        (CODI_BIC, IDCALIFIC, OR_MODRAT0, OR_SITUAC0, OR_RATINT, IDCALREL, OR_PUNT0,  OR_FECPUN0, OR_CODISO, PDC)
  SELECT A.CODIBIC, A.IDCALIFIC, B.SEC_TOR, nvl(IND_SIT, 'D'), B.RAT_GBL, IDCALREL, MODELO_SMA,
        TO_NUMBER(TO_CHAR(B.FEC_CAL, 'YYYYMMDD')), ISO_PAIS, pdc
   FROM (
         SELECT CODIBIC, MAX(IDCALIFIC) IDCALIFIC
           FROM (
                 SELECT CODIBIC, IDCALIFIC, TO_NUMBER(TO_CHAR(FEC_CAL, 'YYYYMMDD')) FEC_CAL
                   FROM BAS_MEN.RATINGS_NOU_RATING_SIBIS_EEFF RNRS
                  WHERE TO_NUMBER(TO_CHAR(FEC_CAL, 'YYYYMMDD')) =
                                (
                                    SELECT MAX(TO_NUMBER(TO_CHAR(FEC_CAL, 'YYYYMMDD'))) FEC_CALM
                                      FROM BAS_MEN.RATINGS_NOU_RATING_SIBIS_EEFF RNRS_MF
                                     WHERE  RNRS_MF.CODIBIC = RNRS.CODIBIC
                                       AND  ESTADO <> 'PO'
                                  )
                    AND  NVL(ESTADO, '?') <> 'PO'
                )
        GROUP BY CODIBIC
        ) A
      , BAS_MEN.RATINGS_NOU_RATING_SIBIS_EEFF B
      , (
         SELECT DISTINCT COD_TIT, SUBSTR(IND_SIT,1,3) Ind_Sit
           FROM BAS_MEN.SITUACION_RATINGS_FIN_MES_EIP SRFME
          WHERE NVL(SEC_TOR, '?') NOT IN ('PA1', 'PA2', 'SUC')
            AND NVL(ESTADO, '?')      <> 'PO'
            AND TRIM(IND_SIT)         <> 'L' -- LAS SITUACIONES LIQUIDADAS EN RATING NO SE TIENEN EN CUENTA
            AND FEC_CAL = ( SELECT MAX(FEC_CAL) FROM BAS_MEN.SITUACION_RATINGS_FIN_MES_EIP
                             WHERE NVL(SEC_TOR, '?') NOT IN ('PA1', 'PA2', 'SUC')
                               AND NVL(ESTADO, '?')      <> 'PO'
                               AND COD_TIT                =  SRFME.COD_TIT
                               AND TRIM(IND_SIT)          <> 'L' -- LAS SITUACIONES LIQUIDADAS EN RATING NO SE TIENEN EN CUENTA
                          )
        ) C
  WHERE A.CODIBIC   = B.CODIBIC
    AND A.IDCALIFIC = B.IDCALIFIC
    AND B.CODIBIC   = C.COD_TIT(+);

 COMMIT;

 VN_NUMERR:= 5;

delete bas_men.rat_sucs;

commit;

insert into bas_men.rat_sucs 
 SELECT   bic_suc, MAX (idrating) idrating
                         FROM bas_men.eeff_ratings_sucursales a
                        WHERE (bic_suc,
                               TO_NUMBER (TO_CHAR (feccal_suc, 'YYYYMMDD'))
                              ) IN (
                                 SELECT   bic_suc,
                                          MAX
                                             (TO_NUMBER (TO_CHAR (feccal_suc,
                                                                  'YYYYMMDD'
                                                                 )
                                                        )
                                             ) feccal_suc
                                     FROM bas_men.eeff_ratings_sucursales a
                                 GROUP BY bic_suc)
                     GROUP BY bic_suc;
                     
                     commit;

 --  
 -- 201501 - Se utiliza la tabla de Sucursales EEFF para determinar si se trata de una.
 --
 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_RATSUC_EEFF');
 
 INSERT INTO bas_men.maestro_ratsuc_eeff
   SELECT g.bic_suc, f.idrating, g.feccal_suc, f.rating_suc,
          NVL (ind_sit, 'D') or_situac0
     FROM (SELECT bic_suc, idrating,
                  TO_NUMBER (TO_CHAR (feccal_suc, 'YYYYMMDD')) feccal_suc
             FROM bas_men.eeff_ratings_sucursales a
            WHERE (bic_suc, idrating) IN (select * from bas_men.rat_sucs            
                    )                     
                     ) g,
          (SELECT DISTINCT cod_tit, SUBSTR (ind_sit, 1, 3) ind_sit
                      FROM bas_men.situacion_ratings_fin_mes_eip
                     WHERE sec_tor = 'SUC') e,
          bas_men.eeff_ratings_sucursales f,
          bas_men.eeff_sucursales suc
    WHERE g.bic_suc = e.cod_tit(+)
      AND g.bic_suc = f.bic_suc
      AND g.feccal_suc = TO_NUMBER (TO_CHAR (f.feccal_suc, 'YYYYMMDD'))
      AND g.idrating = f.idrating
      AND f.bic_suc = suc.bic_suc;
      
      commit;
 
 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_RECUPERADOS_EEFF');

 INSERT INTO BAS_MEN.RATINGS_RECUPERADOS_EEFF
 SELECT * FROM DCRPROP_MENSUAL.RATINGS_RECUPERADOS_EEFF_SAS;

 COMMIT;
  
 -- Eliminación de los datos de los BICS recuperados de EEFF 
 DELETE BAS_MEN.MAESTRO_MODELO_EEFF 
 WHERE CODI_BIC IN (SELECT CODI_BIC FROM BAS_MEN.RATINGS_RECUPERADOS_EEFF Recup WHERE SUBSTR(OR_MODRAT0,1,4) = 'EEFF'  );
 
 COMMIT;
  
 -- Inserción de los datos de los BICS recuperados de EEFF 
 INSERT INTO BAS_MEN.MAESTRO_MODELO_EEFF 
 SELECT * FROM BAS_MEN.RATINGS_RECUPERADOS_EEFF WHERE SUBSTR(OR_MODRAT0,1,4) = 'EEFF';
  
 COMMIT;

 -- Eliminación de los datos de los BICS recuperados de Sucursales
 DELETE BAS_MEN.MAESTRO_RATSUC_EEFF 
  WHERE BIC_SUC IN ( SELECT CODI_BIC FROM BAS_MEN.RATINGS_RECUPERADOS_EEFF Recup WHERE OR_MODRAT0 = 'SUC'  );
  
 COMMIT;
  
 -- Inserción de los datos de los BICS recuperados de Sucursales 
 INSERT INTO BAS_MEN.MAESTRO_RATSUC_EEFF  
 SELECT CODI_BIC AS BIC_SUC, IDCALIFIC AS IDRATING, OR_FECPUN0 AS FECCAL_SUC, OR_RATINT AS RATING_SUC, OR_SITUAC0 
  FROM BAS_MEN.RATINGS_RECUPERADOS_EEFF Recup 
 WHERE OR_MODRAT0 = 'SUC'
 ORDER BY BIC_SUC;
 
 COMMIT;

  -------------------------------------------------
  ----CARGA TABLA MAESTRO_SUCEPT_EEFF
  -------------------------------------------------
  
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_EEFF');

   INSERT /*+ parallel (b 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_EEFF  b
  SELECT /*+ 3full(a) parallel (a 8) */ a.OR_IDREG, 
         CASE
         WHEN substr(or_epiind,1,5) = '01005' AND ISIN.BIC <> '?' THEN
              trim(ISIN.BIC)
         WHEN EEFF.CODIGO_BIC_NEW IS NOT NULL THEN
              EEFF.CODIGO_BIC_NEW
         WHEN or_codigo_bic != '?' THEN
              or_codigo_bic
         WHEN or_tipideibm = 95 and or_nifcifibm != '?' THEN
              or_nifcifibm
         WHEN FI_TIpEXP = 'OTC' and or_nifcifibm != '?' THEN -- derivados llegan sin el tipidibm = 95
              or_nifcifibm     
         WHEN or_nifcif <> '?' then
              or_nifcif
         WHEN OR_TITULARITAT <> 0 then
              TO_CHAR(OR_TITULARITAT)
         ELSE '97-'
         END as IN_BICREVISAT, 
         a.OR_CODISO, a.OR_IDPERS, a.OR_TIPIDE, a.OR_NIFCIF, a.OR_TIPIDEIBM, a.OR_NIFCIFIBM, a.OR_TITULARITAT, a.OR_NOMPER, 0 OR_TIPTIT, '?' OR_SECTOR, a.OR_PERSON, a.OR_IDECNO, a.OR_IDCNAE, 	
         a.OR_PROCED, a.OR_NUMOFI, a.OR_REFOPE, a.OR_REFOPE2, '?' IN_IDOPER, a.OR_TIPOPE, a.OR_FECOPE, a.OR_FECVTO, a.OR_VIDINI, a.OR_VIDRES, a.IN_ANTIGU, a.OR_SEGGES, a.OR_CONCED,
         a.OR_IDPAIS, a.IN_ITITSN, a.IN_INDMOR, a.OR_IDPRO1, a.OR_ENTITY, a.OR_DIVISA, a.FI_TIPEXP, a.OR_DISPTO, a.OR_DISBLE, a.OR_AVALES, a.OR_FUTURS, a.OR_REPOS,
         a.FI_EADAIRB, a.OR_DISPTOCON, a.OR_DISBLECON, a.OR_AVALESCON, a.OR_AJUVALCON, a.OR_SEGRIE, 0 OR_PUNTFIN, a.IN_SEGMBSINI, a.IN_SEGMBS0, a.IN_SEGMBS, a.IN_SUCEPT, a.IN_IDCALIFIC, 
         a.OR_FECPUN0, a.OR_RATINT, 0 OR_AJUST0, a.OR_PUNT0, a.OR_MODRAT0, a.OR_SITUAC0, a.IN_IDCALIFICREL, a.OR_COISIN, a.or_ajuval, a.OR_TIPGAR, a.OR_TIPAVA, a.IN_TIPOREG, a.IN_FAIRVABO,
         a.OR_FAIRVA, a.OR_EPIIND, a.FI_EPICON, a.OR_CTAIND,  a.OR_CLUNICUENT, a.OR_clunicontr, a.OR_CODGAR 
    FROM BAS_MEN.BASILEA a,
         (SELECT OR_COISIN, DECODE(CODIGO_BIC_NEW, NULL, IN_BICREVISAT, CODIGO_BIC_NEW) BIC
            FROM BAS_MEN.MAPEO_ISIN_BIC BIC,
                 BAS_MEN.MAESTRO_FUSIONES_EEFF FUS
           WHERE IN_BICREVISAT = CODIGO_BIC_OLD(+)) isin,
         BAS_MEN.MAESTRO_FUSIONES_EEFF EEFF
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS 
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FECPRO,1,6)) acc
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = substr(PN_FECPRO,1,6)) titu		
--FIN					
   WHERE IN_SEGMBSINI  IN ('007','018','021','028','029','034')
		 /*19/03/2020 - NAV - TM-614 - calcular todas las variables de proceso para los eliminados por TITACT*/
		 /*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
   --AND FI_ELIMI1     IN ('NO', 'SRABS', 'RFNEG', 'NETTING','TITACT2') - 20/11/2019 - NAV 
     AND FI_ELIMI1     IN ('NO', 'ACCBS', 'RFNEG', 'NETTING','TITACT2', 'TITACT', 'STSORI') 
   --AND a.or_idreg < acc.idreg_new   
     AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
     AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */      
     AND (IN_TIPOREG IN ('SA','RX','PX', 'DN','ITSA', 'ITDN', 'OXE', 'ITOXE', 'OXC','RN','ITRN','CESA','AVSA','MMSA','MMOXE','MMOXC','IIC-LTA', 'IIC-FBA') 	/*NAV 18/07/2019 - Añadido - 'CESA','AVSA','MMSA','MMOXE','MMOXC'*/ /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
      OR SUBSTR(IN_TIPOREG,1,2) = 'MM')
     and A.OR_COISIN  =  isin.OR_COISIN(+)
     AND A.OR_codigo_bic  =  EEFF.CODIGO_BIC_OLD(+);

  COMMIT;

  VN_NUMERR:= 20;
 
   -------------------------------------------------
  -- CARGA TABLA MAESTRO_AJUSTES_EEFF Tabla que identifica aquellos BICs/TITs/IDPERS que exclusivamente son Ajustes
  -------------------------------------------------
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_AJUSTES_EEFF');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_AJUSTES_EEFF
      SELECT A.IN_BICREVISAT, 'AJUSTES' ORIGEN
       FROM (SELECT DISTINCT IN_BICREVISAT
               FROM BAS_MEN.MAESTRO_SUCEPT_EEFF
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT DISTINCT IN_BICREVISAT
               FROM BAS_MEN.MAESTRO_SUCEPT_EEFF
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.IN_BICREVISAT = B.IN_BICREVISAT(+)
        AND B.IN_BICREVISAT IS NULL;

  COMMIT;

  VN_NUMERR:= 27;
 
-------------------------------------------------------
-- Calculo FI_EDAIRB
-------------------------------------------------------

  FOR CUR IN BASILEA7 LOOP -- ABRIMOS CURSOR Y LLAMAMOS A LA FUNCION PARA CALCULAR FI_EDAIRB
        VN_NUMERR:= 30;
        VV_FI_EXCEDID:= 'NO';
        VN_COUNT:= VN_COUNT + 1;

        BAS_MEN.FNC_CALCUL_CCF('AIRB', 
                               PN_OPC_DER, 
                               PN_F, 
                               UPPER(CUR.IN_SEGMBS), 
                               UPPER(CUR.FI_TIPEXP), 
                               UPPER(CUR.OR_PROCED), 
                               UPPER(CUR.OR_TIPOPE),
                               CUR.OR_VIDINI, 
                               CUR.OR_VIDRES, 
                               CUR.OR_CLUNICUENT, 
                               'NO',
                               CUR.OR_TIPAVA,
                               CUR.IN_SEGMBSINI, 
                               CUR.OR_EPIIND, 
                               CUR.FI_EPICON,
                               CUR.IN_SEGMBS0, 
                               VV_FI_EXCEDID,  
                               CUR.OR_CTAIND, 
                               0,  
                               CUR.OR_TIPGAR, 
                               cur.or_entity,
                               cur.IN_SUCEPT,
                               CUR.IN_TIPOREG,
                               NULL, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                               NULL,
                               NULL,
                               VN_FI_CCFAIRB,
                               PV_RET);

        VN_FI_EADAIRB:= CUR.TOTAL * VN_FI_CCFAIRB;

/* 16/12/2020 - INI */
--      IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,VN_FI_EADAIRB + CUR.OR_FAIRVA);
--      ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.OR_EPIIND,1,5) NOT IN ('02002','02003','02004') THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
--      END IF;
        
        IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
           VN_FI_EADAIRB:= VN_FI_EADAIRB + BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '01' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '02' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.IN_FAIRVABO - CUR.OR_FAIRVA);
        END IF;
/* 16/12/2020 - FIN */

        IF UPPER(CUR.IN_INDMOR) = 'SI' THEN
             VN_FI_EADAIRB:= CUR.TOTAL;
        END IF;

        -- VJB 28/03/'08 Se inserta el valor calculado en el maestro en el campo FI_EDAIRB
        UPDATE BAS_MEN.MAESTRO_SUCEPT_EEFF
           SET FI_EADAIRB=VN_FI_EADAIRB
           WHERE OR_IDREG=CUR.OR_IDREG;

        COMMIT;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 34;

-------------------------------------------------
-- CARGA MAESTRO_TOTAL_CONCEDIDO_EEFF TABLA QUE CONTIENE EL TOTAL CONCEDIDO: DISPUESTO+DISPONIBLE+AVALES+REPOS
-- agrupando por OR_TITULARITAT, OR_NIFCIF, OR_CODISO, OR_NOMPER
-------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_EEFF');

  commit;

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_EEFF
  SELECT IN_BICREVISAT,
            SUM(OR_DISPTO+OR_DISBLE+OR_AVALES+DECODE(OR_REPOS,0,0,FI_EADAIRB)+DECODE(OR_FUTURS,0,0,FI_EADAIRB)) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_EEFF a,
            (select distinct REFERENCIA
               from BAS_MEN.CREDITOS_DOC_CONFIRMADOS CColat 
              WHERE CColat.TIP_GARANTIA = 'CAS' 
                AND CColat.GARANTE IS NOT NULL) b
      where OR_REFOPE = REFERENCIA(+)
        and REFERENCIA is null 
      GROUP BY IN_BICREVISAT;

  COMMIT;

   VN_NUMERR:= 35;
   
 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_EEFF_ORIG');
 
 --ALLA 08/07/2016 Se incluye RN e ITRN correspondiente con el neteo de repos
INSERT /*+ parallel (C 8) */ INTO BAS_MEN.MAPA_USO_EEFF_ORIG C
 SELECT /*+ parallel (B 8) */ b.OR_IDREG, B.IN_BICREVISAT, b.OR_CODISO, b.OR_IDPERS, b.OR_TIPIDE, B.OR_NIFCIF, b.OR_TIPIDEIBM, b.OR_NIFCIFIBM,
        b.OR_TITULARITAT, b.OR_NOMPER, 0, '?', b.OR_PERSON, b.OR_IDECNO, b.OR_IDCNAE,  b.OR_PROCED,
        b.OR_NUMOFI, b.OR_REFOPE, b.OR_clunicontr, '?', b.OR_TIPOPE, b.OR_FECOPE, b.OR_FECVTO, b.OR_VIDINI,
        b.OR_VIDRES, b.IN_ANTIGU, b.OR_SEGGES, 0 OR_SUBSEG, b.OR_CONCED, b.OR_IDPAIS, 0 OR_CODSOL, null IN_BCOATL, b.IN_ITITSN,
        b.IN_INDMOR, b.OR_IDPRO1, b.OR_ENTITY, b.OR_DIVISA, b.FI_TIPEXP, b.OR_DISPTO, b.OR_DISBLE, b.OR_AVALES, b.OR_FUTURS, b.OR_REPOS, b.FI_EADAIRB,
        b.OR_DISPTOCON, b.OR_DISBLECON, b.OR_AVALESCON, b.OR_AJUVALCON, b.OR_SEGRIE, 0, b.IN_SEGMBSINI, b.IN_SEGMBS0, b.IN_SEGMBS,
        CASE
        WHEN pd_cam.or_coisin IS NOT NULL THEN 'EFSUCDM'--Las cédulas especiales de CAM tienen una susceptibilidad diferente
        WHEN aju.IN_BICREVISAT IS NOT NULL THEN 'EFAJUS' --EEFF NO SUSCEPTIBLE POR AJUSTES
        WHEN NVL(conced.TOT_CONCED, 0) < 60000 THEN 'EFIMPR'  --SUSCEPTIBILIDAD POR TOTAL CONCEDIDO <60.000E NO SUSCEPTIBLE / >=60.000E SUSCEPTIBLE
        WHEN nosuc.IN_BICREVISAT IS NOT NULL AND nosuc.IN_SUCEPT <> 'EFNSGE' THEN nosuc.IN_SUCEPT  --EEFF NO SUSCEPTIBLES POR CÓDIGO BIC.
        WHEN nosuc_nif.nif IS NOT NULL THEN nosuc_nif.SUCEPT  --EEFF NO SUSCEPTIBLES POR nif
        WHEN CColat.REFERENCIA IS NOT NULL THEN 'EFNSCC' -- OPERACIONES no susceptibles por tener garantía asociada. CASH COLATERAL
        WHEN B.IN_BICREVISAT = '97-' THEN 'EFPENS' 
        WHEN nosuc.IN_SUCEPT = 'EFNSGE' THEN 'EFNSGE' -- código genérico de NO SUSCEPTIBILIDAD
        WHEN decode(NVL(H.RATING_SUC,99), 99, NVL(D.OR_RATINT,99), NVL(H.RATING_SUC,99)) = 99  THEN
             'EFSCSR'
        WHEN decode(NVL(H.RATING_SUC,99), 99, NVL(D.OR_SITUAC0,'?'), NVL(H.OR_SITUAC0,'?')) = 'D' THEN
             'EFSCPXX'
        ELSE
             'EFSUCP'
        END AS IN_SUCEPT,
        decode(NVL(H.RATING_SUC,99), 99, NVL(D.IDCALIFIC,0), nvl(H.IDRATING,0)) IDCALIFIC,
        decode(NVL(H.RATING_SUC,99), 99, NVL(D.OR_FECPUN0,9999), NVL(H.FECCAL_SUC,9999)) OR_FECPUN0,
        decode(NVL(H.RATING_SUC,99), 99, NVL(D.OR_RATINT,99), NVL(H.RATING_SUC,99)) OR_RATINT,
        0, 
        NVL(D.OR_PUNT0, 9999) OR_PUNT0, 
        decode(NVL(H.RATING_SUC,99), 99, NVL(D.OR_MODRAT0, '?'), '?') OR_MODRAT0,
        decode(NVL(H.RATING_SUC,99), 99, NVL(D.OR_SITUAC0,'?'), NVL(H.OR_SITUAC0,'?')) OR_SITUAC0,
        NVL(D.IDCALREL,0) IDCALREL, b.OR_COISIN
   FROM BAS_MEN.MAESTRO_SUCEPT_EEFF B,
        BAS_MEN.MAESTRO_MODELO_EEFF D,
        BAS_MEN.MAESTRO_RATSUC_EEFF H,
        BAS_MEN.MAESTRO_AJUSTES_EEFF aju,
        BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_EEFF conced,
        (SELECT IN_BICREVISAT, NVL(IN_SUCEPT, 'EFNSGE') IN_SUCEPT
          FROM BAS_MEN.MAESTRO_EEFF_NOSUSC
         WHERE (IN_BICREVISAT, nvl(fecha,'31/12/3050')) IN (  
                select IN_BICREVISAT, max(nvl(fecha,'31/12/3050')) fecha
                   from BAS_MEN.MAESTRO_EEFF_NOSUSC                  
                  group by IN_BICREVISAT)
           AND nvl(IN_SUCEPT, '?') <> 'EFSINR') nosuc,
        BAS_MEN.MAESTRO_EEFF_NOSUSC_NIF nosuc_nif,
        (select distinct referencia from BAS_MEN.CREDITOS_DOC_CONFIRMADOS where TIP_GARANTIA = 'CAS' and GARANTE IS NOT NULL) CColat,
        BAS_MEN.PD_CEDULAS_CAM pd_cam  
  WHERE B.IN_BICREVISAT = D.CODI_BIC(+)
    AND B.IN_BICREVISAT = H.BIC_suc(+)
    and B.IN_BICREVISAT = aju.IN_BICREVISAT(+)
    and B.IN_BICREVISAT = conced.IN_BICREVISAT(+)
    and B.IN_BICREVISAT = nosuc.IN_BICREVISAT(+)
    and b.IN_BICREVISAT = nosuc_nif.nif(+)
    and b.OR_REFOPE = CColat.REFERENCIA(+)
    and b.OR_COISIN = pd_cam.or_coisin(+);

  COMMIT;
  
  -- contagio entre susceptibles no susceptibles a nivel de Bic, manda lo susceptible
   UPDATE /*+ full(b) parallel (b 8) */ BAS_MEN.MAPA_USO_EEFF_ORIG b
     SET IN_SUCEPT =  'EFSUCP'
   WHERE in_bicrevisat IN (  select D.in_bicrevisat
       from
            (SELECT /*+ parallel (B 8) */ DISTINCT in_bicrevisat, IN_SUCEPT
              FROM BAS_MEN.MAPA_USO_EEFF_ORIG  B
             WHERE IN_SUCEPT = 'EFSUCP') A,
           (SELECT /*+ parallel (C 8) */ OR_IDREG, in_bicrevisat
              FROM BAS_MEN.MAPA_USO_EEFF_ORIG  C
             WHERE IN_SUCEPT <> 'EFSUCP') d
     where a.in_bicrevisat = d.in_bicrevisat);

  COMMIT;

/*INI 06/02/2019 - Nav - Este update sobre BASILEA lo haremos en el nuevo proceso FNC_SUCEPT_BASILEA_UPDATE 
--
-- MERGE /*+ full(iBasi) parallel(iBasi 8) parallel(sMdU 8) */ 
/*   INTO bas_men.BASILEA iBasi
--  USING (SELECT or_idreg, IN_IDCALIFIC, OR_FECPUN0  , OR_PUNT0    , OR_RATINT   , OR_MODRAT0  , OR_SITUAC0  , IN_SUCEPT, IN_BICREVISAT, IN_IDCALIFICREL 
--           FROM BAS_MEN.MAPA_USO_EEFF_ORIG) cur
--  ON (iBasi.OR_IDREG = cur.OR_IDREG)
--  WHEN MATCHED THEN
--     UPDATE
--        SET iBasi.IN_IDCALIFIC = CUR.IN_IDCALIFIC,  
--            iBasi.OR_FECPUN0   = CUR.OR_FECPUN0, 
--            iBasi.OR_PUNT0     = CUR.OR_PUNT0,   
--            iBasi.OR_RATINT    = CUR.OR_RATINT,  
--            iBasi.OR_MODRAT0   = CUR.OR_MODRAT0, 
--            iBasi.OR_SITUAC0   = CUR.OR_SITUAC0, 
--            iBasi.IN_SUCEPT    = cur.IN_SUCEPT,
--            iBasi.IN_IDCALIFICREL  = CUR.IN_IDCALIFICREL,
--            iBasi.OR_CODIGO_BIC = CUR.IN_BICREVISAT,
--            iBasi.or_codgar = DECODE(CUR.IN_SUCEPT, 'EFNSCC', 'GR 12104',  OR_CODGAR);
--
--	COMMIT;          
--
--FIN 06/02/2019 - Nav*/

  VN_NUMERR:= 201;
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '09_2_fnc_sucept_EEFF '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '09_2_fnc_sucept_EEFF '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   RAISE;
   
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_SUCEPT_EEFF';


create or replace PROCEDURE		   BAS_MEN.BASI_SUSCEPTIBILIDAD_EEFF IS
   
   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';
   
   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';
   
BEGIN

  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

-- --***********************************************************************************************************--
-- -- Susceptibilidad/Ratings/Mdu EFF
-- --***********************************************************************************************************--
    -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
    SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

	BAS_MEN.FNC_SUCEPT_EEFF (VV_TABLA, VN_FECPRO, VN_OPC_DER, VN_F, VV_RETORNO);
	COMMIT;

END;

/

--bkd10091=====================================================================================================
Select 'bkd10091' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_SOB (
PV_TABLA       IN  VARCHAR2,
PN_FECPRO      IN  NUMBER,   --FORMATO:YYYYMMDD
VN_MESPRO      IN  NUMBER,        --FORMATO:YYYYMM
PN_OPC_DER     IN  NUMBER,        
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);

-------------------------------------------------------
-- 1- PROCEDURE FNC_SUCEPT_SOB1
-------------------------------------------------------
PROCEDURE FNC_SUCEPT_SOB1 (PV_TABLA   IN  VARCHAR2,
PN_FECPRO  IN  NUMBER,        --FORMATO:YYYYMMDD
VN_MESPRO      IN  NUMBER,        --FORMATO:YYYYMM
PN_OPC_DER IN  NUMBER,    
PN_F       IN  NUMBER,
PV_RET     OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);
       
  -------------------------------------------------------
  -- CURSOR BASILEA3 Cursor para el calculo del FI_EDAIRB
  -------------------------------------------------------       
  CURSOR BASILEA3 IS               
     SELECT /*+ parallel (b 4) */ OR_IDREG,  IN_SEGMBS, IN_INDMOR,    OR_TIPOPE,  IN_SEGMBS0, IN_SEGMBSINI,
            OR_PROCED,  OR_VIDRES, OR_VIDINI,    OR_CTAIND, IN_TIPOREG, 
            FI_TIPEXP, OR_FAIRVA, OR_EPIIND, FI_EPICON, IN_FAIRVABO, OR_TITULARITAT, OR_CLUNICUENT,
             OR_TIPAVA,    OR_TIPGAR, OR_ENTITY, IN_SUCEPT,
            (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) TOTAL
      FROM BAS_MEN.MAESTRO_SUCEPT_SOBERANOS B
     WHERE FI_TIPEXP IN ('OTC','Repos')
       AND IN_SEGMBSINI IN ('008','022','023','030','031','032','026','035','036','037','038');
                
-------------------------------------------------------
-- DECLARACIÓN DE VARIABLES
-------------------------------------------------------        
  VV_SUCEPT         VARCHAR2(10);
  VN_TOT_CONCED     FLOAT;
  VN_FECOPE         NUMBER(8);
  VV_FI_EXCEDID     VARCHAR2(2);
  VN_FI_CCFAIRB     NUMBER(6,4);  
  VN_FI_EADAIRB     FLOAT;
  VN_FECHA          DATE;

BEGIN

  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('09_3_fnc_sucept_soberanos '||PV_TABLA, SYSDATE, 'INICIADO');
  COMMIT;
  
  VN_FECHA := TO_DATE(PN_FECPRO, 'YYYYMMDD');
  
  --Carga maestro modelo soberanos 
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SOB_PERSON_NOSUSC');
  
  INSERT INTO BAS_MEN.MAESTRO_SOB_PERSON_NOSUSC
  SELECT OR_PERSON, DESCPERSON, substr(SUSCEPt,1,1), IN_SUCEPT, SECTOR 
    FROM DCRPROP_MENSUAL.MAESTRO_SOB_PERSON_NOSUSC_SAS;
  
  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PAISG1_SITRAT');
  
  INSERT INTO BAS_MEN.PAISG1_SITRAT
  SELECT * FROM BAS_MEN.SITUACION_RATINGS_FIN_MES_EIP
  WHERE SEC_TOR = 'PA1';
  
  COMMIT;
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PAISG2_SITRAT');
  
  INSERT INTO BAS_MEN.PAISG2_SITRAT
  SELECT * FROM BAS_MEN.SITUACION_RATINGS_FIN_MES_EIP
  WHERE SEC_TOR = 'PA2';
  
  COMMIT;
  
  UPDATE BAS_MEN.PAISG1_SITRAT
     SET IND_SIT = 'CA'
   WHERE IND_SIT in ('CVRP', 'CCRM'); 
   
  COMMIT;
  
  UPDATE BAS_MEN.PAISG2_SITRAT
     SET IND_SIT = 'CA'
   WHERE IND_SIT in ('CVRP', 'CCRP');
   
  COMMIT;
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_SOBERANOS_G1');
  
  INSERT INTO BAS_MEN.TEMP_SOBERANOS_G1
      SELECT 0, A.IDRAT, A.IDPAIS, TO_NUMBER(TO_CHAR(A.DATRATING, 'YYYYMMDD')), 
             A.AJUSTE, A.M_COMPLETO, TO_NUMBER(A.RATCOM), 'SO001', B.IND_SIT
        FROM BAS_MEN.PAIS_RATINGS_DESARROLLADO A,        
             (SELECT IDPAIS, MAX(DATRATING) AS FEC_CAL
                FROM BAS_MEN.PAIS_RATINGS_DESARROLLADO
               WHERE TO_DATE(DATRATING)<= VN_FECHA
               GROUP BY IDPAIS) C,
             BAS_MEN.PAISG1_SITRAT B                            
       WHERE A.IDRAT = B.IDRATING
         AND C.IDPAIS = B.COD_TIT
         AND C.FEC_CAL = B.FEC_CAL
     ORDER BY A.IDPAIS;
        
  COMMIT;      
  
  INSERT INTO BAS_MEN.TEMP_SOBERANOS_G1
      SELECT 0, A.IDRAT, A.IDPAIS, TO_NUMBER(TO_CHAR(A.DATRATING, 'YYYYMMDD')), 
             A.AJUSTE, A.M_COMPLETO, TO_NUMBER(A.RATCOM), 'SO001', B.IND_SIT
          FROM BAS_MEN.PAIS_RATINGS_DESARROLLADO A,        
                 (SELECT IDPAIS, MAX(IDRAT) AS IDCALIFIC
              FROM BAS_MEN.PAIS_RATINGS_DESARROLLADO
              WHERE TO_DATE(DATRATING)<= VN_FECHA
             GROUP BY IDPAIS) C,
                 BAS_MEN.PAISG1_SITRAT B,
                 BAS_MEN.TEMP_SOBERANOS_G1 D                          
       WHERE A.IDRAT = B.IDRATING
         AND C.IDPAIS = B.COD_TIT
       AND C.IDCALIFIC = B.IDRATING
       AND B.COD_TIT = D.OR_CODISO(+)
       AND D.OR_CODISO IS NULL
     ORDER BY A.IDPAIS;
          
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_SOBERANOS_G2');
     
  INSERT INTO BAS_MEN.TEMP_SOBERANOS_G2
  SELECT 0, A.IDRAT, A.IDPAIS, TO_NUMBER(TO_CHAR(A.DATRATING, 'YYYYMMDD')), 
             A.AJUSTE, A.M_COMPLETO, TO_NUMBER(A.RATCOM), 'SO002', B.IND_SIT
        FROM BAS_MEN.PAIS_RATINGS_EMERGENTE A,        
             (SELECT IDPAIS, MAX(DATRATING) AS FEC_CAL
                FROM BAS_MEN.PAIS_RATINGS_EMERGENTE
               WHERE TO_DATE(DATRATING)<= VN_FECHA
               GROUP BY IDPAIS) C,
             (SELECT MAX(FEC_SIT) FEC_SIT, COD_TIT FROM BAS_MEN.PAISG2_SITRAT GROUP BY COD_TIT) D,
             BAS_MEN.PAISG2_SITRAT B                            
       WHERE A.IDRAT = B.IDRATING
         AND C.IDPAIS = B.COD_TIT
         AND C.FEC_CAL = B.FEC_CAL
         AND D.COD_TIT = B.COD_TIT
         AND D.FEC_SIT = B.FEC_SIT       
     ORDER BY A.IDPAIS;
        
  COMMIT;      
  
  INSERT INTO BAS_MEN.TEMP_SOBERANOS_G2
      SELECT 0, A.IDRAT, A.IDPAIS, TO_NUMBER(TO_CHAR(A.DATRATING, 'YYYYMMDD')), 
             A.AJUSTE, A.M_COMPLETO, TO_NUMBER(A.RATCOM), 'SO002', B.IND_SIT
        FROM BAS_MEN.PAIS_RATINGS_EMERGENTE A,        
             (SELECT IDPAIS, MAX(IDRAT) AS IDCALIFIC
               FROM BAS_MEN.PAIS_RATINGS_EMERGENTE
               WHERE TO_DATE(DATRATING)<= VN_FECHA
              GROUP BY IDPAIS) C,
             (SELECT MAX(FEC_SIT) FEC_SIT, COD_TIT FROM BAS_MEN.PAISG2_SITRAT GROUP BY COD_TIT) D, 
             BAS_MEN.PAISG2_SITRAT B,
             BAS_MEN.TEMP_SOBERANOS_G2 D                          
       WHERE A.IDRAT = B.IDRATING
         AND C.IDPAIS = B.COD_TIT
         AND C.IDCALIFIC = B.IDRATING
         AND D.COD_TIT = B.COD_TIT
         AND D.FEC_SIT = B.FEC_SIT 
         AND B.COD_TIT = D.OR_CODISO(+)
         AND D.OR_CODISO IS NULL
     ORDER BY A.IDPAIS;   
     
  COMMIT;   
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MODELO_SOBERANOS');
  
  INSERT INTO BAS_MEN.MAESTRO_MODELO_SOBERANOS
       SELECT *   
         FROM BAS_MEN.TEMP_SOBERANOS_G1
        UNION
       SELECT *   
         FROM BAS_MEN.TEMP_SOBERANOS_G2;
  
  COMMIT;
  
  --Eliminamos los registros duplicados por tener ratings desarrollados y emergentes. Nos quedamos con la fecha e idcalific mayor.
  DELETE BAS_MEN.MAESTRO_MODELO_SOBERANOS
   WHERE (OR_CODISO, OR_FECPUN0, IDCALIFIC) IN (SELECT OR_CODISO, MIN(OR_FECPUN0), MIN(IDCALIFIC)
                                                  FROM BAS_MEN.MAESTRO_MODELO_SOBERANOS 
                                                 GROUP BY OR_CODISO HAVING COUNT(*) > 1);
   
  COMMIT;    
    
  -- Maestro sucept soberanos --
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_SOBERANOS'); 

  INSERT /*+ parallel (b 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_SOBERANOS b
  SELECT /*+ parallel (a 8) */ a.OR_IDREG, a.OR_CODISO, a.OR_IDPERS, a.OR_TIPIDE, a.OR_NIFCIF, a.OR_TIPIDEIBM, a.OR_NIFCIFIBM, a.OR_TITULARITAT, a.OR_NOMPER, 0 OR_TIPTIT, '?' OR_SECTOR, a.OR_PERSON, 
         a.OR_IDECNO, a.OR_IDCNAE, a.OR_PROCED, a.OR_NUMOFI, a.OR_REFOPE, a.OR_REFOPE2, '?' IN_IDOPER, a.OR_TIPOPE, a.OR_FECOPE, a.OR_FECVTO, a.OR_VIDINI, a.OR_VIDRES, a.IN_ANTIGU, a.OR_SEGGES,
         a.OR_TIPAVA, 0 OR_TIPIDEAVA, a.OR_NIFCIFAVA, 99 OR_SEGGESAVA, 99 OR_SUBSEGAVA, a.OR_TIPGAR, a.OR_DESTPR, a.OR_TIPOFI, a.OR_TIPOPR, 0 OR_USOPRE, a.OR_IMPLTV, a.OR_VALTAS, 9999 OR_FECTAS, a.OR_CONCED, 
         a.OR_IDPAIS, a.IN_ITITSN, a.IN_INDMOR, a.OR_IDPRO1, a.OR_ENTITY, a.OR_DIVISA, a.FI_TIPEXP, a.OR_DISPTO, a.OR_DISBLE, a.OR_AVALES, a.OR_FUTURS, a.OR_REPOS, a.OR_DISPTOCON,
         a.OR_DISBLECON, a.OR_AVALESCON, a.OR_AJUVALCON, a.IN_VTAGRU, 99 OR_RATINT, 0 OR_AJUST0, '?' OR_MODRAT0, '?' OR_SEGRIE, 9999, 0 OR_PUNTFIN, '?' or_idsituac, 9999 OR_FECPUN0, 0 OR_REFUNI, a.IN_SEGMBSINI, 
         a.IN_SEGMBS0, a.IN_SEGMBS1, a.IN_SEGMBS2, a.IN_SEGMBS, '?' IN_RATAVA, 0 or_idrap, '?' IN_SUCEPT, a.OR_CLUNIENT, a.OR_CLUNIPROD, a.OR_CLUNICONTR, a.OR_CLUNICUENT, a.OR_CLUNIOPERA, a.FI_MESCURA, a.OR_FECCAR, 
         a.OR_PRESTMIG, a.OR_CLAVISO, a.OR_FECALTBLO, a.OR_TITUSCPCB, a.OR_INDHOLDING, a.OR_CODPRODO, a.IN_IDCALIFIC, 0 FI_EADAIRB, a.or_ctaind, a.or_epiind, a.fi_epicon, a.in_tiporeg, a.OR_FAIRVA, a.in_fairvabo, a.OR_AJUVAL
    FROM BAS_MEN.BASILEA a
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS 
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = VN_MESPRO) acc	
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = VN_MESPRO) titu	
--FIN	    
   WHERE a.IN_SEGMBSINI IN ('008','022','023','030','031','032','026','035','036','037','038')  
   	 /* 20/11/2019 - NAV - Añadido SOBFASEADO y cambiado SRABS por ACCBS */      
   	 /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
   /*AND a.FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG', 'NETTING')	*/
     AND a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'NETTING', 'SOBFASEADO', 'STSORI')				
   /*AND a.or_idreg < acc.idreg_new	*/
     AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
     AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */  
     AND a.IN_TIPOREG IN ('SA','RX','PX', 'ITSA', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA') /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
     AND a.IN_TIPOREG NOT IN ('SAS0', 'SAS1');					--NAV 20/11/2019 para que entren SOBFASEADO sin tiporeg SAS0 y SAS1

  COMMIT;
   
   VN_NUMERR:= 2;
   
  -------------------------------------------------
  -- CARGA TABLA MAESTRO_AJUSTES_SOB
  -- Tabla que identifica aquellas titularidades que exclusivamente son Ajustes
  -------------------------------------------------
  DELETE BAS_MEN.MAESTRO_AJUSTES_SOB;
  
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_AJUSTES_SOB
      SELECT A.or_titularitat, 'AJUSTES' ORIGEN
       FROM (SELECT DISTINCT or_titularitat
               FROM BAS_MEN.MAESTRO_SUCEPT_SOBERANOS
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT DISTINCT or_titularitat
               FROM BAS_MEN.MAESTRO_SUCEPT_SOBERANOS
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.or_titularitat = B.or_titularitat(+)
        AND B.or_titularitat IS NULL;
  
  COMMIT;
  
   VN_NUMERR:= 4;
   
-------------------------------------------------------  
-- LOOP BASILEA3
-- Calculo FI_EDAIRB
-------------------------------------------------------      
  FOR CUR IN BASILEA3 LOOP -- ABRIMOS CURSOR Y LLAMAMOS A LA FUNCION PARA CALCULAR FI_EDAIRB
        VN_NUMERR:= 5;
        VV_FI_EXCEDID:= 'NO';
        VN_COUNT:= VN_COUNT + 1;
        
        BAS_MEN.FNC_CALCUL_CCF('AIRB', 
                                PN_OPC_DER, 
                                PN_F, 
                                UPPER(CUR.IN_SEGMBS), 
                                UPPER(CUR.FI_TIPEXP),
                                UPPER(CUR.OR_PROCED), 
                                UPPER(CUR.OR_TIPOPE), 
                                CUR.OR_VIDINI, 
                                CUR.OR_VIDRES, 
                                CUR.OR_CLUNICUENT, 
                                'NO', 
                                CUR.OR_TIPAVA, 
                                CUR.IN_SEGMBSINI, 
                                CUR.OR_EPIIND,
                                CUR.FI_EPICON,
                                CUR.IN_SEGMBS0, 
                                VV_FI_EXCEDID,  
                                CUR.OR_CTAIND,
                                0,  
                                CUR.OR_TIPGAR, 
                                cur.OR_ENTITY, 
                                cur.IN_SUCEPT,
                                CUR.IN_TIPOREG,
                                NULL, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                                NULL,
                                NULL,
                                VN_FI_CCFAIRB,
                                PV_RET);

        VN_FI_EADAIRB:= CUR.TOTAL * VN_FI_CCFAIRB;
        
        IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
           VN_FI_EADAIRB:= VN_FI_EADAIRB + BAS_MEN.FNC_MAX(0,CUR.OR_FAIRVA);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '01' THEN
              VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '02' THEN
              VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.IN_FAIRVABO - CUR.OR_FAIRVA);
        END IF;
        
   
        IF UPPER(CUR.IN_INDMOR) = 'SI' THEN
             VN_FI_EADAIRB:= CUR.TOTAL;
        END IF;

        -- VJB 28/03/'08 Se inserta directamente en el maestro el valor del FI_EDAIRB
        UPDATE BAS_MEN.MAESTRO_SUCEPT_SOBERANOS
           SET FI_EADAIRB=VN_FI_EADAIRB
           WHERE OR_IDREG=CUR.OR_IDREG;           

  END LOOP;
  
  COMMIT;
     
  VN_NUMERR:= 7;

  -------------------------------------------------
  -- TABLA QUE CONTIENE EL TOTAL CONCEDIDO
  -- DISPUESTO+DISPONIBLE+AVALES+REPOS
  -------------------------------------------------  
  DELETE FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_SOB;

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_SOB
     SELECT or_titularitat, MAX(OR_FECOPE) FECOPE,
            SUM(OR_DISPTO+OR_DISBLE+OR_AVALES+DECODE(OR_REPOS,0,0,FI_EADAIRB)+DECODE(OR_FUTURS,0,0,FI_EADAIRB)) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_SOBERANOS 
      where or_titularitat <> 0
      GROUP BY or_titularitat;

  COMMIT;

   VN_NUMERR:= 8;     

 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_SOBERANOS_ORIG');

INSERT /*+ parallel (C 8) */  INTO BAS_MEN.MAPA_USO_SOBERANOS_ORIG C
        (OR_IDREG,OR_CODISO,OR_IDPERS,OR_TIPIDE,OR_NIFCIF,OR_TIPIDEIBM,OR_NIFCIFIBM,OR_TITULARITAT, OR_NOMPER,OR_PERSON,OR_IDECNO,OR_IDCNAE,OR_PROCED,OR_NUMOFI,
        OR_REFOPE,OR_REFOPE2,OR_TIPOPE,OR_FECOPE,OR_FECVTO,OR_VIDINI, OR_VIDRES,IN_ANTIGU,OR_SEGGES,OR_SUBSEG,OR_TIPAVA,
        OR_TIPGAR,OR_DESTPR,OR_TIPOFI,OR_TIPOPR,OR_IMPLTV,OR_VALTAS,OR_CONCED,OR_IDPAIS, OR_CODSOL,IN_BCOATL,IN_ITITSN,IN_INDMOR,OR_IDPRO1,OR_ENTITY,OR_DIVISA,FI_TIPEXP,OR_DISPTO,OR_DISBLE,
        OR_AVALES, OR_FUTURS, OR_REPOS, OR_DISPTOCON,OR_DISBLECON,OR_AVALESCON,OR_AJUVALCON,IN_VTAGRU,OR_RATINT,
        OR_MODRAT0,OR_SEGRIE,OR_PUNT0,OR_SITUAC0, OR_FECPUN0,IN_SEGMBSINI,IN_SEGMBS0, IN_SEGMBS1,IN_SEGMBS2,IN_SEGMBS, IN_SUCEPT,OR_CLUNIENT,OR_CLUNIPROD,OR_CLUNICONTR,OR_CLUNICUENT,OR_CLUNIOPERA,FI_MESCURA,
        OR_FECCAR,OR_PRESTMIG, OR_CLAVISO, OR_FECALTBLO, OR_INDHOLDING, OR_CODPRODO, in_idcalific,  FI_EADAIRB)
 SELECT /*+ parallel (A 8) */ 
        A.OR_IDREG,A.OR_CODISO,A.OR_IDPERS,A.OR_TIPIDE,A.OR_NIFCIF,A.OR_TIPIDEIBM,A.OR_NIFCIFIBM,A.OR_TITULARITAT,
        A.OR_NOMPER,A.OR_PERSON,A.OR_IDECNO,A.OR_IDCNAE,A.OR_PROCED, A.OR_NUMOFI, A.OR_REFOPE,A.OR_REFOPE2,A.OR_TIPOPE,A.OR_FECOPE,A.OR_FECVTO,A.OR_VIDINI,
        A.OR_VIDRES,A.IN_ANTIGU,A.OR_SEGGES,0 OR_SUBSEG,A.OR_TIPAVA, A.OR_TIPGAR,A.OR_DESTPR,A.OR_TIPOFI,A.OR_TIPOPR,A.OR_IMPLTV,A.OR_VALTAS,A.OR_CONCED,A.OR_IDPAIS,
        0 OR_CODSOL, null IN_BCOATL,A.IN_ITITSN,A.IN_INDMOR,A.OR_IDPRO1,A.OR_ENTITY,A.OR_DIVISA,A.FI_TIPEXP,A.OR_DISPTO,A.OR_DISBLE,
        A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_DISPTOCON,A.OR_DISBLECON,A.OR_AVALESCON,A.OR_AJUVALCON,A.IN_VTAGRU, b.OR_RATINT,
        b.OR_MODRAT0, A.OR_SEGRIE, b.OR_PUNT0, b.OR_SITUAC0, b.OR_FECPUN0,A.IN_SEGMBSINI,A.IN_SEGMBS0, A.IN_SEGMBS1,A.IN_SEGMBS2,A.IN_SEGMBS,
        case 
             when aju.in_titulfin is not null then 'SOAJUS' --AJUSTES
             when NOSUSC.IN_SUCEPT is not null then NOSUSC.IN_SUCEPT --Paises NO SUSCEPTIBLES
             when div.SUSCEPT_FIN is not null then div.SUSCEPT_FIN --SOBERANOS NO SUSCEPTIBLES POR MOTIVOS DIVERSOS
             when per.IN_SUCEPT is not null then per.IN_SUCEPT --PERSONALIDAD NO SUSCEPTIBLE
             when a.OR_TITULARITAT <> 0 and NVL(TOT_CONCED, 0) < 100000 then 'SOIMPR' --TOTAL CONCEDIDO <100.000E PARA TITULARIDADES <> 0
             when a.OR_TITULARITAT = 0 and a.OR_DISPTO + a.OR_DISBLE + a.OR_AVALES < 100000 then 'SOIMPR' --TOTAL CONCEDIDO <100.000E PARA TITULARIDADES = 0
             when nvl(b.OR_PUNT0,9999) = 9999 then 'SOSCSR' --SIN RATING 
             when SUBSTR(b.OR_SITUAC0,1,1) NOT IN ('O', 'C','R') THEN 'SOSCP1' --Marca de Depurado
             else 'SOSUCP'
        end in_sucept,
        A.OR_CLUNIENT,A.OR_CLUNIPROD,A.OR_CLUNICONTR,A.OR_CLUNICUENT,A.OR_CLUNIOPERA,A.FI_MESCURA,A.OR_FECCAR,A.OR_PRESTMIG,
        A.OR_CLAVISO, A.OR_FECALTBLO, A.OR_INDHOLDING,
        A.OR_CODPRODO, 
        b.idcalific,  a.FI_EADAIRB
   FROM BAS_MEN.MAESTRO_SUCEPT_SOBERANOS a,
        BAS_MEN.MAESTRO_MODELO_SOBERANOS B,
        BAS_MEN.MAESTRO_AJUSTES_SOB aju,
        BAS_MEN.MAESTRO_SOBERANOS_NOSUSC NOSUSC,
        BAS_MEN.MAESTRO_SOBERANOS_DIVERSOS div,
        BAS_MEN.MAESTRO_SOB_PERSON_NOSUSC per,
        BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_SOB conced
  WHERE A.OR_IDPERS = div.OR_IDPERS(+)
    AND A.OR_NIFCIF = div.OR_NIFCIFIBM(+)
    AND A.OR_TITULARITAT= div.OR_TITULARITAT(+)
    AND A.OR_CODISO = div.OR_CODISO(+)
    AND A.OR_CODISO = NOSUSC.ISO(+)
    and A.OR_TITULARITAT = aju.in_titulfin(+)
    and A.OR_CODISO = B.OR_CODISO(+)
    and A.OR_PERSON = per.OR_PERSON(+)
    and A.OR_TITULARITAT = conced.in_titulfin(+);

 COMMIT;
 
--INI 06/02/2019 - Nav - Este update sobre BASILEA lo haremos en el nuevo proceso FNC_SUCEPT_BASILEA_UPDATE 
--
 --   MERGE /*+ full(iBasi) parallel(iBasi 8) */ 
--   INTO bas_men.BASILEA iBasi
--  USING (SELECT or_idreg, IN_IDCALIFIC, OR_FECPUN0  , OR_PUNT0    , OR_RATINT   , OR_MODRAT0  , OR_SITUAC0  , IN_SUCEPT   
--           FROM BAS_MEN.MAPA_USO_SOBERANOS_ORIG) cur
--  ON (iBasi.OR_IDREG = cur.OR_IDREG)
--  WHEN MATCHED THEN
--     UPDATE
--        SET iBasi.IN_IDCALIFIC = CUR.IN_IDCALIFIC,  
--            iBasi.OR_FECPUN0   = CUR.OR_FECPUN0, 
--            iBasi.OR_PUNT0     = CUR.OR_PUNT0,   
--            iBasi.OR_RATINT    = CUR.OR_RATINT,  
--            iBasi.OR_MODRAT0   = CUR.OR_MODRAT0, 
--            iBasi.OR_SITUAC0   = CUR.OR_SITUAC0, 
--            iBasi.IN_SUCEPT    = cur.IN_SUCEPT;
--
--	COMMIT;  
--
--FIN 06/02/2019 - Nav
            
  VN_NUMERR:= 15;
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '09_3_fnc_sucept_soberanos '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '09_3_fnc_sucept_soberanos '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
END;

-------------------------------------------------------
-------------------------------------------------------
-- PROCESO PRINCIPAL
-------------------------------------------------------
-------------------------------------------------------
BEGIN

FNC_SUCEPT_SOB1 (PV_TABLA, PN_FECPRO, VN_MESPRO,  PN_OPC_DER, PN_F, PV_RET);

VN_NUMERR:= 16;
UPDATE BAS_MEN.CONTROL_PROCES
   SET ESTAT = 'FINALIZADO',
       DATA_FIN = SYSDATE,
       FINALITZAT = 'OK',
       REG_UPD_OK = VN_COUNT
 WHERE PROCES = '09_3_fnc_sucept_soberanos '||PV_TABLA
   AND ESTAT  = 'INICIADO';

 COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '09_3_fnc_sucept_soberanos '||PV_TABLA
        AND ESTAT  = 'INICIADO';

     COMMIT;
     RAISE;

END;
/

create or replace PROCEDURE		  BAS_MEN.BASI_SUSCEPTIBILIDAD_SOB IS
   
   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';
   
   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';
   
BEGIN

  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');


-- --***********************************************************************************************************--
-- -- Susceptibilidad/Ratings/Mdu Soberanos
-- --***********************************************************************************************************--

    -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
    SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

	BAS_MEN.FNC_SUCEPT_SOB (VV_TABLA, VN_FECPRO,VN_MESPRO, VN_OPC_DER ,VN_F,  VV_RETORNO);
	COMMIT;


END;

/

--bkd10070=====================================================================================================
Select 'bkd10070' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_CRED (
PV_TABLA       IN  VARCHAR2,
PN_FECPRO      IN  NUMBER,        --FORMATO:YYYYMMDD
PN_OPC_DER     IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);
VV_SUCEPT         VARCHAR2(10);

v_NRegs NUMBER(12);
       
BEGIN

  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('09_5_fnc_sucept_CREDITOS '||PV_TABLA, SYSDATE, 'INICIADO');
  COMMIT;
  
  -------------------------------------------------
  ----CARGA TABLA MAESTRO_SUCEPT_CREDITOS  los datos se obtienen a partir de BASILEA se utliza para el calculo del FI_EDAIRB
  -------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS');

  INSERT /*+ parallel (B 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS B
     SELECT /*+ parallel (A 8) */OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
            OR_AVALES, OR_FUTURS, OR_REPOS, OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,
            0, IN_SEGMBS0,  OR_SITUAC0, IN_SRATIN, OR_TITULARITAT IN_TITULFIN, '?' IN_SUCEPT, OR_SEGGES,
            OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_VTAGRU, FI_TIPEXP, OR_NOMPER,
            OR_PERSONSCPCB, OR_CODISO, 0, or_clunicontr, a.OR_CODPRODO, IN_INDMOR, OR_AJUVAL, IN_OPER_MIGR
       FROM BAS_MEN.BASILEA A
/*INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS */
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FECPRO,1,6)) acc	
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = substr(PN_FECPRO,1,6)) titu	
--FIN	        
      WHERE IN_SEGMBSINI IN ('106', '107')
        AND OR_PROCED IN ('INV-C/C-CR', 'INV-C/C-EX')        
   		--AND FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG') - 20/11/2019 - NAV
     		AND a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'STSORI')	/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
      --AND a.or_idreg < acc.idreg_new
      	AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
      	AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */ 
        AND IN_TIPOREG IN ('SA','RX','PX', 'ITSA', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA');			/*NAV 18/07/2019 - Añadido - 'CESA', 'AVSA'*/   /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */

  COMMIT;
  
  -- Se añande la parte de risc-pais morosa
   INSERT /*+ parallel (C 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS C
   SELECT /*+ full(a) parallel (A 8) */ DISTINCT A.OR_IDREG, A.OR_TIPIDE, A.OR_NIFCIF, A.OR_PERSON, A.OR_PROCED, A.OR_IDCNAE, A.OR_SEGRIE, A.OR_DISPTO, A.OR_DISBLE,
           A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_IDPERS, A.OR_REFOPE, A.OR_TITULARITAT, A.OR_FECOPE, A.OR_TIPOPE, A.IN_SEGMBS,
           0 OR_TITULARITAT2, A.IN_SEGMBS0,  A.OR_SITUAC0, A.IN_SRATIN, A.OR_TITULARITAT IN_TITULFIN, '?' IN_SUCEPT, A.OR_SEGGES,
           A.OR_TIPIDEIBM, A.OR_CLAVISO, A.OR_FECALTBLO, A.IN_SEGMBS2, A.IN_SEGMBSINI, A.OR_NUMOFI, A.IN_VTAGRU, A.FI_TIPEXP, A.OR_NOMPER,
           A.OR_PERSONSCPCB, A.OR_CODISO, A.FI_EADAIRB, A.or_clunicontr, a.OR_CODPRODO, A.IN_INDMOR, A.OR_AJUVAL, A.IN_OPER_MIGR
      FROM BAS_MEN.BASILEA A,
           BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS b
/*INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS */
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FECPRO,1,6)) acc	
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = substr(PN_FECPRO,1,6)) titu	
--FIN           
     WHERE A.IN_indmor = 'SI' 
       and a.or_proced = 'RISC-PAIS'
       and a.or_tipope = 'CR'
       and a.or_idreg = b.or_idreg(+)
       and b.or_idreg is null
       and A.IN_SEGMBSINI = '106'
--INI - 20/11/2019 - NAV  
--   		AND FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG')
     		AND a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'STSORI')	/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
--FIN	      		
      	AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
      	AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */     		      
       AND a.IN_TIPOREG IN ('SA','RX','PX', 'ITSA', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA');			--NAV 18/07/2019 - Añadido - 'CESA', 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
       
   commit;    
       
   -- se añade la parte del contrato de risc_pais que no sea moroso.
   INSERT /*+ parallel (C 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS C
   SELECT /*+ full(a) parallel (A 8) */ DISTINCT A.OR_IDREG, A.OR_TIPIDE, A.OR_NIFCIF, A.OR_PERSON, A.OR_PROCED, A.OR_IDCNAE, A.OR_SEGRIE, A.OR_DISPTO, A.OR_DISBLE,
           A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_IDPERS, A.OR_REFOPE, A.OR_TITULARITAT, A.OR_FECOPE, A.OR_TIPOPE, A.IN_SEGMBS,
           0 OR_TITULARITAT2, A.IN_SEGMBS0,  A.OR_SITUAC0, A.IN_SRATIN, A.OR_TITULARITAT IN_TITULFIN, '?' IN_SUCEPT, A.OR_SEGGES,
           A.OR_TIPIDEIBM, A.OR_CLAVISO, A.OR_FECALTBLO, A.IN_SEGMBS2, A.IN_SEGMBSINI, A.OR_NUMOFI, A.IN_VTAGRU, A.FI_TIPEXP, A.OR_NOMPER,
           A.OR_PERSONSCPCB, A.OR_CODISO, A.FI_EADAIRB, A.or_clunicontr, a.OR_CODPRODO, A.IN_INDMOR, A.OR_AJUVAL, A.IN_OPER_MIGR
      FROM BAS_MEN.BASILEA A,
           BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS b,
           (select distinct or_clunicontr from BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS where or_proced = 'RISC-PAIS') c
/*INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS, 
--                        por eso quitamos fi_elimi1 SRABS y añadimos ACCBS */
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FECPRO,1,6)) acc	
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = substr(PN_FECPRO,1,6)) titu	
--FIN            
     WHERE a.or_proced = 'RISC-PAIS'
       and a.or_tipope = 'CR'
       and a.or_idreg = b.or_idreg(+)
       and b.or_idreg is null
       and a.or_clunicontr = c.or_clunicontr
       and A.IN_SEGMBSINI = '106'
--INI - 20/11/2019 - NAV  
--   		AND FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG')
     		AND a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'STSORI')	/*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
--FIN	        
      	AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
      	AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */   
        AND a.IN_TIPOREG IN ('SA','RX','PX', 'ITSA', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA');  			/*NAV 18/07/2019 - Añadido - 'CESA', 'AVSA'  */ /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
     
  COMMIT;  
  
  VN_NUMERR:= 2;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CODIGOS_CREDITO');

  insert into BAS_MEN.CODIGOS_CREDITO
  select * from DCRPROP_MENSUAL.CODIGOS_CREDITO_SAS;

  commit;
  
  --Eliminamos aquellos registros con un código de CREDITOS no parametrizado en el maestro
  DELETE /*+ full(b) parallel (b 8) */ BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS b
  WHERE OR_IDREG IN (SELECT OR_IDREG
                       FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS A,
                            BAS_MEN.CODIGOS_CREDITO B
                      WHERE A.OR_CODPRODO = B.OR_CODPRODO
                        AND EXCLUIDO <> 'N');
                       
  COMMIT;          
  
  DELETE /*+ full(b) parallel (b 8) */  BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS b
  WHERE OR_IDREG IN (SELECT OR_IDREG
                       FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS A,
                            BAS_MEN.CODIGOS_CREDITO B
                      WHERE A.OR_CODPRODO = B.OR_CODPRODO(+)
                        AND B.OR_CODPRODO IS NULL);
                        
COMMIT;                        
  
   VN_NUMERR:= 3;
  
  DELETE BAS_MEN.MAESTRO_AJUSTES_CRED;
  
  COMMIT;
  
  INSERT INTO BAS_MEN.MAESTRO_AJUSTES_CRED
      SELECT A.OR_CLUNICONTR, 'KTNSAJ' ORIGEN
       FROM (SELECT DISTINCT OR_CLUNICONTR
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT DISTINCT OR_CLUNICONTR
               FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_CLUNICONTR = B.OR_CLUNICONTR(+)
        AND B.OR_CLUNICONTR IS NULL;
        
  COMMIT;        
  
  VN_COUNT:= 0;      
  VN_NUMERR:= 4;          
    
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_CREDITOS_ORIG');

   insert /*+ PARALLEL (x 8) */ into BAS_MEN.MAPA_USO_CREDITOS_ORIG x
          (OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, 
          OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,  IN_SEGMBS0, IN_SUCEPT, OR_SEGGES, OR_TIPIDEIBM,
          OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_VTAGRU, FI_TIPEXP, OR_NOMPER, OR_PERSONSCPCB, OR_CODISO,
          FI_EADAIRB, OR_CLUNICONTR, OR_CODPRODO, IN_INDMOR, OR_MODSCO, OR_PUNTSCO, IN_OPER_MIGR)
   select /*+ full(a) PARALLEL(a 8) PARALLEL(tb 8) */ 
          A.OR_IDREG, A.OR_TIPIDE, A.OR_NIFCIF, A.OR_PERSON, A.OR_PROCED, A.OR_IDCNAE, A.OR_SEGRIE, A.OR_DISPTO, A.OR_DISBLE, A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, 
          A.OR_IDPERS, A.OR_REFOPE, A.OR_TITULARITAT, A.OR_FECOPE, A.OR_TIPOPE, A.IN_SEGMBS, A.IN_SEGMBS0,  
          case when A.OR_FECOPE <> 0 and MONTHS_BETWEEN(TO_DATE(SUBSTR(PN_FECPRO,1,6), 'YYYYMM'), TO_DATE(SUBSTR(A.OR_FECOPE,1,6), 'YYYYMM')) < 6  then /* No susceptible por Fecha anterior a 6 meses.*/
                   'KTNSFE' 
               when aju.OR_CLUNICONTR is not null then aju.ORIGEN  -- No susceptible por ajustes
               when emp.codtit is not null then 'KTNSTE' --No susceptible por ser una Tarjeta de Empleado. 
               when IN_INDMOR = 'SI' then 'KTNSMO' --No susceptible por ser Moroso.
               when NVL(score4, 9999) = 9999 then 'KTSUSS'
               else 'KTSUCEP'
          end as IN_SUCEPT,
          A.OR_SEGGES, A.OR_TIPIDEIBM, A.OR_CLAVISO, A.OR_FECALTBLO, A.IN_SEGMBS2, A.IN_SEGMBSINI, A.OR_NUMOFI, A.IN_VTAGRU, A.FI_TIPEXP, A.OR_NOMPER,
          A.OR_PERSONSCPCB, A.OR_CODISO, A.FI_EADAIRB, A.OR_CLUNICONTR, a.OR_CODPRODO, A.IN_INDMOR, 
          NVL(D.MODELO,'?') OR_MODSCO,  
          nvl(D.score4, 9999) OR_PUNTSCO, 
          A.IN_OPER_MIGR  
     FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_CREDITOS A,
          BAS_MEN.MAESTRO_AJUSTES_CRED aju,
          (select distinct codtit from BAS_MEN.TITULARITAT_EMPLEADOS) emp,
          (SELECT /*+ parallel (f 8) */  DISTINCT CONTRATO, NVL(score4, 9999) score4, 'KTCOMP' MODELO
             FROM BAS_MEN.SCORES_CONTRATO_COMPORTAMENTAL f WHERE PROD_SCORE = 'KT') D
    WHERE A.OR_CLUNICONTR = aju.OR_CLUNICONTR(+)
      and A.OR_TITULARITAT = emp.codtit(+)
      AND A.OR_CLUNICONTR = CONTRATO(+);
       
       commit;
       
  UPDATE /*+ full(b) parallel (b 8) */  BAS_MEN.MAPA_USO_CREDITOS_ORIG b -- Contagio morosos
     SET IN_SUCEPT = 'KTNSMO'
   WHERE OR_CLUNICONTR IN (SELECT /*+ full(a) parallel (a 8) */ DISTINCT OR_CLUNICONTR FROM BAS_MEN.MAPA_USO_CREDITOS_ORIG a WHERE IN_SUCEPT = 'KTNSMO')
     AND IN_SUCEPT <> 'KTNSMO';

      COMMIT;     

  VN_NUMERR:= 15;
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '09_5_fnc_sucept_CREDITOS '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '09_5_fnc_sucept_CREDITOS '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   
   RAISE; 
END;

/

create or replace PROCEDURE     BAS_MEN.BASI_SUSCEPTIBILIDAD_CRED IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';
   
BEGIN

  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    -- Suceptibilidad y mdu  Créditos
    
    -- Validación de existencia de datos. Si no EXISTIERAN abortará (La función realiza un raise).
    --SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

    BAS_MEN.FNC_SUCEPT_CRED (VV_TABLA, VN_FECPRO,VN_OPC_DER ,VN_F,  VV_RETORNO);
    COMMIT;
    
END;

/
--bkd10094=====================================================================================================
Select 'bkd10094' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_PRESTAMOS ( PV_Tabla           IN  VARCHAR2
                                                              , PN_FecPro_YYYYMMDD IN  NUMBER        --Fecha del proceso FORMATO:YYYYMMDD
                                                              )  
IS


  Cte_Nom_Proceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := '09_6_FNC_SUCEPT_PRESTAMOS '||PV_TABLA||' '||PN_FecPro_YYYYMMDD;
  
   vN_NumErr       NUMBER(3)     DEFAULT 0;
   vV_Mensaje_Err  VARCHAR2(255) DEFAULT '';
   vN_Count        NUMBER(9)     DEFAULT 0;
   vV_RowId        VARCHAR2(50)  DEFAULT 0;  
   vV_SuScept      VARCHAR2(10)  DEFAULT '?';  
   vN_NRegs        NUMBER(12)    DEFAULT 0;
   vN_NRegs_Ins    NUMBER(12)    DEFAULT 0;
         
BEGIN
  
   BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proceso , 'INICIADO');  
   
   
   -- Copia a BAS_MEN tabla DPMR_RECALC_CNC_2018                         ARM - 18/06/2018
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.DPMR_RECALC_CNC_2018');

   insert into BAS_MEN.DPMR_RECALC_CNC_2018
   select * from DCRPROP_MENSUAL.DPMR_RECALC_CNC_2018_sas;

   commit;  
   
      -- XCG, 01/08/19. La tabla con los scorings hipotecarios del reactivo viene de usuario hasta que suban a producción los cambios que están realizando.
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.DPMR_RECALC_HIPO');

    insert into BAS_MEN.DPMR_RECALC_HIPO
    ( NUMSOLICITUD, SCORE_FINAL, SEGM, DEFINITIVO)        
   select OR_NUMSOLICITUD, OR_PUNT_FINAL, OR_MT_MODELO, OR_DEFINITIVO from BAS_MEN.TM_CAL_RTDOHIPOTECARIO;

   commit; 
   
   delete BAS_MEN.DPMR_RECALC_HIPO where NUMSOLICITUD in (select distinct NUMSOLICITUD from DCRPROP_MENSUAL.DPMR_RECALC_HIPO_SAS);
   
   commit;

   insert into BAS_MEN.DPMR_RECALC_HIPO
   select * from DCRPROP_MENSUAL.DPMR_RECALC_HIPO_SAS;

   commit;              
   
   vN_NumErr:= 1;
   
   -------------------------------------------------
   ----CARGA TABLA MAESTRO_SUSCEPT_PRESTAMOS  los datos se obtienen a partir de BASILEA se utliza para el calculo del FI_EDAIRB
   -------------------------------------------------
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_TEMP_PRESTAMOS');
   
   INSERT /*+ parallel (Suce 8) */ 
     INTO BAS_MEN.MAESTRO_SUCEPT_TEMP_PRESTAMOS Suce
   SELECT /*+ parallel (B 8) */ OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
             OR_AVALES, OR_FUTURS, OR_REPOS, OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,
             0, IN_SEGMBS0,  OR_SITUAC0, IN_SRATIN, OR_TITULARITAT IN_TITULFIN, IN_SUCEPT, OR_SEGGES,
             OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_VTAGRU, FI_TIPEXP, OR_NOMPER,
             OR_PERSONSCPCB, OR_CODISO, 0, OR_CLUNICONTR, OR_CODPRODO, IN_INDMOR, OR_AJUVAL, IN_OPER_MIGR, OR_NUMSCOFIN, FI_elimi1, OR_FECSCO
        FROM BAS_MEN.BASILEA B
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS 
          , (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FecPro_YYYYMMDD,1,6)) acc 
          , (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX    where OR_IDMES = substr(PN_FecPro_YYYYMMDD,1,6)) titu
--FIN        
       WHERE IN_SEGMBSINI IN ('103', '104')       
         AND OR_ENTITY    IN (81,8211)
         AND SUBSTR(OR_PROCED,1,4) NOT IN ('OFEX')
       /* 19/03/2020 - NAV - TM-614 - calcular todas las variables de proceso para los eliminados por TITACT*/
       /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
       --AND fi_elimi1 in ('NO', 'SRABS', 'RFNEG', 'TITACT2', 'NETTING') -- 20/11/2019 - NAV
         AND fi_elimi1 in ('NO', 'ACCBS', 'RFNEG', 'TITACT2', 'NETTING', 'TITACT', 'STSORI') 
       --AND or_idreg < acc.idreg_new;
         AND b.or_idreg <> acc.idreg_new   /* RMR 15/04/2020 */          
         AND b.or_idreg <> titu.idreg_new;  /* NAV 02/07/2020 */  
            
         
   COMMIT;
     
   -- Creación del maestro de ajustes (Sólo se consideraran los contratos o refopes en su defecto    
   vN_NumErr:= 2;
     
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_AJUSTES_PRESTAMOS');                              
   
   INSERT INTO BAS_MEN.MAESTRO_AJUSTES_PRESTAMOS
   SELECT  Ajustes.Id_Contrato_Ajustes
          , 'XXNSAJ' ORIGEN
     FROM ( SELECT DISTINCT 
                   CASE WHEN Aj.OR_CLUNICONTR IN (0, 999999999999999) 
                         THEN Aj.OR_REFOPE
                        ELSE  Aj.OR_CLUNICONTR
                    END Id_Contrato_Ajustes
             FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_PRESTAMOS Aj
            WHERE Aj.FI_TIPEXP = 'Ajustes'
          ) Ajustes
        ,
          ( SELECT DISTINCT 
                   CASE WHEN NAj.OR_CLUNICONTR IN (0, 999999999999999) 
                         THEN NAj.OR_REFOPE
                        ELSE  NAj.OR_CLUNICONTR
                   END Id_Contrato_Ajustes
              FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_PRESTAMOS NAj
             WHERE NAj.FI_TIPEXP <> 'Ajustes' 
          ) NoAjustes
    WHERE Ajustes.Id_Contrato_Ajustes   = NoAjustes.Id_Contrato_Ajustes(+)
      AND NoAjustes.Id_Contrato_Ajustes IS NULL;
         
   COMMIT;         
   
   vN_NumErr := 4;          
   
  --
  -- Cargamos de las puntuaciones de los modelos a partir de las tablas originales
  --
    bas_men.FNC_TRUNCATE_TABLE('BAS_MEN.PUNTUACIO_MODEL');     
    
    INSERT /*+ parallel (i 8)*/ INTO BAS_MEN.PUNTUACIO_MODEL i ( NUMSOLICITUD, SCORE, MODEL)                    
    SELECT /*+ PARALLEL (Hi 8)*/  Hi.NUMSOLICITUD, Hi.SCORE_FINAL, Hi.SEGM
      FROM BAS_MEN.DPMR_RECALC_HIPO Hi
     WHERE nvl(Hi.SEGM, '?') NOT IN ('ACCE','ACNCE','AHRCE','AHRNCE','ARCE','ARNCE','HICNRS','HICSRS','HICTRN', '?')
    UNION
    SELECT /*+ PARALLEL (Co 8)*/  Co.NUMSOLICITUD, Co.SCORE_FINAL, Co.SEGM
      FROM BAS_MEN.DPMR_RECALC_CNC_2018 Co
     WHERE nvl(Co.SEGM, '?') NOT IN ('ACCE','ACNCE','AHRCE','AHRNCE','ARCE','ARNCE','HICNRS','HICSRS','HICTRN', '?');

  COMMIT; 
 
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_PRESTAMOS_ORIG');

   vN_NumErr:= 7;

   INSERT /*+ PARALLEL (MSuce 8) */ INTO bas_men.MAPA_USO_PRESTAMOS_ORIG MSuce
          (OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, 
          OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,  IN_SEGMBS0, 
          IN_SUCEPT, OR_SEGGES, OR_SUBSEG, OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_BCOATL, IN_VTAGRU, 
          FI_TIPEXP, OR_NOMPER, OR_PERSONSCPCB, OR_CODISO, FI_EADAIRB, OR_CLUNICONTR, OR_CODPRODO, IN_INDMOR, OR_MODSCO, OR_PUNTSCO, 
          IN_OPER_MIGR, OR_AJUVAL, FI_ELIMI1, OR_NUMSCOFIN, or_fecsco, IN_DICTAMEN_DEFINITIVO
          )
   SELECT /*+ PARALLEL(Basi 8) */   Basi.OR_IDREG, Basi.OR_TIPIDE, Basi.OR_NIFCIF, Basi.OR_PERSON, Basi.OR_PROCED, Basi.OR_IDCNAE, Basi.OR_SEGRIE, Basi.OR_DISPTO
          , Basi.OR_DISBLE, Basi.OR_AVALES, Basi.OR_FUTURS, Basi.OR_REPOS, Basi.OR_IDPERS, Basi.OR_REFOPE, Basi.OR_TITULARITAT, Basi.OR_FECOPE, Basi.OR_TIPOPE, Basi.IN_SEGMBS, Basi.IN_SEGMBS0
          , CASE 
                /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/
                --when (OR_FECOPE < PN_FecPro_YYYYMMDD-10000 OR OR_FECSCO < PN_FecPro_YYYYMMDD-10000) THEN -- Comportamental
                /* Si existen 6 meses o menos entre la fecha de operación y la de scoring,
                 y la fecha de scoring tiene mas de 1 año usaremos el scoring compartamental
                   Si existen mas de 6 meses entre la fecha de operación y la de scoring,
                 y la fecha de operación tiene mas de 1 año, usaremos el scoring comportamental
                   para el resto de casos, scoring reactivo
                   04/08/2021 RMR */
                 WHEN OR_FECOPE > 19000101 
                   AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) <= 6
                        AND TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD') < add_months(TO_DATE(PN_FecPro_YYYYMMDD,'YYYYMMDD'),-12))
                     OR
                       (ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) > 6
                       AND TO_DATE(NULLIF(OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FecPro_YYYYMMDD,'YYYYMMDD'),-12)))  THEN -- Comportamental
                      CASE 
                           when Basi.OR_PROCED = 'PRES-DIVIS' AND Basi.IN_SEGMBSINI = '103' THEN 'HINSDV'    /* No susceptible por Préstamos en Divisa HIPOTECARIO   */  
                           when Basi.OR_PROCED = 'PRES-DIVIS' AND Basi.IN_SEGMBSINI = '104' THEN 'CONSDV'    /* No susceptible por Préstamos en Divisa CONSUMO*/
                           when ID_CONTRATO_AJUSTES is not null and Basi.IN_SEGMBSINI = '103' then 'HINSAJ' /* No Susceptible por ser Ajustes HIPOTECARIO*/
                           when ID_CONTRATO_AJUSTES is not null and Basi.IN_SEGMBSINI = '104' then 'CONSAJ' /* No Susceptible por ser Ajustes CONSUMO*/
                           when substr(OR_CLUNICONTR,1,3) = '817' AND SUBSTR(OR_REFOPE,1,3) = '817' and Basi.IN_SEGMBSINI = '103' THEN 'HINSLI'   /* No susceptible por Línea HIPOTECARIO*/
                           when substr(OR_CLUNICONTR,1,3) = '817' AND SUBSTR(OR_REFOPE,1,3) = '817' and Basi.IN_SEGMBSINI = '104' THEN 'CONSLI'   /* No susceptible por Línea CONSUMO*/
                           when IN_INDMOR = 'SI' AND Scor.PROD_SCORE = 'HP' THEN 'HINSMO'       /* No susceptible por ser Moroso. HIPOTECARIO*/
                           when IN_INDMOR = 'SI' AND Scor.PROD_SCORE = 'CO' THEN 'CONSMO'       /* No susceptible por ser Moroso. CONSUMO*/
                           when IN_INDMOR = 'SI' AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '103' THEN 'HINSMO'       /* No susceptible por ser Moroso. HIPOTECARIO*/
                           when IN_INDMOR = 'SI' AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '104' THEN 'CONSMO'       /* No susceptible por ser Moroso. CONSUMO*/
                           when CODTIT is not null AND Scor.PROD_SCORE = 'HP' then 'HINSTE' /* No susceptible por ser Empleado. HIPOTECARIO      */
                           when CODTIT is not null AND Scor.PROD_SCORE = 'CO' then 'CONSTE' /* No susceptible por ser Empleado.    CONSUMO*/
                           when CODTIT is not null AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '103' then 'HINSTE' /* No susceptible por ser Empleado.   HIPOTECARIO     */
                           when CODTIT is not null AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '104' then 'CONSTE' /* No susceptible por ser Empleado.     CONSUMO*/
                           when NVL(Scor.SCORE4, 9999) = 9999 AND Scor.PROD_SCORE = 'HP' THEN 'HISUSS'
                           when NVL(Scor.SCORE4, 9999) = 9999 AND Scor.PROD_SCORE = 'CO' THEN 'COSUSS'
                           when NVL(Scor.SCORE4, 9999) = 9999 AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '103' THEN 'HISUSS'  
                           when NVL(Scor.SCORE4, 9999) = 9999 AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '104' THEN 'COSUSS' 
                           when NVL(Scor.SCORE4, 9999) <> 9999 AND Scor.PROD_SCORE = 'HP' THEN 'HISUCEP'
                           when NVL(Scor.SCORE4, 9999) <> 9999 AND Scor.PROD_SCORE = 'CO' THEN 'COSUCEP'
                           when NVL(Scor.SCORE4, 9999) <> 9999 AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '103' THEN 'HISUCEP'  
                           when NVL(Scor.SCORE4, 9999) <> 9999 AND NVL(Scor.PROD_SCORE,'?') = '?' and Basi.IN_SEGMBSINI = '104' THEN 'COSUCEP'
                      end          
                 else basi.in_sucept -- reactivo ya viene calculado desde la segmentación
            end in_sucept
          , Basi.OR_SEGGES, 0 OR_SUBSEG, Basi.OR_TIPIDEIBM, Basi.OR_CLAVISO, Basi.OR_FECALTBLO, Basi.IN_SEGMBS2, Basi.IN_SEGMBSINI, Basi.OR_NUMOFI, null IN_BCOATL, Basi.IN_VTAGRU, Basi.FI_TIPEXP, Basi.OR_NOMPER
          , Basi.OR_PERSONSCPCB, Basi.OR_CODISO, Basi.FI_EADAIRB, Basi.OR_CLUNICONTR, Basi.OR_CODPRODO, Basi.IN_INDMOR
          , case 
                 /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/
                 --when (Basi.OR_FECOPE < PN_FecPro_YYYYMMDD-10000 OR Basi.OR_FECSCO < PN_FecPro_YYYYMMDD-10000) then  NVL(Scor.MODELO, '?')    -- comportamental
                 --when (Basi.OR_FECOPE >= PN_FecPro_YYYYMMDD-10000 AND NVL(Basi.OR_FECSCO,Basi.OR_FECOPE)  >= PN_FecPro_YYYYMMDD-10000)   then  NVL(PMod.MODEL, '?') -- reactivo
                  WHEN OR_FECOPE > 19000101 
                     AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) <= 6
                          AND TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD') < add_months(TO_DATE(PN_FecPro_YYYYMMDD,'YYYYMMDD'),-12))
                       OR
                         (ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) > 6
                         AND TO_DATE(NULLIF(OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FecPro_YYYYMMDD,'YYYYMMDD'),-12)))
                  THEN NVL(Scor.MODELO, '?') -- comportamental
                  ELSE NVL(PMod.MODEL, '?')  -- reactivo
            end AS OR_MODSCO     
          , case 
                 /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/
                 --when (Basi.OR_FECOPE < PN_FecPro_YYYYMMDD-10000 OR Basi.OR_FECSCO < PN_FecPro_YYYYMMDD-10000) then NVL(Scor.Score4, 9999)   -- comportamental
                 --when (Basi.OR_FECOPE >= PN_FecPro_YYYYMMDD-10000 AND NVL(Basi.OR_FECSCO,Basi.OR_FECOPE)  >= PN_FecPro_YYYYMMDD-10000)   then NVL(PMod.SCORE, 9999) -- reactivo
                  WHEN OR_FECOPE > 19000101 
                     AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) <= 6
                          AND TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD') < add_months(TO_DATE(PN_FecPro_YYYYMMDD,'YYYYMMDD'),-12))
                       OR
                         (ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FecPro_YYYYMMDD),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) > 6
                         AND TO_DATE(NULLIF(OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FecPro_YYYYMMDD,'YYYYMMDD'),-12)))
                  THEN NVL(Scor.Score4, 9999) -- comportamental
                  ELSE NVL(PMod.SCORE, 9999)  -- reactivo
            end AS OR_PUNTSCO
          , Basi.IN_OPER_MIGR, Basi.OR_AJUVAL, Basi.FI_ELIMI1, basi.OR_NUMSCOFIN, basi.or_fecsco, RecalHIP.DEFINITIVO
     FROM BAS_MEN.MAESTRO_SUCEPT_TEMP_PRESTAMOS Basi,
          (select distinct codtit from BAS_MEN.TITULARITAT_EMPLEADOS) emp,
          BAS_MEN.MAESTRO_AJUSTES_PRESTAMOS aju
          , (SELECT /*+ parallel (ScoCo 8) */  DISTINCT 
                  ScoCo.CONTRATO                  
                , ScoCo.CONTRATO_DISP
                , NVL(ScoCo.SCORE4, 9999) AS Score4
                , 'X'||ScoCo.PROD_SCORE||'COM'                AS MODELO -- MODSCO
                , ScoCo.PROD_SCORE
             FROM BAS_MEN.SCORES_CONTRATO_COMPORTAMENTAL ScoCo
            WHERE PROD_SCORE IN ('HP','CO') -- Hipotecario y Consumo
          )                              Scor 
        , BAS_MEN.PUNTUACIO_MODEL        PMod
        , BAS_MEN.DPMR_RECALC_HIPO       RecalHIP
    where Basi.OR_TITULARITAT = CODTIT(+)
      and CASE WHEN Basi.OR_CLUNICONTR IN (0, 999999999999999) THEN Basi.OR_REFOPE
               ELSE Basi.OR_CLUNICONTR 
          END = ID_CONTRATO_AJUSTES(+)
      AND CASE WHEN Basi.OR_CLUNICONTR IN (0, 999999999999999) THEN Basi.OR_REFOPE
               ELSE  Basi.OR_CLUNICONTR
          END = Scor.CONTRATO    (+)
      AND Basi.OR_REFOPE = Scor.CONTRATO_DISP(+)
      AND TO_NUMBER(decode(Basi.OR_NUMSCOFIN, '?', '0', Basi.OR_NUMSCOFIN)) = TO_NUMBER(PMod.NUMSOLICITUD(+))
      AND TO_NUMBER(decode(Basi.OR_NUMSCOFIN, '?', '0', Basi.OR_NUMSCOFIN)) = TO_NUMBER(RecalHIP.NUMSOLICITUD(+));
            
     commit; 
     
     --   Se marcan los contagiados de Morosos.
  UPDATE /*+ full(b) parallel (b 8) */ BAS_MEN.MAPA_USO_PRESTAMOS_ORIG b
     SET IN_SUCEPT = substr(IN_SUCEPT,1,2)||'NSMO'
   WHERE OR_REFOPE IN (SELECT /*+ full(a) parallel (a 8) */ OR_REFOPE FROM BAS_MEN.MAPA_USO_PRESTAMOS_ORIG a WHERE substr(IN_SUCEPT,3) = 'NSMO')
     AND substr(IN_SUCEPT,3) in ('SUCEP', 'SUSS');
     
  COMMIT; 
         
   vN_NumErr:= 9;

   BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proceso, 'FINALIZADO', 'OK', NULL, NULL, vN_NRegs_Ins); 
                                                                                                 
  
  EXCEPTION                                                                             
     WHEN OTHERS THEN                                                                            
      --                                                                                         
      --      Actualización del Control del Proceso.                                             
      --                                                                                         
      vV_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' C.E.'||vN_NumErr,1,255);                              
                                                                                                 
      ROLLBACK;                                                                                  
                                                                                                 
      BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proceso, 'FINALIZADO', 'KO', vV_Mensaje_Err);  
                                                                                                 
      RAISE;

END;
/

create or replace PROCEDURE     BAS_MEN.BASI_SUSCEPTIBILIDAD_PRESTAMOS IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';
   
BEGIN

  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    -- Suceptibilidad y mdu Comportamental Prestamos

    -- Validación de existencia de datos. Si no EXISTIERAN abortará (La función realiza un raise). 201610
    SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;
    
    BAS_MEN.FNC_SUCEPT_PRESTAMOS (VV_TABLA, VN_FECPRO);  
    COMMIT;

END;

/

--bkd10093=====================================================================================================
Select 'bkd10093' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_TARG (
PV_TABLA       IN  VARCHAR2,
PN_FECPRO      IN  NUMBER,        --FORMATO:YYYYMMDD
PN_OPC_DER     IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);

v_NRegs NUMBER(12);

BEGIN

  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('09_4_fnc_sucept_tarjetas '||PV_TABLA, SYSDATE, 'INICIADO');
  COMMIT;

  -------------------------------------------------
  ----CARGA TABLA BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS  los datos se obtienen a partir de BASILEA se utliza para el calculo del FI_EDAIRB
  -------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS');

  INSERT /*+ parallel (B 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS B
     SELECT /*+ parallel (A 8) */ OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
            OR_AVALES, OR_FUTURS, OR_REPOS, OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,
            0, IN_SEGMBS0,  OR_SITUAC0, IN_SRATIN, OR_TITULARITAT IN_TITULFIN, '?' IN_SUCEPT, OR_SEGGES,
            OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_VTAGRU, FI_TIPEXP, OR_NOMPER,
            OR_PERSONSCPCB, OR_CODISO, 0, or_clunicontr, OR_CODPRODO, IN_INDMOR, OR_CLUNIENT, OR_CLUNIPROD, OR_AJUVAL, IN_OPER_MIGR
       FROM BAS_MEN.BASILEA A
--INI - 20/11/2019 - NAV - En caso de reproceso en MDUs deberian entrar registros originales, NO los que duplica Acciones BS(ACCBS), 
--                        por eso quitamos fi_elimi1 NO,SRABS y añadimos ACCBS 
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = substr(PN_FECPRO,1,6)) acc	
					, (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX 	 where OR_IDMES = substr(PN_FECPRO,1,6)) titu	
--FIN	        
      WHERE IN_SEGMBSINI IN ('106', '107')
        AND (OR_TIPOPE = 'TC'
         OR OR_PROCED = 'TARGES')  
      /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
   		--AND FI_ELIMI1 IN ('NO', 'SRABS', 'RFNEG') - 20/11/2019 - NAV
     		AND a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'STSORI')
      --AND a.or_idreg < acc.idreg_new
      	AND a.or_idreg <> acc.idreg_new 	/* RMR 15/04/2020 */          
      	AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */  
        AND IN_TIPOREG IN ('SA','RX','PX', 'ITSA', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA'); --NAV 18/07/2019 - Añadido - 'CESA', 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */

  COMMIT;

  VN_NUMERR:= 2;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CODIGOS_TARJETA');

  insert into BAS_MEN.CODIGOS_TARJETA
  select * from DCRPROP_MENSUAL.CODIGOS_TARJETA_SAS;

  commit;

  --Eliminamos aquellos registros con un código de tarjeta no parametrizado en el maestro
  DELETE /*+ full(a) parallel (a 8) */BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS a
  WHERE OR_IDREG IN (SELECT OR_IDREG
                       FROM BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS A,
                            BAS_MEN.CODIGOS_TARJETA B
                      WHERE A.OR_CODPRODO = B.OR_CODPRODO
                        AND EXCLUIDO <> 'N');

  COMMIT;

  DELETE BAS_MEN.MAESTRO_AJUSTES_TARJ;

  COMMIT;

  INSERT INTO BAS_MEN.MAESTRO_AJUSTES_TARJ
      SELECT A.OR_CLUNICONTR, 'TANSAJ' ORIGEN
       FROM (SELECT /*+ parallel (a 8) */ DISTINCT OR_CLUNICONTR
               FROM BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT /*+ parallel (b 8) */ DISTINCT OR_CLUNICONTR
               FROM BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_CLUNICONTR = B.OR_CLUNICONTR(+)
        AND B.OR_CLUNICONTR IS NULL;

  COMMIT;

  VN_COUNT:= 0;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_TARJETAS_ORIG');

 insert /*+ PARALLEL (x 8) */ into BAS_MEN.MAPA_USO_tarjetas_ORIG x
         (OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS,
          OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,IN_SEGMBS0,
          IN_SUCEPT, OR_SEGGES, OR_SUBSEG, OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, IN_SEGMBS2, IN_SEGMBSINI, OR_NUMOFI, IN_BCOATL, IN_VTAGRU,
          FI_TIPEXP, OR_NOMPER, OR_PERSONSCPCB, OR_CODISO, FI_EADAIRB, OR_CLUNICONTR, OR_CODPRODO, IN_INDMOR, OR_MODSCO, OR_PUNTSCO,
          OR_CLUNIENT, OR_CLUNIPROD, IN_OPER_MIGR)
  select /*+ PARALLEL(a 8) PARALLEL(tb 8) */ A.OR_IDREG, A.OR_TIPIDE, A.OR_NIFCIF, A.OR_PERSON, A.OR_PROCED, A.OR_IDCNAE, A.OR_SEGRIE, A.OR_DISPTO, 
             A.OR_DISBLE, A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_IDPERS, A.OR_REFOPE, A.OR_TITULARITAT, A.OR_FECOPE, A.OR_TIPOPE, A.IN_SEGMBS, 
             A.IN_SEGMBS0,  
             case when ope.OR_CLUNICONTR is not null then 'TANSOP' --No susceptible por ser una Tarjeta no operativa.
                                when tb.empresa_asociada is not null and TO_NUMBER(tb.EMPRESA_ASOCIADA) NOT IN (81, 185, 42, 8211) then 'TANSEX' /*No susceptible por ser una tarjeta externa si la entidad de la cuenta vista no es de BS o BG*/
                                when tb.FECHA_ALTA is not null and MONTHS_BETWEEN(TO_DATE(SUBSTR(PN_FECPRO,1,6), 'YYYYMM'), TO_DATE(SUBSTR(FECHA_ALTA,1,6), 'YYYYMM')) < 6  then /*No susceptible por Fecha anterior a 6 meses.*/
                                     'TANSFE' 
                                when aju.OR_CLUNICONTR is not null then aju.ORIGEN  -- No susceptible por ajustes
                                when emp.codtit is not null then 'TANSTE' --No susceptible por ser una Tarjeta de Empleado. 
                                when IN_INDMOR = 'SI' then 'TANSMO' --No susceptible por ser Moroso.
                                when NVL(d.score4, 9999) = 9999 then 'TASUSS'
                  else 'TASUCEP'
             end as IN_SUCEPT,
             A.OR_SEGGES, 0 OR_SUBSEG, A.OR_TIPIDEIBM, 
             A.OR_CLAVISO, A.OR_FECALTBLO, A.IN_SEGMBS2, A.IN_SEGMBSINI, A.OR_NUMOFI, null IN_BCOATL, A.IN_VTAGRU, A.FI_TIPEXP, A.OR_NOMPER, 
             A.OR_PERSONSCPCB, A.OR_CODISO, A.FI_EADAIRB, A.OR_CLUNICONTR, a.OR_CODPRODO, A.IN_INDMOR, 
             NVL(D.MODELO,'?') OR_MODSCO,  
             nvl(d.score4, 9999) OR_PUNTSCO, a.OR_CLUNIENT, a.OR_CLUNIPROD, A.IN_OPER_MIGR                   
     FROM BAS_MEN.MAESTRO_SUCEPT_temp_TARJETAS A,
           (select /*+ PARALLEL(b 8) */ b.* from BAS_MEN.CONTRATOS_TARJ_NO_OPERATIVAS b where TOTAL_IMPORTE = 0 and IMPORTE_CONCEDIDO_PR = 0 and IMPORTE_IMPAGO_PR = 0) ope,
           BAS_MEN.TB_INFCONTRATO_TARJETAS tb,
           BAS_MEN.MAESTRO_AJUSTES_TARJ aju,
           (select distinct codtit from BAS_MEN.TITULARITAT_EMPLEADOS) emp,
           (SELECT /*+ parallel (f 8) */  DISTINCT CONTRATO, NVL(score4, 9999) score4, 'TACOMP' MODELO
              FROM BAS_MEN.SCORES_CONTRATO_COMPORTAMENTAL f WHERE PROD_SCORE = 'TA') D
     WHERE A.OR_CLUNIENT = ope.OR_CLUNIENT(+)
       AND A.OR_CLUNIPROD = ope.OR_CLUNIPROD(+)
       AND A.OR_CLUNICONTR = ope.OR_CLUNICONTR(+)
       and A.OR_CLUNIENT    = tb.ENTIDAD (+)
       AND A.OR_CLUNIPROD   = tb.PRODUCTO(+)
       AND A.OR_CLUNICONTR  = tb.CONTRATO(+)
       and A.OR_CLUNICONTR = aju.OR_CLUNICONTR(+)
       and A.OR_TITULARITAT = emp.codtit(+)
       AND A.OR_CLUNICONTR = d.CONTRATO(+);
       
       commit;
   
     -- Se marcan los contagiados de Morosos.
  UPDATE /*+ full(b) parallel (b 8) */ BAS_MEN.MAPA_USO_tarjetas_ORIG b
     SET IN_SUCEPT = 'TANSMO'
   WHERE OR_CLUNICONTR IN (SELECT /*+ full(a) parallel (a 8) */ DISTINCT OR_CLUNICONTR FROM BAS_MEN.MAPA_USO_tarjetas_ORIG a WHERE IN_SUCEPT = 'TANSMO');

  COMMIT;

  VN_NUMERR:= 15;
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '09_4_fnc_sucept_tarjetas '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '09_4_fnc_sucept_tarjetas '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   raise;

END;
/

create or replace PROCEDURE BAS_MEN.BASI_SUSCEPTIBILIDAD_TARG IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';
   
BEGIN

  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    -- Suceptibilidad y mdu Tarjetas

    -- Validación de existencia de datos. Si no EXISTIERAN abortará (La función realiza un raise).
    SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

    BAS_MEN.FNC_SUCEPT_TARG (VV_TABLA, VN_FECPRO,VN_OPC_DER ,VN_F,  VV_RETORNO);
    COMMIT;

END;

/

--bkd10092=====================================================================================================
Select 'bkd10092' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SUCEPT_OFEX (
PV_TABLA       IN  VARCHAR2,
PN_OPC         IN  NUMBER,
PN_FECPRO      IN  NUMBER,        --FORMATO:YYYYMMDD
PV_FECHA       IN  NUMBER,        --FORMATO:YYYYMM
PN_OPC_DER     IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F           IN  NUMBER,
PV_RET         OUT VARCHAR2) IS
VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VN_COUNT       NUMBER(9):=0;
VV_ROWID       VARCHAR2(50);
VN_NUM_AVA_POST NUMBER(8);
VN_OR_SEGGES     NUMBER(2);
VV_ORIG_AVA_OLD  varchar2(10);

-------------------------------------------------------
-- 2- PROCEDURE FNC_SUCEPT_OFEX
-- Asignación del Indicador de Susceptibilidad  IN_SUCEPT
-------------------------------------------------------

PROCEDURE FNC_SUCEPT_OFEX (
PV_TABLA   IN  VARCHAR2,
PN_FECPRO  IN  NUMBER,        --FORMATO:YYYYMMDD
PV_FECHA   IN  NUMBER,        --FORMATO:YYYYMM
PN_OPC_DER IN  NUMBER,        --Derivados(1,2) en Fnc_CCF
PN_F       IN  NUMBER,
PV_RET     OUT VARCHAR2) IS

  VN_NUMERR              NUMBER(3);
  VV_MENSAJE             VARCHAR2(255);
  VN_COUNT               NUMBER(9):=0;
  VV_ROWID               VARCHAR2(50);
  VN_CONT                NUMBER(2);
  VV_ORIG_DESCUB_DIVR    VARCHAR2(12);
  VV_COMENTARIO          VARCHAR2(50);
  VV_ERROR               VARCHAR2(255);
  VV_TROBAT              VARCHAR2(2);
  VV_OR_SEGRIE           VARCHAR2(10);
  VV_OR_SEGPRO           VARCHAR2(10);
  VN_FEC_CAL             NUMBER(8);
  VN_FECHA               NUMBER(8);
  VV_IND_SIT             VARCHAR2(3);
  VV_SEC_TOR             VARCHAR2(4);
  VN_TIP_RAT             NUMBER(2);
  VV_OR_SITUAC           VARCHAR2(3);
  VN_RAT_GBL             NUMBER(6,2);
  VV_CODMODELO           VARCHAR2(5);
  VV_CODMODELO_AUX       VARCHAR2(5);
  VV_INDPROMAP           VARCHAR2(5);
  VV_VENTAS              FLOAT;
  VN_MOD_AJUS_SMA        NUMBER(17,7);
  VN_IDFCALIFIC          NUMBER(9);
  VV_OR_SEGFIC           VARCHAR2(10);
  VV_NUM_EMP_CON         FLOAT(126);
  VV_NUM_EMP             FLOAT(126);
  VV_ACTIVO              FLOAT(126);
  VV_ACTIVO_CONS         FLOAT(126);
  VV_ACTIVO_CIR          FLOAT(126);
  VV_VENTAS_CONSOL       FLOAT(126);
  VV_EXISTENCIAS         FLOAT(126);
  VV_GRUPO_CONSOL        VARCHAR2(15);
  VV_HOLDING             VARCHAR2(1);
  VV_CNAE                NUMBER(9);
  VV_SEGGES              number(2);
  VV_SUBSEG              number(2);
  VV_SEGFAC              NUMBER(2);
  VV_TIPIDE              NUMBER(2);
  VV_SEGMBS2             VARCHAR2(3);
  VV_SEGMENTO            VARCHAR2(3);
  VV_PERSON              VARCHAR2(3);
  VV_SUCEPT              VARCHAR2(10);
  VV_ORIG                VARCHAR2(10);
  VV_ORIG_TIPOPE         VARCHAR2(10);
  VV_ORIG_DESCUB         VARCHAR2(12);
  VN_TOT_CONCED          FLOAT;
  VN_TOT_CONCED_AVALES   FLOAT;
  VV_CONCED              FLOAT;
  VN_FECOPE              NUMBER(8);
  VN_LIMIT               NUMBER(8);
  VN_FI_EADAIRB          FLOAT;
  VN_FI_CCFAIRB          NUMBER(6,4);
  VV_FI_EXCEDID          VARCHAR2(2);
  VV_SECTOR              VARCHAR2(15);
  VN_UTIL                FLOAT;
  VV_SUCEPT_DF           VARCHAR2(10);
  VV_SUCEPT_DIVR         VARCHAR2(10);
  VV_CONCED_DF           FLOAT;
  VV_PESOW               FLOAT;
  VV_PUNT_GR             FLOAT;
  VV_OR_MODGRUP          VARCHAR2(5 BYTE); /* 26/02/2020 RMR Añadido campo de modelo de grupo */
  VV_FF000_VCC           NUMBER(8);        /* 20/08/2021 RMR Añadida fecha balance rating sibis */
  vv_data_balance_ventas NUMBER(8);/* 20/08/2021 RMR Añadida fecha balance ventas */

-- 22/03/2019 Renta Fija de OFEX pasa a tratarse en el MdU de Ofex

-- CURSOR DE RATINGS Y ENRIQUECIMIENTO OFEX --
  CURSOR BASILEA IS
     SELECT /*+ parallel (b 8) */  OR_IDREG,  OR_SEGRIE, IN_SEGMBS, OR_SEGGES,  IN_TIPOREG, OR_CTACLI,
            OR_TIPIDE, OR_IDCNAE, OR_EPIIND, OR_TITULARITAT, OR_SEGFIC, OR_SEGFAC, OR_CLUNICUENT,
            OR_PROCED, IN_SEGMBSINI, OR_REFOPE, IN_SEGMBS0,OR_IDPERS, IN_SEGMBS2, OR_TITUSCPCB, OR_PUNT0,
            IN_SUCEPT, OR_MODRAT0, OR_INDHOLDING, OR_CLUNICONTR, OR_NUMOFI, IN_PYME, OR_PERSON,
            IN_VTAGRU, IN_VTAGRU_CONS, IN_EXISTENCIAS, IN_NUMEMP, IN_ACTIVO, IN_ACTIVO_CIR, IN_ACTIVO_CONS, IN_NUMEMP_CONS,
            NVL(IN_NIFGRUPCON, '?') IN_NIFGRUPCON, OR_MODGRUP /* 26/02/2020 RMR Añadido campo de modelo de grupo */ ,OR_NIFCIF
       FROM BAS_MEN.BASILEA B
       WHERE IN_TIPOREG IN ('RX', 'OXE', 'OX', 'MMOX', 'MMOXE')
         AND IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027','002','017','101','102');

-------------------------------------------------------
-- CURSOR BASILEA1
-- cursor para la asignación de no susceptibles
-- para registros con titularidad <> 0,9
-------------------------------------------------------
  CURSOR BASILEA1 IS
      SELECT OR_IDREG, OR_CTACLI, OR_NUMOFI, IN_SEGMBS, IN_SEGMBSINI, IN_SEGMBS0, OR_PROCED,
             OR_PERSON, RTRIM(UPPER(OR_NOMPER)) AS OR_NOMPER, OR_CLAVISO, OR_FECALTBLO, IN_PYME, IN_ACTIVO, IN_ACTIVO_CONS,
             OR_SEGGES, OR_NIFCIF, OR_TIPIDE, OR_TIPOPE, IN_SEGMBS2 , IN_INDMOR, OR_SEGRIE, OR_MODRAT0, OR_SITUAC0, OR_SEGFAC,
             IN_VTAGRU, IN_VTAGRU_CONS, OR_INDHOLDING
       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX b;

-------------------------------------------------------
-- CURSOR BASILEA2
-- Cursor para el calculo del FI_EDAIRB
-------------------------------------------------------
  CURSOR BASILEA2 IS
     SELECT OR_IDREG,  IN_SEGMBS, IN_VTAGRU, IN_INDMOR,    OR_TIPOPE,  IN_SEGMBS0, IN_SEGMBSINI,  OR_CTACLI,
            OR_PROCED,  OR_VIDRES, OR_VIDINI,     OR_IDCNAE, OR_CTAIND,  IN_SUCEPT, or_CLUNICUENT,
            FI_TIPEXP, OR_FAIRVA, OR_EPIIND, FI_EPICON, IN_FAIRVABO, OR_TITULARITAT, OR_CODPRODO, OR_NUMOFI, OR_ENTITY,
             OR_TIPAVA,    OR_TIPIDEIBM, OR_TIPGAR, IN_TIPOREG,
            (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) TOTAL
      FROM           BAS_MEN.MAESTRO_SUCEPT_OFEX
      WHERE FI_TIPEXP IN ('OTC','Repos');

-------------------------------------------------------
-- CURSOR CONTAGIOPERSON
-- cursor para la el contagio de Personalidad
-------------------------------------------------------
    CURSOR CONTAGIOPERSON IS
     SELECT DISTINCT A.OR_CTACLI, A.OR_NUMOFI
       FROM (SELECT /*+ parallel (c 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
              FROM BAS_MEN.MAESTRO_SUCEPT_OFEX c
                  WHERE SUBSTR(IN_SUCEPT,1,4)='EMPE') A,
               (SELECT /*+ parallel (d 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
                  FROM BAS_MEN.MAESTRO_SUCEPT_OFEX d
                  WHERE IN_SUCEPT = 'EMSUCP') B
        WHERE A.OR_CTACLI = B.OR_CTACLI
          AND A.OR_NUMOFI = B.OR_NUMOFI;

-------------------------------------------------------
-- CURSOR CONTAGIOPERSONINC
-- cursor para la el contagio de Personalidad incorrecta
-------------------------------------------------------
    CURSOR CONTAGIOPERSONINC IS
     SELECT /*+ parallel (b 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
      FROM BAS_MEN.MAESTRO_SUCEPT_OFEX b
     WHERE IN_SUCEPT IN ('EMNSSP');

-------------------------------------------------------
-- CURSOR CONTAGIOOFINS
-- cursor para la el contagio de oficina 602 OTROS<->EMOFIN
-------------------------------------------------------
    CURSOR CONTAGIOOFINS IS
     SELECT /*+ parallel (b 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
      FROM BAS_MEN.MAESTRO_SUCEPT_OFEX b
     WHERE IN_SUCEPT = 'EMOFIN';

-------------------------------------------------------
-- CURSOR CONTAGIOTIPOPE
-- cursor para la el contagio de tipo de operacion EMSUCP<->EMTIPO
-------------------------------------------------------
    CURSOR CONTAGIOTIPOPE IS
     SELECT  DISTINCT A.OR_CTACLI, A.OR_NUMOFI
      FROM (SELECT /*+ parallel (b 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
              FROM BAS_MEN.MAESTRO_SUCEPT_OFEX  b
                  WHERE IN_SUCEPT = 'EMTIPO') A,
               (SELECT /*+ parallel (a 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
                  FROM BAS_MEN.MAESTRO_SUCEPT_OFEX a
                  WHERE IN_SUCEPT = 'EMSUCP') B
        WHERE A.OR_CTACLI = B.OR_CTACLI
          AND A.OR_NUMOFI = B.OR_NUMOFI;

-------------------------------------------------------
-- CURSOR CONTAGIOBLQR
-- cursor para la el contagio de OTROS<->EMBLQR
-------------------------------------------------------
    CURSOR CONTAGIOBLQR IS
     SELECT /*+ parallel (b 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX b
      WHERE (IN_SUCEPT = 'EMBLQR'
         OR (IN_SUCEPT = 'EMSUCP'
        AND OR_CLAVISO IN (9051,9052,9053,9054,9050) AND TO_NUMBER(TO_CHAR(TO_DATE(replace(OR_FECALTBLO,'?',null),'YYYY-MM-DD'),'YYYYMMDD')) <= PN_FECPRO));

-------------------------------------------------------
-- CURSOR CONTAGIOBLQR_DFSUCP
-- cursor para la el contagio de DFSUCP<->'NCBLQR'
-------------------------------------------------------
    CURSOR CONTAGIOBLQR_DFSUCP IS
     SELECT /*+ parallel (a 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX  a
      WHERE IN_SUCEPT = 'NCBLQR';

    CURSOR CONTAGIO_MOROS IS
   SELECT A.OR_CTACLI, A.OR_NUMOFI
      FROM (SELECT /*+ parallel (a 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
              FROM BAS_MEN.MAESTRO_SUCEPT_OFEX a
                  WHERE IN_SUCEPT = 'EMPRMO') A,
               (SELECT /*+ parallel (b 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
                  FROM BAS_MEN.MAESTRO_SUCEPT_OFEX b
                  WHERE IN_SUCEPT <> 'EMPRMO') B
        WHERE A.OR_CTACLI = B.OR_CTACLI
        AND A.OR_NUMOFI = B.OR_NUMOFI;

  CURSOR CNAENOSUSC IS
   SELECT  /*+ parallel (a 4) */A.OR_IDREG
      FROM BAS_MEN.MAPA_USO_ORIG_OFEX A,
            BAS_MEN.MAESTRO_CNAES_SECTOR B
      WHERE A.IN_SUCEPT NOT IN ('PFSUCP','FERENS','FEOFNS','EMNSNC','EMAJUS','EMOFIN','EMAVAL','EMBLQR','EMDIVR','EMPROC'
                               ,'EMTARG','EMTIPO','TITCIFNI','ETNSPJ','ETTIPO','EUFACO','EUFANC1', 'EMSSP')
        AND SUBSTR(A.IN_SUCEPT,3) NOT IN ('NSNC','AJUS','OFIN','AVAL','BLQR','DIVR','PROC'
                                         ,'TARG','TIPO','DESC','NSPJ','TIPO','FACO','FANC1','PRMO'
                                         , 'BPRI', 'PICH')
        AND SUBSTR(A.IN_SUCEPT,1,4) NOT IN('EMPE','NCPE','ETPE','PFPE','EUPE')
        AND (SUBSTR(A.OR_SEGRIE,1,2) IN ('E3','E4')-- IN ('E3R','E3DS','E4R','E4DS')
         OR (A.OR_SEGRIE='?' AND SUBSTR(A.OR_SEGFIC,1,2) IN ('E3','E4', 'E5')))
        AND DECODE(NVL(A.OR_CNAEREL, 0), 0, A.OR_IDCNAE, 99999, A.OR_IDCNAE, A.OR_CNAEREL)  = B.CNAE93
        AND IN_SEGMBSINI NOT IN ('002', '017', '101', '102')
        AND B.DESC_FINAL_OK = 'NO SUSCEPTIBLE';

 -------------------------------------------------
  ----CURSOR CONTAGIOCNAE
  -------------------------------------------------
  -- cursor para el tratamiento de la susceptibilidad de los CNAEs ACC-VJB 03/07/'08
   CURSOR CONTAGIOCNAE IS
    SELECT A.OR_CTACLI, A.OR_NUMOFI
        FROM (SELECT  /*+ parallel (C 4) */DISTINCT OR_CTACLI, OR_NUMOFI
                FROM BAS_MEN.MAPA_USO_ORIG_OFEX C
                    WHERE SUBSTR(IN_SUCEPT,3) = 'CNAE') A,
                 (SELECT  /*+ parallel (D 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
                    FROM BAS_MEN.MAPA_USO_ORIG_OFEX D
                    WHERE SUBSTR(IN_SUCEPT,3) = 'SUCP') B
          WHERE A.OR_CTACLI = B.OR_CTACLI
            AND A.OR_NUMOFI = B.OR_NUMOFI;

  -------------------------------------------------
  ----CURSOR DESGLOSEINSUCEPT
  -------------------------------------------------
  -- desglose del indicador de susceptibilidad EMSUCP
  CURSOR DESGLOSEINSUCEPT IS
     SELECT OR_IDREG, OR_PUNT0, OR_SITUAC0, OR_CTACLI, OR_NUMOFI, IN_SUCEPT, OR_IDCNAE, OR_SEGRIE, IN_SEGMBSINI, OR_MODRAT0, OR_SEGFIC, IN_SEGMBS2, OR_INDHOLDING
       FROM BAS_MEN.MAPA_USO_ORIG_OFEX
      WHERE substr(IN_SUCEPT,3) = 'SUCP';

--INI 06/02/2019 - nav - Ya no necesitamos este CURSOR BASILEA4
-------------------------------------------------------
-- CURSOR BASILEA4
-- cursor para la actualización de basilea
-------------------------------------------------------
--    CURSOR BASILEA4 IS
--     SELECT or_idreg, in_sucept, or_segfic, IN_VTAGRU, IN_VTAGRU_CONS, IN_INDBAL, IN_INDBAL_CONS, IN_ACTIVO
--       FROM BAS_MEN.MAPA_USO_ORIG_OFEX;
--FIN 06/02/2019 - Nav

     -------------------------------------------------------
     -- CURSOR Contagio_EMSucp
     -- cursor para la actualización de basilea
     -------------------------------------------------------
    CURSOR Contagio_EMSucp IS
      SELECT  SEmSu.OR_CTACLI, SEmSu.OR_NUMOFI
        FROM
           (SELECT /*+ parallel (EmS 4) */ DISTINCT OR_CTACLI, OR_NUMOFI, IN_SUCEPT
            FROM BAS_MEN.MAESTRO_SUCEPT_OFEX EmS
           WHERE IN_SUCEPT = 'EMSUCP'
           GROUP BY OR_CTACLI, OR_NUMOFI, IN_SUCEPT
           ) SEmSu
           ,
           (SELECT /*+ parallel (NoEmS 4) */ DISTINCT OR_CTACLI, OR_NUMOFI, IN_SUCEPT
            FROM BAS_MEN.MAESTRO_SUCEPT_OFEX NoEmS
           WHERE IN_SUCEPT <> 'EMSUCP'
           GROUP BY OR_CTACLI, OR_NUMOFI, IN_SUCEPT
           ) SNOEmSu
       WHERE SNOEmSu.OR_CTACLI = SEmSu.OR_CTACLI
         AND SNOEmSu.OR_NUMOFI = SEmSu.OR_NUMOFI  ;

BEGIN

  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('9.0 FNC_SUCEPT_OFEX '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_NUMERR:= 1;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_OFEX');

  COMMIT;

  BEGIN
    SELECT SUBSTR(VALPARM,1,6)
      INTO VN_FECHA
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB='0081'
       AND CODPARM='0001'
       AND SECPARM='01';
  EXCEPTION
       WHEN OTHERS THEN
           NULL;
  END;

  VN_NUMERR:= 2;

  INSERT INTO BAS_MEN.TEMP_OFEX
  SELECT *
    FROM BAS_MEN.RATINGSIBISOFEX
   WHERE IND_SIT NOT IN ('L', 'ANP') /* TM-3297 - RMR - Abierto filtro para que pasen los depurados 'D' */
     AND ESTADO NOT IN ('PO');  -- 28/11/2019 - RMR - Quitados provisionales por petición de Jaume

   COMMIT;

   VN_NUMERR:= 3;

  --Agrupa i agafa el FEC_CAL més gran.

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_OFEX_1');

  COMMIT;

  INSERT INTO BAS_MEN.TEMP_OFEX_1
  SELECT B.*
    FROM BAS_MEN.TEMP_OFEX B,
        (SELECT OFEX, IDUNICO, MAX(FEC_CAL) AS FEC_CAL
           FROM BAS_MEN.TEMP_OFEX
          GROUP BY OFEX, IDUNICO) A
  WHERE A.OFEX = B.OFEX
    AND A.IDUNICO = B.IDUNICO
    AND A.FEC_CAL = B.FEC_CAL;

  VN_NUMERR:= 4;

  UPDATE BAS_MEN.CONTROL_PROCES
     SET  NUM_ERROR = VN_NUMERR
   WHERE PROCES = '20.2 FNC_CARGA_OFEX '
     AND ESTAT  = 'INICIADO';

  COMMIT;

  VN_NUMERR:= 5;

  --Agrupa per CODMODELO i agafa el IDCALIFIC més gran.

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_OFEX_2');

  COMMIT;

  INSERT INTO BAS_MEN.TEMP_OFEX_2
   SELECT B.*
    FROM BAS_MEN.TEMP_OFEX_1 B,
        (SELECT OFEX, IDUNICO, FEC_CAL, MAX(IDCALIFIC) AS IDCALIFIC
           FROM BAS_MEN.TEMP_OFEX_1
          GROUP BY OFEX, IDUNICO,FEC_CAL) A
   WHERE A.OFEX = B.OFEX
     AND A.IDUNICO = B.IDUNICO
     AND A.FEC_CAL = B.FEC_CAL
     AND A.IDCALIFIC = B.IDCALIFIC;

    VN_NUMERR:= 6;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET  NUM_ERROR = VN_NUMERR
     WHERE PROCES = '20.2 FNC_CARGA_OFEX '
       AND ESTAT  = 'INICIADO';

  COMMIT;

  VN_NUMERR:= 10;

---------------------------------------
  --Esborra la taula mestre.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MODELO_OFEX');

  --Inserta en la taula mestre els registres avanç obtinguts.
  -- Los datos de ventas están divididos entre 1000, con lo que hay que multiplicarlos. XCG, dic_2014

/* NAV 27/11/2019 - Informamos los campos impfact, in_activo, in_activo_cir, in_existencias y in_numemp de la tabla MAESTRO_MODELO_OFEX cruzando con la tabla RATINGSIBIS_GRUP y DESGLOS_BALANCOS_CONS
-- dado que algunos registros vienen de ofex sin importes.*/
/*  INSERT INTO BAS_MEN.MAESTRO_MODELO_OFEX
  (NUMOFI, CTACLI, FEC_CAL, RAT_GBL, CODMODELO, MOD_AJUS_SMA, IDCALIFIC, ESTADO, COD_CNAE, PATHO_VFC, SITUACION, SEC_TOR2, IMPFACT,
  NUM_EMPLE, ACTIVO, ACTIVO_CIR, VENTAS_CONSOL, EXISTENCIAS, GRUPO_CONSOL, NUMPERREL, IDCALGRU, CODMODGRU, SMA_CAL_REL, RAT_CAL_REL, RATIND, PES_APLI_GR, RAT_AJU_GBL)
     SELECT OFEX, IDUNICO, FEC_CAL, RAT_GBL, nvl(CODMODELO, '?'), nvl(MOD_AJUS_SMA,9999), IDCALIFIC, ESTADO, COD_CNAE, PATHO_VFC, IND_SIT, SEC_TOR2, IMPFACT*1000,
       NUM_EMPLE, ACTIVO*1000, ACTIVO_CIR*1000, VENTAS_CONSOL*1000, EXISTENCIAS*1000, GRUPO_CONSOL, NUMPERREL, IDCALGRU, CODMODGRU, SMA_CAL_REL, RAT_CAL_REL, RATIND, PES_APLI_GR, RAT_AJU_GBL
   FROM BAS_MEN.TEMP_OFEX_2;
*/
  INSERT INTO BAS_MEN.MAESTRO_MODELO_OFEX
            (NUMOFI, CTACLI, FEC_CAL, RAT_GBL, CODMODELO, MOD_AJUS_SMA, IDCALIFIC, ESTADO, COD_CNAE, PATHO_VFC, SITUACION, SEC_TOR2, IMPFACT,
            NUM_EMPLE, ACTIVO, ACTIVO_CIR, VENTAS_CONSOL, EXISTENCIAS, GRUPO_CONSOL, NUMPERREL, IDCALGRU, CODMODGRU, SMA_CAL_REL, RAT_CAL_REL, RATIND, PES_APLI_GR, RAT_AJU_GBL, FF000_VCC)
     SELECT a.OFEX, a.IDUNICO, a.FEC_CAL, a.RAT_GBL, nvl(a.CODMODELO, '?'), nvl(a.MOD_AJUS_SMA,9999), a.IDCALIFIC, a.ESTADO, a.COD_CNAE, a.PATHO_VFC, a.IND_SIT
          , a.SEC_TOR2, nvl(a.IMPFACT*1000, b.hav_import_net_xifra_negocis), nvl(a.NUM_EMPLE, c.num_empleats), nvl(a.ACTIVO*1000, b.actiu)
          , nvl(a.ACTIVO_CIR*1000, b.act_circulant), a.VENTAS_CONSOL*1000, nvl(a.EXISTENCIAS*1000, b.act_circulant_existencies) , a.GRUPO_CONSOL
          , a.NUMPERREL, a.IDCALGRU , a.CODMODGRU , a.SMA_CAL_REL, a.RAT_CAL_REL, a.RATIND, a.PES_APLI_GR, a.RAT_AJU_GBL
          , a.FF000_VCC /* 20/08/2021 RMR */
       FROM BAS_MEN.TEMP_OFEX_2 a
          , BAS_MEN.RATINGSIBIS_GRUP b
          , BAS_MEN.DESGLOS_BALANCOS_CONS c
      where a.grupo_riesgo = b.idcalific(+)
        and b.id_balan = c.idebalan(+)
        and a.FF000_VCC IS NOT NULL
        and TO_DATE(a.FF000_VCC,'YYYYMMDD') > ADD_MONTHS(TO_DATE(PN_FECPRO,'YYYYMMDD'),-36);

  COMMIT;

  VN_NUMERR:= 11;
-- NAV 27/11/2019

  DELETE  BAS_MEN.MAESTRO_MODELO_OFEX
     WHERE ROWID IN (
                      SELECT row_id
                        FROM (
                              SELECT MIN(b.ROWID) row_id, a.numofi, a.ctacli
                                FROM (
                                      SELECT numofi, ctacli, COUNT(*)
                                        FROM  BAS_MEN.MAESTRO_MODELO_OFEX
                                      GROUP BY numofi, ctacli HAVING COUNT(*)>1 )A
                                    , BAS_MEN.MAESTRO_MODELO_OFEX b
                               WHERE A.numofi = B.numofi
                                 AND A.ctacli = B.ctacli
                               GROUP BY a.numofi, a.ctacli
                              )
                    );

  commit;

  VN_NUMERR:= 12;
 --
 -- 201606 - 20160719 Tratamiento de Ratings recuperados de OFEX - NOTA: La tabla SAS se ha de borrar el día 1 de cada mes.
 --

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_RECUPERADOS_OFEX');

  INSERT INTO BAS_MEN.RATINGS_RECUPERADOS_OFEX
  SELECT * FROM DCRPROP_MENSUAL.RATINGS_RECUPERADOS_OFEX_SAS;

  COMMIT;

  delete BAS_MEN.MAESTRO_MODELO_OFEX
  where (NUMOFI, ctacli) in (select NUMOFI, CTACLI from BAS_MEN.RATINGS_RECUPERADOS_OFEX);

  commit;

  VN_NUMERR:= 13;

  INSERT
    INTO BAS_MEN.MAESTRO_MODELO_OFEX
        ( NUMOFI, CTACLI, FEC_CAL,RAT_GBL, CODMODELO, MOD_AJUS_SMA, IDCALIFIC, ESTADO, COD_CNAE, PATHO_VFC, SITUACION
        , SEC_TOR2, IMPFACT, NUM_EMPLE, ACTIVO, ACTIVO_CIR, VENTAS_CONSOL, EXISTENCIAS, GRUPO_CONSOL,
        NUMPERREL, IDCALGRU, CODMODGRU, SMA_CAL_REL, RAT_CAL_REL, RATIND, PES_APLI_GR, RAT_AJU_GBL
        , FF000_VCC /* 20/08/2021 RMR */
        )
  SELECT NUMOFI, CTACLI, FEC_CAL,RAT_GBL, CODMODELO, MOD_AJUS_SMA, IDCALIFIC, ESTADO, COD_CNAE, PATHO_VFC, SITUACION
       , SEC_TOR2, IMPFACT*1000, NUM_EMPLE, ACTIVO*1000, ACTIVO_CIR*1000, VENTAS_CONSOL*1000, EXISTENCIAS*1000, GRUPO_CONSOL,
       NUMPERREL, IDCALGRU, CODMODGRU, SMA_CAL_REL, RAT_CAL_REL, RATIND, PES_APLI_GR, RAT_AJU_GBL
       , FF000_VCC /* 20/08/2021 RMR */
    FROM BAS_MEN.RATINGS_RECUPERADOS_OFEX;

  COMMIT;

  VN_NUMERR:= 15;

-------------------------------------------------------
-- CARGA MAESTRO_SUCEPT_OFEX
-- los datos se obtienen a partir de BASILEA
-- filtrando los segmentos de empresas
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUCEPT_OFEX');

  INSERT /*+ parallel (b 8) */ INTO BAS_MEN.MAESTRO_SUCEPT_OFEX  b
     SELECT /*+ parallel (a 8) */ OR_IDREG, OR_TIPIDE, OR_NIFCIF, OR_PERSON, OR_PROCED, OR_IDCNAE, OR_SEGRIE, OR_DISPTO, OR_DISBLE,
            OR_AVALES, OR_FUTURS, OR_REPOS, OR_IDPERS, OR_REFOPE, OR_TITULARITAT, OR_FECOPE, OR_TIPOPE, IN_SEGMBS,
            0, IN_SEGMBS0,  OR_SITUAC0, IN_SRATIN, OR_TITULARITAT IN_TITULFIN, '?', OR_SEGGES,
            OR_TIPIDEIBM, OR_CLAVISO, OR_FECALTBLO, OR_NUMOFI, IN_VTAGRU, IN_SEGMBSINI, OR_PUNT0,  IN_SEGMBS2,
            OR_INDHOLDING, FI_TIPEXP, OR_NOMPER, OR_CODPRODO, 0, '?', OR_CTACLI, IN_INDMOR, 0, or_epiind, IN_PYME, OR_MODRAT0, OR_SEGFIC, OR_SEGFAC,
            OR_AJUVAL, IN_VTAGRU_CONS, IN_ACTIVO, OR_TIPGAR, OR_TIPAVA, IN_FAIRVABO, OR_FAIRVA, OR_CTAIND, OR_VIDINI, OR_VIDRES, OR_CLUNICUENT,
            or_entity,in_tiporeg, FI_EPICON
            , OR_RATINT, OR_FECPUN0, IN_IDCALIFIC, IN_NUMEMP, IN_ACTIVO_CIR, IN_EXISTENCIAS, IN_GRUP_IDPER, IN_NIFGRUPCON, OR_PESOW, OR_PUNTGRUP
            , IN_ACTIVO_CONS, IN_NUMEMP_CONS, OR_MODGRUP /* 26/02/2020 RMR Añadido campo de modelo de grupo */
       FROM BAS_MEN.BASILEA a
          , (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where OR_IDMES = PV_FECHA) acc
          , (select nvl(min(idreg_new),100000000) idreg_new from BAS_MEN.MAESTRO_TITUL_BS_AUX    where OR_IDMES = PV_FECHA) titu
      WHERE a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'STSORI')   /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
        AND a.or_idreg <> acc.idreg_new   /* RMR 15/04/2020 */
        AND a.or_idreg <> titu.idreg_new  /* NAV 02/07/2020 */
        AND IN_SEGMBSINI IN ('002', '003','005','006','009','010', '017', '019','027','101', '102' )
        AND IN_TIPOREG IN ('RX', 'OX', 'OXE', 'MMOX', 'MMOXE');

  COMMIT;

  VN_NUMERR:= 20;

  -- ASIGNACION DE RATINGS Y ENRIQUECIMIENTO DE OFEX --
  FOR CUR IN BASILEA LOOP

      VN_NUMERR:= 21;
      VN_COUNT:= VN_COUNT + 1;
      VV_ROWID:= TO_CHAR(CUR.OR_IDREG);

      VN_FEC_CAL        := 9999;
      VN_RAT_GBL        := 99;
      VV_CODMODELO      := '?';
      VV_VENTAS         := 99;
      VN_MOD_AJUS_SMA   := 9999;
      VN_IDFCALIFIC     := 0;
      VV_OR_SITUAC      := '?';
      VV_TROBAT         := 'NO';
      VV_OR_SEGRIE      := '?';
      VV_PESOW          := 0;
      VV_PUNT_GR        := 9999;
      VV_NUM_EMP        := 0;
      VV_ACTIVO         := 0;
      VV_ACTIVO_CIR     := 0;
      VV_VENTAS_CONSOL  := 99;
      VV_EXISTENCIAS    := 99;
      VV_ACTIVO_CONS    := 0;
      VV_NUM_EMP_CON    := 0;
      VV_GRUPO_CONSOL   := '?';
      VV_CNAE           := CUR.OR_IDCNAE;
      VV_HOLDING        := CUR.OR_INDHOLDING;
      VV_SEGMBS2        := '?';
      VV_CODMODELO_AUX  := '?';
      VV_SEGMENTO       := '?';
      VV_PERSON         := cur.or_person;
      VV_SEGGES         := cur.or_segges;
      VV_TIPIDE         := CUR.OR_TIPIDE;
      VV_OR_MODGRUP     := cur.OR_MODGRUP; /* 26/02/2020 RMR Añadido campo de modelo de grupo */
      VV_FF000_VCC      := 0;              /* 20/08/2021 RMR Añadida fecha balance rating sibis*/
      vv_data_balance_ventas := 0;         /* 20/08/2021 RMR Añadida fecha balance de ventas*/

      BEGIN
         SELECT FEC_CAL, RAT_GBL, CODMODELO, NVL(IMPFACT,99) as Ventas, MOD_AJUS_SMA, IDCALIFIC, SITUACION, NVL(TO_CHAR(PATHO_VFC), CUR.OR_INDHOLDING),
                nvl(NUM_EMPLE, 0), nvl(ACTIVO, 0), nvl(ACTIVO_CIR,0), NVL(VENTAS_CONSOL,IMPFACT), NVL(EXISTENCIAS,99), GRUPO_CONSOL,
                NVL(COD_CNAE, CUR.OR_IDCNAE), 3, PES_APLI_GR, SMA_CAL_REL,
                nvl(ACTIVO, 0), nvl(NUM_EMPLE, 0), CODMODGRU, nvl(FF000_VCC,0)    /* 20/08/2021 RMR Añadida fecha balance rating sibis*/
           INTO VN_FEC_CAL, VN_RAT_GBL, VV_CODMODELO, VV_VENTAS, VN_MOD_AJUS_SMA, VN_IDFCALIFIC, VV_OR_SITUAC, VV_HOLDING,
                VV_NUM_EMP, VV_ACTIVO, VV_ACTIVO_CIR, VV_VENTAS_CONSOL, VV_EXISTENCIAS, VV_GRUPO_CONSOL, VV_CNAE, VV_SEGGES, VV_PESOW, VV_PUNT_GR,
                VV_ACTIVO_CONS, VV_NUM_EMP_CON, VV_OR_MODGRUP, VV_FF000_VCC  /* 20/08/2021 RMR Añadida fecha balance rating sibis*/
           FROM BAS_MEN.MAESTRO_MODELO_OFEX
          WHERE CTACLI = CUR.OR_CTACLI
            AND NUMOFI = CUR.OR_NUMOFI;

               VV_TROBAT := 'SI';
      EXCEPTION
           WHEN OTHERS THEN
                VV_TROBAT:= 'NO';
      END;

      VN_NUMERR:= 22;

      IF VV_TROBAT = 'SI' THEN
         IF CUR.OR_TIPIDE > 10 AND CUR.OR_TIPIDE <> 97 THEN
            VV_TIPIDE := CUR.OR_TIPIDE;
        ELSE
           VV_TIPIDE := 12;
        END IF;
      END IF;

      IF VV_VENTAS  = 0 THEN
         VV_SUBSEG := 0;
         VV_SEGFAC := 0;
      ELSIF VV_VENTAS  < 300000 THEN
            VV_SUBSEG := 1;
            VV_SEGFAC := 11;
      ELSIF VV_VENTAS  >= 300000 AND VV_VENTAS < 900000 THEN
            VV_SUBSEG := 1;
            VV_SEGFAC := 12;
      ELSIF VV_VENTAS >= 900000 AND VV_VENTAS < 6000000 THEN
            VV_SUBSEG := 2;
            VV_SEGFAC := 21;
      ELSIF VV_VENTAS  >= 6000000 AND VV_VENTAS < 30000000 THEN
            VV_SUBSEG := 3;
            VV_SEGFAC := 31;
      ELSIF VV_VENTAS  >= 30000000 AND VV_VENTAS < 100000000 THEN
            VV_SUBSEG := 4;
            VV_SEGFAC := 41;
      ELSIF VV_VENTAS  >= 100000000 THEN
            VV_SUBSEG := 5;
            VV_SEGFAC := 51;
      END IF;

      VN_NUMERR:= 23;

      BEGIN
        SELECT IN_SEGMBSINI
        INTO VV_SEGMENTO
        FROM BAS_MEN.MAESTRO_PERSONALIDADES
        WHERE OR_PERSON = CUR.OR_PERSON;
      END;

      IF VV_CODMODELO LIKE 'CA%' AND CUR.OR_PERSON NOT IN (831, 833, 816) THEN
         VV_PERSON := 833;
      ELSIF (VV_CODMODELO LIKE 'EM%' OR VV_CODMODELO LIKE 'PR%' OR VV_CODMODELO LIKE 'PA%')
        AND VV_SEGMENTO NOT IN ('003', '005', '006', '009', '010', '011', '019', '027') THEN
            VV_PERSON := 801;
      END IF;

      VN_NUMERR:= 24;

      IF VV_CODMODELO <> '?' THEN

      --Mapeamos el modelo de códigos no parametrizados en la PD. XCG, 1/08/08.
        VV_CODMODELO_AUX := VV_CODMODELO;

        BEGIN
           SELECT COD_MODELO
             INTO VV_CODMODELO
             FROM BAS_MEN.MAESTRO_MAPEO_MODELO
            WHERE MODELO = VV_CODMODELO_AUX;
        EXCEPTION
            WHEN OTHERS THEN
                 VV_CODMODELO :=  VV_CODMODELO_AUX;
        END;

        VN_NUMERR:= 25;

        BEGIN
           SELECT DESC_BREV
             INTO VV_OR_SEGRIE
             FROM BAS_MEN.MAESTRO_DETALLE_MODELOS
            WHERE CODMODELO = VV_CODMODELO;
        EXCEPTION
             WHEN OTHERS THEN
                  VV_TROBAT:= 'NO';
        END;

        VV_CODMODELO := VV_CODMODELO_AUX;

      END IF;

      VN_NUMERR:= 26;

      BEGIN
         SELECT '020'
           INTO VV_SEGMBS2
           FROM BAS_MEN.MAESTRO_CNAES_SECTOR
          WHERE SEGMENTO = 'PROMOTOR'
            AND CNAE93 = VV_CNAE;
      EXCEPTION
           WHEN OTHERS THEN
                VV_SEGMBS2 := '?';
      END;

      VN_NUMERR:= 30;

      IF CUR.IN_NIFGRUPCON = '?' THEN -- 31/10/2019 RMR - I - Se da prioridad al valor existente de grupoconsolidado en Basilea, sobre el encontrado en fichero

         BEGIN
            SELECT ventas_con, nvl(NUM_EMPLEADOS_CON, 0), nvl(ACTIVO_CON,0), VENTAS_IND, nvl(NUM_EMPLEADOS,0), nvl(ACTIVO_CIR,0), nvl(ACTIVO, 0), NVL(EXISTENCIAS,99)
              INTO VV_VENTAS_CONSOL, VV_NUM_EMP_CON, VV_ACTIVO_CONS, VV_VENTAS, VV_NUM_EMP, VV_ACTIVO_CIR, VV_ACTIVO, VV_EXISTENCIAS
              FROM bas_men.maestro_ventas
             WHERE cif_filial = VV_GRUPO_CONSOL;-- Como el grupo consolidado en Basilea no viene informado, usamos el del archivo.
         EXCEPTION
              WHEN OTHERS THEN
                   NULL;
         END;

      ELSE

         BEGIN
            SELECT ventas_con, nvl(NUM_EMPLEADOS_CON,0), nvl(ACTIVO_CON,0), VENTAS_IND, nvl(NUM_EMPLEADOS,0), nvl(ACTIVO_CIR,0), nvl(ACTIVO, 0), NVL(EXISTENCIAS,99)
              INTO VV_VENTAS_CONSOL, VV_NUM_EMP_CON, VV_ACTIVO_CONS, VV_VENTAS, VV_NUM_EMP, VV_ACTIVO_CIR, VV_ACTIVO, VV_EXISTENCIAS
              FROM bas_men.maestro_ventas
             WHERE cif_filial = CUR.IN_NIFGRUPCON;
         EXCEPTION
              WHEN OTHERS THEN
                   NULL;
         END;

        VV_GRUPO_CONSOL := CUR.IN_NIFGRUPCON;-- Como el grupo consolidado viene informado de Basilea, se mantiene.

      END IF; -- 31/10/2019 RMR - Fin

      VN_NUMERR:= 31;

      -- RMR, 20/08/2021. Se recupera la fecha de balance del maestro ventas si es válida
      BEGIN
         SELECT to_number(to_char(DATA_IND, 'YYYYMMDD'))
           INTO vv_data_balance_ventas
           FROM bas_men.maestro_ventas
          WHERE cif_filial = CUR.OR_NIFCIF
            and to_number(to_char(DATA_IND, 'YYYYMMDD')) <> 99990101;
      EXCEPTION
           WHEN OTHERS THEN
                vv_data_balance_ventas := 0;
      END;

      IF VV_VENTAS = 99 THEN
         VV_FF000_VCC := 0;
      END IF;

      VN_NUMERR:= 32;

  --06/02/2019 - nav - En lugar de actualizar estos campos en BASILEA actualizamos en la tabla MAESTRO_SUCEPT_OFEX

  --    UPDATE BAS_MEN.BASILEA
      UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX src
         SET OR_SEGRIE       = VV_OR_SEGRIE,
             OR_MODRAT0      = VV_CODMODELO,
             OR_RATINT       = VN_RAT_GBL,
             OR_PUNT0        = VN_MOD_AJUS_SMA,
             OR_FECPUN0      = VN_FEC_CAL,
             OR_SITUAC0      = VV_OR_SITUAC,
             IN_IDCALIFIC    = VN_IDFCALIFIC,

             /* 20/08/2021 RMR Actualizamos si es mas nuevo */
             IN_VTAGRU       = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_VENTAS        ELSE src.IN_VTAGRU END,
             IN_VTAGRU_CONS  = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_VENTAS_CONSOL ELSE src.IN_VTAGRU_CONS END,
             IN_NUMEMP       = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_NUM_EMP       ELSE src.IN_NUMEMP END,
             IN_ACTIVO       = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_ACTIVO        ELSE src.IN_ACTIVO END,
             IN_ACTIVO_CIR   = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_ACTIVO_CIR    ELSE src.IN_ACTIVO_CIR END,
             IN_EXISTENCIAS  = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_EXISTENCIAS   ELSE src.IN_EXISTENCIAS END,
           --IN_GRUP_IDPER   = CASE WHEN (IN_GRUP_IDPER IS NULL) THEN VV_GRUPO_CONSOL ELSE IN_GRUP_IDPER END,
             IN_GRUP_IDPER   = CASE WHEN (VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0) AND src.IN_GRUP_IDPER IS NULL THEN VV_GRUPO_CONSOL  ELSE src.IN_GRUP_IDPER END,
             IN_NIFGRUPCON   = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_GRUPO_CONSOL  ELSE src.IN_NIFGRUPCON END,
             OR_INDHOLDING   = VV_HOLDING,
             OR_TIPIDE       = VV_TIPIDE,
             OR_IDCNAE       = VV_CNAE,
             IN_TIPOREG      = 'OXE',
             OR_SEGGES       = VV_SEGGES,
             OR_SEGFAC       = VV_SEGFAC,
             IN_SEGMBS2      = VV_SEGMBS2,
             OR_PERSON       = VV_PERSON,
             OR_PESOW        = VV_PESOW,
             OR_PUNTGRUP     = VV_PUNT_GR,
           --IN_ACTIVO_CONS  = VV_ACTIVO_CONS,
           --IN_NUMEMP_CONS  = VV_NUM_EMP_CON,
             IN_ACTIVO_CONS  = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_ACTIVO_CONS   ELSE src.IN_ACTIVO_CONS END,
             IN_NUMEMP_CONS  = CASE WHEN VV_FF000_VCC > vv_data_balance_ventas OR vv_data_balance_ventas = 0 THEN VV_NUM_EMP_CON   ELSE src.IN_NUMEMP_CONS END,
             OR_MODGRUP      = VV_OR_MODGRUP    /* 26/02/2020 RMR Añadido campo de modelo de grupo */
       WHERE src.OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 40;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_NOSUSCEPT_OFEX');

  INSERT INTO BAS_MEN.MAESTRO_NOSUSCEPT_OFEX
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_NOSUSCEPT_OFEX_SAS;

  COMMIT;


  VN_NUMERR:= 41;

-------------------------------------------------------
-- LOOP BASILEA2
-- Calculo FI_EDAIRB
-------------------------------------------------------

  FOR CUR IN BASILEA2 LOOP

    VN_NUMERR:= 42;
    VV_FI_EXCEDID:= 'NO';
    VN_COUNT:= VN_COUNT + 1;

     BAS_MEN.FNC_CALCUL_CCF('AIRB',
                               PN_OPC_DER,
                               PN_F,
                               UPPER(CUR.IN_SEGMBS),
                               UPPER(CUR.FI_TIPEXP),
                               UPPER(CUR.OR_PROCED),
                               UPPER(CUR.OR_TIPOPE),
                               CUR.OR_VIDINI,
                               CUR.OR_VIDRES,
                               CUR.OR_CLUNICUENT,
                               'NO',
                               CUR.OR_TIPAVA,
                               CUR.IN_SEGMBSINI,
                               CUR.OR_EPIIND,
                               CUR.FI_EPICON,
                               CUR.IN_SEGMBS0,
                               VV_FI_EXCEDID,
                               CUR.OR_CTAIND,
                               0,
                               CUR.OR_TIPGAR,
                               CUR.OR_ENTITY,
                               CUR.IN_SUCEPT,
                               CUR.IN_TIPOREG,
                               NULL, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                               NULL,
                               NULL,
                               VN_FI_CCFAIRB,
                               PV_RET);

        VN_NUMERR:= 43;

        VN_FI_EADAIRB:= CUR.TOTAL * VN_FI_CCFAIRB;
/* 16/12/2020 - INI */
--      IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,VN_FI_EADAIRB + CUR.OR_FAIRVA);
--      ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.OR_EPIIND,1,5) NOT IN ('02002','02003','02004') THEN
--         VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0,CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
--      END IF;

        IF UPPER(CUR.FI_TIPEXP) = 'OTC' THEN
           VN_FI_EADAIRB:= VN_FI_EADAIRB + BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '01' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.OR_FAIRVA - CUR.IN_FAIRVABO);
        ELSIF UPPER(CUR.FI_TIPEXP) = 'REPOS' AND SUBSTR(CUR.FI_EPICON,1,2) = '02' THEN
           VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, CUR.IN_FAIRVABO - CUR.OR_FAIRVA);
        END IF;
/* 16/12/2020 - FIN */

        IF UPPER(CUR.IN_INDMOR) = 'SI' THEN
             VN_FI_EADAIRB:= CUR.TOTAL;
        END IF;

        VN_NUMERR:= 44;

        UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
           SET FI_EADAIRB =   VN_FI_EADAIRB
         WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 50;

-------------------------------------------------------
-- CARGA MAESTRO_TOTAL_CONCEDIDO_OFEX
-- Tabla que contiene el total concedido por titularidad
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_OFEX
     SELECT OR_CTACLI, OR_NUMOFI, MAX(OR_FECOPE) FECOPE,
            SUM(OR_DISPTO+OR_DISBLE+OR_AVALES+DECODE(OR_REPOS,0,0,A.FI_EADAIRB)+DECODE(OR_FUTURS,0,0,A.FI_EADAIRB)) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX A
      WHERE  A.OR_CODPRODO NOT IN('FA 00013', 'FA 00014', 'FA 00009'
                               , 'FA 00010', 'FA 00011', 'FA 00012') -- @RMC 20090930: FACTORING CON COBERTURA NO TIENEN RIESGO
      GROUP BY OR_CTACLI, OR_NUMOFI;

  COMMIT;

  VN_NUMERR:= 51;

-------------------------------------------------------
-- CARGA MAESTRO_AJUSTES_OFEX
-- Tabla que identifica aquellas titularidades que exclusivamente son Ajustes
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_AJUSTES_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_AJUSTES_OFEX
      SELECT A.OR_CTACLI, A.OR_NUMOFI, 'EMAJUS' ORIGEN
       FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE FI_TIPEXP = 'Ajustes') A,
            (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE FI_TIPEXP <> 'Ajustes') B
      WHERE A.OR_CTACLI = B.OR_CTACLI(+)
        AND A.OR_NUMOFI = B.OR_NUMOFI(+)
        AND B.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 52;

-------------------------------------------------------
-- CARGA MAESTRO_PROCED_NOSUSCEPT_OFEX
-- Identificación de las titularidades que solamente tienen procedencias no susceptibles
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_NOSUSCEPT_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_NOSUSCEPT_OFEX
  SELECT DISTINCT A.OR_CTACLI, A.OR_NUMOFI, 'EMPROC'
            FROM (SELECT DISTINCT A.OR_CTACLI, A.OR_NUMOFI
                    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX A
                   WHERE A.FI_TIPEXP <> 'Ajustes'
                     AND (SUBSTR(OR_EPIIND,1,5) IN ('01006', '01012', '01002', '01005')
                      OR OR_TIPOPE IN ('IP', 'AA', 'AD', 'OT', 'RF', 'RV', 'SS', 'OV'))) A, /* 201512 Se añaden las 'OV' por arranque aplicaciones BDU */
                 (SELECT DISTINCT A.OR_CTACLI, A.OR_NUMOFI
                    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX A
                   WHERE A.FI_TIPEXP <> 'Ajustes'
                     AND NOT SUBSTR(OR_EPIIND,1,5) IN ('01006', '01012', '01002', '01005')
                     AND NOT OR_TIPOPE  IN ('IP', 'AA', 'AD', 'OT', 'RF', 'RV', 'SS', 'OV')) B   /* 201512 Se añaden las 'OV' por arranque aplicaciones BDU  --@XCG 201012: No se tienen en cuenta para marcarse como emproc.*/
            WHERE A.OR_CTACLI = B.OR_CTACLI(+)
              AND A.OR_NUMOFI = B.OR_NUMOFI(+)
              AND B.OR_CTACLI IS NULL;

   COMMIT;

  VN_NUMERR:= 53;

-------------------------------------------------------
-- CARGA MAESTRO_PROCED_OFEX
-- Identificación de la procedencia de la titularidad
-- Tabla que identifica aquellas titularidades que exclusivamente son
-- avales, tarjetas, tipope o una combinación de tarjetas, avales , factoring y descubiertos
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_OFEX');

   --tarjetas
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_OFEX
     SELECT A.OR_CTACLI, A.OR_NUMOFI, 'TARGES'
       FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE IN_SEGMBS <> 'Project Finance'
                AND FI_TIPEXP <> 'Ajustes'
                --AND OR_TIPOPE = 'TC' ) A,
                AND OR_TIPOPE IN ('TC','TA' )) A,   --11/08/202 PP -HDEV-187624
            (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE FI_TIPEXP <> 'Ajustes'
                and IN_SEGMBS <> 'Project Finance'
               -- AND OR_TIPOPE != 'TC') B
                AND OR_TIPOPE NOT IN ('TC','TA')) B --11/08/202 PP -HDEV-187624
      WHERE A.OR_CTACLI = B.OR_CTACLI(+)
        AND A.OR_NUMOFI = B.OR_NUMOFI(+)
        AND B.OR_CTACLI IS NULL;

  COMMIT;

--avales
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_OFEX
     SELECT A.OR_CTACLI, A.OR_NUMOFI, 'AVALES'
       FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE IN_SEGMBS <> 'Project Finance'
                AND FI_TIPEXP <> 'Ajustes'
                AND OR_TIPOPE IN ('AF','AT')) A,
            (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE FI_TIPEXP <> 'Ajustes'
                AND IN_SEGMBS <> 'Project Finance'
                AND OR_TIPOPE NOT IN ('AF','AT')) B
      WHERE A.OR_CTACLI = B.OR_CTACLI(+)
        AND A.OR_NUMOFI = B.OR_NUMOFI(+)
        AND B.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 54;

--se identifican los factoring para que así no se traten mas adelante como riesgo diverson
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_OFEX
     SELECT A.OR_CTACLI, A.OR_NUMOFI, 'FACT'
               FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
                       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
                      WHERE  IN_SEGMBS <> 'Project Finance'
                        AND FI_TIPEXP <> 'Ajustes'
                        AND in_segmbs   = 'Derechos Cobro') A,
                    (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
                       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND FI_TIPEXP <> 'Ajustes'
                        AND in_segmbs <> 'Derechos Cobro') B
              WHERE A.OR_CTACLI = B.OR_CTACLI(+)
                AND A.OR_NUMOFI = B.OR_NUMOFI(+)
                AND B.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 55;

--se identifican los descubiertos para que así no se traten mas adelante como riesgo diverson
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_OFEX
   SELECT A.OR_CTACLI, A.OR_NUMOFI, 'DESCUBIERT'
     FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
             FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
            WHERE  IN_SEGMBS <> 'Project Finance'
              AND FI_TIPEXP <> 'Ajustes'
              AND OR_TIPOPE = 'DC') A,
          (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
             FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
            WHERE IN_SEGMBS <> 'Project Finance'
              AND FI_TIPEXP <> 'Ajustes'
              AND OR_TIPOPE <> 'DC') B
    WHERE A.OR_CTACLI = B.OR_CTACLI(+)
      AND A.OR_NUMOFI = B.OR_NUMOFI(+)
      AND B.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 56;

--Se introducen registros que combinan TARGETAS/AVALES/FACTORING SIN RECURSO 5/11/07.

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_OFEX
  SELECT C.*
      FROM (SELECT A.OR_CTACLI, A.OR_NUMOFI, 'TA-AV-FA'
              FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI   -- RECOGE TAJETAS, AVALES , FACTORING O DESCUBIERTOS
                       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND FI_TIPEXP <> 'Ajustes'
                        --AND (OR_TIPOPE IN ('AF','AT','TC')  --AVALES
                        AND (OR_TIPOPE IN ('AF','AT','TA','TC')  --AVALE --11/08/202 PP - HDEV-187624
                         OR in_segmbs   = 'Derechos Cobro' --FACTORING
                         OR OR_TIPOPE = 'DC')) A,
                    (SELECT DISTINCT OR_CTACLI, OR_NUMOFI   -- RECOGE LOS QUE NO TIENEN NI TARJETAS NI FACTORING NI AVALES NI DSCUBIERTOS
                       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND FI_TIPEXP <> 'Ajustes'
                       -- AND NOT OR_TIPOPE IN ('AF','AT','TC')   --AVALES
                        AND NOT OR_TIPOPE IN ('AF','AT','TA','TC')   --AVALES --11/08/202 PP - HDEV-187624
                        AND NOT IN_SEGMBS = 'Derechos Cobro' --FACTORING
                        AND NOT OR_TIPOPE = 'DC') B
               WHERE A.OR_CTACLI = B.OR_CTACLI(+)
                 AND A.OR_NUMOFI = B.OR_NUMOFI(+)
                 AND B.OR_CTACLI IS NULL) C,
            BAS_MEN.MAESTRO_PROCED_OFEX D,
            BAS_MEN.SOLO_FSR_OFEX E
      WHERE C.OR_CTACLI = D.OR_CTACLI(+)
        AND C.OR_NUMOFI = D.OR_NUMOFI(+)
        AND C.OR_CTACLI = E.OR_CTACLI(+)
        AND C.OR_NUMOFI = E.OR_NUMOFI(+)
        AND D.OR_CTACLI IS NULL
        AND E.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 60;

-- Se introducen registros solamente tienen un tipope '?' y su procedencia no es susceptible. 9/11/07.
-- se consulta el BAS_MEN.MAESTRO_PROCED_TIPOPE para identificar las no suceptibles
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE_OFEX');

  COMMIT;

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE_OFEX
     SELECT C.*
       FROM (SELECT A.OR_CTACLI, A.OR_NUMOFI, 'TIPOPE_INT'
               FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
                       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND FI_TIPEXP <> 'Ajustes'
                        AND OR_TIPOPE = '?') A,
                    (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
                       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND FI_TIPEXP <> 'Ajustes'
                        AND OR_TIPOPE <> '?') B
               WHERE A.OR_CTACLI = B.OR_CTACLI(+)
                 AND A.OR_NUMOFI = B.OR_NUMOFI(+)
                 AND B.OR_CTACLI IS NULL) C,
            (SELECT * FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN NOT IN('TA-AV-FA', 'DESCUBIERT')) D
      WHERE C.OR_CTACLI = D.OR_CTACLI(+)
        AND C.OR_NUMOFI = D.OR_NUMOFI(+)
        AND D.OR_CTACLI IS NULL;

  COMMIT;
  VN_NUMERR:= 61;

/*se identifican las titularidades con tipope   ('?','AA','AD','DC','IP','LI','OT','RF','RV','SS','TC') -- 201512 Se añaden las 'OV' por arranque aplicaciones BDU
--@RMC Modificacion 30-09-2009: Se eliminan del filtro las operacion con TIPOPE TC o DC*/
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE_OFEX
     SELECT C.*
       FROM (SELECT A.OR_CTACLI, A.OR_NUMOFI, 'TIPOPE'
               FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
                       FROM (select * from BAS_MEN.MAESTRO_SUCEPT_OFEX   where FI_TIPEXP <> 'Ajustes')
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE IN ('?','AA','AD','IP',/*'LI',*/'OT','RF','RV','SS'/*,'TC','DC'*/, 'OV')) A,  /* 201512 Se añaden las 'OV' por arranque aplicaciones BDU  /*@RMC 201012: LI se considera susceptible */
                    (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
                       FROM (select * from BAS_MEN.MAESTRO_SUCEPT_OFEX   where FI_TIPEXP <> 'Ajustes')
                      WHERE IN_SEGMBS <> 'Project Finance'
                        AND OR_TIPOPE NOT IN ('?','AA','AD','IP','OT','RF','RV','SS', 'OV')) B /* 201512 Se añaden las 'OV' por arranque aplicaciones BDU  /*@RMC 201012: LI se considera susceptible */
              WHERE A.OR_CTACLI = B.OR_CTACLI(+)
                AND A.OR_NUMOFI = B.OR_NUMOFI(+)
                AND B.OR_CTACLI IS NULL) C,
            (SELECT * FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN NOT IN('TA-AV-FA', 'DESCUBIERT')) D
      WHERE C.OR_CTACLI = D.OR_CTACLI(+)
        AND C.OR_NUMOFI = D.OR_NUMOFI(+)
        AND D.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 62;

-- Descubiertos
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_DESCUB_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_DESCUB_OFEX
     SELECT A.OR_CTACLI, A.OR_NUMOFI, 'DESCUBIERTOS'
       FROM (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE IN_SEGMBS <> 'Project Finance'
                AND FI_TIPEXP <> 'Ajustes'
                AND OR_TIPOPE = 'DC') A,
            (SELECT DISTINCT OR_CTACLI, OR_NUMOFI
               FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
              WHERE IN_SEGMBS <> 'Project Finance'
                AND FI_TIPEXP <> 'Ajustes'
                AND OR_TIPOPE <> 'DC') B
      WHERE A.OR_CTACLI = B.OR_CTACLI(+)
        AND A.OR_NUMOFI = B.OR_NUMOFI(+)
        AND B.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 63;

-- AVALES CON EOPERACIONES ANTERIORES AL AÑO 2001
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_AVA_OLD_OFEX');
  COMMIT;

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_AVA_OLD_OFEX
  SELECT DISTINCT A.*, 'AVALES_OLD'
    FROM (SELECT pr.OR_CTACLI, pr.OR_NUMOFI
            FROM BAS_MEN.MAESTRO_PROCED_OFEX PR
               , BAS_MEN.MAESTRO_SUCEPT_OFEX SU
           WHERE PR.OR_CTACLI = SU.OR_CTACLI
             AND PR.OR_NUMOFI = SU.OR_NUMOFI
             AND SU.FI_TIPEXP <> 'Ajustes'
             AND SU.IN_SEGMBS <> 'Project Finance'
             AND PR.ORIGEN = 'AVALES'
             AND SU.OR_FECOPE<20010101) A,
         (SELECT pr.OR_CTACLI, pr.OR_NUMOFI
            FROM BAS_MEN.MAESTRO_PROCED_OFEX PR
               , BAS_MEN.MAESTRO_SUCEPT_OFEX SU
           WHERE PR.OR_CTACLI = SU.OR_CTACLI
             AND PR.OR_NUMOFI = SU.OR_NUMOFI
             AND SU.FI_TIPEXP <> 'Ajustes'
             AND SU.IN_SEGMBS <> 'Project Finance'
             AND PR.ORIGEN = 'AVALES'
             AND SU.OR_FECOPE>=20010101) B
   WHERE A.OR_CTACLI = B.OR_CTACLI(+)
     AND A.OR_NUMOFI = B.OR_NUMOFI(+)
     AND B.OR_CTACLI IS NULL;

  COMMIT;

  VN_NUMERR:= 64;

-- IDENTIFICA LAS TITULARIDADES CON OPERACIONES PR-MOROS
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROCED_MOROSOS_OFEX');
  COMMIT;

  /* XCG 201104: Si parte de la titularidad tiene procedencia morosos */
  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROCED_MOROSOS_OFEX
  SELECT DISTINCT A.OR_CTACLI, A.OR_NUMOFI, 'PR-MOROS'
    from (select OR_CTACLI, OR_NUMOFI
            FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
           WHERE FI_TIPEXP <> 'Ajustes'
             AND IN_INDMOR in ('SI', 'CT')) A;

  COMMIT;

  VN_NUMERR:= 70;

-------------------------------------------------------
-- CARGA MAESTRO_TOT_CONCED_AVALES_OFEX
-- Tabla que contiene el total concedido de los avales >=2001 de titularidades que solamente son avales
-- VJB-ACC 080110
-------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOT_CONCED_AVALES_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOT_CONCED_AVALES_OFEX
     SELECT A.OR_CTACLI, A.OR_NUMOFI, MAX(A.OR_FECOPE) FECOPE, SUM(OR_AVALES) TOT_CONCED
       FROM BAS_MEN.MAESTRO_SUCEPT_OFEX   A,
            BAS_MEN.MAESTRO_PROCED_OFEX B
      WHERE A.OR_CTACLI=B.OR_CTACLI
        AND A.OR_NUMOFI=B.OR_NUMOFI
        AND B.ORIGEN='AVALES'
      GROUP BY A.OR_CTACLI, A.OR_NUMOFI;

  COMMIT;

  VN_NUMERR:= 71;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TOT_CONC_AVA_DIVR_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_TOT_CONC_AVA_DIVR_OFEX
  SELECT OR_CTACLI, OR_NUMOFI, SUM(OR_AVALES) TOT_AVALES
    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
   WHERE OR_CTACLI IN(SELECT OR_CTACLI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND OR_NUMOFI IN(SELECT OR_NUMOFI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND FI_TIPEXP <> 'Ajustes'
     AND IN_SEGMBS <> 'Project Finance'
     AND (OR_TIPOPE IN ('AF','AT'))
  GROUP BY OR_CTACLI, OR_NUMOFI;

  COMMIT;

  VN_NUMERR:= 72;

  -----------------------------------------------------------------------------------------------
  -- CARGA MAESTR_TOT_CONC_TARG_DIVR_OFEX TITULARIDADES RIESGO DIVERSO
  -----------------------------------------------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTR_TOT_CONC_TARG_DIVR_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTR_TOT_CONC_TARG_DIVR_OFEX
  SELECT OR_CTACLI, OR_NUMOFI, SUM(OR_DISPTO + OR_DISBLE) TOT_CONC
    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
   WHERE OR_CTACLI IN(SELECT OR_CTACLI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND OR_NUMOFI IN(SELECT OR_NUMOFI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND FI_TIPEXP <> 'Ajustes'
     AND IN_SEGMBS <> 'Project Finance'
     --AND (OR_TIPOPE = 'TC')
     AND (OR_TIPOPE IN ('TA','TC')) --11/08/202 PP - HDEV-187624
   GROUP BY OR_CTACLI, OR_NUMOFI;

   COMMIT;

  VN_NUMERR:= 73;
  -------------------------------------------------------------
  -- CARGA MAESTRO AVALES POSTERIORES 2001 PERTANECIENTE TITULARIDADES RIESGO DIVERSO
  -------------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROC_AV_POST_DIVR_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROC_AV_POST_DIVR_OFEX
  SELECT OR_CTACLI, OR_NUMOFI, COUNT(*) NUM_AVALES
    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
   WHERE OR_CTACLI IN(SELECT OR_CTACLI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND OR_NUMOFI IN(SELECT OR_NUMOFI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND FI_TIPEXP <> 'Ajustes'
     AND IN_SEGMBS <> 'Project Finance'
     AND (OR_TIPOPE IN ('AF','AT'))
     AND OR_FECOPE >= 20010101
  GROUP BY OR_CTACLI, OR_NUMOFI;

  COMMIT;

  -------------------------------------------------------------
  -- CARGA MAESTRO TARGETAS PERTANECIENTE TITULARIDADES RIESGO DIVERSO
  -------------------------------------------------------------
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROC_TARGES_DIVR_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROC_TARGES_DIVR_OFEX
  SELECT OR_CTACLI, OR_NUMOFI, OR_SEGGES
    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
   WHERE OR_CTACLI IN(SELECT OR_CTACLI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND OR_NUMOFI IN(SELECT OR_NUMOFI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND FI_TIPEXP <> 'Ajustes'
     AND IN_SEGMBS <> 'Project Finance'
     --AND (OR_TIPOPE = 'TC')
     AND (OR_TIPOPE IN ('TC','TA')) --11/08/202 PP - HDEV-187624
   GROUP BY OR_CTACLI, OR_NUMOFI, OR_SEGGES;

   COMMIT;

  -------------------------------------------------------------
  -- CARGA MAESTRO DESCUBIERTOS PERTANECIENTE TITULARIDADES RIESGO DIVERSO --- MODIFICACIÓN : 26/03/09
  -------------------------------------------------------------
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PROC_DESCUB_DIVR_OFEX');

  INSERT /*+ APPEND */ INTO BAS_MEN.MAESTRO_PROC_DESCUB_DIVR_OFEX
  SELECT OR_CTACLI, OR_NUMOFI, 'DESCUBIERTOS'
    FROM BAS_MEN.MAESTRO_SUCEPT_OFEX
   WHERE OR_CTACLI IN(SELECT OR_CTACLI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND OR_NUMOFI IN(SELECT OR_NUMOFI FROM BAS_MEN.MAESTRO_PROCED_OFEX WHERE ORIGEN ='TA-AV-FA')
     AND FI_TIPEXP <> 'Ajustes'
     AND IN_SEGMBS <> 'Project Finance'
     AND OR_TIPOPE = 'DC'
   GROUP BY OR_CTACLI, OR_NUMOFI, 'DESCUBIERTOS';

   COMMIT;

  VN_NUMERR:= 75;

  VN_COUNT:=0;
-------------------------------------------------------
-- LOOP BASILEA
-- realiza el tratamiento de los no susceptibles para registros con titularidad <> 0,9
-------------------------------------------------------
  FOR CUR IN BASILEA1 LOOP
     VN_NUMERR:= 80;
     VN_COUNT:= VN_COUNT + 1;
     VV_ROWID:= TO_CHAR(CUR.OR_IDREG);
     VV_SUCEPT:= '?';
     VN_TOT_CONCED_AVALES:=0;
     VV_SUCEPT_DF := '?';
     VV_CONCED_DF := 0;
     VV_CONCED    := 0;
     VN_TOT_CONCED := 0;
     VV_COMENTARIO := '?';
     VV_OR_SEGFIC := '?';
     VV_ACTIVO := CUR.IN_ACTIVO;
     VV_ACTIVO_CONS := cur.IN_ACTIVO_CONS;
     VV_VENTAS:= CUR.IN_VTAGRU;
     VV_VENTAS_CONSOL := CUR.IN_VTAGRU_CONS;

     -- REAL ESTATE: Tratamiento Real Estate
     IF VV_SUCEPT ='?' AND CUR.IN_SEGMBS0 = '203' THEN
        VV_SUCEPT:= 'FERENS';
     END IF;

     -- OBJECT_FINANCE: Tratamiento Object_Finance
     IF VV_SUCEPT ='?' AND CUR.IN_SEGMBS0 = '204' THEN
        VV_SUCEPT:= 'FEOFNS';
     END IF;


     --AJUSTES: Tratamiento Ajustes:
     IF VV_SUCEPT ='?' THEN
        BEGIN
           SELECT 'EMAJUS'
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_AJUSTES_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
            AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

     VN_NUMERR:= 81;

--PERSONALIDAD: Tratamiento No Susceptibles por personalidad
     IF VV_SUCEPT = '?' THEN
        BEGIN
           SELECT DISTINCT 'EM'||MOTIU
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_PERSONALIDAD_NOSUCEPT /*Se consulta y extrae EMSUCP del MAESTRO_PERSONALIDAD_NOSUCEPT para identificar aquellas personalidades no susceptibles*/
            WHERE PERSONALIDAD = CUR.OR_PERSON
              AND MOTIU IS NOT NULL;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

/*FACTORING SIN RECURSO CLIENTE Y CONCEDIDO<1800: Tratamiento para Factoring con titular de cuenta vista (clientes) y concedido<1800E*/
/*FACTORING SIN RECURSO NO CLIENTE: Tratamiento para Factoring NO titular de cuenta vista (No clientes)*/
     IF VV_SUCEPT = '?'  THEN
        /*@RMC 14/11/2008: EMFANC1 : No susceptible por ser No cliente de Factoring Sin Recurso con menos o igual a 1800 euros, o promotores o no residentes*/
        /*                           o cuyo OR_NIFCIF empiece por 777 o cuya personalidad sea de UTE (OR_PERSON='805') o de Multititularidad..*/
        /*                 NCSUCP :  Susceptible por ser No cliente de Factoring Sin Recurso con más   de 1800 euros , que no sean promotores y sean residentes.*/
        IF VV_SUCEPT_DF = 'EMFANC' THEN
           IF (   VV_CONCED_DF <= 1800
               OR CUR.IN_SEGMBS2= '020'
               OR CUR.OR_TIPIDE in(12,10) --@RMC 20100331: Se añade el 10 como TIPIDE externo
               OR CUR.OR_PERSON ='805'
               OR CUR.IN_SEGMBSINI = '019'
               OR SUBSTR(CUR.OR_NIFCIF,1,3)='777' ) THEN

              VV_SUCEPT := 'NCFANC1';

           ELSIF VV_CONCED_DF > 1800
             AND CUR.IN_SEGMBS2 <> '020'
             AND CUR.OR_TIPIDE in(11) THEN

              VV_SUCEPT := 'NCSUCP';
           END IF;
        ELSIF VV_SUCEPT_DF = 'EMFACL' AND CUR.OR_PROCED <> 'FORFAITING' THEN
          VV_SUCEPT := VV_SUCEPT_DF;
        END IF;

     END IF;

     VN_NUMERR:= 82;


--IDENTIFICACIÓN DE LA PROCEDENCIA: Se identifica la procedencia por titularidad mediante el MAESTRO_PROCED_OFEX
     IF VV_SUCEPT = '?' THEN
        VV_ORIG:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
            AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG:= '?';
        END;

        VV_ORIG_TIPOPE:= '?';
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG_TIPOPE
             FROM BAS_MEN.MAESTRO_PROCED_SUS_TIPOPE_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
              AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG_TIPOPE:= '?';
        END;

        VN_NUMERR:= 83;

--TOTAL CONCEDIDO: Se busca el total concedido del MAESTRO_TOTAL_CONCEDIDO_OFEX
        BEGIN
           SELECT TOT_CONCED, SUBSTR(OR_FECOPE,1,4)
             INTO VN_TOT_CONCED, VN_FECOPE
             FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
              AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;

--TOTAL CONCEDIDO AVALES: VJB-ACC 10/01/'08 Si es un Aval se busca el total concedido del MAESTRO_TOT_CONCED_AVALES_OFEX
        IF VV_ORIG = 'AVALES' THEN
          BEGIN
             SELECT TOT_CONCED
               INTO VN_TOT_CONCED_AVALES
               FROM BAS_MEN.MAESTRO_TOT_CONCED_AVALES_OFEX
              WHERE OR_CTACLI = CUR.OR_CTACLI
                AND OR_NUMOFI = CUR.OR_NUMOFI;
          EXCEPTION
           WHEN OTHERS THEN
              VN_TOT_CONCED_AVALES:= 0;
          END;
        END IF;

        VN_NUMERR:= 84;

--CONCEDIDO>=30.000: Tratamiento susceptibles por total concedido>=30.000E
        IF VN_TOT_CONCED >= 30000 AND VV_ORIG_TIPOPE NOT IN ('TIPOPE','TIPOPE_INT') THEN
           VV_SUCEPT:= 'EMSUCP';
        END IF;

--Avales con concedido superior a 30.000 euros pero que son todos anteriores a 2001
-----------------------------------------------------------------------------------
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG_AVA_OLD
             FROM BAS_MEN.MAESTRO_PROCED_AVA_OLD_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
              AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG_AVA_OLD:= '?';
        END;

        IF VV_ORIG_AVA_OLD = 'AVALES_OLD' /*AND VN_TOT_CON_DIS >= 30000*/ THEN
            VV_SUCEPT := 'EMAVAL';
        END IF;

     END IF;

     VN_NUMERR:= 85;

--TARJETAS: Tratamiento Tarjetas: Según el límite seran susceptibles o no
     IF VV_SUCEPT = '?' THEN
        IF VV_ORIG = 'TARGES' THEN
           VN_LIMIT:= 10000;
           IF CUR.OR_SEGGES = 0 THEN
              IF CUR.IN_PYME = 'S' THEN
                 VN_LIMIT:= 15000;
              ELSE
                   VN_LIMIT:= 20000;
              END IF;
           ELSIF CUR.OR_SEGGES = 3 THEN
/*INI --30/10/2019 - NAV -- BORRADO DEL CAMPOS OR_SUBSEG DE BASILEA Y SUSTITUIMOS POR OR_SEGFAC
              IF CUR.OR_SUBSEG = 1 THEN
                 VN_LIMIT:= 10000;
              ELSIF CUR.OR_SUBSEG = 2 THEN
                 VN_LIMIT:= 15000;
              ELSIF CUR.OR_SUBSEG = 3 THEN
                 VN_LIMIT:= 20000;
              ELSIF CUR.OR_SUBSEG IN (4,5) THEN
                 VN_LIMIT:= 25000;
              END IF;
*/
              IF SUBSTR(CUR.OR_SEGFAC,1,1) = 1 THEN
                 VN_LIMIT:= 10000;
              ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 2 THEN
                 VN_LIMIT:= 15000;
              ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 3 THEN
                 VN_LIMIT:= 20000;
              ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) IN (4,5) THEN
                 VN_LIMIT:= 25000;
              END IF;
-- FIN  --30/10/2019 - NAV
           ELSIF CUR.OR_SEGGES IN (4,5) THEN
              VN_LIMIT:= 25000;
           END IF;

           IF VN_TOT_CONCED < VN_LIMIT THEN
              VV_SUCEPT:= 'EMTARG';
           ELSE
              VV_SUCEPT:= 'EMSUCP';
           END IF;

--AVALES: Tratamiento de Avales
        ELSIF VV_ORIG = 'AVALES' THEN
           IF VN_FECOPE >= 2001 AND VN_TOT_CONCED_AVALES < 6000 THEN
              VV_SUCEPT:= 'EMAVAL';
           ELSE
               IF VN_TOT_CONCED_AVALES >= 6000 AND VN_FECOPE >= 2001 THEN
                  VV_SUCEPT:= 'EMSUCP';
               END IF;
           END IF;

/*COMBINACIÓN DE PRODUCTOS: Tratamiento PARA REGISTROS COMBINADOS DE Tarjetas, Avales y Factoring 5/11/' 07.-- dic '07: se cambia el orden de prelación y se sitúa por encima de EMTIPO*/
        ELSIF VV_ORIG IN ('TA-AV-FA') THEN

             VN_NUMERR:= 86;
             VN_CONT := 0;
             VN_TOT_CONCED := 0;
             VN_LIMIT := 0;
             VV_SUCEPT_DIVR := 'EMDIVR';

/* @RMC 20090930: Marcar como Riesgo Diverso a los clientes que todos sus productos cumpla los criterios individuales
                  de no susceptibilidad (actualmente se marcaban siempre que tuviera dos productos que lo cumplieran
                  aunque el tercero no lo hiciera) Cuando un producto no cumpla para ser riesgo diverso se marca como
                  susceptible la titularidad*/



-- Tratamiento Avales
             --Comprueba si hay avales posteriores a 2001
             --IF CUR.OR_TIPOPE IN('AF','AT') OR CUR.OR_PROCED IN('AVALES','ES-AVALES') THEN
             IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                BEGIN
                   SELECT TOT_AVALES
                     INTO VN_TOT_CONCED_AVALES
                     FROM BAS_MEN.MAESTRO_TOT_CONC_AVA_DIVR_OFEX
                    WHERE OR_CTACLI = CUR.OR_CTACLI
                      AND OR_NUMOFI = CUR.OR_NUMOFI;
                EXCEPTION
                     WHEN OTHERS THEN
                        VN_TOT_CONCED_AVALES:= 0;
                END;

                IF VN_TOT_CONCED_AVALES <> 0 THEN
                    BEGIN
                      SELECT NUM_AVALES
                        INTO VN_NUM_AVA_POST
                        FROM BAS_MEN.MAESTRO_PROC_AV_POST_DIVR_OFEX
                       WHERE OR_CTACLI = CUR.OR_CTACLI
                         AND OR_NUMOFI = CUR.OR_NUMOFI
                         AND ROWNUM = 1;
                    EXCEPTION
                         WHEN OTHERS THEN
                              VN_NUM_AVA_POST := 0;
                    END;

                    IF VN_NUM_AVA_POST <> 0 AND VN_TOT_CONCED_AVALES >= 6000 THEN
                       VV_SUCEPT_DIVR := 'EMSUCP';
                    END IF;
                END IF;
            END IF;

            VN_NUMERR:= 87;

-- Tratamiento Tarjetas
             IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                VN_OR_SEGGES:= -1;
                BEGIN
                      SELECT DISTINCT OR_SEGGES
                        INTO VN_OR_SEGGES
                        FROM BAS_MEN.MAESTRO_PROC_TARGES_DIVR_OFEX
                       WHERE OR_CTACLI = CUR.OR_CTACLI
                         AND OR_NUMOFI = CUR.OR_NUMOFI;
                    EXCEPTION
                         WHEN TOO_MANY_ROWS THEN
                              VN_OR_SEGGES := CUR.OR_SEGGES;
                         WHEN OTHERS THEN
                              VN_OR_SEGGES := -1;
                END;

                IF VN_OR_SEGGES <> -1 THEN
                    BEGIN
                      SELECT TOT_CONC
                           INTO VN_TOT_CONCED
                           FROM BAS_MEN.MAESTR_TOT_CONC_TARG_DIVR_OFEX
                          WHERE OR_CTACLI = CUR.OR_CTACLI
                            AND OR_NUMOFI = CUR.OR_NUMOFI;
                      EXCEPTION
                           WHEN OTHERS THEN
                              VN_TOT_CONCED := 999999;
                    END;

                    VN_LIMIT:= 10000;
                    IF CUR.OR_SEGGES = 0 THEN
                       IF CUR.IN_PYME = 'S' THEN
                          VN_LIMIT:= 15000;
                       ELSE
                            VN_LIMIT:= 20000;
                       END IF;
                    ELSIF VN_OR_SEGGES = 3 THEN
/*INI --30/10/2019 - NAV -- BORRADO DEL CAMPOS OR_SUBSEG DE BASILEA Y SUSTITUIMOS POR OR_SEGFAC
                       IF VN_OR_SUBSEG = 1 THEN
                          VN_LIMIT:= 10000;
                       ELSIF VN_OR_SUBSEG = 2 THEN
                          VN_LIMIT:= 15000;
                       ELSIF VN_OR_SUBSEG = 3 THEN
                          VN_LIMIT:= 20000;
                       ELSIF VN_OR_SUBSEG IN (4,5) THEN
                          VN_LIMIT:= 25000;
                       END IF;
*/
                        IF SUBSTR(CUR.OR_SEGFAC,1,1) = 1 THEN
                           VN_LIMIT:= 10000;
                        ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 2 THEN
                           VN_LIMIT:= 15000;
                        ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 3 THEN
                           VN_LIMIT:= 20000;
                        ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) IN (4,5) THEN
                           VN_LIMIT:= 25000;
                        END IF;
--FIN --30/10/2019 - NAV
                    ELSIF VN_OR_SEGGES IN (4,5) THEN
                       VN_LIMIT:= 25000;
                    END IF;

                    -- Si el total es mayor o igual al limite se marca como susceptible
                    IF VN_TOT_CONCED >= VN_LIMIT THEN
                       VV_SUCEPT_DIVR := 'EMSUCP';
                    END IF;
                END IF;
            END IF;

            VN_NUMERR:= 88;

-- TRATAMIENTO DESCUBIERTOS DE RIESGO DIVERSO Modificación:26/03/09
             IF SUBSTR(VV_SUCEPT_DIVR,3,4) = 'DIVR' THEN
                BEGIN
                 SELECT ORIGEN
                   INTO VV_ORIG_DESCUB_DIVR
                   FROM BAS_MEN.MAESTRO_PROC_DESCUB_DIVR_OFEX
                  WHERE OR_CTACLI = CUR.OR_CTACLI
                    AND OR_NUMOFI = CUR.OR_NUMOFI;
                EXCEPTION
                 WHEN OTHERS THEN
                    VV_ORIG_DESCUB_DIVR:= '?';
                END;

                IF VV_ORIG_DESCUB_DIVR IN ('DESCUBIERTOS') THEN

                  BEGIN
                     SELECT TOT_CONCED
                       INTO VN_TOT_CONCED
                       FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_OFEX
                      WHERE OR_CTACLI = CUR.OR_CTACLI
                        AND OR_NUMOFI = CUR.OR_NUMOFI;
                  EXCEPTION
                     WHEN OTHERS THEN
                        VV_SUCEPT_DIVR := 'EMSUCP';
                  END;

                  -- Si el concedido es mayor o igual a 30.000€ es susceptible
                  IF VN_TOT_CONCED >= 30000 THEN
                      VV_SUCEPT_DIVR := 'EMSUCP';
                  END IF;
                END IF;
            END IF;

            VV_SUCEPT := VV_SUCEPT_DIVR;

        END IF;

        VN_NUMERR:= 89;

/*TRATAMIENTO DESCUBIERTOS inferiores a 30.000 euros. CONCEDIDO <30.000 y procedencia sólo descubiertos se marcan como EMDESC: @RMC MODIFICACION CIERRE 30-09-2009*/
        BEGIN
          SELECT ORIGEN
            INTO VV_ORIG_DESCUB
            FROM BAS_MEN.MAESTRO_PROCED_DESCUB_OFEX
           WHERE OR_CTACLI = CUR.OR_CTACLI
             AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
              WHEN OTHERS THEN
                 VV_ORIG_DESCUB:= '?';
        END;

        IF VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
           BEGIN
              SELECT TOT_CONCED
                INTO VN_TOT_CONCED
                FROM BAS_MEN.MAESTRO_TOTAL_CONCEDIDO_OFEX
               WHERE OR_CTACLI = CUR.OR_CTACLI
                 AND OR_NUMOFI = CUR.OR_NUMOFI;
           EXCEPTION
              WHEN OTHERS THEN
                 VV_SUCEPT:= '?';
           END;

           IF VN_TOT_CONCED < 30000 THEN
               VV_SUCEPT:= 'EMDESC';
           END IF;
        END IF;

        VN_NUMERR:= 91;

--TIPO DE OPERACIÓN: Tratamiento Tipope
        IF VV_ORIG_TIPOPE IN ('TIPOPE','TIPOPE_INT') AND VV_SUCEPT = '?' THEN

           BEGIN
              SELECT ORIGEN
                INTO VV_ORIG_DESCUB
                FROM BAS_MEN.MAESTRO_PROCED_DESCUB_OFEX
               WHERE OR_CTACLI = CUR.OR_CTACLI
                 AND OR_NUMOFI = CUR.OR_NUMOFI;
           EXCEPTION
              WHEN OTHERS THEN
                 VV_ORIG_DESCUB:= '?';
           END;

--CONCEDIDO>=30.000: Tratamiento susceptibles por total concedido>=30.000E PARA LOS EMTIPO
           IF VN_TOT_CONCED >= 30000 AND VV_ORIG_DESCUB IN ('DESCUBIERTOS') THEN
               VV_SUCEPT:= 'EMSUCP';
           ELSE
               VV_SUCEPT:= 'EMTIPO';
           END IF;

        END IF;

     END IF;

--PROCEDENCIA: Tratamiento Procedencia no susceptible             ACC-VJB 02/07/'08 VJB-ACC
--             todas las procedencias de la titularidad han de ser no susceptibles segun maestro_procedencia_sucept
     IF VV_SUCEPT IN ('?','EMSUCP') THEN
        BEGIN
           SELECT IN_SUCEPT
             INTO VV_SUCEPT
             FROM BAS_MEN.MAESTRO_PROCED_NOSUSCEPT_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
              AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_SUCEPT:= '?';
        END;
     END IF;

     VN_NUMERR:= 92;

--BLOQUEOS: Tratamiento Bloqueos  --- MODIFICACIÓN 27/03/2009: añadido nuevo bloqueo para DFSUCP

     IF VV_SUCEPT IN ('?','EMSUCP','NCSUCP','PFSUCP') THEN
        IF    (CUR.OR_CLAVISO IN (9051,9052,9053,9054,9050) AND TO_NUMBER(TO_CHAR(TO_DATE(CUR.OR_FECALTBLO,'YYYY-MM-DD'),'YYYYMMDD')) <= PN_FECPRO)
           /*OR (CUR.IN_INDMOR = 'SI' AND VV_SUCEPT = 'PFSUCP')*/ THEN  /* @RMC 20100930: la condición de morosos para que se bloqueen los PFSUCP sin necesidad de que tengan clave ni fecha de bloqueo*/
              IF VV_SUCEPT='NCSUCP' THEN
                VV_SUCEPT := 'NCBLQR';
              ELSIF VV_SUCEPT='PFSUCP' THEN
                VV_SUCEPT := 'PFBLQR';
              ELSE
                VV_SUCEPT := 'EMBLQR';
            END IF;
        END IF;
     END IF;
/* 05/02/2021 RMR - TM-3883 Bajamos esta prelación despues de las  BPRI, PICH, FACO ,PROC */
/*--Marcaje de las titularidades susceptibles que tienen operaciones con procedencias PR-MOROS.
     IF SUBSTR(VV_SUCEPT,3,4) IN ('SUCP') OR VV_SUCEPT = '?' THEN
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_MOROSOS_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
              AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG := '?';
        END;

        IF VV_ORIG = 'PR-MOROS' THEN
           VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'PRMO';
           VV_SUCEPT := REPLACE(VV_SUCEPT,'?','EM');
        END IF;

     END IF;*/

--PERSONALIDAD INCORRECTA O NO INFORMADA: ACC-VJB 04/01/08 SE PASAN ESTAS MARCAS A LA SUSCEPTIBILIDAD
  --UTES PERSONALIDAD INCORRECTA: Tratamiento UTEs con personalidad incorrecta
     IF (CUR.IN_SEGMBSINI = '019' AND /*VV_SUCEPT = 'EMTUTE' THEN*/ SUBSTR(CUR.OR_NIFCIF,1,1) in ('U','G') AND CUR.OR_PERSON <> 805) THEN
        VV_SUCEPT:= 'EMNSSP';
     END IF;

  --PERSONALIDAD NO INFORMADA
     IF VV_SUCEPT = '?' AND CUR.OR_PERSON = 0 THEN
           VV_SUCEPT:= 'EMNSSP';
     END IF;

--EL RESTO QUEDA COMO SUSCEPTIBLE: Todos aquellos registros que no se hayan tratado se marcan como susceptibles
     IF VV_SUCEPT = '?' THEN
        VV_SUCEPT := 'EMSUCP';
     END IF;

     IF VV_SUCEPT = 'EMSUCP'
       OR CUR.OR_CTACLI = 223802 THEN /* RMR 03/10/2019 Añadimos control de 'HULU LLC' para que acabe como no cliente susceptible de rating. Hablar con Xisco*/

        BEGIN
           SELECT DISTINCT TRIM(COMENTARIO)
             INTO VV_COMENTARIO
             FROM BAS_MEN.MAESTRO_NOSUSCEPT_OFEX
            WHERE IDCLIENTE = CUR.OR_CTACLI
              AND upper(TRIM(COMENTARIO)) in ('BANCA PRIVADA', 'PIC HIPOTECA', 'FACTORING', 'SWAP SABADELL UNITED', 'NCSCSR', 'EMCNAE', 'CLIENTE CON BLOQUEO') /* 13/01/2021 - NAV - Añadimos estos dos motivos ('EMCNAE' Y 'CLIENTE CON BLOQUEO') */
              AND OFEX = CUR.OR_NUMOFI;
        EXCEPTION
             WHEN OTHERS THEN
                  VV_COMENTARIO := '?';
        END;

        VN_NUMERR:= 93;

        IF UPPER(VV_COMENTARIO) = 'BANCA PRIVADA' THEN
           VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'BPRI'; --No susceptible por Banca privada
        ELSIF UPPER(VV_COMENTARIO) = 'PIC HIPOTECA' THEN
              VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'PICH'; --No susceptible por PIC Hipotecario
        ELSIF UPPER(VV_COMENTARIO) = 'FACTORING' THEN
              VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'FACO'; --No susceptible por factoring con cobertura
        ELSIF UPPER(VV_COMENTARIO) = 'SWAP SABADELL UNITED' THEN
              VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'PROC'; --No susceptible por Swap
        /*ELSIF UPPER(VV_COMENTARIO) = 'NCSCSR' THEN /* RMR 03/10/2019 Añadimos control de 'HULU LLC' para que acabe como no cliente susceptible de rating. Hablar con Xisco
              VV_SUCEPT := 'NCSCSR'; */
        ELSIF UPPER(VV_COMENTARIO) in ('NCSCSR', 'EMCNAE') THEN  /*  BNM 14/01/2021 */
              VV_SUCEPT := UPPER(VV_COMENTARIO);
        END IF;

     END IF;

     /* 05/02/2021 RMR - TM-3883 */
     --Marcaje de las titularidades susceptibles que tienen operaciones con procedencias PR-MOROS.
     IF SUBSTR(VV_SUCEPT,3,4) IN ('SUCP') OR VV_SUCEPT = '?' THEN
        BEGIN
           SELECT ORIGEN
             INTO VV_ORIG
             FROM BAS_MEN.MAESTRO_PROCED_MOROSOS_OFEX
            WHERE OR_CTACLI = CUR.OR_CTACLI
              AND OR_NUMOFI = CUR.OR_NUMOFI;
        EXCEPTION
           WHEN OTHERS THEN
              VV_ORIG := '?';
        END;

        IF VV_ORIG = 'PR-MOROS' THEN
           VV_SUCEPT := SUBSTR(VV_SUCEPT,1,2)||'PRMO';
           VV_SUCEPT := REPLACE(VV_SUCEPT,'?','EM');
        END IF;

     END IF;
     /* 05/02/2021 RMR - TM-3883 */

     VN_NUMERR:= 95;

    IF SUBSTR(Cur.OR_SEGRIE, 1, 1) IN ('C', 'P') OR SUBSTR(VV_SUCEPT, 1, 1) != SUBSTR(Cur.OR_MODRAT0, 1, 1) OR Cur.OR_SITUAC0 = 'D'
       OR (CUR.IN_SEGMBS2 = '020' AND SUBSTR(VV_SUCEPT,1,2) = 'EM') THEN

       IF SUBSTR(VV_SUCEPT, 1, 2) = 'NC' AND SUBSTR(Cur.OR_MODRAT0, 1, 2) = 'DF' THEN

          --El segrie ficticio guarda las 2 primeras posiciones del modelo de rating cuando esté sea vigente. XCG, 03/02/09.
          VV_OR_SEGFIC:= SUBSTR(Cur.OR_SEGRIE,1,2);

       ELSIF NVL(CUR.OR_SEGFAC,0) <> 0 THEN
             IF CUR.OR_SEGGES IN (0,4,5,9) THEN
                VV_OR_SEGFIC:= 'E0';
             ELSIF CUR.OR_SEGGES = 3 THEN
                   IF CUR.OR_SEGFAC = 11 THEN
                      VV_OR_SEGFIC:= 'E0';
                   ELSIF CUR.OR_SEGFAC = 12 THEN
                         VV_OR_SEGFIC:= 'E1';
                   ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 2 THEN
                         VV_OR_SEGFIC:= 'E2';
                   ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 3 THEN
                         VV_OR_SEGFIC:= 'E3';
                   ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 4 THEN
                         VV_OR_SEGFIC:= 'E4';
                   ELSIF SUBSTR(CUR.OR_SEGFAC,1,1) = 5 THEN
                         VV_OR_SEGFIC:= 'E5';
                   END IF;
             ELSIF CUR.IN_PYME = 'S' THEN
                   VV_OR_SEGFIC:= 'E2';
             ELSE
                  VV_OR_SEGFIC:= 'E3';
             END IF;
       ELSIF CUR.IN_PYME = 'S' THEN
             VV_OR_SEGFIC:= 'E2';
       ELSE
            VV_OR_SEGFIC:= 'E3';
       END IF;
    ELSE
         --El segrie ficticio guarda las 2 primeras posiciones del modelo de rating cuando esté sea vigente. XCG, 03/02/09.
         VV_OR_SEGFIC:= SUBSTR(Cur.OR_SEGRIE,1,2);
    END IF;

    VN_NUMERR:= 96;

    IF Cur.OR_SEGRIE = '?' THEN
       IF CUR.IN_PYME = 'S' THEN
          VV_OR_SEGFIC:= 'E2';
       ELSE
            VV_OR_SEGFIC:= 'E3';
       END IF;
    END IF;

    IF Cur.OR_SEGRIE = 'GR' AND Cur.OR_SITUAC0 <> 'D' THEN -- JVL 26/02/2018: Se utiliza la variable VV_OR_SITUAC = 'D'
       -- cuando el segfic sea GR y no esté depurado se actualizará con el segmento ficticio de una corporate. 201709. XCG
         VV_OR_SEGFIC := 'E5';
   END IF;

    /* 18/08/2021 RMR */
  --IF CUR.IN_VTAGRU IN (0,99) or CUR.IN_VTAGRU_CONS IN (0,99) then
    IF CUR.IN_VTAGRU = 99 THEN

      /* 18/08/2021 RMR | Eliminadas ventas medias
       IF CUR.IN_SEGMBSINI = '019' OR CUR.IN_SEGMBS0 IN ('203','201','204') OR CUR.OR_INDHOLDING IN ('1','3','4')
                                      OR CUR.IN_SEGMBS2 = '020'          OR VV_OR_SEGFIC = 'E3' THEN

          IF VV_OR_SEGFIC = 'E4' THEN
             VV_VENTAS:= 115000000;
          ELSIF VV_OR_SEGFIC = 'E5' THEN -- nuevas ventas medias corporates. 201603. XCG
                VV_VENTAS:= 200000000;
          ELSE
               VV_VENTAS:= 18000000;
          END IF;

       ELSIF CUR.IN_VTAGRU = 99 OR CUR.IN_VTAGRU_CONS IN (99) THEN


             IF VV_OR_SEGFIC = 'E0' THEN
                   VV_VENTAS:= 150000;
             ELSIF VV_OR_SEGFIC = 'E1' THEN
                   VV_VENTAS:= 600000;
             ELSIF VV_OR_SEGFIC = 'E2' THEN
                   VV_VENTAS:= 3450000;
             ELSIF VV_OR_SEGFIC = 'E3' THEN
                   VV_VENTAS:= 18000000;
             ELSIF VV_OR_SEGFIC = 'E4' THEN
                   VV_VENTAS:= 115000000;
             ELSIF VV_OR_SEGFIC = 'E5' THEN -- nuevas ventas medias corporates. 201603. XCG
                   VV_VENTAS:= 200000000;
             END IF;
             */
       VV_VENTAS  := 51000000;
       VV_ACTIVO  := 44000000;
       VV_VENTAS_CONSOL := 51000000;
       VV_ACTIVO_CONS := 44000000;

       --END IF;

     /* 18/08/2021 RMR */
     --IF CUR.IN_VTAGRU NOT IN (0,99) THEN
     --   VV_VENTAS := CUR.IN_VTAGRU;
     --END IF;

     /* 18/08/2021 RMR */
     --IF CUR.IN_VTAGRU_CONS NOT IN (0,99) THEN
     --   VV_VENTAS_CONSOL := CUR.IN_VTAGRU_CONS;
     --ELSE
     --   VV_VENTAS_CONSOL := VV_VENTAS;
     --END IF;

    END IF;

    VN_NUMERR:= 97;

    --Si no nay activo, se iguala al valor de las ventas medias.
    /* 18/08/2021 RMR | Se respectará el valor del activo a 0 */
    --IF VV_ACTIVO = 0 AND VV_VENTAS IN (150000, 600000, 3450000, 18000000, 115000000, 200000000) THEN
    --   VV_ACTIVO:= VV_VENTAS;
    --   VV_ACTIVO_CONS:= VV_VENTAS;
    --END IF;

--ACTUALIZACIÓN TABLA BAS_MEN.MAESTRO_SUCEPT_OFEX  : Se actualiza el MAESTRO_SUCEPT_OFEX con el nuevo CAMPO IN_SUCEPT
    UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
       SET IN_SUCEPT = VV_SUCEPT
         , OR_SEGFIC = VV_OR_SEGFIC
         , IN_VTAGRU = VV_VENTAS
         , IN_VTAGRU_CONS = VV_VENTAS_CONSOL
         , IN_ACTIVO = VV_ACTIVO
         , IN_ACTIVO_CONS = VV_ACTIVO_CONS
     WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 101;

-------------------------------------------------------
-- CONTAGIO POR PERSONALIDAD
-- 04-12-2007 VJB-ACC
-- registros no susc y susceptibles: se realiza el contagio por EMSUCP
-------------------------------------------------------
  FOR CUR IN CONTAGIOPERSON LOOP

    UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
       SET IN_SUCEPT= 'EMSUCP'
     WHERE SUBSTR(IN_SUCEPT,1,4)='EMPE'
       AND OR_CTACLI = CUR.OR_CTACLI
       AND OR_NUMOFI = CUR.OR_NUMOFI;

  END LOOP;

  commit;

  VN_NUMERR:= 102;

-------------------------------------------------------
-- CONTAGIO POR UTEs POR PERSONALIDAD INCORRECTA
-- se contagia la marca de no susceptibiliadad por UTE con personalidad incorrecta en el caso de tener titularidades
-- que tengan exposiciones marcadas marcadas como otros códigos de suceptibilidad
-- se excluyen Promociones y Project Finance
-------------------------------------------------------

  FOR CUR IN CONTAGIOPERSONINC LOOP

    UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
       SET IN_SUCEPT = 'EMNSSP'
     WHERE IN_SUCEPT NOT IN ('PFSUCP','FERENS','FEOFNS')
       AND OR_CTACLI = CUR.OR_CTACLI
       AND OR_NUMOFI = CUR.OR_NUMOFI;

  END LOOP;
  COMMIT;

  VN_NUMERR:= 103;

-------------------------------------------------------
-- CONTAGIO POR OFICINA 602
-- registros no susc EMOFIN y algun otro código de no susceptibilidad: se marca a EMOFIN
-------------------------------------------------------

  FOR CUR IN CONTAGIOOFINS LOOP

    UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
       SET IN_SUCEPT = 'EMOFIN'
     WHERE IN_SUCEPT NOT IN ('PFSUCP','FERENS','FEOFNS')
       AND OR_CTACLI = CUR.OR_CTACLI
       AND OR_NUMOFI = CUR.OR_NUMOFI;

  END LOOP;
  COMMIT;

  VN_NUMERR:= 104;
-------------------------------------------------------
-- CONTAGIO POR TIPO DE OPERACIÓN
-- marcamos como susceptibles las titularidades
-- que tengan exposiciones marcadas como susceptibles y no susceptibles por Tipo de Operación
-------------------------------------------------------
  FOR CUR IN CONTAGIOTIPOPE LOOP

     UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
        SET IN_SUCEPT = 'EMSUCP'
      WHERE IN_SUCEPT = 'EMTIPO'
        AND OR_CTACLI = CUR.OR_CTACLI
        AND OR_NUMOFI = CUR.OR_NUMOFI;

  END LOOP;
  COMMIT;

  VN_NUMERR:= 105;

-------------------------------------------------------
-- CONTAGIO POR BLOQUEO
-- se contagia la marca de no susceptibiliadad por Bloqueo en el caso de tener titularidades
-- que tengan exposiciones marcadas marcadas como otros códigos de suceptibilidad
-- se excluyen Promociones y Project Finance
-------------------------------------------------------
  FOR CUR IN CONTAGIOBLQR LOOP

      UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
         SET IN_SUCEPT = 'EMBLQR'
       WHERE IN_SUCEPT NOT IN ('PFSUCP','FERENS','FEOFNS')
         AND OR_CTACLI = CUR.OR_CTACLI
         AND OR_NUMOFI = CUR.OR_NUMOFI;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 106;

  --MODIFICACIÓN 27/03/2009: CONTAGIO DE LOS REGISTROS OBTENIDOS DEL CURSOR CONTAGIOBLQR_DFSUCP DONDE LA SUSCEPTIBILIDAD ESTÉ MARCADA CON DFSUCP
  FOR CUR IN CONTAGIOBLQR_DFSUCP LOOP

      UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
         SET IN_SUCEPT='NCBLQR'
       WHERE OR_CTACLI = CUR.OR_CTACLI
         AND OR_NUMOFI = CUR.OR_NUMOFI
         AND IN_SUCEPT='NCSUCP';

  END LOOP;

  COMMIT;

  VN_NUMERR:= 107;

  FOR CUR IN CONTAGIO_MOROS LOOP

      UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
         SET IN_SUCEPT='EMPRMO'
       WHERE OR_CTACLI = CUR.OR_CTACLI
         AND OR_NUMOFI = CUR.OR_NUMOFI
         AND IN_SUCEPT <> 'EMPRMO';

  END LOOP;

  COMMIT;

  VN_NUMERR:= 108;

  --
  -- Contagio si se hay duplicidades de EMSUCP y otros -> Se dejan como EMSUCP JCVJCV
  --
  FOR CUR IN Contagio_EMSucp LOOP

      UPDATE BAS_MEN.MAESTRO_SUCEPT_OFEX
         SET IN_SUCEPT  = 'EMSUCP'
       WHERE OR_CTACLI  = CUR.OR_CTACLI
         AND OR_NUMOFI  = CUR.OR_NUMOFI
         AND IN_SUCEPT <>'EMSUCP';
  END LOOP;

  COMMIT;

  VN_NUMERR:= 115;

  --XCG, Identificación de grupos. No aplica a RE y OBF -- 16/04/2021
  update BAS_MEN.MAESTRO_SUCEPT_OFEX
     set IN_SUCEPT = 'GR'||SUBSTR(IN_SUCEPT,3)
   where substr(or_modrat0,1,3) = 'EMM'
   and in_segmbs0 not in ('203', '204');

   commit;

   VN_NUMERR:= 116;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_ORIG_OFEX');

  INSERT /*+ parallel (b 4) */ INTO BAS_MEN.MAPA_USO_ORIG_OFEX B
       (OR_IDREG,OR_IDPERS,OR_TIPIDE,OR_NIFCIF,OR_TIPIDEIBM,OR_NIFCIFIBM,OR_TITULARITAT,
        OR_NOMPER,OR_PERSON,OR_IDECNO,OR_IDCNAE,OR_PROCED,
        OR_NUMOFI,OR_REFOPE,OR_REFOPE2,OR_TIPOPE,OR_FECOPE,OR_FECVTO,OR_VIDINI,
        OR_VIDRES,IN_ANTIGU,OR_SEGGES,OR_SUBSEG,OR_TIPAVA,
        OR_TIPGAR,OR_DESTPR,OR_TIPOFI,OR_TIPOPR,OR_IMPLTV,OR_VALTAS,OR_CONCED,OR_IDPAIS,
        OR_CODSOL,IN_BCOATL,IN_ITITSN,IN_INDMOR,OR_IDPRO1,OR_ENTITY,OR_DIVISA,FI_TIPEXP,OR_DISPTO,OR_DISBLE,
        OR_AVALES,OR_DISPTOCON,OR_DISBLECON,OR_AVALESCON,OR_AJUVALCON,IN_VTAGRU,OR_RATINT,
        OR_MODRAT0,OR_SEGRIE,OR_PUNT0,OR_SITUAC0,
        OR_FECPUN0,IN_SEGMBSINI,IN_SEGMBS0,
        IN_SEGMBS1,IN_SEGMBS2,IN_SEGMBS,IN_SUCEPT, OR_CLUNIENT,OR_CLUNIPROD,OR_CLUNICONTR,OR_CLUNICUENT,OR_CLUNIOPERA,
        FI_MESCURA,OR_FECCAR,OR_PRESTMIG, OR_CLAVISO, OR_FECALTBLO, IN_BLOQ, IN_IDCALIFIC, OR_SEGFIC,IN_IDCALIFICREL,
        OR_REPOS, OR_FUTURS, FI_EADAIRB, OR_CONTRATO_CRDGBL,
        OR_INDHOLDING, OR_CODPRODO, OR_PROYECTO, OR_CNAEREL, OR_CTACLI, IN_INDBAL, IN_INDBAL_CONS, IN_VTAGRU_CONS, IN_ACTIVO
        , IN_NUMEMP, IN_ACTIVO_CIR, IN_EXISTENCIAS
        , IN_GRUP_IDPER
        , IN_NIFGRUPCON
        , OR_PESOW, OR_PUNTGRUP, OR_SEGFAC, IN_TIPOREG, IN_ACTIVO_CONS, IN_NUMEMP_CONS
        , OR_MODGRUP )
  SELECT /*+ full(a) parallel (A 4) */
        A.OR_IDREG,A.OR_IDPERS,B.OR_TIPIDE,A.OR_NIFCIF,A.OR_TIPIDEIBM,A.OR_NIFCIFIBM,A.OR_TITULARITAT,
        A.OR_NOMPER,B.OR_PERSON,A.OR_IDECNO,B.OR_IDCNAE,A.OR_PROCED,
        A.OR_NUMOFI,A.OR_REFOPE,A.OR_REFOPE2,A.OR_TIPOPE,A.OR_FECOPE,A.OR_FECVTO,A.OR_VIDINI,
        A.OR_VIDRES,A.IN_ANTIGU,B.OR_SEGGES,0 OR_SUBSEG,A.OR_TIPAVA,
        A.OR_TIPGAR,A.OR_DESTPR,A.OR_TIPOFI,A.OR_TIPOPR,A.OR_IMPLTV,A.OR_VALTAS,A.OR_CONCED,A.OR_IDPAIS,
        0 OR_CODSOL, null IN_BCOATL,A.IN_ITITSN,A.IN_INDMOR,A.OR_IDPRO1,A.OR_ENTITY,A.OR_DIVISA,A.FI_TIPEXP,A.OR_DISPTO,A.OR_DISBLE,
        A.OR_AVALES,A.OR_DISPTOCON,A.OR_DISBLECON,A.OR_AVALESCON,A.OR_AJUVALCON, B.IN_VTAGRU,B.OR_RATINT,
        B.OR_MODRAT0,B.OR_SEGRIE,B.OR_PUNT0,B.OR_SITUAC0, B.OR_FECPUN0,
        A.IN_SEGMBSINI,A.IN_SEGMBS0, A.IN_SEGMBS1,B.IN_SEGMBS2,A.IN_SEGMBS,
        CASE
             WHEN B.IN_SUCEPT IN ('FERENS','FEOFNS') THEN
                  B.IN_SUCEPT
             WHEN A.IN_SEGMBSINI IN ('002', '017', '101', '102') THEN
                  'CA'||SUBSTR(B.IN_SUCEPT,3,5)
             WHEN B.IN_SEGMBS2 = '020' and SUBSTR(B.IN_SUCEPT,1,2) <> 'GR' THEN
                  'PR'||SUBSTR(B.IN_SUCEPT,3,5)
             WHEN B.OR_INDHOLDING = '1' and SUBSTR(B.IN_SUCEPT,1,2) <> 'GR' THEN
                  'HO'||SUBSTR(B.IN_SUCEPT,3,5)
             WHEN B.OR_INDHOLDING IN ('3','4') and SUBSTR(B.IN_SUCEPT,1,2) <> 'GR' THEN
                  'PA'||SUBSTR(B.IN_SUCEPT,3,5)
             ELSE B.IN_SUCEPT
        END IN_SUCEPT, A.OR_CLUNIENT, A.OR_CLUNIPROD,A.OR_CLUNICONTR,A.OR_CLUNICUENT,A.OR_CLUNIOPERA,FI_MESCURA,A.OR_FECCAR,A.OR_PRESTMIG,
        A.OR_CLAVISO, A.OR_FECALTBLO, A.IN_SUCEPT, B.IN_IDCALIFIC,  B.OR_SEGFIC, IN_IDCALIFICREL,a.OR_REPOS, a.OR_FUTURS,
        a.FI_EADAIRB, 0 OR_CONTRATO_CRDGBL, B.OR_INDHOLDING,
        A.OR_CODPRODO, B.OR_PROYECTO, NVL(A.OR_IDCNAEREL, 0) OR_IDCNAEREL, A.OR_CTACLI, null IN_INDBAL, null IN_INDBAL_CONS, B.IN_VTAGRU_CONS, B.IN_ACTIVO
        , B.IN_NUMEMP, B.IN_ACTIVO_CIR, B.IN_EXISTENCIAS
        , DECODE (NVL(B.IN_GRUP_IDPER,'?'), '?', A.IN_GRUP_IDPER, B.IN_GRUP_IDPER) /* RMR 25/10/2019  Cuando el IN_GRUP_IDPER informado del fichero sea nulo o ?, dejamos el existente en Basilea*/
        , DECODE (NVL(B.IN_NIFGRUPCON,'?'), '?', A.IN_NIFGRUPCON, B.IN_NIFGRUPCON) /* RMR 25/10/2019  Cuando el IN_NIFGRUPCON informado del fichero sea nulo o ?, dejamos el existente en Basilea*/
        , B.OR_PESOW, B.OR_PUNTGRUP, B.OR_SEGFAC, B.IN_TIPOREG, B.IN_ACTIVO_CONS, B.IN_NUMEMP_CONS
        , B.OR_MODGRUP /* 26/02/2020 RMR Añadido campo de modelo de grupo */
      FROM BAS_MEN.BASILEA A,
           BAS_MEN.MAESTRO_SUCEPT_OFEX B
      WHERE A.OR_IDREG = B.OR_IDREG
        AND a.FI_ELIMI1 IN ('NO', 'ACCBS', 'RFNEG', 'STSORI') /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
        AND a.IN_SEGMBSINI IN ('002', '003','005','006','009','010', '017', '019','027','101', '102' )
        AND A.IN_TIPOREG IN ('RX', 'OX', 'OXE', 'MMOX', 'MMOXE');

  COMMIT;

  VN_NUMERR:= 120;

-------------------------------------------------
----LOOP CNAENOSUSC : TRATAMIENTO CNAE NO SUSCEPTIBLES: EMCNAE   --ACC-VJB 03/07/2008
-------------------------------------------------
  FOR CUR IN CNAENOSUSC LOOP

      VN_COUNT:= VN_COUNT + 1;

      UPDATE BAS_MEN.MAPA_USO_ORIG_OFEX
         SET IN_SUCEPT = SUBSTR(IN_SUCEPT,1,2)||'CNAE'
       WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 121;

-------------------------------------------------------
-- LOOP CONTAGIOCNAE
-- registros no susc y susceptibles: se realiza el contagio por EMSUCP   -ACC-VJB 03/07/2008
-------------------------------------------------------
  VN_COUNT:= 0;

  FOR CUR IN CONTAGIOCNAE LOOP

      VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.MAPA_USO_ORIG_OFEX
       SET IN_SUCEPT = SUBSTR(IN_SUCEPT,1,2)||'SUCP'
       WHERE SUBSTR(IN_SUCEPT,3) = 'CNAE'
         AND OR_CTACLI = CUR.OR_CTACLI
         AND OR_NUMOFI = CUR.OR_NUMOFI;

  END LOOP;

  COMMIT;

  VN_NUMERR:= 122;

  FOR CUR IN DESGLOSEINSUCEPT LOOP

     VV_ROWID:= TO_CHAR(CUR.OR_IDREG);
     VV_SUCEPT:= SUBSTR(CUR.IN_SUCEPT,1,2)||'SUCP';
     VN_COUNT:= VN_COUNT + 1;

     --SUSCEPTIBLES SIN RATING
     IF nvl(CUR.OR_PUNT0, 9999) = 9999 THEN
        VV_SUCEPT:= SUBSTR(CUR.IN_SUCEPT,1,2)||'SCSR';
     ELSIF CUR.OR_SITUAC0 = 'D'   THEN
           VV_SUCEPT:= SUBSTR(CUR.IN_SUCEPT,1,2)||'SCP1';
     END IF;

     --SUSCEPTIBLES SIN CNAE: se marcan los no susceptibles por no cnae
     IF SUBSTR(CUR.OR_SEGRIE,1,2) IN ('E3', 'E4') AND CUR.OR_IDCNAE in (0, 99999) AND CUR.IN_SEGMBSINI NOT IN ('002', '017', '101', '102') THEN
         VV_SUCEPT:= SUBSTR(CUR.IN_SUCEPT,1,2)||'NCSC';
     END IF;

     IF CUR.OR_SEGRIE = '?' AND SUBSTR(CUR.OR_SEGFIC,1,2) IN ('E3','E4') AND CUR.OR_IDCNAE in (0, 99999)
         AND CUR.IN_SEGMBSINI NOT IN ('002', '017', '101', '102') THEN
         VV_SUCEPT:= SUBSTR(CUR.IN_SUCEPT,1,2)||'NCSC';
     END IF;

     IF SUBSTR(CUR.IN_SUCEPT,1,2) = 'NC' THEN
        IF CUR.OR_INDHOLDING = '1' THEN
           VV_SUCEPT := 'HOFANC1';
        ELSIF CUR.OR_INDHOLDING IN ('3','4') THEN
              VV_SUCEPT := 'PAFANC1';
        ELSIF CUR.IN_SEGMBS2 = '020' THEN
              VV_SUCEPT := 'PRFANC1';
        END IF;

     ELSE
          IF CUR.IN_SEGMBSINI IN ('002', '017', '101', '102') THEN
             VV_SUCEPT := 'CA'||SUBSTR(VV_SUCEPT,3,5);
          ELSIF SUBSTR(VV_SUCEPT,1,2) = 'GR' THEN
                VV_SUCEPT := 'GR'||SUBSTR(VV_SUCEPT,3,5);
          ELSIF CUR.OR_INDHOLDING = '1' THEN
                VV_SUCEPT := 'HO'||SUBSTR(VV_SUCEPT,3,5);
          ELSIF CUR.OR_INDHOLDING IN ('3','4') THEN
                VV_SUCEPT := 'PA'||SUBSTR(VV_SUCEPT,3,5);
          ELSIF CUR.IN_SEGMBS2 = '020' THEN
                VV_SUCEPT := 'PR'||SUBSTR(VV_SUCEPT,3,5);
          END IF;

     END IF;

     UPDATE BAS_MEN.MAPA_USO_ORIG_OFEX
       SET IN_SUCEPT = VV_SUCEPT
     WHERE OR_IDREG = CUR.OR_IDREG;

  END LOOP;

  VN_NUMERR:= 125;

  COMMIT;

--INI 06/02/2019 - Nav - Este update sobre BASILEA lo haremos en el nuevo proceso FNC_SUCEPT_BASILEA_UPDATE
--
-------------------------------------------------------
-- LOOP BASILEA 4 - OFEX
-- UPDATE IN_SUCEPT DE BASILEA
-------------------------------------------------------
--  VN_COUNT:=0;

--  FOR CUR IN BASILEA4 LOOP
--        VN_COUNT:= VN_COUNT + 1;
--
--      UPDATE BAS_MEN.BASILEA
--         SET IN_SUCEPT    = CUR.IN_SUCEPT
--           , OR_SEGFIC    = Cur.OR_SEGFIC
--           , IN_INDBAL    = CUR.IN_INDBAL
--          , IN_INDBAL_CONS  = CUR.IN_INDBAL_CONS
--          , IN_VTAGRU     = CUR.IN_VTAGRU
--          , IN_VTAGRU_CONS  = CUR.IN_VTAGRU_CONS
--          , IN_ACTIVO     = CUR.IN_ACTIVO
--       WHERE OR_IDREG     = CUR.OR_IDREG;
--
--  END LOOP;
--
--  COMMIT;
--
--FIN 06/02/2019 - Nav

  VN_NUMERR:= 150;

  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '9.0 FNC_SUCEPT_OFEX '||PV_TABLA
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '9.0 FNC_SUCEPT_OFEX '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   RAISE;
END;

-------------------------------------------------------
-- PROCESO PRINCIPAL
-------------------------------------------------------

BEGIN

FNC_SUCEPT_OFEX (PV_TABLA, PN_FECPRO, PV_FECHA, PN_OPC_DER, PN_F, PV_RET);

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '9.0 FNC_SUCEPT_OFEX '||PV_TABLA
        AND ESTAT  = 'INICIADO';

     COMMIT;
     RAISE;

END;

/

show errors;


create or replace PROCEDURE   BAS_MEN.BASI_SUSCEPTIBILIDAD_OFEX IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

   v_Exis_Datos  VARCHAR2(1) DEFAULT 'N';

BEGIN

  COMMIT;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

-- --***********************************************************************************************************--
-- -- Susceptibilidad/Ratings/Mdu OFEX
-- --***********************************************************************************************************--

    -- Validacion de existencia de datos. Si no EXISTIERAN abortara (La funcion realiza un raise).
    SELECT BAS_MEN.SF_VALIDA_EXIS_DATOS ('BASILEA', 'S') INTO v_Exis_Datos FROM DUAL;

  BAS_MEN.FNC_SUCEPT_OFEX(VV_TABLA, 1,VN_FECPRO, VN_MESPRO, VN_OPC_DER, VN_F, VV_RETORNO);
  COMMIT;

END;

/

--bkd10020=====================================================================================================
Select 'bkd10020' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SALDOS_DESCUADRES_IND (
PV_TABLA       IN  VARCHAR2,
PV_RET         OUT VARCHAR2) IS

VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VV_ROWID       VARCHAR2(50);
VN_COUNT       NUMBER(3);
VN_IMPORTE     FLOAT;
VV_IDREG       NUMBER(12);
VN_MESPRO      NUMBER(6) DEFAULT 0;

BEGIN

    commit;

     EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(substr(VALPARM,1,6))
   INTO VN_MESPRO
   FROM BAS_MEN.PARAMETROS_PROCESO
  WHERE CODCSB     = '0081'
    AND CODPARM    = '0001'
    AND SECPARM    = '01';

  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('15.1 FNC_SALDOS_DESCUADRES_IND '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_NUMERR:= 1;
  VN_IMPORTE := 0;
  VV_IDREG := 0;

  commit;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SRCRE_CUENTA');

  insert into BAS_MEN.MAESTRO_SRCRE_CUENTA
  select * from DCRPROP_MENSUAL.MAESTRO_SRCRE_CUENTA_SAS;

  commit;

--
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CUENTAS_NO_INSERTAR_IND');

  INSERT INTO BAS_MEN.CUENTAS_NO_INSERTAR_IND
      SELECT * FROM DCRPROP_MENSUAL.CUENTAS_NO_INSERTAR_IND_SAS;
  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('bas_men.MAESTRO_CORREC_VALOR');

    INSERT INTO bas_men.MAESTRO_CORREC_VALOR
    select * from dcrprop_mensual.MAESTRO_CORREC_VALOR_sas;

  commit;

  delete /*+ parallel (d 8) */ BAS_MEN.BASILEA d
  where IN_TIPOREG in ('SI','SX','DI','DX');

  commit;
--
  VN_NUMERR:= 2;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SALDOS_BASILEA');

  --Tabla que cálcula los saldos de la tabla de exposiciones, agrupados por entidad, cuenta y epígrafe.
   INSERT /*+ parallel (d 8) */ INTO BAS_MEN.SALDOS_BASILEA d
              (EMPRESA, EPIGRAF, COMPTE, SALDOBDDORI, SALDOFAIRVA, SALDOBDDINI, OR_DIVISA)
    SELECT /*+ parallel (b 8) */ B.OR_ENTITY, B.OR_EPIIND, B.OR_CTAIND,
              SUM(B.OR_DISPTO + B.OR_DISBLE + B.OR_AVALES + B.OR_FUTURS + DECODE(SUBSTR(B.OR_EPIIND, 1, 5), '02002', -1*b.OR_REPOS,
                                                                                                            '02003', -1*b.OR_REPOS,
                                                                                                            '02004', -1*OR_REPOS, OR_REPOS)
                                                                        + b.OR_AJUVAL+ OR_FAIRVA),
              SUM(DECODE(SUBSTR(B.OR_EPIIND, 1, 5), '03003', b.OR_FAIRVA, 0) + decode(OR_REPOS, 0, 0, OR_FAIRVA)),
              SUM(DECODE(fi_elimi1,'AJUSRF', 0, 'MICROCOB',0,DECODE(b.OR_REPOS, 0, b.OR_DISPTO + b.OR_DISBLE + b.OR_AVALES + b.OR_FUTURS + b.OR_AJUVAL +
                                                DECODE(SUBSTR(b.OR_EPIIND, 1, 5), '03003', 0, b.OR_FAIRVA),
                                                DECODE(substr(b.OR_EPIIND, 1,5 ), '02002', -1*b.OR_REPOS, '02003', -1*b.OR_REPOS,
                                                                                  '02004', -1*OR_REPOS, OR_REPOS))))
       , OR_DIVISA
   FROM BAS_MEN.BASILEA b
  /*02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
  /*06/09/2021 - NAV - Añadimos el nuevo FI_ELIMI(GAROMX) del proceso Garantias Mexico */
  WHERE FI_ELIMI1 NOT IN ('IDRE', 'NOENBALANCE', 'GAROPE', 'GAROFEX', 'ACCBS', 'SOBFASEADO', 'STSORI', 'GAROMX')
    AND in_tiporeg not in ('RN', 'DN', 'DTA', 'CERENTVA')
    AND OR_CTAIND <> 9999999999999  /* 16/02/2021 - NAV - Descartamos este cuanta individual */
  GROUP BY B.OR_ENTITY, B.OR_EPIIND, B.OR_CTAIND, B.OR_DIVISA;

  COMMIT;

  VN_NUMERR:= 3;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SALDOS_DESCUADRES_CONCIL');
  --Se deja de utilizar el balance consolidado geco y se utiliza en su lugar la tabla de mapeo de epígrafes
  --Tabla que guarda los registros que aparecen en el balance individual pero que no están en la tabla de exposiciones.
  --También están en el balance consolidado
   INSERT /*+ parallel (d 8) */ INTO BAS_MEN.SALDOS_DESCUADRES_CONCIL d
       SELECT /*+ parallel (b 8) */ distinct A.EMPRESA, a.epigraf, '?', A.COMPTE,'?', NVL(-1*a.SALDO,0), NULL, NULL, a.or_divisa, c.epigraf
         FROM BAS_MEN.SALDOS_BASILEA b,
              BAS_MEN.balance_individual a,
              /*(select distinct or_entity, or_ctaind, fi_epicon from BAS_MEN.balance_consolidado_geco) */
              --BAS_MEN.MAPEO_CUENTA_EPIGRAFE_504 c
              BAS_MEN.BALANCE_INDIVIDUAL_504 c
        WHERE A.empresa   = B.EMPRESA(+)
          AND A.compte    = B.COMPTE(+)
          AND A.epigraf   = B.EPIGRAF(+)
          and a.or_divisa = b.or_divisa(+)
          and a.compte <> 0
          and a.EMPRESA   = c.EMPRESA(+)
          and a.compte    = c.COMPTE(+)
          and substr(a.epigraf, 1,2) = substr(c.epigraf(+),1,2)
          AND (A.epigraf LIKE '010%' OR  A.epigraf LIKE '020%' OR A.epigraf LIKE '030%')
          AND A.epigraf NOT IN ('030010100000000000','030020100000000000','030050030010100000')
          AND B.COMPTE IS NULL
          AND ABS(a.SALDO) > 0.01;

    commit;
      /*
    INSERT --+ APPEND
       INTO BAS_MEN.SALDOS_DESCUADRES_CONCIL
          SELECT distinct A.EMPRESA, a.epigraf, '?', A.COMPTE, '?', NVL(-1*a.SALDO,0), NULL, NULL, a.or_divisa, c.fi_epicon
         FROM BAS_MEN.SALDOS_BASILEA b,
              BAS_MEN.balance_individual a,
              BAS_MEN.SALDOS_DESCUADRES_CONCIL d,
              (select distinct or_entity, or_ctaind, fi_epicon from BAS_MEN.balance_consolidado_geco) c
        WHERE A.empresa   = B.EMPRESA(+)
          AND A.compte    = B.COMPTE(+)
          AND A.epigraf   = B.EPIGRAF(+)
          and a.or_divisa = b.or_divisa(+)
          and a.compte <> 0
          and a.EMPRESA   = c.or_entity
          and a.compte    = c.or_ctaind
          and d.fi_epicon is null
          and A.empresa   = d.EMPRESA
          AND A.compte    = d.COMPTE
          AND A.epigraf   = d.EPIGRAF
          and a.or_divisa = d.or_divisa
          AND (A.epigraf LIKE '010%' OR  A.epigraf LIKE '020%' OR A.epigraf LIKE '030%')
          AND A.epigraf NOT IN ('030010100000000000','030020100000000000','030050030010100000')
          AND B.COMPTE IS NULL
          AND ABS(a.SALDO) > 0.01;

     commit;

          DELETE BAS_MEN.SALDOS_DESCUADRES_CONCIL
          WHERE FI_EPICON IS NULL;

          COMMIT;
  */
  VN_NUMERR:= 4;

  --ALLA 27/06/2016 Se deja de utilizar el balance consolidado geco y se utiliza en su lugar la tabla de mapeo de epígrafes
  --También guardamos y los registros que tengan diferencias de saldos entre el balance individual y la tabla de exposiciones y calculamos este descuadre.
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.SALDOS_DESCUADRES_CONCIL d
       SELECT /*+ parallel (b 8) */ DISTINCT A.EMPRESA, a.EPIGRAF, '?', A.COMPTE, '?',NVL(-1*a.SALDO,0), nvl(B.SALDOBDDINI,0),
              (-1*A.SALDO)-B.SALDOBDDINI, a.or_divisa, c.epigraf
         FROM BAS_MEN.SALDOS_BASILEA b,
              BAS_MEN.BALANCE_INDIVIDUAL A,
              --(select distinct or_entity, or_ctaind, fi_epicon from BAS_MEN.balance_consolidado_geco)
              --BAS_MEN.MAPEO_CUENTA_EPIGRAFE_504 c
              BAS_MEN.BALANCE_INDIVIDUAL_504 c
        WHERE A.empresa   = B.EMPRESA
          AND A.compte    = B.COMPTE
          AND A.epigraf   = B.EPIGRAF
          and a.or_divisa = b.or_divisa
          and a.EMPRESA   = c.EMPRESA(+)
          and a.compte    = c.COMPTE(+)
          and substr(a.epigraf, 1,2) = substr(c.epigraf(+),1,2)
          AND (A.epigraf LIKE '010%' OR  A.epigraf LIKE '020%' OR A.epigraf LIKE '030%')
          AND A.epigraf NOT IN ('030010100000000000','030020100000000000','030050030010100000')
          AND ABS((-1*A.SALDO)-B.SALDOBDDINI) > 1
          ORDER BY A.COMPTE;

  COMMIT;

  VN_NUMERR:= 5;

      -- se eliminan las cuentas de la epa
  delete BAS_MEN.SALDOS_DESCUADRES_CONCIL
   where (empresa,compte) in (SELECT OR_ENTITY,OR_CTAIND FROM DCRPROP_MENSUAL.CUENTAS_EPA_DESCARTAR);

  commit;

  VN_NUMERR:= 6;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.INSERTAR_CONCIL');

  --- CREACIÓN DE LA TABLA DE CONCILIACIÓN CUYOS REGISTROS SE INSERTARÁN EN BASILEA.
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.INSERTAR_CONCIL d
   (
        OR_IDREG, OR_CTAIND, FI_CTACON, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA,
        IN_SEGMBSINI, IN_SEGMBS, --IN_SEGMBSIS,
        IN_SEGMBS0, IN_RATEXT,
        OR_IDPAIS, IN_RATSOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1, FI_SUMEXPO, OR_PORPRO, FI_DN_CN, OR_FAIRVA, OR_PROCED, OR_VIDINI, OR_VIDRES,
        OR_FAIRVACON, FI_TIPEXP, IN_RATINT, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON,
        OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON, IN_FAIRVABO, FI_PORCON, IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR, OR_DESTPR,
        IN_RATEXTAVA, OR_PROVI, OR_PROVI1, IN_TIPOREG, OR_DIVISA
   )
   SELECT /*+ parallel (A 8) */ 0, A.COMPTE, A.COMPTE FI_CTACON, A.EMPRESA, A.EPIGRAF OR_EPIIND, A.FI_EPICON, nvl(C.OR_TIPAVA,0) or_tipava,
          NVL(C.IN_SEGMBSINI,'?'), NVL(C.IN_SEGMBS,'?'),
          --NVL(C.IN_SEGMBIS,'?'), --RBR 27/10/2020 Se elimina campo por obsoleto
          '?' IN_SEGMBS0, 'NR' IN_RATEXT, C.OR_IDPAIS, 'NR' IN_RATSOB, NVL(c.IN_INDMOR, 'NO'), C.OR_TIPOPE,
          nvl(C.OR_IDPRO1,'?') or_idpro1, DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO) FI_SUMEXPO,
          C.OR_PORPRO, C.FI_DN_CN, 0 OR_FAIRVA, '?' OR_PROCED, C.OR_VIDINI, C.OR_VIDRES,  0 OR_FAIRVACON, C.FI_TIPEXP, 99 IN_RATINT,
          DECODE(C.FI_TIPEXP, 'Drawn', DECODE(A.SALDO, NULL, A.SALDO_BALANCE, A.SALDO),0) OR_DISPTO,
          DECODE(C.FI_TIPEXP, 'Undrawn', DECODE(A.SALDO, NULL, A.SALDO_BALANCE, A.SALDO),
                              'CtaOrden',DECODE(A.SALDO, NULL, A.SALDO_BALANCE, A.SALDO),0) OR_DISBLE,
          DECODE(C.FI_TIPEXP, 'OffBalance', DECODE(A.SALDO, NULL, A.SALDO_BALANCE, A.SALDO),0) OR_AVALES,
          0 OR_FUTURS,
          nvl(DECODE(C.FI_TIPEXP, 'Repos', DECODE(A.SALDO, NULL, DECODE(SUBSTR(EPIGRAF,1,5), '02002', A.SALDO_BALANCE*-1,
                                                                                         '02003', A.SALDO_BALANCE*-1,
                                                                                         '02004', A.SALDO_BALANCE*-1, A.SALDO_BALANCE),
                                                             DECODE(SUBSTR(EPIGRAF,1,5), '02002', A.SALDO*-1,
                                                                                                  '02003', A.SALDO*-1,
                                                                                         '02004', A.SALDO*-1, A.SALDO)),0),0) OR_REPOS,
          DECODE(C.FI_TIPEXP,'Ajustes',DECODE(A.SALDO, NULL, A.SALDO_BALANCE, A.SALDO),0) OR_AJUVAL,
          0 OR_DISPTOCON, 0 OR_DISBLECON, 0 OR_AVALESCON, 0 OR_FUTURSCON, 0 OR_REPOSCON, 0 OR_AJUVALCON,0 IN_FAIRVABO, 1 FI_PORCON, 'STDA' IN_METODE,
          c.FI_ELIMI1 -- RMR 12/02/2020 Cambiado FI_ELIMI1 de NO hardcodeado a lo que venga en la maestro epigrafes
          -- 'NO' FI_ELIMI1
          , 'N' IN_SEG_HIP, 'FIC00500' OR_CODGAR, '?' OR_TIPGAR, 0 OR_DESTPR, 99 IN_RATEXTAVA,
          0 OR_PROVI, 1 OR_PROVI1,
          DECODE(A.DESCUADRE,NULL,'SI','DI') IN_TIPOREG, OR_DIVISA
     FROM (SELECT EMPRESA, COMPTE, EPIGRAF, FI_EPICON, SUM(DESCUADRE) DESCUADRE , SUM(SALDO_BALANCE) SALDO_BALANCE,
                  sum(saldo_basilea) saldo_basilea, SUM(SALDO_BALANCE)- sum(saldo_basilea) SALDO,OR_DIVISA
             FROM BAS_MEN.SALDOS_DESCUADRES_CONCIL
            GROUP BY EMPRESA, COMPTE, EPIGRAF, FI_EPICON,OR_DIVISA) A,
          BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS C--,
         -- (SELECT DISTINCT CTACON, IN_INDMOR FROM BAS_MEN.MAESTRO_MOROSIDAD_IND) B
    WHERE A.FI_EPICON = C.FI_EPICON
      AND C.INCORPORAR = 'SI';
    --  AND A.COMPTE = B.CTACON(+);

  COMMIT;

  VN_NUMERR:= 10;

  DELETE BAS_MEN.INSERTAR_CONCIL
   WHERE (OR_CTAIND, OR_ENTITY) IN (SELECT OR_CTAIND, OR_ENTITY
                                      FROM (SELECT OR_CTAIND, OR_ENTITY, SUM(FI_SUMEXPO) SUMEXPO
                                              FROM BAS_MEN.INSERTAR_CONCIL
                                             GROUP BY OR_CTAIND, OR_ENTITY)
                                     WHERE ABS(SUMEXPO) < 1);

  COMMIT;

  DELETE BAS_MEN.INSERTAR_CONCIL
   WHERE OR_CTAIND IN (SELECT DISTINCT OR_CTAIND FROM BAS_MEN.MAESTRO_SRCRE_CUENTA);

  COMMIT;

  DELETE BAS_MEN.INSERTAR_CONCIL
   WHERE OR_EPIIND IN (SELECT DISTINCT OR_EPIIND from bas_men.MAESTRO_CORREC_VALOR);

  commit;

  VN_NUMERR:= 13;

  DELETE bas_men.INSERTAR_CONCIL
   WHERE (or_entity, OR_CTAIND) IN (SELECT DISTINCT or_entity, OR_CTAIND FROM bas_men.CUENTAS_NO_INSERTAR_IND);

  commit;

  -- DX, DESCUADRES DE OFEX.
  -- DI, DESCUADRES INDIVIDUAL.
  UPDATE BAS_MEN.INSERTAR_CONCIL
     SET IN_TIPOREG = 'DX'
   WHERE IN_TIPOREG = 'DI'
     AND LENGTH(OR_CTAIND) = 8
     AND OR_EPIIND NOT LIKE '0100500%';

  COMMIT;

  -- SX, SALDOS QUE NO LLEGAN DE OFEX.
  -- SI, SALDOS QUE NO LLEGAN INDIVIDUAL.
  UPDATE BAS_MEN.INSERTAR_CONCIL
     SET IN_TIPOREG = 'SX'
   WHERE IN_TIPOREG = 'SI'
     AND LENGTH(OR_CTAIND) = 8
     AND OR_EPIIND NOT LIKE '0100500%';

  COMMIT;

  VN_NUMERR:= 15;

  -- Tratamiento Activos Materiales adjudicados en cuentas morosas.

 UPDATE BAS_MEN.INSERTAR_CONCIL
    SET IN_INDMOR = 'AD'
  WHERE OR_EPIIND LIKE '01011004%';

  -- Tratamiento aseguradoras BS_VIDA

  UPDATE BAS_MEN.INSERTAR_CONCIL Upd
    SET IN_SEGMBSINI = ( SELECT BSV.IN_SEGMBSINI
                           FROM BAS_MEN.CUENTA_BS_VIDA  BSV
                          WHERE BSV.OR_CTAIND = Upd.OR_CTAIND
                        ),
        IN_SEGMBS    = ( SELECT BSV.IN_SEGMBS
                           FROM BAS_MEN.CUENTA_BS_VIDA  BSV
                          WHERE BSV.OR_CTAIND = Upd.OR_CTAIND
                        )
  WHERE Upd.OR_CTAIND IN ( SELECT BSV.OR_CTAIND
                           FROM BAS_MEN.CUENTA_BS_VIDA  BSV
                          WHERE BSV.OR_CTAIND = Upd.OR_CTAIND
                        );

  commit;

  VN_NUMERR:= 17;

  -- Las cuentas 4425200000 y 4536900 y 4479800 se tienen que segmentar como Soberanos (IN_SEGMBSINI = 008) JMG 201501
  UPDATE BAS_MEN.INSERTAR_CONCIL
     SET IN_SEGMBSINI = '008'
       , IN_SEGMBS    = 'Soberanos'
   WHERE OR_CTAIND IN (4536900, 4425200000, 4479800);

  COMMIT;

    --  Se segmentan las cámaras de compensación
  MERGE INTO BAS_MEN.INSERTAR_CONCIL Upd
  USING BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS Sel
     ON (Upd.OR_CTAIND = Sel.OR_CTAIND AND Upd.OR_ENTITY = Sel.OR_ENTITY)
   WHEN MATCHED THEN UPDATE
    SET Upd.IN_SEGMBSINI = '045',
        upd.in_segmbs = 'Entidades Financieras';

  COMMIT;

  VN_NUMERR:= 18;
--
-- volcado a DCRPROP
--

  SELECT MAX(OR_IDREG)
    INTO VV_IDREG
    FROM BAS_MEN.BASILEA;

     update BAS_MEN.INSERTAR_CONCIL
     set OR_IDREG = VV_IDREG + ROWNUM;

   commit;

   VN_NUMERR:= 19;

--Insertamos en la tabla de exposiciones los registros que no se encuentran en Basilea, y sí en el balance,
--y los registros que descuadren entre los saldos de basilea y el balance.

  INSERT /*+ parallel (BAS 8) */ INTO BAS_MEN.BASILEA BAS
              (OR_IDREG, OR_CTAIND, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA, IN_SEGMBSINI, IN_SEGMBS,
              IN_SEGMBS0, IN_RATEXT,OR_IDPAIS, IN_RATSOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1,
              OR_FAIRVA, OR_PROCED, OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP,
              OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_DISPTOCON,
              OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON,OR_REPOSCON, OR_AJUVALCON, IN_FAIRVABO, FI_PORCON,
              IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR, OR_DESTPR,
              OR_PROVAPL, IN_TIPOREG, OR_DIVISA, IN_SRATIN, OR_SEGGES, IN_ITITSN, OR_IDMES)
        SELECT /*+ parallel (A 8) */ or_idreg, A.OR_CTAIND, A.OR_ENTITY, A.OR_EPIIND, A.FI_EPICON, A.OR_TIPAVA, A.IN_SEGMBSINI, A.IN_SEGMBS,
              A.IN_SEGMBS0, A.IN_RATEXT, A.OR_IDPAIS, A.IN_RATSOB, A.IN_INDMOR, A.OR_TIPOPE, A.OR_IDPRO1,
              A.OR_FAIRVA, A.OR_PROCED, A.OR_VIDINI, A.OR_VIDRES, A.OR_FAIRVACON, A.FI_TIPEXP,
              A.OR_DISPTO, A.OR_DISBLE, A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_AJUVAL, A.OR_DISPTO * A.FI_PORCON OR_DISPTOCON,
              A.OR_DISBLE *A.FI_PORCON OR_DISBLECON,
              A.OR_AVALES*A.FI_PORCON OR_AVALESCON, A.OR_FUTURS*A.FI_PORCON OR_FUTURSCON, A.OR_REPOS*A.FI_PORCON OR_REPOSCON,
              A.OR_AJUVAL*A.FI_PORCON OR_AJUVALCON, A.IN_FAIRVABO, A.FI_PORCON,
              A.IN_METODE, A.FI_ELIMI1, A.IN_SEG_HIP, A.OR_CODGAR, A.OR_TIPGAR, A.OR_DESTPR,
              DECODE(A.OR_IDPRO1,'ES',(A.OR_PORPRO/100)*(A.OR_DISPTO+A.OR_DISBLE+A.OR_AVALES),0) OR_PROVI,  A.IN_TIPOREG, OR_DIVISA,
              'SR', 99, 'NO', VN_MESPRO
         FROM BAS_MEN.INSERTAR_CONCIL A;

  COMMIT;

  VN_NUMERR:= 99;

  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '15.1 FNC_SALDOS_DESCUADRES_IND '||PV_TABLA
     AND ESTAT  = 'INICIADO';

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '15.1 FNC_SALDOS_DESCUADRES_IND '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   RAISE;
end;
/

create or replace PROCEDURE   BAS_MEN.BASI_SALDOS_DESCUADRES_IND IS

   -- bkd10020.sql (XBK1022M/XBK1023M[Obsoleto Ant.Trimestral])
   -- bka00160.sql (Obsoleto)

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

BEGIN

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  BAS_MEN.FNC_SALDOS_DESCUADRES_IND (VV_TABLA, VV_RETORNO);

  COMMIT;


END;

/

--bka40090=====================================================================================================
Select 'bka40090' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CONSOLIDACION (PV_TABLA       IN  VARCHAR2,          --Nombre de la tabla
                                               PN_OPC         IN  NUMBER,
                                               VN_DAT_PROCES  IN  NUMBER,
                                               PV_RET         OUT VARCHAR2) IS

--Proceso de consolidación mediante el cuál se introduce el porcentaje de consolidación y se calculan los importes consolidados
--a partir del mismo porcentaje

  VN_NUMERR        NUMBER(3);
  VV_MENSAJE       VARCHAR2(255);
  VN_COUNT         NUMBER(9);
  VV_ROWID         VARCHAR2(50);
  VN_PORCON        FLOAT(126);
  VV_TIPO          VARCHAR2(255);

PROCEDURE FNC_PORCON IS
     
BEGIN

  VN_NUMERR:= 1;
  VN_COUNT:=0;
  
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('15_0. FNC_CONSOLIDACION PORCON ', SYSDATE, 'INICIADO');

  commit;
  
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PERIMETRO_INTRAGRUPO');

   insert into BAS_MEN.PERIMETRO_INTRAGRUPO
   select GRUP, decode(EMPRESA, 6011, 8211, EMPRESA) EMPRESA, COEFICIENT, METODE, PARTICIPACIO, LIQUIDITAT, a.ID_MES, 
          TRIM(a.NIFENT), a.CODCSB
     from BAS_MEN.EMPRESES_SIBIS A,
          BAS_MEN.MAESTRO_PERIMETRES b
    where b.empresa = a.CODCSB
      and b.Metode in ('G', 'P')
      and b.grup = 12
      and b.empresa not in (13, 118);   
         
    commit;   
    
  -- xcg, con el nuevo cambio consolidado, ahora hay que considerar todo el epígrafe. 22/07/16
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONSOLIDA_NIF_EPICON'); 
  
  INSERT INTO BAS_MEN.CONSOLIDA_NIF_EPICON 
  SELECT /*+ full(a) PARALLEL (A 4) */ DISTINCT OR_ENTITY, FI_EPICON
    FROM BAS_MEN.BASILEA a,
         BAS_MEN.PERIMETRO_INTRAGRUPO b
   WHERE A.OR_NIFCIFIBM = AT_NIF_EDES;
   
  COMMIT;  
      
  VN_NUMERR:= 2;
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.LISTADO_CONSOLIDACION');    

  insert into BAS_MEN.LISTADO_CONSOLIDACION 
     SELECT /*+  FULL(A) PARALLEL (A 8) */ 
                    A.OR_IDREG, A.OR_ENTITY, A.OR_CTAIND, A.OR_EPIIND, A.FI_EPICON, A.OR_NIFCIFIBM, A.IN_TIPOREG
                  , (100 - COEFICIENT)/100 PORCON_PERIMETRO, E.fi_epicon EPICON_NIF 
                  , a.OR_NIFCIF 
                  , case when a.OR_NIFCIFIBM in('N0431249B','B97390637','FR5880116566','TSBSGB2AXXX') THEN 0   			-- ADP Andorra, Promociones Blauvert y TSB  12/03/21
                         when a.OR_ENTITY = 81 AND a.OR_CTAIND = 4704800 THEN 1
                         when (100 - COEFICIENT)/100 IS NOT NULL THEN (100 - COEFICIENT)/100
                         when E.fi_epicon IS NOT NULL THEN 1
                         ELSE 1           
                    END porcon                  
             FROM BAS_MEN.BASILEA A,
                  BAS_MEN.PERIMETRO_INTRAGRUPO C,
                  BAS_MEN.CONSOLIDA_NIF_EPICON E 
            WHERE A.OR_ENTITY IN (81, 8211, 242) -- xcg, se añade para consolidar fincom. 11/10/19
              AND A.OR_NIFCIFIBM = c.AT_NIF_EDES(+)
              and a.or_ENTITY = e.OR_ENTITY(+)
              AND A.FI_EPICON = e.FI_EPICON(+)
              and A.IN_TIPOREG NOT IN ('DTA', 'CERENTVA');
              
              commit;
  
    VN_NUMERR:= 3;
  
  MERGE /*+ full(dst) parallel(dst 8) parallel(src 8) */ INTO BAS_MEN.basilea dst
   USING (SELECT or_idreg, nvl(PORCON,1) PORCON
            FROM BAS_MEN.LISTADO_CONSOLIDACION a) src
   ON (dst.or_idreg = src.or_idreg)
   WHEN MATCHED THEN
      UPDATE
         SET dst.FI_PORCON = src.PORCON,
             DST.OR_DISPTOCON   = OR_DISPTO   * SRC.PORCON,
             DST.OR_DISBLECON   = OR_DISBLE   * SRC.PORCON,
             DST.OR_AVALESCON   = OR_AVALES   * SRC.PORCON,
             DST.OR_FUTURSCON   = OR_FUTURS   * SRC.PORCON,
             DST.OR_REPOSCON    = OR_REPOS    * SRC.PORCON,
             DST.OR_AJUVALCON   = OR_AJUVAL   * SRC.PORCON,
             DST.OR_FAIRVACON   = OR_FAIRVA   * SRC.PORCON,
             DST.IN_FAIRVABOCON = IN_FAIRVABO * SRC.PORCON,
             DST.FI_EADCONAIRB  = FI_EADAIRB  * SRC.PORCON;
  
  COMMIT;           
    
  VN_NUMERR:= 5;
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '15_0. FNC_CONSOLIDACION PORCON '
     AND ESTAT  = 'INICIADO';

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '15_0. FNC_CONSOLIDACION PORCON '
        AND ESTAT  = 'INICIADO';
     
     COMMIT;   
     RAISE;   
END;

--PRINCIPAL--
BEGIN
  PV_RET:= 'KO';

  IF PN_OPC = 1 THEN
     FNC_PORCON;
  END IF;

  PV_RET:= 'OK';
END;
/

create or replace PROCEDURE    BAS_MEN.BASI_CONSOLIDACIO IS

    VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
    VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
    VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
    VN_OPC_DER    NUMBER:= 1;
    VN_F          NUMBER:= 1;
    VN_OPCBSTDA   NUMBER:= 1;
    VV_RETORNO    VARCHAR2(2):='OK';
   

BEGIN

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM) 
      INTO VN_MESPRO, VN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
     WHERE CODCSB  = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';
    
    BAS_MEN.FNC_CONSOLIDACION (VV_TABLA, 1, VN_FECPRO, VV_RETORNO);
      
    COMMIT;
  
END;

/

--bkd40031=====================================================================================================
Select 'bkd40031' As Compilando from dual;
  
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SALDOS_DESCUADRES_CON IS

VN_NUMERR      NUMBER(3);
VV_MENSAJE     VARCHAR2(255);
VV_ROWID       VARCHAR2(50);
VN_COUNT       NUMBER(3);
VV_IDREG       number(12);
VN_MESPRO      NUMBER(6) DEFAULT 0;

BEGIN

  commit;

     EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT substr(TO_NUMBER(VALPARM),1,6)
       INTO VN_MESPRO
       FROM BAS_MEN.PARAMETROS_PROCESO
      WHERE CODCSB = '0081'
        AND CODPARM = '0001'
        AND SECPARM = '01';


  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('15.2 FNC_SALDOS_DESCUADRES_CON ', SYSDATE, 'INICIADO');

  COMMIT;

    VN_NUMERR:= 1;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS');

  insert into BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS
  select * from DCRPROP_MENSUAL.EPIGRAFES_SEGMENTOS_SAS;

  commit;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.EPICON_NO_INSERTAR');

  INSERT INTO BAS_MEN.EPICON_NO_INSERTAR
  SELECT * FROM DCRPROP_MENSUAL.EPICON_NO_INSERTAR_SAS;

  COMMIT;

  delete /*+ parallel (a 8) */ BAS_MEN.basilea a
  where in_tiporeg in ('FC','SC', 'DC', 'FF') and or_entity <> 9109;

  commit;

  VN_NUMERR:= 2;

  /* ************************************************************************************************************************************* --
  -- ***************************************************************************************************************************************************************************--
  --      1. Información de la Tabla donde se almacena el cálculo los saldos de (BASILEA) tabla de exposiciones, agrupados por entidad, cuenta y epígrafe. Y divisa.                                --
  -- ***************************************************************************************************************************************************************************--
  -- ************************************************************************************************************************************* --
  -- 29/06/2016 ALLA: Se deja de utilizar la cuenta individual debido a los cambios en las cuentas contables*/

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SALDOS_BASILEA_CONSOL');

  INSERT /*+ parallel (a 4) */  INTO BAS_MEN.SALDOS_BASILEA_CONSOL a
        ( EMPRESA
        , EPICON
        , SALDOBDDORI
        , SALDOFAIRVA
        , FAIRVA2
        , SALDOBDDINI
        , OR_DIVISA
        )
   SELECT /*+ parallel (b 8) */
          B.OR_ENTITY  AS EMPRESA
        , B.FI_EPICON  AS EPICON
         , SUM ( OR_DISPTOCON + OR_DISBLECON + OR_AVALESCON + OR_FUTURSCON
                + CASE WHEN SUBSTR(OR_EPIIND,1,5) IN ('02002', '02003', '02004') THEN -1 * OR_REPOSCON
                       ELSE OR_REPOSCON
                   END
                + OR_AJUVALCON + OR_FAIRVACON
                - CASE WHEN SUBSTR(FI_EPICON,1,7) IN ('0101401','0101402','0101403','0101404') THEN OR_PROVAPL
                       ELSE 0
                  END
                ) AS SALDOBDDORI  /* 23/02/2021 - FMRR - TM-4096 | Modificar el proceso de inserción en el epígrafe 14 considerando el neto saldo-provisión */
       , 0 SALDOFAIRVA
       , 0 FAIRVA2
       , SUM ( OR_DISPTOCON + OR_DISBLECON + OR_AVALESCON + OR_FUTURSCON
                + CASE WHEN SUBSTR(OR_EPIIND,1,5) IN ('02002', '02003', '02004') THEN -1 * OR_REPOSCON
                       ELSE OR_REPOSCON
                   END
                + OR_AJUVALCON + OR_FAIRVACON
                - CASE WHEN SUBSTR(FI_EPICON,1,7) IN ('0101401','0101402','0101403','0101404') THEN OR_PROVAPL
                       ELSE 0
                  END
                ) AS SALDOBDDINI
       , B.OR_DIVISA
   FROM BAS_MEN.BASILEA  B
  /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
  /* 06/09/2021 - NAV - Añadimos el nuevo FI_ELIMI(GAROMX) del proceso Garantias Mexico */
  WHERE FI_ELIMI1  NOT IN ('IDRE', 'NOENBALANCE', 'GAROPE', 'GAROFEX', 'ACCBS', 'SOBFASEADO', 'STSORI', 'GAROMX') 
    AND IN_TIPOREG NOT IN ('RN', 'DN', 'DTA', 'CERENTVA', 'FC', 'SC', 'DC', 'FF')
    AND OR_CTAIND <> 9999999999999  /* 16/02/2021 - NAV - Descartamos este cuanta individual */
  GROUP BY B.OR_ENTITY
      ,    B.FI_EPICON
      ,    B.OR_DIVISA;

  COMMIT;

  VN_NUMERR:= 3;

  /* ************************************************************************************************************************************* --
  -- ************************************************************************************************************************************* --
  --  2. Información en la tabla donde se informan los descuadre entre el Balance Consolidado y (BASILEA)  tabla de exposiciones.          --
  -- ************************************************************************************************************************************* --
  -- ************************************************************************************************************************************* --

  -- 2.1 En este paso se guardan los registros que aparecen en el Balance Consolidado pero que no están en BASILEA  tabla de exposiciones.
  --    ( para los saldos de BASILEA se utliza la tabla generada en el punto 1 BAS_MEN.SALDOS_BASILEA_CONSOL)  */

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SALDOS_DESCUADRES_CONSOL');

  INSERT /*+ APPEND */ INTO BAS_MEN.SALDOS_DESCUADRES_CONSOL I
  SELECT BalCo.OR_ENTITY, BalCo.FI_EPICON, BalCo.DESC_EPI, BalCo.OR_CTAIND, BalCo.DESC_CUENTA, NVL(-1 * BalCo.SALDO,0), NULL, NULL, BalCo.OR_DIVISA
    FROM BAS_MEN.SALDOS_BASILEA_CONSOL SBasi
      , (SELECT DISTINCT BC.OR_ENTITY, BC.OR_CTAIND, BC.FI_EPICON, BC.SALDO, BC.DESC_EPI, BC.DESC_CUENTA, BC.OR_DIVISA
           FROM BAS_MEN.BALANCE_CONSOLIDADO_GECO BC WHERE BC.OR_ENTITY NOT IN (9487 , 236, 9315, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9109) /* 08/10/2021 - NAV - HDEV-74453 - bloquear las inserciones de saldos de BSA 9109 en el ciere de septiembre */
        )                              BalCo
  WHERE BalCo.OR_ENTITY    = SBasi.EMPRESA(+)
    AND BalCo.FI_EPICON    = SBasi.EPICON(+)
    AND BalCo.OR_CTAIND    <> 0
    AND SBasi.EPICON       IS NULL;

  COMMIT;

  VN_NUMERR:= 5;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CUENTAS_DESCUADRAN_TOT');

  COMMIT;

  /* Tabla que guarda las entidades/epigrafes/cuentas descuadradas globalmente con el balance.
  -- 29/06/16 ALLA: se deja de utilizar la cuenta individual*/
  INSERT INTO BAS_MEN.CUENTAS_DESCUADRAN_TOT
  SELECT DISTINCT BalCo.OR_ENTITY, BalCo.FI_EPICON, BalCo.OR_CTAIND
    FROM (select distinct EMPRESA, /*COMPTE, EPIIND,*/ EPICON, sum(SALDOBDDINI) SALDOBDDINI
            from BAS_MEN.SALDOS_BASILEA_CONSOL
            group by  EMPRESA, /* COMPTE, EPIIND,*/ EPICON) SBasi
       , ( SELECT DISTINCT BC.OR_ENTITY, BC.OR_CTAIND, BC.FI_EPICON, sum(BC.SALDO) Saldo, BC.DESC_EPI, BC.DESC_CUENTA /*, BC.OR_DIVISA -- No se utiliza la divisa ya que hay cuentas que estan cuadradas aunque no coicida la divisa*/
             FROM BAS_MEN.BALANCE_CONSOLIDADO_GECO BC
            WHERE OR_ENTITY NOT IN (9487 , 236, 9315, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9109) /* 08/10/2021 - NAV - HDEV-74453 - bloquear las inserciones de saldos de BSA 9109 en el ciere de septiembre */
            GROUP BY BC.OR_ENTITY, BC.OR_CTAIND, BC.FI_EPICON, BC.DESC_EPI, BC.DESC_CUENTA  /*No se utiliza la divisa ya que hay cuentas que estan cuadradas aunque no coicida la divisa */
         )                             BalCo
   WHERE BalCo.OR_ENTITY = SBasi.EMPRESA
     AND BalCo.FI_EPICON = SBasi.EPICON
     AND BalCo.OR_CTAIND  <> 0
     AND ABS((-1*BalCo.SALDO) - SBasi.SALDOBDDINI) > 1;

    COMMIT;

    VN_NUMERR:= 7;

  /* 2.2.  En este paso se guardan los los registros con diferencias en el saldo calculando el descuadre.
  --      ( para los saldos de BASILEA se utliza la tabla generada en el punto 1 BAS_MEN.SALDOS_BASILEA_CONSOL)
  --29/06/2016 ALLA: Debido a los cambios en cuentas contables, ya no se uiliza la cuenta individual de SALDOS_BASILEA_CONSOL*/
 INSERT /*+ APPEND */ INTO BAS_MEN.SALDOS_DESCUADRES_CONSOL
  SELECT BalCo.OR_ENTITY, BalCo.FI_EPICON, BalCo.DESC_EPI, BalCo.OR_CTAIND, BalCo.DESC_CUENTA, sum(NVL(-1 * BalCo.SALDO,0)), sum(SBasi.SALDOBDDINI), sum((-1 * BalCo.SALDO) - SBasi.SALDOBDDINI), SBasi.OR_DIVISA
    FROM BAS_MEN.SALDOS_BASILEA_CONSOL SBasi
       , ( SELECT DISTINCT BC.OR_ENTITY, BC.OR_CTAIND, BC.FI_EPICON, BC.SALDO, BC.DESC_EPI, BC.DESC_CUENTA , BC.OR_DIVISA
             FROM BAS_MEN.BALANCE_CONSOLIDADO_GECO BC
            WHERE OR_ENTITY NOT IN (9487 , 236, 9315, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9109) /* 08/10/2021 - NAV - HDEV-74453 - bloquear las inserciones de saldos de BSA 9109 en el ciere de septiembre */
         )                             BalCo
       , BAS_MEN.CUENTAS_DESCUADRAN_TOT tot
   WHERE BalCo.OR_ENTITY = SBasi.EMPRESA
     AND BalCo.FI_EPICON = SBasi.EPICON
     AND BalCo.OR_ENTITY = tot.OR_ENTITY
     AND BalCo.OR_CTAIND = tot.OR_CTAIND
     AND BalCo.FI_EPICON = tot.FI_EPICON
      AND BalCo.OR_DIVISA = SBasi.OR_DIVISA
     AND BalCo.OR_CTAIND  <> 0
     AND ABS((-1*BalCo.SALDO) - SBasi.SALDOBDDINI) > 1
     group by BalCo.OR_ENTITY, BalCo.FI_EPICON, BalCo.DESC_EPI, BalCo.OR_CTAIND, BalCo.DESC_CUENTA, SBasi.OR_DIVISA;

  COMMIT;

  VN_NUMERR:= 10;

  /* se insertan los descuadres no introducidos por ser globales, pero se trata de una divisa que hay en balance y no en BDD.*/

   INSERT /*+ APPEND */ INTO BAS_MEN.SALDOS_DESCUADRES_CONSOL
  select OR_ENTITY, FI_EPICON, DESC_EPI,OR_CTAIND, DESC_CUENTA, SALDO_BALANCE, SALDO_BASILEA, DESCUADRE, X.Or_Divisa
      from (
       SELECT BalCo.OR_ENTITY, BalCo.FI_EPICON, BalCo.DESC_EPI, BalCo.OR_CTAIND, BalCo.DESC_CUENTA, sum(NVL(-1 * BalCo.SALDO,0)) as SALDO_BALANCE, sum(SBasi.SALDOBDDINI) as SALDO_BASILEA, sum((-1 * BalCo.SALDO) - SBasi.SALDOBDDINI) as DESCUADRE, BalCo.OR_DIVISA
    FROM BAS_MEN.SALDOS_BASILEA_CONSOL SBasi
       , ( SELECT DISTINCT BC.OR_ENTITY, BC.OR_CTAIND, BC.FI_EPICON, BC.SALDO, BC.DESC_EPI, BC.DESC_CUENTA , BC.OR_DIVISA
             FROM BAS_MEN.BALANCE_CONSOLIDADO_GECO BC
            WHERE OR_ENTITY NOT IN (9487 , 236, 9315, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133, 9134, 9135, 9136, 9137, 9138, 9109) /* 08/10/2021 - NAV - HDEV-74453 - bloquear las inserciones de saldos de BSA 9109 en el ciere de septiembre */
         )                             BalCo
       , BAS_MEN.CUENTAS_DESCUADRAN_TOT tot,
       BAS_MEN.SALDOS_DESCUADRES_CONSOL consol
   WHERE BalCo.OR_ENTITY = SBasi.EMPRESA(+)
     AND BalCo.FI_EPICON = SBasi.EPICON    (+)
     AND BalCo.OR_ENTITY = tot.OR_ENTITY
     AND BalCo.OR_CTAIND = tot.OR_CTAIND
     AND BalCo.FI_EPICON = tot.FI_EPICON
      AND BalCo.OR_DIVISA = SBasi.OR_DIVISA (+)
     AND BalCo.OR_CTAIND  <> 0
     and BalCo.OR_ENTITY = consol.EMPRESA(+)
     AND BalCo.FI_EPICON = consol.EPIGRAF(+)
      AND BalCo.OR_DIVISA = consol.OR_DIVISA(+)
      and consol.empresa is null
      and BalCo.saldo <> 0
     AND ABS((-1*BalCo.SALDO) - SBasi.SALDOBDDINI(+)) > 1
     group by BalCo.OR_ENTITY, BalCo.FI_EPICON, BalCo.DESC_EPI, BalCo.OR_CTAIND, BalCo.DESC_CUENTA, BalCo.OR_DIVISA) x,
     BAS_MEN.SALDOS_BASILEA_CONSOL y
     where x.OR_ENTITY = y.EMPRESA(+)
     AND x.FI_EPICON = y.EPICON    (+)
      AND x.OR_DIVISA = y.OR_DIVISA (+)
     and y.empresa is null;

         commit;

  VN_NUMERR:= 15;

  /* ************************************************************************************************************************************* --
  -- ************************************************************************************************************************************* --
  -- 3. CREACIÓN DE LA TABLA DE CONSOLIDACIÓN CUYOS REGISTROS SE INSERTARÁN EN BASILEA.
  -- ************************************************************************************************************************************* --
  -- ************************************************************************************************************************************* --

  -- Las Entidades Fondos de Titulización (MAESTRO_ENTIDADES_LINLIQ) se generan en el script de solvia. Marcamos el FI_ELIMI1 como LINLIQ */

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.INSERTAR_CONSOL');

  INSERT /*+ APPEND */ INTO BAS_MEN.INSERTAR_CONSOL
  (
    OR_IDREG, OR_CTAIND, FI_CTACON, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA, IN_SEGMBSINI, IN_SEGMBS, IN_SEGMBSIS, IN_SEGMBS0,
    IN_RATEXT, OR_IDPAIS, IN_RATSOB, IN_SRASOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1, FI_SUMEXPO, OR_PORPRO, FI_DN_CN, OR_FAIRVA, OR_PROCED,
    OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP, IN_RATINT, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON, IN_FAIRVABO, FI_PORCON, IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR, OR_DESTPR, IN_RATEXTAVA, IN_RATSOBAVA, OR_PROVI, OR_PROVI1, IN_TIPOREG, OR_DIVISA
  )
  SELECT DISTINCT 0 AS Or_Idreg, COMPTE AS Or_Ctaind, COMPTE AS Fi_Ctacon, EMPRESA, '?' AS Or_EpiInd, A.EPIGRAF, NVL(C.OR_TIPAVA,0) AS Or_TipAva, C.IN_SEGMBSINI, C.IN_SEGMBS
       , C.IN_SEGMBIS, '?' AS In_SegmBS0, 'NR' AS In_RatExt, C.OR_IDPAIS, 'NR' AS In_Ratsob, 'NR' AS In_SRaSob
       , NVL(C.IN_INDMOR, 'NO')/*DECODE(DOT.IN_INDMOR, NULL, NVL(B.IN_INDMOR, 'NO'), DOT.IN_INDMOR) AS In_IndMor, */
       /* 201609 TipOpe para el SUB y ANDORRA que quedaban sin informar.*/
       , CASE WHEN A.EMPRESA = '9156' AND A.EPIGRAF = 030020104000000000000000000000 THEN 'PR'
              WHEN A.EMPRESA = '9109' AND A.EPIGRAF = 030020103030000000000000000000 THEN 'PR'
              ELSE C.OR_TIPOPE
         END AS OR_TIPOPE
       , NVL(C.OR_IDPRO1,  '?')/*DECODE(DOT.OR_IDPRO1, NULL, NVL(C.OR_IDPRO1,  '?'), DOT.OR_IDPRO1) AS Or_IdPro1*/
       , DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO) AS Fi_SumExpo
       , NVL(C.OR_PORPRO,    0)/*DECODE(DOT.OR_PORAPL, NULL, NVL(C.OR_PORPRO,    0), DOT.OR_PORAPL) AS Or_PorPro*/
       , C.FI_DN_CN, 0 AS Or_FairVa, '?' AS Or_ProCed, C.OR_VIDINI, C.OR_VIDRES,  0 AS Or_FairVaCon, C.FI_TIPEXP, 99 AS In_RatInt
       , DECODE(C.FI_TIPEXP, 'Drawn'   , DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0)   AS Or_Dispto
       , DECODE(C.FI_TIPEXP, 'Undrawn' , DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO)
                           , 'CtaOrden', DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0)   AS Or_Disble
       , DECODE(C.FI_TIPEXP, 'OffBalance', DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0) AS Or_Avales
       , 0 OR_FUTURS
       , DECODE(C.FI_TIPEXP, 'Repos', DECODE(A.SALDO, NULL, DECODE(SUBSTR(EPIGRAF,1,5), '02002', A.SALDO_BALANCE*-1
                                                                                      , '02003', A.SALDO_BALANCE*-1
                                                                                      , '02004', A.SALDO_BALANCE*-1
                                                                                      ,          A.SALDO_BALANCE
                                                                   )
                                                          , DECODE(SUBSTR(EPIGRAF,1,5), '02002', A.SALDO*-1
                                                                                      , '02003', A.SALDO*-1
                                                                                      , '02004', A.SALDO*-1
                                                                                      ,          A.SALDO)),0) AS Or_Repos
      , DECODE(C.FI_TIPEXP,'Ajustes',DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0) AS Or_Ajuval
      , DECODE(C.FI_TIPEXP, 'Drawn', DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0) AS Or_DisptoCon
      , DECODE(C.FI_TIPEXP, 'Undrawn' , DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO)
                          , 'CtaOrden', DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0) AS Or_DisbleCon
      , DECODE(C.FI_TIPEXP, 'OffBalance', DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0) AS Or_AvalesCon
      , 0 OR_FUTURSCON
      , DECODE(C.FI_TIPEXP, 'Repos', DECODE(A.SALDO, NULL, DECODE(SUBSTR(EPIGRAF,1,5), '02002', A.SALDO_BALANCE*-1
                                                                                     , '02003', A.SALDO_BALANCE*-1
                                                                                     , '02004', A.SALDO_BALANCE*-1
                                                                                     ,          A.SALDO_BALANCE
                                                                 )
                                                         ,
                                                            DECODE(SUBSTR(EPIGRAF,1,5), '02002', A.SALDO*-1,
                                                                                        '02003', A.SALDO*-1,
                                                                                        '02004', A.SALDO*-1, A.SALDO)),0) AS Or_ReposCon
      , DECODE(C.FI_TIPEXP,'Ajustes',DECODE(A.SALDO,NULL,A.SALDO_BALANCE,A.SALDO),0) AS Or_AjuvalCon
      , 0 AS In_FairVaBo, 1 AS Fi_PorCon, 'STDA' AS In_Metode
      , CASE
             WHEN A.EPIGRAF = '010010301010100000000000000000' AND B.CODCSB IS NOT NULL THEN    /* Marcaje LINLIQ para saldos de insertados de fondos de titulización*/
                     'LINLIQ'
             ELSE
                  C.FI_ELIMI1
       END AS FI_ELIMI1
      , 'N' AS In_Seg_Hip, 'FIC00500' AS Or_CodGar, '?' AS Or_TipGar, 0 AS Or_DestPr, 99 AS In_RatExtAva, 'NR' AS In_RatSobAva
      , 0
      , 1 AS Or_Provi1
      , DECODE(A.DESCUADRE, NULL, 'SC', 'DC') AS In_TipoReg
      , A.OR_DIVISA
    FROM (SELECT EMPRESA, EPIGRAF, COMPTE, SUM(DESCUADRE) AS Descuadre , SUM(SALDO_BALANCE) AS Saldo_Balance, SUM(NVL(SALDO_BASILEA,0)) AS Saldo_Basilea
               , SUM(SALDO_BALANCE) - SUM(NVL(SALDO_BASILEA,0)) AS Saldo, OR_DIVISA
            FROM BAS_MEN.SALDOS_DESCUADRES_CONSOL
           GROUP BY EMPRESA, EPIGRAF, COMPTE, OR_DIVISA
         )                                   A
       , BAS_MEN.MAESTRO_ENTIDADES_LINLIQ         B
       , BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS C
   WHERE A.EPIGRAF    = C.FI_EPICON
     AND C.INCORPORAR = 'SI'
     AND abs(a.saldo) > 0.1
     AND compte      <> 0
     AND A.EMPRESA = B.CODCSB(+);

   COMMIT;

   VN_NUMERR:= 20;

   --
   -- Eliminación de las cuentas a no insertar.
   --
  DELETE BAS_MEN.INSERTAR_CONSOL
   WHERE (OR_ENTITY, FI_EPICON) in (SELECT DISTINCT OR_ENTITY, FI_EPICON FROM BAS_MEN.EPICON_NO_INSERTAR);

   COMMIT;

   -- ELIMINAMOS LOS REGISTROS EN LOS QUE EL IMPORTE SEA MAYOR QUE -1 Y MENOS QUE 1
   DELETE BAS_MEN.INSERTAR_CONSOL
    WHERE FI_SUMEXPO > -1
       AND FI_SUMEXPO < 1;

   COMMIT;

   VN_NUMERR:= 23;

     --
     -- Eliminación de compromisos de compra BSA: Eliminar el epígrafe 030020302000000000000000000000 de la entidad 9109 de Andorra - ACI 20171220
     --
   DELETE BAS_MEN.INSERTAR_CONSOL
    WHERE FI_EPICON = '030020302000000000000000000000'
            AND OR_ENTITY = 9109;

   COMMIT;

    -- FC, REGISTROS DE FILIALES DEL CONSOLIDADO.
    UPDATE BAS_MEN.INSERTAR_CONSOL
       SET IN_TIPOREG = 'FC'
     WHERE OR_ENTITY  NOT IN (81,185,8211,42);

    -- FF, REGISTROS DE Fincom DEL CONSOLIDADO.
    UPDATE BAS_MEN.INSERTAR_CONSOL
       SET IN_TIPOREG = 'FF'
     WHERE OR_ENTITY  = 242;

    COMMIT;

    VN_NUMERR:= 25;

    /* Incomed se insertará por saldos de forma agregada, por este motivo una vez insertado hay que marcar el o los registros del epígrafe 010040205060100000000000000000 con el fi_elimi1 = EQUITY - 201706*/
         UPDATE BAS_MEN.INSERTAR_CONSOL
            SET FI_ELIMI1 = 'EQUITY'
          WHERE FI_EPICON = '010040205060100000000000000000'
            AND OR_ENTITY = 9819;

         COMMIT;

    VN_NUMERR:= 27;

  --Insertamos los registros de BS FINCOM.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_BSFINCOM_FF');

  INSERT /*+ APPEND */ INTO BAS_MEN.BASILEA_BSFINCOM_FF
         ( OR_IDREG, OR_CTAIND, fi_ctacon, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA, IN_SEGMBSINI, IN_SEGMBS --,IN_SEGMBIS RBR 27/10/2020
         , IN_SEGMBS0, IN_RATEXT,OR_IDPAIS, IN_RATSOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1
         , FI_SUMEXPO, OR_FAIRVA, OR_PROCED, OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP, IN_RATINT
         , OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON
         , OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON, IN_FAIRVABO, FI_PORCON, IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR
         , OR_DESTPR, IN_RATEXTAVA, IN_RATSOBAVA, OR_PROVAPL, OR_PROVI1, IN_TIPOREG, IN_ITITSN, EAD, EADCON, CCF, or_divisa
         )
  SELECT rownum, A.OR_CTAIND, 0, A.OR_ENTITY, A.OR_EPIIND, A.FI_EPICON, A.OR_TIPAVA, '106' IN_SEGMBSINI,
                'Resto Minorista' IN_SEGMBS,
                --'Other Retail' IN_SEGMBSIS, --RBR 27/10/2020 Se elimina campo por obsoleto, ademas añadimos values al insert
                A.IN_SEGMBS0, A.IN_RATEXT, 724 OR_IDPAIS, A.IN_RATSOB,
                A.IN_INDMOR, 'PR' OR_TIPOPE, A.OR_IDPRO1, A.FI_SUMEXPO,  A.OR_FAIRVA,
                A.OR_PROCED, 99999999 OR_VIDINI, 99999999 OR_VIDRES, A.OR_FAIRVACON,
                a.FI_TIPEXP, A.IN_RATINT, A.OR_DISPTO, A.OR_DISBLE,
                A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_AJUVAL, A.OR_DISPTOCON,
                A.OR_DISBLECON, A.OR_AVALESCON, A.OR_FUTURSCON, A.OR_REPOSCON, A.OR_AJUVALCON, A.IN_FAIRVABO, A.FI_PORCON,
                A.IN_METODE, FI_ELIMI1, A.IN_SEG_HIP, 'FIC00500' OR_CODGAR, A.OR_TIPGAR, A.OR_DESTPR, A.IN_RATEXTAVA, A.IN_RATSOBAVA,
                DECODE(A.OR_IDPRO1,'ES',(A.OR_PORPRO/100)*(A.OR_DISPTO+A.OR_DISBLE+A.OR_AVALES),
                                   'OT', OR_PROVI,
                                   'AD', OR_PROVI, 0) OR_PROVI,
                A.OR_PROVI1, IN_TIPOREG, 'NO' IN_ITITSN,
                DECODE(SUBSTR(FI_EPICON,1,5), '01004', FI_SUMEXPO, 0) EAD, DECODE(SUBSTR(FI_EPICON,1,5), '01004', FI_SUMEXPO, 0) EADCON,
                DECODE(SUBSTR(FI_EPICON,1,5), '01004', 1, 0) CCF, or_DIVISA
           FROM BAS_MEN.INSERTAR_CONSOL A
          WHERE IN_TIPOREG = 'FF';

         COMMIT;

    VN_NUMERR:= 29;

    DELETE BAS_MEN.INSERTAR_CONSOL
            WHERE IN_TIPOREG = 'FF';

    COMMIT;

    VN_NUMERR:= 30;


 --Insertamos en la tabla de exposiciones los registros que no se encuentran en Basilea, y sí en el balance,
 --y los registros que descuadren entre los saldos de basilea y el balance.

    SELECT MAX(OR_IDREG)
     INTO VV_IDREG
     FROM BAS_MEN.BASILEA;

     update BAS_MEN.INSERTAR_CONSOL
     set OR_IDREG = VV_IDREG + ROWNUM;

     commit;


    INSERT INTO BAS_MEN.BASILEA
               (OR_IDREG, OR_CTAIND, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA, IN_SEGMBSINI, IN_SEGMBS, --IN_SEGMBIS, JCVJCV ERR
               IN_SEGMBS0, IN_RATEXT,OR_IDPAIS, IN_RATSOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1,
               --FI_SUMEXPO, JCVJCV ERR
               -- FI_DN_CN, JCVJCV ERR */
               OR_FAIRVA, OR_PROCED, OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP, -- IN_RATINT,
               OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_DISPTOCON,
               OR_DISBLECON,
               OR_AVALESCON, OR_FUTURSCON,OR_REPOSCON,
               OR_AJUVALCON, IN_FAIRVABO, FI_PORCON,
               IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR, OR_DESTPR, -- IN_RATEXTAVA, JCVJCV ERR
               OR_PROVAPL, IN_TIPOREG, IN_SRATIN, OR_SEGGES, IN_ITITSN, OR_DIVISA, OR_IDMES)
        SELECT OR_IDREG, A.OR_CTAIND, A.OR_ENTITY, A.OR_EPIIND, A.FI_EPICON, A.OR_TIPAVA, A.IN_SEGMBSINI, A.IN_SEGMBS, --A.IN_SEGMBSIS, JCVJCV ERR
               A.IN_SEGMBS0, A.IN_RATEXT, A.OR_IDPAIS, A.IN_RATSOB, A.IN_INDMOR, A.OR_TIPOPE, A.OR_IDPRO1,
               -- A.FI_SUMEXPO, JCVJCV ERR
               --A.FI_DN_CN, JCVJCV ERR */
               A.OR_FAIRVA, A.OR_PROCED, A.OR_VIDINI, A.OR_VIDRES, A.OR_FAIRVACON, A.FI_TIPEXP, --A.IN_RATINT, JCVJCV ERR
               A.OR_DISPTO, A.OR_DISBLE, A.OR_AVALES, A.OR_FUTURS, A.OR_REPOS, A.OR_AJUVAL, A.OR_DISPTOCON,
               A.OR_DISBLECON, A.OR_AVALESCON, A.OR_FUTURSCON, A.OR_REPOSCON,
               A.OR_AJUVALCON, A.IN_FAIRVABO, A.FI_PORCON,
               A.IN_METODE, A.FI_ELIMI1, A.IN_SEG_HIP, A.OR_CODGAR, A.OR_TIPGAR, A.OR_DESTPR, --A.IN_RATEXTAVA, JCVJCV ERR
               DECODE(A.OR_IDPRO1,'ES', (A.OR_PORPRO/100)*(A.OR_DISPTO+A.OR_DISBLE+A.OR_AVALES),
                                  'OT', or_provi,
                                  'AD', OR_PROVI, 0) OR_PROVI,
               A.IN_TIPOREG,
               case when in_indmor = 'SI' then 'MORA'
                         when in_segmbsini in ('103', '104', '106', '107') then 'SSOR'
                   else 'SR'
               end , 99, 'NO', or_divisa,
               VN_MESPRO
          FROM BAS_MEN.INSERTAR_CONSOL A
         WHERE IN_TIPOREG <> 'FF';

       COMMIT;

    VN_NUMERR:= 33;

 --Inserción de los datos de BSFincom.

   SELECT MAX(OR_IDREG)
     INTO VV_IDREG
     FROM BAS_MEN.BASILEA;

    update BAS_MEN.BASILEA_BSFINCOM_FF
     set OR_IDREG = VV_IDREG + ROWNUM;

     commit;

  INSERT  INTO BAS_MEN.BASILEA (OR_IDREG, OR_CTAIND, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA, IN_SEGMBS, --IN_SEGMBIS, JCVJCV ERR
          IN_SEGMBS0,
          IN_RATEXT, IN_RATSOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1, --FI_SUMEXPO, JCVJCV ERR
          --FI_DN_CN, JCVJCV ERR */
          OR_FAIRVA,
          OR_PROCED, OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP, --IN_RATINT, JCVJCV ERR
          OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS,
          OR_REPOS, OR_AJUVAL, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON, IN_FAIRVABO,
          FI_PORCON, IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR, OR_DESTPR, --IN_RATEXTAVA, JCVJCV ERR
          OR_PROVAPL,
          --OR_PROVI1, JCVJCV ERR
          IN_SEGMBSINI, IN_TIPOREG, IN_SRATIN, OR_SEGGES, FI_EADAIRB, FI_EADCONAIRB, FI_CCFAIRB, IN_ITITSN, OR_DIVISA, OR_IDMES, OR_IDPAIS)
   SELECT OR_IDREG, OR_CTAIND, OR_ENTITY, OR_EPIIND, FI_EPICON, OR_TIPAVA, IN_SEGMBS, --IN_SEGMBIS, JCVJCV ERR
          IN_SEGMBS0,
          IN_RATEXT, IN_RATSOB, IN_INDMOR, OR_TIPOPE, OR_IDPRO1, --FI_SUMEXPO, JCVJCV ERR
          -- FI_DN_CN, JCVJCV ERR   */
          OR_FAIRVA,
          OR_PROCED, OR_VIDINI, OR_VIDRES, OR_FAIRVACON, FI_TIPEXP, --IN_RATINT, JCVJCV ERR
          OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS,
          OR_REPOS, OR_AJUVAL, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON, IN_FAIRVABO,
          FI_PORCON, IN_METODE, FI_ELIMI1, IN_SEG_HIP, OR_CODGAR, OR_TIPGAR, OR_DESTPR, --IN_RATEXTAVA, JCVJCVERR
          OR_PROVAPL,
          --OR_PROVI1, JCVJCV ERR
          IN_SEGMBSINI, IN_TIPOREG,
          case when in_indmor = 'SI' then 'MORA'
               when in_segmbsini in ('103', '104', '106', '107') then 'SSOR'
          else 'SR'
          end, 99, EAD, EADCON, CCF, IN_ITITSN, OR_DIVISA,
          VN_MESPRO, OR_IDPAIS
     FROM BAS_MEN.BASILEA_BSFINCOM_FF A;

   COMMIT;

  VN_NUMERR:= 99;

  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_UPD_OK = VN_COUNT
   WHERE PROCES = '15.2 FNC_SALDOS_DESCUADRES_CON '
     AND ESTAT  = 'INICIADO';

   COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '15.2 FNC_SALDOS_DESCUADRES_CON '
        AND ESTAT  = 'INICIADO';

   COMMIT;
   RAISE;
end;

/

SELECT * FROM sys.user_errors WHERE NAME = 'FNC_SALDOS_DESCUADRES_CON';

 /*
 select or_entity, or_ctaind, OR_DISPTO,OR_DISBLE,OR_AVALES, OR_FUTURS,OR_REPOS,OR_AJUVAL,OR_DISPTOCON,OR_DISBLECON
  ,OR_AVALESCON  ,OR_FUTURSCON,OR_REPOSCON,OR_AJUVALCON,IN_FAIRVABO
 from BAS_MEN.INSERTAR_CONSOL
   --where or_entity in  (9046, 9213, 9650);
 where or_entity in  (9213, 9315, 9650, 236, 9046) ;  (9487 , 236, 9315, 9125, 9128, 9133, 9129, 9126, 9127, 9134, 9130)
  */



 /*
 select or_entity, or_ctaind, OR_DISPTO,OR_DISBLE,OR_AVALES, OR_FUTURS,OR_REPOS,OR_AJUVAL,OR_DISPTOCON,OR_DISBLECON
  ,OR_AVALESCON  ,OR_FUTURSCON,OR_REPOSCON,OR_AJUVALCON,IN_FAIRVABO
 from BAS_MEN.INSERTAR_CONSOL
   --where or_entity in  (9046, 9213, 9650);
 where or_entity in  (9213, 9315, 9650, 236, 9046) ;  (9487 , 236, 9315, 9125, 9128, 9133, 9129, 9126, 9127, 9134, 9130)
  */

create or replace PROCEDURE  BAS_MEN.BASI_SALDOS_DESCUADRES_CON IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VD_FECPRO     DATE;
   VV_RETORNO    VARCHAR2(2):='OK';

BEGIN

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  BAS_MEN.FNC_SALDOS_DESCUADRES_CON;
  COMMIT;

END;

/
  
--bkd10095=====================================================================================================
Select 'bkd10095' As Compilando from dual;

create or replace PROCEDURE BAS_MEN.FNC_SUCEPT_UPDATE_BASILEA IS

  VV_RETORNO         VARCHAR2(2)       DEFAULT 'OK';
  VN_NUMERR          NUMBER(6)         DEFAULT 0;
  V_EXIS_DATOS       VARCHAR2(1)       DEFAULT 'N';
  VN_NREGS_INS       NUMBER(12)        DEFAULT 0;

  VV_NOM_PROCESO     BAS_MEN.CONTROL_PROCES.PROCES%TYPE;
  VV_MENSAJE_ERR     VARCHAR2(255)     DEFAULT 'KO';

BEGIN
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  -- Información en el control de LOG (Tabla CONTROL_PROCESO) del inicio del proceso
  VV_NOM_PROCESO := 'FNC_SUCEPT_BASILEA_UPDATE';

  BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO, 'INICIADO');
  COMMIT;
  VN_NUMERR:= 1;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAPA_USO_UPDATE_FINAL_TEMP');
  COMMIT;
  VN_NUMERR:= 2;

  INSERT  /*+ parallel(a 4) */
    INTO BAS_MEN.MAPA_USO_UPDATE_FINAL_TEMP a
      select   OR_IDREG ,IN_ACTIVO  ,IN_ACTIVO_CIR ,IN_EXISTENCIAS ,IN_GRUP_IDPER ,IN_IDCALIFIC ,IN_IDCALIFICREL
              ,IN_NIFGRUPCON ,IN_NUMEMP ,IN_SEGMBS2 ,IN_SUCEPT ,IN_TIPOREG
              ,IN_VTAGRU ,IN_VTAGRU_CONS ,OR_CLAVISO ,OR_CODGAR ,IN_BICREVISAT ,OR_FECALTBLO ,OR_FECPUN0
              ,OR_IDCNAE ,OR_INDHOLDING ,OR_MODRAT0 ,OR_MODSCO ,OR_PERSON ,OR_PESOW ,OR_PUNT0 ,OR_PUNTGRUP
              ,OR_PUNTSCO ,OR_RATINT ,OR_SEGFAC ,OR_SEGFIC ,OR_SEGGES ,OR_SEGRIE ,OR_SITUAC0
              ,OR_TIPIDE ,NOM_PROCESO ,IN_ACTIVO_CONS ,IN_NUMEMP_CONS, OR_MODGRUP
              from (
                    SELECT  /*+ parallel(src_t 4) */ OR_IDREG ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS ,null as IN_GRUP_IDPER ,IN_IDCALIFIC ,IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON  ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT  ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS ,0 as OR_CLAVISO ,null as OR_CODGAR ,null as IN_BICREVISAT ,null as OR_FECALTBLO ,OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as  OR_INDHOLDING ,OR_MODRAT0 ,null as OR_MODSCO ,0 as OR_PERSON ,OR_PESOW ,OR_PUNT0 ,OR_PUNTGRUP
                            ,0 as OR_PUNTSCO  ,OR_RATINT ,0 as OR_SEGFAC ,OR_SEGFIC ,0 as OR_SEGGES ,OR_SEGRIE ,OR_SITUAC0
                            ,0 as  OR_TIPIDE ,'SUCEPT_EMP' AS NOM_PROCESO ,0 as IN_ACTIVO_CONS  ,0 as IN_NUMEMP_CONS, OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_EMPRESAS_ORIG  src
                    UNION ALL
                    SELECT  OR_IDREG  ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS  ,null as IN_GRUP_IDPER ,IN_IDCALIFIC ,0 as IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON  ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT  ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS  ,OR_CLAVISO ,null as OR_CODGAR ,null as IN_BICREVISAT ,OR_FECALTBLO ,OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as  OR_INDHOLDING ,OR_MODRAT0 ,null as OR_MODSCO ,0 as OR_PERSON ,0 as OR_PESOW ,OR_PUNT0 ,0 as OR_PUNTGRUP
                            ,0 as OR_PUNTSCO  ,OR_RATINT ,0 as OR_SEGFAC ,OR_SEGFIC ,0 as OR_SEGGES ,OR_SEGRIE ,OR_SITUAC0
                            ,0 as  OR_TIPIDE  ,'SUCEPT_CCAA' AS NOM_PROCESO   ,0 as IN_ACTIVO_CONS  ,0 as IN_NUMEMP_CONS, null as OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_CCAA_ORIG
                    UNION ALL
                    SELECT  OR_IDREG  ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS  ,null as IN_GRUP_IDPER  ,0 as IN_IDCALIFIC  ,0 as IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON  ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT  ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS  ,0 as OR_CLAVISO ,null as OR_CODGAR ,null as IN_BICREVISAT ,null as OR_FECALTBLO ,0 as OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as  OR_INDHOLDING ,null as OR_MODRAT0   ,OR_MODSCO ,0 as OR_PERSON ,0 as OR_PESOW ,0 as OR_PUNT0 ,0 as OR_PUNTGRUP
                            ,OR_PUNTSCO ,0 as OR_RATINT ,0 as OR_SEGFAC ,null as OR_SEGFIC ,0 as OR_SEGGES ,null as OR_SEGRIE ,null as  OR_SITUAC0
                            ,0 as  OR_TIPIDE  ,'SUCEPT_CRED' AS NOM_PROCESO   ,0 as IN_ACTIVO_CONS  ,0 as IN_NUMEMP_CONS, null as OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_CREDITOS_ORIG
                    UNION ALL
                    SELECT  OR_IDREG ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS ,null as IN_GRUP_IDPER ,IN_IDCALIFIC ,IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS ,0 as OR_CLAVISO ,null as OR_CODGAR ,IN_BICREVISAT ,null as OR_FECALTBLO ,OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as  OR_INDHOLDING ,OR_MODRAT0 ,null as OR_MODSCO ,0 as OR_PERSON ,0 as OR_PESOW ,OR_PUNT0 ,0 as OR_PUNTGRUP
                            ,0 as OR_PUNTSCO ,OR_RATINT ,0 as OR_SEGFAC ,null as OR_SEGFIC ,0 as OR_SEGGES ,null as OR_SEGRIE ,OR_SITUAC0
                            ,0 as  OR_TIPIDE  ,'SUCEPT_EEFF' AS NOM_PROCESO ,0 as IN_ACTIVO_CONS ,0 as IN_NUMEMP_CONS, null as OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_EEFF_ORIG
                    UNION ALL
                    SELECT  OR_IDREG ,IN_ACTIVO ,IN_ACTIVO_CIR ,IN_EXISTENCIAS ,IN_GRUP_IDPER ,IN_IDCALIFIC ,0 as IN_IDCALIFICREL
                            ,IN_NIFGRUPCON ,IN_NUMEMP ,IN_SEGMBS2 ,IN_SUCEPT  ,IN_TIPOREG
                            ,IN_VTAGRU ,IN_VTAGRU_CONS ,0 as OR_CLAVISO ,null as OR_CODGAR ,null as IN_BICREVISAT ,null as OR_FECALTBLO ,OR_FECPUN0
                            ,OR_IDCNAE ,OR_INDHOLDING ,OR_MODRAT0 ,null as OR_MODSCO ,OR_PERSON ,OR_PESOW ,OR_PUNT0 ,OR_PUNTGRUP
                            ,0 as OR_PUNTSCO ,OR_RATINT ,OR_SEGFAC ,OR_SEGFIC ,OR_SEGGES ,OR_SEGRIE ,OR_SITUAC0
                            ,OR_TIPIDE ,'SUCEPT_OFEX' AS NOM_PROCESO ,IN_ACTIVO_CONS ,IN_NUMEMP_CONS, OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_ORIG_OFEX
                    UNION ALL
                    SELECT    /*+ parallel(src_t 4) */ OR_IDREG ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS ,null as IN_GRUP_IDPER ,0 as IN_IDCALIFIC ,0 as IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON  ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT  ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS ,0 as OR_CLAVISO ,null as OR_CODGAR ,null as IN_BICREVISAT ,null as OR_FECALTBLO ,0 as OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as  OR_INDHOLDING ,null as OR_MODRAT0 ,OR_MODSCO ,0 as OR_PERSON ,0 as OR_PESOW ,0 as OR_PUNT0  ,0 as OR_PUNTGRUP
                            ,OR_PUNTSCO ,0 as OR_RATINT ,0 as OR_SEGFAC ,null as OR_SEGFIC ,0 as OR_SEGGES ,null as OR_SEGRIE ,null as OR_SITUAC0
                            ,0 as  OR_TIPIDE  ,'SUCEPT_PRES' AS NOM_PROCESO ,0 as IN_ACTIVO_CONS  ,0 as IN_NUMEMP_CONS, null as OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_PRESTAMOS_ORIG src_t
                    UNION ALL
                    SELECT  OR_IDREG ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS ,null as IN_GRUP_IDPER ,IN_IDCALIFIC ,0 as IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON  ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT  ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS ,0 as OR_CLAVISO ,null as OR_CODGAR ,null as IN_BICREVISAT ,null as OR_FECALTBLO ,OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as  OR_INDHOLDING ,OR_MODRAT0 ,null as OR_MODSCO ,0 as OR_PERSON ,0 as OR_PESOW ,OR_PUNT0,0 as OR_PUNTGRUP
                            ,0 as OR_PUNTSCO  ,OR_RATINT,0 as OR_SEGFAC,null as OR_SEGFIC ,0 as OR_SEGGES ,null as OR_SEGRIE ,OR_SITUAC0
                            ,0 as OR_TIPIDE ,'SUCEPT_SOB' AS NOM_PROCESO ,0 as IN_ACTIVO_CONS ,0 as IN_NUMEMP_CONS, null as OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_SOBERANOS_ORIG
                    UNION ALL
                    SELECT  /*+ parallel(src_t 4) */ OR_IDREG ,0 as IN_ACTIVO ,0 as IN_ACTIVO_CIR ,0 as IN_EXISTENCIAS ,null as IN_GRUP_IDPER ,0 as IN_IDCALIFIC ,0 as IN_IDCALIFICREL
                            ,null as IN_NIFGRUPCON  ,0 as IN_NUMEMP ,null as IN_SEGMBS2 ,IN_SUCEPT  ,null as IN_TIPOREG
                            ,0 as IN_VTAGRU ,0 as IN_VTAGRU_CONS  ,0 as OR_CLAVISO  ,null as OR_CODGAR  ,null as IN_BICREVISAT  ,null as OR_FECALTBLO ,0 as OR_FECPUN0
                            ,0 as OR_IDCNAE ,null as OR_INDHOLDING ,null as OR_MODRAT0 ,OR_MODSCO ,0 as OR_PERSON ,0 as OR_PESOW  ,0 as OR_PUNT0 ,0 as OR_PUNTGRUP
                            ,OR_PUNTSCO,0 as OR_RATINT ,0 as OR_SEGFAC ,null as OR_SEGFIC ,0 as OR_SEGGES ,null as OR_SEGRIE ,null as OR_SITUAC0
                            ,0 as  OR_TIPIDE  ,'SUCEPT_TARG' AS NOM_PROCESO ,0 as IN_ACTIVO_CONS  ,0 as IN_NUMEMP_CONS, null as OR_MODGRUP
                      FROM  BAS_MEN.MAPA_USO_TARJETAS_ORIG src_t
                   );

  COMMIT;
  
  VN_NUMERR:= 3;
  
  dbms_stats.gather_table_stats('BAS_MEN','MAPA_USO_UPDATE_FINAL_TEMP', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );
  
  VN_NUMERR:= 4;

  MERGE /*+ full(iBasi) parallel(iBasi 4) */ INTO BAS_MEN.BASILEA iBasi
     USING (select  /*+ parallel(b 4) */ OR_IDREG, IN_ACTIVO, IN_ACTIVO_CIR, IN_EXISTENCIAS, IN_GRUP_IDPER, IN_IDCALIFIC, IN_IDCALIFICREL
                    , IN_NIFGRUPCON, IN_NUMEMP, IN_SEGMBS2, IN_SUCEPT, IN_TIPOREG, IN_VTAGRU, IN_VTAGRU_CONS, OR_CLAVISO, OR_CODGAR, IN_BICREVISAT, OR_FECALTBLO
                    , OR_FECPUN0, OR_IDCNAE, OR_INDHOLDING, OR_MODRAT0, OR_MODSCO, OR_PERSON, OR_PESOW, OR_PUNT0, OR_PUNTGRUP, OR_PUNTSCO, OR_RATINT, OR_SEGFAC
                    , OR_SEGFIC, OR_SEGGES, OR_SEGRIE, OR_SITUAC0, OR_TIPIDE, NOM_PROCESO, IN_ACTIVO_CONS, IN_NUMEMP_CONS, OR_MODGRUP
              from  BAS_MEN.MAPA_USO_UPDATE_FINAL_TEMP b
            ) src
                    ON (iBasi.OR_IDREG = src.OR_IDREG)
                      WHEN MATCHED THEN
                          UPDATE
                             SET  iBasi.IN_ACTIVO     = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                   THEN src.IN_ACTIVO
                                                                ELSE iBasi.IN_ACTIVO
                                                              END,
                                    iBasi.IN_ACTIVO_CIR   = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                   THEN src.IN_ACTIVO_CIR
                                                                ELSE iBasi.IN_ACTIVO_CIR
                                                              END,
                                    iBasi.IN_EXISTENCIAS  = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                   THEN src.IN_EXISTENCIAS
                                                                ELSE iBasi.IN_EXISTENCIAS
                                                              END,
                                    iBasi.IN_GRUP_IDPER   = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                   THEN src.IN_GRUP_IDPER
                                                                ELSE iBasi.IN_GRUP_IDPER
                                                              END,
                                    iBasi.IN_IDCALIFIC    = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_EEFF','SUCEPT_OFEX','SUCEPT_SOB')
                                                                    THEN src.IN_IDCALIFIC
                                                                 ELSE iBasi.IN_IDCALIFIC
                                                              END,
                                    iBasi.IN_IDCALIFICREL   = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_EEFF')
                                                                    THEN src.IN_IDCALIFICREL
                                                                 ELSE iBasi.IN_IDCALIFICREL
                                                              END,
                                    iBasi.IN_NIFGRUPCON   = CASE
                                                               WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_NIFGRUPCON
                                                                 ELSE iBasi.IN_NIFGRUPCON
                                                              END,
                                    iBasi.IN_NUMEMP     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_NUMEMP
                                                                 ELSE iBasi.IN_NUMEMP
                                                              END,
                                    iBasi.IN_SEGMBS2    = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_SEGMBS2
                                                                 ELSE iBasi.IN_SEGMBS2
                                                              END,
                                    iBasi.IN_SUCEPT     = src.IN_SUCEPT,
                                    iBasi.IN_TIPOREG    = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_TIPOREG
                                                                ELSE iBasi.IN_TIPOREG
                                                              END,
                                    iBasi.IN_VTAGRU     = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_VTAGRU
                                                                 ELSE iBasi.IN_VTAGRU
                                                              END,
                                    iBasi.IN_VTAGRU_CONS  = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                   THEN src.IN_VTAGRU_CONS
                                                                ELSE iBasi.IN_VTAGRU_CONS
                                                              END,
                                    iBasi.OR_CLAVISO    = CASE
                                                                WHEN src.NOM_PROCESO = 'SUCEPT_CCAA'
                                                                   THEN src.OR_CLAVISO
                                                                ELSE iBasi.OR_CLAVISO
                                                              END,
                                    iBasi.OR_CODGAR     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_EEFF'
                                                                    THEN DECODE(src.IN_SUCEPT, 'EFNSCC', 'GR 12104',  iBasi.OR_CODGAR)
                                                                 ELSE iBasi.OR_CODGAR
                                                              END,
                                    iBasi.OR_CODIGO_BIC   = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_EEFF'
                                                                    THEN src.IN_BICREVISAT
                                                                 ELSE iBasi.OR_CODIGO_BIC
                                                              END,
                                    iBasi.OR_FECALTBLO    = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_CCAA'
                                                                    THEN src.OR_FECALTBLO
                                                                 ELSE iBasi.OR_FECALTBLO
                                                              END,
                                    iBasi.OR_FECPUN0    = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_EEFF','SUCEPT_OFEX','SUCEPT_SOB')
                                                                    THEN src.OR_FECPUN0
                                                                 ELSE iBasi.OR_FECPUN0
                                                              END,
                                    iBasi.OR_IDCNAE     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.OR_IDCNAE
                                                                 ELSE iBasi.OR_IDCNAE
                                                              END,
                                    iBasi.OR_INDHOLDING   = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.OR_INDHOLDING
                                                                 ELSE iBasi.OR_INDHOLDING
                                                              END,
                                    iBasi.OR_MODRAT0    = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_EEFF','SUCEPT_OFEX','SUCEPT_SOB')
                                                                    THEN src.OR_MODRAT0
                                                                 ELSE iBasi.OR_MODRAT0
                                                              END,
                                    iBasi.OR_MODSCO     = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_CRED','SUCEPT_PRES','SUCEPT_TARG')
                                                                    THEN src.OR_MODSCO
                                                                 ELSE iBasi.OR_MODSCO
                                                              END,
                                    iBasi.OR_PERSON     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.OR_PERSON
                                                                 ELSE iBasi.OR_PERSON
                                                              END,
                                    iBasi.OR_PESOW      = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_OFEX')
                                                                    THEN src.OR_PESOW
                                                                 ELSE iBasi.OR_PESOW
                                                              END,
                                    iBasi.OR_PUNT0      = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_EEFF','SUCEPT_OFEX','SUCEPT_SOB')
                                                                    THEN src.OR_PUNT0
                                                                 ELSE iBasi.OR_PUNT0
                                                              END,
                                    iBasi.OR_PUNTGRUP     = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_OFEX')
                                                                    THEN src.OR_PUNTGRUP
                                                                 ELSE iBasi.OR_PUNTGRUP
                                                              END,
                                    iBasi.OR_PUNTSCO    = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_CRED','SUCEPT_PRES','SUCEPT_TARG')
                                                                    THEN src.OR_PUNTSCO
                                                                 ELSE iBasi.OR_PUNTSCO
                                                              END,
                                    iBasi.OR_RATINT     = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_EEFF','SUCEPT_SOB','SUCEPT_OFEX')
                                                                    THEN src.OR_RATINT
                                                                 ELSE iBasi.OR_RATINT
                                                              END,
                                    iBasi.OR_SEGFAC     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.OR_SEGFAC
                                                                 ELSE iBasi.OR_SEGFAC
                                                              END,
                                    iBasi.OR_SEGFIC     = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_OFEX')
                                                                    THEN src.OR_SEGFIC
                                                                 ELSE iBasi.OR_SEGFIC
                                                              END,
                                    iBasi.OR_SEGGES     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.OR_SEGGES
                                                                 ELSE iBasi.OR_SEGGES
                                                              END,
                                    iBasi.OR_SEGRIE     = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_OFEX')
                                                                    THEN src.OR_SEGRIE
                                                                 ELSE iBasi.OR_SEGRIE
                                                              END,
                                    iBasi.OR_SITUAC0    = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_CCAA','SUCEPT_EEFF','SUCEPT_SOB','SUCEPT_OFEX')
                                                                    THEN src.OR_SITUAC0
                                                                 ELSE iBasi.OR_SITUAC0
                                                              END,
                                    iBasi.OR_TIPIDE     = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.OR_TIPIDE
                                                                 ELSE iBasi.OR_TIPIDE
                                                              END,
                                    iBasi.IN_ACTIVO_CONS = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_ACTIVO_CONS
                                                                 ELSE iBasi.IN_ACTIVO_CONS
                                                              END,
                                    iBasi.IN_NUMEMP_CONS = CASE
                                                                 WHEN src.NOM_PROCESO = 'SUCEPT_OFEX'
                                                                    THEN src.IN_NUMEMP_CONS
                                                                 ELSE iBasi.IN_NUMEMP_CONS
                                                              END,
                                    iBasi.OR_MODGRUP    = CASE
                                                                 WHEN src.NOM_PROCESO IN ('SUCEPT_EMP','SUCEPT_OFEX')
                                                                    THEN src.OR_MODGRUP
                                                                 ELSE iBasi.OR_MODGRUP
                                                              END;

  COMMIT;

  VN_NUMERR:= 99;

  -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
  BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO, 'FINALIZADO', VV_RETORNO);

  COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización del fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
        VV_MENSAJE_ERR:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' C.E.'||VN_NUMERR,1,255);
        VV_RETORNO        := 'KO';
        ROLLBACK;

        BAS_MEN.SP_INFO_CONTROL_PROCES (VV_NOM_PROCESO, 'FINALIZADO', VV_RETORNO, VV_MENSAJE_ERR);
        RAISE;
        COMMIT;
END;

/

create or replace PROCEDURE     BAS_MEN.BASI_SUCEPT_UPDATE_BASILEA IS

   vproces      VARCHAR2(40);
   vnumerr      NUMBER(2);
   vcodi        NUMBER(10);
   vdescripcio  VARCHAR2(255);

BEGIN

    vnumerr := 1;
    vproces := 'Susceptibilidad_UPDATE_BASILEA';

    BAS_MEN.FNC_SUCEPT_UPDATE_BASILEA();
    COMMIT;

EXCEPTION
    WHEN others THEN
           ROLLBACK;
           vcodi:=sqlcode;
           vdescripcio:=sqlerrm;
           INSERT INTO ERRORS (proces,numerr,codi,descripcio,data)
           VALUES (vproces,vnumerr,vcodi,vdescripcio,sysdate);
           COMMIT;
           RAISE;
END;
/

--bkd40089=====================================================================================================
Select 'bkd40089' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_TITULIZACIONES is

    VN_IDREG           NUMBER(12);
    PN_FECPRO          NUMBER(8);
    vNumErr            NUMBER;
    Cte_Proces         CONSTANT VARCHAR2(80) := 'FNC_TITULIZACIONES';
    v_Msg_Err          VARCHAR2(255) DEFAULT '';
    VV_NRegs_Ins       BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE DEFAULT 0;
    VV_REGISTROS_TITU  NUMBER(12);
    VV_cnt             NUMBER := 0;

BEGIN

    COMMIT;

    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

    SELECT /*+ PARALLEL (A 8) */ count(*) INTO VV_cnt FROM BAS_MEN.TITULIZACIONES_SINTETICAS A WHERE NUMTITCOMPROMRET IS NOT NULL;

    if VV_cnt > 0 then

       EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

       SELECT substr(TO_NUMBER(VALPARM),1,6)
         INTO PN_FECPRO
         FROM BAS_MEN.PARAMETROS_PROCESO
        WHERE CODCSB = '0081'
          AND CODPARM = '0001'
          AND SECPARM = '01';
       COMMIT;
       vNumErr := 1;

       BEGIN

         SELECT /*+ PARALLEL (A 8) */ MIN(OR_IDREG)
           INTO VV_REGISTROS_TITU
           FROM BAS_MEN.BASILEA A
           WHERE FI_ELIMI1 = 'STSORI';
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
          VV_REGISTROS_TITU := 0;

       END;

       vNumErr := 2;

       IF VV_REGISTROS_TITU <> 0 THEN

         vNumErr := 3;
         -- Se borran los registros que se hubieran podido insertar por acciones bs en caso de reproceso.
         DELETE BAS_MEN.BASILEA
          WHERE or_idreg IN (SELECT idreg_new FROM BAS_MEN.MAESTRO_TITUL_BS_AUX WHERE or_idmes = PN_FECPRO);
          COMMIT;

       END IF;

      vNumErr := 4;

        -- Se inicializan los registros eliminados en caso de reproceso.
        UPDATE /*+ PARALLEL (A 8) */ BAS_MEN.BASILEA A
           SET FI_ELIMI1 = 'NO'
         WHERE fi_elimi1 = 'STSORI';
         COMMIT;

        -- BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITUL_SINTETICA');
         COMMIT;

        vNumErr := 5;

       -- INSERT /*+ PARALLEL (a 8) */ INTO BAS_MEN.MAESTRO_TITUL_SINTETICA a
       -- SELECT /*+ PARALLEL (b 8) */ * FROM DCRPROP_MENSUAL.MAESTRO_TITUL_SINTETICA_SAS b;
       -- COMMIT;

        BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITUL_ORI');

        INSERT /*+ PARALLEL (ori 4) */ INTO BAS_MEN.MAESTRO_TITUL_ORI ori
               ( REG                        , OR_CLUNICONTR       , POR_TITUL
               , POR_TITUL_CON              , OR_IDREG            , OR_DISPTO         , OR_DISPTOCON       , FI_EADAIRB
               , FI_EADCONAIRB              , OR_PROVAPL          , OR_AJUVAL         , OR_AJUVALCON       , FI_ELIMI1
               )
        SELECT ROWNUM AS REG                , E.OR_CLUNICONTR     , POR_TITUL
               , POR_TITUL AS POR_TITUL_CON , OR_IDREG            , OR_DISPTO         , OR_DISPTOCON      , FI_EADAIRB
               , FI_EADCONAIRB              , OR_PROVAPL          , OR_AJUVAL         , OR_AJUVALCON       , 'STSORI' AS FI_ELIMI1
          FROM (SELECT /*+ full(a) PARALLEL (a 4) parallel (d 4) */ A.OR_IDREG, A.OR_CLUNICONTR, PORCENTAJERET AS POR_TITUL, A.OR_PROVAPL
                                , OR_DISPTO, OR_DISPTOCON, A.FI_EADAIRB, A.FI_EADCONAIRB, OR_AJUVAL, OR_AJUVALCON
                  FROM BAS_MEN.BASILEA A,
                       BAS_MEN.TITULIZACIONES_SINTETICAS D
                WHERE (A.OR_CLUNICONTR = FLOOR(D.CONTRATO/100) OR A.OR_CLUNICONTR = D.CONTRATO)
                   AND A.FI_ELIMI1 = 'NO'
                   AND (A.OR_DISPTO + A.OR_AJUVAL) <> 0
                   AND NUMTITCOMPROMRET IS NOT NULL
                ) E;
        COMMIT;

        vNumErr := 6;

        BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITUL_BS_AUX');

        INSERT INTO BAS_MEN.MAESTRO_TITUL_BS_AUX
          SELECT REG, OR_CLUNICONTR, POR_TITUL,POR_TITUL_CON, OR_PROVAPL,
               'TITACT2' FI_ELIMI1, OR_IDREG, OR_DISPTO, OR_DISPTOCON,
               FI_EADAIRB, FI_EADCONAIRB, OR_AJUVAL, OR_AJUVALCON,
               OR_DISPTO*POR_TITUL  AS DISPTO_FIN , OR_DISPTOCON*POR_TITUL_CON  AS DISPTOCON_FIN,
               FI_EADAIRB*POR_TITUL AS EADAIRB_FIN, FI_EADCONAIRB*POR_TITUL_CON AS EADCONAIRB_FIN,
               OR_PROVAPL*POR_TITUL AS PROVAPL_FIN,
               OR_AJUVAL*POR_TITUL  AS AJUVAL_FIN , OR_AJUVALCON*POR_TITUL_CON  AS AJUVALCON_FIN,
               0 AS IDREG_NEW
               , substr(PN_FECPRO,1,6)
          FROM BAS_MEN.MAESTRO_TITUL_ORI
        UNION
        SELECT REG, OR_CLUNICONTR, POR_TITUL, POR_TITUL_CON, OR_PROVAPL,
               'NO' FI_ELIMI1, OR_IDREG, OR_DISPTO, OR_DISPTOCON,
               FI_EADAIRB, FI_EADCONAIRB, OR_AJUVAL, OR_AJUVALCON,
               OR_DISPTO -(OR_DISPTO*POR_TITUL)  AS DISPTO_FIN , OR_DISPTOCON -(OR_DISPTOCON*POR_TITUL_CON) AS DISPTOCON_FIN,
               FI_EADAIRB-(FI_EADAIRB*POR_TITUL) AS EADAIRB_FIN, FI_EADCONAIRB-(FI_EADCONAIRB*POR_TITUL_CON)AS EADCONAIRB_FIN,
               OR_PROVAPL-(OR_PROVAPL*POR_TITUL) AS PROVAPL_FIN,
               OR_AJUVAL -(OR_AJUVAL*POR_TITUL)  AS AJUVAL_FIN , OR_AJUVALCON -(OR_AJUVALCON*POR_TITUL_CON) AS AJUVALCON_FIN,
               0 AS IDREG_NEW
               , substr(PN_FECPRO,1,6)
          FROM BAS_MEN.MAESTRO_TITUL_ORI
         WHERE OR_DISPTO - (OR_DISPTO*POR_TITUL) > 0.01
            OR OR_AJUVAL - (OR_AJUVAL*POR_TITUL) > 0.01;
        COMMIT;

        UPDATE /*+ PARALLEL (A 4) */ BAS_MEN.BASILEA A
           SET FI_ELIMI1 = 'STSORI'
         WHERE OR_IDREG IN (SELECT distinct OR_IDREG FROM BAS_MEN.MAESTRO_TITUL_BS_AUX);
        COMMIT;

        vNumErr := 7;

        SELECT MAX(OR_IDREG)
          INTO VN_IDREG
          FROM BAS_MEN.BASILEA;

        update BAS_MEN.MAESTRO_TITUL_BS_AUX
           set idreg_new = VN_IDREG+rownum;
         COMMIT;

         vNumErr := 8;

    --
    -- INSERCIÓN EN BASILEA DE LAS EXPOSICIONES DE ACCIONES BS
    --

         INSERT /*+ PARALLEL (i 4) */ INTO BAS_MEN.basilea  i
              ( OR_IDREG, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM
              , OR_TITULARITAT, OR_NOMPER, OR_COISIN, OR_PERSON, OR_IDECNO, OR_IDCNAE
              , OR_IDCNAEREL, OR_PROCED, OR_NUMOFI
              , OR_REFOPE, OR_REFOPE2, OR_TIPOPE, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES
              , IN_ANTIGU, OR_SEGGES, OR_CODGAR, OR_TIPAVA, OR_TIPGAR, OR_CODTIT
              , OR_DESTPR, OR_TIPOFI, OR_TIPOPR, OR_IMPLTV, OR_VALTAS, OR_CONCED, OR_IDPAIS
              , IN_ITITSN, IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND
              , OR_EPIIND, FI_EPICON, FI_PORCON, OR_DIVISA, FI_TIPEXP
              , OR_DISPTO     -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS
              , OR_AJUVAL     -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , OR_FAIRVA
              , OR_DISPTOCON  -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON
              , OR_AJUVALCON  -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , OR_FAIRVACON, IN_TIPDER, IN_FAIRVABO
              , IN_FAIRVABOCON, FI_SUMEXP, IN_VTAGRU, IN_VTAGRU_CONS, OR_RATINT, OR_MODRAT0
              , OR_SEGRIE, OR_PUNT0, OR_SITUAC0, OR_FECPUN0, IN_SEGMBSINI
              , IN_SEGMBS0, IN_SEGMBS1, IN_SEGMBS2, IN_SEGMBS
              , IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT, IN_RATSOB
              , FI_ELIMI1     -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , IN_METODE, IN_SUCEPT, IN_SEG_HIP, OR_FECPRREV, OR_CLUNIENT, OR_CLUNIPROD
              , OR_CLUNICONTR, OR_CLUNICUENT, OR_CLUNIOPERA, FI_MESCURA, OR_FECCAR, OR_PRESTMIG
              , OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB
              , FI_EADAIRB    -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , OR_CNAESCPCB
              , FI_EADCONAIRB -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , FI_CCFAIRB, IN_TIPOREG, IN_GRUP_TIPIDE, IN_GRUP_IDPER, IN_NOM_GRUP
              , IN_IDCALIFIC, OR_PUNTSCO, OR_FECSCO, OR_NUMSCOFIN, IN_INDCURA
              , OR_PROVAPL    -- Campo a modificar con el valor del Campo de la titulizaciones sistenticas
              , OR_INDHOLDING, OR_VERSPREST, OR_DESCTAVISTA
              , OR_CODPRODO, OR_CODISO, OR_PRODERIV, IN_ACTIVO, OR_NUMFINREG
              , OR_TIPOBJETO, OR_SEGFAC, OR_SEGFIC, OR_IDSITUAC, IN_IDCALIFICREL
              , OR_SUBSTDA, OR_MODSCO, OR_FINABE, OR_TIPDERIV, OR_NUMPERCTAV, OR_CNAECTAVIS
              , OR_CNOCTAVIS, OR_OPCVEN, IN_METODE_1, OR_CODIGO_BIC, IN_EXISTENCIAS, IN_ACTIVO_CIR
              , IN_FECMORA, OR_CTACLI, IN_NUMEMP, IN_HIPOAVAL, IN_NIFGRUPCON
              , IN_PYME, OR_INDHOLDINGREL, OR_SEGFIC2, IN_PRESTPERCENT, IN_CAT_BDE_N
              , OR_CLUNIENT_CUENT, OR_CLUNIPROD_CUENT, OR_CLUNIENT_OPERA, OR_CLUNIPROD_OPERA, IN_OPER_MIGR
              , IN_IDGRUPO, MARCA_EPA, OR_FECDEU, OR_NUMPERSONA
              , OR_PERSCTAVISTA, OR_TITUCTAVISTA, IN_FACTCOR, OR_SITCON, IN_RATEXT_ISIN, IN_REFINAN
              , ID_AMBIT_DRC
              , IN_ACTIVO_CONS, OR_CONTRATO_GARANTIA, OR_IDMES, OR_NIFCIFAVA, OR_PESOW, OR_PUNTGRUP
              , OR_MARCONOT, OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS
              , INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, IN_DEFAULT
              , OR_MODGRUP
              )
            SELECT /*+ PARALLEL (A 4) PARALLEL (B 4) */ idreg_new, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM
                 , OR_TITULARITAT, OR_NOMPER, OR_COISIN, OR_PERSON, OR_IDECNO, OR_IDCNAE
                 , OR_IDCNAEREL, OR_PROCED, OR_NUMOFI
                 , OR_REFOPE, OR_REFOPE2, OR_TIPOPE, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES
                 , IN_ANTIGU, OR_SEGGES, OR_CODGAR, OR_TIPAVA, OR_TIPGAR, OR_CODTIT
                 , OR_DESTPR, OR_TIPOFI, OR_TIPOPR, OR_IMPLTV, OR_VALTAS, OR_CONCED, OR_IDPAIS
                 , IN_ITITSN, IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND
                 , OR_EPIIND, FI_EPICON, FI_PORCON, OR_DIVISA, FI_TIPEXP
                 , B.DISPTO_FIN      -- OR_DISPTO se informa el valor del Campo de la titulizaciones sinteticas
                 , OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS
                 , B.AJUVAL_FIN      -- OR_AJUVAL se informa el valor del Campo de la titulizaciones sinteticas
                 , OR_FAIRVA
                 , B.DISPTOCON_FIN   -- OR_DISPTOCON se informa el valor del Campo de la titulizaciones sinteticas
                 , OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON
                 , B.AJUVALCON_FIN   -- OR_AJUVALCON se informa el valor del Campo de la titulizaciones sinteticas
                 , OR_FAIRVACON, IN_TIPDER, IN_FAIRVABO
                 , IN_FAIRVABOCON, FI_SUMEXP, IN_VTAGRU, IN_VTAGRU_CONS, OR_RATINT, OR_MODRAT0
                 , OR_SEGRIE, OR_PUNT0, OR_SITUAC0, OR_FECPUN0, IN_SEGMBSINI
                 , IN_SEGMBS0, IN_SEGMBS1, IN_SEGMBS2, IN_SEGMBS
                 , IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT
                 , IN_RATSOB
                 , B.FI_ELIMI1       -- FI_ELIMI1 se informa el valor del Campo de la titulizaciones sinteticas
                 , IN_METODE, IN_SUCEPT, IN_SEG_HIP, OR_FECPRREV, OR_CLUNIENT, OR_CLUNIPROD
                 , A.OR_CLUNICONTR, OR_CLUNICUENT, OR_CLUNIOPERA, FI_MESCURA, OR_FECCAR, OR_PRESTMIG
                 , OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB
                 , B.EADAIRB_FIN     -- FI_EADAIRB se informa el valor del Campo de la titulizaciones sinteticas
                 , OR_CNAESCPCB
                 , B.EADCONAIRB_FIN  -- FI_EADCONAIRB se informa el valor del Campo de la titulizaciones sinteticas
                 , FI_CCFAIRB
                 , IN_TIPOREG, IN_GRUP_TIPIDE, IN_GRUP_IDPER, IN_NOM_GRUP, IN_IDCALIFIC
                 , OR_PUNTSCO, OR_FECSCO, OR_NUMSCOFIN, IN_INDCURA
                 , B.PROVAPL_FIN     -- OR_PROVAPL se informa el valor del Campo de la titulizaciones sinteticas
                 , OR_INDHOLDING, OR_VERSPREST, OR_DESCTAVISTA
                 , OR_CODPRODO, OR_CODISO, OR_PRODERIV, IN_ACTIVO, OR_NUMFINREG
                 , OR_TIPOBJETO, OR_SEGFAC, OR_SEGFIC, OR_IDSITUAC, IN_IDCALIFICREL
                 , OR_SUBSTDA, OR_MODSCO, OR_FINABE, OR_TIPDERIV, OR_NUMPERCTAV, OR_CNAECTAVIS
                 , OR_CNOCTAVIS, OR_OPCVEN, IN_METODE_1, OR_CODIGO_BIC, IN_EXISTENCIAS, IN_ACTIVO_CIR
                 , IN_FECMORA, OR_CTACLI, IN_NUMEMP, IN_HIPOAVAL, IN_NIFGRUPCON
                 , IN_PYME, OR_INDHOLDINGREL, OR_SEGFIC2, IN_PRESTPERCENT, IN_CAT_BDE_N
                 , OR_CLUNIENT_CUENT, OR_CLUNIPROD_CUENT, OR_CLUNIENT_OPERA, OR_CLUNIPROD_OPERA, IN_OPER_MIGR
                 , IN_IDGRUPO, MARCA_EPA, OR_FECDEU, OR_NUMPERSONA
                 , OR_PERSCTAVISTA, OR_TITUCTAVISTA, IN_FACTCOR, OR_SITCON, IN_RATEXT_ISIN, IN_REFINAN
                 , ID_AMBIT_DRC , IN_ACTIVO_CONS, OR_CONTRATO_GARANTIA, A.OR_IDMES, OR_NIFCIFAVA, OR_PESOW
                 , OR_PUNTGRUP, OR_MARCONOT, OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS
                 , INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, IN_DEFAULT
                 , OR_MODGRUP
              FROM BAS_MEN.BASILEA A
                 , BAS_MEN.MAESTRO_TITUL_BS_AUX  B
             WHERE A.OR_IDREG = B.OR_IDREG;

          VV_NRegs_Ins := SQL%ROWCOUNT;

          COMMIT;

        vNumErr := 9;

       BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK', NULL, NULL, VV_NRegs_Ins, VN_IDREG);

     ELSE

      vNumErr := 10;

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK', 'SIN DATOS EN MAESTRO_TITULIZACIONES_SAS');

     END IF;

EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', v_Msg_Err, vNumErr);

      COMMIT;

      RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_TITULIZACIONES';


create or replace PROCEDURE BAS_MEN.FNC_FEI_TITU_SINTETICA IS

    Cte_Proces         CONSTANT VARCHAR2(80) := 'FNC_FEI_TITU_SINTETICA';
    v_Msg_Err          VARCHAR2(255) DEFAULT '';
    vNumErr            NUMBER(5);
    PN_FECPRO          NUMBER(6);

    VN_IDREG           NUMBER(12);
    v_OR_SALDO         FLOAT;


BEGIN

    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    vNumErr := 1;

    SELECT substr(TO_NUMBER(VALPARM),1,6)
      INTO PN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

    DELETE /*+ PARALLEL (a 4) */ BAS_MEN.BASILEA a
     WHERE IN_TIPOREG = 'CETITULI';

    COMMIT;

    vNumErr := 5;

    SELECT /*+ PARALLEL (a 4) */ MAX(OR_IDREG)
      INTO VN_IDREG
      FROM BAS_MEN.BASILEA a;

    VN_IDREG := VN_IDREG + 1;

    vNumErr := 10;

    BEGIN
      SELECT SALDO_MEZZANINE
        INTO v_OR_SALDO
        FROM BAS_MEN.SALDOS_TITULIZACIONES
       WHERE NSR = 90;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        v_OR_SALDO := 0;
    END;

    COMMIT;

    vNumErr := 15;

    INSERT INTO BAS_MEN.BASILEA
         ( OR_IDREG, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, OR_TITULARITAT
         , OR_NOMPER, OR_COISIN, OR_PERSON, OR_CODGAR, OR_IMPLTV, OR_IDPAIS, IN_ITITSN
         , IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND, OR_EPIIND, FI_EPICON, FI_PORCON
         , OR_DIVISA, FI_TIPEXP, OR_DISPTO, OR_DISPTOCON, OR_RATINT, IN_SEGMBSINI, IN_SEGMBS
         , IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT, IN_RATSOB, FI_ELIMI1, IN_METODE, IN_SUCEPT, IN_TIPOREG
         , IN_METODE_1, IN_HIPOAVAL, MARCA_EPA, IN_RATEXT_ISIN, OR_CONTRATO_GARANTIA, OR_FECPRREV
         , IN_INDCURA, OR_DESCTAVISTA, OR_CNOCTAVIS, OR_FINABE, OR_IDMES)
    SELECT VN_IDREG AS OR_IDREG, '00-' AS OR_IDPERS, '0' AS OR_TIPIDE, '?' AS OR_NIFCIF, '0' AS OR_TIPIDEIBM, '?' AS OR_NIFCIFIBM, '0' AS OR_TITULARITAT
         , 'AJUSTE POR GARANTIA TITULIZACION' AS OR_NOMPER, '?' AS OR_COISIN, '0' AS OR_PERSON, 'GR 21110' AS OR_CODGAR, '0' AS OR_IMPLTV, '724' AS OR_IDPAIS, 'NO' AS IN_ITITSN
         , 'NO' AS IN_INDMOR, '?' AS OR_IDPRO1, '81' AS OR_ENTITY, '9999999999' AS OR_CTAIND, '?' AS OR_EPIIND, '019999999999999999999999' AS FI_EPICON, '1' AS FI_PORCON
         , 'EUR' AS OR_DIVISA, 'Drawn' AS FI_TIPEXP, v_OR_SALDO AS OR_DISPTO, v_OR_SALDO AS OR_DISPTOCON, '99' AS OR_RATINT, '046' AS IN_SEGMBSINI, 'FEI titu sintética' AS IN_SEGMBS
         , 'NR' AS IN_RATEXTAVA2, '?' AS IN_SRATIN, 'NR' AS IN_RATEXT, 'NR' AS IN_RATSOB, 'NO' AS FI_ELIMI1, 'STDA' AS IN_METODE, '?' AS IN_SUCEPT, 'CETITULI' AS IN_TIPOREG
         , '?' AS IN_METODE_1, 'NO' AS IN_HIPOAVAL, 'NO' AS MARCA_EPA, 'NR' AS IN_RATEXT_ISIN, '999999999999999' AS OR_CONTRATO_GARANTIA, '?' AS OR_FECPRREV
         , 'N' AS IN_INDCURA, 'E' AS  OR_DESCTAVISTA, 999 AS OR_CNOCTAVIS, 0 AS OR_FINABE, PN_FECPRO AS OR_IDMES
      FROM DUAL;

    COMMIT;

    vNumErr := 10;

    BEGIN
      SELECT SALDO_MEZZANINE
        INTO v_OR_SALDO
        FROM BAS_MEN.SALDOS_TITULIZACIONES
       WHERE NSR = 94;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        v_OR_SALDO := 0;
    END;

    VN_IDREG := VN_IDREG + 1;

    vNumErr := 15;

    INSERT INTO BAS_MEN.BASILEA
         ( OR_IDREG, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, OR_TITULARITAT
         , OR_NOMPER, OR_COISIN, OR_PERSON, OR_CODGAR, OR_IMPLTV, OR_IDPAIS, IN_ITITSN
         , IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND, OR_EPIIND, FI_EPICON, FI_PORCON
         , OR_DIVISA, FI_TIPEXP, OR_DISPTO, OR_DISPTOCON, OR_RATINT, IN_SEGMBSINI, IN_SEGMBS
         , IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT, IN_RATSOB, FI_ELIMI1, IN_METODE, IN_SUCEPT, IN_TIPOREG
         , IN_METODE_1, IN_HIPOAVAL, MARCA_EPA, IN_RATEXT_ISIN, OR_CONTRATO_GARANTIA, OR_FECPRREV
         , IN_INDCURA, OR_DESCTAVISTA, OR_CNOCTAVIS, OR_FINABE, OR_IDMES)
    SELECT VN_IDREG AS OR_IDREG, '97-' AS OR_IDPERS, '0' AS OR_TIPIDE, '?' AS OR_NIFCIF, '0' AS OR_TIPIDEIBM, '?' AS OR_NIFCIFIBM, '0' AS OR_TITULARITAT
         , 'AJUSTE POR GARANTIA TITULIZACION' AS OR_NOMPER, '?' AS OR_COISIN, '0' AS OR_PERSON, 'EXC00100' AS OR_CODGAR, '101' AS OR_IMPLTV, '724' AS OR_IDPAIS, 'NO' AS IN_ITITSN
         , 'NO' AS IN_INDMOR, '?' AS OR_IDPRO1, '81' AS OR_ENTITY, '9999999999' AS OR_CTAIND, '?' AS OR_EPIIND, '019999999999999999999999' AS FI_EPICON, '1' AS FI_PORCON
         , 'EUR' AS OR_DIVISA, 'Drawn' AS FI_TIPEXP, v_OR_SALDO AS OR_DISPTO, v_OR_SALDO AS OR_DISPTOCON, '99' AS OR_RATINT, '046' AS IN_SEGMBSINI, 'FEI titu sintética' AS IN_SEGMBS
         , 'NR' AS IN_RATEXTAVA2, '?' AS IN_SRATIN, 'NR' AS IN_RATEXT, 'NR' AS IN_RATSOB, 'NO' AS FI_ELIMI1, 'STDA' AS IN_METODE, '?' AS IN_SUCEPT, 'CETITULI' AS IN_TIPOREG
         , '?' AS IN_METODE_1, 'NO' AS IN_HIPOAVAL, 'NO' AS MARCA_EPA, 'NR' AS IN_RATEXT_ISIN, '999999999999999' AS OR_CONTRATO_GARANTIA, '?' AS OR_FECPRREV
         , 'N' AS IN_INDCURA, 'E' AS  OR_DESCTAVISTA, 999 AS OR_CNOCTAVIS, 0 AS OR_FINABE, PN_FECPRO AS OR_IDMES
      FROM DUAL;

    COMMIT;

    vNumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK', 'Registro insertado : ' || VN_IDREG);

EXCEPTION
  WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', v_Msg_Err, vNumErr);
      COMMIT;

      RAISE;
END;

/


select * from sys.user_errors WHERE NAME = 'FNC_FEI_TITU_SINTETICA';


create or replace PROCEDURE BAS_MEN.BASI_TITULIZACIONES IS

    vProces       VARCHAR2(40);
    vNumErr       NUMBER(2);
    vCodi         NUMBER(10);
    vDescripcio   VARCHAR2(255);

BEGIN

  COMMIT;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

-- Llamada a FNC_TITULIZACIONES solo si hay datos en BAS_MEN_MENSUAL.MAESTRO_TITUL_SINTETICA_SAS;

  BAS_MEN.FNC_TITULIZACIONES;
  COMMIT;

  BAS_MEN.FNC_FEI_TITU_SINTETICA;
  COMMIT;

  EXCEPTION
  WHEN OTHERS THEN

  RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'BASI_TITULIZACIONES';

--bkd40084=====================================================================================================
Select 'bkd40084' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_ACCIONES_BS is

    VN_IDREG           NUMBER(12);
    PN_FECPRO          NUMBER(8);
    SW_APLICAR_PROVI   VARCHAR2(5) DEFAULT 'FALSE';
    vNumErr            NUMBER;
    Cte_Proces         CONSTANT VARCHAR2(80) := 'fnc_acciones_bs';
    v_Msg_Err          VARCHAR2(255) DEFAULT '';
    VV_NRegs_Ins      BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE DEFAULT 0;
    VV_REGISTROS_ACCBS NUMBER(12);
    VV_cnt NUMBER := 0;

BEGIN

     commit;

     BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

     BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.FINACC_OUTPUT');

     INSERT INTO BAS_MEN.FINACC_OUTPUT
     SELECT * FROM DCRPROP_MENSUAL.FINACC_OUTPUT_SAS;

     COMMIT;

     select count(*)  into VV_cnt from DCRPROP_MENSUAL.MAESTRO_ACCIONES_BS_SAS;

     if VV_cnt > 0 then

       EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

       SELECT substr(TO_NUMBER(VALPARM),1,6)
         INTO PN_FECPRO
         FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
        WHERE CODCSB  = '0081'
          AND CODPARM = '0001'
          AND SECPARM = '01';

       vNumErr := 1;

       BEGIN

         SELECT /*+ PARALLEL (A 8) */ MIN(OR_IDREG)
           INTO VV_REGISTROS_ACCBS
           FROM BAS_MEN.BASILEA A WHERE FI_ELIMI1 = 'SRABS';
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
          VV_REGISTROS_ACCBS := 0;

       END;

        vNumErr := 2;

        IF VV_REGISTROS_ACCBS <> 0 THEN

        vNumErr := 3;
           -- se borran los registros que se hubieran podido insertar por acciones bs en caso de reproceso.
           delete BAS_MEN.BASILEA
            where or_idreg >= VV_REGISTROS_ACCBS
              and or_idreg in (select idreg_new from BAS_MEN.MAESTRO_ACCIONES_BS_AUX where or_idmes = PN_FECPRO);

           commit;

        END IF;

        vNumErr := 4;

        -- se inicializan los registros eliminados por acciones bs en caso de reproceso.
        UPDATE /*+ PARALLEL (A 8) */BAS_MEN.BASILEA A
           SET FI_ELIMI1 = 'NO'
         WHERE fi_elimi1 = 'ACCBS';

         commit;

        update DCRPROP_MENSUAL.MAESTRO_ACCIONES_BS_SAS
           set prod = trim(prod);

        commit;

        BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_ACCIONES_BS');

        vNumErr := 5;

        insert into  BAS_MEN.MAESTRO_ACCIONES_BS
          select sum(DISP_DEC) DISP_DEC, PROD, CONTRATO from DCRPROP_MENSUAL.MAESTRO_ACCIONES_BS_SAS group by PROD, CONTRATO;
        commit;

        BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_ACCIONES_BS_ACCBS');

        insert into BAS_MEN.MAESTRO_ACCIONES_BS_ACCBS
               (REG, PROD, DISPREAL,
               OR_CLUNICONTR, DISPTO,  POR_ACCBS,  EAD, EAD_FIN, EADCON,  EADCON_FIN,  DISPTOCON,
               POR_ACCBS_CON,  OR_IDREG, OR_DISPTO, OR_DISPTOCON, FI_EADAIRB, FI_EADCONAIRB, OR_PROVAPL,   FI_ELIMI1)
        SELECT ROWNUM AS REG,  E.OR_CLUNIPROD AS PROD,  DISP_DEC,
               E.OR_CLUNICONTR, SALDO,  LEAST(DISP_DEC/SALDO,1) POR_ACCBS,  EAD, LEAST(DISP_DEC/SALDO,1)*EAD EAD_FIN, EADCON,
         LEAST(DISP_DEC/SALDOCON,1)*EADCON EADCON_FIN,
               SALDOCON, LEAST(DISP_DEC/SALDOCON,1) POR_ACCBS_CON,  OR_IDREG, OR_SALDO, OR_SALDOCON, FI_EADAIRB, FI_EADCONAIRB,
         OR_PROVAPL,  'ACCBS' FI_ELIMI1
                 FROM (SELECT /*+ index (a, I_BASILEA08) */ A.OR_IDREG, A.OR_CLUNICONTR, OR_CLUNIPROD, DISP_DEC,
                              A.OR_PROVAPL, A.OR_IDPRO1,
                              (OR_DISPTO) OR_SALDO, A.FI_EADAIRB, A.FI_EADCONAIRB, (OR_DISPTOCON) OR_SALDOCON
                         FROM BAS_MEN.BASILEA A,
                              BAS_MEN.MAESTRO_ACCIONES_BS D
                        WHERE (A.OR_CLUNICONTR = floor(D.CONTRATO/100)
                           or A.OR_CLUNICONTR = D.CONTRATO)
                          AND A.OR_CLUNIPROD = PROD
                          AND A.FI_ELIMI1 = 'NO'
                          AND A.OR_DISPTO <> 0
                          AND DISP_DEC <> 0) E,
                      (SELECT /*+ index (a, I_BASILEA08) */  A.OR_CLUNICONTR, OR_CLUNIPROD, SUM(OR_DISPTO) SALDO, SUM(A.FI_EADAIRB) EAD,
                              SUM(OR_DISPTOCON) SALDOCON, SUM(A.FI_EADCONAIRB) EADCON
                         FROM BAS_MEN.BASILEA A,
                              BAS_MEN.MAESTRO_ACCIONES_BS D
                        where (A.OR_CLUNICONTR = floor(D.CONTRATO/100)
                           or A.OR_CLUNICONTR = D.CONTRATO)
                          AND A.OR_CLUNIPROD = PROD
                          AND A.FI_ELIMI1 = 'NO'
                          AND A.OR_DISPTO <> 0
                          AND DISP_DEC <> 0
                        GROUP BY A.OR_CLUNICONTR, OR_CLUNIPROD) F
                WHERE E.OR_CLUNICONTR = F.OR_CLUNICONTR
                  AND E.OR_CLUNIPROD  = F.OR_CLUNIPROD;

        commit;

        vNumErr := 6;

        BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_ACCIONES_BS_AUX');

        INSERT INTO BAS_MEN.MAESTRO_ACCIONES_BS_AUX 
        SELECT REG, ENT, PROD, DISPDECL, OR_CLUNICONTR, DISPTO, /*EAD,*/ POR_ACCBS, /*EAD_FIN,*/
               DISPTOCON, /*EADCON, EADCON_FIN,*/ POR_ACCBS_CON, OR_PROVAPL, 'SRABS' FI_ELIMI1,
               OR_IDREG, OR_DISPTO, OR_DISPTOCON, /*FI_EADAIRB, FI_EADCONAIRB,*/
               OR_DISPTO*POR_ACCBS DISPTO_FIN, OR_DISPTOCON*POR_ACCBS_CON DISPTOCON_FIN,
               /*FI_EADAIRB*POR_ACCBS EADAIRB_FIN, FI_EADCONAIRB*POR_ACCBS_CON EADCONAIRB_FIN,*/    
               OR_PROVAPL AS PROVAPL_FIN, 0, substr(PN_FECPRO,1,6)
          FROM BAS_MEN.MAESTRO_ACCIONES_BS_ACCBS
        union
        SELECT REG, ENT, PROD, DISPDECL, OR_CLUNICONTR, DISPTO, /*EAD,*/ POR_ACCBS, /*EAD_FIN,*/ /* FMRR - 02/03/2022 - HDEV-110984 - Eliminar campos de la tabla maestro_acciones_bs_aux*/
               DISPTOCON, /*EADCON, EADCON_FIN,*/ POR_ACCBS_CON, OR_PROVAPL, 'NO' FI_ELIMI1,     /* FMRR - 02/03/2022 - HDEV-110984 - Eliminar campos de la tabla maestro_acciones_bs_aux*/
               OR_IDREG, OR_DISPTO, OR_DISPTOCON, /*FI_EADAIRB, FI_EADCONAIRB,*/                 /* FMRR - 02/03/2022 - HDEV-110984 - Eliminar campos de la tabla maestro_acciones_bs_aux*/
               OR_DISPTO-(OR_DISPTO*POR_ACCBS) DISPTO_FIN, OR_DISPTOCON-(OR_DISPTOCON*POR_ACCBS_CON) DISPTOCON_FIN,
               /*FI_EADAIRB-(FI_EADAIRB*POR_ACCBS) EADAIRB_FIN, FI_EADCONAIRB-(FI_EADCONAIRB*POR_ACCBS_CON) EADCONAIRB_FIN,*/    /* FMRR - 02/03/2022 - HDEV-110984 - Eliminar campos de la tabla maestro_acciones_bs_aux*/
               0 AS PROVAPL_FIN, 0, substr(PN_FECPRO,1,6)
          FROM BAS_MEN.MAESTRO_ACCIONES_BS_ACCBS
         WHERE DISPTO - DISPREAL > 0.01;

        commit;

        UPDATE BAS_MEN.BASILEA
           SET FI_ELIMI1 = 'ACCBS'
         WHERE OR_IDREG IN (SELECT distinct OR_IDREG FROM BAS_MEN.MAESTRO_ACCIONES_BS_AUX);

        COMMIT;

        SELECT MAX(OR_IDREG)
          INTO VN_IDREG
          FROM BAS_MEN.BASILEA;

        update BAS_MEN.MAESTRO_ACCIONES_BS_AUX
           set idreg_new = VN_IDREG+rownum;

         commit;

         vNumErr := 7;

    --
    -- INSERCIÓN EN BASILEA DE LAS EXPOSICIONES DE ACCIONES BS
    --
         

         INSERT INTO BAS_MEN.basilea
              ( OR_IDREG, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM
              , OR_TITULARITAT, OR_NOMPER, OR_COISIN, OR_PERSON, OR_IDECNO, OR_IDCNAE
              , OR_IDCNAEREL, OR_PROCED, OR_NUMOFI
              , OR_REFOPE, OR_REFOPE2, OR_TIPOPE, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES
              , IN_ANTIGU, OR_SEGGES, OR_CODGAR, OR_TIPAVA, OR_TIPGAR, OR_CODTIT
              , OR_DESTPR, OR_TIPOFI, OR_TIPOPR, OR_IMPLTV, OR_VALTAS, OR_CONCED, OR_IDPAIS
              , IN_ITITSN, IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND
              , OR_EPIIND, FI_EPICON, FI_PORCON, OR_DIVISA, FI_TIPEXP
              , OR_DISPTO     -- Campo a modificar con el valor del Campo de la acciones_bs
              , OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_FAIRVA
              , OR_DISPTOCON  -- Campo a modificar con el valor del Campo de la acciones_bs
              , OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON
              , OR_FAIRVACON, IN_TIPDER, IN_FAIRVABO
              , IN_FAIRVABOCON, FI_SUMEXP, IN_VTAGRU, IN_VTAGRU_CONS, OR_RATINT, OR_MODRAT0
              , OR_SEGRIE, OR_PUNT0, OR_SITUAC0, OR_FECPUN0, IN_SEGMBSINI
              , IN_SEGMBS0, IN_SEGMBS1, IN_SEGMBS2, IN_SEGMBS
              , IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT
              , IN_RATSOB
              , FI_ELIMI1     -- Campo a modificar con el valor del Campo de la acciones_bs
              , IN_METODE, IN_SUCEPT, IN_SEG_HIP, OR_FECPRREV, OR_CLUNIENT, OR_CLUNIPROD
              , OR_CLUNICONTR, OR_CLUNICUENT, OR_CLUNIOPERA, FI_MESCURA, OR_FECCAR, OR_PRESTMIG
              , OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB
            /*, FI_EADAIRB      FMRR - 02/03/2022 - HDEV-110984 - Eliminar campos de la tabla maestro_acciones_bs_aux - Campo a modificar con el valor del Campo de la acciones_bs*/
              , OR_CNAESCPCB
            /*, FI_EADCONAIRB   FMRR - 02/03/2022 - HDEV-110984 - Eliminar campos de la tabla maestro_acciones_bs_aux - Campo a modificar con el valor del Campo de la acciones_bs*/
              , FI_CCFAIRB
              , IN_TIPOREG, IN_GRUP_TIPIDE, IN_GRUP_IDPER, IN_NOM_GRUP
              , IN_IDCALIFIC, OR_PUNTSCO, OR_FECSCO, OR_NUMSCOFIN, IN_INDCURA
              , OR_PROVAPL    -- Campo a modificar con el valor del Campo de la acciones_bs
              , OR_INDHOLDING, OR_VERSPREST
              , OR_DESCTAVISTA
              , OR_CODPRODO, OR_CODISO, OR_PRODERIV, IN_ACTIVO, OR_NUMFINREG
              , OR_TIPOBJETO, OR_SEGFAC, OR_SEGFIC, OR_IDSITUAC, IN_IDCALIFICREL
              , OR_SUBSTDA, OR_MODSCO, OR_FINABE, OR_TIPDERIV, OR_NUMPERCTAV, OR_CNAECTAVIS
              , OR_CNOCTAVIS, OR_OPCVEN, IN_METODE_1, OR_CODIGO_BIC, IN_EXISTENCIAS, IN_ACTIVO_CIR
              , IN_FECMORA, OR_CTACLI, IN_NUMEMP, IN_HIPOAVAL, IN_NIFGRUPCON
              , IN_PYME, OR_INDHOLDINGREL, OR_SEGFIC2, IN_PRESTPERCENT, IN_CAT_BDE_N
              , OR_CLUNIENT_CUENT, OR_CLUNIPROD_CUENT, OR_CLUNIENT_OPERA, OR_CLUNIPROD_OPERA, IN_OPER_MIGR
              , IN_IDGRUPO, MARCA_EPA, OR_FECDEU, OR_NUMPERSONA
              , OR_PERSCTAVISTA, OR_TITUCTAVISTA, IN_FACTCOR, OR_SITCON, IN_RATEXT_ISIN, IN_REFINAN
              , ID_AMBIT_DRC
              , IN_ACTIVO_CONS, OR_CONTRATO_GARANTIA, OR_IDMES, OR_NIFCIFAVA, OR_PESOW, OR_PUNTGRUP
              , OR_MARCONOT, OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS
              , INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, IN_DEFAULT
              , OR_MODGRUP    /* RMR 26/02/2020 Añadido campo de modelo de grupo */
              )
            SELECT  idreg_new, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM
                 , OR_TITULARITAT, OR_NOMPER, OR_COISIN, OR_PERSON, OR_IDECNO, OR_IDCNAE
                 , OR_IDCNAEREL, OR_PROCED, OR_NUMOFI
                 , OR_REFOPE, OR_REFOPE2, OR_TIPOPE, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES
                 , IN_ANTIGU, OR_SEGGES, OR_CODGAR, OR_TIPAVA, OR_TIPGAR, OR_CODTIT
                 , OR_DESTPR, OR_TIPOFI, OR_TIPOPR, OR_IMPLTV, OR_VALTAS, OR_CONCED, OR_IDPAIS
                 , IN_ITITSN, IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND
                 , OR_EPIIND, FI_EPICON, FI_PORCON, OR_DIVISA, FI_TIPEXP
                 , B.DISPTO_FIN               -- OR_DISPTO se informa el valor del Campo de la acciones_bs
                 , OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_FAIRVA
                 , B.DISPTOCON_FIN            -- OR_DISPTOCON se informa del Campo de la acciones_bs
                 , OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON, OR_REPOSCON, OR_AJUVALCON
                 , OR_FAIRVACON, IN_TIPDER, IN_FAIRVABO
                 , IN_FAIRVABOCON, FI_SUMEXP, IN_VTAGRU, IN_VTAGRU_CONS, OR_RATINT, OR_MODRAT0
                 , OR_SEGRIE, OR_PUNT0, OR_SITUAC0, OR_FECPUN0, IN_SEGMBSINI
                 , IN_SEGMBS0, IN_SEGMBS1, IN_SEGMBS2, IN_SEGMBS
                 , IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT
                 , IN_RATSOB
                 , B.FI_ELIMI1                -- FI_ELIMI1 se informa del Campo de la acciones_bs
                 , IN_METODE, IN_SUCEPT, IN_SEG_HIP, OR_FECPRREV, OR_CLUNIENT, OR_CLUNIPROD
                 , A.OR_CLUNICONTR, OR_CLUNICUENT, OR_CLUNIOPERA, FI_MESCURA, OR_FECCAR, OR_PRESTMIG
                 , OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB
               /*, B.EADAIRB_FIN      FMRR - 02/03/2022 - HDEV-110984 - FI_EADAIRB se informa del Campo de la acciones_bs*/
                 , OR_CNAESCPCB
               /*, B.EADCONAIRB_FIN   FMRR - 02/03/2022 - HDEV-110984 - FI_EADCONAIRB se informa del Campo de la acciones_bs*/
                 , FI_CCFAIRB
                 , IN_TIPOREG, IN_GRUP_TIPIDE, IN_GRUP_IDPER, IN_NOM_GRUP, IN_IDCALIFIC
                 , OR_PUNTSCO, OR_FECSCO, OR_NUMSCOFIN, IN_INDCURA
                 , B.PROVAPL_FIN              -- OR_PROVAPL se informa del Campo de la acciones_bs
                 , OR_INDHOLDING, OR_VERSPREST
                 , OR_DESCTAVISTA
                 , OR_CODPRODO, OR_CODISO, OR_PRODERIV, IN_ACTIVO, OR_NUMFINREG
                 , OR_TIPOBJETO, OR_SEGFAC, OR_SEGFIC, OR_IDSITUAC, IN_IDCALIFICREL
                 , OR_SUBSTDA, OR_MODSCO, OR_FINABE, OR_TIPDERIV, OR_NUMPERCTAV, OR_CNAECTAVIS
                 , OR_CNOCTAVIS, OR_OPCVEN, IN_METODE_1, OR_CODIGO_BIC, IN_EXISTENCIAS, IN_ACTIVO_CIR
                 , IN_FECMORA, OR_CTACLI, IN_NUMEMP, IN_HIPOAVAL, IN_NIFGRUPCON
                 , IN_PYME, OR_INDHOLDINGREL, OR_SEGFIC2, IN_PRESTPERCENT, IN_CAT_BDE_N
                 , OR_CLUNIENT_CUENT, OR_CLUNIPROD_CUENT, OR_CLUNIENT_OPERA, OR_CLUNIPROD_OPERA, IN_OPER_MIGR
                 , IN_IDGRUPO, MARCA_EPA, OR_FECDEU, OR_NUMPERSONA
                 , OR_PERSCTAVISTA, OR_TITUCTAVISTA, IN_FACTCOR, OR_SITCON, IN_RATEXT_ISIN, IN_REFINAN
                 , ID_AMBIT_DRC
                 , IN_ACTIVO_CONS, OR_CONTRATO_GARANTIA, A.OR_IDMES, OR_NIFCIFAVA, OR_PESOW, OR_PUNTGRUP
                 , OR_MARCONOT, OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS
                 , INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, IN_DEFAULT
                 , OR_MODGRUP   /* RMR 26/02/2020 Añadido campo de modelo de grupo */
              FROM BAS_MEN.BASILEA                  A
                 , BAS_MEN.MAESTRO_ACCIONES_BS_AUX  B
             WHERE A.OR_IDREG  = B.OR_IDREG;

          VV_NRegs_Ins := SQL%ROWCOUNT;

          COMMIT;

        vNumErr := 8;

       BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK', NULL, NULL, VV_NRegs_Ins, VN_IDREG);

     ELSE

      vNumErr := 11;

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK', 'SIN DATOS EN MAESTRO_ACCIONES_BS_SAS');

     END IF;

EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', v_Msg_Err, vNumErr);

      commit;

      RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_ACCIONES_BS';


create or replace PROCEDURE      BAS_MEN.BASI_ACCIONES_BS IS

   VV_TABLA       VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO      NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO      NUMBER(6);   -- Ojo con la fecha del proceso.
   VD_FECPRO      DATE;
   VV_RETORNO     VARCHAR2(2):='OK';

BEGIN

  COMMIT;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

 -- Llamada a FNC_ACCIONES_BS solo si hay datos en BAS_MEN_MENSUAL.MAESTRO_ACCIONES_BS_SAS , ADP 20180115 ;

      BAS_MEN.FNC_ACCIONES_BS;

  EXCEPTION
  WHEN OTHERS THEN

  RAISE;
END;

/
--bkd10012=====================================================================================================
Select 'bkd10012' As Compilando from dual;  

create or replace FUNCTION    BAS_MEN.SF_ES_MORA_SUBJETIVA ( PE_IDSituac      IN BAS_MEN.BASILEA.OR_IDSITUAC%TYPE
                                                           , PE_SitCon        IN BAS_MEN.BASILEA.OR_SITCON%TYPE
                                                           , PE_TIPODEFAULT   IN BAS_MEN.BASILEA.TIPODEFAULT%TYPE /* RMR 06/05/2020 Añadido tipo de mora de la nueva DoD*/
                                                           , PE_MARCA_DEFAULT IN VARCHAR2 /* RMR 06/05/2020 Añadido marca para saber el tipo de proceso 'CONT' o 'NDOD' */
                                                        )
RETURN VARCHAR2 PARALLEL_ENABLE
--
-- Para que se considere mora subjetiva ha de ser moroso o contagiado o bloqueado ( IN_INMDOR IN ('SI', 'CT') o IN_SRATIN = 'BLQRM' )
-- ************** POR LO QUE SE HA DE FILTRAR ANTES, SINO
--
IS

  PS_Es_Mora_Subjetiva VARCHAR2(1)                    DEFAULT '?';

  vv_SitCon            BAS_MEN.BASILEA.OR_SITCON%TYPE DEFAULT upper(PE_SitCon);

BEGIN

   IF PE_MARCA_DEFAULT = 'CONT' THEN /* RMR 06/05/2020 Añadida casuística de si el proceso según contabilidad o de nueva DoD */

     IF (PE_IDSITUAC = 7 OR nvl(vv_SitCon,'?') IN ('K','J','Y','F')) THEN
       PS_Es_Mora_Subjetiva := 'S';
     ELSE
       PS_Es_Mora_Subjetiva := 'N';

     END IF;

  ELSE
    /* RMR 06/05/2020 En caso de nueva DoD, dependiendo del tipo de mora usamos el parametro TIPODEFAULT */
    IF PE_TIPODEFAULT IN ('03','04','05','06','07','08','09','10','11','12','13','14','15','16') THEN   /* FMRR - 20/04/2021 - Añadir tipo default 7 y 14 como subjetivo */
       PS_Es_Mora_Subjetiva := 'S';
    ELSE
       PS_Es_Mora_Subjetiva := 'N';
    END IF;

  END IF;

  RETURN PS_Es_Mora_Subjetiva;

EXCEPTION
   WHEN OTHERS THEN RAISE;

END;

/

show errors;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CALCUL_CCF (PN_METODO       IN  VARCHAR2,
                                          PN_OPCIO         IN  NUMBER,
                                          PN_F             IN  NUMBER,
                                          PV_IN_SEGMBS     IN  VARCHAR2,
                                          PV_FI_TIPEXP     IN  VARCHAR2,
                                          PV_OR_PROCED     IN  VARCHAR2,
                                          PV_OR_TIPOPE     IN  VARCHAR2,
                                          PN_OR_VIDINI     IN  NUMBER,
                                          PN_OR_VIDRES     IN  NUMBER,
                                          PN_OR_CLUNICUENT IN  NUMBER,
                                          PN_MOROSO        IN  VARCHAR2,
                                          PN_OR_TIPAVA     IN  NUMBER,
                                          PV_IN_SEGMBSINI  IN  VARCHAR2,
                                          PV_OR_EPIIND     IN  VARCHAR2,
                                          PV_FI_EPICON     IN  VARCHAR2,
                                          PV_IN_SEGMBS0    IN  VARCHAR2,
                                          PV_FI_EXCEDID    IN  VARCHAR2,
                                          PN_OR_CTAIND     IN  NUMBER,
                                          PN_CCF           IN  FLOAT,
                                          PV_TIPGAR        IN  VARCHAR2,
                                          PV_OR_ENTITY     IN  NUMBER,
                                          PV_IN_SUCEPT     IN VARCHAR2,
                                          PV_IN_TIPOREG    IN VARCHAR2,
                                          --/*HDEV-107786 Nuevos calibrados*/
                                          PV_OR_SEGFIC     IN VARCHAR2,
                                          PV_OR_INDHOLDING IN VARCHAR2,
                                          PV_IN_SEGMBS2    IN VARCHAR2,
                                          -- /*HDEV-107786 Nuevos calibrados*/
                                          PN_FI_CCF        OUT NUMBER,
                                          RET              OUT VARCHAR2) IS

  VN_OR_VIDINI NUMBER(8);

BEGIN

  VN_OR_VIDINI := PN_OR_VIDINI;

  RET:= 'OK';
  PN_FI_CCF := 1;

  IF PN_METODO = 'AIRB' AND SUBSTR(PV_OR_EPIIND,1,5) IN ('03001','03002','03003') THEN
        PN_FI_CCF:= 0.75; -- Se marca al 0.75 las exposiciones del AIRB de los epígrafes 3001*, 3002* y 3003*. XCG, 17/06/08.
  END IF;

  IF PN_METODO = 'ACT' AND SUBSTR(PV_OR_EPIIND,1,5) IN ('03001','03002','03003') THEN
        PN_FI_CCF:= 0.5; -- Se marca al 0.5 las exposiciones del Actual de los epígrafes 3001*, 3002* y 3003*. XCG, 17/06/08.
  END IF;

  -- SE INICIALIZA A 1 AÑO LA VIDA INICIAL DE LAS PROCEDENCIAS INDICADAS CUANDO ESTA SIN INFORMAR
  IF PN_METODO = 'STDA' AND VN_OR_VIDINI = 99999999 AND
     PV_OR_PROCED IN('ABONODXECS','COBRAMENTS','CONFIRMING','CS-LLOGUER','EFECTES',
                     'ES-FINAN','FACTORING','FORFAITING','INT-XECS','INV-C/C-CR',
                     'INV-C/C-EX','REBUT-DOM','TARGES','TR-MASIVAS') THEN
        VN_OR_VIDINI := 365;
  END IF;

  --DISPONIBLES.
  IF PV_FI_TIPEXP = 'UNDRAWN' THEN
     IF PN_MOROSO = 'SI' THEN
        PN_FI_CCF:= 0;
     ELSIF SUBSTR(PV_OR_EPIIND,1,11) = '03002001001' AND PV_OR_PROCED = 'ES-ARBITR' THEN
        PN_FI_CCF:= 1; -- Depósitos cedidos a futuro. XCG, 4/07/08.
     ELSIF PN_METODO = 'ACT' THEN
        PN_FI_CCF := 0.5;
        IF PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES' THEN --XCG 20/08/07.
           PN_FI_CCF:= 0;
        END IF;
      -- pmj 9/2/07 se pondera siempre el factoting a 0 para método actual
        IF PV_OR_PROCED = 'FACTORING' OR (PV_IN_TIPOREG IN ('OXE', 'OX', 'OXC', 'MMOXE', 'MMOXC') AND PV_OR_TIPOPE = 'EC') THEN
           PN_FI_CCF:= 0;
        END IF;
        IF PV_OR_PROCED = 'PR-DISPONI' AND (PV_IN_SEGMBS0 = '200' OR PV_TIPGAR IN ('HC','HV','HR','HX')) THEN
              PN_FI_CCF:= 0.5;
        END IF;

     ELSIF PN_METODO = 'STDA' THEN
         -- Para disponi, promociones y creditos con vida inicial menor a 1 año, CCF = 0, sino CCF = 0,5. XCG, 29/01/08.
         IF (PV_OR_PROCED = 'PR-DISPONI' AND PV_IN_SEGMBS0 = '200')
         OR (PV_OR_TIPOPE = 'CR' OR PV_OR_PROCED IN ('INV-C/C-CR','C/C-CR-NIC','INV-C/C-EX','CR-DISPONI')) THEN
            IF (VN_OR_VIDINI/365) <= 1 THEN
/*INI -  NAV - 05/05/2022 - HDEV-153313 - modificar el ccfstda para los or_tipope = 'CR' y fi_tipexp = 'Undrawn' */
--               IF (PV_OR_TIPOPE = 'CR' and PV_OR_ENTITY = 9109) OR PV_OR_PROCED IN ('INV-C/C-CR','C/C-CR-NIC','INV-C/C-EX') THEN
--                  PN_FI_CCF:= 0.2; --Créditos 0.2 XCG 3/02/11
--               else
--                  PN_FI_CCF:= 0; --Préstamos con promoción
--               end if;
                    PN_FI_CCF:= 0.2; --Préstamos con promoción
/*FIN -  NAV - 05/05/2022 - HDEV-153313 */
           ELSE
              PN_FI_CCF:= 0.5;
           END IF;
        -- Para disponi, no promociones con vida residual menor a 1 año, CCF = 0, sino CCF = 0,5. XCG, 29/01/08.
        ELSIF PV_OR_PROCED = 'PR-DISPONI' AND PV_IN_SEGMBS0 <> '200' THEN
              IF (VN_OR_VIDINI/365) <= 1 THEN
                 PN_FI_CCF:= 0;
              ELSE
                 PN_FI_CCF:= 0.5;
              END IF;
        ELSIF (PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES') THEN --XCG 30/12/09.
              PN_FI_CCF:= 0;     -- Targetas al 0% independientemente del producto. XCG 3/02/11
        -- Para el resto, con vida inicial mayor a 1 año, CCF = 0,5 sino CCF = 0,2. XCG, 29/01/08.
        ELSIF (VN_OR_VIDINI/365) > 1 THEN
              IF VN_OR_VIDINI = 99999999 AND PV_OR_PROCED IN ('ABONODXECS', 'COBRAMENTS', 'CONFIRMING', 'CS-LLOGUER', 'EFECTES', 'ES-FINAN',
                 'FORFAITING', 'INT-XECS', 'INV-C/C-CR', 'REBUT-DOM', 'TR-MASIVAS') THEN
                 PN_FI_CCF:= 0.2; --Se asigna un CCF del 20% si la procedencia informada es una de las anteriores y la vida inicial no esta informada.
              ELSE
                   PN_FI_CCF:= 0.5;
              END IF;
        ELSE
               PN_FI_CCF:= 0.2;
        END IF;

        IF PV_OR_PROCED = 'FACTORING' OR (PV_IN_TIPOREG IN ('OXE', 'OX', 'OXC', 'MMOXE', 'MMOXC') AND PV_OR_TIPOPE = 'EC') THEN
           PN_FI_CCF:= 0; -- El Factoring del STDA se pondera al 0%.
        END IF;
     ELSE
        PN_FI_CCF := 0.75;
        IF PV_IN_SEGMBS IN ('EMPRESAS','PYME EMPRESAS','PYME MINORISTAS','REAL ESTATE','OBJECT FINANCE') THEN -- afegim PF, Xisco 22/03.
           IF (PV_OR_PROCED IN ('INV-C/C-CR','INV-C/C-EX')
               --HDEV-107790 01/03/2022
                OR (PV_IN_TIPOREG IN ('OXE', 'OX', 'OXC', 'MMOXE', 'MMOXC') AND PV_OR_TIPOPE in ('PR','CR') AND (PV_OR_SEGFIC IN ('E5','GR' )) 
                    OR (PV_OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND PV_OR_TIPOPE = 'CR') -- 201609 Cambio en CCF para sindicados, si son créditos van como tal.
                   )
              ) THEN  
                  IF PV_FI_EXCEDID = 'SI' THEN
                     PN_FI_CCF:= 1;
                  ELSE
                       PN_FI_CCF:= PN_CCF;
                  END IF;
           ELSIF PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES' THEN
                 PN_FI_CCF:= PN_CCF; --CCF de tarjetas de empresas por limites. XCG 23/01/12.
           END IF;
        ELSIF PV_IN_SEGMBS = 'COMERCIOS Y AUTÓNOMOS' THEN
              IF (PV_OR_PROCED IN ('INV-C/C-CR', 'INV-C/C-EX')
              OR (PV_IN_TIPOREG IN ('OXE', 'OX', 'MMOXE') AND PV_OR_TIPOPE = 'CR')
              OR (PV_OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND PV_OR_TIPOPE = 'CR')) THEN -- 201609 Cambio en CCF para sindicados, si son créditos van como tal.
                 PN_FI_CCF:= PN_CCF; --Los créditos de Comercios y Autónomos tienen un CCF según maestro pool. XCG 25/07/11.
              ELSIF PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES' THEN
                 PN_FI_CCF:= PN_CCF; --CCF de tarjetas --> 201312 JCVJCV CCF según maestro pool
              END IF;
        ELSIF PV_IN_SEGMBS in ('TARJETAS CRÉDITO', 'RESTO MINORISTA') THEN -- 201609 Cambio en CCF para sindicados, si son créditos van como tal.
              IF (PV_OR_PROCED IN ('INV-C/C-CR','C/C-CR-NIC','INV-C/C-EX') OR (PV_OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND PV_OR_TIPOPE = 'CR')) AND SUBSTR(PV_IN_SUCEPT,1,2) = 'KT' THEN
                 PN_FI_CCF:= PN_CCF; -- JCVJCV 201312 JCVJCV CCF según maestro pool
              ELSIF (PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES') AND SUBSTR(PV_IN_SUCEPT,1,2) = 'TA' THEN
                    PN_FI_CCF:= PN_CCF; -- JCVJCV 201312 JCVJCV CCF según maestro pool
              ELSE
                   PN_FI_CCF:= 0.75;
              END IF;
        ELSIF (PV_IN_SEGMBS = 'DERECHOS COBRO' AND PN_OR_CLUNICUENT != 999999999999999) OR
              (PV_IN_TIPOREG IN ('OXE','OX','OXC', 'MMOXE', 'MMOXC') AND PV_OR_TIPOPE = 'EC') THEN
              PN_FI_CCF:= 0.25; --Factoring sin recurso. XCG, 27/12/10
        END IF;

        IF PV_OR_PROCED IN ('CR-DISPONI', 'SINDICDIV', 'CR-SINDIC')  AND PV_OR_TIPOPE <> 'CR' THEN -- 201609 Cambio en CCF para sindicados, si no son créditos (en teoria serán préstamos) van por vida residual.
 /* INI - 22/06/2022 - NAV - HDEV-169106 - al ccf por airb hay que asignarle el mismo valor que se le asigna al ccf por stda
           IF PN_OR_VIDRES/365 <= 1 OR PN_OR_VIDRES = 99999999 THEN
              PN_FI_CCF:= 1; -- Xcg, 02/04/07.
           ELSE
              PN_FI_CCF:= (1/(PN_OR_VIDRES/365)); -- Xcg, 08/08/07.
           END IF;*/
             IF (VN_OR_VIDINI/365) <= 1 THEN
                  PN_FI_CCF:= 0;
              ELSE
                 PN_FI_CCF:= 0.5;
              END IF;
/* FIN - 22/06/2022 - NAV - HDEV-169106 - al ccf por airb hay que asignarle el mismo valor que se le asigna al ccf por stda*/
        ELSIF PV_OR_PROCED = 'FACTORING' AND PN_OR_CLUNICUENT = 999999999999999 THEN
              PN_FI_CCF:= 0; --Factoring con recurso.
        ELSIF PV_OR_PROCED = 'PRES-DIVIS' THEN
              PN_FI_CCF:= 0.75;
        ELSIF PV_OR_PROCED = 'PR-DISPONI' THEN
              PN_FI_CCF:= 0.5;
        END IF;

        -- Las cuentas de orden de EEFF serán siempre 0.75.
        IF PV_IN_SEGMBSINI IN ('007', '018', '021', '028', '029', '032') THEN

           --TARGETAS Y FACTORING DE EEFF AL 0%- xcg, 19/07/13
           IF PV_OR_PROCED = 'FACTORING' OR (PV_IN_TIPOREG IN ('OXE', 'OX', 'OXC', 'MMOXE', 'MMOXC') AND PV_OR_TIPOPE = 'EC') THEN
              PN_FI_CCF:= 0;
           ELSIF PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES' THEN
                 PN_FI_CCF:= 0;
           ELSIF PV_OR_PROCED = 'PR-DISPONI' THEN --XCG, 22/06/20. PR-DISPONI al 0.5
                 PN_FI_CCF:= 0.5;
           ELSE
                PN_FI_CCF:= 0.75;
           END IF;
        END IF;
     END IF;
 /*HDEV-107790 28/02/2022*/
     ELSIF PV_FI_TIPEXP = 'DRAWN' AND PN_METODO = 'AIRB' and PV_IN_SEGMBSINI IN ('003','005','006','009','010','019','027') AND PV_IN_SEGMBS0 <> '201'
       /*HDEV-107790 19/04/2022*/ AND PV_OR_SEGFIC NOT IN ( 'E5','GR') THEN     --29/04/2022    PV_OR_SEGFIC<>'E5'
           IF (PV_OR_PROCED IN ('INV-C/C-CR','INV-C/C-EX')
              OR (PV_OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND PV_OR_TIPOPE = 'CR') ) THEN -- 201609 Cambio en CCF para sindicados, si son créditos van como tal.
                 PN_FI_CCF:= PN_CCF;
           ELSIF  ((PV_OR_TIPOPE = 'TC' OR PV_OR_PROCED = 'TARGES' ) and PV_IN_TIPOREG NOT IN ('OXE', 'OX', 'OXC', 'MMOXE', 'MMOXC') )THEN
                   PN_FI_CCF:= PN_CCF;
          END IF;

--AVALES.
  ELSIF PV_FI_TIPEXP = 'OFFBALANCE' THEN
     IF PN_METODO IN ('ACT','STDA') THEN
        IF PV_OR_TIPOPE = 'CD' OR PV_OR_PROCED = 'ES-NEGDOC' THEN
           PN_FI_CCF:= 0.5;
        ELSIF PV_OR_TIPOPE IN ('AF', 'AT', 'OA') OR PV_OR_PROCED = 'AVALES' THEN --xcg, 16/04/14 POR PARAMETROS
              BEGIN
                 SELECT CCF
                   INTO PN_FI_CCF
                   FROM BAS_MEN.CCF_AVALES
                  WHERE OR_TIPAVA = PN_OR_TIPAVA;
              EXCEPTION
                   WHEN OTHERS THEN
                        PN_FI_CCF:= 0.5;
              END;
        END IF;
     ELSE
--INI - 16/12/2019 - NAV - CCF´s para el método AIRB de tal forma que las exposiciones con fi_tipexp “OffBalance” recibirán el CCF que tenga
--                         asignado según el método Estádar. El CCF por defecto para Avales sería el 50% tanto para Estándar como para AIRB
        PN_FI_CCF:= 0.5;
        --
        IF PV_IN_SEGMBSINI IN ('007', '018', '021', '028', '029', '032') THEN    --EEFF
            BEGIN
               SELECT CCF
                 INTO PN_FI_CCF
                 FROM BAS_MEN.CCF_AVALES
                WHERE OR_TIPAVA = PN_OR_TIPAVA;
            EXCEPTION
                 WHEN OTHERS THEN
                      PN_FI_CCF:= 0.5;
            END;

            IF PV_OR_TIPOPE = 'CD' OR PV_OR_PROCED = 'ES-NEGDOC' THEN            -- CREDITOS DOCUMENTARIOS DE EEFF AL 0.2
               PN_FI_CCF:= 0.2;
            END IF;

        ELSIF PV_OR_TIPOPE = 'CD' OR PV_OR_PROCED = 'ES-NEGDOC'  THEN            -- Créditos documentarios (para los que se asimila un CCF de aval financiero)
              PN_FI_CCF:= 0.2;

        ELSIF PV_OR_TIPOPE IN ('AF','AT', 'OA') OR PV_OR_PROCED = 'AVALES' THEN  -- Avales de Empresas.
              BEGIN
                 SELECT CCF
                   INTO PN_FI_CCF
                   FROM BAS_MEN.CCF_AVALES
                  WHERE OR_TIPAVA = PN_OR_TIPAVA;
              EXCEPTION
                   WHEN OTHERS THEN
                        PN_FI_CCF:= 0.5;
               END;
        END IF;
     END IF;
--       PN_FI_CCF:= 0.75;
--       IF PV_IN_SEGMBSINI IN ('007', '018', '021', '028', '029', '032') THEN
--             BEGIN
--                SELECT CCF
--                  INTO PN_FI_CCF
--                  FROM BAS_MEN.CCF_AVALES
--                 WHERE OR_TIPAVA = PN_OR_TIPAVA
--                   and DESCRIPCION = 'DINERARIOS';
--             EXCEPTION
--                  WHEN OTHERS THEN
--                       NULL;
--             END;
--             IF PV_OR_TIPOPE = 'CD' OR PV_OR_PROCED = 'ES-NEGDOC' THEN -- CREDITOS DOCUMENTARIOS DE EEFF AL 0.2. xcg, 201703
--                PN_FI_CCF:= 0.2;
--             end if;
--       ELSIF PV_OR_TIPOPE = 'CD' OR PV_OR_PROCED = 'ES-NEGDOC' THEN
--          -- Créditos documentarios (para los que se asimila un CCF de aval financiero) Hubo cambio de calibración de avales (pasando del 30,52% al 24,04%)
--             SELECT DISTINCT CCF  INTO PN_FI_CCF FROM BAS_MEN.CCF_AVALES WHERE DESCRIPCION = 'FINANCIEROS';
--       -- Avales de Empresas.
--       --ELSIF PV_OR_TIPOPE IN ('AF','AT') OR (PV_OR_TIPOPE = '?' AND PV_OR_PROCED = 'AVALES') THEN 201502 JCVJCV
--       ELSIF PV_OR_TIPOPE IN ('AF','AT', 'OA') OR PV_OR_PROCED = 'AVALES' THEN --201502 JCVJCV
--             BEGIN
--                SELECT CCF
--                  INTO PN_FI_CCF
--                  FROM BAS_MEN.CCF_AVALES
--                 WHERE OR_TIPAVA = PN_OR_TIPAVA;
--             EXCEPTION
--                  WHEN OTHERS THEN
--                       -- JCVJCV El de Financieros según maestro pool (No debería haber duplicados)
--                       SELECT DISTINCT CCF  INTO PN_FI_CCF FROM BAS_MEN.CCF_AVALES WHERE DESCRIPCION = 'FINANCIEROS';
--             END;
--       END IF;
--    END IF;
--FIN - 16/12/2019
     IF PN_METODO = 'ACT' AND SUBSTR(PV_OR_EPIIND,1,16) = '0300100300200000' THEN
        PN_FI_CCF:= 0.5;
     END IF;
  --REPOS
  ELSIF PV_FI_TIPEXP = 'REPOS' THEN
     IF PN_METODO IN ('AIRB','STDA') AND SUBSTR(PV_OR_EPIIND,1,5) IN ('02002','02003','02004') THEN
        PN_FI_CCF:= 0;
     END IF;
  --DERIVADOS.
  ELSIF PV_FI_TIPEXP = 'OTC' THEN
        PN_FI_CCF:= 1;
        IF PN_OPCIO = 1 THEN
           IF PN_OR_VIDRES/365 <= 1 OR PN_OR_VIDRES = 99999999 THEN
              IF PV_OR_TIPOPE IN ('AA','RF','OP TI','SWAPS','CMS','FRAS','EQS RF','CAP','CAP HIPO') THEN
                 PN_FI_CCF:= 0;
              ELSIF PV_OR_TIPOPE IN ('EQS DIV','OP DV','FW') THEN
                 PN_FI_CCF:= 0.01;
              ELSIF PV_OR_TIPOPE IN ('EQS RV','OP RV') THEN
                 PN_FI_CCF:= 0.06;
              ELSIF PV_OR_TIPOPE IN ('OP MT') THEN
                 PN_FI_CCF:= 0.07;
              ELSIF PV_OR_TIPOPE IN ('CDS','OP OT','OP ME') THEN
                 PN_FI_CCF:= 0.1;
              ELSIF PV_OR_TIPOPE = 'OP PV' THEN
                    PN_FI_CCF:= 0.5; /* RVC- INCLUIMOS TRATAMIENTO CCF PARA OPCIONES EMITIDAS DE VENTA DE ACCIONES BS*/
              END IF;
           ELSIF PN_OR_VIDRES/365 > 1 AND PN_OR_VIDRES/365 <= 5 THEN
              IF PV_OR_TIPOPE IN ('AA','RF','OP TI','SWAPS','CMS','FRAS','EQS RF','CAP','CAP HIPO') THEN
                 PN_FI_CCF:= 0.005;
              ELSIF PV_OR_TIPOPE IN ('EQS DIV','OP DV','FW') THEN
                 PN_FI_CCF:= 0.05;
              ELSIF PV_OR_TIPOPE IN ('EQS RV','OP RV') THEN
                 PN_FI_CCF:= 0.08;
              ELSIF PV_OR_TIPOPE = 'CDS' THEN
                 PN_FI_CCF:= 0.1;   -- Nuevo tratamiento para Credit Default Swaps. XCG, 27/01/09.
                 /* RVC- INCLUIMOS TRATAMIENTO CCF PARA OPCIONES EMITIDAS DE VENTA DE ACCIONES BS*/
              ELSIF PV_OR_TIPOPE = 'OP PV' THEN
                    PN_FI_CCF:= 0.5;
              ELSIF PV_OR_TIPOPE IN ('OP MT') THEN
                 PN_FI_CCF:= 0.07;
              ELSIF PV_OR_TIPOPE IN ('OP OT','OP ME') THEN
                 PN_FI_CCF:= 0.12;
              END IF;
           ELSIF PN_OR_VIDRES/365 > 5 THEN
              IF PV_OR_TIPOPE IN ('AA','RF','OP TI','SWAPS','CMS','FRAS','EQS RF','CAP','CAP HIPO') THEN
                 PN_FI_CCF:= 0.015;
              ELSIF PV_OR_TIPOPE IN ('EQS DIV','OP DV','FW') THEN
                 PN_FI_CCF:= 0.075;
              ELSIF PV_OR_TIPOPE IN ('CDS', 'EQS RV','OP RV') THEN
                 PN_FI_CCF:= 0.1;
              ELSIF PV_OR_TIPOPE IN ('OP MT') THEN
                 PN_FI_CCF:= 0.08;
              ELSIF PV_OR_TIPOPE IN ('OP OT','OP ME') THEN
                 PN_FI_CCF:= 0.15;
              ELSIF PV_OR_TIPOPE = 'OP PV' THEN
                    PN_FI_CCF:= 0.5; /* RVC- INCLUIMOS TRATAMIENTO CCF PARA OPCIONES EMITIDAS DE VENTA DE ACCIONES BS*/
              END IF;
           END IF;
        ELSIF PN_OPCIO = 2 THEN
           IF PV_OR_TIPOPE = 'EQS DIV' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.1,0.1*PN_F*SQRT(VN_OR_VIDINI/365));
           ELSIF PV_OR_TIPOPE = 'EQS RF' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.05,0.05*(VN_OR_VIDINI/365));
           ELSIF PV_OR_TIPOPE = 'EQS RV' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.1,0.5*PN_F*SQRT(VN_OR_VIDINI/365));
           ELSIF PV_OR_TIPOPE IN ('FRAS','AA') THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.03,0.02*(VN_OR_VIDINI/365));
           ELSIF PV_OR_TIPOPE = 'OP DV' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.1,0.1*SQRT(VN_OR_VIDINI/365));
           ELSIF PV_OR_TIPOPE = 'OP RV' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.1,SQRT(VN_OR_VIDINI/365)*0.5*PN_F);
           /* RVC- INCLUIMOS TRATAMIENTO CCF PARA OPCIONES EMITIDAS DE VENTA DE ACCIONES BS*/
           ELSIF PV_OR_TIPOPE = 'OP PV' THEN
              PN_FI_CCF:= 0.5;
           ELSIF PV_OR_TIPOPE = 'OP TI' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.05,0.02*(VN_OR_VIDINI/365));
           ELSIF PV_OR_TIPOPE IN ('AA','RF','SWAPS','CAP','CAP HIPO') THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.05,0.02*(PN_OR_VIDRES/365));
           ELSIF PV_OR_TIPOPE = 'CMS' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.03,0.02*(PN_OR_VIDRES/365));
           ELSIF PV_OR_TIPOPE = 'FW' THEN
              PN_FI_CCF:= BAS_MEN.FNC_MAX(0.1,0.1*SQRT(VN_OR_VIDINI/365));
           END IF;
        END IF;
  END IF;

  -- 16/07/2019 - Modificamos la prelación
  -- 03/09/2018 - Disponibles Condicionales - Epígrafe: 030020103040000000000000000000 tienen que ir al 0% de CCF
  IF PV_FI_EPICON = '030020103040000000000000000000' THEN
      PN_FI_CCF:= 0;
  END IF;

/* 22/12/2020 - NAV - Dejamos de asignar 0.75 a los de PROJECT FINANCE y OFFBALANCE*/
/* IF PN_METODO = 'AIRB' AND PV_IN_SEGMBS = 'PROJECT FINANCE' AND PV_FI_TIPEXP IN ('OFFBALANCE', 'UNDRAWN') AND PV_OR_PROCED <> 'PR-DISPONI' THEN */
  IF PN_METODO = 'AIRB' AND PV_IN_SEGMBS = 'PROJECT FINANCE' AND PV_FI_TIPEXP = 'UNDRAWN' AND PV_OR_PROCED <> 'PR-DISPONI' THEN
     PN_FI_CCF:= 0.75; --XCG, 22/06/20. PR-DISPONI al 0.5
  END IF;

  IF PN_METODO IN ('AIRB', 'STDA','ACT') AND SUBSTR(PV_OR_EPIIND,1,8) = '03002002' THEN
     PN_FI_CCF:= 1; -- Compromisos de compra a plazo de Activos Financieros. XCG, 4/07/08.
  END IF;

  IF PN_METODO = 'STDA' THEN
     IF PN_OR_CTAIND = 6782419900 THEN
        PN_FI_CCF:= 1;
     ELSIF PN_OR_CTAIND = 6782339900 THEN
           PN_FI_CCF:= 0.2;
     -- 201408 --  20140909  llevar los epígrafes '03002002%' '03002003%' de RF al 1 en CCF de stda
     --ELSIF SUBSTR(PV_OR_EPIIND,1,8) IN ('03002002','03002003') THEN  -- Se deja de tener en cuenta la cuenta '03002002' ya que se tiene en cuenta en una condición anterior
     ELSIF SUBSTR(PV_OR_EPIIND,1,8) = '03002003' THEN
        PN_FI_CCF:= 1;
   --  ELSIF SUBSTR(PV_OR_EPIIND,1,11) = '03002006002' THEN --XCG, 30/10/2014
    --         PN_FI_CCF:= 0.2;
     END IF;
  END IF;



EXCEPTION
 WHEN OTHERS THEN
    RET:= SUBSTR('KO:'||TO_CHAR(SQLCODE)||'CCF'||SQLERRM,1,100);
END;

/

show errors;

-----------------------------------------------------------------------------------------------------------------------------------
-- EAD REPOS
-----------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE  BAS_MEN.pkg_ead_repos AS
  PROCEDURE contrapartidas_sin_acuerdo;
  PROCEDURE contrapartidas_con_acuerdo;
  PROCEDURE calculo_exposicion;
  FUNCTION  get_tipo_cc_vidres_bono (p_or_coisin VARCHAR2) RETURN VARCHAR2;
  FUNCTION  get_volatilidad(p_tipo IN VARCHAR2, p_ratext IN VARCHAR2, p_vidres IN INTEGER, p_or_coisin VARCHAR2) RETURN FLOAT;
END;
/

create or replace PACKAGE BODY  BAS_MEN.pkg_ead_repos AS

  -- NOTA:
  -- La tabla de población inicial se obtiene a partir de las tablas basilea, basilea_corep (diciembre 2015) y dcrprop_201512.basilea_stda_corep@dcrbasora2p (para obtener el rwastda)
  -- teniendo en cuenta que fi_tipexp = 'Repos', fi_elimi1 = 'NO', or_cluniopera <> 0 y or_repos > 1

FUNCTION get_calidad_crediticia (p_rating VARCHAR2) RETURN VARCHAR2 IS
    v_cc VARCHAR2(3);
  BEGIN
    CASE WHEN p_rating IN ('AAA','AA+','AA','AA-')               THEN v_cc := '1';
         WHEN p_rating IN ('A+' ,'A'  ,'A-','BBB+','BBB','BBB-') THEN v_cc := '2-3';
         WHEN p_rating IN ('BB+','BB' ,'BB-')                    THEN v_cc := '4';
         ELSE                                                         v_cc := '-1';
    END CASE;

    RETURN v_cc;
  END;

  FUNCTION get_tipo_cc_vidres_bono (p_or_coisin VARCHAR2) RETURN VARCHAR2 AS
    v_nomper    BAS_MEN.maestro_tipologia_bonos.or_nomper%TYPE;
    v_divisa    BAS_MEN.maestro_tipologia_bonos.or_divisa%TYPE;
    v_segmbsini BAS_MEN.maestro_tipologia_bonos.segmbsini%TYPE;
    v_rwastda   BAS_MEN.maestro_tipologia_bonos.rwastda%TYPE;
    v_tipologia BAS_MEN.maestro_tipologia_bonos.tipologia%TYPE;
    v_ratext    BAS_MEN.maestro_tipologia_bonos.ratext%TYPE;
  BEGIN

    SELECT or_nomper, or_divisa, segmbsini  , rwastda  , tipologia  , ratext
      INTO v_nomper , v_divisa , v_segmbsini, v_rwastda, v_tipologia, v_ratext
      FROM BAS_MEN.maestro_tipologia_bonos
     WHERE or_coisin = p_or_coisin;

    RETURN v_tipologia;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN -1;
  END;

  FUNCTION get_volatilidad(p_tipo IN VARCHAR2, p_ratext IN VARCHAR2, p_vidres IN INTEGER, p_or_coisin VARCHAR2) RETURN FLOAT AS
    v_volatilidad FLOAT;
    v_tipo_bono   VARCHAR2(10);
    v_cc_bono     VARCHAR2(3);

    v_valor_tipo1 FLOAT;
    v_valor_tipo2 FLOAT;
    v_valor_botit FLOAT;

    v_or_vidres   VARCHAR2(30);
  BEGIN
    IF p_tipo IN ('Acciones1', 'Acciones2', 'Efectivo', 'Oro') THEN -- Por aquí en principio no se va a entrar nunca. Actualmente sólo tenemos bonos
       BEGIN
        SELECT volatilidad
          INTO v_volatilidad
          FROM BAS_MEN.maestro_volatidad_repo
         WHERE tipo = p_tipo;
      EXCEPTION
        WHEN OTHERS THEN
         NULL;
         v_volatilidad := 0.17678; -- temporalmente. Hay que ver qué se hace con ésto (en principio se asigna el caso peor)
      END;
    ELSE

      v_cc_bono := get_calidad_crediticia(p_ratext);

      CASE WHEN p_vidres <= 365                                       THEN v_or_vidres := '<= 1 AÑO';
           WHEN p_vidres >  365  AND p_vidres <= 1825 THEN v_or_vidres := '>1 AÑO <= 5 AÑOS';
           ELSE                                                                            v_or_vidres := '> 5 AÑOS';
      END CASE;

      v_tipo_bono := get_tipo_cc_vidres_bono (p_or_coisin);

      -- A partir de estos valores, obtener de la tabla
      BEGIN
        SELECT CASE WHEN v_tipo_bono = 'TIPO 1' THEN tipo1
                    WHEN v_tipo_bono = 'TIPO 2' THEN tipo2
                    WHEN v_tipo_bono = 'TIT' THEN bonos_titulizacion
                    ELSE 0.17678
               END AS volatilidad
          INTO v_volatilidad
          FROM BAS_MEN.maestro_calidad_cred_repo
         WHERE nivel_calidad_cred = v_cc_bono
           AND or_vidres = v_or_vidres;
      EXCEPTION
        WHEN OTHERS THEN
          v_volatilidad := 0.17678;--- Valor que se da cuando no se encuentra en la tabla
      END;
    END IF;
    RETURN v_volatilidad;
  END;

  PROCEDURE actualizar_maestro_tipol_bonos IS
    v_cont INTEGER;
  BEGIN
    FOR i IN (SELECT DISTINCT
                     nvl(fitch, 'NR') fitch,
                     nvl(moody, 'NR') moody,
                     nvl(sp, 'NR')        sp
                FROM dcrprop_mensual.maestro_tipologia_bonos_sas)
    LOOP
      v_cont := 1;
      UPDATE BAS_MEN.maestro_tipologia_bonos
         SET ratext = bas_men.pkg_calculos_rating.get_ratext(v_cont,
                                                             i.sp,
                                                             i.fitch,
                                                             i.moody,
                                                             NULL)
       WHERE fitch = i.fitch
         AND moody = i.moody
         AND sp    = i.sp;

         v_cont := v_cont + 1;
    END LOOP;
    COMMIT;
  END;


PROCEDURE carga_de_maestros AS
    v_fecha_proceso INTEGER;
  BEGIN
    SELECT valparm
      INTO v_fecha_proceso
      FROM BAS_MEN.parametros_proceso
     WHERE codcsb = '0081'
       AND codparm = '0001'
       AND secparm = '03';


    delete BAS_MEN.maestro_tipologia_bonos_hist
    where periodo = v_fecha_proceso;

    commit;

    FOR i IN(SELECT *
               FROM dcrprop_mensual.maestro_tipologia_bonos_sas)
    LOOP
      BEGIN

        INSERT
          INTO BAS_MEN.maestro_tipologia_bonos_hist
              (FITCH  , MOODY  ,   OR_COISIN,   OR_DIVISA,   OR_NOMPER,   RATEXT,   RWASTDA,   SEGMBSINI,   SP,   TIPOLOGIA, PERIODO)
       VALUES (nvl(i.FITCH, 'NR'), nvl(i.MOODY, 'NR'), i.OR_COISIN, i.OR_DIVISA, i.OR_NOMPER, null, i.RWASTDA, i.SEGMBSINI, nvl(i.SP, 'NR'), i.TIPOLOGIA, v_fecha_proceso);

      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          UPDATE BAS_MEN.maestro_tipologia_bonos_hist
             SET FITCH     = nvl(i.FITCH, 'NR'),
                 MOODY     = nvl(i.MOODY, 'NR'),
                 OR_COISIN = i.OR_COISIN,
                 OR_DIVISA = i.OR_DIVISA,
                 OR_NOMPER = i.OR_NOMPER,
                 --RATEXT    = i.RATEXT,
                 RWASTDA   = i.RWASTDA,
                 SEGMBSINI = i.SEGMBSINI,
                 SP        = nvl(i.SP, 'NR'),
                 TIPOLOGIA = i.TIPOLOGIA
           WHERE periodo = v_fecha_proceso AND
                 OR_COISIN = i.OR_COISIN;

      END;
      COMMIT;
    END LOOP;

    EXECUTE IMMEDIATE('TRUNCATE TABLE BAS_MEN.maestro_tipologia_bonos');

    INSERT INTO BAS_MEN.maestro_tipologia_bonos (FITCH  , MOODY  ,   OR_COISIN,   OR_DIVISA,   OR_NOMPER,   RATEXT,   RWASTDA,   SEGMBSINI,   SP,   TIPOLOGIA)
    SELECT FITCH  , MOODY  ,   OR_COISIN,   OR_DIVISA,   OR_NOMPER,   RATEXT,   RWASTDA,   SEGMBSINI,   SP,   TIPOLOGIA
     FROM BAS_MEN.maestro_tipologia_bonos_hist a
    where periodo = (SELECT MAX(periodo) FROM   BAS_MEN.maestro_tipologia_bonos_hist b WHERE a.or_coisin = b.or_coisin);

    COMMIT;

    actualizar_maestro_tipol_bonos;

    EXECUTE IMMEDIATE('TRUNCATE TABLE BAS_MEN.maestro_calidad_cred_repo');
    INSERT
      INTO BAS_MEN.maestro_calidad_cred_repo
      SELECT *
        FROM dcrprop_mensual.maestro_calidad_cred_repo_sas;
    COMMIT;


    EXECUTE IMMEDIATE('TRUNCATE TABLE BAS_MEN.maestro_volatidad_repo');
    INSERT
      INTO BAS_MEN.maestro_volatidad_repo
      SELECT *
        FROM dcrprop_mensual.maestro_volatidad_repo_sas;
    COMMIT;

  END carga_de_maestros;

  PROCEDURE carga_poblacion_inicial AS
  BEGIN

   DELETE /*+ parallel (c 8)*/ BAS_MEN.BASILEA c
    WHERE IN_TIPOREG IN  ('RN', 'ITRN','MMRN');

   COMMIT;

   UPDATE /*+ parallel (c 8)*/ BAS_MEN.basilea c
      SET FI_ELIMI1 = 'NO'
    where FI_ELIMI1 = 'NETTING'
      and fi_tipexp = 'Repos';

   COMMIT;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.poblacion_inicial_ead_repos');

    INSERT INTO BAS_MEN.poblacion_inicial_ead_repos
     SELECT /*+ PARALLEL (c 8) PARALLEL (b 8) PARALLEL (a 8)*/ b.*, CASE WHEN NVL(MCCC.ECC_CUALIFICADA,'?') = '?' THEN
                                                                         0
                                                                         ELSE CASE WHEN MCCC.ECC_CUALIFICADA = 'NO' THEN 1
                                                                                  ELSE 2
                                                                         END
                                                                    END as c_ccp, NULL --c.FI_RWASTDA
       FROM BAS_MEN.basilea b,
            BAS_MEN.MAESTRO_CONTRAPARTES MCCC
      WHERE b.OR_NIFCIF = MCCC.OR_NIFCIF(+)
        AND b.fi_tipexp = 'Repos'
        AND b.fi_elimi1 in ('NO', 'SRABS')
        AND b.or_cluniopera <> 0
        AND b.or_repos > 1;

      COMMIT;

  END carga_poblacion_inicial;

  PROCEDURE contrapartidas_sin_acuerdo AS
    v_EAD  FLOAT;
    v_E    FLOAT;
    v_Eva  FLOAT;

    v_He   FLOAT;
    v_Hc   FLOAT;
    v_Hfx  FLOAT;

    v_C    FLOAT;
    v_Cvam FLOAT;
    v_Cva  FLOAT;

    vTM    INTEGER;
    v_t    INTEGER;

    v_tipo_elem_ced  VARCHAR2(20);
    v_tipo_elem_rec  VARCHAR2(20);

    CURSOR c_sinAC IS
                SELECT distinct TO_NUMBER(SUBSTR(maestro_repos.originalid,3,16)) as refope
                     , maestro_repos.position               -- 'Pay' para Epígrafe 01* y 'Rec' para Epígrafe 02*
                     , maestro_repos.bondissueinstrumentid  -- identificador del bono
                     , maestro_repos.pvrepokgl     AS or_fairva
                     , maestro_repos.bondpv        AS or_fairva_bo
                     , tb.nifcifbic
                     , tb.or_vidres
                     , mbonos.ratext AS in_ratext     --tb.in_ratext
                     , tb.or_coisin
                     , tb.or_fecvto
                     , tb.or_idpers
                     , tb.or_cluniopera
                     , tb.or_cluniprod_opera
                     , tb.or_refope
                     , mbonos.or_divisa            AS or_divisa     --tb.or_divisa
                     , tb.or_idreg
                     , bdu.divisaisin              AS in_divisa     -- divisa bono
                     , bdu.fchemisionisin          AS in_fecemision -- fecha emision bono
                     , bdu.fchvtoisin              AS in_fecvencimi -- fehca vencimiento bono
                     , 'Bono'              AS in_tipelem    -- bdu.tipodeactivoisin
                     , bdu.idefiscbdicper_pisn     AS in_idemisor
                     , NVL(mcsa.SALDO_RECIBIDO, 0)  SALDO_RECIBIDO
                     , NVL(mcsa.SALDO_APORTADO, 0)  SALDO_APORTADO
                     , NVL (ABS(maestro_repos.pvrepokgl) / NULLIF ((SUM(ABS(maestro_repos.pvrepokgl)) over (partition by tb.nifcifbic)),0),0) * NVL(mcsa.SALDO_RECIBIDO,0) AS SALDO_RECIBIDO_AUX
                     , NVL (ABS(maestro_repos.pvrepokgl) / NULLIF ((SUM(ABS(maestro_repos.pvrepokgl)) over (partition by tb.nifcifbic)),0),0) * NVL(mcsa.SALDO_APORTADO,0) AS SALDO_APORTADO_AUX
                 FROM (SELECT /*+ full(a) full(b) PARALLEL (a 8) PARALLEL (b 8)*/
                              or_idreg,
                              in_segmbsini,
                              CASE WHEN NVL(or_codigo_bic,'?') = '?' THEN or_nifcifibm
                                   ELSE                                   or_codigo_bic
                              END AS nifcifbic,
                              or_vidres,
                              in_ratext,
                              or_refope,
                              or_coisin,                    -- para comparar con la tabla de tipologías
                              or_fecvto,
                              or_idpers,
                              or_cluniprod_opera,
                              or_cluniopera,
                              or_divisa,
                              c_ccp
                         FROM BAS_MEN.poblacion_inicial_ead_repos
                        WHERE (in_segmbsini <> '007' OR or_idpers = '12-777013467190')
                          AND or_codigo_bic <> 'CECAESMMXXX' -- se excluye la CECA, ya que aunque esté segmentada como fundación (014), es un banco
                          AND c_ccp  = 0-- El repo no se ha contratado con cámara (ccp = 0) ni con EEFF salvo Nomura
                          ) tb,
                      BAS_MEN.repos_capital maestro_repos,    --03/12/2019 - NAV - Sustituido la tabla REPOS_ORIG por REPOS_CAPITAL
                      BAS_MEN.m_bdu_repos_01 bdu,
                      BAS_MEN.maestro_tipologia_bonos mbonos,
                      (SELECT distinct or_entity, or_codigo_bic, sum(saldo_recibido) SALDO_RECIBIDO, sum(saldo_aportado) SALDO_APORTADO
                         FROM BAS_MEN.maestro_csa_orig
                        WHERE tipo = 'REPO'  /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
                        group by or_entity, or_codigo_bic) mcsa
                WHERE tb.or_cluniprod_opera = TO_NUMBER(SUBSTR(maestro_repos.originalid,1,3))
                  AND tb.or_cluniopera      = TO_NUMBER(SUBSTR(maestro_repos.originalid, 4))
                  AND tb.or_cluniprod_opera = bdu.prodoperacion         -- Código producto de la operación
                  AND tb.or_cluniopera      = TO_NUMBER(bdu.operacion) -- Operacion de la primera tripleta);
                  AND tb.or_coisin          = mbonos.or_coisin(+)
                  AND tb.nifcifbic          = mcsa.or_codigo_bic(+);

  BEGIN
    BAS_MEN.fnc_truncate_table ('BAS_MEN.ead_repos_sin_acuerdo');
    COMMIT;

    FOR i IN c_sinAC
    LOOP

      IF i.position = 'Pay' THEN
        v_E             := ABS(i.or_fairva);
        v_C             := ABS(i.or_fairva_bo);
        v_tipo_elem_ced := 'Efectivo';
        v_tipo_elem_rec := i.in_tipelem;
      ELSE
        v_E := ABS(i.or_fairva_bo);
        v_C := ABS(i.or_fairva);
        v_tipo_elem_ced := i.in_tipelem;
        v_tipo_elem_rec := 'Efectivo';
      END IF;

      -- El ajuste por volatilidad se calcula en función de la calidad crediticia, vencimiento residual de la operacion repoy tipología del bono
      -- para ello se le pasa la vida residual, el tipo de elemento, el idenfificador del mismo y de la contraparte, el rating y el isin

      v_He   := 0;
      IF v_tipo_elem_ced = 'Bono' THEN -- En un principio sólo consideraremos Bonos y efectivo. Si es efectivo no hay volatilidad
        v_He   := get_volatilidad(v_tipo_elem_ced, i.in_ratext, i.or_vidres, i.or_coisin); --Ajuste de volatilidad del elemento cedido
      END IF;
      v_Eva  :=  v_E * ( 1 + v_He);  --Valor razonable del elemento cedido

      v_Hc   := 0;
      IF v_tipo_elem_rec = 'Bono' THEN -- En un principio sólo consideraremos Bonos y efectivo. Si es efectivo no hay volatilidad
        v_Hc   := get_volatilidad(v_tipo_elem_rec, i.in_ratext, i.or_vidres, i.or_coisin); --Ajuste de volatilidad del elemento recibido
      END IF;

      IF i.in_divisa = i.or_divisa THEN
        v_Hfx  := 0;
      ELSE
        v_Hfx  := 0.05657;
      END IF;

      v_Cva  := v_C * (1 - v_Hc - v_Hfx); -- Valor razonable del elemento obtenido

      IF i.in_fecvencimi < i.or_fecvto THEN
        --vTM es el mínimo entre 5 años y el nº de años hasta el vencimiento de la remo
        vTM    := ABS(LEAST(5, MONTHS_BETWEEN(SYSDATE, TO_DATE(i.or_fecvto,'YYYYMMDD') )/12)); -- Comprobar si hace falta abs

        --v_t es el mínimo entre el nº de años hasta el vencimiento del elemento recibido
        v_t    := ABS(LEAST(MONTHS_BETWEEN(SYSDATE, TO_DATE(i.in_fecvencimi,'YYYYMMDD'))/12, MONTHS_BETWEEN(SYSDATE, TO_DATE(i.or_fecvto,'YYYYMMDD') )/12)); -- Comprobar si hace falta abs

        v_Cvam := GREATEST(v_Cva, v_Eva)* (v_t -0.25)/(vTM - 0.25);
      ELSE
        v_Cvam := v_Cva;
      END IF;

      -- Se deberia insertar en algun sitio a nivel de operacion
      -- EXPOSICIÓN: Valor razonable del elemento cedido  menos el del elemento obtenido
      -- v_EAD    := GREATEST(0,v_Eva - v_Cvam - (i.SALDO_APORTADO_AUX - i.SALDO_RECIBIDO_AUX));  - 08/10/2018
      v_EAD    := GREATEST(0,v_Eva - v_Cvam - i.SALDO_RECIBIDO_AUX);

      INSERT
        INTO BAS_MEN.ead_repos_sin_acuerdo ( tipo_operacion       , valor_elem_ced      , valor_elem_rec  ,
                                             tipo_elem_ced        , tipo_elem_rec       , or_cluniopera   ,
                                             or_cluniprod_opera   , or_refope           , id_emisor       ,
                                             divisa               , fec_vencimiento     , fec_emison      ,
                                             volatilidad_elm_ced  , volatilidad_elm_rec , Eva             ,
                                             Cva                  , EAD                 , or_idreg        ,
                                             or_codigo_bic, in_ratext, or_vidres, or_coisin       )
                                    VALUES ( i.position           , v_E                 , v_C             ,
                                             v_tipo_elem_ced      , v_tipo_elem_rec     , i.or_cluniopera ,
                                             i.or_cluniprod_opera , i.or_refope         , i.in_idemisor   ,
                                             i.in_divisa          , i.in_fecvencimi     , i.in_fecemision ,
                                             v_He                 , v_Hc                , v_Eva           ,
                                             v_Cvam               , v_EAD               , i.or_idreg      ,
                                             i.nifcifbic, i.in_ratext, i.or_vidres, i.or_coisin
                                           );

    END LOOP;

    COMMIT;

  END;

  PROCEDURE contrapartidas_con_acuerdo AS
    v_EFX  FLOAT;
    v_E    FLOAT;
    v_Eva  FLOAT;

    v_He   FLOAT;
    v_Hfx  FLOAT;

    v_C    FLOAT;
    v_Cvam FLOAT;
    v_Cva  FLOAT;

    vTM    INTEGER;
    v_t    INTEGER;

    v_tipo_elem_ced  VARCHAR2(20);
    v_tipo_elem_rec  VARCHAR2(20);

    CURSOR c_conAC IS
                SELECT DISTINCT
                       CASE WHEN SUBSTR(or_epiind,2,1) = '2' THEN 'Rec'
                            WHEN SUBSTR(or_epiind,2,1) = '1' THEN 'Pay'
                            ELSE '?'
                       END AS position               -- 'Pay' para Epígrafe 01* y 'Rec' para Epígrafe 02*
                     , tb.or_fairva
                     , tb.in_fairvabo
                     , tb.nifcifbic
                     , tb.or_vidres
                     , mbonos.ratext AS in_ratext  --NVL(mbonos.fitch,tb.in_ratext)      AS in_ratext     --tb.in_ratext
                     , NVL(mbonos.or_coisin,tb.or_coisin) AS or_coisin
                     , tb.or_fecvto
                     , tb.or_idpers
                     , tb.or_cluniopera
                     , tb.or_cluniprod_opera
                     , tb.or_refope
                     , tb.or_person
                     , tb.in_segmbs
                     , tb.or_repos
                     , NVL(mbonos.or_divisa,tb.or_divisa)            AS or_divisa     --tb.or_divisa
                     , tb.or_idreg
                     , bdu.divisaisin              AS in_divisa     -- divisa bono
                     , bdu.fchemisionisin          AS in_fecemision -- fecha emision bono
                     , bdu.fchvtoisin              AS in_fecvencimi -- fehca vencimiento bono
                     , 'Bono'              AS in_tipelem    -- bdu.tipodeactivoisin
                     , bdu.idefiscbdicper_pisn     AS in_idemisor
                     , mbonos.segmbsini  as in_segmbsini
                     , mbonos.rwastda as fi_rwastda
                     , mbonos.segmbsini as segmento_bono
                     , mcsa.or_codigo_bic as bic_csa
                     , tb.c_ccp
                     , tb.or_codigo_bic
                     , NVL(mcsa.SALDO_RECIBIDO, 0)  SALDO_RECIBIDO
                     , NVL(mcsa.SALDO_APORTADO, 0)  SALDO_APORTADO
                     , NVL (ABS(tb.or_fairva) / NULLIF ((SUM(ABS(tb.or_fairva)) over (partition by tb.nifcifbic)),0),0) * NVL(mcsa.SALDO_RECIBIDO,0) AS SALDO_RECIBIDO_AUX
                     , NVL (ABS(tb.or_fairva) / NULLIF ((SUM(ABS(tb.or_fairva)) over (partition by tb.nifcifbic)),0),0) * NVL(mcsa.SALDO_APORTADO,0) AS SALDO_APORTADO_AUX
          FROM (SELECT CASE WHEN NVL(or_codigo_bic,'?') = '?' THEN or_nifcifibm
                            ELSE                                   or_codigo_bic
                       END                                                                 AS nifcifbic,
                       SUBSTR(or_codigo_bic,1,2)                                           AS bic_contraparte,
                       or_codigo_bic                                                       AS bic,
                       or_cluniprod_opera,
                       or_cluniopera,
                       or_fairva,
                       in_fairvabo,
                       or_idreg,
                       or_coisin,
                       or_refope,
                       or_person,
                       or_repos,
                       or_idpers,
                       or_fecvto,
                       or_vidres,
                       or_epiind,
                       in_segmbsini,
                       in_segmbs,
                       --fi_rwastda,
                       or_divisa,
                       in_ratext,
                       c_ccp,
                       or_codigo_bic
                  FROM BAS_MEN.poblacion_inicial_ead_repos
                 WHERE ((in_segmbsini = '007' AND or_idpers <> '12-777013467190') OR --EEFF que no sean NOMURA
                        (c_ccp <> 0) OR or_codigo_bic = 'CECAESMMXXX') --que sean cámaras o sea la CECA
               ) tb,
               BAS_MEN.m_bdu_repos_01 bdu,
               BAS_MEN.maestro_tipologia_bonos mbonos,
               (SELECT distinct or_entity, or_codigo_bic, sum(saldo_recibido) SALDO_RECIBIDO, sum(saldo_aportado) SALDO_APORTADO
                  FROM BAS_MEN.maestro_csa_orig
                 WHERE tipo = 'REPO'  /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
                  group by or_entity, or_codigo_bic) mcsa
         WHERE tb.or_cluniopera      = TO_NUMBER(bdu.operacion)
           AND tb.or_cluniprod_opera = bdu.prodoperacion
           AND tb.nifcifbic          = mcsa.or_codigo_bic(+)
           AND tb.or_coisin          = mbonos.or_coisin(+);

  BEGIN
    BAS_MEN.fnc_truncate_table ('BAS_MEN.ead_repos_con_acuerdo_temp');
    COMMIT;

    FOR i IN c_conAC
    LOOP

      IF i.position = 'Pay' THEN
        v_E             := ABS(i.or_fairva);
        v_C             := ABS(i.in_fairvabo);
        v_tipo_elem_ced := 'Efectivo';
        v_tipo_elem_rec := 'Bono';

      ELSE
        v_E := ABS(i.in_fairvabo);
        v_C := ABS(i.or_fairva);
        v_tipo_elem_ced := 'Bono';
        v_tipo_elem_rec := 'Efectivo';
      END IF;

      -- El ajuste por volatilidad se calcula en función de la calidad crediticia, vencimiento residual de la operacion repoy tipología del bono
      -- para ello se le pasa la vida residual, el tipo de elemento, el idenfificador del mismo y de la contraparte, el rating y el isin

      v_He   := 0;
      -- se añaden los segmentos 001 y 022. XCG, 25/01/18
      IF (v_tipo_elem_ced <> 'Bono' AND v_tipo_elem_rec <> 'Bono') OR ((NVL(i.bic_csa,'?') <> '?' OR i.c_ccp <> 0) AND (i.in_segmbsini = i.segmento_bono AND i.fi_rwastda = 0) AND i.in_divisa = i.or_divisa) THEN
         v_He := 0;
      ELSE
           v_He:= BAS_MEN.PKG_EAD_REPOS.get_volatilidad('Bono', i.in_ratext, i.or_vidres, i.or_coisin); --Ajuste de volatilidad del elemento cedido
      END IF;

      -- EXPOSICIÓN: Valor razonable del elemento cedido  menos el del elemento obtenido
      --v_Efx    := GREATEST(v_E - v_C - (i.SALDO_APORTADO_AUX - i.SALDO_RECIBIDO_AUX));  - 08/10/2018
      v_Efx    := GREATEST(v_E - v_C - i.SALDO_RECIBIDO_AUX);

      INSERT
        INTO BAS_MEN.ead_repos_con_acuerdo_temp (  tipo_operacion       , valor_elem_ced      , valor_elem_rec  ,
                                                   tipo_elem_ced        , tipo_elem_rec       , or_cluniopera   ,
                                                   or_cluniprod_opera   , or_refope           , id_emisor       ,
                                                   divisa               , fec_vencimiento     , fec_emison      ,
                                                   volatilidad          , Eva                 ,
                                                   Cva                  , EAD                 , or_idreg        ,
                                                   or_codigo_bic        , bic_csa             , in_segmbsini    ,
                                                   or_divisa            , in_ratext           , or_vidres       ,
                                                   or_coisin            , fi_rwastda          , c_ccp           ,
                                                   SALDO_RECIBIDO       , SALDO_APORTADO           ,
                                                   or_fairva            , in_fairvabo         , or_repos        ,
                                                   or_idpers            , in_segmbs           , or_person            ,
                                                   SALDO_RECIBIDO_DESAGREGADO, SALDO_APORTADO_DESAGREGADO)
                                          VALUES ( i.position           , v_E                 , v_C             ,
                                                   v_tipo_elem_ced      , v_tipo_elem_rec     , i.or_cluniopera ,
                                                   i.or_cluniprod_opera , i.or_refope         , i.in_idemisor   ,
                                                   i.in_divisa          , i.in_fecvencimi     , i.in_fecemision ,
                                                   v_He                 , v_Eva               ,
                                                   v_Cvam               , v_Efx               , i.or_idreg      ,
                                                   i.nifcifbic          , i.bic_csa           , i.in_segmbsini  ,
                                                   i.or_divisa          , i.in_ratext         , i.or_vidres     ,
                                                   i.or_coisin          , i.fi_rwastda        , i.c_ccp         ,
                                                   i.SALDO_RECIBIDO     , i.SALDO_APORTADO    ,
                                                   i.or_fairva          , i.in_fairvabo       , i.or_repos      ,
                                                   i.or_idpers          , i.in_segmbs         , i.or_person            ,
                                                   i.SALDO_RECIBIDO_AUX , i.SALDO_APORTADO_AUX
                                                );

    END LOOP;

    COMMIT;

    BAS_MEN.fnc_truncate_table ('BAS_MEN.ead_repos_con_acuerdo');
    COMMIT;

    INSERT
      INTO BAS_MEN.ead_repos_con_acuerdo (or_codigo_bic, ead_bic)
      SELECT or_codigo_bic,
             SUM(EAD)
        FROM BAS_MEN.ead_repos_con_acuerdo_temp
      GROUP BY or_codigo_bic;
    COMMIT;

    FOR j IN (SELECT DISTINCT or_codigo_bic FROM BAS_MEN.ead_repos_con_acuerdo_temp)
    LOOP
      UPDATE BAS_MEN.ead_repos_con_acuerdo
         SET ead_grupo = (SELECT SUM(ABS(sum_cedidos - sum_recibidos)*volatilidad)
                            FROM (SELECT DISTINCT
                                         or_codigo_bic
                                       , id_emisor
                                       , fec_emison
                                       , fec_vencimiento
                                       , SUM(CASE WHEN tipo_elem_ced = 'Bono' THEN
                                                    ABS(valor_elem_ced)
                                                  ELSE 0
                                              END) AS sum_cedidos
                                       , SUM(CASE WHEN tipo_elem_rec = 'Bono' THEN
                                                    ABS(valor_elem_rec)
                                                  ELSE 0
                                             END) as sum_recibidos
                                       , volatilidad AS volatilidad
                                    FROM BAS_MEN.ead_repos_con_acuerdo_temp
                                   WHERE or_codigo_bic = j.or_codigo_bic
                                GROUP BY or_codigo_bic, id_emisor, fec_emison, fec_vencimiento,volatilidad
                                ORDER BY or_codigo_bic, id_emisor, fec_emison, fec_vencimiento)
                            )
      WHERE or_codigo_bic = j.or_codigo_bic;


    END LOOP;

    COMMIT;

    UPDATE BAS_MEN.ead_repos_con_acuerdo
       SET ead_total = GREATEST(0,ead_bic + ead_grupo);
    COMMIT;

  END;

  PROCEDURE update_tablas_salida_acuerdo IS

    vv_idreg2 BAS_MEN.basilea.or_idreg%TYPE;

    CURSOR c_basilea_repos IS
     SELECT repos.fi_porcon                                                                                     AS fi_porcon,
            repos.or_codigo_bic                                                                                 AS or_codigo_bic,
            SUM(repos.or_repos)                                                                                 AS or_repos,
            SUM(repos.or_reposcon)                                                                              AS or_reposcon,
            SUM(repos.or_fairva)                                                                                AS or_fairva,
            SUM(repos.or_fairvacon)                                                                             AS or_fairvacon,
            SUM(repos.in_fairvabo)                                                                              AS in_fairvabo,
            SUM(repos.in_fairvabocon)                                                                           AS in_fairvabocon,
            ead.ead_total                                                                                       AS ead,
            DECODE(SUM(repos.or_repos), 0, 0, (SUM((repos.or_repos) * repos.or_vidres) / SUM(repos.or_repos)))  AS vidres_nominal,
            DECODE(SUM(repos.or_repos), 0, 0, (SUM((repos.or_repos) * repos.or_vidini) / SUM(repos.or_repos)))  AS vidini_nominal,
            DECODE(SUM(repos.or_repos), 0, 0, (SUM((repos.or_repos) * repos.in_antigu) / SUM(repos.or_repos)))  AS antigu_nominal
       FROM BAS_MEN.poblacion_inicial_ead_repos repos,
            BAS_MEN.ead_repos_con_acuerdo ead
      WHERE ead.or_codigo_bic = repos.or_codigo_bic
      GROUP BY repos.fi_porcon,repos.or_codigo_bic,ead.ead_total;

  BEGIN

    BAS_MEN.fnc_truncate_table ('BAS_MEN.basilea_repos');

    -- Sólo para aquellos con acuerdo de compensación??
    INSERT /*+ APPEND */ INTO BAS_MEN.basilea_repos
    SELECT e.*,e.or_idreg as or_idreg_ori
      FROM (SELECT D.*
              FROM BAS_MEN.poblacion_inicial_ead_repos  d,
                  (SELECT or_idpers, MAX(or_repos) repos
                     FROM BAS_MEN.poblacion_inicial_ead_repos
                    WHERE ((in_segmbsini = '007' AND or_idpers <> '12-777013467190') OR (c_ccp <> 0))      --EEFF que no sean NOMURA o cámaras
                      GROUP BY or_idpers) c
             WHERE d.or_repos  = c.repos
               AND d.or_idpers = c.or_idpers) e;

    COMMIT;

    /*Hay que ver si ésto es necesario*/
    -- Se eliminan duplicados
    DELETE BAS_MEN.basilea_repos
     WHERE (ROWID, or_idpers) IN (SELECT MAX(ROWID), or_idpers
                                    FROM BAS_MEN.basilea_repos
                                   WHERE or_idpers IN (SELECT or_idpers
                                                         FROM BAS_MEN.basilea_repos
                                                        GROUP BY or_idpers
                                                       HAVING COUNT(*) > 1)
                                   GROUP BY or_idpers);

    COMMIT;

    -- Se cambio el or_idreg de basile repos por el rownum para posteriormente actualizarlo con el rownum + el máximo idreg de basilea ( a fin de poder pasarlo como nuevos registros a basilea
    UPDATE BAS_MEN.basilea_repos
       SET or_idreg = ROWNUM;

    COMMIT;

    -- Se actualiza la tabla basilea_repos con los valores obtenidos en el cursor
    FOR cur IN c_basilea_repos
    LOOP
      UPDATE BAS_MEN.basilea_repos
         SET or_entity      = 81,
             or_ctaind      = 9269900001,
             or_epiind      = '010020040000000001',
             fi_epicon      = '010050202020100000000000000000',
             in_tiporeg     = 'RN',
             or_repos       = cur.or_repos,
             or_reposcon    = cur.or_reposcon * cur.fi_porcon,    /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon el update de porcentage consolidado */
             or_fairva      = cur.or_fairva,
             or_fairvacon   = cur.or_fairvacon * cur.fi_porcon,   /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon el update de porcentage consolidado */
             in_fairvabo    = cur.in_fairvabo,
             in_fairvabocon = cur.in_fairvabocon * cur.fi_porcon, /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon el update de porcentage consolidado */
             fi_eadairb     = cur.ead,
             fi_eadconairb  = cur.ead * cur.fi_porcon,
             fi_elimi1      = 'NO',
             or_vidres      = cur.vidres_nominal,
             or_vidini      = cur.vidini_nominal,
             in_antigu      = cur.antigu_nominal,
             FI_CCFAIRB     = 1,
             OR_TIPOPE      = 'AA',
             FI_PORCON      = cur.fi_porcon       /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon el update de porcentage consolidado */
       WHERE or_codigo_bic  = cur.or_codigo_bic;
    END LOOP;

  COMMIT;


  --Nos quedamos con el mayor Idreg que haya en BDD.
  SELECT MAX(or_idreg)
    INTO vv_idreg2
    FROM BAS_MEN.basilea;

  -- Antes de volcar a Basilea se actualiza el or_idreg de basilea_repos a fin de obtener idregs mayores que los existentes en basilea
  UPDATE BAS_MEN.basilea_repos
     SET or_idreg = or_idreg + vv_idreg2;

  COMMIT;

/* 08/11/2021 - NAV - Se sube el update de porcentage consolidado en el curso c_basilea_repos */
  -- Se informa el campo FI_PORCON con valor 1
/*  UPDATE BAS_MEN.basilea_repos
     SET fi_porcon = 1;
  COMMIT;*/

  --actualización ead sin acuerdos de compensación

     MERGE  INTO BAS_MEN.basilea dst
     USING (SELECT *
              FROM BAS_MEN.ead_repos_sin_acuerdo a) src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
        UPDATE
           SET dst.fi_eadairb = src.EAD,
               dst.fi_eadconairb = src.EAD;

         commit;

    -- Los registros  de la poblacón inicial con acuerdos de compensación se marcan en basilea como NETTING
  UPDATE BAS_MEN.basilea
     SET fi_elimi1 = 'NETTING'
   WHERE or_idreg IN (SELECT repos.or_idreg
                        FROM BAS_MEN.poblacion_inicial_ead_repos repos,
                             BAS_MEN.ead_repos_con_acuerdo ead
                       WHERE ead.or_codigo_bic = repos.or_codigo_bic);
    COMMIT;

  -- Volcado a basilea
  INSERT INTO BAS_MEN.basilea
      SELECT
            OR_IDREG      ,OR_IDPERS      ,OR_TIPIDE      ,OR_NIFCIF      ,OR_TIPIDEIBM      ,
            OR_NIFCIFIBM      ,OR_TITULARITAT      ,OR_NOMPER      ,OR_COISIN      ,OR_PERSON      ,
            OR_IDECNO      ,OR_IDCNAE      ,OR_IDCNAEREL      ,OR_PROCED      ,OR_NUMOFI      ,
            OR_REFOPE      ,OR_REFOPE2      ,OR_TIPOPE      ,OR_FECOPE      ,OR_FECVTO      ,
            OR_VIDINI      ,OR_VIDRES      ,IN_ANTIGU      ,OR_SEGGES ,
            OR_CODGAR      ,OR_TIPAVA      ,OR_TIPGAR      ,OR_CODTIT      ,OR_DESTPR      ,
            OR_TIPOFI      ,OR_TIPOPR      ,OR_IMPLTV      ,OR_VALTAS      ,OR_CONCED      ,
            OR_IDPAIS         ,IN_ITITSN      ,IN_INDMOR,
            OR_IDPRO1      ,OR_ENTITY      ,OR_CTAIND      ,OR_EPIIND      ,FI_EPICON      ,
            FI_PORCON      ,OR_DIVISA      ,FI_TIPEXP      ,OR_DISPTO      ,OR_DISBLE      ,
            OR_AVALES      ,OR_FUTURS      ,OR_REPOS      ,OR_AJUVAL      ,OR_FAIRVA      ,
            OR_DISPTOCON      ,OR_DISBLECON      ,OR_AVALESCON      ,OR_FUTURSCON      ,OR_REPOSCON      ,
            OR_AJUVALCON      ,OR_FAIRVACON      ,IN_TIPDER          ,IN_FAIRVABO,
            IN_FAIRVABOCON      ,FI_SUMEXP      ,IN_VTAGRU      ,IN_VTAGRU_CONS      ,OR_RATINT      ,
            OR_MODRAT0      ,OR_SEGRIE      ,OR_PUNT0      ,OR_SITUAC0      ,OR_FECPUN0      ,
            IN_SEGMBSINI      ,IN_SEGMBS0      ,IN_SEGMBS1      ,IN_SEGMBS2      ,IN_SEGMBS      ,
            IN_RATEXTAVA2      ,IN_SRATIN   ,IN_RATEXT,
            IN_RATSOB      ,FI_ELIMI1      ,IN_METODE      ,IN_SUCEPT      ,IN_SEG_HIP      ,
            OR_FECPRREV      ,OR_CLUNIENT      ,OR_CLUNIPROD      ,OR_CLUNICONTR      ,OR_CLUNICUENT      ,
            OR_CLUNIOPERA      ,FI_MESCURA      ,OR_FECCAR      ,OR_PRESTMIG      ,OR_CLAVISO      ,
            OR_FECALTBLO      ,OR_TITUSCPCB      ,OR_PERSONSCPCB      ,FI_EADAIRB      ,OR_CNAESCPCB      ,
            FI_EADCONAIRB      ,FI_CCFAIRB      ,IN_TIPOREG      ,IN_GRUP_TIPIDE      ,IN_GRUP_IDPER      ,
            IN_NOM_GRUP      ,IN_IDCALIFIC      ,OR_PUNTSCO      ,OR_FECSCO      ,OR_NUMSCOFIN      ,
            IN_INDCURA         ,OR_PROVAPL      ,OR_INDHOLDING      ,OR_VERSPREST      ,
                        OR_DESCTAVISTA      ,OR_CODPRODO      ,OR_CODISO      ,
            OR_PRODERIV      ,IN_ACTIVO      ,OR_NUMFINREG,
            OR_TIPOBJETO      ,OR_SEGFAC      ,OR_SEGFIC      ,OR_IDSITUAC      ,IN_IDCALIFICREL      ,
            OR_SUBSTDA      ,OR_MODSCO      ,OR_FINABE      ,OR_TIPDERIV      ,OR_NUMPERCTAV      ,
            OR_CNAECTAVIS      ,OR_CNOCTAVIS      ,OR_OPCVEN      ,IN_METODE_1      ,OR_CODIGO_BIC      ,
            IN_EXISTENCIAS      ,IN_ACTIVO_CIR  ,IN_FECMORA      ,OR_CTACLI,
            IN_NUMEMP      ,IN_HIPOAVAL      ,IN_NIFGRUPCON      ,IN_PYME      ,OR_INDHOLDINGREL      ,
            OR_SEGFIC2      ,IN_PRESTPERCENT      ,IN_CAT_BDE_N      ,OR_CLUNIENT_CUENT      ,OR_CLUNIPROD_CUENT      ,
            OR_CLUNIENT_OPERA      ,OR_CLUNIPROD_OPERA      ,IN_OPER_MIGR      ,IN_IDGRUPO      ,MARCA_EPA      ,
            OR_FECDEU      ,OR_NUMPERSONA      ,OR_PERSCTAVISTA      ,OR_TITUCTAVISTA,
            IN_FACTCOR      ,OR_SITCON      ,IN_RATEXT_ISIN      ,IN_REFINAN      ,ID_AMBIT_DRC      ,
            IN_ACTIVO_CONS      ,OR_CONTRATO_GARANTIA      ,OR_IDMES      ,OR_NIFCIFAVA      ,OR_PESOW      ,
            OR_PUNTGRUP      ,OR_MARCONOT      ,OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS    ,
            INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP, FECHFINSIMP, IN_DEFAULT, OR_MODGRUP /* 05/03/2020 Añadido nuevo campo de modelo de grupo */
    FROM BAS_MEN.basilea_repos;

    COMMIT;


  -- Se informan como 'NETTING' los colaterales aportados (repos) considerados en el cálculo de EAD

    MERGE /*+ full(Upd) parallel(Upd 8) */ INTO BAS_MEN.BASILEA Upd
     USING ( SELECT DISTINCT OR_CODIGO_BIC FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
            --WHERE TIPO = 'REPO'   RMR 12/05/2022 HDEV-159470 nos solicitan que se elimine el filtro de REPO
                --AND (SALDO_APORTADO - SALDO_RECIBIDO) <> 0) Sel  -  08/10/2018
                WHERE (SALDO_RECIBIDO) <> 0) Sel
        ON (Upd.OR_CODIGO_BIC = Sel.OR_CODIGO_BIC OR Upd.OR_NIFCIFIBM = Sel.OR_CODIGO_BIC)
      WHEN MATCHED THEN
       UPDATE
          SET Upd.FI_ELIMI1 = 'NETTING'
        WHERE Upd.OR_PROCED = 'COLATERAL'
          AND Upd.FI_TIPEXP = 'Drawn'
          and FI_ELIMI1 <> 'NETTING';

    COMMIT;


  END;

  PROCEDURE calculo_exposicion AS
    vn_numerr INTEGER;
  BEGIN
    BAS_MEN.sp_info_control_proces ('EAD_REPOS', 'INICIADO');
    EXECUTE IMMEDIATE('ALTER SESSION ENABLE PARALLEL DML');
    vn_numerr   := 1;

    carga_de_maestros;
      vn_numerr   := 2;

    carga_poblacion_inicial;
    vn_numerr   := 3;

    contrapartidas_sin_acuerdo;
    vn_numerr   := 4;

      contrapartidas_con_acuerdo;
    vn_numerr   := 5;

    update_tablas_salida_acuerdo;
    vn_numerr   := 6;

    BAS_MEN.sp_info_control_proces ('EAD_REPOS', 'FINALIZADO', 'OK');
  EXCEPTION
    WHEN OTHERS THEN
      BAS_MEN.sp_info_control_proces ('EAD_REPOS', 'FINALIZADO', 'KO',vn_numerr||' ' ||SQLERRM, SQLCODE);
      raise;
  END;
END pkg_ead_repos;

/

show errors;


-----------------------------------------------------------------------------------------------------------------------------------
-- CALCULO RATING
-----------------------------------------------------------------------------------------------------------------------------------
create or replace PACKAGE         BAS_MEN.pkg_calculos_rating AS
  FUNCTION sf_obt_orden_tipos_rating ( pe_calific IN BAS_MEN.maestro_tipos_rating.moody%TYPE)
  RETURN BAS_MEN.maestro_tipos_rating.orden%TYPE;

  FUNCTION get_ratext (p_ind    INTEGER,
                       pe_sp    BAS_MEN.maestro_tipos_rating.moody%TYPE,
                       pe_fitch BAS_MEN.maestro_tipos_rating.moody%TYPE,
                       pe_moody BAS_MEN.maestro_tipos_rating.moody%TYPE,
                       pe_dbrs  BAS_MEN.maestro_tipos_rating.moody%TYPE)
  RETURN BAS_MEN.maestro_rf.in_ratext%TYPE;

  FUNCTION get_calidad_crediticia (p_ratext VARCHAR2) RETURN VARCHAR2;

END pkg_calculos_rating;
/

create or replace PACKAGE BODY     BAS_MEN.pkg_calculos_rating AS
  FUNCTION sf_obt_orden_tipos_rating ( pe_calific IN BAS_MEN.maestro_tipos_rating.moody%TYPE)
  RETURN BAS_MEN.maestro_tipos_rating.orden%TYPE IS
    ps_orden BAS_MEN.maestro_tipos_rating.orden%TYPE DEFAULT 23;
  BEGIN
    BEGIN
      SELECT DISTINCT orden
        INTO ps_orden
        FROM BAS_MEN.maestro_tipos_rating
       WHERE moody = pe_calific
         AND ROWNUM = 1;
    EXCEPTION
      WHEN OTHERS THEN
            ps_orden := 23;
    END;

    RETURN ps_orden;

  END sf_obt_orden_tipos_rating;

  FUNCTION get_ratext (p_ind    INTEGER,
                       pe_sp    BAS_MEN.maestro_tipos_rating.moody%TYPE,
                       pe_fitch BAS_MEN.maestro_tipos_rating.moody%TYPE,
                       pe_moody BAS_MEN.maestro_tipos_rating.moody%TYPE,
                       pe_dbrs  BAS_MEN.maestro_tipos_rating.moody%TYPE)
  RETURN BAS_MEN.maestro_rf.in_ratext%TYPE IS
    ps_ecai    VARCHAR2(10) DEFAULT '?';
    ps_rat_ext VARCHAR2(10) DEFAULT 'SR';
    ps_sratext VARCHAR2(10) DEFAULT 'SR';

    vn_sp      BAS_MEN.maestro_tipos_rating.orden%TYPE DEFAULT 0;
    vn_fitch   BAS_MEN.maestro_tipos_rating.orden%TYPE DEFAULT 0;
    vn_moody   BAS_MEN.maestro_tipos_rating.orden%TYPE DEFAULT 0;
    vn_dbrs    BAS_MEN.maestro_tipos_rating.orden%TYPE DEFAULT 0;

    vn_ratin   BAS_MEN.maestro_tipos_rating.orden%TYPE DEFAULT 0;
  BEGIN
    vn_sp    := sf_obt_orden_tipos_rating ( pe_sp );
    vn_fitch := sf_obt_orden_tipos_rating ( pe_fitch );
    vn_moody := sf_obt_orden_tipos_rating ( pe_moody );
    vn_dbrs  := sf_obt_orden_tipos_rating ( pe_dbrs );
    DELETE BAS_MEN.GTT_MEJOR_RATING;
    BAS_MEN.fnc_mejor_rating ( p_ind
                             , vn_sp
                             , vn_fitch
                             , vn_moody
                             , vn_dbrs
                             , ps_ecai
                             );
    CASE WHEN ps_ecai = 'SP' THEN vn_ratin  := vn_sp;
         WHEN ps_ecai = 'MD' THEN vn_ratin  := vn_moody;
         WHEN ps_ecai = 'FI' THEN vn_ratin  := vn_fitch;
         WHEN ps_ecai = 'DB' THEN vn_ratin  := vn_dbrs;
         ELSE vn_ratin  := 23;
    END CASE;
         --dbms_output.put_line('Rating: '||vn_ratin);

    BEGIN
      SELECT DISTINCT rat_ext
         INTO ps_rat_ext
         FROM BAS_MEN.maestro_tipos_rating
        WHERE ORDEN = vn_ratin;

        --dbms_output.put_line('Rating: '||vn_ratin);
    EXCEPTION
      WHEN OTHERS THEN
        ps_rat_ext := 'SR';
    END;
    RETURN ps_rat_ext;
  END;

  FUNCTION get_calidad_crediticia (p_ratext VARCHAR2) RETURN VARCHAR2 IS
    v_cc VARCHAR2(3);
  BEGIN
    CASE WHEN p_ratext IN ('AAA','AA+','AA','AA-')            THEN v_cc := '1';
         WHEN p_ratext IN ('A+','A','A-','BBB+','BBB','BBB-') THEN v_cc := '2-3';
         WHEN p_ratext IN ('BB+','BB','BB-')                  THEN v_cc := '4';
         ELSE                                                      v_cc := '-1';
    END CASE;

    RETURN v_cc;
  END;
END pkg_calculos_rating;

/

show errors;


/************************************************************************************/
/* CREATE DE LA VIEW CURSOR_VIEW_CALCULO_EAD                                        */
/************************************************************************************/

/* Formatted on 2013/04/24 16:52 (Formatter Plus v4.8.8) */
--HDEV-107790   nueva vista, se añadieron campos y se sustituyeron los JOIN 16/05/2022
CREATE OR REPLACE FORCE VIEW BAS_MEN.cursor_view_calculo_ead AS
SELECT /*+ full(b) PARALLEL (B 8) parallel (s 8) parallel (s2 8) */ distinct
                      b.or_idreg, b.in_segmbs, b.or_tipope, b.or_titularitat, or_entity, or_indholding, IN_FECMORA, OR_CLAVISO, OR_INDHOLDINGREL, IN_INDMOR,
                      DECODE(NVL(b.OR_TITUSCPCB,0), 0, b.OR_TITULARITAT, b.OR_TITUSCPCB) AS IN_TITULFIN, OR_FECALTBLO, IN_REFINAN, OR_MODRAT0, OR_IDCNAEREL, OR_SEGRIE,
                      OR_FECSCO, FI_MESCURA, b.OR_SITUAC0, or_modsco, OR_PUNTSCO, b.OR_PUNT0, b.or_puntgrup, IN_EXISTENCIAS, IN_PYME, OR_IDCNAE, b.OR_RATINT, IN_ACTIVO_CIR, OR_IDECNO, OR_DESTPR,
                      b.in_tiporeg, b.or_proced, b.or_vidres, b.or_vidini, b.or_clunicontr, b.or_feccar, b.or_fecope, b.in_segmbs2,
                      b.fi_tipexp, NVL (b.or_fairva, 0) or_fairva, b.or_epiind, b.fi_epicon, NVL (b.or_fairvacon, 0) or_fairvacon, NVL (b.in_fairvabo, 0) in_fairvabo,
                      b.or_segges, b.or_disble, b.or_tipava, b.or_tipgar, b.or_segfic, or_tipopr,
                      (b.or_dispto + b.or_disble + b.or_avales + b.or_futurs + b.or_repos + b.or_ajuval) total,
                      (b.or_disptocon + b.or_disblecon + b.or_avalescon + b.or_futurscon + b.or_reposcon + b.or_ajuvalcon) totalcon,
                      b.in_segmbs0, b.or_ctaind, b.in_segmbsini, NVL (b.in_fairvabocon,0) in_fairvabocon,
                      NVL(c.concedido, NVL (e.concedido, b.OR_DISPTO + b.OR_DISBLE)) concedido_cred, b.or_dispto,
                      NVL(d.concedido, NVL (f.concedido, b.OR_DISPTO + b.OR_DISBLE)) concedido_tarj, in_vtagru, in_vtagru_cons,
                      or_segfac, NVL(s.origen, NVL(S2.ORIGEN, 'SIN ORIGEN')) origen
                      --case when NVL(B.IN_NUMEMP_CONS,0) in (0,999999, 111111) then
                      --                                                        case when numemp_med > 0 then numemp_med
                      --                                                        else b.in_numemp
                      --                                                        end
                      --     else B.IN_NUMEMP_CONS
                      -- end as IN_NUMEMP_CONS,
                      --NVL(numemp_med, b.in_numemp) numemp
                      , CASE WHEN NVL(B.IN_NUMEMP_CONS,999999) in (999999, 111111) AND b.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN
                                  CASE WHEN B.IN_NUMEMP NOT IN (999999, 111111) THEN B.IN_NUMEMP
                                       ELSE 251
                                  END
                             ELSE B.IN_NUMEMP_CONS
                         END IN_NUMEMP_CONS
                      , CASE WHEN NVL(B.IN_NUMEMP,999999) in (999999, 111111) AND b.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN 251
                             ELSE B.IN_NUMEMP
                         END IN_NUMEMP
                      , IN_ACTIVO, OR_CLUNICUENT,
                      IN_SEGMBS1, b.IN_ACTIVO_CONS, b.or_numofi, fi.TIPO_FINCA, b.IN_GRUP_IDPER, b.OR_IDPERS, b.OR_CTACLI, fi.INMUEBLE, fi.USO_PROPIO,
                      case when b.FI_TIPEXP = 'Undrawn' and mor.OR_CLUNICONTR is not null then
                           'SI'
                           else 'NO'
                      end as MOROSO,
                      CASE WHEN NVL(B.IN_GRUP_IDPER,'?') <> '?' THEN
                               'GRUP:' || B.IN_GRUP_IDPER
                           WHEN B.OR_NUMOFI IN (800,801,813,821,825) AND B.OR_TITULARITAT = 0 THEN
                               'OFEX:' || (B.OR_NUMOFI * 10000000000 + B.OR_CTACLI)
                           WHEN B.OR_ENTITY = 9109 AND NVL(B.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                               'ANDO:' || B.OR_IDPERS
                           WHEN B.OR_PERSONSCPCB IN (816,831,833) AND B.OR_PROCED <> 'FACTORING'  and ( B.IN_SEGMBSINI in ('002','017') ) THEN
                               'TITU:' || B.OR_TITUSCPCB
                           WHEN B.OR_TITULARITAT NOT IN (0,9,99) THEN
                               'TITU:' || B.OR_TITULARITAT
                           WHEN NVL(B.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                               'NIFS:' || B.OR_NIFCIF
                           ELSE
                               'REGI:' || B.OR_IDREG
                       END ID_CLIENTE,
                       nvl(met.metode, '?') in_metode, --nvl(met.sucept_new, b.in_sucept)
                       b.in_sucept,
                       B.OR_PESOW, --SMG 14/10/2019
                       b.or_nifcif, /* RMR 11/03/2020 Añadido nifcif para comprobar caso promontoria */
                       b.or_fecpun0,
                       case when NVL(con.ME_CONCEDIDO_EU, 0) = 0 THEN
                                tarj.concedido
                           else con.ME_CONCEDIDO_EU
                       end AS ME_CONCEDIDO_EU,
                       tarj.dispto as dispto_tarj,
                       b.or_disptocon,
                       b.or_disblecon,
                       B.OR_SEGFIC2,
                       DESC_FINAL_OK /* NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
                 FROM BAS_MEN.basilea b
                 LEFT JOIN BAS_MEN.maestro_importes_contrato c
                   ON ( c.or_titularitat=DECODE (or_tituscpcb, NULL, b.or_titularitat, 0, b.or_titularitat, or_tituscpcb))
                 LEFT JOIN BAS_MEN.maestro_importes_contrato_ofex e
                   ON (e.or_ctacli=b.or_ctacli
                       AND  e.or_numofi=b.or_numofi)
                 LEFT JOIN BAS_MEN.maestro_importes_contrato_tarj d
                   ON (d.or_titularitat=DECODE (or_tituscpcb, NULL, b.or_titularitat, 0, b.or_titularitat, or_tituscpcb))
                 LEFT JOIN BAS_MEN.maestro_importes_tarj_ofex f
                   ON (f.or_ctacli= b.or_ctacli
                        AND f.or_numofi =b.or_numofi)
                 LEFT JOIN BAS_MEN.maestro_ventas s
                   ON (S.cif_filial=b.or_nifcif )
                 LEFT JOIN BAS_MEN.maestro_ventas s2
                   ON (S2.cif_filial=b.or_nifcifIBM )
                    --DCRPROP.empleados_medios emp,
                 LEFT JOIN BAS_MEN.MAESTRO_FINCA_INMOBILIARIA FI
                   ON (fi.TIPOFI=b.OR_TIPOFI)
                 LEFT JOIN BAS_MEN.UNDRAWN_MOROSOS MOR
                   ON (mor.OR_CLUNIENT= b.OR_CLUNIENT
                       AND mor.OR_CLUNIPROD= b.OR_CLUNIPROD
                       AND mor.OR_CLUNICONTR= b.OR_CLUNICONTR
                       AND mor.OR_TITULARITAT=b.OR_TITULARITAT )
                 LEFT JOIN BAS_MEN.TEMP_METODE met
                   ON (met.or_idreg=b.or_idreg)
                 LEFT JOIN (select distinct ID_CONTRATO as OR_CLUNICONTR , ME_CONCEDIDO_EU
                         from BAS_MEN.CAL_FR_EAD_CONCEDID
                          where id_tipo_producto = 'TA')      con /* 25/03/2021 RMR MoC en CCF */
                   ON (con.OR_CLUNICONTR=b.OR_CLUNICONTR )
                 LEFT JOIN BAS_MEN.MAESTRO_DISPUESTO_TARJ_FISICAS  tarj  /* 06/04/2021 - Añadimos este nuevo tabla para Tarjetas físicas */
                   ON (tarj.OR_CLUNICONTR=b.OR_CLUNICONTR)
                 LEFT JOIN (select cnae93, DESC_FINAL_OK from BAS_MEN.MAESTRO_CNAES_SECTOR where DESC_FINAL_OK = 'NO SUSCEPTIBLE') cnae /* NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
                   ON (DECODE(NVL(B.OR_IDCNAEREL, 0), 0, b.OR_IDCNAE, 99999, b.OR_IDCNAE, b.OR_IDCNAEREL) = cnae.CNAE93);
                   


/************************************************************************************/
/* CREATE DE LA DEFINICION DEL PACKAGE                                              */
/************************************************************************************/
CREATE OR REPLACE PACKAGE BAS_MEN.CALCULO_EAD is

   TYPE cursor_basilea is REF CURSOR RETURN BAS_MEN.CURSOR_VIEW_CALCULO_EAD%ROWTYPE;
    
   TYPE t_array_basilea_CALCULO_EAD IS TABLE OF BAS_MEN.MAESTRO_EAD%ROWTYPE;

   FUNCTION F_CALCULO_EAD (cur IN cursor_basilea, PN_FECPRO IN NUMBER) return t_array_basilea_CALCULO_EAD
   PARALLEL_ENABLE(PARTITION cur BY ANY)
   PIPELINED;
   --HDEV-107790 24/02/2022
   --SE AGREGARON LOS CAMPOS PORC_USO, UPLIFT_ADD, EAD_PREVIA  EN LA TABLA MAESTRO_EAD
   FUNCTION F_LIMITE(P_TIPO IN VARCHAR2, P_ID_CONTRATO IN NUMBER,P_FECPRO IN NUMBER) RETURN FLOAT;
   FUNCTION F_DISPUESTO (P_TIPO IN VARCHAR2, P_ID_CONTRATO IN NUMBER)RETURN FLOAT;
    

END; 
/

show errors;
/************************************************************************************/
/* CREATE DE LA DEFINICION DE LA FUNCION DEL PACKAGE                                */
/************************************************************************************/

CREATE OR REPLACE PACKAGE BODY BAS_MEN.CALCULO_EAD AS
/*HDEV-107790 16/02/2022*/
FUNCTION F_LIMITE(P_TIPO IN VARCHAR2, P_ID_CONTRATO IN NUMBER,P_FECPRO IN NUMBER) RETURN FLOAT IS
  V_LIMITE  FLOAT;
  V_TIPO VARCHAR(2):=P_TIPO;
BEGIN
      
       BEGIN
           IF P_TIPO='KT' THEN
               V_TIPO:='PC';
          ELSIF P_TIPO='TA' THEN
               V_TIPO:='TC';
           END IF;
           SELECT CONCEDIDO
             INTO V_LIMITE
             FROM BAS_MEN.MAESTRO_IMPORTE_EMPRESAS
            WHERE OR_CLUNICONTR=P_ID_CONTRATO
              AND ID_TIPO_PRODUCTO=V_TIPO;
       EXCEPTION
          WHEN NO_DATA_FOUND THEN
               V_LIMITE:=0;
          WHEN OTHERS THEN
              V_LIMITE:=0;
       END;
   
      RETURN V_LIMITE;
END;
FUNCTION F_DISPUESTO (P_TIPO IN VARCHAR2, P_ID_CONTRATO IN NUMBER)RETURN FLOAT IS
  V_DISPUESTO  FLOAT;
BEGIN
      BEGIN
         SELECT   DISPTO
           INTO   V_DISPUESTO
          FROM BAS_MEN.MAESTRO_IMPORTE_EMPRESAS
          WHERE OR_CLUNICONTR=P_ID_CONTRATO
           AND  ID_TIPO_PRODUCTO=P_TIPO;
      EXCEPTION
           WHEN NO_DATA_FOUND THEN
                 V_DISPUESTO:=0;
         WHEN OTHERS THEN
            V_DISPUESTO:=0;
      END;
    RETURN V_DISPUESTO;
  END;
----------------------------------------------------------------------------------
FUNCTION F_CALCULO_EAD (cur IN cursor_basilea, PN_FECPRO IN NUMBER) RETURN t_array_basilea_CALCULO_EAD
         parallel_enable(PARTITION cur by any)
         PIPELINED
      as

  in_rec cur%ROWTYPE;
  out_rec BAS_MEN.MAESTRO_EAD%ROWTYPE;
  v_num NUMBER;

----- Varaibles del proceso -----
 
  VV_RET            VARCHAR2(100);
  VN_FI_EADAIRB     FLOAT(126);
  VN_FI_CCFAIRB     FLOAT(126);
  VN_FI_EADAIRBCON  FLOAT(126);
  VV_FI_EXCEDID     VARCHAR2(2);
  VN_CCF            FLOAT(126);
  VV_ROWID          VARCHAR2(12);
  VN_COUNT          NUMBER(9):=0;
  VN_NUMERR         NUMBER(3);
  VV_MENSAJE        VARCHAR2(255);
  VN_VENTAS         FLOAT(126);
  VN_VENTAS_CONS    FLOAT(126);
  PN_OPC_DER        NUMBER(1):=1;
  PN_F              NUMBER(1):=1;
  VV_ACTIVO         FLOAT(126);
  VV_IN_SEGMBS0     VARCHAR2(3);
  VN_OR_VIDINI      NUMBER(8);
  VN_OR_VIDRES      NUMBER(8);
  VV_ACTIVO_CONS    FLOAT(126);
  VV_IN_SEGMBS      VARCHAR2(25);
  VV_IN_SEGMBS1     VARCHAR2(3);
  VN_TOT_EADAIRB    FLOAT;
  VV_IN_SRATIN      VARCHAR2(8);
  VV_IN_METODE      VARCHAR2(4);
  VV_FECMORA        VARCHAR2(10);
  VV_OR_CLAVISO     NUMBER(10);
  VV_IN_SUCEPT      VARCHAR2(25);
  VV_SegFic2        BAS_MEN.BASILEA.OR_SEGFIC2%TYPE;
  vC_Pref_C         VARCHAR2(1) DEFAULT '';   -- Prefijo para identificar el comportamental.
  vC_Modelo         VARCHAR2(2) DEFAULT 'XX'; --
  vC_Suf_Id_Res     VARCHAR2(1) DEFAULT '';   -- Sufijo identificador residencia en el comportamental.
  vC_Destino        VARCHAR2(2) DEFAULT 'XX';
  vC_Origen         VARCHAR2(1) DEFAULT 'X';
  vC_Residente      VARCHAR2(2) DEFAULT 'XX';
  vC_ClienteR       VARCHAR2(1) DEFAULT 'X';
  vC_ClienteD       VARCHAR2(1) DEFAULT 'X';
  vC_Tipo           VARCHAR2(2) DEFAULT 'XX';
  VV_NUMEMP_CONS    FLOAT;
  VV_NUMEMP         FLOAT;
  /* INI HDEV-107786 Nuevos calibrados */
  VV_DISPUESTO      FLOAT;
  VV_DISPONIBLE   FLOAT;
  VV_PORC_USO       FLOAT;
  VV_UPLIFT_ADDITIONALDRAWINGS  NUMBER(6,4) ;
  VV_LIMITE         FLOAT;
  VV_EAD_PREVIA     FLOAT;
  VV_REGION          VARCHAR2(50);
  /* FIN HDEV-107786 Nuevos calibrados */
    
BEGIN

  LOOP

     fetch cur into in_rec;
     EXIT WHEN cur%notfound;

         VN_NUMERR         := 2;
         VN_COUNT          := VN_COUNT + 1;
         VV_ROWID          := TO_CHAR(in_rec.OR_IDREG);
         VN_FI_EADAIRB     := 0;
         VN_FI_EADAIRBCON  := 0;
         VN_FI_CCFAIRB     := 0;
         VN_CCF            := 0;
         VN_VENTAS         := nvl(in_rec.IN_VTAGRU, 99);
         VN_VENTAS_CONS    := nvl(in_rec.IN_VTAGRU_CONS, 99);
         VV_ACTIVO         := in_rec.IN_ACTIVO;
         VV_ACTIVO_CONS    := in_rec.IN_ACTIVO_CONS;
         VV_IN_SEGMBS0     := in_rec.IN_SEGMBS0;
         VN_OR_VIDINI      := in_rec.OR_VIDINI;
         VN_OR_VIDRES      := in_rec.OR_VIDRES;
         VV_IN_SEGMBS1     := in_rec.IN_SEGMBS1;
         VN_TOT_EADAIRB    := in_rec.OR_DISPTO;
         VV_IN_SEGMBS      := in_rec.IN_SEGMBS;
         VV_NUMEMP_CONS    := in_rec.IN_NUMEMP_CONS;
         VV_NUMEMP         := in_rec.IN_NUMEMP;
         VV_DISPUESTO      :=0;
         VV_DISPONIBLE     :=0;
         VV_LIMITE         :=0;
         VV_PORC_USO       :=0;
         VN_CCF            :=1;
         VV_UPLIFT_ADDITIONALDRAWINGS:=1;
         VV_EAD_PREVIA     :=0;
         VV_REGION          :=NULL;
                     
         /* INI HDEV-107790 Nuevos calibados 03/02/2022 */
         IF (in_rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') AND in_rec.OR_SEGFIC NOT IN ('E5','GR') ) AND in_rec.IN_SEGMBS0 <> '201' THEN  --22/04/2022
            VN_NUMERR := 5;
            /*CREDITOS*/
            IF (in_rec.OR_PROCED IN ('INV-C/C-CR','INV-C/C-EX')
               OR (in_rec.OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND in_rec.OR_TIPOPE = 'CR') ) THEN -- 201609 Cambio en CCF para sindicados, si son créditos van como tal.NULL;
                   VN_NUMERR := 6;
                  /* PREPARO LOS VALORES PARA  OBTENER EL PORCENTAJE DE USO */
                   VV_DISPUESTO:=F_DISPUESTO ('PC',in_rec.OR_CLUNICONTR);
                   VN_NUMERR := 7;
                   VV_LIMITE:=F_LIMITE('KT',in_rec.OR_CLUNICONTR,PN_FecPro);
                   VN_NUMERR := 11;
                   IF NVL(VV_LIMITE,0) <>0 THEN
                         VV_PORC_USO:= VV_DISPUESTO / VV_LIMITE;
                     ELSE
                          VV_PORC_USO:=0;
                    END IF;
                    
                    BEGIN
                      SELECT DISTINCT FI_EXCEDID
                        INTO VV_FI_EXCEDID
                        FROM BAS_MEN.MAESTRO_CCF_CREDITS_EAD
                       WHERE OR_CLUNICONTR = in_rec.OR_CLUNICONTR
                         AND FI_EXCEDID = 'SI';
                    EXCEPTION
                         WHEN OTHERS THEN
                              VV_FI_EXCEDID:= 'NO';
                    END;
                    
                    IF VV_FI_EXCEDID = 'SI' THEN
                    VV_PORC_USO:=1.1;
                    END IF; --Fuerzo para que los contratos excedidos por procedencia puedan entrar en el maestro

                    VN_NUMERR := 12;
                    /*VERIFICO EXCEDIDO*/
                    IF(VV_PORC_USO * 100)>100 OR VV_FI_EXCEDID = 'SI' THEN
                       VV_FI_EXCEDID:='SI';
                       IF  VV_PORC_USO>99 THEN  
                           VV_PORC_USO:=99;
                       END IF;
                    ELSE
                       VV_FI_EXCEDID:='NO';
                    END IF;

                    VN_NUMERR := 13;
                    BEGIN
                        SELECT DECODE(VV_FI_EXCEDID,'NO',CCF_POSTMOC,1),UPLIFT_ADDITIONALDRAWINGS
                          INTO VN_CCF,VV_UPLIFT_ADDITIONALDRAWINGS
                          FROM BAS_MEN.MAESTRO_CCF_EMPRESAS
                         WHERE ID_PRODUCTO='PC'
                           AND SEGMENTO=DECODE(in_rec.OR_INDHOLDING, '1', 'PA', '3', 'PA', '4', 'PA', DECODE(in_rec.IN_SEGMBS2, '020', 'PR', in_rec.OR_SEGFIC))
                           AND LIMITE_MIN<=VV_PORC_USO
                           AND LIMITE_MAX>VV_PORC_USO;
                    EXCEPTION
                         WHEN OTHERS THEN
                              VN_CCF:=1;
                              VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                    END;
                   
            /*TARJETAS*/
            ELSIF ((in_rec.OR_TIPOPE = 'TC' OR in_rec.OR_PROCED = 'TARGES') AND in_rec.IN_TIPOREG NOT IN ('OXC', 'OXE', 'OX', 'ITOXE', 'MMOXE', 'MMOXC')) THEN  /*TARJETAS*/
                    VN_NUMERR := 14;
                    /*Busco limiteo por contrato y producto*/
                    VV_LIMITE:=F_LIMITE ('TA' ,in_rec.OR_CLUNICONTR,PN_FecPro);
                    VN_NUMERR := 18;
                    /*BUSCO DISPUESTO PARA PORCENTAJE DE USO*/
                    VV_DISPUESTO:=F_DISPUESTO ('TC',in_rec.OR_CLUNICONTR);
                    VN_NUMERR := 19;
           
                    BEGIN
                        SELECT   DISBLE
                          INTO   VV_DISPONIBLE
                          FROM BAS_MEN.MAESTRO_IMPORTE_EMPRESAS
                         WHERE OR_CLUNICONTR=IN_REC.OR_CLUNICONTR
                           AND  ID_TIPO_PRODUCTO='TC';
                    EXCEPTION
                         WHEN OTHERS THEN
                              VV_DISPONIBLE:=0;
                    END;
           
                    IF NVL(VV_LIMITE,0) <>0 THEN
                       VV_PORC_USO:= VV_DISPUESTO / VV_LIMITE;
                    ELSE
                       VV_PORC_USO:=0;
                    END IF;
                    VN_NUMERR := 20;
                    
                    /*VERIFICO EXCEDIDO*/
                    IF(VV_PORC_USO * 100)>100 THEN
                       VV_FI_EXCEDID:='SI';
                       IF  VV_PORC_USO>99 THEN  --Agregado 28/03/2022 comentado nuevo req
                           VV_PORC_USO:=99;
                       END IF;
                    ELSE
                       VV_FI_EXCEDID:='NO';
                    END IF;
                    VN_NUMERR := 21;

                    /*BUSCO CCF PARA EAD  PREVIA*/
                    
                    IF  VV_FI_EXCEDID='NO' THEN
                        VN_NUMERR := 22;
                         
                        BEGIN
                            SELECT CCF_POSTMOC
                              INTO VN_CCF
                              FROM BAS_MEN.MAESTRO_CCF_EMPRESAS
                             WHERE ID_PRODUCTO='TC'
                               AND SEGMENTO=DECODE(in_rec.OR_INDHOLDING, '1', 'PA', '3', 'PA', '4', 'PA', DECODE(in_rec.IN_SEGMBS2, '020', 'PR', in_rec.OR_SEGFIC))
                               AND LIMITE_MIN<=VV_PORC_USO
                               AND LIMITE_MAX>VV_PORC_USO;
                        EXCEPTION
                                WHEN OTHERS THEN
                                   VN_CCF:=1;
                        END;
                         VN_NUMERR := 23;
                         
                        IF(VV_PORC_USO * 100) < 90 THEN  /* - Región estable (uso por debajo del 90%)*/
                           VV_EAD_PREVIA:=VV_DISPUESTO + VN_CCF * VV_DISPONIBLE;
                           VV_REGION:='ESTABLE';
                        ELSE /*-  Región inestable (uso entre 90% y 100%) */
                           VV_EAD_PREVIA:=VN_CCF * VV_LIMITE;-- VV_LIMITE;
                           VV_REGION:='INESTABLE';
                        END IF;
                        
                    ELSE /*- Excedidos */
                       VV_REGION:='EXCEDIDO';
                       VV_EAD_PREVIA:=VV_DISPUESTO;
                    END IF;
                      VN_NUMERR := 24;
                      
                      /*MAXIMO VALOR  PARA EAD PREVIA*/
                      IF  VV_EAD_PREVIA>99999 THEN
                          VV_EAD_PREVIA:=99999;
                      END IF;
                      VN_NUMERR :=25;
                       
                      BEGIN
                          SELECT UPLIFT_ADDITIONALDRAWINGS
                            INTO VV_UPLIFT_ADDITIONALDRAWINGS
                            FROM BAS_MEN.MAESTRO_CCF_APLIC_TARJETA
                           WHERE ID_PRODUCTO='TC'
                             AND LIMMIN_EAD<VV_EAD_PREVIA
                             AND LIMMAX_EAD>=VV_EAD_PREVIA
                             AND UPPER(REGION)=UPPER(VV_REGION);
                      EXCEPTION
                           WHEN OTHERS THEN
                                VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                      END;
                      
            ELSIF (in_rec.OR_TIPOPE = 'TC' AND in_rec.in_tiporeg IN ('OXC', 'OXE', 'OX', 'ITOXE', 'MMOXE', 'MMOXC')) THEN  /*TARJETAS OFEX*/
                   VN_CCF:=0;
            ELSIF in_rec.OR_PROCED = 'CONFIRMING' THEN /*Confirming*/
                  VN_NUMERR := 26;
                  /*busco valor para UPLIFT_ADDITIONALDRAWINGS*/
                  BEGIN
                          SELECT UPLIFT_ADDITIONALDRAWINGS
                            INTO VV_UPLIFT_ADDITIONALDRAWINGS
                            FROM BAS_MEN.MAESTRO_CCF_EMPRESAS
                           WHERE ID_PRODUCTO='CF'
                             AND SEGMENTO=DECODE(in_rec.OR_INDHOLDING, '1', 'PA', '3', 'PA', '4', 'PA', DECODE(in_rec.IN_SEGMBS2, '020', 'PR', in_rec.OR_SEGFIC));
                  EXCEPTION
                              WHEN OTHERS THEN
                                 VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                  END;
            END IF;
         /* FIN HDEV-107790 Nuevos calibados 03/02/2022 */
         
         ELSIF (in_rec.IN_SEGMBSINI IN ('101','102','002','017','106','107')
                OR  (in_rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') AND in_rec.OR_SEGFIC IN ('E5' ,'GR')
                     )
                  )THEN
                  VN_NUMERR :=27;
                  IF (in_rec.OR_PROCED IN ('INV-C/C-CR','INV-C/C-EX')
                     OR (in_rec.IN_TIPOREG IN ('OXC', 'OXE', 'OX', 'ITOXE', 'MMOXE', 'MMOXC') AND in_rec.OR_TIPOPE IN ('CR', 'PR'))    --NAV 18/07/2019 - Añadido - 'MMOXE', 'MMOXC'
                     OR (in_rec.OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND in_rec.OR_TIPOPE = 'CR') ) THEN -- 201609 Cambio en CCF para sindicados, si son créditos van como tal.

                     VN_NUMERR:= 28;
                     BEGIN
                         SELECT DISTINCT FI_EXCEDID
                           INTO VV_FI_EXCEDID
                           FROM BAS_MEN.MAESTRO_CCF_CREDITS_EAD
                          WHERE OR_CLUNICONTR = in_rec.OR_CLUNICONTR
                            AND FI_EXCEDID = 'SI';
                     EXCEPTION
                          WHEN OTHERS THEN
                               VV_FI_EXCEDID:= 'NO';
                     END;

                     VN_NUMERR:= 29;

                     IF VV_FI_EXCEDID = 'NO' OR in_rec.FI_TIPEXP = 'Undrawn' THEN
                        VN_NUMERR:= 30;

                        VV_FI_EXCEDID := 'NO';

                          --CCF POOL de créditos para CCAA. XCG, 25/07/11.
                          BEGIN
                               SELECT DECODE(SIGN(in_rec.CONCEDIDO_CRED - LIMITE),1, CCF_ALTO, CCF_BAJO) CCF
                                INTO VN_CCF
                                FROM BAS_MEN.MAESTRO_POOLCCF

                                WHERE SUBSEGMENTO = DECODE(in_rec.IN_SEGMBSINI, '102', 'CA', '101', 'CA', '002', 'CA', '017', 'CA'
                                                              , '106', 'KT', '107', 'KT' -- JCVJCV 201312 Se añaden los SEGMENTOS DE CRED Y TARJ. Como Créditos
                                                              , DECODE(in_rec.OR_SEGFIC,'E5','E5','GR','GR'--HDEV-107786 (cambio de prelación por nuevos calibrados)
                                                                       , DECODE(in_rec.OR_INDHOLDING, '1', 'PA', '3', 'PA', '4', 'PA'
                                                                                , DECODE(in_rec.IN_SEGMBS2, '020', 'PR', in_rec.OR_SEGFIC)
                                                                                 )
                                                                       )
                                                            )
                                          AND OR_PROCED = 'CREDITOS';
                          EXCEPTION
                              WHEN OTHERS THEN
                                     VN_CCF:= 99;
                         END;
                        VN_NUMERR:=31;

                     END IF;

                  ELSIF (in_rec.OR_TIPOPE = 'TC' OR in_rec.OR_PROCED = 'TARGES') THEN

                     VN_NUMERR:= 32;

                     BEGIN
                        SELECT
                               CASE when subsegmento = 'TA' then
                                         DECODE(SIGN(in_rec.dispto_tarj/in_rec.ME_CONCEDIDO_EU - LIMITE), 1, CCF_ALTO, 0, CCF_ALTO, CCF_BAJO)
                                    else
                                         DECODE(SIGN(in_rec.CONCEDIDO_TARJ - LIMITE),1, CCF_ALTO, CCF_BAJO)
                               end
                          INTO VN_CCF
                          FROM BAS_MEN.MAESTRO_POOLCCF
                         WHERE SUBSEGMENTO = DECODE(in_rec.IN_SEGMBSINI, '102', 'CA', '101', 'CA', '002', 'CA', '017', 'CA'
                                                          , '106', 'TA', '107', 'TA' -- JCVJCV 201312 Se añaden los SEGMENTOS DE CRED Y TARJ ('106','107')
                                                          , DECODE(in_rec.OR_SEGFIC,'E5','E5','GR','GR'--HDEV-107786 (cambio de prelación por nuevos calibrados)
                                                                   , DECODE(in_rec.OR_INDHOLDING, '1', 'PA', '3', 'PA', '4', 'PA'
                                                                            , DECODE(in_rec.IN_SEGMBS2, '020', 'PR', in_rec.OR_SEGFIC)
                                                                            )
                                                                  )
                                                   )
                           AND OR_PROCED = 'TARJETAS';
                     EXCEPTION
                          WHEN OTHERS THEN
                               VN_CCF:= 99;
                     END;

                  ELSE
                  VV_FI_EXCEDID:= 'NO';
                  END IF;
         END IF;
         
         VN_NUMERR:= 33;
     -- Cálculo de las vidas inicial y residual para promociones tomando la fecha de carencia.
         -- Si el cálculo es negativo, las vidas inicial y residual tendrán valor por defecto 99999999.
         IF VV_IN_SEGMBS0 = '200' AND (IN_REC.OR_NIFCIF != 'N0030939C' AND IN_REC.OR_TITULARITAT != 18776122) THEN /* RMR 09/03/2020 - Dejamos vidres de origen ya que no tiene fecha de carencia  */
            IF IN_REC.OR_FECCAR NOT IN (0, 99991231, 99999999) THEN
               IF IN_REC.OR_FECCAR > PN_FECPRO THEN
                  VN_OR_VIDRES:= TO_DATE(IN_REC.OR_FECCAR,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD');
               ELSE
                  VN_OR_VIDRES:= 99999999;
               END IF;
               IF IN_REC.OR_FECCAR > IN_REC.OR_FECOPE THEN
                  VN_OR_VIDINI:= TO_DATE(IN_REC.OR_FECCAR,'YYYY/MM/DD') - TO_DATE(IN_REC.OR_FECOPE,'YYYY/MM/DD');
               ELSE
                  VN_OR_VIDINI:= 99999999;
               END IF;
            ELSE
                 VN_OR_VIDRES:= 99999999;
                 VN_OR_VIDINI:= 99999999;
            END IF;
         END IF;

         VN_NUMERR:= 34;
         --CCF credit conversion factor
         BAS_MEN.FNC_CALCUL_CCF('AIRB',
                                 PN_OPC_DER,
                                 PN_F,
                                 UPPER(in_rec.IN_SEGMBS),
                                 UPPER(in_rec.FI_TIPEXP),
                                 UPPER(in_rec.OR_PROCED),
                                 UPPER(in_rec.OR_TIPOPE),
                                 VN_OR_VIDINI,
                                 VN_OR_VIDRES,
                                 in_rec.OR_CLUNICUENT,
                                 in_rec.MOROSO,
                                 in_rec.OR_TIPAVA,
                                 in_rec.IN_SEGMBSINI,
                                 in_rec.OR_EPIIND,
                                 in_rec.FI_EPICON,
                                 VV_IN_SEGMBS0,
                                 VV_FI_EXCEDID,
                                 in_rec.OR_CTAIND,
                                 VN_CCF,
                                 in_rec.OR_TIPGAR,
                                 in_rec.OR_ENTITY,
                                 in_rec.IN_SUCEPT,
                                 in_rec.IN_TIPOREG,
                                /* INI HDEV-107790 Nuevos calibrados 19/04/2022 */
                                 in_rec.OR_SEGFIC,
                                 in_rec.OR_INDHOLDING,
                                 in_rec.IN_SEGMBS2,
                                /* FIN HDEV-107790 Nuevos calibrados 19/04/2022 */
                                 VN_FI_CCFAIRB,
                                 VV_RET);

         IF VV_RET <> 'OK' THEN
            VN_NUMERR:= 35;
            VV_RET:= SUBSTR('NUM:'||TO_CHAR(VN_NUMERR)||'FNC_CALCUL_CCF:'||VV_RET,1,100);
         END IF;

         VN_NUMERR:= 36;

         -- Tratamiento préstamos disponibles
         IF in_rec.OR_PROCED = 'PR-DISPONI' AND (VV_IN_SEGMBS0 <> '200' OR (VV_IN_SEGMBS0 = '200' AND in_rec.OR_FECCAR = 0)) THEN

            VN_NUMERR:= 37;

            IF in_rec.OR_TIPOPR IN (49, 55, 89, 127, 170, 5049, 5127, 7049, 8262) THEN
               VN_FI_CCFAIRB := 0;
            ELSIF in_rec.OR_TIPOPR IN (4, 46, 77, 81, 82, 83, 84, 95, 101, 102, 103, 123, 124, 138, 139,
                                    150, 151, 152, 159, 160, 183, 184, 196, 2101, 2201,
                                    5081, 5082, 5083, 5095, 5101, 5103, 6081, 6083) THEN

                  IF in_rec.OR_FECCAR <> 0 THEN
                     IF in_rec.OR_FECCAR < PN_FECPRO THEN
                        VN_FI_CCFAIRB := 0;
                     END IF;
                  ELSE

                       IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(in_rec.OR_FECOPE, 'YYYYMMDD'))/30 > 18 THEN
                          VN_FI_CCFAIRB := 0;
                       END IF;
                  END IF;

            ELSIF in_rec.OR_TIPOPR IN (125, 129, 162, 166, 167, 177, 179, 180, 5166, 5168, 6166) THEN
                  IF in_rec.OR_FECCAR <> 0 THEN
                     IF in_rec.OR_FECCAR < PN_FECPRO THEN
                        VN_FI_CCFAIRB := 0;
                     END IF;

                  ELSE
                       IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(in_rec.OR_FECOPE, 'YYYYMMDD'))/30 > 36 THEN
                          VN_FI_CCFAIRB := 0;
                       END IF;
                  END IF;

            ELSIF in_rec.OR_TIPOPR = 8137 THEN
                  IF in_rec.OR_FECCAR <> 0 THEN
                     IF in_rec.OR_FECCAR < PN_FECPRO THEN
                        VN_FI_CCFAIRB := 0;
                     END IF;
                  ELSE
                       IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(in_rec.OR_FECOPE, 'YYYYMMDD'))/30 > 48 THEN
                          VN_FI_CCFAIRB := 0;
                       END IF;
                  END IF;

            ELSIF in_rec.OR_TIPOPR IN (7, 5047) THEN
                  IF in_rec.OR_FECCAR <> 0 THEN
                     IF in_rec.OR_FECCAR < PN_FECPRO THEN
                        VN_FI_CCFAIRB := 0;
                     END IF;
                  ELSE
                       VN_FI_CCFAIRB := 0;
                  END IF;

            ELSIF in_rec.OR_TIPOPR IN (117, 5118) THEN
                  IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(in_rec.OR_FECOPE, 'YYYYMMDD'))/30 > 12 THEN
                     VN_FI_CCFAIRB := 0;
                  END IF;

            ELSIF in_rec.OR_TIPOPR IN (176, 8151, 8219, 8221, 134, 135) THEN
                  IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(in_rec.OR_FECOPE, 'YYYYMMDD'))/30 > 36 THEN
                     VN_FI_CCFAIRB := 0;
                  END IF;
            END IF;

         END IF;

         VN_NUMERR:= 38;
         /* INI HDEV-107790 Nuevos calibrados 22/04/2022*/
         IF in_rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') AND in_rec.OR_SEGFIC NOT IN ('E5','GR') THEN
             VN_NUMERR:= 39;
             /*CREDITOS*/
             IF (in_rec.OR_PROCED IN ('INV-C/C-CR','INV-C/C-EX')
                 OR (in_rec.OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND in_rec.OR_TIPOPE = 'CR')) AND ((UPPER(in_rec.FI_TIPEXP)='DRAWN' OR UPPER(in_rec.FI_TIPEXP)='UNDRAWN') ) THEN -- 201609 Cambio en CCF para sindicados, si son créditos van como tal
                   VN_NUMERR:= 40;
                   IF VV_FI_EXCEDID='NO'  THEN
                       VN_NUMERR:= 41;
                       IF (VV_PORC_USO * 100) <90 THEN  --Región estable
                           VN_NUMERR:= 42;
                           IF UPPER(in_rec.FI_TIPEXP)='DRAWN' THEN 
                              VN_FI_CCFAIRB:=1;
                           END IF;
                           VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS * (in_rec.OR_DISPTO+ VN_FI_CCFAIRB * in_rec.OR_DISBLE);
                           VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS * (in_rec.OR_DISPTOCON+ VN_FI_CCFAIRB * in_rec.OR_DISBLECON);
  
                       ELSE  -- Región inestable
                           VN_NUMERR:= 43;
                           VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS * VN_FI_CCFAIRB * (in_rec.OR_DISPTO+in_rec.OR_DISBLE);
                           VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS * VN_FI_CCFAIRB * (in_rec.OR_DISPTOCON +in_rec.OR_DISBLECON);
                       END IF;
                   ELSE /*-  Excedidos */
                       VN_NUMERR:= 44;
                       IF UPPER(in_rec.FI_TIPEXP)='UNDRAWN' THEN 
                          VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                       END IF;
                       VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS * in_rec.OR_DISPTO;
                       VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS * in_rec.OR_DISPTOCON;
                   END IF;
             /*TARJETAS*/
             ELSIF ((in_rec.OR_TIPOPE = 'TC' OR in_rec.OR_PROCED = 'TARGES') AND in_rec.in_tiporeg NOT IN ('OXC', 'OXE', 'OX', 'ITOXE', 'MMOXE', 'MMOXC')
                   AND (UPPER(in_rec.FI_TIPEXP)='DRAWN' OR UPPER(in_rec.FI_TIPEXP)='UNDRAWN')) THEN
                   VN_NUMERR:=45;
                   IF  VV_FI_EXCEDID='NO' THEN
                       VN_NUMERR:=46;
                       IF(VV_PORC_USO * 100) < 90 THEN  -- Región estable
                          VN_NUMERR:=47;
                           IF UPPER(in_rec.FI_TIPEXP)='DRAWN' THEN 
                              VN_FI_CCFAIRB:=1;
                           END IF;
                           VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS*(in_rec.OR_DISPTO + VN_FI_CCFAIRB * in_rec.OR_DISBLE);
                           VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS*(in_rec.OR_DISPTOCON + VN_FI_CCFAIRB * in_rec.OR_DISBLECON);
                       ELSE --Región inestable 
                           VN_NUMERR:=48;
                           VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS* VN_FI_CCFAIRB * (in_rec.OR_DISPTO+in_rec.OR_DISBLE);--VV_LIMITE;
                           VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS* VN_FI_CCFAIRB * (in_rec.OR_DISPTOCON+in_rec.OR_DISBLECON);
                       END IF;
                   ELSE -- Excedidos
                       VN_NUMERR:=49;
                       IF UPPER(in_rec.FI_TIPEXP)='UNDRAWN' THEN 
                          VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                       END IF;
                       VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS * in_rec.OR_DISPTO;
                       VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS * in_rec.OR_DISPTOCON;
                   END IF;
             ELSIF (in_rec.IN_TIPOREG IN ('OXC', 'OXE', 'OX', 'ITOXE', 'MMOXE', 'MMOXC') AND in_rec.OR_TIPOPE IN ('CR', 'PR','TC')) THEN --OFEX
                   VN_NUMERR:=50;
                   VN_FI_EADAIRB:= in_rec.TOTAL * VN_FI_CCFAIRB;
                   VN_FI_EADAIRBCON:= in_rec.TOTALCON * VN_FI_CCFAIRB;
             ELSIF (in_rec.OR_PROCED = 'CONFIRMING' AND (UPPER(in_rec.FI_TIPEXP)='DRAWN' OR UPPER(in_rec.FI_TIPEXP)='UNDRAWN')) THEN /* Confirming */
                   VN_NUMERR:=51;
                   IF UPPER(in_rec.FI_TIPEXP)='UNDRAWN' THEN --SE INFORMA UPLIFT 1
                      VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                   END IF;
                   VN_FI_EADAIRB:=VV_UPLIFT_ADDITIONALDRAWINGS * in_rec.OR_DISPTO;
                   VN_FI_EADAIRBCON:=VV_UPLIFT_ADDITIONALDRAWINGS * in_rec.OR_DISPTOCON;

             ELSIF (in_rec.OR_PROCED = 'EFECTES' AND (UPPER(in_rec.FI_TIPEXP)='DRAWN' OR UPPER(in_rec.FI_TIPEXP)='UNDRAWN')) THEN  /*Descuentos comerciales*/
                   VN_NUMERR:=52;
                   VN_FI_EADAIRB:= in_rec.OR_DISPTO;
                   VN_FI_EADAIRBCON:=in_rec.OR_DISPTOCON;
             ELSE
                   VV_UPLIFT_ADDITIONALDRAWINGS:=1;
                   VN_FI_EADAIRB:= in_rec.TOTAL * VN_FI_CCFAIRB;
                   VN_FI_EADAIRBCON:= in_rec.TOTALCON * VN_FI_CCFAIRB;
             END IF;
         
         ELSE
             VN_NUMERR:=53;
             VN_FI_EADAIRB:= in_rec.TOTAL * VN_FI_CCFAIRB;
             VN_FI_EADAIRBCON:= in_rec.TOTALCON * VN_FI_CCFAIRB;
         END IF;
         /* FIN HDEV-107790 Nuevos calibrados 03/02/2022*/
         
         VN_NUMERR:= 54;

         /*Cálculo de EAD: Para derivados es la mayor entre 0 y la EAD no morosa + el fairvalue.
                           Para repos es la mayor entre 0 y el fairvalue - el fairva del bono.*/

         IF UPPER(in_rec.FI_TIPEXP) = 'OTC' THEN
            VN_FI_EADAIRB:= VN_FI_EADAIRB + BAS_MEN.FNC_MAX(0,in_rec.OR_FAIRVA);
            VN_FI_EADAIRBCON:= VN_FI_EADAIRBCON + BAS_MEN.FNC_MAX(0,in_rec.OR_FAIRVACON);
         ELSIF UPPER(in_rec.FI_TIPEXP) = 'REPOS' AND SUBSTR(in_rec.FI_EPICON,1,2) = '01' THEN
               VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, in_rec.OR_FAIRVA - in_rec.IN_FAIRVABO);
               VN_FI_EADAIRBCON:= BAS_MEN.FNC_MAX(0, in_rec.OR_FAIRVACON - in_rec.IN_FAIRVABOCON);
         ELSIF UPPER(in_rec.FI_TIPEXP) = 'REPOS' AND SUBSTR(in_rec.FI_EPICON,1,2) = '02' THEN
               VN_FI_EADAIRB:= BAS_MEN.FNC_MAX(0, in_rec.IN_FAIRVABO - in_rec.OR_FAIRVA);
               VN_FI_EADAIRBCON:= BAS_MEN.FNC_MAX(0, in_rec.IN_FAIRVABOCON - in_rec.OR_FAIRVACON);
         END IF;

         VN_NUMERR:= 55;

         IF in_rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','002','017','027') AND in_rec.IN_TIPOREG NOT IN ('OXE', 'OX', 'ITOXE', 'MMOXE') AND in_rec.OR_ENTITY IN (81, 8211, 242) THEN
          /* 16/08/2021 RMR | Se respetaran las ventas con valor 0 */
          --IF IN_REC.IN_VTAGRU in (99,0) OR (IN_REC.IN_VTAGRU IN (150000, 600000, 3450000, 18000000, 115000000,200000000) AND IN_REC.ORIGEN = 'SIN ORIGEN') THEN
            IF IN_REC.IN_VTAGRU = 99 THEN
               /*IF IN_REC.OR_SEGFIC = 'E0' THEN
                  VN_VENTAS:= 150000;
               ELSIF IN_REC.OR_SEGFIC = 'E1' THEN
                  VN_VENTAS:= 600000;
               ELSIF IN_REC.OR_SEGFIC = 'E2' THEN -- nuevas ventas medias . 201603. XCG
                  VN_VENTAS:= 3450000;
               ELSIF IN_REC.OR_SEGFIC = 'E3' THEN -- nuevas ventas medias . 201603. XCG
                  VN_VENTAS:= 18000000;
               ELSIF IN_REC.OR_SEGFIC = 'E4' THEN -- nuevas ventas medias . 201603. XCG
                  VN_VENTAS:= 115000000;
               ELSIF IN_REC.OR_SEGFIC = 'E5' THEN -- nuevas ventas medias corporates. 201603. XCG
                  VN_VENTAS:= 200000000;
               END IF;*/
               VN_VENTAS  := 51000000;
               VV_ACTIVO  := 44000000;

            END IF;

            VN_NUMERR:= 56;

            IF IN_REC.IN_VTAGRU_CONS = 99 THEN
               VN_VENTAS_CONS := 51000000;
               VV_ACTIVO_CONS := 44000000;
            END IF;

          -- Para UTE¿s, Project Finance, Real Estate, Sociedades Patrimoniales o Holdings,
          -- si no se recuperan ventas individuales del balance: Ventas medias mímimas de un 'E3'.
          --IF (IN_REC.IN_SEGMBSINI = '019' OR IN_REC.IN_SEGMBS0 IN ('203','201','204') OR IN_REC.OR_INDHOLDING IN ('1','3','4')OR IN_REC.IN_SEGMBS2 = '020')
          --
          --      IF IN_REC.IN_SEGMBSINI = '019' AND IN_REC.IN_VTAGRU IN (0) THEN /* 04/12/2020 - NAV - TM-3245 - NO asignar ventas medias a las utes que tengas ventas cero en el maestro_ventas */
          --         VN_VENTAS:= 0;
          --      ELSIF IN_REC.OR_SEGGES = 3 AND SUBSTR(IN_REC.OR_SEGFAC,1,1) = 4 THEN
          --         VN_VENTAS:= 115000000;
          --      ELSIF IN_REC.OR_SEGGES = 3 AND SUBSTR(IN_REC.OR_SEGFAC,1,1) = 5 THEN
          --         VN_VENTAS:= 200000000;
          --      ELSE
          --         VN_VENTAS:= 18000000;
          --      END IF;
          --END IF;

         /* 16/08/2021 RMR */
         --IF IN_REC.IN_VTAGRU_CONS in (99, 0) THEN
         --   VN_VENTAS_CONS := VN_VENTAS;
         --ELSE
         --   VN_VENTAS_CONS := IN_REC.IN_VTAGRU_CONS; --Ventas 0 en el Balance consolidado con segmento comercial distinto a 'E3' y 'E4'.
         --END IF;

         END IF;
         --Si no nay activo, se iguala al valor de las ventas medias.
         --IF VV_ACTIVO = 0 AND VN_VENTAS IN (150000, 600000, 3450000, 18000000, 115000000, 200000000) THEN
         --   VV_ACTIVO:= VV_VENTAS;
         --   VV_ACTIVO_CONS:= VV_VENTAS;
         --END IF;

         --Si no nay activo CONS, se iguala al valor de las ventas medias consolidadas.
         /* 16/08/2021 RMR */
         --IF VV_ACTIVO_CONS = 0 AND VN_VENTAS_CONS IN (150000, 600000, 3450000, 18000000, 115000000,200000000) THEN
         --   VV_ACTIVO_CONS:= VN_VENTAS_CONS;
         --END IF;

         VN_NUMERR:= 57;

         -- Segmentación Pymes

         BEGIN
            SELECT FI_SUMEAD
              INTO VN_TOT_EADAIRB
              FROM BAS_MEN.MAESTRO_SUMEAD
             WHERE ID_CLIENTE = IN_REC.ID_CLIENTE;
         EXCEPTION
            WHEN OTHERS THEN
               IF NOT (IN_REC.OR_TIPGAR IN ('HC','HV','HR','HX')
                  AND IN_REC.TIPO_FINCA = 'RES'
                  AND IN_REC.INMUEBLE = 'INMUEBLE' AND IN_REC.USO_PROPIO = 'SI') THEN
                      VN_TOT_EADAIRB:= IN_REC.OR_DISPTO;
               ELSE
                    VN_TOT_EADAIRB:= 0;
               END IF;
         END;

         VN_NUMERR:= 58;

         IF IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','002','017')
         AND IN_REC.IN_TIPOREG IN ('PX', 'RX', 'SA', 'OXE', 'FFD', 'OXC', 'OX','DN', 'REN','RN', 'MMOXE', 'MMSA', 'CESA', 'MMOXC', 'AVSA', 'IIC-LTA', 'IIC-FBA') THEN   --NAV 18/07/2019 - Añadido - 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */

         -- 201906 - Suma de exposici¢n STDA agrupando por id_cliente.

            VN_NUMERR:= 59;

            /* FMRR - 30/09/2021 -Requerimientos cierres de Septiembre - Segmentación minorista y factor de apoyo a Pymes  */
            IF IN_REC.IN_NUMEMP_CONS = 0 AND VN_VENTAS_CONS >= 50000000 THEN
                VV_NUMEMP_CONS:= '251';
            ELSE
                VV_NUMEMP_CONS:= IN_REC.IN_NUMEMP_CONS;
            END IF;

            /* FMRR - 30/09/2021 -Requerimientos cierres de Septiembre - Segmentación minorista y factor de apoyo a Pymes  */
            IF IN_REC.IN_NUMEMP = 0 AND VN_VENTAS >= 50000000 THEN
                VV_NUMEMP:= '251';
            ELSE
                VV_NUMEMP:= IN_REC.IN_NUMEMP;
            END IF;

            VN_NUMERR:= 60;

            -- Nuevos requerimientos Pyme Minorista: menor 250 empleados y (ventas menor 50M o activo menor 43M). XCG, 18/10/13. (2014)
            IF VV_NUMEMP_CONS <= 250 AND (VN_VENTAS_CONS/1000000 <= 50 OR VV_ACTIVO_CONS/1000000 <= 43) THEN
               VV_IN_SEGMBS1:= '501';
               VV_IN_SEGMBS := 'Pyme Minoristas';

               IF VN_TOT_EADAIRB > 1000000 THEN
                  VV_IN_SEGMBS1:= '500';
                  VV_IN_SEGMBS := 'Pyme Empresas';
                  -- Para Patrimoniales o Holdings y Promotores se utilizarán los Activos Consolidados en lugar de las Ventas Consolidadas Sólo si las ventas son 0.  201609
                  IF (IN_REC.OR_INDHOLDING IN ('1', '3', '4') OR IN_REC.In_SegmBS2 = '020') AND VN_VENTAS_CONS IN (0, 99) THEN

                      IF VV_ACTIVO_CONS/1000000 >= 50 THEN
                          VV_IN_SEGMBS1:= '?';
                          VV_IN_SEGMBS := 'Empresas';
                      END IF;

                  ELSIF VN_VENTAS_CONS/1000000 >= 50 THEN
                          VV_IN_SEGMBS1:= '?';
                          VV_IN_SEGMBS := 'Empresas';
                  END IF;

               END IF;

               VN_NUMERR:= 61;

            -- Para Patrimoniales o Holdings se utilizarán los Activos Consolidados en lugar de las Ventas. 201606 JCV
            -- Sólo si las ventas son 0. Se añaden promotores 201609
            ELSIF (IN_REC.OR_INDHOLDING IN ('1', '3', '4') OR IN_REC.In_SegmBS2 = '020') AND VN_VENTAS_CONS IN (0, 99) AND VV_ACTIVO_CONS /1000000 < 50 THEN
                  VV_IN_SEGMBS1:= '500';
                  VV_IN_SEGMBS := 'Pyme Empresas';

            ELSIF VN_VENTAS_CONS/1000000 < 50 THEN
                  VV_IN_SEGMBS1:= '500';
                  VV_IN_SEGMBS := 'Pyme Empresas';
           /* 03/11/2021 - NAV - Si las ventas consolidadas son mayores a 50 millones y el segmento sea ('002','017') asignar in_segmbs1 = '500' */
            ELSIF IN_REC.IN_SEGMBSINI IN ('002','017') AND VN_VENTAS_CONS >= 50000000 THEN
                  VV_IN_SEGMBS1:= '500';
                  VV_IN_SEGMBS := 'Pyme Empresas';

            ELSE
                  VV_IN_SEGMBS1:= '?';
                  VV_IN_SEGMBS := 'Empresas';
            END IF;

            VN_NUMERR:= 62;

            IF IN_REC.IN_SEGMBSINI IN ('002','017') and (IN_REC.IN_SEGMBS0 = '?' OR IN_REC.IN_SEGMBS0 = 200) THEN -- RMR 22/10/2019 Añadido IN_SEGMBS0 = 200 para promotores con promoción
               VV_IN_SEGMBS := 'Comercios y Autónomos';
            ELSIF IN_REC.IN_SEGMBS0 IN ('202','201','203','204') THEN
                begin
                   select IN_SEGBS
                     into VV_IN_SEGMBS
                     from bas_men.maestro_segmentos
                    where in_segmbsini = IN_REC.IN_SEGMBS0;
                exception
                        when others then
                                VV_IN_SEGMBS := '?';
               end;
            END IF;

         END IF;

         VN_NUMERR:= 63;

       ------- SRATIN -----------

             -- 201512 Si es un segmento que va por scoring entoncés se inicializa a SSOR sino a 'SR'
       IF IN_REC.IN_SEGMBSINI IN ('103', '104', '106', '107') THEN
          VV_IN_SRATIN := 'SSOR';
       ELSE
            VV_IN_SRATIN := 'SR';
       END IF;

       VN_NUMERR:= 64;

       VV_IN_METODE  := IN_REC.IN_METODE;
       VV_FECMORA    := IN_REC.IN_FECMORA;
       VV_OR_CLAVISO := IN_REC.OR_CLAVISO;
       VV_IN_SUCEPT  := IN_REC.IN_SUCEPT;

       IF IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','101','102', '002', '017') AND IN_REC.IN_TITULFIN <> 0 THEN

          BEGIN
             SELECT CLAVE
               INTO VV_OR_CLAVISO
               FROM BAS_MEN.CLAVISO_BLOQUEO
              WHERE TITULFIN = IN_REC.IN_TITULFIN;
          EXCEPTION
               WHEN OTHERS THEN
                    VV_OR_CLAVISO := IN_REC.OR_CLAVISO;
          END;

          VN_NUMERR:= 65;

          IF VV_OR_CLAVISO = 9999999999 AND SUBSTR(IN_REC.IN_SUCEPT,3,5) = 'BLQR' THEN
             BEGIN
                SELECT CLAVE
                  INTO VV_OR_CLAVISO
                  FROM BAS_MEN.CLAVISO_BLOQUEO
                 WHERE TITULFIN = IN_REC.OR_TITULARITAT;
             EXCEPTION
                  WHEN OTHERS THEN
                       VV_OR_CLAVISO := IN_REC.OR_CLAVISO;
             END;
             
             VN_NUMERR:= 66;

             IF VV_OR_CLAVISO = 9999999999 AND SUBSTR(IN_REC.IN_SUCEPT,3,5) = 'BLQR' and IN_REC.IN_SEGMBSINI IN ('002', '017') THEN
                BEGIN
                    SELECT CLAVE
                      INTO VV_OR_CLAVISO
                      FROM BAS_MEN.CLAVISO_BLOQUEO_SCPCB
                     WHERE OR_TITUSCPCB = IN_REC.IN_TITULFIN;
                EXCEPTION
                     WHEN OTHERS THEN
                          VV_OR_CLAVISO := IN_REC.OR_CLAVISO;
                END;

             END IF;

          END IF;

       END IF;

       VN_NUMERR:= 67;

        -- MOROSIDAD
       IF IN_REC.IN_INDMOR in ('SI', 'CT') THEN
          VV_IN_SRATIN := 'MORA';
       -- BLOQUEO MOROSO
       /* INI HDEV-107790 13/05/2022 */
       ELSIF  in_rec.IN_SEGMBS0 NOT IN ('201', '203', '204') AND VV_OR_CLAVISO = 9051 
         AND (in_rec.IN_SEGMBSINI IN  ('002', '017', '101', '102') OR (in_rec.IN_SEGMBSINI IN  ('003', '005', '006', '009', '010', '019', '027') AND in_rec.OR_SEGFIC IN ('GR', 'E5', 'P5'))) THEN 
     --ELSIF SUBSTR(in_rec.IN_SUCEPT,3,5) = 'BLQR' AND in_rec.IN_SEGMBS0 NOT IN ('201', '203', '204') AND VV_OR_CLAVISO = 9051 THEN
          VV_IN_SRATIN:= 'BLQRM';
          VV_FECMORA := IN_REC.OR_FECALTBLO;
       /* FIN HDEV-107790 13/05/2022 */
       
      /****************************************************************************************************/
          /*                  Modificaciones Proyecto Nuevos calibrados  HDEV-107790    07/02/2022            */
          /*                   cambio orden prelacion                                                          */
          /****************************************************************************************************/
       --CURADOS
       ELSIF in_rec.FI_MESCURA != 0 AND in_rec.IN_SEGMBSINI NOT IN ('007','018','021','028','029', '034') AND in_rec.IN_SEGMBS0 NOT IN ('201', '203', '204') THEN
             VV_IN_SRATIN := 'CURA';
          /**********************************************************************************************************/
       -- REFINANCIADOS
       ELSIF IN_REC.IN_REFINAN = 1 and IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027', '002', '017', '101', '102','103','104') AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') THEN
             VV_IN_SRATIN := 'REFI';

             VN_NUMERR:= 68;

             --IF IN_REC.IN_SEGMBSINI IN ('103', '104') AND IN_REC.Or_FecOpe >= PN_FECPRO-10000 THEN -- Reactivo
             /*IF IN_REC.IN_SEGMBSINI IN ('103', '104') AND (IN_REC.OR_FECOPE >= PN_FECPRO-10000 AND NVL(IN_REC.OR_FECSCO,IN_REC.OR_FECOPE) >= PN_FECPRO-10000)  THEN -- Reactivo

                -- JOM  201512 Nueva marca refinanciados de particulares sin fecha o sin susceptibilidad. Irán por pd media.
                if in_rec.IN_SUCEPT = '?' or in_rec.or_modsco = '?' then
                   VV_IN_SRATIN := 'SSORR';
                end if;*/

             IF IN_REC.IN_SEGMBSINI IN ('103', '104') THEN
                 --AND (IN_REC.OR_FECOPE < PN_FECPRO-10000 OR IN_REC.OR_FECSCO < PN_FECPRO-10000) THEN -- Comportamental
                 /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/
                   IF IN_REC.OR_FECOPE > 19000101
                   AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) <= 6
                        AND TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                     OR
                       (ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) > 6
                       AND TO_DATE(NULLIF(IN_REC.OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))
                      THEN -- Comportamental

                           IF IN_REC.IN_SUCEPT IN ('CONSLI','HINSLI') THEN -- líneas de refinanciados tb al stda.

                              VV_IN_SRATIN := 'SSOLR';
                              VV_IN_METODE := 'STDA';

                           ELSIF ABS(IN_REC.OR_PUNTSCO) = 9999 THEN  -- Sin Puntuación/Scoring Comportamental.
                                 VV_IN_SRATIN := 'SSORR';
                           END IF;
                   elsif in_rec.IN_SUCEPT = '?' or in_rec.or_modsco = '?' then -- Reactivo
                         VV_IN_SRATIN := 'SSORR';
                   end if;

             ELSE
                  IF NVL(IN_REC.OR_PUNT0, 9999) = 9999 THEN
                     VV_IN_SRATIN := 'SRR';  --Sin rating Refinanciado
                  ELSIF IN_REC.OR_SITUAC0 = 'D' THEN
                        /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA
                        IF IN_REC.IN_SEGMBSINI IN ('002', '017', '101', '102') then
                           VV_IN_SRATIN := 'CRDER'; -- Con rating depurado Refinanciado
                        ELSIF 24-(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))) <= 0 THEN
                              VV_IN_SRATIN := 'SRR_CAD'; -- xcg, 29/03/21 Sin rating refinanciado caducado por llevar más de 48 meses caducado
                        ELSIF IN_REC.or_fecpun0 = 9999 THEN
                              VV_IN_SRATIN := 'SRR_FEC';  -- xcg, 29/03/21 Sin rating por no tener fecha de rating
                        ELSIF SUBSTR(IN_REC.OR_MODRAT0,1,2) in ('?', 'CA') THEN
                              VV_IN_SRATIN := 'SRR_INC'; -- xcg, 29/03/21 Sin Rating Inconsistente.*/

                        IF 24-(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))) <= 0 THEN
                              VV_IN_SRATIN := 'SRR_CAD'; -- xcg, 29/03/21 Sin rating refinanciado caducado por llevar más de 48 meses caducado
                        ELSIF IN_REC.or_fecpun0 = 9999 THEN
                              VV_IN_SRATIN := 'SRR_FEC';  -- xcg, 29/03/21 Sin rating por no tener fecha de rating
                        ELSIF SUBSTR(IN_REC.OR_MODRAT0,1,2) in ('?', 'CA') AND IN_REC.IN_SEGMBSINI NOT IN ('002', '017','101', '102')THEN
                              VV_IN_SRATIN := 'SRR_INC'; -- xcg, 29/03/21 Sin Rating Inconsistente.
                        ELSIF SUBSTR(IN_REC.OR_MODRAT0,1,2) not in ('?', 'CA') AND IN_REC.IN_SEGMBSINI IN ('002', '017','101', '102')THEN
                              VV_IN_SRATIN := 'SRR_INC'; -- xcg, 29/03/21 Sin Rating Inconsistente.
                        /* FIN - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */
                        ELSE
                             BEGIN
                                SELECT 'SRR_INC'
                                  INTO VV_IN_SRATIN
                                  FROM BAS_MEN.MAESTRO_DETALLE_MODELOS
                                 WHERE CODMODELO = in_rec.or_modrat0
                                   and TIP_RAT <> 6;
                             EXCEPTION
                                  WHEN OTHERS THEN
                                       VV_IN_SRATIN := 'CRDER'; -- Con rating depurado Refinanciado
                             END;
                        END IF;
                  ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('EM', 'PR', 'PA', 'GR', 'HO', 'NC', 'EU','PU','ET','PT', 'GR')
                    AND SUBSTR(IN_REC.OR_MODRAT0,1,2) in ('?', 'CA') THEN
                        VV_IN_SRATIN := 'SRR_INC'; -- xcg, 13/12/21 Sin Rating Refinanciado Inconsistente.
                  END IF;
             END IF;
    --BLOQUEO
       ELSIF (in_rec.IN_SEGMBS0 NOT IN ('201', '203', '204') AND VV_OR_CLAVISO IN (9050,9052,9053,9054,9051)
             AND in_rec.IN_SEGMBSINI IN  ('003', '005', '006', '009', '010', '019', '027', '002', '017', '101', '102') ) THEN--HDEV-107790 02/05/2022
       --ELSIF SUBSTR(in_rec.IN_SUCEPT,3,5) = 'BLQR' AND in_rec.IN_SEGMBS0 NOT IN ('201', '203', '204') AND VV_OR_CLAVISO <> 9051 THEN --HDEV-107790 26/04/2022
             VV_IN_SRATIN:= 'BLQR';
       ELSIF in_rec.IN_SUCEPT IN ('PRSCSR','EMSCSR','PRSCST','EMSCST','EMNSSP','PRNSSP','EMNSSC','PRNSSC', 'NCSCSR', 'CASCSR','CRSCSR','CASCST','CANSSC','CRNSSP','EUSCSR','PUSCSR','ETSCSR','PTSCSR','HOSCSR','PASCSR',
                                  'PFSCSR', 'PFBLQR','GRSCSR') AND ABS(in_rec.OR_PUNT0) = 9999 THEN
             VV_IN_SRATIN := 'SR'; -- Sin Rating. XCG, 10/01/2020 Cambio de prelación, SR antes que CRDE
       ELSIF in_rec.or_situac0 = 'D' and SUBSTR(in_rec.IN_SUCEPT,1,2) IN ('EM', 'PR', 'PA', 'GR', 'HO', 'NC', 'EU','PU','ET','PT', 'GR') THEN
             IF in_rec.or_fecpun0 = 9999 THEN
                   VV_IN_SRATIN := 'SR_FEC';   -- xcg, 29/03/21 Sin rating por no tener fecha de rating
             ELSIF SUBSTR(in_rec.OR_MODRAT0,1,2) in ('?', 'CA')   THEN
                   VV_IN_SRATIN := 'SR_INC'; -- xcg, 29/03/21 Sin Rating Inconsistente.
             ELSE
                  VV_IN_SRATIN := 'CRDE'; -- Con Rating DEpurado.
             END IF;
       /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA
       ELSIF in_rec.or_situac0 = 'D' and SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'CA' THEN -- Susceptibilidad de grupos rating depurado. 201603.XCG
             IF SUBSTR(IN_REC.OR_MODRAT0,1,2) not in ('?', 'CA') AND ABS(IN_REC.OR_PUNT0) != 9999  THEN -- 201603. xcg
                VV_IN_SRATIN := 'CRIDE'; -- Con Rating Inconsistente DEpurado.
             ELSE
                VV_IN_SRATIN := 'CRDE'; -- Con Rating DEpurado.
             END IF;*/
       ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'CA' THEN -- Susceptibilidad de grupos rating depurado. 201603.XCG
             IF SUBSTR(IN_REC.OR_MODRAT0,1,2) not in ('?', 'CA') THEN -- 201603. xcg
                VV_IN_SRATIN := 'SR_INC'; -- Con Rating Inconsistente DEpurado.
             ELSIF in_rec.or_situac0 = 'D' AND ABS(IN_REC.OR_PUNT0) != 9999 THEN
                IF 24-(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))) <= 0 THEN
                   VV_IN_SRATIN := 'SR_CAD';     -- xcg, 29/03/21 Sin rating caducado por llevar más de 48 meses caducado
                ELSE
                   VV_IN_SRATIN := 'CRDE'; -- Con Rating DEpurado.
                END IF;
             ELSIF ABS(IN_REC.OR_PUNT0) = 9999 THEN
                VV_IN_SRATIN := 'SR'; -- Sin Rating.
             ELSE
                VV_IN_SRATIN := 'CRVI'; -- Con Rating VIgente.
             END IF;
       /* FIN - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */
       ELSIF substr(in_rec.IN_SUCEPT,1,2) IN ('EM', 'PR', 'PA', 'HO', 'NC', 'EU','PU','ET','PT', 'GR') AND SUBSTR(in_rec.OR_MODRAT0,1,2) <> 'CA' AND ABS(in_rec.OR_PUNT0) != 9999 THEN
             VV_IN_SRATIN := 'CRVI'; -- Con Rating VIgente.
       ELSIF substr(in_rec.IN_SUCEPT,1,2) IN ('EM', 'PR', 'PA', 'HO', 'NC', 'EU','PU','ET','PT', 'GR') AND SUBSTR(in_rec.OR_MODRAT0,1,2) = 'CA' AND ABS(in_rec.OR_PUNT0) != 9999 THEN
             VV_IN_SRATIN := 'SR_INC'; -- xcg, 29/03/21 Sin Rating Inconsistente.
       /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA
       ELSIF substr(IN_REC.IN_SUCEPT,1,2) = 'CA' AND SUBSTR(IN_REC.OR_MODRAT0,1,2) = 'CA' AND ABS(IN_REC.OR_PUNT0) != 9999 THEN
             VV_IN_SRATIN := 'CRVI'; -- Con Rating VIgente.
       ELSIF substr(IN_REC.IN_SUCEPT,1,2) = 'CA' AND SUBSTR(IN_REC.OR_MODRAT0,1,2) <> 'CA' AND ABS(IN_REC.OR_PUNT0) != 9999 THEN
             VV_IN_SRATIN := 'CIVI'; -- Con Inconsistencia VIgente. */
       ELSIF SUBSTR(in_rec.IN_SUCEPT,1,5) = 'PFSCP' THEN
             VV_IN_SRATIN := 'CRDE'; -- Con Rating DEpurado
       ELSIF in_rec.IN_SUCEPT = 'PFSUCP' OR (in_rec.IN_SUCEPT = 'PFBLQR' AND ABS(in_rec.OR_PUNT0) != 9999) THEN -- xcg. 25/04/2016. No existe Bloqueo para PF, Con o sin rating en función de este.
             VV_IN_SRATIN := 'CRVI'; -- Con Rating VIgente.
       ELSIF substr(in_rec.IN_SUCEPT,1,2) = 'EF' and in_rec.OR_SITUAC0 = 'D' THEN
             VV_IN_SRATIN := 'CRDE';   -- CON RATING DEPURADO
       ELSIF substr(in_rec.IN_SUCEPT,1,2) = 'EF' and in_rec.OR_RATINT <> 99 THEN
             VV_IN_SRATIN := 'CRVI'; -- CON RATING VIGENTE (EEFF).
       ELSIF in_rec.IN_SUCEPT = 'EFSCSR' THEN
             VV_IN_SRATIN := 'SR'; -- Sin Rating.
       ELSIF in_rec.IN_SUCEPT = 'EFSUCDM' THEN
             VV_IN_SRATIN := 'CEDM';    -- Cédulas Multicedentes
       ELSIF in_rec.IN_SUCEPT IN ('TASUCEP', 'KTSUCEP') or (in_rec.IN_SUCEPT IN ('TANSTE', 'KTNSTE') and ABS(in_rec.OR_PUNTSCO) != 9999) THEN
             VV_IN_SRATIN := 'CSORVI'; -- Con Scoring ORiginal VIgente
       ELSIF in_rec.IN_SUCEPT IN ('TASUSS', 'KTSUSS') or (in_rec.IN_SUCEPT IN ('TANSTE', 'KTNSTE') and ABS(in_rec.OR_PUNTSCO) = 9999) THEN
             VV_IN_SRATIN := 'SSOR'; -- Sin Scoring ORiginal.
/* 04/08/2021 - INI - RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo
       ELSIF (IN_REC.OR_FECOPE >= PN_FECPRO-10000 AND NVL(IN_REC.OR_FECSCO,IN_REC.OR_FECOPE) >= PN_FECPRO-10000) and substr(IN_REC.IN_SUCEPT,1,2) IN ('CO', 'HI') THEN  -- Préstamos Reactivo
             VN_NUMERR:= 42;

             IF (IN_REC.IN_SUCEPT IN ('COSURE','HISURE','COSUDV','HISUDV', 'HIOTRE', 'COOTRE') AND ABS(IN_REC.OR_PUNTSCO) != 9999) THEN
                IF (SUBSTR(IN_REC.IN_SUCEPT, 1, 2) <> CASE
                                                           WHEN IN_REC.IN_SEGMBSINI = '103' THEN 'HI'
                                                           WHEN IN_REC.IN_SEGMBSINI = '104' THEN 'CO'
                                                      END) THEN
                   VV_IN_SRATIN := 'CSIVI'; -- Con Scoring Inconsistente VIgente
                ELSE
                     VV_IN_SRATIN := 'CSORVI';-- Con Scoring ORiginal VIgente
                END IF;
             ELSIF IN_REC.IN_SUCEPT IN ('COSUGL','HISUGL') THEN
                   VV_IN_SRATIN := 'CSGLVI';  -- Con Scoring GLobal VIgente.
                   -- ARM 26/11/2019 - Se marcan como 'SSOR' en lugar de como 'RCURA' (Ex-Refinanciados préstamos sin rating que anteriormente fueron refinanciados y que actualmente
                   --                                  no están recogidos en el censo de refinanciados y no están en periodo de cura. 'HIRCRE', 'CORCRE', 'HIFORE', 'COFORE', 'HIRPRE', 'CORPRE', 'HIRFRE', 'CORFRE')
             ELSIF IN_REC.IN_SUCEPT IN ('COSURE','HISURE','COSUDV','HISUDV', 'HIOTRE', 'COOTRE', 'HIRCRE', 'CORCRE', 'HIFORE', 'COFORE', 'HIRPRE', 'CORPRE', 'HIRFRE', 'CORFRE') AND ABS(nvl(IN_REC.OR_PUNTSCO,9999)) = 9999 THEN
                   VV_IN_SRATIN := 'SSOR'; -- Sin Scoring ORiginal.
             ELSIF IN_REC.IN_SUCEPT IN ('COBARE','HIBARE','COBHRE','HIBHRE','COBSRE','HIBSRE','COBURE','HIBURE','HIBGRE','COBGRE') THEN
                   VV_IN_SRATIN := 'SSBH'; -- Sin Scoring Bolsa Historica.
             ELSIF IN_REC.IN_SUCEPT IN ('COTERE','HITERE') OR (IN_REC.OR_PROCED = 'PRES-DIVIS' AND IN_REC.IN_SUCEPT IN ('COTEDV','HITEDV')) THEN
                   VV_IN_SRATIN := 'SSEM'; --Empleados
             END IF;
       ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('CO', 'HI')
             AND (IN_REC.OR_FECOPE < PN_FECPRO-10000 OR IN_REC.OR_FECSCO < PN_FECPRO-10000)THEN  -- Préstamos Comportamental*/
       ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('CO', 'HI')  THEN
               IF IN_REC.OR_FECOPE > 19000101
               AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) <= 6
                    AND TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                 OR
                   (ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) > 6
                   AND TO_DATE(NULLIF(IN_REC.OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))
               THEN -- Préstamos Comportamental

                   VN_NUMERR:= 69;

                   IF IN_REC.IN_SUCEPT IN ('CONSLI','HINSLI') THEN --Líneas van al STDA por no tener calibración
                         VV_IN_SRATIN := 'SSOL';
                         VV_IN_METODE := 'STDA';
                   ELSIF ABS(IN_REC.OR_PUNTSCO) <> 9999 AND IN_REC.IN_SUCEPT IN ('HISUCEP', 'COSUCEP', 'HINSTE', 'CONSTE') THEN  -- Si tienen Scoring (Puntuación del Scoring informada 'CSORVI')                                                            -- 14/11/2017 --
                         IF (SUBSTR(IN_REC.IN_SUCEPT, 1, 2) <> CASE
                                                                    WHEN IN_REC.IN_SEGMBSINI = '103' THEN 'HI'
                                                                    WHEN IN_REC.IN_SEGMBSINI = '104' THEN 'CO'
                                                               END) THEN
                              VV_IN_SRATIN := 'CSIVI'; --Con Scoring Inconsistente VIgente
                         ELSE
                              VV_IN_SRATIN := 'CSORVI'; -- Con Scoring ORiginal VIgente
                         END IF;
                   ELSE -- Los que no tengan Scoring 'SSOR'
                        VV_IN_SRATIN := 'SSOR';
                   END IF;
                ELSE -- Préstamos Reactivo
                   IF (IN_REC.IN_SUCEPT IN ('COSURE','HISURE','COSUDV','HISUDV', 'HIOTRE', 'COOTRE') AND ABS(IN_REC.OR_PUNTSCO) != 9999) THEN
                      IF (SUBSTR(IN_REC.IN_SUCEPT, 1, 2) <> CASE
                                                                 WHEN IN_REC.IN_SEGMBSINI = '103' THEN 'HI'
                                                                 WHEN IN_REC.IN_SEGMBSINI = '104' THEN 'CO'
                                                            END) THEN
                         VV_IN_SRATIN := 'CSIVI'; -- Con Scoring Inconsistente VIgente
                      ELSE
                           VV_IN_SRATIN := 'CSORVI';-- Con Scoring ORiginal VIgente
                      END IF;
                   ELSIF IN_REC.IN_SUCEPT IN ('COSUGL','HISUGL') THEN
                         VV_IN_SRATIN := 'CSGLVI';  -- Con Scoring GLobal VIgente.
                         -- ARM 26/11/2019 - Se marcan como 'SSOR' en lugar de como 'RCURA' (Ex-Refinanciados préstamos sin rating que anteriormente fueron refinanciados y que actualmente
                         --                                  no están recogidos en el censo de refinanciados y no están en periodo de cura. 'HIRCRE', 'CORCRE', 'HIFORE', 'COFORE', 'HIRPRE', 'CORPRE', 'HIRFRE', 'CORFRE')
                   ELSIF IN_REC.IN_SUCEPT IN ('COSURE','HISURE','COSUDV','HISUDV', 'HIOTRE', 'COOTRE', 'HIRCRE', 'CORCRE', 'HIFORE', 'COFORE', 'HIRPRE', 'CORPRE', 'HIRFRE', 'CORFRE') AND ABS(nvl(IN_REC.OR_PUNTSCO,9999)) = 9999 THEN
                         VV_IN_SRATIN := 'SSOR'; -- Sin Scoring ORiginal.
                   ELSIF IN_REC.IN_SUCEPT IN ('COBARE','HIBARE','COBHRE','HIBHRE','COBSRE','HIBSRE','COBURE','HIBURE','HIBGRE','COBGRE') THEN
                         VV_IN_SRATIN := 'SSBH'; -- Sin Scoring Bolsa Historica.
                   ELSIF IN_REC.IN_SUCEPT IN ('COTERE','HITERE') OR (IN_REC.OR_PROCED = 'PRES-DIVIS' AND IN_REC.IN_SUCEPT IN ('COTEDV','HITEDV')) THEN
                         VV_IN_SRATIN := 'SSEM'; --Empleados
                   END IF;
                END IF;
/* 04/08/2021 - FIN - RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo */
       END IF;

       VN_NUMERR := 50;

        --SMG 18/09 - Inicio
        IF IN_REC.in_segmbsini IN ('003','005','006','009','010','019','027') AND IN_REC.or_entity in (81,8211) AND (IN_REC.or_punt0 = 0 OR (IN_REC.or_puntgrup = 0 and IN_REC.or_pesow > 0)) AND VV_IN_SRATIN = 'CRVI' THEN
           VV_IN_SRATIN := 'BLQR';
        END IF;
        --SMG 18/09 - Fin

       --Para Project Finance, el método será Standard. XCG. Multititularidades sin rating dejan de ir al STDA. 13/04/2021
       IF IN_REC.IN_SUCEPT IN (/*'ETSCSR','PTSCSR',*/ 'PFSCSR') AND VV_IN_SRATIN = 'SR' THEN
          VV_IN_METODE := 'STDA';
       END IF;

       VN_NUMERR:= 51;

       --Para Project Finance depurados, el método será Standard.
       IF substr(IN_REC.IN_SUCEPT,1,2) = 'PF' AND VV_IN_SRATIN = 'CRDE' THEN
          VV_IN_METODE := 'STDA';
       END IF;

       -- Los promotores de CCAA van al método Standard.
       IF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'CR' AND IN_REC.IN_SEGMBSINI NOT IN ('106', '107') THEN
          VV_IN_METODE := 'STDA';
       END IF;
       -- INI HDEV-107790 .JRJ 13/06/2022
       IF VV_OR_CLAVISO = 9050 AND VV_IN_SRATIN = 'BLQR' AND (in_rec.IN_SEGMBSINI NOT IN  ('003', '005', '006', '009', '010', '019', '027') OR (in_rec.IN_SEGMBSINI IN  ('003', '005', '006', '009', '010', '019', '027') AND in_rec.OR_SEGFIC IN ('GR', 'E5', 'P5'))) THEN 
          VV_IN_METODE := 'STDA';
       END IF;
       -- FINHDEV-107790 .JRJ 13/06/2022
       IF VV_IN_SRATIN in ('CIVI', 'CRIDE') THEN    --06/02/2020 - NAV - inconsistentes de CCAA partir de ahora se trataran como STDA
          VV_IN_METODE := 'STDA';
       END IF;

       VN_NUMERR := 52;

       ----- SEGFIC2 ------

       VV_SegFic2 := '?';

       IF (In_Rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','106','107','103','104') AND In_Rec.IN_SEGMBS0 NOT IN ('201', '203', '204') AND (In_Rec.IN_SUCEPT <> '?' or SUBSTR(In_Rec.FI_EPICON, 1, 7) = '0300604')) THEN

            VN_NUMERR := 60;

            IF SUBSTR(IN_REC.IN_SUCEPT, 1, 2) IN ('KT') THEN
               VV_SegFic2:= 'CRP'; --Segrie ficticio de Créditos
            ELSIF SUBSTR(IN_REC.IN_SUCEPT, 1, 2) IN ('TA') THEN
               IF IN_REC.OR_CTAIND IN (4374031700, 4374031800, 4374041200, 4374041500, 4374131500, 4374131600, 4374141500, 4374141600) THEN
                  VV_SegFic2:= 'TP1'; --Segrie ficticio de Tarjetas Financiadas
               ELSE
                    VV_SegFic2:= 'TP0'; --Segrie ficticio de Tarjetas No Financiadas
               END IF;
            ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('ET', 'PT', 'EU', 'PU') THEN
                  IF IN_REC.OR_SITUAC0 = 'D' OR IN_REC.OR_SEGRIE = '?' OR substr(VV_IN_SRATIN,1,2) = 'SR' THEN
                     IF IN_REC.or_indholding in ('1', '3', '4') then
                        VV_SegFic2:= 'PAT';
                     ELSIF IN_REC.in_segmbs2 = '020' then
                           VV_SegFic2:='P3';
                     ELSIF IN_REC.OR_SEGFIC in ('E3', 'E4', 'E5') THEN
                           BEGIN
                             SELECT IN_REC.OR_SEGFIC||DECODE(SUBSTR(DESC_FINAL_OK, 1, 1), 'D', 'DS', 'R')
                                INTO VV_SegFic2
                                FROM BAS_MEN.MAESTRO_CNAES_SECTOR
                               WHERE CNAE93 = IN_REC.OR_IDCNAE;
                           EXCEPTION
                                WHEN OTHERS THEN
                                     VV_SegFic2:= IN_REC.OR_SEGFIC||'R';
                           END;
                     ELSE
                         VV_SegFic2:= IN_REC.OR_SEGFIC;
                     END IF;
                  ELSE
                     VV_SegFic2:= IN_REC.OR_SEGRIE; --El segrie ficticio es el segrie de Multititularidad Con Rating Vigente
                  END IF;
            ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'GR' then -- SEGFIC2 de Grupos, división entre promotores y empresas. 201603. XCG
               IF VV_IN_SRATIN = 'CRVI' THEN
                  VV_SegFic2:= IN_REC.OR_SEGRIE;-- XCG. 25/04/19 grupos vigentes, segfic2 igual a segrie
               ELSIF IN_REC.IN_SEGMBS2 = '020' THEN
                  VV_SegFic2:= 'GRP';
               ELSE
                  VV_SegFic2:= 'GR';
               END IF;
            ELSIF SUBSTR(IN_REC.IN_SUCEPT, 1, 2) = 'HO' THEN
               IF IN_REC.OR_SITUAC0 = 'D' OR IN_REC.OR_SEGRIE = '?' OR substr(VV_IN_SRATIN,1,2) = 'SR' THEN
                  VV_SegFic2:= 'PAT'; --El segrie ficticio guarda las 2 primeras posiciones del modelo de Holding.
               ELSE
                    VV_SegFic2:= IN_REC.OR_SEGRIE;
               END IF;
            ELSIF SUBSTR(IN_REC.IN_SUCEPT, 1, 2) = 'PA' THEN
               IF IN_REC.OR_SITUAC0 = 'D' OR IN_REC.OR_SEGRIE = '?' OR substr(VV_IN_SRATIN,1,2) = 'SR' THEN
                  VV_SegFic2:= 'PAT'; --El segrie ficticio guarda las 2 primeras posiciones del modelo de Patrimoniales.
               ELSE
                    VV_SegFic2:= IN_REC.OR_SEGRIE;
               END IF;
            ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'NC' THEN
               IF IN_REC.OR_SITUAC0 <> 'D' AND IN_REC.OR_SEGRIE <> '?' AND substr(VV_IN_SRATIN,1,2) <> 'SR' THEN
                  VV_SegFic2:= 'NC'||SUBSTR(IN_REC.OR_SEGRIE,2,3); -- Para Ratings Vigentes el segrie ficticio será el segmento de riesgo.
               ELSE
                  IF SUBSTR(IN_REC.OR_SEGFAC,1,1) IN (1,2) THEN /*OR IN_REC.OR_SEGFAC = 31 THEN */ /* TM-1623 - NAV - Para cálculo OR_SEGFIC2 quitamos OR_SEGFAC = 31*/
                     VV_SegFic2:= 'NC2';
                  ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                     VV_SegFic2:= 'NC3';
                  ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 4 THEN
                     VV_SegFic2:= 'NC4';
                  ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 5 THEN
                     VV_SegFic2:= 'NC5';
                  ELSE
                     VV_SegFic2:= 'NC2';
                  END IF;
               END IF;
            ELSIF IN_REC.IN_SEGMBS2 = '020' OR SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'PR' THEN
               VN_NUMERR:= 61;

               IF IN_REC.OR_SITUAC0 <> 'D' AND NVL(IN_REC.OR_SEGRIE, '?') <> '?' and substr(VV_IN_SRATIN,1,2) <> 'SR' THEN
                  VV_SegFic2:= IN_REC.OR_SEGRIE;
               ELSIF VN_VENTAS <> 99 THEN
                  IF NVL(IN_REC.IN_EXISTENCIAS,99) <> 99 THEN
                     IF VN_VENTAS + IN_REC.IN_EXISTENCIAS <= 900000 THEN
                        VV_SegFic2:= 'P1';
                     ELSIF VN_VENTAS + IN_REC.IN_EXISTENCIAS > 900000 AND VN_VENTAS + IN_REC.IN_EXISTENCIAS <= 6000000 THEN
                           VV_SegFic2:='P2';
                     ELSIF VN_VENTAS + IN_REC.IN_EXISTENCIAS > 6000000 AND VN_VENTAS + IN_REC.IN_EXISTENCIAS <= 200000000  THEN
                           VV_SegFic2:='P3';
                     ELSIF VN_VENTAS + IN_REC.IN_EXISTENCIAS > 200000000 THEN
                           VV_SegFic2:='P5';      -- Nuevo tamaño del promotor de corporate. 201603. XCG
                     END IF;
                  ELSIF NVL(IN_REC.IN_EXISTENCIAS,99)= 99 AND NVL(IN_REC.IN_ACTIVO_CIR, 99) <> 99 THEN
                        IF VN_VENTAS + NVL(IN_REC.IN_ACTIVO_CIR,0) <= 900000 THEN
                           VV_SegFic2:='P1';
                        ELSIF VN_VENTAS + NVL(IN_REC.IN_ACTIVO_CIR,0) > 900000 AND VN_VENTAS + NVL(IN_REC.IN_ACTIVO_CIR,0) <= 6000000 THEN
                              VV_SegFic2:='P2';
                        ELSIF VN_VENTAS + NVL(IN_REC.IN_ACTIVO_CIR,0) > 6000000 AND VN_VENTAS + IN_REC.IN_EXISTENCIAS <= 200000000 THEN
                              VV_SegFic2:='P3';
                        ELSIF VN_VENTAS + NVL(IN_REC.IN_ACTIVO_CIR,0) > 200000000 THEN
                              VV_SegFic2:='P5';       -- Nuevo tamaño del promotor de corporate. 201603. XCG
                        END IF;
                  ELSIF NVL(IN_REC.IN_EXISTENCIAS,99) = 99 AND NVL(IN_REC.IN_ACTIVO_CIR,99) = 99 THEN
                        IF IN_REC.OR_SEGFIC IN ('E0', 'E1') THEN
                           VV_SegFic2:='P1';
                        ELSIF IN_REC.OR_SEGFIC = 'E2' THEN
                              VV_SegFic2:='P2';
                        ELSIF IN_REC.OR_SEGFIC = 'E3' THEN /*AND IN_REC.OR_SEGFAC <> 31 THEN */ /* TM-1623 - NAV - Para cálculo OR_SEGFIC2 quitamos OR_SEGFAC = 31*/
                              VV_SegFic2:='P3';
                        ELSIF IN_REC.OR_SEGFIC = 'E4' THEN
                              VV_SegFic2:='P3';
                        ELSIF IN_REC.OR_SEGFIC = 'E5' THEN
                              VV_SegFic2:='P5';     -- Nuevo tamaño del promotor de corporate. 201603. XCG
                        END IF;

                  END IF;
               ELSE
                    IF IN_REC.OR_SEGFIC IN ('E0', 'E1') THEN
                       VV_SegFic2:='P1';
                    ELSIF IN_REC.OR_SEGFIC = 'E2' THEN
                          VV_SegFic2:='P2';
                    ELSIF IN_REC.OR_SEGFIC = 'E3' THEN /*AND IN_REC.OR_SEGFAC <> 31 THEN */ /* TM-1623 - NAV - Para cálculo OR_SEGFIC2 quitamos OR_SEGFAC = 31*/
                          VV_SegFic2:='P3';
                    ELSIF IN_REC.OR_SEGFIC = 'E4' THEN
                          VV_SegFic2:='P3';
                    ELSIF IN_REC.OR_SEGFIC = 'E5' THEN
                          VV_SegFic2:= 'P5';       -- Nuevo tamaño del promotor de corporate. 201603. XCG
                    END IF;
               END IF;
            ELSIF IN_REC.OR_SITUAC0 <> 'D' AND NVL(IN_REC.OR_SEGRIE, '?') <> '?'and substr(VV_IN_SRATIN,1,2) <> 'SR' THEN --XCG, 22/06/20. Inconsistentes, calcular segfic2
               VV_SegFic2:= IN_REC.OR_SEGRIE;
            ELSIF IN_REC.OR_SEGGES = 3 THEN
               IF IN_REC.OR_SEGFAC = 11 THEN
                  VV_SegFic2:= 'E0';
               ELSIF IN_REC.OR_SEGFAC = 12 THEN
                     VV_SegFic2:= 'E1';
               ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN /*OR IN_REC.OR_SEGFAC = 31 THEN */ /* TM-1623 - NAV - Para cálculo OR_SEGFIC2 quitamos OR_SEGFAC = 31*/
                     VV_SegFic2:= 'E2';
               ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
                     VV_SegFic2:= 'E3';
               ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 4 THEN
                     VV_SegFic2:= 'E4';
               ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 5 THEN
                     VV_SegFic2:= 'E5';       -- Nuevo tamaño de la empresa de corporate. 201603. XCG
               ELSE
                     VV_SegFic2:= 'E0';

               END IF;

               VN_NUMERR:= 62;

               if IN_REC.IN_TIPOREG IN ('OXE', 'OX', 'ITOXE', 'MMOXE') then
                  if IN_REC.OR_SEGRIE = '?' or IN_REC.OR_SEGFAC = 0 THEN
                     IF IN_REC.IN_PYME = 'S' THEN
                        VV_SegFic2:= 'E2';
                     ELSE
                          VV_SegFic2:= 'E3';
                     END IF;
                  end if;
               END IF;
            ELSE
               VV_SegFic2:= 'E0'; --Valor por defecto.

               if IN_REC.IN_TIPOREG IN ('OXE', 'OX','ITOXE', 'MMOXE') then
                  if IN_REC.OR_SEGRIE = '?' or IN_REC.OR_SEGFAC = 0 THEN
                     IF IN_REC.IN_PYME = 'S' THEN
                        VV_SegFic2:= 'E2';
                     ELSE
                          VV_SegFic2:= 'E3';
                     END IF;
                  end if;
               END IF;

            END IF;

            VN_NUMERR := 63;

            IF VV_SegFic2 IN ('E3', 'E4', 'NC3', 'NC4', 'E5', 'NC5') THEN  -- Nuevo tamaño de la empresa de corporate. 201603. XCG
               BEGIN
                 SELECT VV_SegFic2||DECODE(SUBSTR(DESC_FINAL_OK, 1, 1), 'D', 'DS', 'R')
                   INTO VV_SegFic2
                   FROM BAS_MEN.MAESTRO_CNAES_SECTOR
                  WHERE CNAE93 = IN_REC.OR_IDCNAE;
               EXCEPTION
                    WHEN OTHERS THEN
                         VV_SegFic2:= VV_SegFic2||'R';
               END;
            END IF;

            VN_NUMERR := 70;

            -- segfic2 para préstamos
            /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo
            IF (IN_REC.OR_FECOPE >= PN_FECPRO-10000 AND NVL(IN_REC.OR_FECSCO,IN_REC.OR_FECOPE) >= PN_FECPRO-10000) AND In_rec.IN_SEGMBSINI IN ('103','104') THEN  -- Tratamiento especifico para identificar el REACTIVO

                 VN_NUMERR := 71;

                 IF VV_IN_SRATIN IN ('REFI','CSORVI') THEN       -- Segfig2 para casos con modelo de scoring. Refinanciados y vigentes.
                     VV_SegFic2 := In_rec.OR_MODSCO;

                 ELSIF VV_IN_SRATIN IN ('SSORR') THEN                         -- Sin Scoring Refinanciados

                     IF (IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30 THEN
                         vC_Origen := 'A';  -- Autónomo
                     ELSE
                          vC_Origen := 'P';     -- Particular
                     END IF;

                     IF In_rec.IN_SEGMBSINI IN ('103') THEN        -- Segfic2 por segmento 103

                        vC_Tipo := 'H';                                 -- Hipotecario

                        IF SUBSTR(IN_REC.OR_IDPERS,1,2) IN ('00','04') THEN
                           vC_Residente := 'R'; -- Residente
                        ELSIF SUBSTR(IN_REC.OR_IDPERS,1,2) IN ('03','05') THEN
                              vC_Residente := 'NR'; -- NO Residente
                              vC_Origen := 'P';
                        ELSE
                             vC_Residente := 'NR';  -- Por defecto No Residente
                             vC_Origen := 'P';
                        END IF;

                        IF vC_Residente = 'R' THEN -- Cliente Residente
                           vC_ClienteR := 'C';
                        ELSE
                             vC_ClienteR := '';
                        END IF;

                        VV_SegFic2 :=  vC_Origen || vC_Tipo || vC_Residente || vC_ClienteR || 'P';

                     ELSIF In_rec.IN_SEGMBSINI IN ('104') THEN        -- Segfic2 por segmento 104

                           vC_Tipo := 'C';  -- Consumo

                           IF IN_REC.OR_DESTPR IN (312,318,136,162,359,360,361,362) THEN
                              vC_Destino := 'A'; -- Auto
                           ELSE
                                vC_Destino := 'RC';
                           END IF;

                           IF vC_Destino = 'A' THEN -- Cliente Destino
                              vC_ClienteD := 'C';
                           ELSE
                                vC_ClienteD := '';
                           END IF;

                           VV_SegFic2 :=  vC_Origen || vC_Tipo || vC_Destino || vC_ClienteD || 'P';

                     END IF;
               ELSE
                    -- ARM 03/12/2018 - segfic2 a 'HI' o 'CO' para el segmento 103 y 104 respectivamente
                    IF In_rec.IN_SEGMBSINI IN ('103') THEN        -- Segfic2 por segmento 103
                       VV_SegFic2 := 'HI' ;
                    ELSIF In_rec.IN_SEGMBSINI IN ('104') THEN        -- Segfic2 por segmento 104
                       VV_SegFic2 :=  'CO';
                    END IF;
               END IF;
            ELSIF In_rec.IN_SEGMBSINI IN ('103','104')
              --AND (IN_REC.OR_FECOPE < PN_FECPRO-10000 OR IN_REC.OR_FECSCO < PN_FECPRO-10000) THEN    -- Tratamiento especifico para identificar el COMPORTAMENTAL
                /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/

            -- segfic2 para préstamos
            IF In_rec.IN_SEGMBSINI IN ('103','104') THEN
                  IF IN_REC.OR_FECOPE > 19000101
                  AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) <= 6
                       AND TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                    OR
                      (ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) > 6
                      AND TO_DATE(NULLIF(IN_REC.OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))
                  THEN -- Tratamiento especifico para identificar el COMPORTAMENTAL

                      VN_NUMERR := 71;

                      vC_Pref_C := 'C'; -- Prefijo por comportamental

                      IF In_rec.IN_SEGMBSINI IN ('103') THEN -- Modelo por segmento
                         vC_Modelo := 'HI';
                      ELSIF In_rec.IN_SEGMBSINI IN ('104') THEN
                         vC_Modelo := 'CO';
                      END IF;

                      IF SUBSTR(IN_REC.OR_IDPERS, 1, 2) IN ('00', '04') THEN  -- Sufijo por residencia
                         vC_Suf_Id_Res := 0; -- Nacional
                      ELSIF SUBSTR(IN_REC.OR_IDPERS, 1, 2) IN ('03', '05') THEN
                         vC_Suf_Id_Res := 1; -- Extranjero
                      ELSE
                         vC_Suf_Id_Res := 1; -- Extranjero por defecto
                     END IF;

                     VV_SegFic2 := vC_Pref_C||vc_Modelo||vC_Suf_Id_Res;

                  ELSE -- Tratamiento especifico para identificar el REACTIVO

                     VN_NUMERR := 72;

                     IF VV_IN_SRATIN IN ('REFI','CSORVI') THEN       -- Segfig2 para casos con modelo de scoring. Refinanciados y vigentes.
                         VV_SegFic2 := In_rec.OR_MODSCO;

                     ELSIF VV_IN_SRATIN IN ('SSORR') THEN                         -- Sin Scoring Refinanciados

                         IF (IN_REC.OR_IDECNO >= 200 AND IN_REC.OR_IDECNO < 300) OR IN_REC.OR_IDECNO = 30 THEN
                             vC_Origen := 'A';  -- Autónomo
                         ELSE
                              vC_Origen := 'P';     -- Particular
                         END IF;

                         IF In_rec.IN_SEGMBSINI IN ('103') THEN        -- Segfic2 por segmento 103

                            vC_Tipo := 'H';                                 -- Hipotecario

                            IF SUBSTR(IN_REC.OR_IDPERS,1,2) IN ('00','04') THEN
                               vC_Residente := 'R'; -- Residente
                            ELSIF SUBSTR(IN_REC.OR_IDPERS,1,2) IN ('03','05') THEN
                                  vC_Residente := 'NR'; -- NO Residente
                                  vC_Origen := 'P';
                            ELSE
                                 vC_Residente := 'NR';  -- Por defecto No Residente
                                 vC_Origen := 'P';
                            END IF;

                            IF vC_Residente = 'R' THEN -- Cliente Residente
                               vC_ClienteR := 'C';
                            ELSE
                                 vC_ClienteR := '';
                            END IF;

                            VV_SegFic2 :=  vC_Origen || vC_Tipo || vC_Residente || vC_ClienteR || 'P';

                         ELSIF In_rec.IN_SEGMBSINI IN ('104') THEN        -- Segfic2 por segmento 104

                               vC_Tipo := 'C';  -- Consumo

                               IF IN_REC.OR_DESTPR IN (312,318,136,162,359,360,361,362) THEN
                                  vC_Destino := 'A'; -- Auto
                               ELSE
                                    vC_Destino := 'RC';
                               END IF;

                               IF vC_Destino = 'A' THEN -- Cliente Destino
                                  vC_ClienteD := 'C';
                               ELSE
                                    vC_ClienteD := '';
                               END IF;

                               VV_SegFic2 :=  vC_Origen || vC_Tipo || vC_Destino || vC_ClienteD || 'P';

                         END IF;
                     ELSE
                          -- ARM 03/12/2018 - segfic2 a 'HI' o 'CO' para el segmento 103 y 104 respectivamente
                          IF In_rec.IN_SEGMBSINI IN ('103') THEN        -- Segfic2 por segmento 103
                             VV_SegFic2 := 'HI' ;
                          ELSIF In_rec.IN_SEGMBSINI IN ('104') THEN        -- Segfic2 por segmento 104
                             VV_SegFic2 :=  'CO';
                          END IF;
                     END IF;
                  END IF;

            END IF;

       END IF;

       VN_NUMERR := 80;

       IF In_Rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') and VV_IN_SRATIN = 'CRDE' and In_Rec.in_segmbs0 not in ('203', '204') THEN
          /* 14/12/2021- FMRR - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos  */
          --and VV_SegFic2 not in ('PA005', 'E5R', 'GR', 'GRP', 'P5', 'E5DS', 'NC5DS', 'NC5R') THEN
          IF 24-(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))) <= 0 THEN
                VV_IN_SRATIN := 'SR_CAD';     -- xcg, 29/03/21 Sin rating caducado por llevar más de 48 meses caducado
          ELSIF substr(VV_SegFic2,1,2) = 'NC' and substr(IN_REC.OR_SEGRIE,1,2) <> IN_REC.OR_SEGFIC
                and not (VV_SegFic2 = 'NC2' and IN_REC.OR_SEGRIE in ('NC2', 'NC1','NC0')) then
                VV_IN_SRATIN := 'SR_INC';     -- Sin Rating Inconsistente
          ELSIF substr(VV_SegFic2,1,2) = 'PA' and substr(VV_SegFic2,1,2) <> substr(IN_REC.OR_SEGRIE,1,2) then
                VV_IN_SRATIN := 'SR_INC';     -- xcg, 29/03/21 Sin Rating Inconsistente
          ELSIF substr(VV_SegFic2,1,2) not in ('PA', 'NC') and VV_SegFic2 <> IN_REC.OR_SEGRIE then
                VV_IN_SRATIN := 'SR_INC';     -- xcg, 29/03/21 Sin Rating Inconsistente
          END IF;
       END IF;

       VN_NUMERR := 85;

       IF VV_IN_SRATIN = 'CRDER' and In_Rec.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN -- xcg, 18/05/21. Para los depurados de refinanciados, como la inconsistencia se hace por tipo rating, segfic2 = segrie
          IF substr(IN_REC.OR_SEGRIE,1,2) = 'PA' THEN VV_SegFic2 := 'PAT';
          ELSE VV_SegFic2 := IN_REC.OR_SEGRIE;
          END IF;
       END IF;

       VN_NUMERR := 86;

       /*INI- NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
       IF in_rec.DESC_FINAL_OK = 'NO SUSCEPTIBLE' AND in_rec.IN_SEGMBS0 <> '201'
       AND (SUBSTR(in_rec.OR_SEGRIE,1,2) IN ('E3','E4', 'E5') OR ((in_rec.OR_SEGRIE = '?' OR SUBSTR(in_rec.OR_SITUAC0,1,1) = 'D') AND SUBSTR(VV_SegFic2,1,2) IN ('E3','E4', 'E5'))) THEN 
          VV_IN_METODE := 'STDA';
       END IF;       
       /*FIN- NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */

       VN_NUMERR := 82;
       
       OUT_REC.OR_IDREG        := IN_REC.OR_IDREG;
       OUT_REC.FI_EADAIRB      := VN_FI_EADAIRB;
       OUT_REC.FI_EADCONAIRB   := VN_FI_EADAIRBCON;
       OUT_REC.FI_CCFAIRB      := (VN_FI_CCFAIRB*VV_UPLIFT_ADDITIONALDRAWINGS);--HDEV-107790 12/05/2022
       OUT_REC.IN_VTAGRU       := VN_VENTAS;
       OUT_REC.IN_VTAGRU_CONS  := VN_VENTAS_CONS;
       OUT_REC.IN_SEGMBS1      := VV_IN_SEGMBS1;
       OUT_REC.IN_SEGMBS       := VV_IN_SEGMBS;
       OUT_REC.FI_SUMEXP       := VN_TOT_EADAIRB;
       --OUT_REC.IN_NUMEMP       := in_rec.IN_NUMEMP;
       OUT_REC.IN_NUMEMP       := VV_NUMEMP;
       OUT_REC.IN_ACTIVO       := VV_ACTIVO;
       OUT_REC.OR_VIDINI       := VN_OR_VIDINI;
       OUT_REC.OR_VIDRES       := VN_OR_VIDRES;
       OUT_REC.IN_ACTIVO_CONS  := VV_ACTIVO_CONS;
       --OUT_REC.IN_NUMEMP_CONS  := in_rec.IN_NUMEMP_CONS;
       OUT_REC.IN_NUMEMP_CONS  := VV_NUMEMP_CONS;
       OUT_REC.IN_SRATIN       := VV_IN_SRATIN;
       OUT_REC.IN_METODE       := VV_IN_METODE;
       OUT_REC.IN_FECMORA      := VV_FECMORA;
       OUT_REC.IN_SUCEPT       := VV_IN_SUCEPT;
       OUT_REC.OR_SEGFIC2      := VV_SegFic2;
       /* INI HDEV-107786 Nuevos calibrados */
       OUT_REC.PORC_USO        := VV_PORC_USO;
       OUT_REC.UPLIFT_ADD      := VV_UPLIFT_ADDITIONALDRAWINGS;
       OUT_REC.EAD_PREVIA      := VV_EAD_PREVIA;
       OUT_REC.LIMITE          := VV_LIMITE;
       OUT_REC.DISPUESTO       := VV_DISPUESTO;
      pipe row(out_rec);

  END LOOP;

EXCEPTION
   WHEN OTHERS THEN

        RAISE_APPLICATION_ERROR(-20000, '** VN_NUMERR:'||VN_NUMERR||' - OR_IDREG:' || VV_ROWID || ' **');

end F_CALCULO_EAD;

end;

/

show errors;


/************************************************************************************/
/* CALCULO DE CCF EAD Exposure at Default                                           */
/************************************************************************************/
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CALCULO_EAD (PV_TABLA     IN  VARCHAR2,
                                         PN_OPC       IN NUMBER,
                                         PN_OPC_DER   IN  NUMBER,
                                         PN_FECPRO    IN  NUMBER,
                                         PN_F         IN  NUMBER,
                                         PV_RET1      IN  VARCHAR2,
                                         PV_RET       OUT VARCHAR2) IS

  VV_ROWID           VARCHAR2(12);
  VN_COUNT           NUMBER(9):=0;
  VN_NUMERR          NUMBER(3);
  VV_MENSAJE         VARCHAR2(255);
  SW_MARCA_DEFAULT   VARCHAR2(4);

---------****************************************************************************/
/************************************************************************************/

PROCEDURE FNC_CALCUL_EAD IS

  v_NRegs NUMBER(12);


BEGIN

/* RMR 04/05/2020 - Inicio - Añadido switch para controlar si el proceso es de contabilidad o de NDoD*/
 VN_NUMERR:= 0;
 BEGIN
 SELECT VALPARM
   INTO SW_MARCA_DEFAULT
   FROM BAS_MEN.parametros_proceso
  WHERE CODCSB     = 81
    AND CODPARM    = '0002'
    AND SECPARM    = '01';
 EXCEPTION
   WHEN OTHERS THEN
       RAISE;
 END;

  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.control_proces (PROCES, DATA_INI, ESTAT)
          VALUES ('CALCULO_EAD '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_COUNT := 0;
  VN_NUMERR:= 2;

---SMG-UPDATES NEGOCIO 16/10-I
  update bas_men.basilea
  set OR_DISPTO = abs(or_dispto),
  OR_DISPTOCON = abs(or_disptoCON)
  where or_nifcif = '777005862612';

  COMMIT;
  VN_NUMERR:= 3;

  update bas_men.basilea
  set FI_ELIMI1 = 'IDRE'
  where or_nifcif = '0825212844' and or_ajuval<0;

  COMMIT;
  VN_NUMERR:= 5;

---SMG-UPDATES NEGOCIO 16/10-F

 DELETE /*+ full(c) parallel (c 8)*/ BAS_MEN.BASILEA c
  WHERE IN_TIPOREG IN ('DN', 'MMDN','RN', 'MMRN', 'DTA', 'CERENTVA')
     OR (IN_TIPOREG = 'FMX' AND FI_TIPEXP = 'OTC');  

 COMMIT;

 VN_NUMERR:= 8;


 UPDATE /*+ parallel (c 8)*/ BAS_MEN.basilea c
    SET FI_ELIMI1 = 'NO'
  where FI_ELIMI1 = 'NETTING';

 COMMIT;

 VN_NUMERR:= 9;

 BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.MAESTRO_FINCA_INMOBILIARIA');
 COMMIT;

 VN_NUMERR:= 10;

 INSERT INTO BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
 SELECT DISTINCT TIPOFI, UPPER(DESCRIPCION), TIPO_FINCA, INMUEBLE, CONSTRUIDA, USO_PROPIO
   FROM DCRPROP_MENSUAL.MAESTRO_FINCA_INMOBILIARIA_SAS
 COMMIT;

 VN_NUMERR:= 15;

 BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.MAESTRO_POOLCCF');
 COMMIT;

 INSERT INTO BAS_MEN.MAESTRO_POOLCCF
 SELECT *
   FROM DCRPROP_MENSUAL.MAESTRO_POOLCCF_SAS;
 COMMIT;

 BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.MAESTRO_CCF_EMPRESAS');
 COMMIT;

 INSERT INTO BAS_MEN.MAESTRO_CCF_EMPRESAS
 SELECT *
   FROM DCRPROP_MENSUAL.MAESTRO_CCF_EMPRESAS_SAS;
 COMMIT;

 BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.MAESTRO_CCF_APLIC_TARJETA');
 COMMIT;

 INSERT INTO BAS_MEN.MAESTRO_CCF_APLIC_TARJETA
 SELECT *
   FROM DCRPROP_MENSUAL.MAESTRO_CCF_APLIC_TARJETA_SAS;
 COMMIT;
 
  VN_NUMERR:= 16;

 BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.CCF_AVALES');

 INSERT INTO BAS_MEN.CCF_AVALES
 SELECT *
   FROM DCRPROP_MENSUAL.CCF_AVALES_SAS;
 COMMIT;

 VN_NUMERR:= 17;

  --Maestro que guarda el dispuesto, el disponible, el concedido y la variable D (disponible/condedido), agrupando por titularitat y solo para céditos.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IMPORTES_CONTRATO');

  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.MAESTRO_IMPORTES_CONTRATO a
  SELECT OR_TITULARITAT, DISPTO, DISBLE, CONCEDIDO, DECODE(CONCEDIDO,0,0, DISBLE/CONCEDIDO) D, SEGMENTO
    FROM ( SELECT /*+ full(d) parallel (d 8)*/
                  DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB) OR_TITULARITAT
                , SUM(OR_DISPTO) DISPTO, SUM(OR_DISBLE) DISBLE, SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
                , DECODE(IN_SEGMBSINI, '002', 'CCAA', '017', 'CCAA', '101', 'CCAA', '102', 'CCAA', 'EMPRESAS') SEGMENTO
             FROM BAS_MEN.BASILEA d
            WHERE OR_TITULARITAT NOT IN (0,9)
              AND (OR_PROCED     = 'INV-C/C-CR'
                  OR (IN_TIPOREG in ('OXC', 'ITOXC', 'MMOXC') AND OR_TIPOPE = 'CR' AND FI_TIPEXP = 'Drawn' AND OR_CTAIND <> 44844200)
                  OR (IN_TIPOREG in ('OXC', 'ITOXC', 'MMOXC') AND OR_TIPOPE = 'PR' AND FI_TIPEXP = 'Undrawn')
                  OR (OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND OR_TIPOPE = 'CR')
                  )
              AND IN_SEGMBSINI  IN ('003','005','006','009','010','019','027','101', '102', '002', '017')
              AND FI_ELIMI1     IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
            GROUP BY DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB)
                   , DECODE(IN_SEGMBSINI, '002', 'CCAA', '017', 'CCAA', '101', 'CCAA', '102', 'CCAA', 'EMPRESAS')
          );
  COMMIT;

VN_NUMERR:= 18;

  --HDEV-107790 Maestro que guarda el dispuesto, el disponible, el concedido  agrupando por contratos para céditos y tarjetas.
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IMPORTE_EMPRESAS');
    INSERT /*+ parallel (a 8)*/ INTO  BAS_MEN.MAESTRO_IMPORTE_EMPRESAS a
    SELECT OR_CLUNICONTR, TIPO,DISPTO, DISBLE, CONCEDIDO
    FROM (SELECT OR_CLUNICONTR, 'PC' TIPO,DISPTO, DISBLE, CONCEDIDO
        FROM ( SELECT /*+ full(d) parallel (d 8)*/
                 OR_CLUNICONTR
                ,SUM(OR_DISPTO) DISPTO
                ,SUM(OR_DISBLE) DISBLE
                ,SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
             FROM BAS_MEN.BASILEA d
            WHERE (OR_PROCED = 'INV-C/C-CR'
                 OR (IN_TIPOREG in ('OXC', 'ITOXC', 'MMOXC') AND OR_TIPOPE = 'CR' AND FI_TIPEXP = 'Drawn' AND OR_CTAIND <> 44844200)
                 OR (IN_TIPOREG in ('OXC', 'ITOXC', 'MMOXC') AND OR_TIPOPE = 'PR' AND FI_TIPEXP = 'Undrawn')
                 OR (OR_PROCED IN ('SINDICDIV', 'CR-DISPONI', 'CR-SINDIC') AND OR_TIPOPE = 'CR')
                 )
              AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
              AND FI_ELIMI1 IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
            GROUP BY OR_CLUNICONTR
            )
         UNION
         SELECT OR_CLUNICONTR, 'TC' TIPO,DISPTO, DISBLE, CONCEDIDO
         FROM ( SELECT /*+ full(e) parallel (e 8)*/
                OR_CLUNICONTR
                ,SUM(OR_DISPTO) DISPTO
                ,SUM(OR_DISBLE) DISBLE
                ,SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
              FROM BAS_MEN.BASILEA e
             WHERE (OR_TIPOPE = 'TC' OR OR_PROCED = 'TARGES')
               AND IN_TIPOREG NOT IN ('OXE', 'OX', 'ITOXE', 'MMOXE')
               AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
               AND FI_ELIMI1 IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
             GROUP BY OR_CLUNICONTR
             )
      );
   COMMIT;

  VN_NUMERR:= 20;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IMPORTES_CONTRATO_OFEX');

  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.MAESTRO_IMPORTES_CONTRATO_OFEX a
  SELECT OR_CTACLI, OR_NUMOFI, DISPTO, DISBLE, CONCEDIDO, DECODE(CONCEDIDO,0,0, DISBLE/CONCEDIDO) D
    FROM ( SELECT /*+ parallel (d 8)*/
                 OR_CTACLI, OR_NUMOFI, SUM(OR_DISPTO) DISPTO, SUM(OR_DISBLE) DISBLE, SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
             FROM BAS_MEN.BASILEA d
            WHERE IN_TIPOREG IN ('OXE', 'OX', 'ITOXE', 'MMOXE')
              AND ( (OR_TIPOPE = 'CR' AND FI_TIPEXP = 'Drawn' AND OR_CTAIND <> 44844200)
                   OR (OR_TIPOPE = 'PR' AND FI_TIPEXP = 'Undrawn')
                  )
              AND FI_ELIMI1 IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
              AND in_segmbsini in ('003','005','006','009','010','019','027','101', '102', '002', '017')
            GROUP BY OR_CTACLI, OR_NUMOFI
          );
  COMMIT;

  VN_NUMERR:= 21;

  --Maestro que guarda el dispuesto, el disponible, el concedido y la variable D (disponible/condedido), agrupando por titularitat y solo para Tarjetas.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IMPORTES_CONTRATO_TARJ');

  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.MAESTRO_IMPORTES_CONTRATO_TARJ a
  SELECT OR_TITULARITAT, DISPTO, DISBLE, CONCEDIDO, DECODE(CONCEDIDO,0,0, DISBLE/CONCEDIDO) D
    FROM ( SELECT /*+ full(d) parallel (d 8)*/
                  DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB) OR_TITULARITAT
                , SUM(OR_DISPTO) DISPTO, SUM(OR_DISBLE) DISBLE, SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
             FROM BAS_MEN.BASILEA d
            WHERE OR_TITULARITAT NOT IN (0,9)
              AND (OR_TIPOPE = 'TC' OR OR_PROCED = 'TARGES')
              AND IN_TIPOREG NOT IN ('OXE', 'OX', 'ITOXE', 'MMOXE')
              AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027','101', '102', '002', '017')
              AND FI_ELIMI1 IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
            GROUP BY DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB)
         );
  COMMIT;

  VN_NUMERR:= 22;

  /* 06/04/2021 - Generamos este nuevo tabla para Tarjetas físicas*/
  --Maestro que guarda el dispuesto y el concedido agrupando por contrato y solo para Tarjetas físicas.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_DISPUESTO_TARJ_FISICAS');

  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.MAESTRO_DISPUESTO_TARJ_FISICAS a
  SELECT /*+ full(d) parallel (d 8)*/
                  OR_CLUNICONTR, SUM(OR_DISPTO) DISPTO, SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
             FROM BAS_MEN.BASILEA d
            WHERE OR_CLUNICONTR NOT IN (0,99999999999999)
              AND (OR_TIPOPE = 'TC' OR OR_PROCED = 'TARGES')
              AND IN_TIPOREG NOT IN ('OXE', 'OX', 'ITOXE', 'MMOXE')
              AND IN_SEGMBSINI IN ('106','107')
              AND FI_ELIMI1 IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
            GROUP BY OR_CLUNICONTR;

  COMMIT;

  VN_NUMERR:= 23;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IMPORTES_TARJ_OFEX');

  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.MAESTRO_IMPORTES_TARJ_OFEX a
  SELECT OR_CTACLI, OR_NUMOFI, DISPTO, DISBLE, CONCEDIDO, DECODE(CONCEDIDO,0,0, DISBLE/CONCEDIDO) D
    FROM ( SELECT /*+ parallel (d 8)*/
                  OR_CTACLI, OR_NUMOFI, SUM(OR_DISPTO) DISPTO, SUM(OR_DISBLE) DISBLE, SUM(OR_DISPTO + OR_DISBLE) CONCEDIDO
             FROM BAS_MEN.BASILEA d
            WHERE IN_TIPOREG IN ('OXE', 'OX', 'ITOXE', 'MMOXE')
              AND OR_TIPOPE = 'TC'
              AND FI_ELIMI1 IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
              AND in_segmbsini in ('003','005','006','009','010','019','027')
            GROUP BY OR_CTACLI, OR_NUMOFI
          );
  COMMIT;

  VN_NUMERR:= 25;

  --Maestro CCF Crédits filtrando los Ajustes. XCG, 31-01-08.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CCF_CREDITS_EAD');

  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.MAESTRO_CCF_CREDITS_EAD a
  SELECT /*+ parallel (d 8)*/
         OR_CLUNICONTR, DECODE(OR_PROCED,'INV-C/C-EX','SI','NO') FI_EXCEDID, SUM(OR_DISPTO) FI_TOTCRE
       , SUM(OR_DISPTO+OR_DISBLE) FI_TOTLIM
    FROM BAS_MEN.BASILEA d
   WHERE IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
     AND FI_ELIMI1    IN ('NO', 'TITACT2', 'RFNEG', 'EQUITY', 'BONTIT', 'CRSUB', 'LINLIQ', 'SWATIT','NETTING', 'SRABS')
     AND IN_TIPOREG   IN ('SA','RX','PX', 'MMSA', 'CESA', 'AVSA', 'IIC-LTA', 'IIC-FBA')         --NAV 18/07/2019 - Añadido - 'AVSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
     AND FI_TIPEXP    <> 'Ajustes'
     AND OR_PROCED    IN ('INV-C/C-EX','INV-C/C-CR')
     --AND IN_INDMOR     = 'NO' -- HDEV-107786 29/06/2022 JRJ 
   GROUP BY OR_CLUNICONTR, DECODE(OR_PROCED,'INV-C/C-EX','SI','NO');
  COMMIT;

  VN_NUMERR:= 26;

  --Tabla para encontrar contratos morosos tengan parte disponible.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.UNDRAWN_MOROSOS');

 INSERT /*+ PARALLEL (c 8)*/ INTO BAS_MEN.UNDRAWN_MOROSOS c
  SELECT /*+ PARALLEL (A 8)*/ DISTINCT OR_CLUNIENT, OR_CLUNIPROD, OR_CLUNICONTR, OR_TITULARITAT, OR_REFOPE, OR_PROCED
    FROM BAS_MEN.BASILEA A
   WHERE IN_INDMOR = 'SI'
     AND OR_TITULARITAT <> 0
     AND OR_PROCED <> 'RISC-PAIS'
     AND OR_CLUNICONTR <> 999999999999999
     AND fi_elimi1 in ('NO', 'RFNEG', 'TITACT2', 'SRABS')
     AND BAS_MEN.SF_Es_Mora_Subjetiva ( A.OR_IDSITUAC, A.OR_SITCON, A.TIPODEFAULT, SW_MARCA_DEFAULT ) = 'N';/* 05/05/2020 RMR Añadidos 2 parametros para la mora subjetiva según nueva DoD*/
  COMMIT;

  VN_NUMERR:= 27;

--  /* 19/08/2021 RMR */
--  BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.EMPLEADOS_MEDIOS_AUX');
--
--  INSERT /*+ parallel (a 8)*/ INTO BAS_MEN.EMPLEADOS_MEDIOS_AUX a
--  SELECT /*+ parallel (d 8)*/ OR_IDPERS, IN_NUMEMP, OR_IDREG, OR_SEGFIC
--    FROM BAS_MEN.BASILEA d
--   WHERE NVL(IN_NUMEMP,0) IN (0, 999999, 111111)
--     AND FI_ELIMI1        IN ('NO', 'NETTING', 'TITACT2', 'SRABS')
--     AND IN_TIPOREG   NOT IN ('DN','RN', 'ITRN', 'ITDN')
--     AND IN_SEGMBSINI     IN ('003','005','006','009','010','019','002','017','027');
--
--  COMMIT;
--
--  IF SUBSTR(PN_FECPRO,5,2) = '06' THEN
--
--         VN_NUMERR:= 35;
--
--         BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EMPLEADOS_MEDIOS');
--
--         INSERT INTO BAS_MEN.MAESTRO_EMPLEADOS_MEDIOS
--           select /*+ full(med) parallel (med 8) */ DISTINCT med.OR_SEGFIC, NUMEMP, PERSONAS, EMPLEADOS_MEDIOS, SUBSTR(PN_FECPRO,1,6)
--             from BAS_MEN.EMPLEADOS_MEDIOS med,
--                (SELECT OR_SEGFIC, SUM(NUMEMP) NUMEMP, SUM(PERSONAS) PERSONAS, SUM(NUMEMP)/SUM(PERSONAS) EMPLEADOS_MEDIOS
--                   FROM (SELECT OR_SEGFIC, SUM(IN_NUMEMP) NUMEMP, COUNT(DISTINCT OR_IDPERS) PERSONAS
--                           FROM (SELECT /*+ full(a)  full(b) parallel (a 8) parallel (b 8) */ DISTINCT a.OR_SEGFIC, a.IN_NUMEMP, a.OR_IDPERS
--                                   FROM BAS_MEN.BASILEA a ,
--                                        BAS_MEN.EMPLEADOS_MEDIOS_aux b
--                                  WHERE NVL(a.IN_NUMEMP,0) NOT IN (0, 999999, 111111)
--                                    AND FI_ELIMI1 IN ('NO', 'NETTING', 'TITACT2', 'SRABS')
--                                    AND IN_TIPOREG NOT IN ('DN','OX', 'OXE','RN', 'ITOXE', 'MMOXE', 'ITDN', 'ITRN')
--                                    and a.or_idreg = b.or_idreg(+)
--                                    and b.or_idreg is null
--                                    AND IN_SEGMBSINI IN ('003','005','006','009','010','019','002','017','027'))
--                                  GROUP BY OR_SEGFIC
--                         UNION
--                         SELECT OR_SEGFIC, SUM(IN_NUMEMP) NUMEMP, COUNT(DISTINCT OR_CTACLI) PERSONAS
--                           FROM (SELECT /*+ full(a)  full(b) parallel (a 8) parallel (b 8) */ DISTINCT A.OR_SEGFIC, a.OR_CTACLI, A.OR_NUMOFI, a.IN_NUMEMP
--                                  FROM BAS_MEN.BASILEA a ,
--                                       BAS_MEN.EMPLEADOS_MEDIOS_aux b
--                                 WHERE NVL(a.IN_NUMEMP,0) NOT IN (0, 999999, 111111)
--                                   AND FI_ELIMI1 IN ('NO', 'NETTING', 'TITACT2', 'SRABS')
--                                   AND IN_TIPOREG IN ('OX', 'OXE', 'ITOXE', 'MMOXE')
--                                   and a.or_idreg = b.or_idreg(+)
--                                   and b.or_idreg is null
--                                   AND IN_SEGMBSINI IN ('003','005','006','009','010','019','002','017','027'))
--                                 GROUP BY OR_SEGFIC)
--                  GROUP BY OR_SEGFIC) aux
--           WHERE med.OR_SEGFIC = aux.OR_SEGFIC
--           ORDER BY OR_SEGFIC;
--
--         COMMIT;
--
--  END IF;
--
--  VN_NUMERR:= 40;
--
-- BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.EMPLEADOS_MEDIOS');
--
-- insert /*+ parallel(dst 8) */ into BAS_MEN.EMPLEADOS_MEDIOS dst
-- select /*+ parallel(a 8) */  a.OR_IDPERS, a.IN_NUMEMP, b.EMPLEADOS_MEDIOS, a.OR_IDREG, a.OR_SEGFIC, b.PERSONAS, b.NUMEMP
--   from BAS_MEN.EMPLEADOS_MEDIOS_AUX a,
--        BAS_MEN.MAESTRO_EMPLEADOS_MEDIOS b
-- where a.OR_SEGFIC = b.OR_SEGFIC
-- and a.or_segfic <> '?';
--
--  COMMIT;

  VN_NUMERR:= 41;


-- 201906 - Suma de exposici¢n STDA agrupando por id_cliente.

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUMEAD');

  INSERT /*+ parallel (d 8) */  INTO BAS_MEN.MAESTRO_SUMEAD d
    SELECT /*+ full(a) parallel (a 8) */
         CASE WHEN NVL(A.IN_GRUP_IDPER,'?') <> '?' THEN
                  'GRUP:' || A.IN_GRUP_IDPER
              WHEN A.OR_NUMOFI IN (800,801,813,821,825) AND A.OR_TITULARITAT = 0 THEN
                  'OFEX:' || (A.OR_NUMOFI * 10000000000 + A.OR_CTACLI)
              WHEN A.OR_ENTITY = 9109 AND NVL(A.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                  'ANDO:' || A.OR_IDPERS
              WHEN A.OR_PERSONSCPCB IN (816,831,833) AND A.OR_PROCED <> 'FACTORING'  and ( A.IN_SEGMBSINI in ('002','017') ) THEN
                  'TITU:' || A.OR_TITUSCPCB
              WHEN A.OR_TITULARITAT NOT IN (0,9,99) THEN
                  'TITU:' || A.OR_TITULARITAT
              WHEN NVL(A.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                  'NIFS:' || A.OR_NIFCIF
              ELSE
                  'REGI:' || A.OR_IDREG
         END ID_CLIENTE,
         SUM(CASE WHEN FI_ELIMI1 IN ('NO','TITACT2','RFNEG','SWATIT','CRSUB','BONTIT','LINLIQ','EQUITY', 'SRABS')
                  AND NOT ( (OR_TIPGAR IN ('HC','HV','HR','HX') OR OR_TIPGAR='?' And OR_CODGAR= 'GR 11108')
                  AND nvl(TIPO_FINCA, '?') = 'RES'
                  AND nvl(INMUEBLE, '?') = 'INMUEBLE'
                  AND nvl(USO_PROPIO, '?') = 'SI')
                  AND FI_TIPEXP = 'Drawn'
                THEN OR_DISPTO
             ELSE 0
          END) FI_SUMEAD
      FROM BAS_MEN.BASILEA A,
           BAS_MEN.MAESTRO_FINCA_INMOBILIARIA B
     WHERE A.OR_TIPOFI = B.TIPOFI(+)
     GROUP BY CASE WHEN NVL(A.IN_GRUP_IDPER,'?') <> '?' THEN
                       'GRUP:' || A.IN_GRUP_IDPER
                   WHEN A.OR_NUMOFI IN (800,801,813,821,825) AND A.OR_TITULARITAT = 0 THEN
                        'OFEX:' || (A.OR_NUMOFI * 10000000000 + A.OR_CTACLI)
                   WHEN A.OR_ENTITY = 9109 AND NVL(A.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                       'ANDO:' || A.OR_IDPERS
                   WHEN A.OR_PERSONSCPCB IN (816,831,833) AND A.OR_PROCED <> 'FACTORING'  and ( A.IN_SEGMBSINI in ('002','017') ) THEN
                       'TITU:' || A.OR_TITUSCPCB
                   WHEN A.OR_TITULARITAT NOT IN (0,9,99) THEN
                       'TITU:' || A.OR_TITULARITAT
                   WHEN NVL(A.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                       'NIFS:' || A.OR_NIFCIF
                   ELSE
                       'REGI:' || A.OR_IDREG
              END;

    commit;

  VN_NUMERR:= 42;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUSCEPTIBILIDAD');

  INSERT into BAS_MEN.MAESTRO_SUSCEPTIBILIDAD
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_SUSCEPTIBILIDAD_SAS;

  COMMIT;

  VN_NUMERR:= 43;

  --Creación de la tabla para obtener el método
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_METODE');

  insert /*+ parallel (i 8) */ into BAS_MEN.TEMP_METODE i
       SELECT /*+ full(a) parallel (a 8) */
              OR_IDREG,
              /* 19/08/2021 RMR se añade la condición de Método AIRB para lo no susceptible con rating vigente*/
              CASE
                  /*when OR_PROCED = 'LEASING' AND OR_CLUNIPROD = 'RE' then 'STDA' --XCG, el renting de leasing va al stda. 14/07/2021 -- 27/01/2022 - NAV - HDEV-106701- Queremos quitar dicha restricción y que los registros vayan al método que les toque. */
                  when IN_INDSUC = 'SI' and in_segmbsini in ('003', '005', '006', '009', '010', '019', '027', '002', '017', '101', '102', '018','021','028','029','034', '007', '103', '104', '106', '107') then 'AIRB'
                  when b.IN_METODE = 'AIRB' and or_punt0 <> 9999 and in_sratin <> 'SR' and in_segmbsini in ('003', '005', '006', '009', '010', '019', '027', '002', '017', '101', '102') and in_segmbs0 NOT IN ('203', '204') and nvl(or_situac0, 'D') <> 'D'
                     and (nvl(substr(a.in_sucept,1,2), '?') not in ('?', 'NC') OR SUBSTR(FI_EPICON, 1, 7) = '0300604') 
                     and not (cnae.DESC_FINAL_OK is not null and (SUBSTR(A.OR_SEGRIE,1,2) IN ('E3','E4', 'E5') OR ((A.OR_SEGRIE = '?' or SUBSTR(A.OR_SITUAC0,1,1) = 'D') AND SUBSTR(A.OR_SEGFIC,1,2) IN ('E3','E4', 'E5'))))
                         then 'AIRB' /* NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
                  when b.IN_METODE = 'AIRB' and or_ratint <> 99 and in_segmbsini in ('018','021','028','029','034', '007') and nvl(or_situac0, 'D') <> 'D' and (nvl(a.in_sucept, '?') <> '?' OR SUBSTR(FI_EPICON, 1, 7) = '0300604') then 'AIRB' -- se añade el hecho de que tenga mapa de uso. XCG, 18/04/18
                  when IN_INDSUC = 'NO' then 'STDA'
                  when (IN_SEGMBSINI IN ('001', '004', '008', '011', '012', '013', '014', '015', '016', 'XXX', 'XX1', 'XX2', 'XX3', '022',
                                         '023', '024', '025', '026', '030', '031', '032', '033', '035', '036', '037', '038', '039', '040', '045', 'XX4', '?')
                    OR (IN_SEGMBSINI IN ('002','017','101','102') AND IN_SEGMBS2 = '020')
                    OR IN_SEGMBS0 = '202'
                    OR IN_SEGMBS0 = '203'
                    OR IN_SEGMBS0 = '204'
                    OR IN_TIPOREG IN ('DX', 'SX', 'IN', 'DI', 'SI', 'SD', 'FC', 'DC', 'AJ', 'FA', 'FFD', 'FF', 'REN', 'FMX')) then 'STDA'
               END AS METODE,
              A.IN_SUCEPT AS IN_SUCEPT,
              A.IN_SUCEPT AS SUCEPT_NEW,
              or_punt0, in_segmbsini, or_ratint, or_situac0, in_segmbs0, in_segmbs2, in_tiporeg, fi_epicon
         FROM BAS_MEN.BASILEA A,
              BAS_MEN.MAESTRO_SUSCEPTIBILIDAD B,
              (select cnae93, DESC_FINAL_OK from BAS_MEN.MAESTRO_CNAES_SECTOR where DESC_FINAL_OK = 'NO SUSCEPTIBLE') cnae /* NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
        WHERE case when IN_SEGMBSINI IN ('103', '104')
                       and IN_REFINAN = 1
                       /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo
                       and (OR_FECOPE >= PN_FECPRO-10000 AND NVL(OR_FECSCO,OR_FECOPE) >= PN_FECPRO-10000) */
                       and (OR_FECOPE > 19000101
                          AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) <= 6
                               AND TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD') >= add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                            OR
                              (ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) > 6
                               AND TO_DATE(NULLIF(OR_FECOPE,10101),'YYYYMMDD') >= add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))))
                       and nvl(a.IN_SUCEPT, '?') <> '?' then SUBSTR(a.IN_SUCEPT,1,2)||'RF'||SUBSTR(a.IN_SUCEPT,5)
                   else a.in_sucept
               end = B.IN_SUCEPT(+)
          AND (A.FI_ELIMI1 IN ('NO','RFNEG','NETTING','BONTIT', 'LINLIQ','CRSUB','SWATIT', 'TITACT2', 'SRABS', 'ACCBS', 'SOBFASEADO', 'STSORI') or SUBSTR(FI_EPICON, 1, 7) = '0300604')
          AND DECODE(NVL(A.OR_IDCNAEREL, 0), 0, A.OR_IDCNAE, 99999, A.OR_IDCNAE, A.OR_IDCNAEREL) = cnae.CNAE93(+);

  COMMIT;

  VN_NUMERR:= 45;

  -- Creación de las tablas para obtener los bloqueos

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CLAVISO_BLOQUEO');

  insert /*+ parallel (BLQ 4) */  into BAS_MEN.CLAVISO_BLOQUEO BLQ
  SELECT /*+ full(a) parallel (a 4) */ 'BLOQUEO' TIPO,
         max(or_claviso) keep (dense_rank FIRST order by or_titularitat, or_dispto+or_disble+or_futurs+or_repos+or_avales+or_ajuval desc) CLAVE,
         OR_TITULARITAT,
         0 EAD
    FROM BAS_MEN.BASILEA a
   WHERE SUBSTR(IN_SUCEPT,3,5) = 'BLQR'
     and OR_TITULARITAT <> 0
     and or_claviso <> 9999999999
     group by or_titularitat;

  commit;

  VN_NUMERR:= 46;

   insert /*+ parallel (BLQ 4) */  into BAS_MEN.CLAVISO_BLOQUEO_SCPCB BLQ
   SELECT /*+ full(a) parallel (a 4) */ OR_TITUSCPCB,
          max(or_claviso) keep (dense_rank FIRST order by OR_TITUSCPCB, or_dispto+or_disble+or_futurs+or_repos+or_avales+or_ajuval desc) CLAVE
     FROM BAS_MEN.BASILEA a
    WHERE OR_TITUSCPCB <> 0
      and SUBSTR(IN_SUCEPT,3,5) = 'BLQR'
      and or_claviso <> 9999999999
      and in_segmbsini in ('002', '017')
      group by OR_TITUSCPCB;

  commit;

  VN_NUMERR:= 47;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EAD');

  -- /************************************************************************************/
  -- /* LLAMADA A LA FUNCION                                                             */
  -- /************************************************************************************/
  insert /*+ PARALLEL (X 8) */ into BAS_MEN.MAESTRO_EAD X (X.OR_IDREG, X.FI_EADAIRB, X.FI_EADCONAIRB, X.FI_CCFAIRB, X.IN_VTAGRU, X.IN_VTAGRU_CONS,
        X.IN_NUMEMP, X.IN_ACTIVO, X.OR_VIDINI, X.OR_VIDRES, X.IN_SEGMBS, X.IN_SEGMBS1, X.FI_SUMEXP, X.IN_ACTIVO_CONS, X.IN_NUMEMP_CONS,
        X.IN_SRATIN, X.IN_METODE, X.IN_FECMORA, X.IN_SUCEPT, X.OR_SEGFIC2,
        X.PORC_USO, X.UPLIFT_ADD, X.EAD_PREVIA, X.LIMITE, X.DISPUESTO  )
----------------------------------------------------------
 select CUR.OR_IDREG, CUR.FI_EADAIRB, CUR.FI_EADCONAIRB, CUR.FI_CCFAIRB, CUR.IN_VTAGRU, CUR.IN_VTAGRU_CONS,
        CUR.IN_NUMEMP, CUR.IN_ACTIVO, CUR.OR_VIDINI, CUR.OR_VIDRES, cur.IN_SEGMBS, cur.IN_SEGMBS1, cur.FI_SUMEXP, cur.IN_ACTIVO_CONS, CUR.IN_NUMEMP_CONS,
        CUR.IN_SRATIN, CUR.IN_METODE, CUR.IN_FECMORA, CUR.IN_SUCEPT, CUR.OR_SEGFIC2,
        CUR.PORC_USO, CUR.UPLIFT_ADD, CUR.EAD_PREVIA, CUR.LIMITE, CUR.DISPUESTO
  from table(BAS_MEN.CALCULO_EAD.F_CALCULO_EAD(cursor(SELECT /*+ full(b) PARALLEL (B 8) parallel (s 8) parallel (s2 8) */ distinct
                      b.or_idreg, b.in_segmbs, b.or_tipope, b.or_titularitat, or_entity, or_indholding, IN_FECMORA, OR_CLAVISO, OR_INDHOLDINGREL, IN_INDMOR,
                      DECODE(NVL(b.OR_TITUSCPCB,0), 0, b.OR_TITULARITAT, b.OR_TITUSCPCB) AS IN_TITULFIN, OR_FECALTBLO, IN_REFINAN, OR_MODRAT0, OR_IDCNAEREL, OR_SEGRIE,
                      OR_FECSCO, FI_MESCURA, b.OR_SITUAC0, or_modsco, OR_PUNTSCO, b.OR_PUNT0, b.or_puntgrup, IN_EXISTENCIAS, IN_PYME, OR_IDCNAE, b.OR_RATINT, IN_ACTIVO_CIR, OR_IDECNO, OR_DESTPR,
                      b.in_tiporeg, b.or_proced, b.or_vidres, b.or_vidini, b.or_clunicontr, b.or_feccar, b.or_fecope, b.in_segmbs2,
                      b.fi_tipexp, NVL (b.or_fairva, 0) or_fairva, b.or_epiind, b.fi_epicon, NVL (b.or_fairvacon, 0) or_fairvacon, NVL (b.in_fairvabo, 0) in_fairvabo,
                      b.or_segges, b.or_disble, b.or_tipava, b.or_tipgar, b.or_segfic, or_tipopr,
                      (b.or_dispto + b.or_disble + b.or_avales + b.or_futurs + b.or_repos + b.or_ajuval) total,
                      (b.or_disptocon + b.or_disblecon + b.or_avalescon + b.or_futurscon + b.or_reposcon + b.or_ajuvalcon) totalcon,
                      b.in_segmbs0, b.or_ctaind, b.in_segmbsini, NVL (b.in_fairvabocon,0) in_fairvabocon,
                      NVL(c.concedido, NVL (e.concedido, b.OR_DISPTO + b.OR_DISBLE)) concedido_cred, b.or_dispto,
                      NVL(d.concedido, NVL (f.concedido, b.OR_DISPTO + b.OR_DISBLE)) concedido_tarj, in_vtagru, in_vtagru_cons,
                      or_segfac, NVL(s.origen, NVL(S2.ORIGEN, 'SIN ORIGEN')) origen
                      /* case when NVL(B.IN_NUMEMP_CONS,0) in (0,999999, 111111) then
                                                                             case when numemp_med > 0 then numemp_med
                                                                             else b.in_numemp
                                                                             end
                          else B.IN_NUMEMP_CONS
                      end as IN_NUMEMP_CONS,
                      NVL(numemp_med, b.in_numemp) numemp */
                      , CASE WHEN NVL(B.IN_NUMEMP_CONS,999999) in (999999, 111111) AND b.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN
                                  CASE WHEN B.IN_NUMEMP NOT IN (999999, 111111) THEN B.IN_NUMEMP
                                       ELSE 251
                                  END
                             ELSE B.IN_NUMEMP_CONS
                         END IN_NUMEMP_CONS
                      , CASE WHEN NVL(B.IN_NUMEMP,999999) in (999999, 111111) AND b.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN 251
                             ELSE B.IN_NUMEMP
                         END IN_NUMEMP
                      , IN_ACTIVO, OR_CLUNICUENT,
                      IN_SEGMBS1, b.IN_ACTIVO_CONS, b.or_numofi, fi.TIPO_FINCA, b.IN_GRUP_IDPER, b.OR_IDPERS, b.OR_CTACLI, fi.INMUEBLE, fi.USO_PROPIO,
                      case when b.FI_TIPEXP = 'Undrawn' and mor.OR_CLUNICONTR is not null then
                           'SI'
                           else 'NO'
                      end as MOROSO,
                      CASE WHEN NVL(B.IN_GRUP_IDPER,'?') <> '?' THEN
                               'GRUP:' || B.IN_GRUP_IDPER
                           WHEN B.OR_NUMOFI IN (800,801,813,821,825) AND B.OR_TITULARITAT = 0 THEN
                               'OFEX:' || (B.OR_NUMOFI * 10000000000 + B.OR_CTACLI)
                           WHEN B.OR_ENTITY = 9109 AND NVL(B.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                               'ANDO:' || B.OR_IDPERS
                           WHEN B.OR_PERSONSCPCB IN (816,831,833) AND B.OR_PROCED <> 'FACTORING'  and ( B.IN_SEGMBSINI in ('002','017') ) THEN
                               'TITU:' || B.OR_TITUSCPCB
                           WHEN B.OR_TITULARITAT NOT IN (0,9,99) THEN
                               'TITU:' || B.OR_TITULARITAT
                           WHEN NVL(B.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                               'NIFS:' || B.OR_NIFCIF
                           ELSE
                               'REGI:' || B.OR_IDREG
                       END ID_CLIENTE,
                       nvl(met.metode, '?') in_metode, --nvl(met.sucept_new, b.in_sucept)
                       b.in_sucept,
                       B.OR_PESOW, --SMG 14/10
                       b.or_nifcif, /* RMR 11/03/2020 Añadido nifcif para comprobar caso promontoria */
                       b.or_fecpun0,
                       case when NVL(con.ME_CONCEDIDO_EU, 0) = 0 THEN
                                tarj.concedido
                           else con.ME_CONCEDIDO_EU
                       end AS ME_CONCEDIDO_EU,
                       tarj.dispto as dispto_tarj,
                       b.or_disptocon,
                       b.or_disblecon,
                       B.OR_SEGFIC2,
                       DESC_FINAL_OK /* NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
                 FROM BAS_MEN.basilea b
                 LEFT JOIN BAS_MEN.maestro_importes_contrato c
                   ON ( c.or_titularitat=DECODE (or_tituscpcb, NULL, b.or_titularitat, 0, b.or_titularitat, or_tituscpcb))
                 LEFT JOIN BAS_MEN.maestro_importes_contrato_ofex e
                   ON (e.or_ctacli=b.or_ctacli
                       AND  e.or_numofi=b.or_numofi)
                 LEFT JOIN BAS_MEN.maestro_importes_contrato_tarj d
                   ON (d.or_titularitat=DECODE (or_tituscpcb, NULL, b.or_titularitat, 0, b.or_titularitat, or_tituscpcb))
                 LEFT JOIN BAS_MEN.maestro_importes_tarj_ofex f
                   ON (f.or_ctacli= b.or_ctacli
                        AND f.or_numofi =b.or_numofi)
                 LEFT JOIN BAS_MEN.maestro_ventas s
                   ON (S.cif_filial=b.or_nifcif )
                 LEFT JOIN BAS_MEN.maestro_ventas s2
                   ON (S2.cif_filial=b.or_nifcifIBM )
                     LEFT JOIN BAS_MEN.MAESTRO_FINCA_INMOBILIARIA FI
                   ON (fi.TIPOFI=b.OR_TIPOFI)
                 LEFT JOIN BAS_MEN.UNDRAWN_MOROSOS MOR
                   ON (mor.OR_CLUNIENT= b.OR_CLUNIENT
                       AND mor.OR_CLUNIPROD= b.OR_CLUNIPROD
                       AND mor.OR_CLUNICONTR= b.OR_CLUNICONTR
                       AND mor.OR_TITULARITAT=b.OR_TITULARITAT )
                 LEFT JOIN BAS_MEN.TEMP_METODE met
                   ON (met.or_idreg=b.or_idreg)
                 LEFT JOIN (select distinct ID_CONTRATO as OR_CLUNICONTR , ME_CONCEDIDO_EU
                         from BAS_MEN.CAL_FR_EAD_CONCEDID
                          where id_tipo_producto = 'TA')      con /* 25/03/2021 RMR MoC en CCF */
                   ON (con.OR_CLUNICONTR=b.OR_CLUNICONTR )
                 LEFT JOIN BAS_MEN.MAESTRO_DISPUESTO_TARJ_FISICAS  tarj  /* 06/04/2021 - Añadimos este nuevo tabla para Tarjetas físicas */
                   ON (tarj.OR_CLUNICONTR=b.OR_CLUNICONTR)
                 LEFT JOIN (select cnae93, DESC_FINAL_OK from BAS_MEN.MAESTRO_CNAES_SECTOR where DESC_FINAL_OK = 'NO SUSCEPTIBLE') cnae /* NAV 25/05/2022 - HDEV-147466 - cnae no susceptibles a STDA */
                   ON (DECODE(NVL(B.OR_IDCNAEREL, 0), 0, b.OR_IDCNAE, 99999, b.OR_IDCNAE, b.OR_IDCNAEREL) = cnae.CNAE93)
           ),PN_FECPRO)) cur;

  COMMIT;

  VN_NUMERR:= 50;

  -- Tabla con titularidades que tienen más de un segmento de pymes. Nos quedamos con el menor valor.

  BAS_MEN.FNC_TRUNCATE_TABLE('bas_men.duplis_segmbs1');

  insert into bas_men.duplis_segmbs1
   SELECT   /*+ FULL (Bas) full(dups) PARALLEL (Bas 8) PARALLEL (DupS 8) */
                      bas.or_titularitat, COUNT (DISTINCT dups.in_segmbs1) cuenta,
                      MIN (DECODE (dups.in_segmbs1,
                                   '?', bas.in_segmbsini,
                                   dups.in_segmbs1
                                  )
                          ) segmbs1_ok
                 FROM bas_men.basilea bas, bas_men.maestro_ead dups
                WHERE dups.or_idreg = bas.or_idreg
                  AND bas.in_segmbsini IN
                         ('003', '005', '006', '009', '010', '019', '027',
                          '002', '017')
                  AND bas.or_titularitat <> 0
                  AND bas.fi_elimi1 IN ('NO', 'EQUITY', 'TITACT2', 'RFNEG', 'SRABS')
             GROUP BY bas.or_titularitat
               HAVING COUNT (DISTINCT dups.in_segmbs1) > 1;

  commit;

  VN_NUMERR:= 51;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SEGMENTACION_PYMES');

  INSERT /*+ parallel (py 8) */ into BAS_MEN.SEGMENTACION_PYMES PY
    SELECT   /*+ full(BAct) full(spy) PARALLEL (BAct 8) PARALLEL (SPy 8) */
            spy.or_idreg, bact.or_titularitat,
            DECODE (segmbs1_ok,
                    '500', segmbs1_ok,
                    '501', segmbs1_ok,
                    '?'
                   ) AS segmbs1_act_ok,
            in_segbs AS segmbs_act_ok
       FROM bas_men.duplis_segmbs1 ract,
            bas_men.basilea bact,
            bas_men.maestro_ead spy,
            bas_men.maestro_segmentos seg
      WHERE bact.or_titularitat = ract.or_titularitat
        AND spy.or_idreg = bact.or_idreg
        --AND segmbs1_ok = seg.in_segmbsini
        AND CASE WHEN BACT.IN_SEGMBS0 IN ('201','202','203','204') THEN BACT.IN_SEGMBS0 -- I - RMR 23/10/2019 Se estaba sobreescribiendo el IN_SEGMBS, de Derechos de cobro al no comprobar el IN_SEGMBS0
                 ELSE segmbs1_ok
            END = seg.in_segmbsini                                                      -- F - RMR 23/10/2019 Se estaba sobreescribiendo el IN_SEGMBS, de Derechos de cobro al no comprobar el IN_SEGMBS0
        AND bact.in_segmbsini IN
               ('003', '005', '006', '009', '010', '019', '027', '002', '017')
   ORDER BY or_titularitat;

  commit;

  VN_NUMERR:= 52;

   MERGE /*+ full(dst) parallel(src) parallel (dst 8) */ INTO BAS_MEN.MAESTRO_EAD dst
     USING BAS_MEN.SEGMENTACION_PYMES src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
     UPDATE
        SET dst.IN_SEGMBS = src.IN_SEGMBS,
            dst.IN_SEGMBS1 = src.IN_SEGMBS1;

    commit;

    VN_NUMERR:= 53;
  -- estadisticas HDEV-107790    08/02/2022
 dbms_stats.gather_table_stats('BAS_MEN', 'BASILEA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

     MERGE /*+ full(dst) parallel(src 8) parallel (dst 8) */ INTO BAS_MEN.basilea dst
     USING BAS_MEN.MAESTRO_EAD src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
     UPDATE
        SET dst.IN_NUMEMP = src.IN_NUMEMP,
            dst.IN_NUMEMP_CONS = src.IN_NUMEMP_CONS,
            dst.IN_ACTIVO = src.IN_ACTIVO,
            dst.IN_ACTIVO_CONS = src.IN_ACTIVO_CONS,
            dst.FI_CCFAIRB = src.FI_CCFAIRB,
            dst.FI_EADCONAIRB = src.FI_EADCONAIRB,
            dst.FI_EADAIRB = src.FI_EADAIRB,
            dst.IN_VTAGRU_CONS = src.IN_VTAGRU_CONS,
            dst.IN_VTAGRU = src.IN_VTAGRU,
            dst.OR_VIDINI = src.OR_VIDINI,
            dst.OR_VIDRES = src.OR_VIDRES,
            dst.IN_SEGMBS = src.IN_SEGMBS,
            dst.IN_SEGMBS1 = src.IN_SEGMBS1,
            dst.FI_SUMEXP = src.FI_SUMEXP,
            dst.IN_SRATIN  = src.IN_SRATIN,
            dst.in_METODE  = src.in_METODE,
            dst.IN_FECMORA = src.IN_FECMORA,
            dst.in_SUCEPT  = src.in_SUCEPT,
            dst.OR_SEGFIC2 = src.OR_SEGFIC2,
            dst.in_metode_1 = '?'; -- XCG, inicializamos el método 1.

    commit;
-- estadisticas HDEV-107790    08/02/2022
      dbms_stats.gather_table_stats('BAS_MEN', 'BASILEA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    VN_NUMERR:= 55;

---------------------------------- CONTAGIO MORA -----------------------------------------------

    DELETE BAS_MEN.NIFS_NO_CONTAGIAR WHERE ID_MES_AAAAMM = SUBSTR(PN_FECPRO,1,6);
    COMMIT;

    INSERT INTO BAS_MEN.NIFS_NO_CONTAGIAR
    SELECT  S.*, substr(PN_FECPRO,1,6) FROM DCRPROP_MENSUAL.NIFS_NO_CONTAGIAR_SAS S;
    COMMIT;

    VN_NUMERR:= 60;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.Contagio_MORA');


    INSERT INTO BAS_MEN.Contagio_MORA
    --Inicio cambios en Contagio MORA para evaluar la suma de saldos por TITULARITAT  - MR 28/5/19
      SELECT /*+ full(a) parallel (a 8) */ A.OR_IDREG, 'Empresas_TIT' AS ORIGEN
         FROM BAS_MEN.BASILEA A
           , (SELECT /*+ full(c) parallel (c 8) */ DISTINCT C.OR_TITULARITAT
                FROM BAS_MEN.BASILEA           c
                   , (SELECT DISTINCT OR_TITULARITAT FROM BAS_MEN.NIFS_NO_CONTAGIAR WHERE ID_MES_AAAAMM = substr(PN_FECPRO,1,6)) D
               WHERE IN_INDMOR           = 'SI'
                 AND C.OR_TITULARITAT NOT IN (0,9)
                 AND IN_SEGMBSINI       IN ('003','005','006','009','010','019','027')
                 AND C.OR_TITULARITAT  = D.OR_TITULARITAT(+)
                 AND D.OR_TITULARITAT IS NULL
                 AND IN_TIPOREG     NOT IN ('OXE', 'OX', 'MMOXE')
                 AND OR_PROCED  NOT IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC','ADJUDICADO')         --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
            --NAV - 24/07/2019 - Agrupamos por OR_TITULARITAT y sumamos saldos
               GROUP BY C.OR_TITULARITAT
              HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
            --NAV - 24/07/2019 - FIN
             ) B
         WHERE A.OR_TITULARITAT = B.OR_TITULARITAT
         AND A.IN_SEGMBSINI         IN ('003','005','006','009','010','019','027')
         AND A.IN_INDMOR            in ('NO', 'CT')
         AND A.IN_TIPOREG       NOT IN ('OXE', 'OX', 'MMOXE')

      UNION

      SELECT /*+ full(a) parallel (a 8) */ A.OR_IDREG, 'Empresas_TIT' AS ORIGEN
         FROM BAS_MEN.BASILEA A
           , (SELECT /*+ full(c) parallel (c 8) */ DISTINCT C.OR_TITULARITAT
             FROM BAS_MEN.BASILEA c
              WHERE IN_INDMOR  = 'SI'
              AND OR_TITULARITAT NOT IN (0,9)
              AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
              AND IN_TIPOREG  NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
              AND OR_PROCED IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC')
              AND (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) > 0
              AND C.OR_TITULARITAT NOT IN ( SELECT DISTINCT D.OR_TITULARITAT FROM BAS_MEN.NIFS_NO_CONTAGIAR D WHERE D.ID_MES_AAAAMM = substr(PN_FECPRO,1,6) )
              GROUP BY C.OR_TITULARITAT
              HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 1000
               ) B
             WHERE A.OR_TITULARITAT = B.OR_TITULARITAT
             AND A.IN_SEGMBSINI   IN ('003','005','006','009','010','019','027')
             AND A.IN_INDMOR      IN('NO', 'CT')
             AND A.IN_TIPOREG     NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')

          UNION

          SELECT /*+ full(d) parallel (d 8) */ d.OR_IDREG, 'Empresas_NIF' AS ORIGEN
         FROM BAS_MEN.BASILEA d
        , (SELECT /*+ full(e) parallel (e 8) */ DISTINCT OR_IDPERS
                FROM BAS_MEN.BASILEA           e
             , (SELECT DISTINCT OR_NIFCIF FROM BAS_MEN.NIFS_NO_CONTAGIAR WHERE ID_MES_AAAAMM = substr(PN_FECPRO,1,6)) D
            WHERE IN_INDMOR    = 'SI'
              AND E.OR_NIFCIF  = D.OR_NIFCIF(+)
              AND D.OR_NIFCIF IS NULL
              AND OR_IDPERS     NOT IN ('00-','97-','11-','12-','?')
              AND IN_SEGMBSINI      IN ('003','005','006','009','010','019','027')
              AND IN_TIPOREG    NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
              AND OR_PROCED     NOT IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC','ADJUDICADO') --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
            --NAV - 24/07/2019 - Agrupamos por OR_IDPERS y sumamos saldos
              GROUP BY OR_IDPERS
              HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
            --NAV - 24/07/2019 - FIN
            ) B
         WHERE d.OR_IDPERS     = B.OR_IDPERS
         AND d.IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
         AND d.IN_INDMOR    IN ('NO', 'CT')
         AND OR_TITULARITAT IN (0,9)
         AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')

          UNION

          SELECT /*+ full(a) parallel (a 8) */ a.OR_IDREG, 'Empresas_NIF'
        FROM BAS_MEN.BASILEA a
            , (SELECT /*+ full(c) parallel (c 8) */ DISTINCT c.OR_IDPERS
                FROM BAS_MEN.BASILEA c
                WHERE IN_INDMOR          = 'SI'
                  AND OR_NIFCIF     NOT IN (SELECT DISTINCT OR_NIFCIF FROM BAS_MEN.NIFS_NO_CONTAGIAR WHERE ID_MES_AAAAMM = substr(PN_FECPRO,1,6))
                  AND OR_IDPERS     NOT IN ('00-','97-','11-','12-','?')
                  AND IN_SEGMBSINI      IN ('003','005','006','009','010','019','027')
                  AND IN_TIPOREG    NOT IN ('OXE', 'OX','ITOXE', 'MMOXE', 'MMOXC')
                  AND OR_PROCED IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC')                             --NAV - 13/09/2019 - Añadido filtro OR_PROCED
                GROUP BY C.OR_IDPERS
               HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 1000  --NAV - 13/09/2019 - cambiado de 0 a 1000
                   ) B
          WHERE a.OR_IDPERS     = B.OR_IDPERS
          AND a.IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
          AND a.IN_INDMOR     in ('NO', 'CT')
          AND a.OR_TITULARITAT IN (0,9)
          AND a.IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE');

    commit;

    VN_NUMERR:= 61;

    INSERT INTO BAS_MEN.Contagio_MORA
      SELECT /*+ full(a) parallel (a 4) */ A.OR_IDREG, 'CCAA_TIT' AS ORIGEN
         FROM BAS_MEN.BASILEA A
             , (SELECT /*+ full(c) parallel (c 4) */ DISTINCT DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) TITULARITAT
                  FROM BAS_MEN.BASILEA c
                 WHERE IN_INDMOR = 'SI'
                   AND DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) NOT IN (0,9)
                   AND IN_SEGMBSINI IN ('002', '017', '101', '102')
                   AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE', 'MMOXC')
                   AND OR_PROCED NOT IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC','ADJUDICADO') --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
              --NAV - 24/07/2019 - Agrupamos por TITULARITAT y sumamos saldos
                 GROUP BY DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB)
                HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
              --NAV - 24/07/2019 - FIN
                )B
         WHERE DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) = B.TITULARITAT
         AND A.IN_SEGMBSINI  IN ('002', '017', '101', '102')
         AND A.IN_INDMOR     IN ('NO', 'CT')
         AND IN_TIPOREG      NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')

      UNION

      SELECT /*+ full(a) parallel (a 4) */ A.OR_IDREG, 'CCAA_TIT' AS ORIGEN
         FROM BAS_MEN.BASILEA A
             , (SELECT /*+ full(c) parallel (c 4) */ DISTINCT DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) TITULARITAT
                  FROM BAS_MEN.BASILEA c
                 WHERE IN_INDMOR = 'SI'
                   AND OR_TITULARITAT NOT IN (0,9)
                   AND
                   (IN_SEGMBSINI IN ('101', '102') OR
                   (IN_SEGMBSINI IN ('002', '017') AND IN_SEGMBS1 = '501'))
                   AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
                   AND OR_PROCED IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC')
                 GROUP BY DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB)
                       HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 1000
                        )B
          WHERE DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) = B.TITULARITAT
          AND A.IN_SEGMBSINI  IN ('002', '017', '101', '102')
          AND A.IN_INDMOR     IN ('NO', 'CT')
              AND IN_TIPOREG      NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')

         UNION
          SELECT /*+ full(d) parallel (d 4) */ d.OR_IDREG, 'CCAA_NIF' AS ORIGEN
            FROM BAS_MEN.BASILEA d
               , (SELECT /*+ full(e) parallel (e 4) */ DISTINCT OR_IDPERS
                    FROM BAS_MEN.BASILEA           e
                        , (SELECT DISTINCT OR_NIFCIF FROM BAS_MEN.NIFS_NO_CONTAGIAR WHERE ID_MES_AAAAMM = substr(PN_FECPRO,1,6)) D
                   WHERE IN_INDMOR          = 'SI'
                     AND E.OR_NIFCIF        = D.OR_NIFCIF(+)
                     AND D.OR_NIFCIF        IS NULL
                     AND OR_IDPERS          NOT IN ('00-','97-','11-','12-','?')
                     AND IN_SEGMBSINI       IN ('002', '017', '101', '102')
                     AND IN_TIPOREG         NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
                     AND OR_PROCED NOT IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC','ADJUDICADO') --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
                     --NAV - 24/07/2019 - Agrupamos por OR_IDPERS y sumamos saldos
                   --AND (OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS + OR_AJUVAL) > 0
                   GROUP BY OR_IDPERS
                  HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
                     --NAV - 24/07/2019 - FIN
                   ) B
             WHERE d.OR_IDPERS     = B.OR_IDPERS
             AND d.IN_SEGMBSINI  IN ('002', '017', '101', '102')
             AND d.IN_INDMOR     IN ('NO', 'CT')
             AND DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) IN (0,9)
             AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')

          UNION

          SELECT /*+ full(d) parallel (d 4) */ d.OR_IDREG, 'CCAA_NIF' AS ORIGEN
            FROM BAS_MEN.BASILEA d
               , (SELECT /*+ full(e) parallel (e 4) */ DISTINCT OR_IDPERS
                    FROM BAS_MEN.BASILEA           e
                       , (SELECT DISTINCT OR_NIFCIF FROM BAS_MEN.NIFS_NO_CONTAGIAR WHERE ID_MES_AAAAMM = substr(PN_FECPRO,1,6)) D
                     WHERE IN_INDMOR   = 'SI'
                     AND E.OR_NIFCIF        = D.OR_NIFCIF(+)
                     AND D.OR_NIFCIF        IS NULL
                     AND OR_IDPERS     NOT IN ('00-','97-','11-','12-','?')
                     AND
                               (IN_SEGMBSINI IN ('101', '102') OR
                                (IN_SEGMBSINI IN ('002', '017') AND IN_SEGMBS1 = '501'))
                     AND IN_TIPOREG    NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
                     AND OR_PROCED IN ('FACTORING', 'INV-C/C-DC','INV-C/E-DC')
                     GROUP BY OR_IDPERS
                     HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 1000
                 ) B
           WHERE d.OR_IDPERS     = b.OR_IDPERS
             AND d.IN_SEGMBSINI  IN ('002', '017', '101', '102')
             AND d.IN_INDMOR     IN ('NO', 'CT')
             AND DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) IN (0,9)
             AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE');

    commit;

    VN_NUMERR:= 62;

---------------------------------------------------------------------------------
-- RMR 06/05/2020                                                               -
-- En caso de que este proceso sea de CONTabilidad, se contagiará con normalidad-
-- pero si es de nueva DoD NO se contagian prestamos, OFEX ni créditos          -
---------------------------------------------------------------------------------
 IF SW_MARCA_DEFAULT = 'CONT' THEN

   -- Fin cambios en Contagio MORA para evaluar la suma de saldos por TITULARITAT  - MR 28/5/19

      VN_NUMERR:= 65;

      INSERT INTO BAS_MEN.Contagio_MORA
            SELECT /*+ full(a) parallel (a 4) */ A.OR_IDREG, 'Préstamos'
             FROM BAS_MEN.BASILEA A,
                  (SELECT /*+ full(c) parallel (c 4) */ DISTINCT OR_REFOPE
                     FROM BAS_MEN.BASILEA c
                    WHERE IN_INDMOR       = 'SI'
                      AND IN_SEGMBSINI   IN ('103','104')
                      AND OR_REFOPE      <> 0
                      AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
                      AND OR_PROCED NOT IN ('ADJUDICADO') --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
                --NAV - 24/07/2019 - Agrupamos por OR_IDPERS y sumamos saldos
                    GROUP BY OR_REFOPE
                   HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
                --NAV - 24/07/2019 - FIN
                   ) B
            WHERE A.OR_REFOPE     = B.OR_REFOPE
              AND A.IN_SEGMBSINI IN ('103','104')
              AND A.IN_INDMOR     in ('NO', 'CT')
              AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE');

             commit;

       INSERT INTO BAS_MEN.Contagio_MORA
            SELECT /*+ full(a) parallel (a 4) */ A.OR_IDREG, 'OFEX'
             FROM BAS_MEN.BASILEA A,
                  (SELECT /*+ full(c) parallel (c 4) */ DISTINCT OR_CTACLI, OR_NUMOFI
                     FROM BAS_MEN.BASILEA c
                    WHERE IN_INDMOR         = 'SI'
                      AND OR_CTACLI        <> 0
                      AND IN_TIPOREG       IN ('OXE', 'OX','ITOXE', 'MMOXE')
                      AND IN_SEGMBSINI NOT IN ('?', 'XXX')
                      AND OR_PROCED NOT IN ('ADJUDICADO') --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
               --NAV - 24/07/2019 - Agrupamos por OR_IDPERS y sumamos saldos
                    GROUP BY OR_CTACLI, OR_NUMOFI
                   HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
               --NAV - 24/07/2019 - FIN
                  ) B
            WHERE A.OR_CTACLI        = B.OR_CTACLI
              AND A.OR_NUMOFI        = B.OR_NUMOFI
              AND A.OR_CTACLI       <> 0
              AND IN_TIPOREG       IN ('OXE', 'OX','ITOXE', 'MMOXE')
              AND IN_SEGMBSINI NOT IN ('?', 'XXX')
              AND A.IN_INDMOR in ('NO', 'CT');

            commit;

         INSERT INTO BAS_MEN.Contagio_MORA
            SELECT /*+ full(a) parallel (a 4) */ A.OR_IDREG, 'KT_TA'
             FROM BAS_MEN.BASILEA A,
                  (SELECT /*+ full(c) parallel (c 4) */ DISTINCT OR_clunicontr
                     FROM BAS_MEN.BASILEA c
                    WHERE IN_INDMOR       = 'SI'
                      AND IN_SEGMBSINI   IN ('106','107')
                      AND OR_clunicontr not in (0, 999999999999999)
                      AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE')
                      AND OR_PROCED NOT IN ('ADJUDICADO') --NAV 13/09/2019 - excluir la procedencia 'ADJUDICADO'
               --NAV - 24/07/2019 - Agrupamos por OR_IDPERS y sumamos saldos
                    GROUP BY OR_clunicontr
                   HAVING (SUM(OR_DISPTO) + SUM(OR_DISBLE) + SUM(OR_AVALES) + SUM(OR_FUTURS) + SUM(OR_REPOS) + SUM(OR_AJUVAL)) > 0
               --NAV - 24/07/2019 - FIN
                  ) B
            WHERE A.OR_clunicontr = B.OR_clunicontr
              AND A.IN_SEGMBSINI IN ('106','107')
              AND A.IN_INDMOR     in ('NO', 'CT')
              AND IN_TIPOREG NOT IN ('OXE', 'OX','ITOXE', 'MMOXE');

        COMMIT;


 END IF; /*  RMR 06/05/2020 Fin */

       VN_NUMERR:= 66;

       BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.fecmora_ct');

       insert into BAS_MEN.fecmora_ct
       SELECT  A.or_idreg, B.IN_FECMORA, B.OR_FECDEU, 'CT' IN_INDMOR, 'MORA' IN_SRATIN, METODE
         FROM (select /*+ full(a) full(b) parallel (a 4) parallel (b 4) parallel (C 4) */  a.or_idreg, DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) as OR_TITULARITAT, C.METODE /* 08/06-BNM- TM-1818, se sustitute OR_TITULARITAT por el DECODE */
                 from BAS_MEN.BASILEA a, BAS_MEN.Contagio_MORA b, BAS_MEN.TEMP_METODE c
                where A.or_idreg = b.or_idreg
                  and a.or_idreg = c.or_idreg(+)) A
            , (select /*+ parallel (B 8) */ DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB) as OR_TITULARITAT, max(IN_FECMORA) AS IN_FECMORA, max(OR_FECDEU) AS OR_FECDEU   /* 08/06-BNM- TM-1818, se sustitute OR_TITULARITAT por el DECODE */
                 from BAS_MEN.BASILEA b
                where b.IN_INDMOR = 'SI'
                  and (IN_FECMORA <> '?' OR OR_FECDEU NOT IN (0,10101))
                     group by  DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT, OR_TITUSCPCB)) B
        WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+);

      commit;

      VN_NUMERR:= 67;

      -- Actualización de la fecha de mora de los contagiados.
       MERGE /*+ full(upd) parallel(Upd 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Upd
       USING BAS_MEN.fecmora_ct Sel
          ON (Upd.OR_IDREG = Sel.OR_IDREG)
        WHEN MATCHED THEN
      UPDATE
         SET upd.IN_FECMORA = CASE
                                   WHEN sel.IN_FECMORA <> '?' THEN
                                        sel.IN_FECMORA
                                   ELSE
                                        upd.IN_FECMORA
                              END,
             upd.OR_FECDEU  = CASE
                                   WHEN sel.OR_FECDEU NOT IN (0,10101) THEN
                                        sel.OR_FECDEU
                                   ELSE
                                        upd.OR_FECDEU
                              END,
             upd.IN_INDMOR = sel.IN_INDMOR,
             upd.IN_SRATIN = sel.IN_SRATIN,
             UPD.IN_METODE = CASE
                                   WHEN UPD.IN_METODE = 'STDA' AND SEL.METODE = 'AIRB' THEN -- Para dejar como AIRB los bloqueos contenciosos que al asignar el sratin pasan a STDA, pero que al ser morosos han de ser AIRB.
                                        SEL.METODE
                                   ELSE
                                        UPD.IN_METODE
                             END;

         commit;

    VN_NUMERR:= 99;

    UPDATE BAS_MEN.control_proces
      SET ESTAT = 'FINALIZADO',
          DATA_FIN = SYSDATE,
          FINALITZAT = 'OK',
          REG_UPD_OK = VN_COUNT
    WHERE PROCES = 'CALCULO_EAD '||PV_TABLA
      AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.control_proces
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = 'CALCULO_EAD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;

END;

begin

 IF PN_OPC = 1 THEN
    FNC_CALCUL_EAD;
  /* RMR 09/07/2021 Eliminada llamada del neteo de derivados */
 /*ELSIF PN_OPC = 2 THEN
       IF PV_RET1 = 'OK' THEN
          FNC_DERIVADOS_CONTRAPARTE;
       END IF;*/
 --ALLA Debido a la incorporación del cálculo de EAD para repos, la segmentación pasa a ser la opción 4
 ELSIF PN_OPC = 3 THEN
         BAS_MEN.PKG_EAD_REPOS.CALCULO_EXPOSICION;
 END IF;

END;

/

show errors;


CREATE OR REPLACE FUNCTION BAS_MEN.CALC_SN_PDF(x IN NUMBER) RETURN NUMBER
IS
    pi      CONSTANT NUMBER := 3.14159265358979;
BEGIN

  RETURN 1/sqrt(2*pi) * exp(-x*x/2);

END;
/

CREATE OR REPLACE FUNCTION BAS_MEN.CALC_SN_CDF(x IN NUMBER) RETURN NUMBER
IS
    b0 CONSTANT NUMBER :=  0.2316419;
    b1 CONSTANT NUMBER :=  0.319381530;
    b2 CONSTANT NUMBER := -0.356563782;
    b3 CONSTANT NUMBER :=  1.781477937;
    b4 CONSTANT NUMBER := -1.821255978;
    b5 CONSTANT number :=  1.330274429;
    v_t         number;
BEGIN

    IF x < 0 THEN
      RETURN 1 - BAS_MEN.CALC_SN_CDF(-x);
    ELSE
      v_t := 1 / (1 + b0*x);
      RETURN 1 - BAS_MEN.CALC_SN_PDF(x)*(b1*v_t + b2*v_t*v_t + b3*v_t*v_t*v_t + b4*v_t*v_t*v_t*v_t + b5*v_t*v_t*v_t*v_t*v_t);
    END IF;

END;

/


CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_INICIAL (FECHA_PROCESO DATE
                                                     , MES_PROCESO   NUMBER) AS

    VV_Proces        BAS_MEN.CONTROL_PROCES.PROCES%TYPE        DEFAULT 'FNC_SACCR_INICIAL';
    VN_NumErr        NUMBER(3)                                 DEFAULT 0;
    VV_Mensaje       VARCHAR2(4000)                            DEFAULT '';
    VN_Count         NUMBER(9)                                 DEFAULT 0;
    VV_RETORNO       VARCHAR2(2)                               DEFAULT 'OK';
    ERR_REAL         VARCHAR2(4000);
    v_NRegs_Ins      BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE    DEFAULT 0;

    VN_FECPRO        NUMBER(8);
    VN_MESPRO        NUMBER(6);
    VV_IDREG2        number(20);

BEGIN

    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

/*************VOLCADO DE DATOS DE INPUT******************/

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.SACCR_CAMARA_COMPENSACION';

    INSERT INTO BAS_MEN.SACCR_CAMARA_COMPENSACION
    SELECT *
      FROM DCRPROP_MENSUAL.SACCR_CAMARA_COMPENSACION;

    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.SACCR_MEXICO';

    INSERT INTO BAS_MEN.SACCR_MEXICO
    SELECT *
      FROM DCRPROP_MENSUAL.SACCR_MEXICO_SAS;

    COMMIT;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.GOLDENCOPY';

    INSERT INTO BAS_MEN.GOLDENCOPY
    SELECT MES_PROCESO as ID_MES, NOMENCLATURA_BCO, nvl(VALOR_CAMPO_REC, 0) AS PRECIOSPOT
      FROM DCRPROP_MENSUAL.GOLDENCOPY
     WHERE TO_NUMBER(TO_CHAR(FECHAREG, 'YYYYMM')) = MES_PROCESO;

    COMMIT;

     /* FMRR - 01/09/2021 -- Elinamos la tabla de INPUT_OFEX ya que
        se añade los campos necesarios a admin_bdu.m_basilea_sa_ccr */

    --EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.INPUT_OFEX';
    --
    --INSERT INTO BAS_MEN.INPUT_OFEX
    --SELECT *
    --  FROM DCRPROP_MENSUAL.INPUT_OFEX_SAS;
    --
    --COMMIT;

/***********************************************************************
 DETERMINACION DEL PRERIMETRO DE CONTRATOS DE DERIVADOS USANDO
           COMO FUENTE PRINCIPAL BASILEA COREP
***********************************************************************/
   VN_NumErr := 1;

   /********* WRONG WAY RISK ***********/

   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.WW_RISK';

   INSERT INTO BAS_MEN.WW_RISK  (GLOBALID, ESTUDIO_CPTY_SUBYACENTE, ASSET_CLASS)
   SELECT GLOBALID, ESTUDIO_CPTY_SUBYACENTE, ASSET_CLASS
     FROM (
           SELECT DEAL_ID AS GLOBALID,
                  ESTUDIO_CPTY_SUBYACENTE,
                  'EQUITY' AS ASSET_CLASS
             FROM BAS_MEN.WWR_EQO_OUTPUT
           ----------
           UNION ALL
           ----------
           SELECT DEAL_ID AS GLOBALID,
                  ESTUDIO_CPTY_SUBYACENTE,
                  'IRS' AS ASSET_CLASS
             FROM BAS_MEN.WWR_IRS_OUTPUT
           ----------
           UNION ALL
           ----------
           SELECT DEAL_ID AS GLOBALID,
                  ESTUDIO_CPTY_SUBYACENTE,
                  'OPB' AS ASSET_CLASS
             FROM BAS_MEN.WWR_OPB_OUTPUT
           ----------
           UNION ALL
           ----------
           SELECT OPERACION AS GLOBALID,
                  ESTUDIO_CPTY_SUBYACENTE,
                  'REPO' AS ASSET_CLASS
             FROM BAS_MEN.WWR_REPO_OUTPUT
          );

    COMMIT;

    VN_NumErr := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.WW_RISK_2';

   INSERT INTO BAS_MEN.WW_RISK_2
   SELECT DISTINCT GLOBALID
     FROM BAS_MEN.WW_RISK;

    COMMIT;

    VN_NumErr := 3;

   /************** PERIMETRO MEXICO ***************/
   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_MEXICO';

   INSERT INTO BAS_MEN.PERIMETRO_MEXICO
   SELECT TRIM(TO_CHAR(REFERENCIA_OPERACION))     AS IDENT_CONTRATO,
          null                                    AS OR_CLUNIPROD_CUENT,
          null                                    AS OR_CLUNICUENT,
          INSTRUMENTO                             AS OR_TIPOPE,
          null                                    AS GLOBALID,
          ID_CONTRAPARTE_CLIENTE                  AS OR_NIFCIF,
          '006'                                   AS IN_SEGMBSINI,
          decode(a.DIVISA, 'EUR', NOMINAL, (NOMINAL / b.CANVIO_BCE)) AS OR_FUTURS,
          a.DIVISA                                AS OR_DIVISA,
          ID_CONTRAPARTE_CLIENTE                  AS OR_CODIGO_BIC,
          EXPOSICION_MTM                          AS OR_FAIRVA,
          TRIM(a.NOMBRE_CONTRAPARTE_CLIENTE)      AS OR_NOMPER,
          PAIS                                    AS OR_CODISO,
          null                                    AS OR_IDCNAE,
          'STDA'                                  AS IN_METODE,
          'NO'                                    AS FI_ELIMI1,
          null                                    AS FI_EADAIRB,
          null                                    AS IN_FACTCOR,
          null                                    AS FI_EADCONAIRB,
          'NO'                                    AS IN_INDMOR,
          rownum                                  AS OR_IDREG,
          null                                    AS OR_CLUNIPROD_OPERA,
          null                                    AS OR_CLUNIOPERA,
          null                                    AS CODPRODOPERA,
          ----------
          CASE
            WHEN Signo = 'Buy'  THEN 'COM'
            WHEN Signo = 'Sell' THEN 'VEN'
          END                                      AS MARCAPUTCALL,
          ----------
          null                                     AS REFCOMMODITIES,
          null                                     AS REFERENCIA,
          null                                     AS REFTIPODECAMBIO,
          null                                     AS SUBYACENTEACCION,
          null                                     AS TIPOINTERSTRIKE,
          null                                     AS APLICACION,
          null                                     AS PRODUCTOBASICO,
          null                                     AS PRODUCTOTGR,
          null                                     AS DESCPRODO,
          FECHA_CONTRATACION                       AS FCHOPERACION_1,
          FECHA_VENCIMIENTO                        AS FCHVENCIMOPER_1,
          FECHA_CONTRATACION                       AS FCHOPERACION_2,
          FECHA_VENCIMIENTO                        AS FCHVENCIMOPER_2,
          DIVISA_EXPOSICION                        AS DIVISACONTRAPART,
          'MXN'                                    AS DIVISALIMCONCACT,/* 05/10/2021 RMR | Añadida divisa de peso mexicano */
          9157                                     AS OR_ENTITY,
          null                                     AS OR_CTAIND,
          '?'                                      AS IN_SEGMBS0,
          CASE
              WHEN INSTRUMENTO LIKE '%IRS%'          THEN '030030102000000000000000000000'
              WHEN INSTRUMENTO LIKE '%COMMODITIES%'  THEN '030030104000000000000000000000'
              WHEN INSTRUMENTO LIKE '%EQUITIES%'     THEN '030030103000000000000000000000'
              WHEN INSTRUMENTO IN ('FX', 'FWD')      THEN '030030101000000000000000000000'
           END                                     AS FI_EPICON,
          'DN'                                     AS IN_TIPOREG,
          null                                     AS OR_REFOPE2,
          0                                        AS ESTANBDU,
          ID_CONTRAPARTE_CLIENTE                   AS SEGMENTO_COLA,
          null                                     AS WWR,
          null                                     AS COD_PROD,
          ----------
          CASE
            WHEN Instrumento = 'IRS' THEN 1
            WHEN Instrumento = 'FWD' THEN 6
            ELSE null
          END                                      AS TIPO_RIESGO_PRINCIPAL_AUX,
          ----------
          null                                     AS COMMODITY_TYPE,
          null                                     AS HEDGING_SET,
          FI_PORCON                                /* 26/11/2021 - FMRR - HDEV-100535 - Añadimos el FI_PORCON desde SACCR_MEXICO_SAS*/
     FROM BAS_MEN.SACCR_MEXICO      a
     LEFT JOIN BAS_MEN.TIPOS_BCE b
       ON a.DIVISA = b.DIVISA;
    /* FMRR - 07/01/2022 - HDEV? -- Esto es algo que hacíamos antes de adaptar con el campo FI_PORCON
    WHERE TRIM(a.NOMBRE_CONTRAPARTE_CLIENTE) NOT IN ('BANCO SABADELL ESPAÑA',
          'B. SABADELL SA FIDEICOMISO 004 MARINA AZUL', 'SABADELL SA FIDEICOM 014 PDUM')*/

   COMMIT;

    SELECT MAX(OR_IDREG)
    INTO VV_IDREG2
    FROM BAS_MEN.BASILEA;

    update bas_men.PERIMETRO_MEXICO
    set or_idreg = or_idreg + VV_IDREG2;

    commit;

/***********************************************************************************************************/
/*****************************            PERIMETRO BASILEA            ************************************/
/***********************************************************************************************************/

/* Creación de la variable estanbdu con valor = 1 si la operación está en
   ORABBDAC.M_BASILEA_SA_CCR, y valor =0 si no lo está
*/

    VN_NumErr := 5;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_BASILEA';

    INSERT /*+ PARALLEL (bas,4) */ INTO BAS_MEN.PERIMETRO_BASILEA bas
    SELECT /*+ PARALLEL (a,4) */
           IDENT_CONTRATO  ,OR_CLUNIPROD_CUENT ,OR_CLUNICUENT     ,OR_TIPOPE        ,GLOBALID
          ,OR_NIFCIF       ,IN_SEGMBSINI       ,OR_FUTURS         ,OR_DIVISA        ,OR_CODIGO_BIC
          ,OR_FAIRVA       ,OR_NOMPER          ,OR_CODISO         ,OR_IDCNAE        ,IN_METODE
          ,FI_ELIMI1       ,FI_EADAIRB         ,IN_FACTCOR        ,FI_EADCONAIRB    ,IN_INDMOR
          ,OR_IDREG        ,OR_CLUNIPROD_OPERA ,OR_CLUNIOPERA     ,CODPRODOPERA     ,REFCOMMODITIES
          ,REFERENCIA      ,REFTIPODECAMBIO    ,SUBYACENTEACCION  ,TIPOINTERSTRIKE  ,APLICACION
          ,PRODUCTOBASICO  ,PRODUCTOTGR        ,DESCPRODO         ,DIVISACONTRAPART ,OR_ENTITY
          ,OR_CTAIND       ,IN_SEGMBS0         ,FI_EPICON         ,IN_TIPOREG       ,FCHOPERACION_1
          ,FCHVENCIMOPER_1 ,FCHOPERACION_2     ,FCHVENCIMOPER_2   ,OR_REFOPE2       ,ESTANBDU
          ,SEGMENTO_COLA   ,WWR                ,COD_PROD          ,COMMODITY_TYPE   ,OR_VIDINI
          ,OR_VIDRES       ,IN_ANTIGU          ,OPERACIONOFEX     ,DIVISALIMCONCACT
          /**** tipo de Asset Class --- se hace en base a la tabla OBASIBDU.D_CODPRODOPERA_ADSDET **/
          ,CASE /**** TABLA -- M_BASILEA_SA_CCR*****/
              WHEN ESTANBDU = 1 THEN
                 CASE
                    WHEN FI_EPICON IN ('030030102000000000000000000000','030030201020000000000000000000','030030202020000000000000000000','030030204000000000000000000000','030030205000000000000000000000') THEN 1
                    WHEN FI_EPICON LIKE '030030104000000000000000000000' THEN 2
                    WHEN FI_EPICON IN ('030030103000000000000000000000', '030030201030000000000000000000') THEN 5
                    WHEN FI_EPICON IN ('030030101000000000000000000000','030030201010000000000000000000','030030202030000000000000000000') THEN 6
                    ELSE
                       CASE
                          WHEN OR_TIPOPE IN ('OP TI', 'SWAPS') THEN 1
                          WHEN OR_TIPOPE LIKE 'FW' THEN 6
                       END
                 END
              WHEN ESTANBDU = 0 THEN
                CASE
                  WHEN CODPRODOPERA IS NOT NULL THEN
                    CASE
                      WHEN CODPRODOPERA IN ('TS 00004') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00010') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00011') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00067') THEN 1
                      WHEN CODPRODOPERA IN ('MM 10008') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00003') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00002') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00002') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00004') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00003') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00051') THEN 1
                      WHEN CODPRODOPERA IN ('MM 10001') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00066') THEN 1
                      WHEN CODPRODOPERA IN ('MM 10002') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00001') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00071') THEN 2
                      WHEN CODPRODOPERA IN ('TS 00016') THEN 5
                      WHEN CODPRODOPERA IN ('XV 00004') THEN 6
                      WHEN CODPRODOPERA IN ('XV 00001') THEN 6
                      WHEN CODPRODOPERA IN ('XU 00006') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00030') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00013') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00014') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00157') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00167') THEN 6
                      WHEN CODPRODOPERA IN ('XV 00005') THEN 6
                      WHEN CODPRODOPERA IN ('XU 00004') THEN 6
                      WHEN CODPRODOPERA IN ('XV 00003') THEN 6
                    END
                ELSE
                  CASE
                    WHEN OR_TIPOPE = 'OP TI' THEN 1
                    WHEN OR_TIPOPE = 'SWAPS' THEN 1
                    WHEN OR_TIPOPE = 'OP RV' THEN 5
                    WHEN OR_TIPOPE = 'FW'    THEN 6  -- Añadido para coger 16 campos a null
                  END
                END
           END AS TIPO_RIESGO_PRINCIPAL_AUX,
           CASE
               WHEN COMMODITY_TYPE IN ('ALUMINIUM','COBRE','ZINC') THEN 'METALS'
               WHEN COMMODITY_TYPE IN ('CRUDE OIL','FUEL')         THEN 'OIL/GAS'
               WHEN COMMODITY_TYPE in ('ELECTRICITY')              THEN 'ELECTRICITY' /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
           END AS HEDGING_SET,
           /* INI - FMRR 14/01/2022 -- HDEV-98987 SACCR - INCLUIR CAMPO POSICION Y MODIFICAR MARCAPUTCALL */
           POSICION,
           MARCAPUTCALL AS MARCAPUTCALL_ORIG,
           CASE
                WHEN MARCAPUTCALL IS NOT NULL THEN MARCAPUTCALL
                WHEN MARCAPUTCALL IS NULL AND (POSICION = 'C' OR POSICION = 'LARGA' OR POSICION = 'B') THEN 'COM'
                WHEN MARCAPUTCALL IS NULL AND (POSICION = 'S' OR POSICION = 'CORTA' OR POSICION = 'V') THEN 'VEN'
                ELSE null
           END AS MARCAPUTCALL
           /* FIN - FMRR 14/01/2022 -- HDEV-98987*/
      FROM (
             SELECT /*+ PARALLEL (a 4) PARALLEL (b 4) PARALLEL (d 4) */  DISTINCT (OR_CLUNICUENT || OR_CLUNIPROD_OPERA || OR_CLUNIOPERA) AS IDENT_CONTRATO,
                    a.OR_CLUNIPROD_CUENT, a.OR_CLUNICUENT, OR_TIPOPE,
                    CASE
                       WHEN A.FI_TIPEXP IN ('OTC', 'Repos') AND OR_ENTITY IN (81, 8211) THEN A.OR_CLUNIPROD_OPERA || LPAD(A.OR_CLUNIOPERA, 15, '0')
                       ELSE NULL
                    END AS GLOBALID,
                    OR_NIFCIF, IN_SEGMBSINI, OR_FUTURS, OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA , TRIM(OR_NOMPER) AS OR_NOMPER, OR_CODISO, OR_IDCNAE,
                    IN_METODE, FI_ELIMI1, FI_EADAIRB, IN_FACTCOR, FI_EADCONAIRB, IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, b.CODPRODOPERA,
                    MARCAPUTCALL, b.POSICION, REFCOMMODITIES, REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, b.PRODUCTOBASICO,
                    PRODUCTOTGR, DESCPRODO, DIVISACONTRAPART, OR_ENTITY,
                    CASE WHEN e.OR_IDREG_INI IS NOT NULL THEN e.OR_CTAIND
                         ELSE a.OR_CTAIND
                    END AS OR_CTAIND
                    , IN_SEGMBS0, FI_EPICON, IN_TIPOREG,
                    /**** Campos nuevos ****/
                    /** FECHAS BASILEA **/
                    to_date(a.OR_FECOPE, 'YYYYMMDD') AS FCHOPERACION_1,
                    to_date(a.OR_FECVTO, 'YYYYMMDD') AS FCHVENCIMOPER_1,
                    /** FECHAS BDU **/
                    to_date(b.FCHOPERACION,  'YYYYMMDD')  AS FCHOPERACION_2,
                    to_date(b.FCHVENCIMOPER, 'YYYYMMDD') AS FCHVENCIMOPER_2,
                    SUBSTR(OR_REFOPE2,5) AS OR_REFOPE2,  -- Nuevo campo con V2
                    CASE
                       WHEN b.CONTRATODESGL IS NOT NULL THEN 1
                       ELSE 0
                    END AS ESTANBDU ,
                    /* DETERMINAMOS EL ID DE LA CONTRAPARTE */
                    CASE
                       WHEN IN_SEGMBSINI = '007' AND OR_CODIGO_BIC <> '?' THEN OR_CODIGO_BIC
                       WHEN OR_NIFCIF <> '?' THEN OR_NIFCIF
                       WHEN OR_NUMOFI IN (800, 801, 813, 821, 825) THEN OR_NUMOFI || OR_CTACLI
                       WHEN OR_COISIN <> '?' THEN OR_COISIN
                       ELSE '?'
                    END AS SEGMENTO_COLA,
                    CASE
                       WHEN c.GLOBALID IS NULL THEN null
                       ELSE (OR_CLUNICUENT || OR_CLUNIPROD_OPERA || OR_CLUNIOPERA) /*IDENT_CONTRATO   -- ANTES c.GLOBALID*/
                    END AS WWR,
                    /* EXTRACCION CODIGO DE PRODUCTO */
                    SUBSTR(B.CODPRODOPERA,4) AS COD_PROD,
                    /* Tipología de riesgo principal de las operaciones */
                    CASE
                       WHEN REFCOMMODITIES LIKE ('%ALUMINI%') THEN 'ALUMINIUM'
                       WHEN REFCOMMODITIES LIKE ('%OIL%')     THEN 'CRUDE OIL'
                       WHEN REFCOMMODITIES LIKE ('%FUEL%')    THEN 'FUEL'
                       WHEN REFCOMMODITIES LIKE ('%COBRE%')   THEN 'COBRE'
                       WHEN REFCOMMODITIES LIKE ('%ZINC%')    THEN 'ZINC'
                       WHEN REFCOMMODITIES LIKE ('%ELECT%')   THEN 'ELECTRICITY' /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
                    END AS COMMODITY_TYPE, OR_VIDINI, OR_VIDRES, IN_ANTIGU
                  , b.OPERACIONOFEX, b.DIVISALIMCONCACT  /*** AÑADIMOS LA INFORMACIÓN DE OFEX ***/
               FROM BAS_MEN.BASILEA                a
               LEFT JOIN BAS_MEN.M_BASILEA_SA_CCR  b
                 ON a.OR_CLUNICUENT      = b.CONTRATODESGL
                AND a.OR_CLUNIPROD_OPERA = b.PRODOPERACION
                AND a.OR_CLUNIOPERA      = b.OPERACION
               LEFT JOIN BAS_MEN.WW_RISK_2 c
                 ON CASE
                       WHEN A.FI_TIPEXP IN ('OTC', 'Repos') AND OR_ENTITY IN (81, 8211) THEN A.OR_CLUNIPROD_OPERA || LPAD(A.OR_CLUNIOPERA, 15, '0')
                       ELSE NULL
                    END = c.GLOBALID
               LEFT JOIN BAS_MEN.D_CODPRODOPERA_ADSDET d
                 ON b.CODPRODOPERA = d.CODPRODOPERA
               LEFT JOIN (SELECT OR_IDREG AS OR_IDREG_INI, OR_CTAIND
                          FROM BAS_MEN.BASILEA_INI) e
                 ON a.OR_IDREG = e.OR_IDREG_INI
              WHERE a.OR_ENTITY = 81
                AND a.FI_ELIMI1 = 'NO'
                AND a.FI_EPICON like '03003%'
                AND a.IN_METODE <> '?'
                AND a.OR_NUMOFI NOT IN (800, 801, 813, 825, 821)
           ) A
     WHERE SEGMENTO_COLA <> '?';

    v_NRegs_Ins := SQL%ROWCOUNT;

    COMMIT;

/* FMRR -- 03/09/2021 -- Añadimos un segundo insert a la tabla PERIMETRO_BASILEA para las operaciones con OFEX */

   INSERT /*+ PARALLEL (bas,4) */ INTO BAS_MEN.PERIMETRO_BASILEA bas
    SELECT /*+ PARALLEL (a,4) */
           IDENT_CONTRATO  ,OR_CLUNIPROD_CUENT ,OR_CLUNICUENT     ,OR_TIPOPE        ,GLOBALID
          ,OR_NIFCIF       ,IN_SEGMBSINI       ,OR_FUTURS         ,OR_DIVISA        ,OR_CODIGO_BIC
          ,OR_FAIRVA       ,OR_NOMPER          ,OR_CODISO         ,OR_IDCNAE        ,IN_METODE
          ,FI_ELIMI1       ,FI_EADAIRB         ,IN_FACTCOR        ,FI_EADCONAIRB    ,IN_INDMOR
          ,OR_IDREG        ,OR_CLUNIPROD_OPERA ,OR_CLUNIOPERA     ,CODPRODOPERA     ,REFCOMMODITIES
          ,REFERENCIA      ,REFTIPODECAMBIO    ,SUBYACENTEACCION  ,TIPOINTERSTRIKE  ,APLICACION
          ,PRODUCTOBASICO  ,PRODUCTOTGR        ,DESCPRODO         ,DIVISACONTRAPART ,OR_ENTITY
          ,OR_CTAIND       ,IN_SEGMBS0         ,FI_EPICON         ,IN_TIPOREG       ,FCHOPERACION_1
          ,FCHVENCIMOPER_1 ,FCHOPERACION_2     ,FCHVENCIMOPER_2   ,OR_REFOPE2       ,ESTANBDU
          ,SEGMENTO_COLA   ,WWR                ,COD_PROD          ,COMMODITY_TYPE   ,OR_VIDINI
          ,OR_VIDRES       ,IN_ANTIGU          ,OPERACIONOFEX     ,DIVISALIMCONCACT
          /**** tipo de Asset Class --- se hace en base a la tabla OBASIBDU.D_CODPRODOPERA_ADSDET **/
          ,CASE /**** TABLA -- M_BASILEA_SA_CCR*****/
              WHEN ESTANBDU = 1 THEN
                 CASE
                     WHEN FI_EPICON IN ('030030102000000000000000000000','030030201020000000000000000000','030030202020000000000000000000','030030204000000000000000000000','030030205000000000000000000000') THEN 1
                     WHEN FI_EPICON LIKE '030030104000000000000000000000' THEN 2
                     WHEN FI_EPICON IN ('030030103000000000000000000000' ,'030030201030000000000000000000')  THEN 5
                     WHEN FI_EPICON IN ('030030101000000000000000000000','030030201010000000000000000000','030030202030000000000000000000') THEN 6
                     ELSE
                        CASE
                           WHEN OR_TIPOPE IN ('OP TI', 'SWAPS') THEN 1
                           WHEN OR_TIPOPE LIKE 'FW' THEN 6
                        END
                 END
              WHEN ESTANBDU = 0 THEN
                CASE
                  WHEN CODPRODOPERA IS NOT NULL THEN
                    CASE
                      WHEN CODPRODOPERA IN ('TS 00004') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00010') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00011') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00067') THEN 1
                      WHEN CODPRODOPERA IN ('MM 10008') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00003') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00002') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00002') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00004') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00003') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00051') THEN 1
                      WHEN CODPRODOPERA IN ('MM 10001') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00066') THEN 1
                      WHEN CODPRODOPERA IN ('MM 10002') THEN 1
                      WHEN CODPRODOPERA IN ('RJ 00001') THEN 1
                      WHEN CODPRODOPERA IN ('TS 00071') THEN 2
                      WHEN CODPRODOPERA IN ('TS 00016') THEN 5
                      WHEN CODPRODOPERA IN ('XV 00004') THEN 6
                      WHEN CODPRODOPERA IN ('XV 00001') THEN 6
                      WHEN CODPRODOPERA IN ('XU 00006') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00030') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00013') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00014') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00157') THEN 6
                      WHEN CODPRODOPERA IN ('TS 00167') THEN 6
                      WHEN CODPRODOPERA IN ('XV 00005') THEN 6
                      WHEN CODPRODOPERA IN ('XU 00004') THEN 6
                      WHEN CODPRODOPERA IN ('XV 00003') THEN 6
                    END
                ELSE
                  CASE
                    WHEN OR_TIPOPE = 'OP TI' THEN 1
                    WHEN OR_TIPOPE = 'SWAPS' THEN 1
                    WHEN OR_TIPOPE = 'OP RV' THEN 5
                    WHEN OR_TIPOPE = 'FW'    THEN 6  -- Añadido para coger 16 campos a null
                  END
                END
           END AS TIPO_RIESGO_PRINCIPAL_AUX,
           CASE
               WHEN COMMODITY_TYPE IN ('ALUMINIUM','COBRE','ZINC') THEN 'METALS'
               WHEN COMMODITY_TYPE IN ('CRUDE OIL','FUEL')         THEN 'OIL/GAS'
           END AS HEDGING_SET,
           /* INI - FMRR 14/01/2022 -- HDEV-98987 SACCR - INCLUIR CAMPO POSICION Y MODIFICAR MARCAPUTCALL */
           POSICION,
           MARCAPUTCALL AS MARCAPUTCALL_ORIG,
           CASE
                WHEN MARCAPUTCALL IS NOT NULL THEN MARCAPUTCALL
                WHEN MARCAPUTCALL IS NULL AND (POSICION = 'C' OR POSICION = 'LARGA' OR POSICION = 'B') THEN 'COM'
                WHEN MARCAPUTCALL IS NULL AND (POSICION = 'S' OR POSICION = 'CORTA' OR POSICION = 'V') THEN 'VEN'
                ELSE null
           END AS MARCAPUTCALL
           /* FIN - FMRR 14/01/2022 -- HDEV-98987 */
      FROM (
             SELECT /*+ PARALLEL (a 4) PARALLEL (b 4) PARALLEL (d 4) */  DISTINCT (OR_CLUNICUENT || OR_CLUNIPROD_OPERA || OR_CLUNIOPERA) AS IDENT_CONTRATO,
                    a.OR_CLUNIPROD_CUENT, a.OR_CLUNICUENT, OR_TIPOPE,
                    CASE
                       WHEN A.FI_TIPEXP IN ('OTC', 'Repos') AND OR_ENTITY IN (81, 8211) THEN A.OR_CLUNIPROD_OPERA || LPAD(A.OR_CLUNIOPERA, 15, '0')
                       ELSE NULL
                    END AS GLOBALID,
                    OR_NIFCIF, IN_SEGMBSINI, OR_FUTURS, OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA , TRIM(OR_NOMPER) AS OR_NOMPER, OR_CODISO, OR_IDCNAE,
                    IN_METODE, FI_ELIMI1, FI_EADAIRB, IN_FACTCOR, FI_EADCONAIRB, IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, b.CODPRODOPERA,
                    MARCAPUTCALL, b.POSICION, REFCOMMODITIES, REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, b.PRODUCTOBASICO,
                    PRODUCTOTGR, DESCPRODO, DIVISACONTRAPART, OR_ENTITY,
                    CASE WHEN e.OR_IDREG_INI IS NOT NULL THEN e.OR_CTAIND
                         ELSE a.OR_CTAIND
                    END AS OR_CTAIND
                    , IN_SEGMBS0, FI_EPICON, IN_TIPOREG,
                    /**** Campos nuevos ****/
                    /** FECHAS BASILEA **/
                    to_date(a.OR_FECOPE, 'YYYYMMDD') AS FCHOPERACION_1,
                    to_date(a.OR_FECVTO, 'YYYYMMDD') AS FCHVENCIMOPER_1,
                    /** FECHAS BDU **/
                    to_date(b.FCHOPERACION,  'YYYYMMDD')  AS FCHOPERACION_2,
                    to_date(b.FCHVENCIMOPER, 'YYYYMMDD') AS FCHVENCIMOPER_2,
                    SUBSTR(OR_REFOPE2,5) AS OR_REFOPE2,  -- Nuevo campo con V2
                    CASE
                       WHEN b.CONTRATODESGL IS NOT NULL THEN 1
                       ELSE 0
                    END AS ESTANBDU ,
                    /* DETERMINAMOS EL ID DE LA CONTRAPARTE */
                    CASE
                       WHEN IN_SEGMBSINI = '007' AND OR_CODIGO_BIC <> '?' THEN OR_CODIGO_BIC
                       WHEN OR_NIFCIF <> '?' THEN OR_NIFCIF
                       WHEN OR_NUMOFI IN (800, 801, 813, 821, 825) THEN OR_NUMOFI || OR_CTACLI
                       WHEN OR_COISIN <> '?' THEN OR_COISIN
                       ELSE '?'
                    END AS SEGMENTO_COLA,
                    CASE
                       WHEN c.GLOBALID IS NULL THEN null
                       ELSE (OR_CLUNICUENT || OR_CLUNIPROD_OPERA || OR_CLUNIOPERA) /*IDENT_CONTRATO   -- ANTES c.GLOBALID*/
                    END AS WWR,
                    /* EXTRACCION CODIGO DE PRODUCTO */
                    SUBSTR(B.CODPRODOPERA,4) AS COD_PROD,
                    /* Tipología de riesgo principal de las operaciones */
                    CASE
                       WHEN REFCOMMODITIES LIKE ('%ALUMINI%') THEN 'ALUMINIUM'
                       WHEN REFCOMMODITIES LIKE ('%OIL%')     THEN 'CRUDE OIL'
                       WHEN REFCOMMODITIES LIKE ('%FUEL%')    THEN 'FUEL'
                       WHEN REFCOMMODITIES LIKE ('%COBRE%')   THEN 'COBRE'
                       WHEN REFCOMMODITIES LIKE ('%ZINC%')    THEN 'ZINC'
                       WHEN REFCOMMODITIES LIKE ('%ELECT%')   THEN 'ELECTRICITY' /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
                    END AS COMMODITY_TYPE, OR_VIDINI, OR_VIDRES, IN_ANTIGU
                  , b.OPERACIONOFEX, b.DIVISALIMCONCACT  /*** AÑADIMOS LA INFORMACIÓN DE OFEX ***/
               FROM BAS_MEN.BASILEA                a
               LEFT JOIN BAS_MEN.M_BASILEA_SA_CCR  b
                 ON substr(a.OR_REFOPE2,5) = substr(b.OPERACIONOFEX,1,12)
                AND a.OR_DIVISA = CASE
                                     WHEN PRODUCTOBASICO = 'TSX' THEN a.OR_DIVISA
                                     ELSE b.DIVISACONTRAPART
                                  END
               LEFT JOIN BAS_MEN.WW_RISK_2 c
                 ON CASE
                       WHEN A.FI_TIPEXP IN ('OTC', 'Repos') AND OR_ENTITY IN (81, 8211) THEN A.OR_CLUNIPROD_OPERA || LPAD(A.OR_CLUNIOPERA, 15, '0')
                       ELSE NULL
                    END = c.GLOBALID
               LEFT JOIN BAS_MEN.D_CODPRODOPERA_ADSDET d
                 ON b.CODPRODOPERA = d.CODPRODOPERA
               LEFT JOIN (SELECT OR_IDREG AS OR_IDREG_INI, OR_CTAIND
                          FROM BAS_MEN.BASILEA_INI) e
                 ON a.OR_IDREG = e.OR_IDREG_INI
              WHERE OR_ENTITY = 81
                AND FI_ELIMI1 = 'NO'
                AND FI_EPICON like '03003%'
                AND IN_METODE <> '?'
                AND OR_NUMOFI IN (800, 801, 813, 825, 821)
           ) A
     WHERE SEGMENTO_COLA <> '?';

    v_NRegs_Ins := SQL%ROWCOUNT;

    COMMIT;


/*** FILTRO DEFINIDO POR IT a partir de Junio unicamente ***/

/*WHERE FI_TIPEXP = 'OTC'
AND OR_ENTITY = 81
AND FI_ELIMI1 = 'NO'
AND IN_TIPOREG NOT IN ('CERENTVA')
AND IN_METODE <> '?'
AND CALCULATED  SEGMENTO_COLA <> '?' */

--Los filtros a realizar son:
--
--  FI_EPICON like '03003%' -> Se filtran los epígrafes contables que contienen derivados.
--  OR_ENTITY = 81 -> Se toma la entidad Banco Sabadell individual.
--  FI_ELIMI1: Se toman los campos que entran dentro del cálculo de requisitos de capital por riesgo de crédito. (OPCVEN: Actualmente no tienen riesgo de contraparte, pero se deberán incluir en el SA/CCR.
--  TIPO_REG NOT LIKE '%DN%': Se eliminan las posiciones post-netting, para quedarnos únicamente con las pre-netting
--  TIPO_REG NOT LIKE '%CERENTVA%':


--6)--------------------------------------

    VN_NumErr := 6;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.FUSIONADA';

    INSERT INTO BAS_MEN.FUSIONADA
    SELECT IDENT_CONTRATO, OR_CLUNIPROD_CUENT, OR_CLUNICUENT, OR_TIPOPE, GLOBALID, OR_NIFCIF, IN_SEGMBSINI,
           OR_FUTURS, OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA, OR_NOMPER, OR_CODISO, OR_IDCNAE, IN_METODE,
           FI_ELIMI1, FI_EADAIRB, IN_FACTCOR, FI_EADCONAIRB,
           IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, CODPRODOPERA, MARCAPUTCALL, REFCOMMODITIES,
           REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, PRODUCTOBASICO,
           PRODUCTOTGR, DESCPRODO, FCHOPERACION_1, FCHVENCIMOPER_1, FCHOPERACION_2, FCHVENCIMOPER_2,
           DIVISACONTRAPART, OR_ENTITY, OR_CTAIND, IN_SEGMBS0,FI_EPICON, IN_TIPOREG, OR_REFOPE2, ESTANBDU, SEGMENTO_COLA,
           WWR, COD_PROD, TIPO_RIESGO_PRINCIPAL_AUX, COMMODITY_TYPE, HEDGING_SET, OPERACIONOFEX, DIVISALIMCONCACT
      FROM BAS_MEN.PERIMETRO_BASILEA
           ----------
     UNION ALL
           ----------
    SELECT IDENT_CONTRATO, OR_CLUNIPROD_CUENT, OR_CLUNICUENT, OR_TIPOPE, GLOBALID, OR_NIFCIF, IN_SEGMBSINI,
           OR_FUTURS, OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA, OR_NOMPER, OR_CODISO, OR_IDCNAE, IN_METODE,
           FI_ELIMI1, FI_EADAIRB, IN_FACTCOR, FI_EADCONAIRB,
           IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, CODPRODOPERA, MARCAPUTCALL, REFCOMMODITIES,
           REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, PRODUCTOBASICO,
           PRODUCTOTGR,  DESCPRODO, FCHOPERACION_1, FCHVENCIMOPER_1, FCHOPERACION_2, FCHVENCIMOPER_2,
           DIVISACONTRAPART, OR_ENTITY, OR_CTAIND, IN_SEGMBS0, FI_EPICON, IN_TIPOREG, OR_REFOPE2, ESTANBDU ,SEGMENTO_COLA,
           WWR, COD_PROD, TIPO_RIESGO_PRINCIPAL_AUX, COMMODITY_TYPE, HEDGING_SET, null OPERACIONOFEX, DIVISALIMCONCACT
      FROM BAS_MEN.PERIMETRO_MEXICO;

    COMMIT;

    VN_NumErr := 7;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.TABLA_DMR';

    INSERT /*+ PARALLEL (I 4) */ INTO BAS_MEN.TABLA_DMR I
    SELECT /*+ PARALLEL (S 4) */ GLOBAL_ID
         , CURRENCY_PAY_DRF
         , CURRENCY_RECEIVE_DRF
         , FX_SPOT_RATE_PAY
         , FX_SPOT_RATE_RECEIVE
         , TRADE_DATE    AS TRADE_DATE1
         , MATURITY_DATE AS MATURITY_DATE1
      FROM DCRPROP_MENSUAL.BS_OUT_DMR S;

    COMMIT;

    VN_NumErr := 8;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.TABLA_BACKOFFICE';

    INSERT /*+ PARALLEL (I 4) */ INTO BAS_MEN.TABLA_BACKOFFICE I
    SELECT /*+ PARALLEL (S 4) */ GID
         , INDI_PAGO
         , INDI_RECI
      FROM DCRPROP_MENSUAL.BS_BO_DERIVADOS S;

    COMMIT;

    VN_NumErr := 9;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.DATE_CHANGE';

    INSERT /*+ PARALLEL (dat,4) */ INTO BAS_MEN.DATE_CHANGE dat
    SELECT /*+ PARALLEL (A,4) */ A.*,
            TRUNC((FECHA_VENCIMIENTO - FECHA_OPERACION)/365) AS MTY
      FROM (
             SELECT IDENT_CONTRATO, OR_CLUNIPROD_CUENT, OR_CLUNICUENT, OR_TIPOPE, GLOBALID, OR_NIFCIF, IN_SEGMBSINI, OR_FUTURS
                  , OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA, OR_NOMPER, OR_CODISO, OR_IDCNAE, IN_METODE, FI_ELIMI1, FI_EADAIRB
                  , IN_FACTCOR, FI_EADCONAIRB, IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, CODPRODOPERA, MARCAPUTCALL
                  , REFCOMMODITIES, REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, PRODUCTOBASICO
                  , PRODUCTOTGR, DESCPRODO, DIVISACONTRAPART, ESTANBDU, OR_ENTITY, OR_CTAIND, SEGMENTO_COLA, WWR, COD_PROD
                  , TIPO_RIESGO_PRINCIPAL_AUX, COMMODITY_TYPE, HEDGING_SET, IN_SEGMBS0, FI_EPICON, IN_TIPOREG, OR_REFOPE2
                  , FCHOPERACION_1, FCHOPERACION_2, FCHVENCIMOPER_1, FCHVENCIMOPER_2,
                    CASE
                       WHEN FCHOPERACION_1 IS NOT NULL THEN FCHOPERACION_1
                       WHEN FCHOPERACION_2 IS NOT NULL THEN FCHOPERACION_2
                       ELSE null
                    END AS FECHA_OPERACION,
                    CASE
                       WHEN FCHVENCIMOPER_1 IS NOT NULL THEN FCHVENCIMOPER_1
                       WHEN FCHVENCIMOPER_2 IS NOT NULL THEN FCHVENCIMOPER_2
                       ELSE null
                    END AS FECHA_VENCIMIENTO,
                    OPERACIONOFEX, DIVISALIMCONCACT
               FROM BAS_MEN.FUSIONADA
            ) A;

     COMMIT;

    VN_NumErr := 10;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_BASILEA_AUX';

    INSERT /*+ PARALLEL (bas 4) */ INTO BAS_MEN.PERIMETRO_BASILEA_AUX bas
    SELECT /*+ PARALLEL (a 4) PARALLEL (b 4) PARALLEL (c 4) */
           a.IDENT_CONTRATO ,a.OR_CLUNIPROD_CUENT ,a.OR_CLUNICUENT ,a.OR_TIPOPE ,a.GLOBALID ,a.OR_NIFCIF ,a.IN_SEGMBSINI ,a.OR_FUTURS ,a.OR_DIVISA ,a.OR_CODIGO_BIC ,a.OR_FAIRVA ,
           a.OR_NOMPER ,a.OR_CODISO ,a.OR_IDCNAE ,a.IN_METODE ,a.FI_ELIMI1, a.FI_EADAIRB ,a.IN_FACTCOR ,a.FI_EADCONAIRB ,
           a.IN_INDMOR ,a.OR_IDREG ,a.OR_CLUNIPROD_OPERA ,a.OR_CLUNIOPERA ,a.CODPRODOPERA ,a.MARCAPUTCALL ,a.REFCOMMODITIES ,a.REFERENCIA ,a.REFTIPODECAMBIO ,a.SUBYACENTEACCION ,
           a.TIPOINTERSTRIKE ,a.APLICACION ,a.PRODUCTOBASICO ,a.PRODUCTOTGR ,a.DESCPRODO ,a.DIVISACONTRAPART ,a.ESTANBDU ,a.OR_ENTITY ,a.OR_CTAIND ,a.SEGMENTO_COLA ,a.WWR ,a.COD_PROD ,
           a.TIPO_RIESGO_PRINCIPAL_AUX ,a.COMMODITY_TYPE, a.HEDGING_SET, a.IN_SEGMBS0 ,a.FI_EPICON ,a.IN_TIPOREG , a.OR_REFOPE2
         , a.FCHOPERACION_1 ,a.FCHOPERACION_2 ,a.FCHVENCIMOPER_1 ,a.FCHVENCIMOPER_2 ,a.FECHA_OPERACION ,a.FECHA_VENCIMIENTO ,a.MTY
         , b.GLOBAL_ID
         , nvl(b.CURRENCY_PAY_DRF, '?' ) as CURRENCY_PAY_DRF
         , b.CURRENCY_RECEIVE_DRF
         , b.FX_SPOT_RATE_PAY
         , b.FX_SPOT_RATE_RECEIVE
         , c.GID
         , c.INDI_PAGO
         , c.INDI_RECI
         --------
         , CASE
              WHEN b.GLOBAL_ID IS NOT NULL THEN 1
              ELSE 0
           END AS EN_DMR
         --------
         , CASE
              WHEN c.GID IS NOT NULL THEN 1
              ELSE 0
           END AS EN_BACKOFFICE
         --------
         , COUNT(*) AS REG
         , a.OPERACIONOFEX, a.DIVISALIMCONCACT
      FROM BAS_MEN.DATE_CHANGE           a
      LEFT JOIN BAS_MEN.TABLA_DMR        b  ON a.GLOBALID = b.GLOBAL_ID
      LEFT JOIN BAS_MEN.TABLA_BACKOFFICE c  ON a.GLOBALID = c.GID
     GROUP BY a.IDENT_CONTRATO, a.OR_CLUNIPROD_CUENT, a.OR_CLUNICUENT, a.OR_TIPOPE, a.GLOBALID,
              a.OR_NIFCIF, a.IN_SEGMBSINI, a.OR_FUTURS, a.OR_DIVISA, a.OR_CODIGO_BIC, a.OR_FAIRVA,
              a.OR_NOMPER, a.OR_CODISO, a.OR_IDCNAE, a.IN_METODE, a.FI_ELIMI1, a.FI_EADAIRB,
              a.IN_FACTCOR, a.FI_EADCONAIRB,a.IN_INDMOR, a.OR_IDREG,
              a.OR_CLUNIPROD_OPERA, a.OR_CLUNIOPERA, a.CODPRODOPERA, a.MARCAPUTCALL, a.REFCOMMODITIES,
              a.REFERENCIA, a.REFTIPODECAMBIO, a.SUBYACENTEACCION, a.TIPOINTERSTRIKE, a.APLICACION,
              a.PRODUCTOBASICO, a.PRODUCTOTGR, a.DESCPRODO, a.DIVISACONTRAPART, a.ESTANBDU, a.OR_ENTITY, a.OR_CTAIND,
              a.SEGMENTO_COLA, a.WWR, a.COD_PROD, a.TIPO_RIESGO_PRINCIPAL_AUX, a.COMMODITY_TYPE, a.HEDGING_SET, a.IN_SEGMBS0, a.FI_EPICON, a.IN_TIPOREG,a.OR_REFOPE2,
              a.FCHOPERACION_1, a.FCHOPERACION_2, a.FCHVENCIMOPER_1, a.FCHVENCIMOPER_2, a.FECHA_OPERACION, a.FECHA_VENCIMIENTO,
              a.MTY, b.GLOBAL_ID, nvl(b.CURRENCY_PAY_DRF, '?' ), b.CURRENCY_RECEIVE_DRF, b.FX_SPOT_RATE_PAY, b.FX_SPOT_RATE_RECEIVE, c.GID,
              c.INDI_PAGO, c.INDI_RECI, CASE WHEN b.GLOBAL_ID IS NOT NULL THEN 1 ELSE 0 END, CASE WHEN c.GID IS NOT NULL THEN 1 ELSE 0 END,
              a.OPERACIONOFEX, a.DIVISALIMCONCACT;

    COMMIT;

    VN_NumErr := 11;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.PERIMETRO_BASILEA_2');

    INSERT /*+ PARALLEL (bas 8) */ INTO BAS_MEN.PERIMETRO_BASILEA_2 bas
    SELECT A.*
         , CASE
              WHEN REFERENCIASFINAL_B LIKE '%/%' THEN /*catx('/',CALCULATED CURRENCY1 ,CALCULATED CURRENCY2)*/ TRIM(CURRENCY1 ||'/'|| CURRENCY2)
              ELSE REFERENCIASFINAL_B
           END AS REFERENCIASFINAL
         , CASE
             WHEN TIPO_RIESGO_PRINCIPAL = 1 THEN 'IR'
             WHEN TIPO_RIESGO_PRINCIPAL = 2 THEN 'COMMODITIES'
             WHEN TIPO_RIESGO_PRINCIPAL = 3 THEN 'AAAA'
             WHEN TIPO_RIESGO_PRINCIPAL = 4 THEN 'BBBB'
             WHEN TIPO_RIESGO_PRINCIPAL = 5 THEN 'EQUITIES'
             WHEN TIPO_RIESGO_PRINCIPAL = 6 THEN 'FX'
           END AS ASSET_CLASS
      FROM ( SELECT B.*
                  , SUBSTR(REFERENCIASFINAL_B,1,3) AS DIVISA1
                  , SUBSTR(REFERENCIASFINAL_B,5,7) AS DIVISA2
                  , CASE
                       WHEN REFERENCIASFINAL_B LIKE '%/%' AND SUBSTR(REFERENCIASFINAL_B,1,3) <  SUBSTR(REFERENCIASFINAL_B,5,7) THEN SUBSTR(REFERENCIASFINAL_B,1,3)
                       WHEN REFERENCIASFINAL_B LIKE '%/%' AND SUBSTR(REFERENCIASFINAL_B,1,3) >= SUBSTR(REFERENCIASFINAL_B,5,7) THEN SUBSTR(REFERENCIASFINAL_B,5,7)
                       ELSE null
                    END AS CURRENCY1
                  , CASE
                       WHEN REFERENCIASFINAL_B LIKE '%/%' AND SUBSTR(REFERENCIASFINAL_B,1,3) >  SUBSTR(REFERENCIASFINAL_B,5,7) THEN SUBSTR(REFERENCIASFINAL_B,1,3)
                       WHEN REFERENCIASFINAL_B LIKE '%/%' AND SUBSTR(REFERENCIASFINAL_B,1,3) <= SUBSTR(REFERENCIASFINAL_B,5,7) THEN SUBSTR(REFERENCIASFINAL_B,5,7)
                       ELSE null
                    END AS CURRENCY2
               FROM ( SELECT C.*
                           , CASE
                                /* 05/10/2021 RMR-I | Añadida nueva validacion */
                                --WHEN REFERENCIASFINAL_A IS NULL AND OPERACIONOFEX IS NOT NULL THEN DIVISA_OFEX
                                --ELSE REFERENCIASFINAL_A
                                WHEN REFERENCIASFINAL_A IS NOT NULL THEN REFERENCIASFINAL_A
                                WHEN DIVISA_OFEX IS NOT NULL THEN DIVISA_OFEX
                                ELSE NULL
                                /* 05/10/2021 RMR-F */
                             END AS REFERENCIASFINAL_B  /******NUEVO*****/
                        FROM ( SELECT /*+ PARALLEL (A 8) PARALLEL (B 8) */ DISTINCT
                                      IDENT_CONTRATO, OR_CLUNIPROD_CUENT, OR_CLUNICUENT, OR_TIPOPE, GLOBALID, OR_NIFCIF, IN_SEGMBSINI, OR_FUTURS, OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA,
                                      OR_NOMPER, OR_CODISO, OR_IDCNAE, IN_METODE, FI_ELIMI1, FI_EADAIRB, IN_FACTCOR, FI_EADCONAIRB,
                                      IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, A.CODPRODOPERA, MARCAPUTCALL, REFCOMMODITIES, REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION,
                                      TIPOINTERSTRIKE, A.APLICACION, A.PRODUCTOBASICO, PRODUCTOTGR, DESCPRODO, A.DIVISACONTRAPART, ESTANBDU, OR_ENTITY, OR_CTAIND, SEGMENTO_COLA, WWR, COD_PROD,
                                      TIPO_RIESGO_PRINCIPAL_AUX, COMMODITY_TYPE, HEDGING_SET, IN_SEGMBS0, FI_EPICON, IN_TIPOREG, OR_REFOPE2, FECHA_OPERACION, FECHA_VENCIMIENTO, MTY,
                                      GLOBAL_ID, CURRENCY_PAY_DRF, CURRENCY_RECEIVE_DRF, FX_SPOT_RATE_PAY, FX_SPOT_RATE_RECEIVE, GID, INDI_PAGO, INDI_RECI, EN_DMR, EN_BACKOFFICE, REG,
                                      OPERACIONOFEX,
                                      CASE
                                         WHEN ESTANBDU = 0 THEN CASE
                                                                 WHEN GLOBALID = '999999999999999999' THEN null
                                                                 ELSE CASE
                                                                         WHEN OR_TIPOPE= 'SWAPS' THEN 'VEN'
                                                                         WHEN OR_TIPOPE= 'OP RV' THEN CASE
                                                                                                         WHEN INDI_RECI IS NULL     THEN null
                                                                                                         WHEN INDI_RECI IS NOT NULL THEN 'COM'
                                                                                                         WHEN INDI_PAGO = 'BANC SABADELL, S.A.' THEN null
                                                                                                      END
                                                                         WHEN OR_TIPOPE = 'OP TI' THEN CASE
                                                                                                          WHEN INDI_PAGO = 'EURIBOR HIPOTECARIO 1Y' THEN 'VEN'
                                                                                                          ELSE null
                                                                                                       END
                                                                      END
                                                              END
                                         WHEN ESTANBDU=1 THEN CASE
                                                                 WHEN MARCAPUTCALL IS NOT NULL THEN MARCAPUTCALL
                                                                   ELSE CASE
                                                                           WHEN EN_DMR=0 AND EN_BACKOFFICE = 0 THEN null
                                                                           WHEN EN_DMR=1 AND EN_BACKOFFICE = 0 THEN 'COM'
                                                                           ELSE CASE
                                                                                   WHEN INDI_RECI IS NOT NULL AND INDI_PAGO IS NULL     THEN 'COM'
                                                                                   WHEN INDI_RECI IS NULL     AND INDI_PAGO IS NOT NULL THEN 'VEN'
                                                                                   ELSE null
                                                                                END
                                                                        END
                                                              END
                                      END AS SIGNOCOMPRAVENTA
                                    , CASE
                                         WHEN ESTANBDU=0 THEN CASE
                                                                 WHEN GLOBALID = '999999999999999999' THEN null
                                                                 ELSE CASE
                                                                         WHEN OR_TIPOPE= 'SWAPS' THEN INDI_PAGO
                                                                         WHEN OR_TIPOPE= 'OP RV' THEN CASE
                                                                                                         WHEN INDI_RECI IS NULL AND INDI_PAGO IS NOT NULL THEN null
                                                                                                         WHEN INDI_RECI IS NULL THEN null
                                                                                                         WHEN INDI_PAGO = 'BANC SABADELL, S.A.' THEN null
                                                                                                         WHEN INDI_RECI IS NOT NULL THEN INDI_RECI
                                                                                                      END
                                                                         WHEN OR_TIPOPE = 'OP TI' THEN CASE
                                                                                                          WHEN INDI_PAGO = 'EURIBOR HIPOTECARIO 1Y' THEN 'EURIBOR HIPOTECARIO 1Y'
                                                                                                          ELSE null
                                                                                                       END
                                                                      END
                                                              END
                                          WHEN ESTANBDU=1 THEN CASE
                                                                /*WHEN CATX('',REFCOMMODITIES,REFTIPODECAMBIO,REFERENCIA,SUBYACENTEACCION) IS NOT NULL THEN CATX('',REFCOMMODITIES,REFTIPODECAMBIO,REFERENCIA,SUBYACENTEACCION)*/
                                                                  WHEN TRIM(REFCOMMODITIES||''||REFTIPODECAMBIO||''||REFERENCIA||''||SUBYACENTEACCION) IS NOT NULL THEN TRIM(REFCOMMODITIES ||''||REFTIPODECAMBIO ||''||REFERENCIA ||''||SUBYACENTEACCION)
                                                                  ELSE CASE
                                                                          WHEN EN_DMR=0 AND EN_BACKOFFICE = 0 THEN null
                                                                          WHEN EN_DMR=1 AND EN_BACKOFFICE = 0 THEN /*CATX('/',CURRENCY_PAY_DRF,CURRENCY_RECEIVE_DRF)*/ TRIM(CURRENCY_PAY_DRF ||'/'|| CURRENCY_RECEIVE_DRF)
                                                                       END
                                                               END
                                      END AS REFERENCIASFINAL_A   /******RENOMBRADO*****/
                                    --catx('/',B.DIVISALIMCONCACT,B.DIVISACONTRAPART) AS DIVISA_OFEX
                                    , CASE WHEN DIVISALIMCONCACT IS NULL OR DIVISACONTRAPART IS NULL THEN  TRIM(DIVISALIMCONCACT || DIVISACONTRAPART)
                                           ELSE TRIM(DIVISALIMCONCACT ||'/'|| DIVISACONTRAPART)
                                      END AS DIVISA_OFEX
                                      /*** 2º vuelta para asignar Factor de riesgo a los contratos en blanco*/
                                    , CASE
                                         WHEN TIPO_RIESGO_PRINCIPAL_AUX IS NULL THEN
                                            CASE
                                               WHEN FI_EPICON LIKE '030030102000000000000000000000' THEN 1
                                               WHEN FI_EPICON LIKE '030030104000000000000000000000' THEN 2
                                               WHEN FI_EPICON LIKE '030030103000000000000000000000' THEN 5
                                               WHEN FI_EPICON LIKE '030030101000000000000000000000' THEN 6
                                            END
                                         WHEN TIPO_RIESGO_PRINCIPAL_AUX IS NOT NULL THEN TO_NUMBER(TIPO_RIESGO_PRINCIPAL_AUX)
                                      END AS TIPO_RIESGO_PRINCIPAL
                               FROM BAS_MEN.PERIMETRO_BASILEA_AUX a
                               /* FMRR - 01/09/2021 -- Elinamos la tabla de INPUT_OFEX ya que se añade los campos necesarios a admin_bdu.m_basilea_sa_ccr*/
                              -- LEFT JOIN BAS_MEN.INPUT_OFEX       b  /**** AÑADIMOS LA INFORMACIÓN DE OFEX ****/
                              --   ON a.OR_REFOPE2 = b.OPERACIONOFEX
                              --  AND a.OR_DIVISA  = b.DIVISA
                             )C
                     ) B
            )A;

    COMMIT;

    VN_NumErr := 12;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_BASILEA_RWA';

    INSERT /*+ PARALLEL (b,4) */ INTO BAS_MEN.PERIMETRO_BASILEA_RWA b
    SELECT A.*,
           /* RWA PCT */
           /*CASE WHEN EAD <> 0 THEN COALESCE((RWA/EAD),0)
                ELSE 0
            END*/0 AS FI_RWA
      FROM(
            SELECT /*+ PARALLEL (a,4) */
                   SEGMENTO_COLA
                 , IN_METODE
                   /* RWA */
                 , /*COALESCE(SUM(CASE WHEN IN_METODE = 'AIRB' THEN FI_RWACONAIRB * IN_FACTCOR
                                     WHEN IN_METODE = 'STDA' THEN FI_EXPSTDA_PHASEIN_CON * FI_RWASTDA * IN_FACTCOR
                                END),0
                           )*/0 AS RWA
                   /* EAD */
                 , /*COALESCE(SUM(CASE WHEN IN_METODE = 'AIRB' THEN FI_EADCONAIRB
                                     WHEN IN_METODE = 'STDA' THEN FI_EXPSTDA_PHASEIN_CON
                                     ELSE 0
                                END),0
                            )*/0 AS EAD
              FROM BAS_MEN.PERIMETRO_BASILEA_2 a
             GROUP BY SEGMENTO_COLA, IN_METODE
    ) A;

    COMMIT;

    VN_NumErr := 13;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.REPOS_PERIMETRO';

    INSERT /*+ PARALLEL (I 4) */ INTO BAS_MEN.REPOS_PERIMETRO I
    SELECT /*+ PARALLEL (a 4) PARALLEL (b 4) */
           CASE
               WHEN a.FI_TIPEXP IN ('OTC', 'Repos') AND a.OR_ENTITY IN (81, 8211) THEN a.OR_CLUNIPROD_OPERA || LPAD(a.OR_CLUNIOPERA, 15, '0')
               ELSE NULL
           END AS GLOBALID, OR_FUTURS, OR_CODIGO_BIC, OR_NIFCIF, FI_TIPEXP, OR_FAIRVA, FI_EADCONAIRB,
           IN_FACTCOR, FI_EADAIRB, IN_METODE ,IN_SEGMBSINI,
           CASE
              WHEN IN_SEGMBSINI = '007' AND OR_CODIGO_BIC <> '?' THEN OR_CODIGO_BIC
              WHEN OR_NIFCIF <> '?' THEN OR_NIFCIF
              WHEN OR_NUMOFI IN (800, 801, 813, 821, 825) THEN OR_NUMOFI || OR_CTACLI
              WHEN OR_COISIN <> '?' THEN OR_COISIN
              ELSE '?'
           END AS SEGMENTO_COLA,
           CASE
              WHEN b.GLOBALID IS NULL THEN 0
              ELSE 1
           END AS WWR_FLAG_REPOS
    --FROM BAS_MEN.BASILEA_FUSIONADA_COREP_V2 a
      FROM BAS_MEN.BASILEA     a
      LEFT JOIN BAS_MEN.WW_RISK_2      b
        ON CASE
               WHEN a.FI_TIPEXP IN ('OTC', 'Repos') AND a.OR_ENTITY IN (81, 8211) THEN a.OR_CLUNIPROD_OPERA || LPAD(a.OR_CLUNIOPERA, 15, '0')
               ELSE NULL
           END = b.GLOBALID
     WHERE FI_TIPEXP = 'Repos';

    COMMIT;

    VN_NumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, null, null, v_NRegs_Ins);
    COMMIT;

    VN_NumErr := 999;

EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;



/***********************************************************************************************************/
/*****************************             CALCULO RC                   ************************************/
/***********************************************************************************************************/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_RC (FECHA_PROCESO DATE) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_SA/CCR_RC';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);


BEGIN

    VN_NumErr := 1;
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;
    --
    VN_NumErr := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.FAIRVA_AGREGADO_AUX';

    INSERT /*+ PARALLEL (aux,4) */ INTO BAS_MEN.FAIRVA_AGREGADO_AUX aux
    SELECT /*+ PARALLEL (a,4) */
           SEGMENTO_COLA
         , IN_METODE
         , SUM(OR_FAIRVA) AS FAIRVAL_AGREGADO
      FROM BAS_MEN.PERIMETRO_BASILEA_2 a
     GROUP BY SEGMENTO_COLA, IN_METODE;

    COMMIT;

    VN_NumErr := 82;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.FAIRVA_AGREGADO';

    INSERT /*+ PARALLEL (f,4) */ INTO BAS_MEN.FAIRVA_AGREGADO f
    SELECT /*+ PARALLEL (a,4) PARALLEL (b,4) */
           A.*, B.IN_SEGMBSINI, B.OR_NOMPER
      FROM
            (SELECT SEGMENTO_COLA, IN_METODE ,SUM(OR_FAIRVA) AS FAIRVAL_AGREGADO
               FROM BAS_MEN.PERIMETRO_BASILEA_2
              GROUP BY SEGMENTO_COLA, IN_METODE ) A
      LEFT JOIN
            (SELECT DISTINCT SEGMENTO_COLA, IN_SEGMBSINI, OR_NOMPER  /*DUPLICADOS*/
               FROM BAS_MEN.PERIMETRO_BASILEA_2
              GROUP BY SEGMENTO_COLA, IN_SEGMBSINI, OR_NOMPER) B
        ON A.SEGMENTO_COLA = B.SEGMENTO_COLA;

    COMMIT;

/***
  CREAMOS TABLAS DE COLATERALES DE CCP, UNICAMENTE TENEMOS EN CUENTA DERIVADOS
             (LAS REPOS VAN POR EL PROCESO DE BASILEA CREDITO)
***/

    VN_NumErr := 83;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.CCP_COLATERALES';

    INSERT /*+ PARALLEL (ccp,4) */ INTO BAS_MEN.CCP_COLATERALES ccp
    SELECT /*+ PARALLEL (a,4) PARALLEL (b,4) */
           A.CAMARA,
           A.SEGMENTO_CUBIERTO,
           CASE
             WHEN A.CAMARA = 'Eurex' THEN '777005862624'
             WHEN A.CAMARA = 'BME'   THEN 'A78973864'
           END AS SEGMENTO_COLA,
          (COALESCE(A.VM_EUR,0) + COALESCE((A.VM_USD / B.CAMB_USD),0) + COALESCE((A.VM_GBP / B.CAMB_GBP),0)) AS VM_EUR_TOT,
           A.IM_EUR
      FROM
           ( SELECT CAMARA                  AS CAMARA,
                    1                       AS INDICE,
                    SEGMENTO_CUBIERTO       AS SEGMENTO_CUBIERTO,
                    nvl(VM_ACUMULADO_EUR,0) AS VM_EUR,
                    nvl(VM_ACUMULADO_USD,0) AS VM_USD,
                    nvl(VM_ACUMULADO_GBP,0) AS VM_GBP,
                    IM_NO_SEGREGADO         AS IM_EUR
               FROM BAS_MEN.SACCR_CAMARA_COMPENSACION   --WORK.INPUT_CAMARAS_0000
              WHERE CAMARA IN ('Eurex', 'BME')
                AND SEGMENTO_CUBIERTO = 'Derivados'
            ) A
      LEFT JOIN
            (SELECT
                    1 AS INDICE,
                    MAX(CASE WHEN DIVISA = 'MXN' THEN CANVIO_BCE ELSE 0 END) AS CAMB_MXN,
                    MAX(CASE WHEN DIVISA = 'USD' THEN CANVIO_BCE ELSE 0 END) AS CAMB_USD,
                    MAX(CASE WHEN DIVISA = 'GBP' THEN CANVIO_BCE ELSE 0 END) AS CAMB_GBP
               FROM BAS_MEN.TIPOS_BCE
              WHERE DIVISA IN ('MXN','USD','GBP')
            ) B
         ON A.INDICE = B.INDICE;

    COMMIT;

    VN_NumErr := 84;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.TABLA_RC';

    INSERT /*+ PARALLEL (rc,4) */ INTO BAS_MEN.TABLA_RC rc
    SELECT /*+ PARALLEL (a,4) PARALLEL (b,4) PARALLEL (c,4) */
           A.SEGMENTO_COLA, IN_METODE, FAIRVAL_AGREGADO, IN_SEGMBSINI, OR_NOMPER,
           -- CASE
           --   WHEN b.COD_SWIFT_CONTR IS NOT NULL THEN B.BAL_COL
           --   WHEN C.SEGMENTO_COLA   IS NOT NULL THEN C.VM_EUR_TOT
           --   ELSE 0
           -- END AS BAL_COL,
           /* FJPL - 17/03/2022 - HDEV-132265 SACCR - EUREX CSA CAMBIO DE SIGNO */
           CASE
             WHEN b.COD_SWIFT_CONTR IS NOT NULL THEN B.BAL_COL
             WHEN C.SEGMENTO_COLA   IS NOT NULL AND A.SEGMENTO_COLA = '777005862624' THEN C.VM_EUR_TOT * - 1
             WHEN C.SEGMENTO_COLA   IS NOT NULL AND A.SEGMENTO_COLA = 'A78973864'    THEN C.VM_EUR_TOT
             ELSE 0
           END AS BAL_COL,
           CASE
             WHEN b.COD_SWIFT_CONTR IS NOT NULL THEN B.IA_CONTR
             WHEN C.SEGMENTO_COLA   IS NOT NULL THEN C.IM_EUR
             ELSE 0
           END AS IA_CONTR,
           CASE
             WHEN b.COD_SWIFT_CONTR IS NOT NULL THEN B.IA_FAV
             WHEN C.SEGMENTO_COLA   IS NOT NULL THEN 0
             ELSE 0
           END AS IA_FAV,
           CASE
             WHEN b.COD_SWIFT_CONTR IS NOT NULL THEN B.UMBRAL
             WHEN C.SEGMENTO_COLA   IS NOT NULL THEN 0
             ELSE 0
           END AS UMBRAL,
           CASE
             WHEN b.COD_SWIFT_CONTR IS NOT NULL THEN B.MTA_COBRO
             WHEN C.SEGMENTO_COLA   IS NOT NULL THEN 0
             ELSE 0
           END AS MTA_COBRO,
           CASE
             WHEN b.COD_SWIFT_CONTR IS NOT NULL
               OR C.SEGMENTO_COLA   IS NOT NULL THEN 'MARGINED'
             ELSE 'UNMARGINED'
           END AS MARGIN_FLAG,
           FECHA,  VALUATION_DATE, SETTLEMENT_DATE, COD_SWIFT_CONTR, NOM_CONTR, EXPOSIC,
           DIVISA_EXPOSIC, DIVISA_COL, COL_DE, CONTRACT_DATE, NCORR, RESIDENT, PAIS, CONTRATO,
           PERIOD, MTM , MTA_PAGO, IND_SEG, TIPO_GEST
      FROM BAS_MEN.FAIRVA_AGREGADO      a
      LEFT JOIN BAS_MEN.QIS_COLATERALES b
        ON a.SEGMENTO_COLA = b.COD_SWIFT_CONTR
      LEFT JOIN BAS_MEN.CCP_COLATERALES c
        ON A.SEGMENTO_COLA = c.SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 85;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.CALCULO_RC_AUX';

    INSERT /*+ PARALLEL (rc,4) */ INTO BAS_MEN.CALCULO_RC_AUX rc
    SELECT /*+ PARALLEL (a,4) */
           a.*,
           CASE
              WHEN MARGIN_FLAG = 'UNMARGING' THEN GREATEST(FAIRVAL_AGREGADO,0)
            --ELSE GREATEST(FAIRVAL_AGREGADO - (BAL_COL + IA_CONTR - IA_FAV) - (IA_FAV - IA_CONTR), UMBRAL + MTA_COBRO - (IA_FAV - IA_CONTR),0)
              ELSE GREATEST(FAIRVAL_AGREGADO - (BAL_COL + (IA_FAV - IA_CONTR)), UMBRAL + MTA_COBRO - (IA_FAV - IA_CONTR),0) --RBR 2021/09/13 Cambio calculo
           END AS RC_170,
           CASE
              WHEN MARGIN_FLAG = 'UNMARGING' THEN FAIRVAL_AGREGADO
            --ELSE FAIRVAL_AGREGADO - (BAL_COL + IA_CONTR - IA_FAV) - (IA_FAV - IA_CONTR)
              ELSE FAIRVAL_AGREGADO - (BAL_COL + (IA_FAV - IA_CONTR)) --RBR 2021/09/13 Cambio calculo
           END AS VC_170
      FROM BAS_MEN.TABLA_RC a;

    COMMIT;


/*** INCORPORAMOS EL CVA CONTABLE EL CUAL SE AÑADE AL RC PAR LAS COLUMNAS 150 Y 160 ***/
    VN_NumErr := 86;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.CVA_CONTABLE';

    INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.CVA_CONTABLE c
    SELECT /*+ PARALLEL (a,4) */
           GLOBAL_ID
         , CVA
      FROM DCRPROP_MENSUAL.BS_OUT_DMR a
     WHERE GLOBAL_ID NOT IN ('999999999999999999','000000000000000000');

    COMMIT;

    VN_NumErr := 87;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.CVA_CONTABLE_2');

    INSERT /*+ PARALLEL (co,4) */ INTO BAS_MEN.CVA_CONTABLE_2 co
    SELECT SEGMENTO_COLA
         , SUM(CVA) AS CVA_CONTABLE
      FROM
           (SELECT /*+ PARALLEL (a,4) PARALLEL (b,4) */
                   SEGMENTO_COLA
                 , GLOBAL_ID
                 , CVA
              FROM BAS_MEN.PERIMETRO_BASILEA  a
              LEFT JOIN BAS_MEN.CVA_CONTABLE  b
                ON a.GLOBALID = b.GLOBAL_ID
            ) C
      GROUP BY C.SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 88;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.CALCULO_RC');

    INSERT /*+ PARALLEL (b,4) */ INTO BAS_MEN.CALCULO_RC b
    SELECT /*+ PARALLEL (t1,4) PARALLEL (t2,4) */
           T1.*,
           CASE
             WHEN T2.CVA_CONTABLE IS NOT NULL THEN T2.CVA_CONTABLE
             ELSE 0
           END AS CVA_CONTABLE_AUX,
           /***150 */
           (T1.RC_170 + /*CVA_CONTABLE_AUX*/
                          CASE
                            WHEN T2.CVA_CONTABLE IS NOT NULL THEN T2.CVA_CONTABLE
                            ELSE 0
                          END
           ) AS RC_150,
           (T1.VC_170 + /*CVA_CONTABLE_AUX*/
                          CASE
                            WHEN T2.CVA_CONTABLE IS NOT NULL THEN T2.CVA_CONTABLE
                            ELSE 0
                          END
           ) AS VC_150,
           /** 160 */
           (T1.RC_170 - 0) AS RC_160, /*** REMPLAZAR EL 0 POR LA GARANTIA ADICIONAL CUANDO ACLAREMOS EL PUNTO DE LA 160 */
           (T1.VC_170 - 0) AS VC_160  /*** REMPLAZAR EL 0 POR LA GARANTIA ADICIONAL CUANDO ACLAREMOS EL PUNTO DE LA 160 */
      FROM BAS_MEN.CALCULO_RC_AUX  T1
      LEFT JOIN BAS_MEN.CVA_CONTABLE_2  T2
        ON T1.SEGMENTO_COLA = T2.SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_AC_IR (FECHA_PROCESO DATE) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_SACCR_IR';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);
    v_NRegs_Ins      BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE         DEFAULT 0;

    v_SQL                       VARCHAR2(255)                       DEFAULT '';

BEGIN

    VN_NumErr   := 1;
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

    VN_NumErr := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_INT_RATE_AUX';

    INSERT INTO BAS_MEN.PERIMETRO_INT_RATE_AUX
    SELECT C.*
         , ((EXP(- 0.05 * Fecha_S) -EXP(-0.05 * Fecha_E))/0.05) AS DURACION_SUPERVISOR
         , CASE
              WHEN UPPER(PERIOD)='DIARIA' AND COD_SWIFT_CONTR IS NOT NULL THEN (3/2)*SQRT(5/250)  --NEW DIARIO
              WHEN UPPER(PERIOD)='DIARIA' AND COD_SWIFT_CONTR IS NULL     THEN (3/2)*SQRT(5/250)  --NEW SEMANAL
              WHEN IN_SEGMBSINI = '045'                                   THEN (3/2)*SQRT(5/250)  -- Se revisa si la operación actualmente liquida en CCP
              ELSE SQRT(LEAST(GREATEST(Fecha_E, 10/250),1))                                       -- Acuerdos sin margen
           END AS FACTOR_VENCIMIENTO
         , OR_FUTURS AS NOMINAL
         , OR_FUTURS * ((EXP(- 0.05 * Fecha_S) -EXP(-0.05 * Fecha_E))/0.05) AS NOMINAL_AJUSTADO
      FROM (
            SELECT a.*
                 , FECHA_PROCESO AS FECHA_PRESENTACION
                 , CASE
                      WHEN (FECHA_PROCESO - FECHA_OPERACION)/365 > 0 THEN 0
                      ELSE (FECHA_OPERACION - FECHA_PROCESO)/365
                   END AS Fecha_S
                 , (FECHA_VENCIMIENTO - FECHA_PROCESO)/365 AS Fecha_E
                 , b.PERIOD
                 , CASE
                      WHEN b.NOM_CONTR LIKE 'MORGAN STANLEY EUROPE SE' THEN 'MSSEDEFBFXO'
                      ELSE b.COD_SWIFT_CONTR
                   END AS COD_SWIFT_CONTR
                 , CASE WHEN CODPRODOPERA IN ('TS 00003','TS 00051','TS 00004') THEN
                             CASE WHEN NVL(INDI_PAGO,'?') <> 'FIJO' THEN -1
                                  ELSE 1
                              END
                        WHEN CODPRODOPERA IN ('MM 10002','MM 10001','MM 10008') THEN
                            CASE WHEN OR_CTAIND IN (9331201000, 9341201000) THEN 1
                                 WHEN OR_CTAIND IN (9332201000, 9342201000) THEN -1
                             END
                       /* Los equity swaps como siempre pagan interés variable delta -1 */
                       WHEN OR_CTAIND IN (456700, 470100, 461100, 469800, 453500, 453400, 470200) THEN -1
                       WHEN MARCAPUTCALL IN ('COM','CON') OR SIGNOCOMPRAVENTA IN ('COM')  THEN 1
                       ELSE -1
                   END AS DELTA
                   --------
                 , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN
                         CASE
                            WHEN  CODPRODOPERA IN ('TS 00010','TS 00020','TS 00066','TS 00011','TS 00021','TS 00067')   THEN 1
                            WHEN (MARCAPUTCALL IN ('COM','CON') AND CODPRODOPERA IN ('TS 00010','TS 00020','TS 00066'))
                              OR (MARCAPUTCALL = 'VEN'          AND CODPRODOPERA IN ('TS 00010','TS 00066'))            THEN 1
                            ELSE -1
                         END
                      ELSE null
                   END AS TIPO
                   --------
                 , CASE
                      WHEN CODPRODOPERA IN ('TS 00003','TS 00051','TS 00004') THEN
                           CASE WHEN NVL(INDI_PAGO,'?') <> 'FIJO' THEN -1
                                ELSE 1
                            END
                      WHEN CODPRODOPERA IN ('MM 10002','MM 10001','MM 10008') THEN
                           CASE WHEN OR_CTAIND IN (9331201000, 9341201000) THEN 1
                                WHEN OR_CTAIND IN (9332201000, 9342201000) THEN -1
                            END
                       /* Los equity swaps como siempre pagan interés variable delta -1 */
                      WHEN OR_CTAIND IN (456700, 470100, 461100, 469800, 453500, 453400, 470200) THEN -1
                      WHEN PRODUCTOBASICO IN ('OPC') THEN
                         CASE WHEN (MARCAPUTCALL IN ('COM','CON') AND CODPRODOPERA IN ('TS 00010','TS 00066'))
                                OR (MARCAPUTCALL = 'VEN'          AND COD_PROD     IN ('TS 00011','TS 00067'))
                                    THEN  1   -- la operación es una posición larga
                              ELSE -1   -- la operación es una posición corta
                         END
                      ELSE null
                   END AS SIGNO
                   --------
                 , CASE
                      WHEN REFERENCIASFINAL = 'EUR1M'                           THEN 'EUR1M'
                      WHEN REFERENCIASFINAL = 'EUR3M'                           THEN 'EUR3M'
                      WHEN REFERENCIASFINAL = 'EUR6M'                           THEN 'EUR6M'
                      WHEN REFERENCIASFINAL = 'EUR1A'                           THEN 'EUR1YM'
                      WHEN REFERENCIASFINAL = 'LGB6M'                           THEN 'GBP6MFSRF'
                      WHEN REFERENCIASFINAL = 'LUS1M'                           THEN 'USD1MFSRF'
                      WHEN REFERENCIASFINAL = 'LUS3M'                           THEN 'USD3MFSRF'
                      WHEN REFERENCIASFINAL = 'LUS6M'                           THEN 'USD6MFSRF'
                      WHEN REFERENCIASFINAL = 'EHCAM'                           THEN 'EURIBO1M_EURIBOR'
                      WHEN REFERENCIASFINAL = 'EHCAP'                           THEN 'EURIBO1A_EURIBOR'
                      WHEN REFERENCIASFINAL IN ('LGB3M')                        THEN 'GBP3MFSRF'
                      WHEN REFERENCIASFINAL IN ('LGB1M')                        THEN 'GBP1MFSRF'
                      WHEN REFERENCIASFINAL IN ('LUS1A')                        THEN 'USD1YFSRF'
                      WHEN REFERENCIASFINAL IN ('LUS1D')                        THEN 'USD1DFSRF'
                      WHEN REFERENCIASFINAL IN ('EONIA')                        THEN 'EUR_EON1D'
                      WHEN REFERENCIASFINAL IN ('EHBMN')                        THEN 'EUR1DIA_EURIBOR'
                      WHEN REFERENCIASFINAL IN ('INFLT')                        THEN 'IPC_EU'
                      WHEN REFERENCIASFINAL IN ('LJP3M')                        THEN 'JPYL3M'
                      WHEN REFERENCIASFINAL IN ('TMX1M')                        THEN 'MXN28D'
                      WHEN REFERENCIASFINAL IN ('ESTER')                        THEN 'STR1D_2'
                      WHEN REFERENCIASFINAL IN ('SON1D')                        THEN 'GBP1DIA'
                      WHEN REFERENCIASFINAL IN ('EURIBOR HIPOTECARIO 1Y')       THEN 'EUR1YM'
                      WHEN REFERENCIASFINAL IN ('EURIBOR 6 MESES')              THEN 'EUR6M'
                      WHEN REFERENCIASFINAL IN ('EURIBOR 3 MESES')              THEN 'EUR3M'
                      WHEN REFERENCIASFINAL IN ('USDLIBOR3MES')                 THEN 'USDL3M'
                      WHEN REFERENCIASFINAL IN ('GBPLIBOR3MES')                 THEN 'GBP3MFSRF'
                      WHEN REFERENCIASFINAL IN ('GBP LIBOR 3M')                 THEN 'GBP3MFSRF'
                      WHEN REFERENCIASFINAL IN ('EURIBOR 12 MES')               THEN 'EUR1YM'
                      WHEN REFERENCIASFINAL IN ('IUS1Y')                        THEN 'IPC_US'
                      ELSE null
                   END AS REFERENCIA1
              FROM BAS_MEN.PERIMETRO_BASILEA_2   a
              LEFT JOIN BAS_MEN.QIS_COLATERALES  b
                ON a.SEGMENTO_COLA = b.COD_SWIFT_CONTR
             WHERE a.TIPO_RIESGO_PRINCIPAL = 1
           ) C;

      COMMIT;

      VN_NumErr := 5;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_INT_RATE_FINAL';

      INSERT INTO BAS_MEN.PERIMETRO_INT_RATE_FINAL
      SELECT D.*
           , CASE WHEN DENOMINADOR <> 0 THEN TIPO * (NUMERADOR / DENOMINADOR)
                  ELSE 0
             END AS DELTA_AUX2
           , CASE WHEN PRODUCTOBASICO IN ('OPC') THEN SIGNO * FUNC_NORMAL ELSE DELTA END AS DELTA_AUX3
           , NOMINAL_AJUSTADO * FACTOR_VENCIMIENTO * CASE WHEN PRODUCTOBASICO IN ('OPC') THEN SIGNO * FUNC_NORMAL ELSE DELTA END AS NOMINAL_EFECTIVO
           , CASE WHEN Fecha_E <= 1 THEN 1 WHEN Fecha_E <= 5 THEN 2 ELSE 3 END AS TIMEBUCKET
        FROM (
              SELECT C.*
                   , CASE
                        WHEN c.PRODUCTOBASICO IN ('OPC') AND DENOMINADOR <> 0 THEN BAS_MEN.CALC_SN_CDF(tipo * (numerador / denominador))
                        ELSE 0
                     END AS FUNC_NORMAL
                FROM (
                      SELECT a.*
                           , b.PRECIOSPOT
                           , CASE
                                WHEN a.PRODUCTOBASICO IN ('OPC') THEN 0.5 * SQRT(a.Fecha_E)
                                ELSE 0
                             END AS DENOMINADOR
                           , CASE
                                WHEN a.PRODUCTOBASICO IN ('OPC') THEN (LN((b.PRECIOSPOT + di.LAMBDA)/(a.TIPOINTERSTRIKE + di.LAMBDA))+ 0.5 * 0.5 * 0.5 * a.Fecha_E)
                                ELSE 0
                             END AS NUMERADOR
                        FROM BAS_MEN.PERIMETRO_INT_RATE_AUX a
                        LEFT JOIN BAS_MEN.GOLDENCOPY      b
                          ON a.REFERENCIA1 = b.NOMENCLATURA_BCO
                        LEFT JOIN (SELECT OR_DIVISA as OR_DIVISA_LAMBDA,
                                          COALESCE(GREATEST(0.1 - LEAST(MINPRECIOSPOT, MINTIPOINTERSTRIKE) ,0),0) AS LAMBDA
                                     FROM (
                                           SELECT OR_DIVISA,
                                                  MIN(COALESCE(PRECIOSPOT,0))      as MINPRECIOSPOT,
                                                  MIN(COALESCE(TIPOINTERSTRIKE,0)) as MINTIPOINTERSTRIKE
                                             FROM BAS_MEN.PERIMETRO_INT_RATE_AUX a1
                                             LEFT JOIN BAS_MEN.GOLDENCOPY        b1
                                               ON a1.REFERENCIA1 = b1.NOMENCLATURA_BCO
                                            WHERE PRODUCTOBASICO ='OPC'
                                            GROUP BY OR_DIVISA
                                          ) c
                                    WHERE MINPRECIOSPOT <= 0
                                       OR MINTIPOINTERSTRIKE <= 0
                                   ) di
                              ON a.OR_DIVISA = di.OR_DIVISA_LAMBDA
                       ) C
             ) D;

    COMMIT;

    VN_NumErr := 10;

/* -----------------------------------------------------------------*/

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.TIMEBUCKET_IRS';

    INSERT INTO BAS_MEN.TIMEBUCKET_IRS
    SELECT WWR
         , SEGMENTO_COLA
         , OR_DIVISA
         , TIMEBUCKET
         , SUM(NOMINAL_EFECTIVO) AS NOMINAL_EF_AG
      FROM BAS_MEN.PERIMETRO_INT_RATE_FINAL
  GROUP BY WWR, SEGMENTO_COLA, OR_DIVISA, TIMEBUCKET;

    COMMIT;

    VN_NumErr := 15;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.TIMEBUCKET_IRS_2';

    INSERT INTO BAS_MEN.TIMEBUCKET_IRS_2
    SELECT WWR
         , SEGMENTO_COLA
         , OR_DIVISA
         , SUM(CASE WHEN  TIMEBUCKET = 1 THEN NOMINAL_EF_AG ELSE 0 END) /*OVER (PARTITION BY SEGMENTO_COLA)*/ AS NOMINAL_EF_AG1
         , SUM(CASE WHEN  TIMEBUCKET = 2 THEN NOMINAL_EF_AG ELSE 0 END) /*OVER (PARTITION BY SEGMENTO_COLA)*/ AS NOMINAL_EF_AG2
         , SUM(CASE WHEN  TIMEBUCKET = 3 THEN NOMINAL_EF_AG ELSE 0 END) /*OVER (PARTITION BY SEGMENTO_COLA)*/ AS NOMINAL_EF_AG3
      FROM BAS_MEN.TIMEBUCKET_IRS
     GROUP BY WWR, SEGMENTO_COLA, OR_DIVISA;

    COMMIT;

    VN_NumErr := 20;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.CALCULO_ADD_ON';

    /* HEDGING SET */
    INSERT INTO BAS_MEN.CALCULO_ADD_ON
    SELECT WWR
         , SEGMENTO_COLA
         , OR_DIVISA
         , NOMINAL_EF_AG1
         , NOMINAL_EF_AG2
         , NOMINAL_EF_AG3
         , SQRT(POWER(NOMINAL_EF_AG1,2)+
                POWER(NOMINAL_EF_AG2,2)+
                POWER(NOMINAL_EF_AG3,2)+
                1.4*(NOMINAL_EF_AG1*NOMINAL_EF_AG2)+
                1.4*(NOMINAL_EF_AG2*NOMINAL_EF_AG3)+
                0.6*(NOMINAL_EF_AG1*NOMINAL_EF_AG3)
               ) AS Efective_Notional
      FROM BAS_MEN.TIMEBUCKET_IRS_2;

    COMMIT;

    VN_NumErr := 25;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_IR_FINAL_A';

    /* Cálculo AddOn  */
    INSERT INTO BAS_MEN.ADDON_IR_FINAL_A
    SELECT CASE
              WHEN WWR IS NOT NULL THEN 1
              ELSE 0
           END AS WWR_FLAG
         , SEGMENTO_COLA
         , SUM(Efective_Notional*0.005) AS ADDON_IR
      FROM BAS_MEN.CALCULO_ADD_ON
     GROUP BY CASE WHEN WWR IS NOT NULL THEN 1 ELSE 0 END, SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 30;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_IR_FINAL_B';

    INSERT INTO BAS_MEN.ADDON_IR_FINAL_B
    SELECT SEGMENTO_COLA
         , CASE
              WHEN WWR_FLAG = 1 THEN ADDON_IR
              ELSE 0
           END AS ADDON_IR_WWR
         , CASE
              WHEN WWR_FLAG = 0 THEN ADDON_IR
              ELSE ADDON_IR
           END AS ADDON_IR
      FROM BAS_MEN.ADDON_IR_FINAL_A;

    COMMIT;

    VN_NumErr := 35;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_IR_FINAL';

    INSERT INTO BAS_MEN.ADDON_IR_FINAL
    SELECT SEGMENTO_COLA
         , SUM(ADDON_IR_WWR) AS ADDON_IR_WWR
         , SUM(ADDON_IR)     AS ADDON_IR
      FROM BAS_MEN.ADDON_IR_FINAL_B
     GROUP BY SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, null, null, v_NRegs_Ins);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;


CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_AC_COMMO (FECHA_PROCESO DATE) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_SACCR_COMMO';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);
    v_NRegs_Ins      BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE         DEFAULT 0;

    v_SQL                       VARCHAR2(255)                       DEFAULT '';

BEGIN

    VN_NumErr   := 1;
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

    VN_NumErr   := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_COMMODITIES_AUX';

    INSERT INTO BAS_MEN.PERIMETRO_COMMODITIES_AUX
    SELECT C.*
            -- Calculo Factor de duración
         , ((EXP(- 0.05 * Fecha_S) -EXP(-0.05 * Fecha_E))/0.05) AS DURACION_SUPERVISOR
         , CASE
              /* Para realizar el cálculo del PRM */
              WHEN UPPER(PERIOD)='DIARIA' AND COD_SWIFT_CONTR IS NOT NULL THEN (3/2)*SQRT(5/250)  --NEW DIARIO
              WHEN UPPER(PERIOD)='DIARIA' AND COD_SWIFT_CONTR IS NULL     THEN (3/2)*SQRT(5/250)  --NEW SEMANAL
              WHEN IN_SEGMBSINI = '045'                                   THEN (3/2)*SQRT(5/250)  -- Se revisa si la operación actualmente liquida en CCP
              ELSE SQRT(LEAST(GREATEST(Fecha_E, 10/250),1))                                -- Acuerdos sin margen
           END AS FACTOR_VENCIMIENTO
         , d.PRECIOSPOT
      FROM (
            SELECT a.*
                 , FECHA_PROCESO AS FECHA_PRESENTACION /* FECHA_REPORTE */
                 , CASE
                      WHEN (FECHA_PROCESO - FECHA_OPERACION)/365 > 0 THEN 0
                      ELSE (FECHA_OPERACION - FECHA_PROCESO)/365
                   END AS Fecha_S
                   --------
                 , (FECHA_VENCIMIENTO - FECHA_PROCESO)/365 AS Fecha_E
                 , OR_FUTURS AS NOMINAL
                 , OR_FUTURS AS NOMINAL_AJUSTADO
                 , b.PERIOD
                 , CASE
                      WHEN b.NOM_CONTR LIKE 'MORGAN STANLEY EUROPE SE' THEN 'MSSEDEFBFXO'
                      ELSE b.COD_SWIFT_CONTR
                   END AS COD_SWIFT_CONTR
                 , CASE
                      WHEN MARCAPUTCALL     IN ('COM','CON') AND PRODUCTOBASICO IN ('FWD','SWP') then  1
                      WHEN MARCAPUTCALL NOT IN ('COM','CON') AND PRODUCTOBASICO IN ('FWD','SWP') then -1
                      ELSE null
                   END AS DELTA /* NO COMCUERDA CON EL FUNCIONAL ACTUALIZADO */
                   --------
                 , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN
                         CASE
                            WHEN (MARCAPUTCALL IN ('COM','CON') AND CODPRODOPERA IN ('010','066'))
                              OR (MARCAPUTCALL = 'VEN'          AND CODPRODOPERA IN ('010','066'))
                            THEN  1   -- la operación es una posición larga
                            ELSE -1   -- la operación es una posición corta
                         END
                      ELSE null
                   END AS TIPO /* NO COMCUERDA CON EL FUNCIONAL ACTUALIZADO */
                   --------
                 , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN
                         CASE
                            WHEN (MARCAPUTCALL IN ('COM','CON') AND COD_PROD IN ('010','066'))
                              OR (MARCAPUTCALL = 'VEN'          AND COD_PROD IN ('011','021','067'))
                            THEN  1   -- la operación es una posición larga
                            ELSE -1   -- la operación es una posición corta
                         END
                      ELSE null
                   END AS SIGNO /* NO COMCUERDA CON EL FUNCIONAL ACTUALIZADO */
                   --------
                 , CASE
                      WHEN REFERENCIA = null THEN null
                      ELSE null
                   END AS REFERENCIA1
              FROM BAS_MEN.PERIMETRO_BASILEA_2     a
              LEFT JOIN BAS_MEN.QIS_COLATERALES    b
                ON a.SEGMENTO_COLA = b.COD_SWIFT_CONTR
             WHERE TIPO_RIESGO_PRINCIPAL = 2
          ) C
     LEFT JOIN BAS_MEN.GOLDENCOPY       d
       ON c.REFERENCIA1 = d.NOMENCLATURA_BCO;

    COMMIT;

    VN_NumErr := 42;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_COMMODITIES_FINAL';

    INSERT INTO BAS_MEN.PERIMETRO_COMMODITIES_FINAL
    SELECT C.*
         , CASE WHEN PRODUCTOBASICO IN ('OPC') THEN SIGNO * FUNC_NORMAL
                ELSE DELTA
           END AS DELTA_AUX3
         , NOMINAL * FACTOR_VENCIMIENTO *  CASE WHEN PRODUCTOBASICO IN ('OPC') THEN SIGNO * FUNC_NORMAL
                                                ELSE DELTA
                                           END
           AS NOMINAL_EFECTIVO
      FROM (
            SELECT B.*
                 , TIPO * (NUMERADOR / DENOMINADOR) as DELTA_AUX2
                 , CASE WHEN PRODUCTOBASICO IN ('OPC') THEN BAS_MEN.CALC_SN_CDF(TIPO * (NUMERADOR / DENOMINADOR))
                        ELSE null
                   END AS FUNC_NORMAL
              FROM (
                    SELECT A.*
                         , CASE WHEN PRODUCTOBASICO IN ('OPC') THEN 0.5 * SQRT(Fecha_E)
                                ELSE null
                           END AS DENOMINADOR
                         , CASE WHEN PRODUCTOBASICO IN ('OPC') THEN  CASE WHEN nvl(PRECIOSPOT, 0) <= 0 THEN (0+0.5 * 0.7 * 0.7 * Fecha_E)
                                                                          WHEN TIPOINTERSTRIKE = 0 THEN (0+0.5 * 0.7 * 0.7 * Fecha_E)
                                                                     END
                                ELSE (LN(PRECIOSPOT/TIPOINTERSTRIKE)+0.5 * 0.7 * 0.7 * Fecha_E)
                           END AS NUMERADOR
                      FROM BAS_MEN.PERIMETRO_COMMODITIES_AUX A
                    ) B
            ) C;

    v_NRegs_Ins := SQL%ROWCOUNT;

    COMMIT;

/* -------------------------------------------------------------------- */
    VN_NumErr := 42;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMMODITIES';

    INSERT INTO BAS_MEN.ADDON_COMMODITIES
    SELECT WWR,SEGMENTO_COLA,COMMODITY_TYPE,HEDGING_SET,
           CASE
              WHEN HEDGING_SET IN('ELECTRICITY') THEN SUM(NOMINAL_EFECTIVO)*0.4
              ELSE SUM(NOMINAL_EFECTIVO)*0.18
           END AS ADD_ON
      FROM (
               SELECT B.*,
                      CASE
                          WHEN COMMODITY_TYPE IN ('ALUMINIUM','COBRE','ZINC') THEN 'METALS'
                          WHEN COMMODITY_TYPE IN ('CRUDE OIL','FUEL')         THEN 'OIL/GAS'
                          WHEN COMMODITY_TYPE IN ('ELECTRICITY')              THEN 'ELECTRICITY' /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
                       END AS HEDGING_SET
                FROM (
                        SELECT WWR
                             , SEGMENTO_COLA
                             , CASE
                                  WHEN REFCOMMODITIES LIKE ('%ALUMINI%') THEN 'ALUMINIUM'
                                  WHEN REFCOMMODITIES LIKE ('%OIL%')     THEN 'CRUDE OIL'
                                  WHEN REFCOMMODITIES LIKE ('%FUEL%')    THEN 'FUEL'
                                  WHEN REFCOMMODITIES LIKE ('%COBRE%')   THEN 'COBRE'
                                  WHEN REFCOMMODITIES LIKE ('%ZINC%')    THEN 'ZINC'
                                  WHEN REFCOMMODITIES LIKE ('%ELECT%')   THEN 'ELECTRICITY' /* NAV - 29/072022 - HDEV-186594 - Modificaciones cálculo EAD derivados (SA-CCR) */
                               END AS COMMODITY_TYPE
                            ,  NOMINAL_EFECTIVO
                          FROM BAS_MEN.PERIMETRO_COMMODITIES_FINAL
                     )B
           )A
     GROUP BY WWR,SEGMENTO_COLA,COMMODITY_TYPE, HEDGING_SET;

    COMMIT;

    VN_NumErr := 43;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMMODITIES_PREVIO';

    --/* Extracción AddOn de la siguiente tabla */
    INSERT INTO BAS_MEN.ADDON_COMMODITIES_PREVIO
    SELECT WWR
         , SEGMENTO_COLA
         , CASE /** HEDGING */
              WHEN HEDGING_SET = 'METALS' THEN 'METALS'
              ELSE null
           END AS HEDGING_SET_METALS,
           CASE
              WHEN HEDGING_SET = 'OIL/GAS' THEN 'OIL/GAS'
              ELSE null
           END AS HEDGING_SET_OILGAS
         , CASE /** ADDON HEDGING */
              WHEN HEDGING_SET = 'METALS' THEN SQRT(POWER((0.4*ADD_ON),2) + (0.84*ADD_ON_PW))
              ELSE 0
           END AS ADDON_SET_METALS
         , CASE
              WHEN HEDGING_SET = 'OIL/GAS' THEN SQRT(POWER((0.4*ADD_ON),2) + (0.84*ADD_ON_PW))
              ELSE 0
           END AS ADDON_SET_OILGAS
         , SQRT(POWER((0.4*ADD_ON),2) + (0.84*ADD_ON_PW)) AS ADD_ON_PREVIO
      FROM (
             SELECT WWR
                  , SEGMENTO_COLA
                  , HEDGING_SET
                  , SUM(ADD_ON) AS ADD_ON
                  , SUM(POWER(ADD_ON,2)) AS ADD_ON_PW
               FROM BAS_MEN.ADDON_COMMODITIES
              GROUP BY WWR, SEGMENTO_COLA, HEDGING_SET
           );

    COMMIT;

    VN_NumErr := 44;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMM_PREVIO_METALS';

    INSERT INTO BAS_MEN.ADDON_COMM_PREVIO_METALS
    SELECT WWR
         , SEGMENTO_COLA
         , HEDGING_SET_METALS
         , ADDON_SET_METALS
      FROM BAS_MEN.ADDON_COMMODITIES_PREVIO
     WHERE HEDGING_SET_METALS = 'METALS';

    COMMIT;

    VN_NumErr := 45;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMM_PREVIO_ENERGY';

    INSERT INTO BAS_MEN.ADDON_COMM_PREVIO_ENERGY
    SELECT WWR
         , SEGMENTO_COLA
         , 'ENERGY' AS HEDGING_SET_OILGAS
         , ADDON_SET_OILGAS
      FROM BAS_MEN.ADDON_COMMODITIES_PREVIO
     WHERE HEDGING_SET_OILGAS = 'OIL/GAS' ;

    COMMIT;

    VN_NumErr := 46;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMMODITIES_FINAL_A';

    INSERT INTO BAS_MEN.ADDON_COMMODITIES_FINAL_A
    SELECT CASE
              WHEN WWR IS NOT NULL THEN 1
              ELSE 0
           END AS WWR_FLAG
         , SEGMENTO_COLA
         , SUM(ADD_ON_PREVIO) AS ADDON_COMMODITIES
      FROM BAS_MEN.ADDON_COMMODITIES_PREVIO
     GROUP BY CASE WHEN WWR IS NOT NULL THEN 1 ELSE 0 END, SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 47;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMMODITIES_FINAL_B';

    INSERT INTO BAS_MEN.ADDON_COMMODITIES_FINAL_B
    SELECT SEGMENTO_COLA
         , CASE
              WHEN WWR_FLAG = 1 THEN  ADDON_COMMODITIES
              ELSE 0
           END AS ADDON_COMMODITIES_WWR
         , CASE
              WHEN WWR_FLAG = 0 THEN  ADDON_COMMODITIES
              ELSE ADDON_COMMODITIES
           END AS ADDON_COMMODITIES
      FROM BAS_MEN.ADDON_COMMODITIES_FINAL_A;

    COMMIT;

    VN_NumErr := 48;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_COMMODITIES_FINAL';

    INSERT INTO BAS_MEN.ADDON_COMMODITIES_FINAL
    SELECT SEGMENTO_COLA
         , SUM(ADDON_COMMODITIES_WWR) AS ADDON_COMMODITIES_WWR
         , SUM(ADDON_COMMODITIES)     AS ADDON_COMMODITIES
      FROM BAS_MEN.ADDON_COMMODITIES_FINAL_B
     GROUP BY SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 99;

    -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, null, null, v_NRegs_Ins);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_AC_EQUI (FECHA_PROCESO DATE) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_SACCR_EQUI';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);
    v_NRegs_Ins      BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE         DEFAULT 0;

    v_SQL                       VARCHAR2(255)                       DEFAULT '';


BEGIN

    VN_NumErr   := 1;
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

    VN_NumErr := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_EQUITIES_AUX';

    INSERT INTO BAS_MEN.PERIMETRO_EQUITIES_AUX
    SELECT C.*
         , ROUND (CASE
              /* Para realizar el cálculo del PRM */
              WHEN UPPER(c.PERIOD)='DIARIA' AND c.COD_SWIFT_CONTR IS NOT NULL THEN (3/2)*SQRT(5/250)  --NEW DIARIO
              WHEN UPPER(c.PERIOD)='DIARIA' AND c.COD_SWIFT_CONTR IS NULL     THEN (3/2)*SQRT(5/250)  --NEW SEMANAL
              WHEN c.IN_SEGMBSINI = '045'                                     THEN (3/2)*SQRT(5/250)  -- Se revisa si la operación actualmente liquida en CCP
              ELSE SQRT(LEAST(GREATEST(c.Fecha_E, 10/250),1))                                       -- Acuerdos sin margen
           END,9) AS FACTOR_VENCIMIENTO
         , d.PRECIOSPOT
         , d.NOMENCLATURA_BCO
         , CASE
              WHEN c.REFERENCIA1 IN ('EUROSTOXX50E','IBEXINDEX','NDX','CAC','SP100','SP500','DAX')OR (c.REFERENCIA1 IS NULL AND c.REFERENCIASFINAL IN ('STOXX EUROPE 600 BANKS', 'SUBJACENT GENERIC ACCIONS'))
                 THEN 'INDICES'
              ELSE 'ACCIONES'
           END AS REFERENCIA2
      FROM (
            SELECT a.*
                 , FECHA_PROCESO AS FECHA_PRESENTACION
                 , CASE
                      WHEN (FECHA_PROCESO - a.FECHA_OPERACION)/365 > 0 THEN 0
                      ELSE (a.FECHA_OPERACION - FECHA_PROCESO)/365
                   END AS Fecha_S
                 , (a.FECHA_VENCIMIENTO - FECHA_PROCESO)/365  AS Fecha_E
                 , a.OR_FUTURS AS NOMINAL
                 , b.PERIOD
                 , CASE
                      WHEN b.NOM_CONTR LIKE 'MORGAN STANLEY EUROPE SE' THEN 'MSSEDEFBFXO'
                      ELSE b.COD_SWIFT_CONTR
                   END AS COD_SWIFT_CONTR
                 , CASE
                      WHEN a.MARCAPUTCALL         IN ('COMCALL','COMPUT') AND a.PRODUCTOBASICO IN ('FWD','SWP') THEN  1
                      WHEN a.MARCAPUTCALL     NOT IN ('COMCALL','COMPUT') AND a.PRODUCTOBASICO IN ('FWD','SWP') THEN -1
                      WHEN a.SIGNOCOMPRAVENTA     IN ('COM')                                                  THEN  1
                      WHEN a.SIGNOCOMPRAVENTA     IN ('VEN')                                                  THEN -1
                      WHEN a.SIGNOCOMPRAVENTA     IN ('COMCALL','COMPUT')                                     THEN  1
                      WHEN a.SIGNOCOMPRAVENTA NOT IN ('COMCALL','COMPUT')                                     THEN -1
                      WHEN a.SIGNOCOMPRAVENTA IS NULL                                                         THEN -1
                      ELSE NULL
                   END AS DELTA
                   --------
                 , CASE
                      WHEN a.PRODUCTOBASICO IN ('OPC') THEN
                         CASE
                            WHEN a.MARCAPUTCALL IN ('VENCALL','COMCALL') THEN 1
                            ELSE -1
                         END
                      ELSE null
                   END AS TIPO
                   --------
                 , CASE
                      WHEN a.PRODUCTOBASICO IN ('OPC') THEN
                         CASE
                            WHEN a.MARCAPUTCALL IN ('COMPUT','VENCALL') THEN -1
                            ELSE 1
                         END
                      ELSE null
                   END AS SIGNO
                   --------
                 , CASE
                      WHEN a.SUBYACENTEACCION IN ('EUROSTOXX')                      THEN 'EUROSTOXX50E'
                      WHEN a.SUBYACENTEACCION IN ('TEF S.A.')                       THEN 'TEF.MC'
                      WHEN a.REFERENCIASFINAL IN ('ABI BB EQUITY')                  THEN ('ABI.BR')
                      WHEN a.REFERENCIASFINAL IN ('ACCIONA  SA (  ANA.MC )')        THEN 'ANA.MC'
                      WHEN a.REFERENCIASFINAL IN ('ACS')                            THEN 'ACS.MC'
                      WHEN a.REFERENCIASFINAL IN ('ARCELORMITTAL')                  THEN  null
                      WHEN a.REFERENCIASFINAL IN ('AXA, S.A. CS FP')                THEN 'AXAF.PA'
                      WHEN a.REFERENCIASFINAL IN ('BAYER AG ( BAYG.DE )')           THEN 'BAYGN.DE'
                      WHEN a.REFERENCIASFINAL IN ('BBVA')                           THEN 'BBVA.MC'
                      WHEN a.REFERENCIASFINAL IN ('BNP PARIBAS')                    THEN 'BNPP.PA'
                      WHEN a.REFERENCIASFINAL IN ('BSCH')                           THEN 'SAN.MC'
                      WHEN a.REFERENCIASFINAL IN ('CAC 40')                         THEN 'CAC'
                      WHEN a.REFERENCIASFINAL IN ('CAIXABANK')                      THEN 'CABK.SM'
                      WHEN a.REFERENCIASFINAL IN ('DAX 30')                         THEN 'DAX'
                      WHEN a.REFERENCIASFINAL IN ('E.ON AG')                        THEN 'EONGN.DE'
                      WHEN a.REFERENCIASFINAL IN ('ENAGAS')                         THEN 'ENAG.MC'
                      WHEN REFERENCIASFINAL   IN ('ENDESA, SA')                     THEN 'ELE.MC'
                      WHEN REFERENCIASFINAL   IN ('EURO STOXX Banks')               THEN 'EUROSTOXX50E'
                      WHEN REFERENCIASFINAL   IN ('EUROSTOXX')                      THEN 'EUROSTOXX50E'
                      WHEN REFERENCIASFINAL   IN ('EUROSTOXX50')                    THEN 'EUROSTOXX50E'
                      WHEN REFERENCIASFINAL   IN ('EUROSTOXX 50')                   THEN 'EUROSTOXX50E'
                      WHEN REFERENCIASFINAL   IN ('FIJO')                           THEN  null
                      WHEN REFERENCIASFINAL   IN ('FRANCE TELECOM')                 THEN  null
                      WHEN REFERENCIASFINAL   IN ('GRIFOLS')                        THEN 'GRF.SM'
                      WHEN REFERENCIASFINAL   IN ('Gap Inc.')                       THEN  null
                      WHEN REFERENCIASFINAL   IN ('IBERDROLA')                      THEN 'IBE.MC'
                      WHEN REFERENCIASFINAL   IN ('IBERDROLA MEDIA')                THEN  null
                      WHEN REFERENCIASFINAL   IN ('IBEX 35')                        THEN 'IBEXINDEX'
                      WHEN REFERENCIASFINAL   IN ('INDITEX')                        THEN 'ITX.MC'
                      WHEN REFERENCIASFINAL   IN ('INTESA PAOLO')                   THEN 'ISP.MI'
                      WHEN REFERENCIASFINAL   IN ('International Consolidated Air') THEN 'ICAG.MC'
                      WHEN REFERENCIASFINAL   IN ('Intesa Sanpaolo')                THEN 'ISP.MI'
                      WHEN REFERENCIASFINAL   IN ('Koninklijke Philips NV')         THEN 'KPN.AS'
                      WHEN REFERENCIASFINAL   IN ('MAPFRE')                         THEN 'MAP.MC'
                      WHEN REFERENCIASFINAL   IN ('NASDAQ 100 Stock Index')         THEN 'NDX'
                      WHEN REFERENCIASFINAL   IN ('NIKE US Equity')                 THEN 'NKE.N'
                      WHEN REFERENCIASFINAL   IN ('NOVARTIS AG REG')                THEN 'NOVN.VX'
                      WHEN REFERENCIASFINAL   IN ('PHILIPS KON (PHG.AS)')           THEN 'PHG.AS'
                      WHEN REFERENCIASFINAL   IN ('RED ELÉCTRICA CORPORACIÓN, S.A') THEN 'REE.MC'
                      WHEN REFERENCIASFINAL   IN ('REPSOL YPF, S.A.')               THEN 'REP.MC'
                      WHEN REFERENCIASFINAL   IN ('RWE GY EQUITY')                  THEN 'RWEG.DE'
                      WHEN REFERENCIASFINAL   IN ('S'||chr(38)||'P 100')            THEN 'SP100'
                      WHEN REFERENCIASFINAL   IN ('SAP GR EQUITY')                  THEN 'SAPG.DE'
                      WHEN REFERENCIASFINAL   IN ('STOXX EUROPE 600 BANKS')         THEN  null
                      WHEN REFERENCIASFINAL   IN ('SUBJACENT GENERIC ACCIONS')      THEN  null
                      WHEN REFERENCIASFINAL   IN ('SYP 500')                        THEN 'SP500'
                      WHEN REFERENCIASFINAL   IN ('TECNICAS REUNIDAS')              THEN 'TRE.MC'
                      WHEN REFERENCIASFINAL   IN ('TEF S.A.')                       THEN 'TEF.MC'
                      WHEN REFERENCIASFINAL   IN ('TELEFONICA, S.A.')               THEN 'TEF.MC'
                      WHEN REFERENCIASFINAL   IN ('TIT IM EQUITY')                  THEN 'TIT.MI'
                      WHEN REFERENCIASFINAL   IN ('TOTAL SA')                       THEN 'TOTF.PA'
                      WHEN REFERENCIASFINAL   IN ('UNA NA EQUITY')                  THEN 'MT'
                      WHEN REFERENCIASFINAL   IN ('VOLKSWAGEN')                     THEN 'VOWG.DE'
                      WHEN REFERENCIASFINAL   IN ('VOLKSWAGEN AG')                  THEN 'VOWG.DE'
                      ELSE null
                   END AS REFERENCIA1
              FROM BAS_MEN.PERIMETRO_BASILEA_2   a
              LEFT JOIN BAS_MEN.QIS_COLATERALES  b
                ON a.SEGMENTO_COLA = b.COD_SWIFT_CONTR
             WHERE a.TIPO_RIESGO_PRINCIPAL = 5
           ) C
       LEFT JOIN BAS_MEN.GOLDENCOPY    d
         ON c.REFERENCIA1 = d.NOMENCLATURA_BCO;

    COMMIT;

    VN_NumErr := 5;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_EQUITIES_FINAL';

    INSERT INTO BAS_MEN.PERIMETRO_EQUITIES_FINAL
    SELECT B.*
         , (NOMINAL * FACTOR_VENCIMIENTO * DELTA_AUX3) AS NOMINAL_EFECTIVO
      FROM (
            SELECT A.*
                 , TIPO*(NUMERADOR/DENOMINADOR) AS DELTA_AUX2
                 , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN BAS_MEN.CALC_SN_CDF(TIPO*(NUMERADOR/DENOMINADOR))
                      ELSE 0
                   END AS FUNC_NORMAL
                  --------
                , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN SIGNO * /*FUNC_NORMAL*/
                                     CASE
                                        WHEN PRODUCTOBASICO IN ('OPC') THEN BAS_MEN.CALC_SN_CDF(TIPO*(NUMERADOR/DENOMINADOR))
                                        ELSE 0
                                     END
                      ELSE DELTA
                   END AS DELTA_AUX3
              FROM (
                    SELECT a.*
                         , CASE
                              WHEN PRODUCTOBASICO IN ('OPC') THEN
                                 CASE
                                    WHEN REFERENCIA2 IN ('INDICES')  THEN 1.2  * SQRT(Fecha_E)
                                    WHEN REFERENCIA2 IN ('ACCIONES') THEN 0.75 * SQRT(Fecha_E)
                                    ELSE null
                                 END
                              ELSE null
                           END AS DENOMINADOR
                         , CASE
                              WHEN PRODUCTOBASICO IN ('OPC') THEN
                                 CASE
                                    WHEN nvl(PRECIOSPOT, 0) <= 0 THEN
                                       CASE
                                          WHEN REFERENCIA2 IN ('INDICES')  THEN (0+0.5 * 1.2  * 1.2  * Fecha_E)
                                          WHEN REFERENCIA2 IN ('ACCIONES') THEN (0+0.5 * 0.75 * 0.75 * Fecha_E)
                                          ELSE null
                                       END
                                    WHEN TIPOINTERSTRIKE = 0 THEN
                                       CASE
                                          WHEN REFERENCIA2 IN ('INDICES')  THEN (0+0.5 * 1.2  * 1.2  * Fecha_E)
                                          WHEN REFERENCIA2 IN ('ACCIONES') THEN (0+0.5 * 0.75 * 0.75 * Fecha_E)
                                          ELSE null
                                       END
                                    ELSE
                                       CASE
                                          WHEN REFERENCIA2 IN ('INDICES')  THEN (LN(PRECIOSPOT/TIPOINTERSTRIKE)+0.5 * 1.2  * 1.2  * Fecha_E)
                                          WHEN REFERENCIA2 IN ('ACCIONES') THEN (LN(PRECIOSPOT/TIPOINTERSTRIKE)+0.5 * 0.75 * 0.75 * Fecha_E)
                                          ELSE null
                                       END
                                 END
                              ELSE null
                           END AS NUMERADOR
                      FROM BAS_MEN.PERIMETRO_EQUITIES_AUX a
                    ) A
         ) B;

    v_NRegs_Ins := SQL%ROWCOUNT;

    COMMIT;
/* ---------------------------------------------------------------------------- */
    VN_NumErr := 10;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_EQUITIES';

    --/* Cálculo AddOn  */
    INSERT INTO BAS_MEN.ADDON_EQUITIES
    SELECT WWR
         , SEGMENTO_COLA
         , REFERENCIA1
         , REFERENCIA2
         , SUM(NOMINAL_EFECTIVO) AS ADD_ON
      FROM BAS_MEN.PERIMETRO_EQUITIES_FINAL
     GROUP BY WWR, SEGMENTO_COLA, REFERENCIA1, REFERENCIA2
     ORDER BY 1, 2, 3 DESC;

    COMMIT;

    VN_NumErr := 62;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_EQUITIES_PREVIO';

    INSERT INTO BAS_MEN.ADDON_EQUITIES_PREVIO
    SELECT WWR
         , SEGMENTO_COLA
         , REFERENCIA1
         , REFERENCIA2
         , CASE
              WHEN REFERENCIA2 IN ('INDICES')  THEN ADD_ON*0.32
              WHEN REFERENCIA2 IN ('ACCIONES') THEN ADD_ON*0.2
              ELSE NULL
           END AS ADD_ON_PREVIO
      FROM BAS_MEN.ADDON_EQUITIES;

    COMMIT;

    VN_NumErr := 63;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_EQUITIES_PREVIO2';

    INSERT INTO BAS_MEN.ADDON_EQUITIES_PREVIO2
    SELECT WWR
         , SEGMENTO_COLA
         , REFERENCIA1
         , REFERENCIA2
         , CASE
             WHEN REFERENCIA2 IN ('INDICES')  THEN SQRT(ADD_ON_INDICE)
             WHEN REFERENCIA2 IN ('ACCIONES') THEN SQRT(ADD_ON_ACCIONES)
             ELSE null
           END AS ADD_ON_PREVIO2
      FROM (
             SELECT WWR
                  , SEGMENTO_COLA
                  , REFERENCIA1
                  , REFERENCIA2
                  , POWER((SUM(0.5*ADD_ON_PREVIO)),2) + SUM(0.75*(POWER(ADD_ON_PREVIO,2)))  AS ADD_ON_INDICE
                  , POWER((SUM(0.8*ADD_ON_PREVIO)),2) + SUM(0.36*(POWER(ADD_ON_PREVIO,2)))  AS ADD_ON_ACCIONES
               FROM BAS_MEN.ADDON_EQUITIES_PREVIO
           GROUP BY WWR, SEGMENTO_COLA, REFERENCIA1, REFERENCIA2
           ORDER BY 2, 1, 3, 4 DESC
           );

    COMMIT;

    VN_NumErr := 64;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_EQUITIES_FINAL_A';

    INSERT INTO BAS_MEN.ADDON_EQUITIES_FINAL_A
    SELECT SEGMENTO_COLA
         , CASE
             WHEN WWR IS NOT NULL THEN 1
             ELSE 0
           END AS WWR_FLAG
         , SUM(ADD_ON_PREVIO2) AS ADDON_EQUITIES
      FROM BAS_MEN.ADDON_EQUITIES_PREVIO2
     GROUP BY SEGMENTO_COLA, CASE WHEN WWR IS NOT NULL THEN 1 ELSE 0 END
     ORDER BY 1, 2;

    COMMIT;

    VN_NumErr := 65;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_EQUITIES_FINAL_B';

    INSERT INTO BAS_MEN.ADDON_EQUITIES_FINAL_B
    SELECT SEGMENTO_COLA
         , CASE
              WHEN WWR_FLAG = 1 THEN ADDON_EQUITIES
              ELSE 0
           END AS ADDON_EQUITIES_WWR
         , CASE
              WHEN WWR_FLAG = 0 THEN ADDON_EQUITIES
              ELSE ADDON_EQUITIES
           END AS ADDON_EQUITIES
      FROM BAS_MEN.ADDON_EQUITIES_FINAL_A;

    COMMIT;

    VN_NumErr := 66;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_EQUITIES_FINAL';

    INSERT INTO BAS_MEN.ADDON_EQUITIES_FINAL
    SELECT SEGMENTO_COLA
         , SUM(ADDON_EQUITIES_WWR) AS ADDON_EQUITIES_WWR
         , SUM(ADDON_EQUITIES)     AS ADDON_EQUITIES
      FROM BAS_MEN.ADDON_EQUITIES_FINAL_B
     GROUP BY SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, null, null, v_NRegs_Ins);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_AC_FX (FECHA_PROCESO DATE) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_SACCR_FX';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);
    v_NRegs_Ins      BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE         DEFAULT 0;

    v_SQL                       VARCHAR2(255)                       DEFAULT '';

BEGIN

    VN_NumErr   := 1;
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

    VN_NumErr   := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_FX_AUX';

    INSERT INTO BAS_MEN.PERIMETRO_FX_AUX
    SELECT IDENT_CONTRATO, OR_CLUNIPROD_CUENT, OR_CLUNICUENT, OR_TIPOPE, GLOBALID, OR_NIFCIF, IN_SEGMBSINI, OR_FUTURS
         , OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA, OR_NOMPER, OR_CODISO, OR_IDCNAE, IN_METODE, FI_ELIMI1, FI_EADAIRB
         , IN_FACTCOR, FI_EADCONAIRB, IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, CODPRODOPERA, MARCAPUTCALL
         , REFCOMMODITIES, REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, PRODUCTOBASICO
         , PRODUCTOTGR, DESCPRODO, DIVISACONTRAPART, ESTANBDU, OR_ENTITY, OR_CTAIND, SEGMENTO_COLA, WWR, COD_PROD
         , TIPO_RIESGO_PRINCIPAL_AUX, COMMODITY_TYPE, HEDGING_SET, IN_SEGMBS0, FI_EPICON, IN_TIPOREG, OR_REFOPE2
         , FECHA_OPERACION, FECHA_VENCIMIENTO, MTY, GLOBAL_ID, CURRENCY_PAY_DRF, CURRENCY_RECEIVE_DRF, FX_SPOT_RATE_PAY
         , FX_SPOT_RATE_RECEIVE, GID, INDI_PAGO, INDI_RECI, EN_DMR, EN_BACKOFFICE, REG, OPERACIONOFEX, SIGNOCOMPRAVENTA
         , REFERENCIASFINAL_A, DIVISA_OFEX, TIPO_RIESGO_PRINCIPAL, REFERENCIASFINAL_B, DIVISA1, DIVISA2, CURRENCY1, CURRENCY2
         , REFERENCIASFINAL, ASSET_CLASS, FECHA_PRESENTACION, FECHA_S, FECHA_E, NOMINAL, PERIOD, COD_SWIFT_CONTR
         , CASE WHEN CODPRODOPERA in ('TS 00030','TS 00013','TS 00014','XU 00004','XV 00003','XV 00004') THEN
                     CASE WHEN CURRENCY_PAY_DRF <> 'EUR' THEN -1
                          ELSE 1
                      END
                WHEN CODPRODOPERA in ('XV 00005','XV 00001','XU 00006') OR IN_TIPOREG ='OXE' THEN
                     CASE WHEN OR_CTAIND IN (90406000,90456000,9312111000,9312113000,9312130000,9312131000,9312141000,9312311000,
                                             9312312300,9312313000,9312331000,9312341000) THEN 1
                          WHEN OR_CTAIND IN (90436000,9312211000,9312213000,9312231000,9312241000) THEN -1
                          ELSE DELTA
                      END
                ELSE DELTA
             END AS DELTA
         , TIPO, SIGNO, REFERENCIA1, PRECIOSPOT, DURACION_SUPERVISOR, FACTOR_VENCIMIENTO
      FROM (
          SELECT IDENT_CONTRATO, OR_CLUNIPROD_CUENT, OR_CLUNICUENT, OR_TIPOPE, GLOBALID, OR_NIFCIF, IN_SEGMBSINI, OR_FUTURS
               , OR_DIVISA, OR_CODIGO_BIC, OR_FAIRVA, OR_NOMPER, OR_CODISO, OR_IDCNAE, IN_METODE, FI_ELIMI1, FI_EADAIRB
               , IN_FACTCOR, FI_EADCONAIRB, IN_INDMOR, OR_IDREG, OR_CLUNIPROD_OPERA, OR_CLUNIOPERA, CODPRODOPERA, MARCAPUTCALL
               , REFCOMMODITIES, REFERENCIA, REFTIPODECAMBIO, SUBYACENTEACCION, TIPOINTERSTRIKE, APLICACION, PRODUCTOBASICO
               , PRODUCTOTGR, DESCPRODO, DIVISACONTRAPART, ESTANBDU, OR_ENTITY, OR_CTAIND, SEGMENTO_COLA, WWR, COD_PROD
               , TIPO_RIESGO_PRINCIPAL_AUX, COMMODITY_TYPE, HEDGING_SET, IN_SEGMBS0, FI_EPICON, IN_TIPOREG, OR_REFOPE2
               , FECHA_OPERACION, FECHA_VENCIMIENTO, MTY, GLOBAL_ID, CURRENCY_PAY_DRF, CURRENCY_RECEIVE_DRF, FX_SPOT_RATE_PAY
               , FX_SPOT_RATE_RECEIVE, GID, INDI_PAGO, INDI_RECI, EN_DMR, EN_BACKOFFICE, REG, OPERACIONOFEX, SIGNOCOMPRAVENTA
               , REFERENCIASFINAL_A, DIVISA_OFEX, TIPO_RIESGO_PRINCIPAL, REFERENCIASFINAL_B, DIVISA1, DIVISA2, CURRENCY1, CURRENCY2
               , REFERENCIASFINAL, ASSET_CLASS, FECHA_PRESENTACION, FECHA_S, FECHA_E, NOMINAL, PERIOD, COD_SWIFT_CONTR
               , CASE WHEN nvl(CURRENCY1,'?') <> DIVISA1 THEN -DELTA
                      ELSE DELTA
                  END AS DELTA
               , TIPO
               , SIGNO
               , REFERENCIA1
               , PRECIOSPOT
               , ((EXP(- 0.05 * c.Fecha_S) -EXP(-0.05 * c.Fecha_E))/0.05) AS DURACION_SUPERVISOR
               , CASE
                    WHEN UPPER(c.PERIOD)='DIARIA' AND c.COD_SWIFT_CONTR IS NOT NULL THEN (3/2)*SQRT(5/250)  --NEW DIARIO
                    WHEN UPPER(c.PERIOD)='DIARIA' AND c.COD_SWIFT_CONTR IS NULL     THEN (3/2)*SQRT(5/250)  --NEW SEMANAL
                    WHEN c.IN_SEGMBSINI = '045'                                     THEN (3/2)*SQRT(5/250)  -- Se revisa si la operación actualmente liquida en CCP
                    ELSE SQRT(LEAST(GREATEST(c.Fecha_E, 10/250),1))                                       -- Acuerdos sin margen
                 END AS FACTOR_VENCIMIENTO
            FROM (
                  SELECT a.*
                       , FECHA_PROCESO AS FECHA_PRESENTACION
                       , CASE
                            WHEN (FECHA_PROCESO - a.FECHA_OPERACION)/365 > 0 THEN 0
                            ELSE (a.FECHA_OPERACION - FECHA_PROCESO)/365
                         END AS Fecha_S
                       , (a.FECHA_VENCIMIENTO - FECHA_PROCESO)/365 AS Fecha_E
                       , a.OR_FUTURS AS NOMINAL
                       , b.PERIOD
                       , CASE
                            WHEN b.NOM_CONTR LIKE 'MORGAN STANLEY EUROPE SE' THEN 'MSSEDEFBFXO'
                            ELSE b.COD_SWIFT_CONTR
                         END AS COD_SWIFT_CONTR
                       ,CASE /*WHEN CODPRODOPERA in ('TS 00030','TS 00013','TS 00014','XU 00004','XV 00003','XV 00004') THEN
                                 CASE WHEN CURRENCY_PAY_DRF <> 'EUR' THEN -1
                                      ELSE 1
                                 END
                             WHEN CODPRODOPERA in ('XV 00005','XV 00001','XU 00006') OR IN_TIPOREG ='OXE' THEN
                                 CASE WHEN OR_CTAIND IN (90406000,90456000,9312111000,9312113000,9312130000,9312131000,9312141000,9312311000,
                                                         9312312300,9312313000,9312331000,9312341000) THEN 1
                                      WHEN OR_CTAIND IN (90436000,9312211000,9312213000,9312231000,9312241000) THEN -1
                                 END*/
                             WHEN MARCAPUTCALL         IN ('COMCALL','COMPUT') AND PRODUCTOBASICO IN ('FWD','SWP') THEN  1
                             WHEN MARCAPUTCALL     NOT IN ('COMCALL','COMPUT') AND PRODUCTOBASICO IN ('FWD','SWP') THEN -1
                             WHEN SIGNOCOMPRAVENTA     IN ('COM')                                                  THEN  1
                             WHEN SIGNOCOMPRAVENTA     IN ('VEN')                                                  THEN -1
                             WHEN SIGNOCOMPRAVENTA     IN ('COMCALL','COMPUT')                                     THEN  1
                             WHEN SIGNOCOMPRAVENTA NOT IN ('COMCALL','COMPUT')                                     THEN -1
                             WHEN SIGNOCOMPRAVENTA IS NULL                                                         THEN -1
                             ELSE NULL
                         END AS DELTA
                       , CASE
                            WHEN PRODUCTOBASICO IN ('OPC') THEN
                               CASE
                                 WHEN MARCAPUTCALL IN ('VENCALL','COMCALL') THEN 1
                                 ELSE -1
                               END
                            ELSE NULL
                         END AS TIPO
                       , CASE
                             WHEN CODPRODOPERA in ('TS 00030','TS 00013','TS 00014','XU 00004','XV 00003','XV 00004') THEN
                                 CASE WHEN CURRENCY_PAY_DRF <> 'EUR' THEN -1
                                      ELSE 1
                                 END
                             WHEN CODPRODOPERA in ('XV 00005','XV 00001','XU 00006') OR IN_TIPOREG ='OXE' THEN
                                 CASE WHEN OR_CTAIND IN (90406000,90456000,9312111000,9312113000,9312130000,9312131000,9312141000,9312311000,
                                                         9312312300,9312313000,9312331000,9312341000) THEN 1
                                      WHEN OR_CTAIND IN (90436000,9312211000,9312213000,9312231000,9312241000) THEN -1
                                 END
                             WHEN PRODUCTOBASICO IN ('OPC') THEN
                               CASE
                                 WHEN MARCAPUTCALL IN ('COMPUT','VENCALL') THEN -1
                                 ELSE 1
                               END
                            ELSE NULL
                         END AS SIGNO
                       , REFERENCIASFINAL as REFERENCIA1
                       , (FX_SPOT_RATE_RECEIVE/FX_SPOT_RATE_PAY) AS PRECIOSPOT
                    FROM BAS_MEN.PERIMETRO_BASILEA_2   a
                    LEFT JOIN BAS_MEN.QIS_COLATERALES  b
                      ON a.SEGMENTO_COLA = b.COD_SWIFT_CONTR
                   WHERE a.TIPO_RIESGO_PRINCIPAL = 6
                  ) C
                      ) D;

    COMMIT;

    VN_NumErr := 5;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_FX_FINAL';

    INSERT INTO BAS_MEN.PERIMETRO_FX_FINAL
    SELECT C.*
         , (NOMINAL * FACTOR_VENCIMIENTO * DELTA_AUX3) AS NOMINAL_EFECTIVO
     FROM (
            SELECT B.*
                 , TIPO * (NUMERADOR/DENOMINADOR) AS DELTA_AUX2
                 , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN BAS_MEN.CALC_SN_CDF(TIPO * (NUMERADOR/DENOMINADOR))
                      ELSE 0
                   END AS FUNC_NORMAL
                   --------
                 , CASE
                      WHEN PRODUCTOBASICO IN ('OPC') THEN SIGNO *
                                     CASE
                                        WHEN PRODUCTOBASICO IN ('OPC') THEN BAS_MEN.CALC_SN_CDF(TIPO * (NUMERADOR/DENOMINADOR))
                                        ELSE 0
                                     END
                      ELSE DELTA
                   END AS DELTA_AUX3
              FROM (
                    SELECT a.*,
                           ---------
                           CASE
                              WHEN PRODUCTOBASICO IN ('OPC') THEN 0.15 * SQRT(Fecha_E)
                              ELSE NULL
                           END AS DENOMINADOR,
                           ---------
                           CASE
                              WHEN PRODUCTOBASICO IN ('OPC') THEN
                                CASE
                                   WHEN nvl(PRECIOSPOT, 0) <= 0 THEN (0+0.5 * (POWER(0.15,2)) * Fecha_E)
                                   WHEN TIPOINTERSTRIKE = 0 THEN (0+0.5 * (POWER(0.15,2)) * Fecha_E)
                                   ELSE (/*LOG*/LN(PRECIOSPOT/TIPOINTERSTRIKE)+0.5 * (POWER(0.15,2)) * Fecha_E)
                                END
                              ELSE NULL
                           END AS NUMERADOR
                      FROM BAS_MEN.PERIMETRO_FX_AUX a
                       ) B
          ) C;

    v_NRegs_Ins := SQL%ROWCOUNT;

    COMMIT;
----------------------------------------------------------------------------
    VN_NumErr := 77;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_FX';

    INSERT INTO BAS_MEN.ADDON_FX
    SELECT WWR
         , SEGMENTO_COLA
         , REFERENCIASFINAL
         , SUM(NOMINAL_EFECTIVO) AS ADD_ON
      FROM BAS_MEN.PERIMETRO_FX_FINAL
     GROUP BY WWR, SEGMENTO_COLA, REFERENCIASFINAL
     ORDER BY 1, 2, 3 DESC;

    COMMIT;

    VN_NumErr := 78;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_FX_FINAL_A';

    INSERT INTO BAS_MEN.ADDON_FX_FINAL_A
    SELECT CASE
              WHEN WWR IS NOT NULL THEN 1
              ELSE 0
           END AS WWR_FLAG,
           SEGMENTO_COLA,
           ABS(ADD_ON)*0.04 AS ADDON_FX
      FROM BAS_MEN.ADDON_FX;

    COMMIT;

    VN_NumErr := 79;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_FX_FINAL_B';

    INSERT INTO BAS_MEN.ADDON_FX_FINAL_B
    SELECT SEGMENTO_COLA ,
           CASE
              WHEN WWR_FLAG = 1 THEN  ADDON_FX
              ELSE 0
           END AS ADDON_FX_WWR,
           CASE
              WHEN WWR_FLAG = 0 THEN  ADDON_FX
              ELSE ADDON_FX
           END AS ADDON_FX
      FROM BAS_MEN.ADDON_FX_FINAL_A;

    COMMIT;

    VN_NumErr := 80;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.ADDON_FX_FINAL';

    INSERT INTO BAS_MEN.ADDON_FX_FINAL
    SELECT SEGMENTO_COLA,
           SUM(ADDON_FX_WWR) AS ADDON_FX_WWR,
           SUM(ADDON_FX)     AS ADDON_FX
      FROM BAS_MEN.ADDON_FX_FINAL_B
     GROUP BY SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 99;

    -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, null, null, v_NRegs_Ins);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;


CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_SACCR_EAD (FECHA_PROCESO DATE) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_SACCR_EAD';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);

    v_SQL                       VARCHAR2(255)                       DEFAULT '';

BEGIN

    VN_NumErr   := 1;
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

    VN_NumErr := 2;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.CALCULO_EAD_PREVIO');

    INSERT /*+ PARALLEL (prev,4) */ INTO BAS_MEN.CALCULO_EAD_PREVIO prev
    SELECT /*+ PARALLEL (a,2) PARALLEL (b,2) PARALLEL (c,2) PARALLEL (d,2) PARALLEL (e,2) */
           DISTINCT a.SEGMENTO_COLA
         , CVA_CONTABLE_AUX AS CVA_CONTABLE
         , a.RC_150, a.VC_150
         , a.RC_160, a.VC_160
         , a.RC_170, a.VC_170
         , COALESCE(b.ADDON_IR, 0)              AS ADDON_IR
         , COALESCE(b.ADDON_IR_WWR, 0)          AS ADDON_IR_WWR
         , COALESCE(c.ADDON_COMMODITIES, 0)     AS ADDON_COMMODITIES
         , COALESCE(c.ADDON_COMMODITIES_WWR, 0) AS ADDON_COMMODITIES_WWR
         /* 09/11/2021 RMR | Revertido cambio por falta de OK */
         , COALESCE(d.ADDON_EQUITIES, 0)        AS ADDON_EQUITIES              /* 28/10/2021 - FMRR - HDEV-82868 - Incluir en el proceso de saccr los equity que hasta la fecha estaban todos siendo exluidos */
       --, 0                                    AS ADDON_EQUITIES
         , COALESCE(d.ADDON_EQUITIES_WWR, 0)    AS ADDON_EQUITIES_WWR          /* 28/10/2021 - FMRR - HDEV-82868 - Incluir en el proceso de saccr los equity que hasta la fecha estaban todos siendo exluidos */
       --, 0                                    AS ADDON_EQUITIES_WWR
         , COALESCE(e.ADDON_FX, 0)              AS ADDON_FX
         , COALESCE(e.ADDON_FX_WWR, 0)          AS ADDON_FX_WWR
         , IN_METODE
         , MARGIN_FLAG
      FROM BAS_MEN.CALCULO_RC a /* IRS */ LEFT JOIN BAS_MEN.ADDON_IR_FINAL           b ON a.SEGMENTO_COLA = b.SEGMENTO_COLA
                        /* COMMODITIES */ LEFT JOIN BAS_MEN.ADDON_COMMODITIES_FINAL  c ON a.SEGMENTO_COLA = c.SEGMENTO_COLA
                           /* EQUITIES */ LEFT JOIN BAS_MEN.ADDON_EQUITIES_FINAL     d ON a.SEGMENTO_COLA = d.SEGMENTO_COLA
                                 /* FX */ LEFT JOIN BAS_MEN.ADDON_FX_FINAL           e ON a.SEGMENTO_COLA = e.SEGMENTO_COLA;

    COMMIT;

    VN_NumErr := 3;

    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.CALCULO_SACCR_EAD');

    INSERT /*+ PARALLEL (b,4) */ INTO  BAS_MEN.CALCULO_SACCR_EAD b
    SELECT segmento_cola, MARGIN_FLAG, IN_METODE, NOMBRE_CTR, NOMINAL, MARKET_VALUE, EAD, RWA, ENTIDAD,
           RC_150, VC_150,
           RC_160, VC_160,
           RC_170, VC_170,
           ADDON_IR,  ADDON_COMMODITIES, ADDON_EQUITIES, ADDON_FX,
           ADDON_FINAL,
          /** COLUMNA 150 */
           multiplicador_150,
           ROUND(1.4 *(RC_150 + multiplicador_150 * ADDON_FINAL),6) as EAD_FINAL_150,
           /** COLUMNA 160 */
           multiplicador_160,
           ROUND(1.4 *(RC_160 + multiplicador_160 * ADDON_FINAL),6) as EAD_FINAL_160,
           /** COLUMNA 170 */
           multiplicador_170,
           ROUND(1.4 *(RC_170 + multiplicador_170 * ADDON_FINAL),6) as EAD_FINAL_170,
           ADDON_FINAL_WWR,
           /** WWR 150 */
           multiplicador_WWR_150,
           CASE
             WHEN ADDON_FINAL_WWR > 0 THEN ROUND(1.4*(RC_150 + multiplicador_WWR_150 * ADDON_FINAL_WWR),6)
             ELSE 0
           END as EAD_FINAL_WWR_150,
           /** WWR 160 */
           multiplicador_WWR_160,
           CASE
             WHEN ADDON_FINAL_WWR > 0 THEN ROUND(1.4*(RC_160 + multiplicador_WWR_160 * ADDON_FINAL_WWR),6)
             ELSE 0
           END as EAD_FINAL_WWR_160,
           /** WWR 170 */
           multiplicador_WWR_170,
           CASE
             WHEN ADDON_FINAL_WWR > 0 THEN ROUND(1.4*(RC_170 + multiplicador_WWR_170 * ADDON_FINAL_WWR),6)
             ELSE 0
           END as EAD_FINAL_WWR_170,
           0 AS VIDRES_NOMINAL, 0 AS VIDINI_NOMINAL, 0 AS ANTIGU_NOMINAL
      FROM (
            SELECT /*+ PARALLEL (a,4) PARALLEL (b,4) PARALLEL (c,4) PARALLEL (d,4) */
                   A.segmento_cola, A.MARGIN_FLAG, A.IN_METODE, B.NOMBRE_CTR, C.NOMINAL, C.MARKET_VALUE, D.EAD, D.RWA, C.ENTIDAD,
                   RC_150, VC_150,
                   RC_160, VC_160,
                   RC_170, VC_170,
                   /** Multiplicador sin WWR */
                   ADDON_IR,  ADDON_COMMODITIES, ADDON_EQUITIES, ADDON_FX,
                   ROUND((ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX),6) as ADDON_FINAL,
                   CASE WHEN (ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX) <> 0 THEN
                            CASE WHEN VC_150 > 0 THEN 1
                                 ELSE LEAST(1, 0.05 + 0.95*exp((VC_150)/(2*0.95* (ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX))))
                            END
                        ELSE 1
                    END AS multiplicador_150,
                   CASE WHEN (ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX) <> 0 THEN
                            CASE WHEN VC_160 > 0 THEN 1
                                 ELSE LEAST(1, 0.05 + 0.95*exp((VC_160)/(2*0.95* (ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX))))
                            END
                        ELSE 1
                    END AS multiplicador_160,
                   CASE WHEN (ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX) <> 0 THEN
                            CASE WHEN VC_170 > 0 THEN 1
                                 ELSE LEAST(1, 0.05 + 0.95*exp((VC_170)/(2*0.95* (ADDON_IR + ADDON_COMMODITIES + ADDON_EQUITIES + ADDON_FX))))
                            END
                        ELSE 1
                    END AS multiplicador_170,
                   /** Multiplicador con WWR */
                   ROUND((ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR),6) as ADDON_FINAL_WWR,
                     CASE WHEN (ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR) <> 0 THEN
                            CASE WHEN VC_150 > 0 THEN 1
                                 ELSE ROUND(LEAST(1, 0.05 + 0.95*exp((VC_150)/(2*0.95* (ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR)))),6)
                            END
                        ELSE 1
                    END AS multiplicador_WWR_150,
                     CASE WHEN (ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR) <> 0 THEN
                            CASE WHEN VC_160 > 0 THEN 1
                                 ELSE ROUND(LEAST(1, 0.05 + 0.95*exp((VC_160)/(2*0.95* (ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR)))),6)
                            END
                        ELSE 1
                    END AS multiplicador_WWR_160,
                     CASE WHEN (ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR) <> 0 THEN
                            CASE WHEN VC_170 > 0 THEN 1
                                 ELSE ROUND(LEAST(1, 0.05 + 0.95*exp((VC_170)/(2*0.95* (ADDON_IR_WWR + ADDON_COMMODITIES_WWR + ADDON_EQUITIES_WWR + ADDON_FX_WWR)))),6)
                            END
                        ELSE 1
                    END AS multiplicador_WWR_170
            FROM BAS_MEN.CALCULO_EAD_PREVIO A
            LEFT JOIN (SELECT MAX(OR_NOMPER) AS NOMBRE_CTR , SEGMENTO_COLA
                         FROM BAS_MEN.PERIMETRO_BASILEA_2
                        GROUP BY SEGMENTO_COLA
                       ) B
            ON A.SEGMENTO_COLA = B.SEGMENTO_COLA
            LEFT JOIN (SELECT SEGMENTO_COLA, MAX(OR_ENTITY) AS ENTIDAD, SUM(OR_FUTURS) AS NOMINAL, SUM(OR_FAIRVA) AS MARKET_VALUE
                         FROM BAS_MEN.PERIMETRO_BASILEA_2
                        GROUP BY SEGMENTO_COLA
                      ) C
            ON A.SEGMENTO_COLA = C.SEGMENTO_COLA
            LEFT JOIN BAS_MEN.PERIMETRO_BASILEA_RWA D
            ON A.SEGMENTO_COLA = D.SEGMENTO_COLA
            AND  A.IN_METODE = D.IN_METODE
          ) a;

    COMMIT;

    VN_NumErr := 5;

    /* Calculamos la vida residual, vida inicial y antiguedad como ponderadas por el nominal */
    MERGE /*+ parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.CALCULO_SACCR_EAD    Upd
    USING (SELECT SEGMENTO_COLA
                 , decode(sum(OR_FUTURS), 0, 0, (SUM((OR_FUTURS) * OR_VIDRES)/ SUM(OR_FUTURS))) VidRes_Nominal
                 , decode(sum(OR_FUTURS), 0, 0, (SUM((OR_FUTURS) * OR_VIDINI)/ SUM(OR_FUTURS))) VidIni_Nominal
                 , decode(sum(OR_FUTURS), 0, 0, (SUM((OR_FUTURS) * IN_ANTIGU)/ SUM(OR_FUTURS))) Antigu_Nominal
              FROM BAS_MEN.PERIMETRO_BASILEA
             group by SEGMENTO_COLA) Sel
       ON (Upd.SEGMENTO_COLA = Sel.SEGMENTO_COLA)
     WHEN MATCHED THEN
      UPDATE
          SET
           VIDRES_NOMINAL = SEL.VIDRES_NOMINAL,
           VIDINI_NOMINAL = SEL.VIDINI_NOMINAL,
           ANTIGU_NOMINAL = SEL.ANTIGU_NOMINAL;

    COMMIT;

    VN_NumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;


CREATE OR REPLACE PROCEDURE BAS_MEN.BASI_SACCR AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'BASI_SA/CCR';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);

    VN_FECPRO                   DATE;
    VN_MESPRO                   NUMBER(6);

BEGIN

    VN_NumErr   := 1;
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;
    --
    VN_NumErr := 2;

    SELECT to_date(TO_NUMBER(VALPARM), 'YYYYMMDD'), TO_NUMBER(SUBSTR(VALPARM,1,6))
      INTO VN_FECPRO, VN_MESPRO
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

    VN_NumErr := 5;

    BAS_MEN.FNC_SACCR_INICIAL(VN_FECPRO, VN_MESPRO);

    VN_NumErr := 10;

    BAS_MEN.FNC_SACCR_RC(VN_FECPRO);

    VN_NumErr := 15;

    BAS_MEN.FNC_SACCR_AC_IR(VN_FECPRO);

    VN_NumErr := 20;

    BAS_MEN.FNC_SACCR_AC_COMMO(VN_FECPRO);

    VN_NumErr := 25;

    BAS_MEN.FNC_SACCR_AC_EQUI(VN_FECPRO);

    VN_NumErr := 30;

    BAS_MEN.FNC_SACCR_AC_FX(VN_FECPRO);

    VN_NumErr := 35;

    BAS_MEN.FNC_SACCR_EAD(VN_FECPRO);

    VN_NumErr := 99;

    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO);

    COMMIT;

    VN_NumErr := 999;
      --
EXCEPTION
    WHEN OTHERS THEN
        --
        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
          WHERE PROCES  = VV_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
        --
END;

/

show errors;


CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_INTEGRACION_SACCR (MES_PROCESO   NUMBER) AS

    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'FNC_INTEGRACION_SACCR';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(4000)                      DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';
    ERR_REAL                    VARCHAR2(4000);

    v_SQL                       VARCHAR2(255)                       DEFAULT '';
    VV_IDREG2                   NUMBER(12,0);

BEGIN

  COMMIT;

  BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
  COMMIT;

  VN_NUMERR:= 1;

 VN_NUMERR:= 3;

  /* 09/09/2021 RMR | Añadidos derivados de México a la base */
  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.BASILEA d
  (OR_IDMES, FI_EPICON, OR_IDPAIS, OR_FECOPE, OR_FECVTO, FI_ELIMI1, OR_REFOPE, IN_INDMOR, OR_ENTITY, IN_METODE, IN_SEGMBSINI, IN_SEGMBS, in_tiporeg, OR_CODIGO_BIC,
   OR_CODISO, OR_DIVISA, OR_FAIRVA, OR_FUTURS, OR_FAIRVACON, OR_FUTURSCON,OR_IDREG, OR_NIFCIF, OR_NOMPER, OR_REFOPE2, OR_CLUNICONTR, OR_TIPOPE,
   FI_PORCON, FI_TIPEXP, IN_SRATIN)
  SELECT
         MES_PROCESO as or_idmes,
         FI_EPICON,
         484 as OR_IDPAIS,
         to_number(to_char(FCHOPERACION_1, 'YYYYMMDD')) AS OR_FECOPE,
         to_number(to_char(FCHVENCIMOPER_1, 'YYYYMMDD')) AS OR_FECVTO,
         FI_ELIMI1,
         IDENT_CONTRATO as OR_REFOPE,
         IN_INDMOR,
         OR_ENTITY,
         IN_METODE,
         IN_SEGMBSINI,
         'Empresas' as IN_SEGMBS,
         'FMX' as in_tiporeg,
         OR_CODIGO_BIC,
         OR_CODISO,
         OR_DIVISA,
         OR_FAIRVA,
         OR_FUTURS,
         OR_FAIRVA*fi_porcon as OR_FAIRVACON, /* 27/12/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon */
         OR_FUTURS*fi_porcon as OR_FUTURSCON, /* 27/12/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon */
         OR_IDREG,
         OR_NIFCIF,
         OR_NOMPER,
         IDENT_CONTRATO as OR_REFOPE2,
         IDENT_CONTRATO as OR_CLUNICONTR,
         OR_TIPOPE,
         FI_PORCON,  /* 26/11/2021 - FMRR - HDEV-100535 - Añadimos el FI_PORCON desde SACCR_MEXICO_SAS, antes lo informamos a 1*/
         'OTC' FI_TIPEXP,
         'SR' IN_SRATIN
    FROM BAS_MEN.PERIMETRO_MEXICO mex;

  COMMIT;

   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE';

  INSERT /*+ parallel (d 8) */ INTO BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE d
  SELECT /*+ parallel (f 8) */  f.*, f.OR_IDREG as OR_IDREG_ORI
    FROM BAS_MEN.BASILEA f
   where or_idreg in
           (SELECT MAX(OR_IDREG)
              FROM BAS_MEN.PERIMETRO_BASILEA_2 D,
                   (SELECT B.segmento_cola, MAX(nvl(B.FI_EADAIRB, B.OR_FUTURS)) EAD
                      FROM (select distinct segmento_cola
                              from BAS_MEN.CALCULO_SACCR_EAD
                           ) A,
                           BAS_MEN.PERIMETRO_BASILEA_2 B
                     WHERE A.segmento_cola = B.segmento_cola
                     GROUP BY B.segmento_cola
                    ) C
             WHERE nvl(D.FI_EADAIRB, D.OR_FUTURS) = C.EAD
               AND D.segmento_cola = C.segmento_cola
             GROUP BY D.segmento_cola);
  COMMIT;

  VN_NUMERR:= 4;

   UPDATE BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE
      SET OR_IDREG = ROWNUM;

  COMMIT;

   VN_NUMERR:= 5;

  MERGE /*+ parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE    Upd
  USING (SELECT SEGMENTO_COLA, EAD_FINAL_150, NOMINAL, MARKET_VALUE, ADDON_FINAL
              , VIDRES_NOMINAL, VIDINI_NOMINAL, ANTIGU_NOMINAL
           FROM BAS_MEN.CALCULO_SACCR_EAD) Sel
     ON (Sel.SEGMENTO_COLA = CASE
                                 WHEN IN_SEGMBSINI = '007' AND OR_CODIGO_BIC <> '?' THEN OR_CODIGO_BIC
                                 WHEN OR_NIFCIF <> '?' THEN OR_NIFCIF
                                 WHEN OR_NUMOFI IN (800, 801, 813, 821, 825) THEN OR_NUMOFI || OR_CTACLI
                                 WHEN OR_COISIN <> '?' THEN OR_COISIN
                                 ELSE '?'
                              END)
   WHEN MATCHED THEN
    UPDATE
        SET
         OR_CTAIND      = 9269900000,
         OR_EPIIND      = '030030070000000000',
         FI_EPICON      = '030030070000000000000000000000',
         IN_TIPOREG     = 'DN',
         FI_ELIMI1      = 'NO',
         FI_EADAIRB     = EAD_FINAL_150,
         FI_EADCONAIRB  = EAD_FINAL_150 * fi_porcon, /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon */
         OR_FUTURS      = NOMINAL,
         OR_FUTURSCON   = NOMINAL * fi_porcon,       /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon */
         OR_FAIRVA      = MARKET_VALUE,
         OR_FAIRVACON   = MARKET_VALUE * fi_porcon,  /* 25/11/2021 - MHC - HDEV-100535 - Modificacion para el correcto calculo del fi_porcon */
         FI_CCFAIRB     = ADDON_FINAL/NOMINAL,
         OR_VIDRES      = VIDRES_NOMINAL,
         OR_VIDINI      = VIDINI_NOMINAL,
         IN_ANTIGU      = ANTIGU_NOMINAL;

  COMMIT;

  VN_NUMERR:= 6;

  --Nos quedamos con el mayor Idreg que haya en BDD.
  SELECT MAX(OR_IDREG)
    INTO VV_IDREG2
    FROM BAS_MEN.BASILEA;

  UPDATE BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE bas
     SET OR_IDREG = OR_IDREG + VV_IDREG2;

  COMMIT;

  VN_NUMERR:= 7;

  INSERT INTO BAS_MEN.BASILEA
       SELECT OR_IDREG ,OR_IDPERS ,OR_TIPIDE ,OR_NIFCIF ,OR_TIPIDEIBM ,OR_NIFCIFIBM ,OR_TITULARITAT ,
              OR_NOMPER ,OR_COISIN ,OR_PERSON ,OR_IDECNO ,OR_IDCNAE ,OR_IDCNAEREL ,OR_PROCED ,OR_NUMOFI ,
              OR_REFOPE ,OR_REFOPE2 ,OR_TIPOPE ,OR_FECOPE ,OR_FECVTO ,OR_VIDINI ,OR_VIDRES ,IN_ANTIGU ,
              OR_SEGGES ,OR_CODGAR ,OR_TIPAVA ,OR_TIPGAR ,OR_CODTIT ,OR_DESTPR ,OR_TIPOFI ,OR_TIPOPR ,
              OR_IMPLTV ,OR_VALTAS ,OR_CONCED ,OR_IDPAIS ,IN_ITITSN ,IN_INDMOR ,OR_IDPRO1 ,OR_ENTITY ,
              OR_CTAIND ,OR_EPIIND ,FI_EPICON ,FI_PORCON ,OR_DIVISA ,FI_TIPEXP ,OR_DISPTO ,OR_DISBLE ,
              OR_AVALES ,OR_FUTURS ,OR_REPOS ,OR_AJUVAL ,OR_FAIRVA ,OR_DISPTOCON ,OR_DISBLECON ,OR_AVALESCON ,
              OR_FUTURSCON ,OR_REPOSCON ,OR_AJUVALCON ,OR_FAIRVACON ,IN_TIPDER ,IN_FAIRVABO ,IN_FAIRVABOCON ,
              FI_SUMEXP ,IN_VTAGRU ,IN_VTAGRU_CONS ,OR_RATINT ,OR_MODRAT0 ,OR_SEGRIE ,OR_PUNT0 ,OR_SITUAC0 ,
              OR_FECPUN0 ,IN_SEGMBSINI ,IN_SEGMBS0 ,IN_SEGMBS1 ,IN_SEGMBS2 ,IN_SEGMBS ,IN_RATEXTAVA2 ,IN_SRATIN ,
              IN_RATEXT ,IN_RATSOB ,FI_ELIMI1 ,IN_METODE ,IN_SUCEPT ,IN_SEG_HIP ,OR_FECPRREV ,OR_CLUNIENT ,
              OR_CLUNIPROD ,OR_CLUNICONTR ,OR_CLUNICUENT ,OR_CLUNIOPERA ,FI_MESCURA ,OR_FECCAR ,OR_PRESTMIG ,
              OR_CLAVISO ,OR_FECALTBLO ,OR_TITUSCPCB ,OR_PERSONSCPCB ,FI_EADAIRB ,OR_CNAESCPCB ,FI_EADCONAIRB ,
              FI_CCFAIRB ,IN_TIPOREG ,IN_GRUP_TIPIDE ,IN_GRUP_IDPER ,IN_NOM_GRUP ,IN_IDCALIFIC ,OR_PUNTSCO ,
              OR_FECSCO ,OR_NUMSCOFIN ,IN_INDCURA ,OR_PROVAPL ,OR_INDHOLDING ,OR_VERSPREST ,OR_DESCTAVISTA ,
              OR_CODPRODO ,OR_CODISO ,OR_PRODERIV ,IN_ACTIVO ,OR_NUMFINREG ,OR_TIPOBJETO ,OR_SEGFAC ,OR_SEGFIC ,
              OR_IDSITUAC ,IN_IDCALIFICREL ,OR_SUBSTDA ,OR_MODSCO ,OR_FINABE ,OR_TIPDERIV ,OR_NUMPERCTAV ,
              OR_CNAECTAVIS ,OR_CNOCTAVIS ,OR_OPCVEN ,IN_METODE_1 ,OR_CODIGO_BIC ,IN_EXISTENCIAS ,IN_ACTIVO_CIR ,
              IN_FECMORA ,OR_CTACLI ,IN_NUMEMP ,IN_HIPOAVAL ,IN_NIFGRUPCON ,IN_PYME ,OR_INDHOLDINGREL ,OR_SEGFIC2 ,
              IN_PRESTPERCENT ,IN_CAT_BDE_N ,OR_CLUNIENT_CUENT ,OR_CLUNIPROD_CUENT ,OR_CLUNIENT_OPERA ,
              OR_CLUNIPROD_OPERA ,IN_OPER_MIGR ,IN_IDGRUPO ,MARCA_EPA ,OR_FECDEU ,OR_NUMPERSONA ,OR_PERSCTAVISTA ,
              OR_TITUCTAVISTA ,IN_FACTCOR ,OR_SITCON ,IN_RATEXT_ISIN ,IN_REFINAN ,ID_AMBIT_DRC ,IN_ACTIVO_CONS ,
              OR_CONTRATO_GARANTIA ,OR_IDMES ,OR_NIFCIFAVA ,OR_PESOW ,OR_PUNTGRUP ,OR_MARCONOT ,OR_MARCONDV ,
              OR_FECTAS ,IN_NUMEMP_CONS ,INDCURA ,FECHINICURA ,TIPODEFAULT ,FECHINISIMP ,FECHFINSIMP ,IN_DEFAULT, OR_MODGRUP
         FROM BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE;

  VN_Count := SQL%ROWCOUNT;

  COMMIT;

  VN_NUMERR:= 8;

  UPDATE /*+ full(bas) parallel(bas 8) */ BAS_MEN.BASILEA bas
     SET FI_ELIMI1 = 'NETTING'
   WHERE OR_IDREG IN (SELECT OR_IDREG
                        FROM BAS_MEN.FUSIONADA);

  COMMIT;

  BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', 'OK', null, null, VN_Count);

  COMMIT;

  VN_NUMERR:= 9;

EXCEPTION
  WHEN OTHERS THEN

        ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = VV_RETORNO
             , ERROR_PROG  = VV_Mensaje
             , ERROR_ORAC  = SUBSTR('** NUMERR: '||VN_NumErr,1,255)
             , NUM_ERROR   = VN_NumErr
         WHERE PROCES  = VV_Proces
           AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);

END;

/

show errors;


create or replace PROCEDURE BAS_MEN.BASI_CALCUL_EXPOSICIO IS

    vProces           CONSTANT VARCHAR2(40)   := 'CALCUL EXPOSICIO EAD';
    vNumErr           NUMBER(2)               DEFAULT 1;
    vCodi             NUMBER(10)              DEFAULT 0;
    vDescripcio       VARCHAR2(255)           DEFAULT '';

    VV_TABLA      CONSTANT VARCHAR2(15):= 'BAS_MEN.BASILEA';
    VN_FecPro     NUMBER(8);
    VN_MesPro     NUMBER(6);
    VN_Opc_Der    NUMBER:= 1;
    VN_F          NUMBER:= 1;
    VV_RETORNO    VARCHAR2(2) DEFAULT 'OK';

    v_dyn         VARCHAR2(30000);
    v_Ok_Crea     BOOLEAN  DEFAULT FALSE;
    FALLO1                      EXCEPTION;

BEGIN

  ROLLBACK; -- Cierre de cualquier TX que pueda haber abierta.

  --
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Activación de paralelismo

  --
  -- Obtención de las fechas de proceso en formato AAAAMM y AAAAMMDD de la tabla PARAMETROS_PROCESO
  --
  BAS_MEN.SP_Obtener_Fechas_Proceso (VN_MesPro, VN_FecPro);

  --
  -- Cálculo EAD - FNC_CALCUL_EAD
  --
  BAS_MEN.FNC_CALCULO_EAD(VV_TABLA, 1, VN_Opc_Der, VN_FecPro, VN_F, VV_RETORNO, VV_RETORNO);
  COMMIT;
  --
  -- Cálculo de la EAD de los derivados por el nuevo método SACCR
  --

  BAS_MEN.BASI_SACCR();
  COMMIT;

  BAS_MEN.FNC_INTEGRACION_SACCR(VN_MesPro);
  COMMIT;

  --
  -- EAD de Repos
  --
  BAS_MEN.FNC_CALCULO_EAD(VV_TABLA, 3, VN_Opc_Der, VN_FecPro, VN_F, VV_RETORNO, VV_RETORNO);

  --Llama a la funcion de UPDATES BASILEA
  BAS_MEN.UPDATE_PROCESO('UPDATE_PROCESO_EAD');
  COMMIT;

  v_Ok_Crea := BAS_MEN.SF_Crea_Tabla_Copia_BAS_MEN  ('BASILEA_EAD', 'BASILEA', 'S', 'S');

EXCEPTION

    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --

END;

/

select * from sys.user_errors WHERE NAME = 'BASI_CALCUL_EXPOSICIO';

--bkd40080=====================================================================================================
Select 'bkd40080' As Compilando from dual;
 
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CONCILIACION_F2 (
    PV_TABLA       IN  VARCHAR2,
    PV_RET         OUT VARCHAR2) IS

    VN_NUMERR      NUMBER(3);
    VV_MENSAJE     VARCHAR2(255);
    VN_COUNT       NUMBER(9):=0;
    VV_ROWID       VARCHAR2(50);

BEGIN

    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
           VALUES ('19.2 FNC_CONCILIACION_F2 '||PV_TABLA, SYSDATE, 'INICIADO');

    COMMIT;

    VN_COUNT := 0;
    VN_NUMERR:= 1;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.AG_BASILEA_CONCF1_AUX');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.AG_BASILEA_CONCF2_AUX');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.AG_BASILEA_CONCF2');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SRCRE_CUENTA');

    insert into BAS_MEN.maestro_srcre_cuenta
     select * from dcrprop_mensual.maestro_srcre_cuenta_sas;

		commit;
		
		VN_NUMERR:= 3;

    --ALLA se incluye RN e ITRN correspondiente con el neteo de repos
    insert /*+ parallel (f 4) */ into BAS_MEN.AG_BASILEA_CONCF1_AUX f
    select /*+ full(b) parallel (b 4) */  b.OR_ENTITY, b.OR_EPIIND, b.OR_CTAIND, decode(fi_elimi1, 'NETTING', 'NO', 'SOBFASEADO', 'NO', 'SRABS', 'NO', fi_elimi1) fi_elimi1, fi_tipexp, in_tiporeg,
           in_metode, in_ititsn, in_segmbs, in_segmbs0, sum(or_dispto)  or_dispto, sum(or_disble) or_disble, sum(or_avales) or_avales,
           sum(or_futurs) or_futurs, sum(or_repos) or_repos, sum(or_fairva) or_fairva, sum(or_ajuval) or_ajuval
      from BAS_MEN.basilea     b
     where or_entity in (81,8211)
       AND IN_TIPOREG NOT IN ('SC', 'DC', 'DN', 'RN', 'MMDN', 'MMRN', 'OXES0', 'OXES1', 'SAS0', 'SAS1', 'DTA', 'CERENTVA', 'CETITULI') /* se excluyen las inserciones por el faseado de soberanos, el Netting y el consolidado*/
       AND FI_ELIMI1 not in ('ACCBS', 'STSORI') /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
       AND OR_CTAIND <> 9999999999999  /* 16/02/2021 - NAV - Descartamos este cuanta individual */
     group by b.OR_ENTITY, b.OR_EPIIND, b.OR_CTAIND, decode(fi_elimi1, 'NETTING', 'NO',  'SOBFASEADO', 'NO', 'SRABS', 'NO', fi_elimi1), fi_tipexp, in_tiporeg,
           in_metode, in_ititsn, in_segmbs, in_segmbs0;

    commit;
    
    VN_NUMERR:= 5;

    INSERT /*+ APPEND */ INTO BAS_MEN.AG_BASILEA_CONCF2_AUX
    (EMPRESA, EPIGRAF, COMPTE,
    SALDOBDDORI,SALDOFAIRVA, SALDOBDDINI, FONINV, OPCVEN,
    SRCRE, CSIGNOA,CSIGNOM,CSIGNOP, CSIGNOR1, CSIGNOR2, CSIGNOX1, CSIGNOX2, CSIGNOX4,CSIGNOX5, FAIRVA, TITACT, TITACT2,BONTIT, CRSUB, LINLIQ,
    SWATIT, EQUITY,RFNEG,ACTIVOS_TITULIZADOS, AJUSTES, OFIEX, RESTO, NOENBAL, IDRE,
     TOT_SEG_STDA,SEG_COMYAUT_STDA, SEG_CORPLOC_STDA,SEG_DCOB_STDA,SEG_EMP_STDA,SEG_EEFF_STDA,SEG_HV_STDA,SEG_OTRINST_STDA,SEG_OTRACTIV_STDA,
    SEG_PF_STDA,SEG_PREST_STDA,SEG_PYMEEMP_STDA,SEG_PYMEMIN_STDA,SEG_RESTMIN_STDA,SEG_SOB_STDA,SEG_TARJC_STDA,SIN_SEG_STDA,TOT_SEG_AIRB,SEG_COMYAUT_AIRB,
    SEG_CORPLOC_AIRB,SEG_DCOB_AIRB,SEG_EMP_AIRB,SEG_EEFF_AIRB,SEG_HV_AIRB,SEG_OTRINST_AIRB,SEG_OTRACTIV_AIRB,SEG_PF_AIRB,SEG_PREST_AIRB,
    SEG_PYMEEMP_AIRB,SEG_PYMEMIN_AIRB, SEG_RESTMIN_AIRB,SEG_SOB_AIRB,SEG_TARJC_AIRB,SIN_SEG_AIRB, NO, GAROPE, GAROFEX)
    SELECT b.OR_ENTITY, b.OR_EPIIND, b.OR_CTAIND,
    SUM(b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+
    decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)+ b.OR_AJUVAL+ OR_FAIRVA),/*SALDOBDDORI*/
    SUM(decode(substr(b.OR_EPIIND,1,5),'03003',b.OR_FAIRVA
                                      ,decode(fi_tipexp, 'Repos',b.OR_FAIRVA,0))),/*SALDOFAIRVA*/
    SUM(DECODE(fi_elimi1,'GAROPE', 0, 'GAROFEX', 0, 'GAROMX', 0, /* 07/09/2021 - NAV - añadimos FI_ELIMI1 de Mexico */
    DECODE(b.FI_TIPEXP,'Repos',DECODE(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS),
    b.OR_REPOS,0,b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+
    b.OR_AJUVAL + decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)))),/*SALDOBDDINI*/
    sum(decode(FI_ELIMI1,'FONINV',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*FONINV*/
    sum(decode(FI_ELIMI1,'OPCVEN',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*OPCVEN*/
    sum(decode(FI_ELIMI1,'SRCRE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*SRCRE*/
    sum(decode(FI_ELIMI1,'CSIGNOA',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOA*/
    sum(decode(FI_ELIMI1,'CSIGNOM',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0))+
    sum(decode(FI_ELIMI1,'CSIGNOM2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOM*/
    sum(decode(FI_ELIMI1,'CSIGNOP',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOP*/
    sum(decode(FI_ELIMI1,'CSIGNOR1',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOR1*/
    sum(decode(FI_ELIMI1,'CSIGNOR2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOR2*/
    sum(decode(FI_ELIMI1,'CSIGNOX1',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOX1*/
    sum(decode(FI_ELIMI1,'CSIGNOX2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOX2*/
    sum(decode(FI_ELIMI1,'CSIGNOX4',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOX4*/
    sum(decode(FI_ELIMI1,'CSIGNOX5',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CSIGNOX5  */
    sum(decode(FI_ELIMI1,'FAIRVA',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*FAIRVA*/
    sum(decode(FI_ELIMI1,'TITACT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*TITACT */
    sum(decode(FI_ELIMI1,'TITACT2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*TITACT2 */
    sum(decode(FI_ELIMI1,'BONTIT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*BONTIT */
    sum(decode(FI_ELIMI1,'CRSUB',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*CRSUB */
    sum(decode(FI_ELIMI1,'LINLIQ',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*LINLIQ*/
    sum(decode(FI_ELIMI1,'SWATIT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*SWATIT */
    sum(decode(FI_ELIMI1,'EQUITY',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*EQUITY */
    sum(decode(FI_ELIMI1,'RFNEG',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),/*RFNEG*/
    SUM(DECODE(FI_ELIMI1,'NO',DECODE(UPPER(IN_ITITSN),'SI',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)) as ACTIVOS_TITULIZADOS, /*Activos titulizados*/
    0 as AJUSTES, --Ajustes
    sum(decode(FI_ELIMI1,'NO',DECODE(UPPER(IN_ITITSN),'SI',0,decode(IN_TIPOREG ,
    'SX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'ITSX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'DX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OXC',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'MMOXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'ITOXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'MMOXC',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'PX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'RX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as OFIEX,--OFIEX
    sum(decode(FI_ELIMI1,'NO',DECODE(UPPER(IN_ITITSN),'SI',0,decode(IN_TIPOREG ,'OX',0, 'OXE',0, 'MMOXE',0, 'ITOXE', 0, 'OXC', 0, 'MMOXC', 0, 'PX',0,'RX',0,'DX',0,'SX',0, 'ITSX', 0,
    decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)))),0)) as RESTO,--RESTO
    sum(decode(FI_ELIMI1,'NOENBALANCE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--NOENBALANCE
    sum(decode(FI_ELIMI1,'IDRE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--IDRE
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)),--TOTSEG_STDA
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS,'Comercios y Autónomos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Corporaciones Locales',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Derechos Cobro',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Entidades Financieras',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos Hipotecarios',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otras Instituciones',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otros Activos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS,
    'Project Finance',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'Real Estate',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'Object Finance',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Minoristas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Resto Minorista',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Soberanos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Tarjetas Crédito',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, '?',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(DECODE(IN_METODE,'AIRB','AIRB'),'AIRB',decode(DECODE(FI_ELIMI1,'NO','NO'),'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)),--TOTSEG_AIRB
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS,'Comercios y Autónomos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Corporaciones Locales',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Derechos Cobro',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Entidades Financieras',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos Hipotecarios',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otras Instituciones',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otros Activos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS0,
    '201',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    '203',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    '204',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Minoristas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Resto Minorista',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Soberanos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Tarjetas Crédito',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, '?',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(decode(FI_ELIMI1,'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--NO
    /*sum(decode(FI_ELIMI1,'GAROPE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)), --GAROPE*/
    sum(case when FI_ELIMI1 in ('GAROPE', 'GAROMX') THEN
                decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
                decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS))
             else 0
        end), --GAROPE
    sum(decode(FI_ELIMI1,'GAROFEX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)) --GAROFEX
    FROM BAS_MEN.AG_BASILEA_CONCF1_AUX b
    where OR_EPIIND IS NOT NULL
    GROUP BY b.or_entity, b.or_epiind, b.or_ctaind;

    COMMIT;
    
    VN_NUMERR:= 7;

    INSERT /*+ APPEND */ INTO BAS_MEN.AG_BASILEA_CONCF2_aux
    (EMPRESA, EPIGRAF, COMPTE,
    SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI, FONINV, OPCVEN,
    SRCRE, CSIGNOA,CSIGNOM,CSIGNOP, CSIGNOR1, CSIGNOR2, CSIGNOX1, CSIGNOX2, CSIGNOX4,CSIGNOX5, FAIRVA, TITACT, TITACT2,BONTIT, CRSUB, LINLIQ,
    SWATIT, EQUITY,RFNEG,ACTIVOS_TITULIZADOS, AJUSTES, OFIEX, RESTO, NOENBAL, IDRE,
     TOT_SEG_STDA,SEG_COMYAUT_STDA, SEG_CORPLOC_STDA,SEG_DCOB_STDA,SEG_EMP_STDA,SEG_EEFF_STDA,SEG_HV_STDA,SEG_OTRINST_STDA,SEG_OTRACTIV_STDA,
    SEG_PF_STDA,SEG_PREST_STDA,SEG_PYMEEMP_STDA,SEG_PYMEMIN_STDA,SEG_RESTMIN_STDA,SEG_SOB_STDA,SEG_TARJC_STDA,SIN_SEG_STDA,TOT_SEG_AIRB,SEG_COMYAUT_AIRB,
    SEG_CORPLOC_AIRB,SEG_DCOB_AIRB,SEG_EMP_AIRB,SEG_EEFF_AIRB,SEG_HV_AIRB,SEG_OTRINST_AIRB,SEG_OTRACTIV_AIRB,SEG_PF_AIRB,SEG_PREST_AIRB,
    SEG_PYMEEMP_AIRB,SEG_PYMEMIN_AIRB, SEG_RESTMIN_AIRB,SEG_SOB_AIRB,SEG_TARJC_AIRB,SIN_SEG_AIRB, NO, GAROPE, GAROFEX)
    SELECT b.OR_ENTITY, bal.epigraf, b.OR_CTAIND,
    SUM(b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+
    decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)+ b.OR_AJUVAL+ OR_FAIRVA),--SALDOBDDORI
    SUM(decode(substr(b.OR_EPIIND,1,5),'03003',b.OR_FAIRVA
                                      ,decode(fi_tipexp, 'Repos',b.OR_FAIRVA),0)),--SALDOFAIRVA
    SUM (DECODE(fi_elimi1,'GAROPE', 0, 'GAROFEX', 0, 'GAROMX', 0, /* 07/09/2021 - NAV - añadimos FI_ELIMI1 de Mexico */
    DECODE(b.OR_REPOS,0,b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+
    b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,
    DECODE(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)))),--SALDOBDDINI
    sum(decode(FI_ELIMI1,'FONINV',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--FONINV
    sum(decode(FI_ELIMI1,'OPCVEN',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--OPCVEN
    sum(decode(FI_ELIMI1,'SRCRE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--SRCRE
    sum(decode(FI_ELIMI1,'CSIGNOA',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOA
    sum(decode(FI_ELIMI1,'CSIGNOM',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0))+
    sum(decode(FI_ELIMI1,'CSIGNOM2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOM
    sum(decode(FI_ELIMI1,'CSIGNOP',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOP
    sum(decode(FI_ELIMI1,'CSIGNOR1',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOR1
    sum(decode(FI_ELIMI1,'CSIGNOR2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOR2
    sum(decode(FI_ELIMI1,'CSIGNOX1',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX1
    sum(decode(FI_ELIMI1,'CSIGNOX2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX2
    sum(decode(FI_ELIMI1,'CSIGNOX4',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX4
    sum(decode(FI_ELIMI1,'CSIGNOX5',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CSIGNOX5
    sum(decode(FI_ELIMI1,'FAIRVA',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--FAIRVA
    sum(decode(FI_ELIMI1,'TITACT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--TITACT
    sum(decode(FI_ELIMI1,'TITACT2',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--TITACT2
    sum(decode(FI_ELIMI1,'BONTIT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--BONTIT
    sum(decode(FI_ELIMI1,'CRSUB',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--CRSUB
    sum(decode(FI_ELIMI1,'LINLIQ',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--LINLIQ
    sum(decode(FI_ELIMI1,'SWATIT',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--SWATIT
    sum(decode(FI_ELIMI1,'EQUITY',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--EQUITY
    sum(decode(FI_ELIMI1,'RFNEG',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--RFNEG
    SUM(DECODE(FI_ELIMI1,'NO',DECODE(UPPER(IN_ITITSN),'SI',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)), --Activos titulizados
    0 as AJUSTES, --Ajustes
    sum(decode(FI_ELIMI1,'NO',DECODE(UPPER(IN_ITITSN),'SI',0,decode(IN_TIPOREG ,
    'SX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'ITSX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'RX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'OXC',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'MMOXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'ITOXE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'MMOXC',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'PX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'RX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),0)) as OFIEX,--OFIEX
    sum(decode(FI_ELIMI1,'NO',DECODE(UPPER(IN_ITITSN),'SI',0,decode(IN_TIPOREG ,'OX',0, 'OXE',0, 'MMOXE',0, 'ITOXE', 0, 'OXC',0, 'MMOXC',0, 'PX',0,'RX',0,'DX',0,'SX',0, 'ITSX', 0,
    decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL/*+ decode(substr(b.OR_EPIIND,1,5),
    '03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)))),0)) as RESTO,--RESTO
    sum(decode(FI_ELIMI1,'NOENBALANCE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--NOENBALANCE
    sum(decode(FI_ELIMI1,'IDRE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--IDRE
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)),--TOTSEG_STDA
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS,'Comercios y Autónomos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Corporaciones Locales',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Derechos Cobro',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Entidades Financieras',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos Hipotecarios',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otras Instituciones',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otros Activos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS,
    'Project Finance',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'Real Estate',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    'Object Finance',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Minoristas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Resto Minorista',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Soberanos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Tarjetas Crédito',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'STDA',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, '?',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(DECODE(IN_METODE,'AIRB','AIRB'),'AIRB',decode(DECODE(FI_ELIMI1,'NO','NO'),'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0)),--TOTSEG_AIRB
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS,'Comercios y Autónomos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Corporaciones Locales',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Derechos Cobro',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Entidades Financieras',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos Hipotecarios',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otras Instituciones',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Otros Activos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS0,
    '201',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    '203',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),
    '204',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Préstamos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Empresas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Pyme Minoristas',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Resto Minorista',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Soberanos',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, 'Tarjetas Crédito',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(DECODE(IN_METODE,'AIRB',decode(FI_ELIMI1,'NO',decode(IN_SEGMBS, '?',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0),0),0)),
    sum(decode(FI_ELIMI1,'NO',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL
    /*+ decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA)*/,decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)),--NO
    /*sum(decode(FI_ELIMI1,'GAROPE',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)), --GAROPE*/
    sum(case when FI_ELIMI1 in ('GAROPE', 'GAROMX') THEN
                decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
                decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS))
             else 0
        end), --GAROPE    
    sum(decode(FI_ELIMI1,'GAROFEX',decode(b.OR_REPOS,0, b.OR_DISPTO+ b.OR_DISBLE+ b.OR_AVALES+ b.OR_FUTURS+b.OR_REPOS+ b.OR_AJUVAL+
    decode(substr(b.OR_EPIIND,1,5),'03003',0,b.OR_FAIRVA),decode(substr(b.OR_EPIIND,1,5),'02002',b.OR_REPOS,'02004',OR_REPOS,OR_REPOS)),0)) as GAROFEX --GAROFEX
    FROM BAS_MEN.AG_BASILEA_CONCF1_AUX b
       --, BAS_MEN.balance_individual bal
       , ( select distinct empresa, epigraf, compte from BAS_MEN.balance_individual ) bal
    where b.or_entity = bal.empresa
      and b.or_ctaind = bal.compte
      and b.OR_EPIIND IS NULL
    GROUP BY b.or_entity, bal.epigraf, b.or_ctaind;

    COMMIT;

    VN_NUMERR:= 10;

    insert /*+ APPEND */ into BAS_MEN.AG_BASILEA_CONCF2
    (EMPRESA, EPIGRAF, COMPTE, PROC_SALDOS
    ,SALDOBDDORI,SALDOFAIRVA, SALDOBDDINI, FONINV, OPCVEN,
    SRCRE, CSIGNOA,CSIGNOM,CSIGNOP, CSIGNOR1, CSIGNOR2, CSIGNOX1, CSIGNOX2, CSIGNOX4,CSIGNOX5, FAIRVA, TITACT, TITACT2,BONTIT, CRSUB, LINLIQ,
    SWATIT, EQUITY,RFNEG,ACTIVOS_TITULIZADOS, AJUSTES, OFIEX, RESTO, NOENBAL, IDRE,
     TOT_SEG_STDA,SEG_COMYAUT_STDA, SEG_CORPLOC_STDA,SEG_DCOB_STDA,SEG_EMP_STDA,SEG_EEFF_STDA,SEG_HV_STDA,SEG_OTRINST_STDA,SEG_OTRACTIV_STDA,
    SEG_PF_STDA,SEG_PREST_STDA,SEG_PYMEEMP_STDA,SEG_PYMEMIN_STDA,SEG_RESTMIN_STDA,SEG_SOB_STDA,SEG_TARJC_STDA,SIN_SEG_STDA,TOT_SEG_AIRB,SEG_COMYAUT_AIRB,
    SEG_CORPLOC_AIRB,SEG_DCOB_AIRB,SEG_EMP_AIRB,SEG_EEFF_AIRB,SEG_HV_AIRB,SEG_OTRINST_AIRB,SEG_OTRACTIV_AIRB,SEG_PF_AIRB,SEG_PREST_AIRB,
    SEG_PYMEEMP_AIRB,SEG_PYMEMIN_AIRB, SEG_RESTMIN_AIRB,SEG_SOB_AIRB,SEG_TARJC_AIRB,SIN_SEG_AIRB, NO, GAROPE, GAROFEX, NETTING, TIPO_DN)
    SELECT EMPRESA, EPIGRAF, COMPTE,NVL(PROC_SALDOS,0)
          ,SUM(NVL(SALDOBDDORI,0))
          ,SUM(NVL(SALDOFAIRVA,0))
          ,SUM(NVL(SALDOBDDINI,0))
          ,SUM(NVL(FONINV,0))
          ,SUM(NVL(OPCVEN,0))
          ,SUM(NVL(SRCRE,0))
          ,SUM(NVL(CSIGNOA,0))
          ,SUM(NVL(CSIGNOM,0))
          ,SUM(NVL(CSIGNOP,0))
          ,SUM(NVL(CSIGNOR1,0))
          ,SUM(NVL(CSIGNOR2,0))
          ,SUM(NVL(CSIGNOX1,0))
          ,SUM(NVL(CSIGNOX2,0))
          ,SUM(NVL(CSIGNOX4,0))
          ,SUM(NVL(CSIGNOX5,0))
          ,SUM(NVL(FAIRVA,0))
          ,SUM(NVL(TITACT,0))
          ,SUM(NVL(TITACT2,0))
          ,SUM(NVL(BONTIT,0))
          ,SUM(NVL(CRSUB,0))
          ,SUM(NVL(LINLIQ,0))
          ,SUM(NVL(SWATIT,0))
          ,SUM(NVL(EQUITY,0))
          ,SUM(NVL(RFNEG,0))
          ,SUM(NVL(ACTIVOS_TITULIZADOS,0))
          ,SUM(NVL(AJUSTES,0))
          ,SUM(NVL(OFIEX,0))
          ,SUM(NVL(RESTO,0))
          ,SUM(NVL(NOENBAL,0))
          ,SUM(NVL(IDRE,0))
          ,SUM(NVL(TOT_SEG_STDA,0))
          ,SUM(NVL(SEG_COMYAUT_STDA,0))
          ,SUM(NVL(SEG_CORPLOC_STDA,0))
          ,SUM(NVL(SEG_DCOB_STDA,0))
          ,SUM(NVL(SEG_EMP_STDA,0))
          ,SUM(NVL(SEG_EEFF_STDA,0))
          ,SUM(NVL(SEG_HV_STDA,0))
          ,SUM(NVL(SEG_OTRINST_STDA,0))
          ,SUM(NVL(SEG_OTRACTIV_STDA,0))
          ,SUM(NVL(SEG_PF_STDA,0))
          ,SUM(NVL(SEG_PREST_STDA,0))
          ,SUM(NVL(SEG_PYMEEMP_STDA,0))
          ,SUM(NVL(SEG_PYMEMIN_STDA,0))
          ,SUM(NVL(SEG_RESTMIN_STDA,0))
          ,SUM(NVL(SEG_SOB_STDA,0))
          ,SUM(NVL(SEG_TARJC_STDA,0))
          ,SUM(NVL(SIN_SEG_STDA,0))
          ,SUM(NVL(TOT_SEG_AIRB,0))
          ,SUM(NVL(SEG_COMYAUT_AIRB,0))
          ,SUM(NVL(SEG_CORPLOC_AIRB,0))
          ,SUM(NVL(SEG_DCOB_AIRB,0))
          ,SUM(NVL(SEG_EMP_AIRB,0))
          ,SUM(NVL(SEG_EEFF_AIRB,0))
          ,SUM(NVL(SEG_HV_AIRB,0))
          ,SUM(NVL(SEG_OTRINST_AIRB,0))
          ,SUM(NVL(SEG_OTRACTIV_AIRB,0))
          ,SUM(NVL(SEG_PF_AIRB,0))
          ,SUM(NVL(SEG_PREST_AIRB,0))
          ,SUM(NVL(SEG_PYMEEMP_AIRB,0))
          ,SUM(NVL(SEG_PYMEMIN_AIRB,0))
          ,SUM(NVL(SEG_RESTMIN_AIRB,0))
          ,SUM(NVL(SEG_SOB_AIRB,0))
          ,SUM(NVL(SEG_TARJC_AIRB,0))
          ,SUM(NVL(SIN_SEG_AIRB,0))
          ,SUM(NVL(NO,0))
          ,SUM(NVL(GAROPE,0))
          ,SUM(NVL(GAROFEX,0))
          ,SUM(NVL(NETTING,0))
          ,SUM(NVL(TIPO_DN,0))
      FROM BAS_MEN.AG_BASILEA_CONCF2_AUX
    GROUP BY EMPRESA, EPIGRAF, COMPTE, NVL(PROC_SALDOS,0);

    COMMIT;
    
    VN_NUMERR:= 12;

/*Introducción y cálculo de las diferentes columnas de la conciliación.

Se efectúan dos pasos:
        1- En el primero se consideran todos los registros del balance individual, estén o no estén en Basilea,
        estableciendo el valor del indicador 'EN BDD Y NO EN BALANCE'=0
        2- En el segundo se efectua la operación a la inversa y se establece el valor del indicador 'EN BDD Y NO EN BALANCE'=1 */

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONCILIACION_IND_F2_TMP');

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F2_TMP
    (EMPRESA, EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE,SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI,   --VJB 070905 se añade el epígrafe homogeneo
    DEBEBDD, LLEGABDD ,NOENBAL,IDRE, CSIGNOA, CSIGNOM, CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1,
    CSIGNOX2,CSIGNOX4,CSIGNOX5,TITACT, FAIRVA, TITACT2, BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG, FONINV, OPCVEN,
    SRCRE, OFIEX, EQUITY,AJUSTES,ACTIVOS_TITULIZADOS,RESTO,
    TOT_SEG_STDA,SEG_COMYAUT_STDA, SEG_CORPLOC_STDA,SEG_DCOB_STDA,SEG_EMP_STDA,SEG_EEFF_STDA,SEG_HV_STDA,
    SEG_OTRINST_STDA,SEG_OTRACTIV_STDA,SEG_PF_STDA,SEG_PREST_STDA,SEG_PYMEEMP_STDA,SEG_PYMEMIN_STDA,SEG_RESTMIN_STDA,SEG_SOB_STDA,
    SEG_TARJC_STDA,SIN_SEG_STDA,
    TOT_SEG_AIRB,SEG_COMYAUT_AIRB,SEG_CORPLOC_AIRB,SEG_DCOB_AIRB,SEG_EMP_AIRB,SEG_EEFF_AIRB,SEG_HV_AIRB,SEG_OTRINST_AIRB,
    SEG_OTRACTIV_AIRB,SEG_PF_AIRB,SEG_PREST_AIRB,SEG_PYMEEMP_AIRB,SEG_PYMEMIN_AIRB, SEG_RESTMIN_AIRB,SEG_SOB_AIRB,SEG_TARJC_AIRB,
    SIN_SEG_AIRB,NO,PROC_SALDOS, GAROPE, GAROFEX, NETTING, TIPO_DN)
    SELECT a.EMPRESA, a.EPIGRAF,a.DESCRIPCIO, a.COMPTE,A.NOM,
    DECODE(DECODE(substr(A.EPIGRAF,1,8),'02002006','REPOS'
                                                            ,'02003001','REPOS'
                                                                      ,decode(substr(A.EPIGRAF,1,11),'02004002004','REPOS'
                                                                                                    ,'02004004004','REPOS','?')),'REPOS',NVL(a.SALDO,0),NVL(-1*a.SALDO,0)),
    NVL(b.SALDOBDDORI,0),NVL(b.SALDOFAIRVA,0), NVL(b.SALDOBDDINI,0),
    DECODE (a.compte,0,0,1),DECODE(b.empresa,NULL,0,1), NVL(b.NOENBAL,0), NVL(B.IDRE,0),
    NVL(b.CSIGNOA,0),NVL(b.CSIGNOM,0),NVL(b.CSIGNOP,0), NVL(b.CSIGNOR1,0), NVL(b.CSIGNOR2,0), NVL(b.CSIGNOX1,0), NVL(b.CSIGNOX2,0),
    NVL(b.CSIGNOX4,0),NVL(b.CSIGNOX5,0),NVL(b.TITACT,0), NVL(b.FAIRVA,0),NVL(b.TITACT2,0), NVL(b.BONTIT,0),
    NVL(b.CRSUB,0), NVL(b.LINLIQ,0), NVL(b.SWATIT,0),NVL(b.RFNEG,0),NVL(b.FONINV,0), NVl(b.OPCVEN,0),
    NVL(b.SRCRE,0), NVL(b.OFIEX,0), NVL(b.EQUITY,0),NVL(b.AJUSTES,0), NVL(b.ACTIVOS_TITULIZADOS,0),
    NVL(b.RESTO,0),
    NVL(TOT_SEG_STDA,0),nvl(SEG_COMYAUT_STDA,0), nvl(SEG_CORPLOC_STDA,0),nvl(SEG_DCOB_STDA,0),nvl(SEG_EMP_STDA,0),nvl(SEG_EEFF_STDA,0),nvl(SEG_HV_STDA,0),nvl(SEG_OTRINST_STDA,0),
    nvl(SEG_OTRACTIV_STDA,0),nvl(SEG_PF_STDA,0),nvl(SEG_PREST_STDA,0),nvl(SEG_PYMEEMP_STDA,0),nvl(SEG_PYMEMIN_STDA,0),
    nvl(SEG_RESTMIN_STDA,0),nvl(SEG_SOB_STDA,0),nvl(SEG_TARJC_STDA,0),nvl(SIN_SEG_STDA,0),
    NVL(TOT_SEG_AIRB,0),nvl(SEG_COMYAUT_AIRB,0),nvl(SEG_CORPLOC_AIRB,0),
    nvl(SEG_DCOB_AIRB,0),nvl(SEG_EMP_AIRB,0),nvl(SEG_EEFF_AIRB,0),nvl(SEG_HV_AIRB,0),nvl(SEG_OTRINST_AIRB,0),
    nvl(SEG_OTRACTIV_AIRB,0),nvl(SEG_PF_AIRB,0),nvl(SEG_PREST_AIRB,0),nvl(SEG_PYMEEMP_AIRB,0),nvl(SEG_PYMEMIN_AIRB,0),
    nvl(SEG_RESTMIN_AIRB,0),nvl(SEG_SOB_AIRB,0),nvl(SEG_TARJC_AIRB,0),nvl(SIN_SEG_AIRB,0),NVL(b.NO,0),NVL(B.PROC_SALDOS,0),NVL(B.GAROPE,0),
    NVL(B.GAROFEX,0), NVL(NETTING,0), NVL(TIPO_DN,0)
    FROM BAS_MEN.AG_BASILEA_CONCF2 b,
    --BAS_MEN.balance_individual a
       ( select EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM, SUM(SALDO) AS SALDO
           from BAS_MEN.balance_individual
          group by EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM ) a
    where a.empresa=b.empresa(+)
    and a.compte=b.compte(+)
    AND a.epigraf=b.epigraf(+)
    and (a.epigraf like '010%' or  a.epigraf like '020%' or a.epigraf like '030%')
    and a.epigraf not in ('030010100000000000','030020100000000000','030050030010100000')
    and a.compte<>0;

    COMMIT;
    
    VN_NUMERR:= 14;

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F2_TMP
    (EMPRESA, EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE,SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI,
    DEBEBDD, LLEGABDD,  BDDNOENBAL,NOENBAL, IDRE, CSIGNOA,CSIGNOM,CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1,CSIGNOX2,
    CSIGNOX4,CSIGNOX5,TITACT,FAIRVA,TITACT2,BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG,FONINV,OPCVEN,
    SRCRE,OFIEX,EQUITY,AJUSTES,ACTIVOS_TITULIZADOS,RESTO,
    TOT_SEG_STDA,SEG_COMYAUT_STDA, SEG_CORPLOC_STDA,SEG_DCOB_STDA,SEG_EMP_STDA,SEG_EEFF_STDA,SEG_HV_STDA,
    SEG_OTRINST_STDA,SEG_OTRACTIV_STDA,SEG_PF_STDA,SEG_PREST_STDA,SEG_PYMEEMP_STDA,SEG_PYMEMIN_STDA,SEG_RESTMIN_STDA,SEG_SOB_STDA,
    SEG_TARJC_STDA,SIN_SEG_STDA,
    TOT_SEG_AIRB,SEG_COMYAUT_AIRB,SEG_CORPLOC_AIRB,SEG_DCOB_AIRB,SEG_EMP_AIRB,SEG_EEFF_AIRB,SEG_HV_AIRB,SEG_OTRINST_AIRB,
    SEG_OTRACTIV_AIRB,SEG_PF_AIRB,SEG_PREST_AIRB,SEG_PYMEEMP_AIRB,SEG_PYMEMIN_AIRB, SEG_RESTMIN_AIRB,SEG_SOB_AIRB,SEG_TARJC_AIRB,
    SIN_SEG_AIRB, NO, PROC_SALDOS, GAROPE, GAROFEX, NETTING, TIPO_DN)
    SELECT b.empresa, b.epigraf,a.DESCRIPCIO,b.COMPTE,a.NOM,
    DECODE(DECODE(substr(A.EPIGRAF,1,8),'02002006','REPOS'
                                                            ,'02003001','REPOS'
                                                                      ,decode(substr(A.EPIGRAF,1,11),'02004002004','REPOS'
                                                                                                    ,'02004004004','REPOS','?')),'REPOS',NVL(a.SALDO,0),NVL(-1*a.SALDO,0)),
    NVL(b.SALDOBDDORI,0),NVL(b.SALDOFAIRVA,0),NVL(b.SALDOBDDINI,0),DECODE (b.compte,0,0,1),1,1, NVL(b.NOENBAL,0), NVL(IDRE,0),NVL(b.CSIGNOA,0),NVL(b.CSIGNOM,0),NVL(b.CSIGNOP,0),
    NVL(b.CSIGNOR1,0),NVL(b.CSIGNOR2,0),NVL(b.CSIGNOX1,0),NVL(b.CSIGNOX2,0),NVL(b.CSIGNOX4,0),NVL(b.CSIGNOX5,0),NVL(b.TITACT,0),NVL(b.FAIRVA,0),
    NVL(b.TITACT2,0), NVL(b.BONTIT,0),NVL(b.CRSUB,0), NVL(b.LINLIQ,0),
    NVL(b.SWATIT,0),NVL(b.RFNEG,0),NVL(b.FONINV,0),NVL(b.OPCVEN,0),
    NVL(b.SRCRE,0),NVL(b.OFIEX,0),NVL(b.EQUITY,0),NVL(b.AJUSTES,0),NVL(b.ACTIVOS_TITULIZADOS,0),
    NVL(b.RESTO,0),
    NVL(TOT_SEG_STDA,0),nvl(SEG_COMYAUT_STDA,0), nvl(SEG_CORPLOC_STDA,0),nvl(SEG_DCOB_STDA,0),nvl(SEG_EMP_STDA,0),nvl(SEG_EEFF_STDA,0),nvl(SEG_HV_STDA,0),nvl(SEG_OTRINST_STDA,0),
    nvl(SEG_OTRACTIV_STDA,0),nvl(SEG_PF_STDA,0),nvl(SEG_PREST_STDA,0),nvl(SEG_PYMEEMP_STDA,0),nvl(SEG_PYMEMIN_STDA,0),
    nvl(SEG_RESTMIN_STDA,0),nvl(SEG_SOB_STDA,0),nvl(SEG_TARJC_STDA,0),nvl(SIN_SEG_STDA,0),
    NVL(TOT_SEG_AIRB,0),nvl(SEG_COMYAUT_AIRB,0),nvl(SEG_CORPLOC_AIRB,0),
    nvl(SEG_DCOB_AIRB,0),nvl(SEG_EMP_AIRB,0),nvl(SEG_EEFF_AIRB,0),nvl(SEG_HV_AIRB,0),nvl(SEG_OTRINST_AIRB,0),
    nvl(SEG_OTRACTIV_AIRB,0),nvl(SEG_PF_AIRB,0),nvl(SEG_PREST_AIRB,0),nvl(SEG_PYMEEMP_AIRB,0),nvl(SEG_PYMEMIN_AIRB,0),
    nvl(SEG_RESTMIN_AIRB,0),nvl(SEG_SOB_AIRB,0),nvl(SEG_TARJC_AIRB,0),nvl(SIN_SEG_AIRB,0),
    NVL(b.NO,0), NVL(B.PROC_SALDOS,0),NVL(B.GAROPE,0),NVL(B.GAROFEX,0), NVL(NETTING,0), NVL(TIPO_DN,0)
    FROM BAS_MEN.AG_BASILEA_CONCF2 b,
         --BAS_MEN.balance_individual a
       ( select EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM, SUM(SALDO) AS SALDO
           from BAS_MEN.balance_individual
          group by EMPRESA, EPIGRAF, DESCRIPCIO, COMPTE, NOM ) a
    where b.empresa = a.empresa(+)
      and b.compte  = a.compte(+)
      AND b.epigraf = a.epigraf(+)
      AND a.empresa is null;

    commit;

		VN_NUMERR:= 16;
		
--Se marcan como sin riesgo de crédito (CONSCRE=1) y como no necesario que lleguen a la base de datos (DEBEBDD=0) las cuentas encontradas
--en MAESTRO_SRCRE_CUENTA
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP a
    set a.CONSSRCRE =1,
        a.DEBEBDD =0
    WHERE a.COMPTE IN (SELECT distinct b.OR_CTAIND FROM BAS_MEN.maestro_srcre_cuenta b);

    commit;
    
    VN_NUMERR:= 18;

--Se marcan como sin riesgo de crédito (CONSCRE=1) y como no necesario que lleguen a la base de datos (DEBEBDD=0) los epígrafes encontrados
--en MAESTRO_SRCRE_EPIGRAFE.
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP a
    set a.CONSSRCRE =1,
        a.DEBEBDD =0
    WHERE a.EPIGRAF IN (SELECT b.OR_EPIIND FROM BAS_MEN.maestro_srcre_epigrafe b);

    COMMIT;

--Se marcan como correcciones de valor (CORRVAL=1) y como no necesario que lleguen a la base de datos (DEBEBDD=0) los epígrafes encontrados
--en MAESTRO_CORREC_VALOR.
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP a
    set a.CORRVAL=1,
        a.DEBEBDD =0
    WHERE
    a.EPIGRAF IN (SELECT b.OR_EPIIND FROM
    BAS_MEN.maestro_CORREC_VALOR b
    WHERE a.EPIGRAF=b.OR_EPIIND);

    COMMIT;
    
		VN_NUMERR:= 20;

--Se marcan como SEPIDE=1 los epígrafes encontrados en MAESTRO_EPS_SE_PIDE
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP a
    set a.SEPIDE=1
    WHERE a.EPIGRAF IN (SELECT b.EPIGRAF FROM
    BAS_MEN.MAESTRO_EPS_SEPIDE b
    WHERE a.EPIGRAF=b.EPIGRAF
    AND SEPIDE=1);

    COMMIT;

-- Actualiza el campo DEBEBDD. El campo se inicializa a 1. Se establece a 0 (no deben llegar) para aquellas cuentas sin riesgo de crédito o que
--son correcciones de valor o que no se piden.
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP a
    set a.DEBEBDD=1;

    COMMIT;
    
    VN_NUMERR:= 22;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP a
    set a.DEBEBDD=0
    WHERE
    COMPTE=0 OR CONSSRCRE=1 OR CORRVAL=1 OR SEPIDE=0;

    COMMIT;
    
    VN_NUMERR:= 24;

--Cálculo de los campos de ajustes, ofiex y resto pendientes (tanto los que llegan a la base de datos como los que no)
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
    SET
    AJUSTESPEN=NVL(DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,DECODE(AJUSTES,0,0,(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+
               CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+ CSIGNOX2+ CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT
               + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+ RESTO+NETTING+TIPO_DN))/*,0*/),0),0),0),0),0)
    , RESTOPEN=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
               DECODE(AJUSTES,0,
               DECODE(OFIEX,0,(SALDOBAL - (RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+ CSIGNOX1+ CSIGNOX2
               +CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+ BONTIT+ CRSUB+ LINLIQ+ SWATIT+ EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+
               RESTO+AJUSTESPEN+OFIEXPEN+NETTING+TIPO_DN) ) ,0) ,0) ,0) ,0) ,0) ,0)
    , OFIEXPEN=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
               DECODE(AJUSTES,0,DECODE(OFIEX,0,DECODE(GAROFEX,0,0,(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
               CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
               OFIEX + RESTO+NETTING+TIPO_DN))),(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
               CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
               OFIEX + RESTO+NETTING+TIPO_DN))),0),0),0),0),0)
      WHERE PROC_SALDOS <> 1;

    COMMIT;
    
    VN_NUMERR:= 26;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
    SET
    AJUSTESPEN_SALD=NVL(DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,DECODE(AJUSTES,0,0,(SALDOBAL-(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+
                    CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+ CSIGNOX2+ CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT
                    + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+ RESTO+NETTING+TIPO_DN))/*,0*/),0),0),0),0),0)
    , RESTOPEN_SALD=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
                    DECODE(AJUSTES,0,
                    DECODE(OFIEX,0,(SALDOBAL - (RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+ CSIGNOX1+ CSIGNOX2
                    +CSIGNOX4+ CSIGNOX5+ FAIRVA+ TITACT+ TITACT2+ BONTIT+ CRSUB+ LINLIQ+ SWATIT+ EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+ OFIEX+
                    RESTO+AJUSTESPEN+OFIEXPEN+NETTING+TIPO_DN) ) ,0) ,0) ,0) ,0) ,0) ,0)
    , OFIEXPEN_SALD=DECODE(LLEGABDD,1,DECODE(CONSSRCRE,0,DECODE(CORRVAL,0,DECODE(SEPIDE,1,
                    DECODE(AJUSTES,0,DECODE(OFIEX,0,DECODE(GAROFEX,0,0,(/*SALDOBAL-*/(RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
                    CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
                    OFIEX+ RESTO+NETTING+TIPO_DN))),((RFNEG+FONINV+ OPCVEN+ SRCRE+ CSIGNOA+ CSIGNOM+ CSIGNOP+ CSIGNOR1+ CSIGNOR2+ CSIGNOX1+
                    CSIGNOX2+ CSIGNOX4+ CSIGNOX5+FAIRVA+ TITACT+ TITACT2+BONTIT+ CRSUB+ LINLIQ+ SWATIT + EQUITY+ ACTIVOS_TITULIZADOS+ AJUSTES+
                    OFIEX+ RESTO+NETTING+TIPO_DN))),0),0),0),0),0)
      WHERE PROC_SALDOS = 1;

    COMMIT;

		VN_NUMERR:= 28;
		
    update BAS_MEN.CONCILIACION_IND_F2_TMP
    set NOBDDRESTOPEN=0
    where NOBDDRESTOPEN<>0
      AND PROC_SALDOS <> 1;

    update BAS_MEN.CONCILIACION_IND_F2_TMP
    set NOBDDRESTOPEN=0
    where NOBDDRESTOPEN<>0
      AND PROC_SALDOS = 1;

    COMMIT;
		
		VN_NUMERR:= 30;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
    set NOBDDAJUSTESPEN=SALDOBAL
    WHERE DEBEBDD =1
      AND LLEGABDD=0
      AND (SUBSTR(EPIGRAF,1,8) IN ('01001004','01002007','01003002','01005008') OR
           SUBSTR(EPIGRAF,1,11) IN ('01004001006','01004002009','01004003003','01004004009','01012001002','01012002002','01012003002','01015001002',
           '01015002002','01015003002','01015004002','01016002002','01019001002'))
      AND PROC_SALDOS <> 1;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
    set NOBDDAJUSTESPEN_SALD=SALDOBAL
    WHERE DEBEBDD =1
      AND LLEGABDD=0
      AND (SUBSTR(EPIGRAF,1,8) IN ('01001004','01002007','01003002','01005008') OR
           SUBSTR(EPIGRAF,1,11) IN ('01004001006','01004002009','01004003003','01004004009','01012001002','01012002002','01012003002','01015001002',
           '01015002002','01015003002','01015004002','01016002002','01019001002'))
      AND PROC_SALDOS = 1;

    COMMIT;
    
    VN_NUMERR:= 35;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
    set NOBDDOFIEXPEN=SALDOBAL
    WHERE (DEBEBDD =1 AND LLEGABDD=0)
      AND COMPTE NOT IN(SELECT COMPTE
                          FROM BAS_MEN.CONCILIACION_IND_F2_TMP
                         WHERE LENGTH(COMPTE) = 8
                         GROUP BY COMPTE
                        HAVING SUM(NOBDDAJUSTESPEN) <> 0)
      AND LENGTH(COMPTE) = 8
      AND EPIGRAF NOT LIKE '0100500%'
      AND PROC_SALDOS <> 1;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
    set NOBDDOFIEXPEN_SALD=SALDOBAL
    WHERE (DEBEBDD =1 AND LLEGABDD=0)
      AND COMPTE NOT IN(SELECT COMPTE
                          FROM BAS_MEN.CONCILIACION_IND_F2_TMP
                         WHERE LENGTH(COMPTE) = 8
                         GROUP BY COMPTE
                        HAVING SUM(NOBDDAJUSTESPEN) <> 0)
      AND LENGTH(COMPTE) = 8
      AND EPIGRAF NOT LIKE '0100500%'
      AND PROC_SALDOS = 1;

    COMMIT;
    
    VN_NUMERR:= 40;

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
      set NOBDDRESTOPEN=SALDOBAL-NOBDDAJUSTESPEN-NOBDDOFIEXPEN
    WHERE (DEBEBDD =1 AND LLEGABDD=0)
      AND PROC_SALDOS <> 1;

    COMMIT;

/* INICIALIZA A 0 EL SALDO DEL BALANCE PARA LOS REGISTROS DUPLICADOS POR EMPRESA, CUENTA, EPÍGRAFE QUE TENGAN PROCEDENCIA SALDOS */
    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
       SET SALDOBAL = 0
     WHERE PROC_SALDOS = 1
       AND (EMPRESA,EPIGRAF,COMPTE) IN (SELECT EMPRESA, EPIGRAF, COMPTE
                                          FROM BAS_MEN.AG_BASILEA_CONCF1
                                      GROUP BY EMPRESA, EPIGRAF, COMPTE
                                      HAVING COUNT(*) > 1);

    UPDATE BAS_MEN.CONCILIACION_IND_F2_TMP
      set NOBDDRESTOPEN_SALD=SALDOBAL-NOBDDAJUSTESPEN_SALD-NOBDDOFIEXPEN_SALD
    WHERE (DEBEBDD =1 AND LLEGABDD=0)
      AND PROC_SALDOS = 1;

    COMMIT;
    
    VN_NUMERR:= 42;

/* reagrupación de la información para eliminar el campo de procedencia saldos de la tabla final */
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONCILIACION_IND_F2');

    INSERT /*+ APPEND */ INTO BAS_MEN.CONCILIACION_IND_F2
    ( EMPRESA,EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE,SALDOBAL,SALDOBDDORI,SALDOFAIRVA,SALDOBDDINI
    ,CONSSRCRE,CORRVAL,SEPIDE,DEBEBDD,LLEGABDD,BDDNOENBAL,NOENBAL,IDRE,CSIGNOA,CSIGNOM,CSIGNOP,CSIGNOR1,CSIGNOR2,CSIGNOX1
    ,CSIGNOX2,CSIGNOX4,CSIGNOX5,TITACT,FAIRVA,TITACT2,BONTIT,CRSUB,LINLIQ,SWATIT,RFNEG,FONINV,OPCVEN,SRCRE,EQUITY
    ,ACTIVOS_TITULIZADOS,AJUSTES,OFIEX,RESTO,AJUSTESPEN,OFIEXPEN,RESTOPEN,AJUSTESPEN_SALD,OFIEXPEN_SALD,RESTOPEN_SALD
    ,NOBDDAJUSTESPEN,NOBDDOFIEXPEN,NOBDDRESTOPEN,NOBDDAJUSTESPEN_SALD,NOBDDOFIEXPEN_SALD,NOBDDRESTOPEN_SALD,SRCREGLOB
    ,IMPCORRVAL,IMPRCNOSEPIDE,TOT_SEG_STDA,SEG_COMYAUT_STDA,SEG_CORPLOC_STDA,SEG_DCOB_STDA,SEG_EMP_STDA,SEG_EEFF_STDA
    ,SEG_HV_STDA,SEG_OTRINST_STDA,SEG_OTRACTIV_STDA,SEG_PF_STDA,SEG_PREST_STDA,SEG_PYMEEMP_STDA,SEG_PYMEMIN_STDA
    ,SEG_RESTMIN_STDA,SEG_SOB_STDA,SEG_TARJC_STDA,SIN_SEG_STDA,TOT_SEG_AIRB,SEG_COMYAUT_AIRB,SEG_CORPLOC_AIRB,SEG_DCOB_AIRB
    ,SEG_EMP_AIRB,SEG_EEFF_AIRB,SEG_HV_AIRB,SEG_OTRINST_AIRB,SEG_OTRACTIV_AIRB,SEG_PF_AIRB,SEG_PREST_AIRB
    ,SEG_PYMEEMP_AIRB,SEG_PYMEMIN_AIRB,SEG_RESTMIN_AIRB,SEG_SOB_AIRB,SEG_TARJC_AIRB,SIN_SEG_AIRB,NO,TOT_BAL,GAROPE,GAROFEX,NETTING, TIPO_DN)
    (SELECT EMPRESA
           ,EPIGRAF
           ,DESC_EPI
           ,COMPTE
           ,DESC_COMPTE
           ,SUM(SALDOBAL)
           ,SUM(SALDOBDDORI)
           ,SUM(SALDOFAIRVA)
           ,SUM(SALDOBDDINI)
           ,CONSSRCRE
           ,CORRVAL
           ,SEPIDE
           ,DEBEBDD
           ,LLEGABDD
           ,BDDNOENBAL
           ,SUM(NOENBAL)
           ,SUM(IDRE)
           ,SUM(CSIGNOA)
           ,SUM(CSIGNOM)
           ,SUM(CSIGNOP)
           ,SUM(CSIGNOR1)
           ,SUM(CSIGNOR2)
           ,SUM(CSIGNOX1)
           ,SUM(CSIGNOX2)
           ,SUM(CSIGNOX4)
           ,SUM(CSIGNOX5)
           ,SUM(TITACT)
           ,SUM(FAIRVA)
           ,SUM(TITACT2)
           ,SUM(BONTIT)
           ,SUM(CRSUB)
           ,SUM(LINLIQ)
           ,SUM(SWATIT)
           ,SUM(RFNEG)
           ,SUM(FONINV)
           ,SUM(OPCVEN)
           ,SUM(SRCRE)
           ,SUM(EQUITY)
           ,SUM(ACTIVOS_TITULIZADOS)
           ,SUM(AJUSTES)
           ,SUM(OFIEX)
           ,SUM(RESTO)
           ,SUM(AJUSTESPEN)
           ,SUM(OFIEXPEN)
           ,SUM(RESTOPEN)
           ,SUM(AJUSTESPEN_SALD)
           ,SUM(OFIEXPEN_SALD)
           ,SUM(RESTOPEN_SALD)
           ,SUM(NOBDDAJUSTESPEN)
           ,SUM(NOBDDOFIEXPEN)
           ,SUM(NOBDDRESTOPEN)
           ,SUM(NOBDDAJUSTESPEN_SALD)
           ,SUM(NOBDDOFIEXPEN_SALD)
           ,SUM(NOBDDRESTOPEN_SALD)
           ,SUM(SRCREGLOB)
           ,SUM(IMPCORRVAL)
           ,SUM(IMPRCNOSEPIDE)
           ,SUM(TOT_SEG_STDA)
           ,SUM(SEG_COMYAUT_STDA)
           ,SUM(SEG_CORPLOC_STDA)
           ,SUM(SEG_DCOB_STDA)
           ,SUM(SEG_EMP_STDA)
           ,SUM(SEG_EEFF_STDA)
           ,SUM(SEG_HV_STDA)
           ,SUM(SEG_OTRINST_STDA)
           ,SUM(SEG_OTRACTIV_STDA)
           ,SUM(SEG_PF_STDA)
           ,SUM(SEG_PREST_STDA)
           ,SUM(SEG_PYMEEMP_STDA)
           ,SUM(SEG_PYMEMIN_STDA)
           ,SUM(SEG_RESTMIN_STDA)
           ,SUM(SEG_SOB_STDA)
           ,SUM(SEG_TARJC_STDA)
           ,SUM(SIN_SEG_STDA)
           ,SUM(TOT_SEG_AIRB)
           ,SUM(SEG_COMYAUT_AIRB)
           ,SUM(SEG_CORPLOC_AIRB)
           ,SUM(SEG_DCOB_AIRB)
           ,SUM(SEG_EMP_AIRB)
           ,SUM(SEG_EEFF_AIRB)
           ,SUM(SEG_HV_AIRB)
           ,SUM(SEG_OTRINST_AIRB)
           ,SUM(SEG_OTRACTIV_AIRB)
           ,SUM(SEG_PF_AIRB)
           ,SUM(SEG_PREST_AIRB)
           ,SUM(SEG_PYMEEMP_AIRB)
           ,SUM(SEG_PYMEMIN_AIRB)
           ,SUM(SEG_RESTMIN_AIRB)
           ,SUM(SEG_SOB_AIRB)
           ,SUM(SEG_TARJC_AIRB)
           ,SUM(SIN_SEG_AIRB)
           ,SUM(NO)
           ,SUM(TOT_BAL)
           ,SUM(GAROPE)
           ,SUM(GAROFEX)
           ,SUM(NETTING)
           ,SUM(TIPO_DN)
       FROM BAS_MEN.CONCILIACION_IND_F2_TMP
      GROUP BY EMPRESA,EPIGRAF,DESC_EPI,COMPTE,DESC_COMPTE,CONSSRCRE,CORRVAL,SEPIDE,DEBEBDD,LLEGABDD,BDDNOENBAL);

    COMMIT;
    
    VN_NUMERR:= 44;

/**********************************************************************************************/

--Cálculo de los campos Sin riesgo de crédito global, correcciones de valor e importe que no se pide.
    UPDATE BAS_MEN.CONCILIACION_IND_F2
    set SRCREGLOB=DECODE(CORRVAL,1,0,DECODE(CONSSRCRE,1,SALDOBAL,RFNEG+FONINV+ OPCVEN+ SRCRE)),
    IMPCORRVAL=DECODE(CORRVAL,1,SALDOBAL,0),
    IMPRCNOSEPIDE=DECODE(CORRVAL,1,0,DECODE(SEPIDE,0,DECODE(CONSSRCRE,0,SALDOBAL,0),0));

    COMMIT;
    
    VN_NUMERR:= 46;

/*Comprobaciones:
COMP1:LLEGA/NOLLEGA A BBDD CORRECTO
COMP2:SALTA A SRCRE
COMP3:SRCRE <= SALDO CONTABLE
COMP4:Suma columnas
COMP5: Dif suma colummnas con Saldo BDD
COMP6:COHERENCIA SIGNO
COMP7:SUM FI_ELIMI1=NO
COMP8:dif FI_ELIMI1=NO
COMP9:CHECK - TOTAL A SEGMENTAR-STDA
COMP10:CHECK - TOTAL A SEGMENTAR-AIRB
COMP11:"TOTAL A SEGMENTAR =TOTAL CONSIDERADO + PENDIENTES"
COMP12:TOTAL A SEGMENTAR = SALDO CONTABLE - POS. DE TIT. - ACTIVOS TITULIZADOS CON T.E.R. - SRCRE GLOBAL - IMPORTE CORRECC.- DOBLES CONTAB."
COMP13:DIFERENCIA SALDO CONT-SALDO BDD (SOLO PARA AQUELLAS CUENTAS QUE DEBAN LLEGAR A BDD Y ESTÉN EN EL BALANCE)
COMP14:% PENDIENTE AJUSTES
COMP15:% PENDIENTE OFIEX
COMP16:% PENDIENTE RESTO
COMP17:% PENDIENTE RESTO SOBRE TOTAL BALANCE
*/

    UPDATE BAS_MEN.CONCILIACION_IND_F2
    SET /*COMP1=DECODE(CONSSRCRE,0,DECODE(CORRVAL,0, DECODE(LLEGABDD,1,'VERDADERO','FALSO'),DECODE(LLEGABDD,0,'VERDADERO','FALSO')),
    DECODE(LLEGABDD,0,'VERDADERO','FALSO')),*/
    COMP1=DECODE(SEPIDE,0,DECODE(LLEGABDD,0,'VERDADERO','FALSO'),DECODE(LLEGABDD,0,'FALSO','VERDADERO')),
    COMP2=DECODE(LLEGABDD,1,DECODE(CONSSRCRE ,1,DECODE(RFNEG+FONINV+OPCVEN+SRCRE,0,'FALSO','VERDADERO'),'VERDADERO'),
    'VERDADERO'),
    COMP3=DECODE(LLEGABDD,0,'VERDADERO',DECODE(CONSSRCRE,0,'VERDADERO',DECODE(SIGN(ABS(SRCRE)-ABS(SALDOBAL)),-1,'VERDADERO',
    DECODE(SIGN(ABS(SRCRE)-ABS(SALDOBAL)),0,'VERDADERO','FALSO')))),
    COMP4=(FONINV+OPCVEN+SRCRE+CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+CSIGNOX1+CSIGNOX2+
    CSIGNOX4+CSIGNOX5+RFNEG+FAIRVA+TITACT+TITACT2+BONTIT+CRSUB+LINLIQ+SWATIT+
    EQUITY+AJUSTES+OFIEX+ACTIVOS_TITULIZADOS+NOENBAL+IDRE+RESTO+NETTING+TIPO_DN),
    COMP5=SALDOBDDINI-(FONINV+OPCVEN+SRCRE+CSIGNOA+CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+CSIGNOX1+CSIGNOX2
    +CSIGNOX4+CSIGNOX5+RFNEG+FAIRVA+TITACT+TITACT2+BONTIT+CRSUB+LINLIQ+SWATIT+
    EQUITY+AJUSTES+OFIEX+ACTIVOS_TITULIZADOS+NOENBAL+IDRE+RESTO+NETTING+TIPO_DN),
    COMP6=DECODE(LLEGABDD,0,'VERDADERO',DECODE(BDDNOENBAL ,1,'VERDADERO',
    DECODE(SIGN(SALDOBAL*SALDOBDDINI),1,'VERDADERO',
    DECODE(SIGN(SALDOBAL*SALDOBDDINI),0,'VERDADERO','FALSO')))),
    COMP7=(ACTIVOS_TITULIZADOS+AJUSTES+RESTO+OFIEX+TIPO_DN),
    COMP8=NO-(ACTIVOS_TITULIZADOS+AJUSTES+RESTO+OFIEX+TIPO_DN),
    COMP9=NVL(TOT_SEG_STDA-(SEG_COMYAUT_STDA+SEG_CORPLOC_STDA+SEG_DCOB_STDA+SEG_EMP_STDA+SEG_EEFF_STDA+SEG_HV_STDA+SEG_OTRINST_STDA+
    SEG_OTRACTIV_STDA+SEG_PF_STDA+SEG_PREST_STDA+SEG_PYMEEMP_STDA+SEG_PYMEMIN_STDA+SEG_RESTMIN_STDA+SEG_SOB_STDA+SEG_TARJC_STDA+
    SIN_SEG_STDA),0),
    COMP10=TOT_SEG_AIRB-(SEG_COMYAUT_AIRB+SEG_CORPLOC_AIRB+SEG_DCOB_AIRB+SEG_EMP_AIRB+SEG_EEFF_AIRB+SEG_HV_AIRB+SEG_OTRINST_AIRB+
    SEG_OTRACTIV_AIRB+SEG_PF_AIRB+SEG_PREST_AIRB+SEG_PYMEEMP_AIRB+SEG_PYMEMIN_AIRB+SEG_RESTMIN_AIRB+SEG_SOB_AIRB+SEG_TARJC_AIRB+
    SIN_SEG_AIRB),
    COMP11=NVL((TOT_SEG_STDA+TOT_SEG_AIRB)-(ACTIVOS_TITULIZADOS+AJUSTES+OFIEX+RESTO+AJUSTESPEN+OFIEXPEN+RESTOPEN+NOBDDAJUSTESPEN+NOBDDOFIEXPEN+NOBDDRESTOPEN+
                                            AJUSTESPEN_SALD+OFIEXPEN_SALD+RESTOPEN_SALD+NOBDDAJUSTESPEN_SALD+NOBDDOFIEXPEN_SALD+NOBDDRESTOPEN_SALD+NETTING+TIPO_DN),0),
    --VJB --ACC-- 11/2007
    COMP12=NVL((TOT_SEG_STDA+TOT_SEG_AIRB)-SALDOBAL+(BONTIT+CRSUB+LINLIQ+SWATIT)+TITACT2+SRCREGLOB+IMPCORRVAL+(CSIGNOA+ CSIGNOM+CSIGNOP+CSIGNOR1+CSIGNOR2+ CSIGNOX1+ CSIGNOX2
    + CSIGNOX4+CSIGNOX5+FAIRVA+ TITACT),0),
    --COMP13=SALDOBAL-SALDOBDDINI,
    COMP13=0,
    COMP14=DECODE(SALDOBAL, 0, 0, DECODE(BDDNOENBAL  ,1,0,/*ABS*/((AJUSTESPEN+nobddajustespen+AJUSTESPEN_SALD+nobddajustespen_SALD)/SALDOBAL)*100)),
    COMP15=DECODE(SALDOBAL, 0, 0, DECODE(BDDNOENBAL  ,1,0,/*ABS*/((OFIEXPEN+nobddofiexpen+OFIEXPEN_SALD+nobddofiexpen_SALD)/SALDOBAL)*100)),
    COMP16=DECODE(SALDOBAL, 0, 0, DECODE(BDDNOENBAL  ,1,0,/*ABS*/((RESTOPEN+nobddrestopen+RESTOPEN_SALD+nobddrestopen_SALD)/SALDOBAL)*100)) ,
    COMP17=DECODE(BDDNOENBAL  ,1,0,/*ABS*/( (AJUSTESPEN+OFIEXPEN+RESTOPEN+NOBDDAJUSTESPEN+NOBDDOFIEXPEN+NOBDDRESTOPEN+
                                         AJUSTESPEN_SALD+OFIEXPEN_SALD+RESTOPEN_SALD+NOBDDAJUSTESPEN_SALD+NOBDDOFIEXPEN_SALD+NOBDDRESTOPEN_SALD) /
                                        (SELECT SUM(ABS(SALDO)) FROM BAS_MEN.balance_individual
                                          WHERE (epigraf like '010%' or  epigraf like '020%' or epigraf like '030%')
                                            and epigraf not in ('030010100000000000','030020100000000000','030050030010100000')
                                            and compte<>0))*100);

    UPDATE BAS_MEN.CONCILIACION_IND_F2
       SET COMP13 = SALDOBAL-(SALDOBDDINI-NOENBAL-IDRE)
     WHERE DEBEBDD = 1
       AND BDDNOENBAL = 0;

    COMMIT;
    
    VN_NUMERR:= 50;

/*

--
-- Pestaña epigrafe
--

SELECT EMPRESA      ,EPIGRAF      ,DESC_EPI      ,SUM(SALDOBAL)      ,SUM(SALDOBDDORI)      ,SUM(SALDOFAIRVA)      ,SUM(GAROPE)      ,SUM(GAROFEX)
      ,SUM(SALDOBDDINI)      ,SUM(NOENBAL)      ,SUM(IDRE)      ,SUM(CSIGNOA)      ,SUM(CSIGNOM)      ,SUM(CSIGNOP)      ,SUM(CSIGNOR1)
      ,SUM(CSIGNOR2)      ,SUM(CSIGNOX1)      ,SUM(CSIGNOX2)      ,SUM(CSIGNOX4)      ,SUM(CSIGNOX5)      ,SUM(TITACT)      ,SUM(FAIRVA)
      ,SUM(TITACT2)      ,SUM(BONTIT)      ,SUM(CRSUB)      ,SUM(LINLIQ)      ,SUM(SWATIT)      ,SUM(RFNEG)      ,SUM(FONINV)      ,SUM(OPCVEN)
      ,SUM(SRCRE)      ,SUM(EQUITY)      ,SUM(ACTIVOS_TITULIZADOS)      ,SUM(AJUSTES)      ,SUM(OFIEX)      ,SUM(RESTO)      ,SUM(AJUSTESPEN)
      ,SUM(OFIEXPEN)      ,SUM(RESTOPEN)      ,SUM(AJUSTESPEN_SALD)      ,SUM(OFIEXPEN_SALD)      ,SUM(RESTOPEN_SALD)      ,SUM(NOBDDAJUSTESPEN)
      ,SUM(NOBDDOFIEXPEN)      ,SUM(NOBDDRESTOPEN)      ,SUM(NOBDDAJUSTESPEN_SALD)      ,SUM(NOBDDOFIEXPEN_SALD)      ,SUM(NOBDDRESTOPEN_SALD)
      ,SPACES1      ,SUM(SRCREGLOB)      ,SUM(IMPCORRVAL)      ,SUM(IMPRCNOSEPIDE)      ,SPACES2      ,SUM(TOT_SEG_STDA)      ,SUM(SEG_COMYAUT_STDA)
      ,SUM(SEG_CORPLOC_STDA)      ,SUM(SEG_DCOB_STDA)      ,SUM(SEG_EMP_STDA)      ,SUM(SEG_EEFF_STDA)      ,SUM(SEG_HV_STDA)      ,SUM(SEG_OTRINST_STDA)
      ,SUM(SEG_OTRACTIV_STDA)      ,SUM(SEG_PF_STDA)      ,SUM(SEG_PREST_STDA)      ,SUM(SEG_PYMEEMP_STDA)      ,SUM(SEG_PYMEMIN_STDA)      ,SUM(SEG_RESTMIN_STDA)
      ,SUM(SEG_SOB_STDA)      ,SUM(SEG_TARJC_STDA)      ,SUM(SIN_SEG_STDA)      ,SPACES3      ,SUM(TOT_SEG_AIRB)      ,SUM(SEG_COMYAUT_AIRB)
      ,SUM(SEG_CORPLOC_AIRB)      ,SUM(SEG_DCOB_AIRB)      ,SUM(SEG_EMP_AIRB)      ,SUM(SEG_EEFF_AIRB)      ,SUM(SEG_HV_AIRB)      ,SUM(SEG_OTRINST_AIRB)
      ,SUM(SEG_OTRACTIV_AIRB)      ,SUM(SEG_PF_AIRB)      ,SUM(SEG_PREST_AIRB)      ,SUM(SEG_PYMEEMP_AIRB)      ,SUM(SEG_PYMEMIN_AIRB)
      ,SUM(SEG_RESTMIN_AIRB)      ,SUM(SEG_SOB_AIRB)      ,SUM(SEG_TARJC_AIRB)      ,SUM(SIN_SEG_AIRB)
  FROM BAS_MEN.CONCILIACION_IND_F2
GROUP BY  EMPRESA,EPIGRAF,DESC_EPI,SPACES1,SPACES2,SPACES3
ORDER BY  EMPRESA,EPIGRAF,DESC_EPI,SPACES1,SPACES2,SPACES3;



--
-- Informe concil. F2
--

SELECT EMPRESA, EPIGRAF, DESC_EPI, COMPTE, DESC_COMPTE, SALDOBAL, SALDOBDDORI, SALDOFAIRVA, GAROPE, GAROFEX,
      SALDOBDDINI, CONSSRCRE, CORRVAL, SEPIDE, DEBEBDD, LLEGABDD, BDDNOENBAL
     , NOENBAL, IDRE, CSIGNOA, CSIGNOM, CSIGNOP, CSIGNOR1, CSIGNOR2, CSIGNOX1, CSIGNOX2, CSIGNOX4
     , CSIGNOX5, TITACT, FAIRVA, TITACT2, BONTIT, CRSUB, LINLIQ, SWATIT, RFNEG, FONINV, OPCVEN
     , SRCRE, EQUITY,  ACTIVOS_TITULIZADOS, AJUSTES, OFIEX, RESTO,AJUSTESPEN, OFIEXPEN, RESTOPEN
     , AJUSTESPEN_SALD, OFIEXPEN_SALD, RESTOPEN_SALD, NOBDDAJUSTESPEN, NOBDDOFIEXPEN, NOBDDRESTOPEN
     , NOBDDAJUSTESPEN_SALD, NOBDDOFIEXPEN_SALD, NOBDDRESTOPEN_SALD, SPACES1, SRCREGLOB, IMPCORRVAL
     , IMPRCNOSEPIDE, SPACES2, TOT_SEG_STDA, SEG_COMYAUT_STDA, SEG_CORPLOC_STDA, SEG_DCOB_STDA
     , SEG_EMP_STDA, SEG_EEFF_STDA, SEG_HV_STDA, SEG_OTRINST_STDA, SEG_OTRACTIV_STDA, SEG_PF_STDA
     , SEG_PREST_STDA, SEG_PYMEEMP_STDA, SEG_PYMEMIN_STDA, SEG_RESTMIN_STDA, SEG_SOB_STDA, SEG_TARJC_STDA
     , SIN_SEG_STDA, SPACES3, TOT_SEG_AIRB, SEG_COMYAUT_AIRB, SEG_CORPLOC_AIRB, SEG_DCOB_AIRB, SEG_EMP_AIRB
     , SEG_EEFF_AIRB, SEG_HV_AIRB, SEG_OTRINST_AIRB, SEG_OTRACTIV_AIRB, SEG_PF_AIRB
     , SEG_PREST_AIRB, SEG_PYMEEMP_AIRB, SEG_PYMEMIN_AIRB, SEG_RESTMIN_AIRB, SEG_SOB_AIRB, SEG_TARJC_AIRB
     , SIN_SEG_AIRB, null as SPACES4, COMP1, COMP2, COMP3, COMP4, COMP5, COMP6, NO, COMP7, COMP8, COMP9, COMP10
     , COMP11, COMP12, COMP13, COMP14, COMP15, COMP16, COMP17, TOT_BAL
  FROM BAS_MEN.CONCILIACION_IND_F2
 ORDER BY EMPRESA, EPIGRAF,  COMPTE;
  */

    COMMIT;

    VN_NUMERR:= 99;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           NUM_ERROR = VN_NUMERR
     WHERE PROCES = '19.2 FNC_CONCILIACION_F2 '||PV_TABLA
       AND ESTAT  = 'INICIADO';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '19.2 FNC_CONCILIACION_F2 '||PV_TABLA
        AND ESTAT  = 'INICIADO';

   COMMIT;
   RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_CONCILIACION_F2';


create or replace PROCEDURE BAS_MEN.BASI_CONCILIACION_F2 IS

     VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
     VN_FECPRO     NUMBER(8); -- OJO CON LA FECHA DEL PROCESO.
     VN_MESPRO     NUMBER(6);   -- OJO CON LA FECHA DEL PROCESO.
     VN_OPC_DER    NUMBER:= 1;
     VN_F          NUMBER:= 1;
     VN_OPCBSTDA   NUMBER:= 1;
     VD_FECPRO     DATE;
     VV_RETORNO    VARCHAR2(2):='OK';

BEGIN

    COMMIT;

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --ASEGURARSE DE HABER MODIFICADO LA FECHA DE PROCESO AL ACTUAL--
     WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

    VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    BAS_MEN.FNC_CONCILIACION_F2 (VV_TABLA, VV_RETORNO);
    COMMIT;

END;

/ 
--bkd40151=====================================================================================================
Select 'bkd40151' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_INSERT_MAESTRO_DTA AS

    CTE_Non_Procedimiento       CONSTANT VARCHAR2(32)               := 'FNC_INSERT_MAESTRO_DTA';
    VV_Programa                 CONSTANT VARCHAR2(15)               := 'bkd00151';
    VN_NumErr                   NUMBER(3)                           DEFAULT 0;
    VV_Mensaje                  VARCHAR2(255)                       DEFAULT '';
    VN_Count                    NUMBER(9)                           DEFAULT 0;
    VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT '';
    VV_RETORNO       	          VARCHAR2(2)       									DEFAULT 'OK';

    VN_MESPRO       						NUMBER(6);
    VN_FECPRO                   NUMBER(8);
    VV_IDREG        						NUMBER(12);
    VN_FACTOR_TRANSIT           NUMBER(2,2);

BEGIN

    VN_NumErr 	:= 1;
    VV_Proces   := CTE_Non_Procedimiento;
    --
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
    --
    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;
    --
    VN_NumErr := 2;
    --
    SELECT TO_NUMBER(VALPARM), substr(TO_NUMBER(VALPARM),1,6)
      INTO VN_FECPRO, VN_MESPRO
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

    VN_NumErr := 3;
    VN_FACTOR_TRANSIT := 0;
    
    BEGIN
        SELECT PORCENTAJE_IFRS9
          INTO VN_FACTOR_TRANSIT
          FROM BAS_MEN.TRANSITORIO_IFRS9
         WHERE FECHA_INICIO <= VN_FECPRO
           AND FECHA_FIN >= VN_FECPRO;
    EXCEPTION
        WHEN OTHERS THEN
            VN_FACTOR_TRANSIT := 0;
    END;
    
    VN_NumErr := 4;
    
    --Volcado de tabla desde DCRPROP_MENSUAL
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.FICHA_TECNICA_DTA');

    INSERT INTO BAS_MEN.FICHA_TECNICA_DTA
    SELECT PERIMETRO, PARTIDA, ENTIDAD, SUBPERIMETRO, TIPO, CONCEPTO, nvl(IMPORTE,0) IMPORTE, AUTORIDAD_FISCAL
        FROM DCRPROP_MENSUAL.FICHA_TECNICA_DTA;
    COMMIT;
    
    VN_NumErr := 10;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.FICHA_TECNICA_DTA_AUX');
    
    INSERT INTO BAS_MEN.FICHA_TECNICA_DTA_AUX
        select ENTIDAD, SUBPERIMETRO ,AUTORIDAD_FISCAL  , TIPO ,CONCEPTO ,IMPORTE
        from BAS_MEN.FICHA_TECNICA_DTA
        where TIPO = 'DTA_MONETIZABLE' AND CONCEPTO = 'TOTAL'				--T2
        union all
        select ENTIDAD, SUBPERIMETRO ,AUTORIDAD_FISCAL  , TIPO ,CONCEPTO ,IMPORTE
        from BAS_MEN.FICHA_TECNICA_DTA
        where TIPO = 'DTA_NO_MONETIZABLE' AND CONCEPTO = 'TOTAL'		--T3
        union all
        select ENTIDAD, SUBPERIMETRO ,AUTORIDAD_FISCAL  , TIPO ,CONCEPTO ,IMPORTE
        from BAS_MEN.FICHA_TECNICA_DTA
        where TIPO = 'DTA_BIN_DEDUC' AND CONCEPTO = 'TOTAL'					--T4
        union all
        select ENTIDAD, SUBPERIMETRO ,AUTORIDAD_FISCAL  , TIPO ,CONCEPTO ,IMPORTE
        from BAS_MEN.FICHA_TECNICA_DTA
        where TIPO = 'IFRS9' AND CONCEPTO = 'TOTAL'									--T5
        union all
        select ENTIDAD, SUBPERIMETRO ,AUTORIDAD_FISCAL  , TIPO ,CONCEPTO ,IMPORTE
        from BAS_MEN.FICHA_TECNICA_DTA
        where TIPO = 'DTL' AND CONCEPTO = 'TOTAL'										--T6
        union all
        select ENTIDAD, SUBPERIMETRO ,AUTORIDAD_FISCAL  , TIPO ,CONCEPTO ,IMPORTE
        from BAS_MEN.FICHA_TECNICA_DTA
        where TIPO = 'DTL' AND CONCEPTO = 'Intangibles';						--T7
		COMMIT;
    
    VN_NumErr := 11;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.FICHA_TECNICA_DTA_AUX1');
    
    INSERT INTO BAS_MEN.FICHA_TECNICA_DTA_AUX1
    SELECT ENTIDAD, SUBPERIMETRO, AUTORIDAD_FISCAL, sum(DTA_MONETIZABLE) as DTA_MONETIZABLE, sum(DTA_NO_MONETIZABLE) as DTA_NO_MONETIZABLE, sum(DTA_BIN_DEDUC) as DTA_BIN_DEDUC
         , sum(IFRS9) as IFRS9, sum(DTL_BRUTO) as DTL_BRUTO, sum(INTANGIBLE) as INTANGIBLE, FACTOR_TRANSIT
      FROM (
              SELECT DISTINCT ENTIDAD, SUBPERIMETRO, AUTORIDAD_FISCAL, 
                        case when TIPO = 'DTA_MONETIZABLE' AND CONCEPTO = 'TOTAL'     THEN importe else 0 end as DTA_MONETIZABLE, 
                        case when TIPO = 'DTA_NO_MONETIZABLE' AND CONCEPTO = 'TOTAL'  THEN importe else 0 end as DTA_NO_MONETIZABLE, 
                        case when TIPO = 'DTA_BIN_DEDUC' AND CONCEPTO = 'TOTAL'       THEN importe else 0 end as DTA_BIN_DEDUC,
                        case when TIPO = 'IFRS9' AND CONCEPTO = 'TOTAL'	              THEN importe else 0 end as IFRS9,
                        case when TIPO = 'DTL' AND CONCEPTO = 'TOTAL'                 THEN importe else 0 end as DTL_BRUTO,
                        case when TIPO = 'DTL' AND CONCEPTO = 'Intangibles'           THEN importe else 0 end as INTANGIBLE,
                        VN_FACTOR_TRANSIT AS FACTOR_TRANSIT
                    FROM BAS_MEN.FICHA_TECNICA_DTA_AUX
            )
      GROUP BY ENTIDAD, SUBPERIMETRO, AUTORIDAD_FISCAL, FACTOR_TRANSIT;   
    COMMIT;
    
    VN_NumErr := 15;
    
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TABLA_ANEXO_DTA');
    
    INSERT INTO BAS_MEN.TABLA_ANEXO_DTA      
       SELECT ENTIDAD, SUBPERIMETRO, AUTORIDAD_FISCAL, DTA_MONETIZABLE, DTA_NO_MONETIZABLE, DTA_BIN_DEDUC, IFRS9, DTL_BRUTO, INTANGIBLE
           , (DTL_BRUTO-INTANGIBLE) AS DTL_NETO 
           , (DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9) AS DTA_NO_MONET_ORIG_PI 
           , (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) AS TOTAL_NO_MONET_Y_BIN_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) = 0 THEN 0
                  ELSE (DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9))
             END AS PRORRATA_NO_MONET_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) = 0 THEN 0
                  ELSE DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9))
             END AS PRORRATA_BIN_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) = 0 THEN 0
                  ELSE ((DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE) 
             END AS DTL_NO_MONET_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) = 0 THEN 0
                  ELSE (DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE) 
             END AS DTL_BIN_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) =  0  THEN (DTL_BRUTO-INTANGIBLE) * -1
                  ELSE (((DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE))+((DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE)) - (DTL_BRUTO-INTANGIBLE)
             END AS CHECK_FI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) =  0  THEN (DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)
                  ELSE (DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)-(((DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE)) 
             END AS DTA_NO_MONET_FIN_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) =  0  THEN DTA_BIN_DEDUC
                  ELSE DTA_BIN_DEDUC - ((DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE))
             END AS BIN_FIN_PI
           , DTA_MONETIZABLE * 1 AS RWA_MONET_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) =  0  THEN ((DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) * 2.5 
                  ELSE ((DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)-(((DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)))*(DTL_BRUTO-INTANGIBLE))) * 2.5 
             END AS RWA_NO_MONET_PI
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE-FACTOR_TRANSIT*IFRS9)) =  0  THEN DTA_BIN_DEDUC
                  ELSE -1 * (DTA_BIN_DEDUC - ((DTA_BIN_DEDUC/(DTA_BIN_DEDUC + (DTA_NO_MONETIZABLE - FACTOR_TRANSIT * IFRS9))) * (DTL_BRUTO-INTANGIBLE))) 
             END AS CET1_PI  
           , (DTA_NO_MONETIZABLE) AS DTA_NO_MONET_ORIG_FL 
           , (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) AS TOTAL_NO_MONET_Y_BIN_FL
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN 0
                  ELSE (DTA_NO_MONETIZABLE)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) 
             END AS PRORRATA_NO_MONET_FL        
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN 0
                  ELSE DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE))
             END AS PRORRATA_BIN_FL
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN 0
                  ELSE ((DTA_NO_MONETIZABLE)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)
             END AS DTL_NO_MONET_FL        
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN 0
                  ELSE (DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)
             END AS DTL_BIN_FL 
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN (DTL_BRUTO-INTANGIBLE) * -1
                  ELSE (((DTA_NO_MONETIZABLE)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)) + ((DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)) - (DTL_BRUTO-INTANGIBLE) 
             END AS CHECK_FL   
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN DTA_NO_MONETIZABLE
                  ELSE (DTA_NO_MONETIZABLE)-(((DTA_NO_MONETIZABLE)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)) 
             END AS DTA_NO_MONET_FIN_FL
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN DTA_BIN_DEDUC
                  ELSE DTA_BIN_DEDUC-((DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)) 
             END AS BIN_FIN_FL
           , DTA_MONETIZABLE*1 AS RWA_MONET_FL           
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN DTA_NO_MONETIZABLE * 2.5
                  ELSE ((DTA_NO_MONETIZABLE)-(((DTA_NO_MONETIZABLE)/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE)))*2.5 
             END AS RWA_NO_MONET_FL
           , CASE WHEN (DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)) =  0  THEN 0
                  ELSE -1 * (DTA_BIN_DEDUC-((DTA_BIN_DEDUC/(DTA_BIN_DEDUC+(DTA_NO_MONETIZABLE)))*(DTL_BRUTO-INTANGIBLE))) 
             END AS CET1_FL
          FROM BAS_MEN.FICHA_TECNICA_DTA_AUX1
          order by entidad;                     
    COMMIT;
    
    VN_NumErr := 20;
    
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_DTA_AUX');
    
    INSERT INTO BAS_MEN.MAESTRO_DTA_AUX
        SELECT SUBPERIMETRO, 
              (SUM(DTA_MONETIZABLE)) AS SUM_of_DTA_MONETIZABLE
             , (SUM(DTA_NO_MONET_FIN_PI)) AS SUM_of_DTA_NO_MONET_FIN_PI
            FROM BAS_MEN.TABLA_ANEXO_DTA
           WHERE SUBPERIMETRO <> 'CONSO_TOTAL'
             AND ENTIDAD <> 'TSB'
           GROUP BY SUBPERIMETRO;
    COMMIT;
    
    VN_NumErr := 21;
    
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_DTA');
    
    INSERT INTO BAS_MEN.MAESTRO_DTA
        SELECT OR_DISPTO * 1000, OR_DISPTOCON * 1000, 100 FI_RWASTDA, 0 OR_IDREG
          FROM
                (SELECT SUBPERIMETRO, SUM_OF_DTA_MONETIZABLE as OR_DISPTO from BAS_MEN.MAESTRO_DTA_AUX where SUBPERIMETRO = 'INDI') a,
                (SELECT SUBPERIMETRO, SUM_OF_DTA_MONETIZABLE as OR_DISPTOCON from BAS_MEN.MAESTRO_DTA_AUX where SUBPERIMETRO = 'CONSO') b
               
        union all
        SELECT OR_DISPTO * 1000, OR_DISPTOCON * 1000, 250 FI_RWASTDA, 0 OR_IDREG
          FROM 
                (SELECT SUBPERIMETRO, SUM_of_DTA_NO_MONET_FIN_PI as OR_DISPTO from BAS_MEN.MAESTRO_DTA_AUX where SUBPERIMETRO = 'INDI') a,
                (SELECT SUBPERIMETRO, SUM_of_DTA_NO_MONET_FIN_PI as OR_DISPTOCON from BAS_MEN.MAESTRO_DTA_AUX where SUBPERIMETRO = 'CONSO') b;   
    COMMIT;
    
    VN_NumErr := 96;
    
    DELETE /*+ parallel (a 8) */ BAS_MEN.BASILEA a
      WHERE in_tiporeg = 'DTA';
    COMMIT;
    
    VN_NumErr := 97;

    SELECT /*+ parallel (s 8)*/ max(or_idreg)
      INTO VV_IDREG
      FROM BAS_MEN.BASILEA;

    update BAS_MEN.MAESTRO_DTA
        set or_idreg = rownum + VV_IDREG;
    COMMIT;
    
    VN_NumErr := 98;

  	--******************************************************************************************************************************--
  	--                         Inserción de los registros en BASILEA
  	--******************************************************************************************************************************--

  	INSERT INTO BAS_MEN.BASILEA(OR_IDREG, OR_ENTITY,OR_EPIIND, OR_CTAIND,FI_EPICON,FI_PORCON,FI_TIPEXP,OR_DISPTO,OR_DISPTOCON,IN_SEGMBSINI,IN_SEGMBS,IN_TIPOREG,IN_METODE,
              	IN_SRATIN, FI_CCFAIRB, FI_EADAIRB, FI_EADCONAIRB, OR_IDMES)
         SELECT OR_IDREG,
                81 OR_ENTITY,
                '010170020000000000' OR_EPIIND,
                DECODE(FI_RWASTDA, 250, 4704800, 4704000) OR_CTAIND,
                '010120202000000000000000000000' FI_EPICON,
                (OR_DISPTOCON/OR_DISPTO) FI_PORCON,
                'Drawn' FI_TIPEXP,
                OR_DISPTO,
                OR_DISPTOCON,
                DECODE(FI_RWASTDA, 250, '043', '042') IN_SEGMBSINI,
                'Otros Activos' IN_SEGMBS,
                'DTA' IN_TIPOREG,
                'STDA' IN_METODE,
                'SR' IN_SRATIN,
                1 FI_CCFAIRB,
                OR_DISPTO FI_EADAIRB ,
                OR_DISPTOCON FI_EADCONAIRB,
                VN_MESPRO
        	 FROM BAS_MEN.MAESTRO_DTA  A;
  	COMMIT;
    
  	VN_NumErr := 99;

    -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO);

    COMMIT;
    VN_NumErr := 999;
	    --
EXCEPTION
	  WHEN OTHERS THEN
	      --
	      -- Actualización del fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
	      VV_Mensaje	:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' C.E.'||VN_NumErr,1,255);
	      VV_RETORNO  := 'KO';

	      BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, VV_Mensaje);
	      ROLLBACK;

	      RAISE;
	      COMMIT;
	      --
END;

/

select * from sys.user_errors	WHERE NAME = 'FNC_INSERT_MAESTRO_DTA'; 
--bka40101=====================================================================================================
Select 'bka40101' As Compilando from dual;
  
CREATE OR REPLACE PROCEDURE BAS_MEN.REPARTO_DOTACIONESFILIALES (  In_Fecha_Proceso IN NUMBER )
IS

    VN_NUMERR           NUMBER(3)  DEFAULT 0;
    VV_MENSAJE          VARCHAR2(255);
    VV_TABLA            CONSTANT VARCHAR2(50)  := 'BAS_MEN.DOTACIONES_FILIALES_FIN';
    CTE_NOM_PROCEDURE   CONSTANT VARCHAR2(75)  := 'REPARTO_DOTACIONES_FILIALES ' || VV_TABLA || ' ' || In_Fecha_Proceso;
    VV_NRegs_Ins        BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE DEFAULT 0;
    VV_NRegs_Act        BAS_MEN.CONTROL_PROCES.REG_UPD_OK%TYPE DEFAULT 0;
    VV_RESTO_PROVISION  FLOAT(126):=0;
    VV_SALDO_RESTO      FLOAT(126):=0;
    VV_COUNT            NUMBER(10):=0;
    VV_ENTIDAD          NUMBER(4);
    VV_FIN              VARCHAR2(2);
    VV_PROVI            FLOAT(126);

   CURSOR PROVISION IS
     SELECT OR_ENTITY, OR_IDPRO1, PROVISION, DECODE(SIGN(PROVISION/SUM(SALDO)-1),1,1,PROVISION/SUM(SALDO)) PORAPL
     FROM BAS_MEN.DOTACIONES_FILIALES_FIN A
    WHERE NOT (OR_ENTITY = 9109 AND OR_IDPRO1 = 'ES')
     GROUP BY OR_ENTITY, OR_IDPRO1, PROVISION;

   CURSOR PROVISION_20 IS
      SELECT ROWNUM, OR_IDREG, OR_ENTITY, OR_IDPRO1, PROVISION, SALDO, SALDO_20_PORCIENTO
       FROM BAS_MEN.DOTACIONES_FILIALES_FIN A
       WHERE OR_PROVAPL = 0
         AND OR_ENTITY = 9109
         AND OR_IDPRO1 = 'ES'
         --AND OR_IDREG NOT IN (SELECT FI_EPICON FROM BAS_MEN.DOTACIONES_FILIALES WHERE OR_TIPOPE IS NOT NULL)
       ORDER BY OR_ENTITY, PROVISION, IN_INDMOR DESC, SALDO_20_PORCIENTO, OR_CODGAR ASC;

   -- Para Andorra, tras repartir hasta el 20% cada exposición, si aún queda dotación, repartimos por saldo de menor a mayor.
   CURSOR PROVISION_RESTO IS
      SELECT DISTINCT A.OR_IDREG, A.OR_IDPRO1, A.OR_ENTITY, A.FI_EPICON, A.PROVISION, A.SALDO_20_PORCIENTO, A.OR_PROVAPL, A.RESTO_PROVISION, A.SALDO,
      A.SALDO-A.SALDO_20_PORCIENTO SALDO_RESTO, B.PROVI, A.PROVISION-PROVI PROVISION_RESTO, OR_CODGAR
      FROM BAS_MEN.DOTACIONES_FILIALES_FIN A,
           (SELECT OR_ENTITY, PROVISION, SALDO, PROVI, OR_IDPRO1
              FROM (SELECT SUM(OR_PROVAPL) PROVI, OR_IDPRO1, PROVISION, OR_ENTITY , SUM(SALDO) SALDO
                      FROM BAS_MEN.DOTACIONES_FILIALES_FIN
                     WHERE OR_ENTITY = 9109
                       AND OR_IDPRO1 = 'ES'
                    --   AND OR_IDREG NOT IN (SELECT FI_EPICON FROM BAS_MEN.DOTACIONES_FILIALES WHERE OR_TIPOPE IS NOT NULL)
                     GROUP BY OR_ENTITY, OR_IDPRO1, PROVISION
                     ORDER BY OR_ENTITY, OR_IDPRO1, PROVISION)
             WHERE TRUNC(PROVISION) > TRUNC(PROVI)
               AND SALDO > PROVI) B
      WHERE A.PROVISION > B.PROVI
        AND A.OR_ENTITY = A.OR_ENTITY
        and A.PROVISION = B.PROVISION
        and A.OR_ENTITY = 9109
        and a.OR_IDPRO1 = 'ES'
        AND A.SALDO > 0
        ORDER BY OR_ENTITY,  OR_CODGAR, PROVISION, SALDO ASC;

BEGIN

    VN_NUMERR:= 1;
      --
    -- Información del Inicio del proceso en CONTROL_PROCES
    --

    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (Cte_Nom_Procedure, SYSDATE, 'INICIADO');

    COMMIT;

    VN_NUMERR:= 2;

    update /*+ full(bas) parallel (bas 4) */ bas_men.basilea bas
           set bas.or_provapl  = 0,
               bas.or_idpro1   = '?'
         where or_entity not in (81,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,8211) /* RMR 29/01/2021 Añadido al filtro la 8211 */
           and fi_epicon not in ('010100102020000000000000000000','010100202010000000000000000000',
                                 '010100202020000000000000000000','010130102000000000000000000000',
                                 '010140501030000000000000000000','010140503030000000000000000000');
                               /*'010100101020300000000000000000'); -- no se vuelve a repartir ni la 81 ni los inmuebles --- 19/01/20201 -NAV - TM-3537 - consideración de las correcciones de valor correspondientes a edificios para entidades diferentes de la 81*/

    COMMIT;

    VN_NUMERR:= 3;

    merge /*+ full(ibasi) parallel(iBasi 4) */ into bas_men.basilea iBasi
      using ( select /*+ full(a) parallel(a 4) */ OR_IDREG, OR_PROVAPL, OR_IDPRO1, in_tiporeg
                from bas_men.basilea_ead a              /*BNM 13/11/2020 se cambia para que no recupere de la BS*/
               where or_entity not in (81,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,8211) /* RMR 29/01/2021 Añadido al filtro la 8211 */
                 and fi_epicon not in ('010100102020000000000000000000','010100202010000000000000000000',
                                       '010100202020000000000000000000','010130102000000000000000000000',
                                       '010140501030000000000000000000','010140503030000000000000000000')
                                     /*'010100101020300000000000000000') -- no se vuelve a repartir ni la 81 ni los inmuebles -- 19/01/20201 -NAV - TM-3537 - consideración de las correcciones de valor correspondientes a edificios para entidades diferentes de la 81*/
                 and or_provapl <> 0
            ) src
        on (iBasi.OR_IDREG = src.OR_IDREG and ibasi.in_tiporeg = src.in_tiporeg)
            when matched then
                update
                  set iBasi.or_provapl = src.or_provapl,
                      iBasi.or_idpro1  = src.or_idpro1;

    COMMIT;

    VN_NUMERR:= 4;

    BAS_MEN.FNC_TRUNCATE_TABLE('bas_men.maestro_provisiones_balance');

    Insert into bas_men.maestro_provisiones_balance
            select or_entity, epi, sum(totdot_es) as totdot_es, sum(totdot_ge) as totdot_ge
              from (
                        select  or_entity,
                                epi,
                                case
                                    when detalle = 'Corrección de valor ES' then round(sum(saldo),2)
                                    else 0
                                 end as totdot_es,
                                 case
                                    when detalle = 'Corrección de valor GE' then round(sum(saldo),2)
                                    else 0
                                 end as totdot_ge
                            from (
                                    select  a.or_entity,
                                            case
                                              when a.or_entity = 9109 and a.fi_epicon like ('02006%') then '010050206'
                                              when a.fi_epicon like ('02006%') then '010050205'
                                              when a.or_entity = 8211 and a.fi_epicon like ('010050206%') and b.detalle = 'Corrección de valor GE' then '010050205'  /* 16/04/2020 RMR  TM-1224 */
                                              else substr(a.fi_epicon,1,9)
                                             end as epi,
                                             b.detalle, a.saldo
                                    from bas_men.balance_consolidado_geco a
                                    inner join BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS b
                                       on a.fi_epicon = b.fi_epicon
                                    where a.or_entity not in (81,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,8211) /* RMR 29/01/2021 Añadido al filtro la 8211 */
                                      and a.fi_epicon not in ('010100102020000000000000000000','010100202010000000000000000000',
                                                              '010100202020000000000000000000','010130102000000000000000000000',
                                                              '010140501030000000000000000000','010140503030000000000000000000')
                                                           /* '010100101020300000000000000000')  19/01/20201 -NAV - TM-3537 - consideración de las correcciones de valor correspondientes a edificios para entidades diferentes de la 81*/
                                      and b.detalle in ('Corrección de valor ES', 'Corrección de valor GE')
                                  )
                            group by or_entity, epi, detalle
                      )
             group by or_entity, epi
            having sum(totdot_es) > 0 or sum(totdot_ge) > 0;

    COMMIT;

    VN_NUMERR:= 5;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PROVISION_BASILEA');

    insert into bas_men.provision_basilea
          select or_entity, epi, sum(totdot_es) totdot_es, sum(totdot_ge) totdot_ge
            from (
                    select /*+ parallel (a 8) */ or_entity, substr(fi_epicon,1,9) epi,
                              case
                                when or_idpro1 = 'GE' then round(or_provapl,2)
                                else 0
                                end as totdot_ge,
                              case
                                when or_idpro1 = 'ES' then round(or_provapl,2)
                                else 0
                                end as totdot_es
                      from bas_men.basilea a
                     where or_idpro1 in ('GE', 'ES')
                       and fi_elimi1 = 'NO'
                       and or_entity <> 81
                  )
           group by or_entity, epi
          having sum(totdot_ge) <> 0 or sum(totdot_es) <> 0;

    commit;

    VN_NUMERR:= 6;

    BAS_MEN.FNC_TRUNCATE_TABLE('bas_men.provisiones_repartir_aux');

    insert into bas_men.provisiones_repartir_aux
         select a.OR_ENTITY, max(a.EPI) keep (dense_rank last order by totdot_ge+totdot_es, a.or_entity nulls last) epi,
                sum(a.totdot_es), sum(a.totdot_ge)
           from (
                    select or_entity, epi,
                          case
                            when totdot_ge < 0 and totdot_es <> 0 then totdot_es + totdot_ge
                            else totdot_es
                          end as totdot_es,
                          case
                            when totdot_ge < 0 and totdot_es <> 0 then 0
                            else totdot_ge
                          end as totdot_ge
                     from (
                             select or_entity, totdot_es, totdot_ge, epi
                              from (
                                      select  bal.or_entity,bal.epi ,
                                              case
                                                WHEN sum(bas.totdot_es) IS NULL THEN sum(bal.totdot_es)
                                                when sum(bal.totdot_es) - sum(bas.totdot_es) < 0 then 0
                                                else sum(bal.totdot_es) - sum(bas.totdot_es)
                                              end as totdot_es,
                                              case
                                                WHEN sum(bas.totdot_ge) IS NULL THEN sum(bal.totdot_ge)
                                                when sum(bal.totdot_es) - sum(bas.totdot_es) < 0 then (sum(bal.totdot_ge) - sum(bas.totdot_ge)) + (sum(bal.totdot_es) - sum(bas.totdot_es))
                                                else sum(bal.totdot_ge) - sum(bas.totdot_ge)
                                              end as totdot_ge
                                        from (select * from BAS_MEN.maestro_provisiones_balance ) bal
                                        left join BAS_MEN.provision_basilea bas
                                          on (bal.or_entity = bas.or_entity
                                         and bal.epi = bas.epi)
                                       group by bal.or_entity, bal.epi
                                       order by bal.or_entity
                                    )
                            )
                    ) a
          group by a.OR_ENTITY;

    commit;

    VN_NUMERR:= 7;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PROVISION_BALANCE_REPARTIR');

    insert into BAS_MEN.PROVISION_BALANCE_REPARTIR
       select c.or_entity, c.fi_epicon, c.epi, c.total_saldo*-1 total_saldo, c.in_indmor,  d.totdot_es, d.totdot_ge,
              nvl(REPARTIDO_ES_BASILEA,0) REPARTIDO_ES_BASILEA, nvl(REPARTIDO_GE_BASILEA,0) REPARTIDO_GE_BASILEA
         from (
                SELECT or_entity, fi_epicon, epi, in_indmor, SUM(saldo) total_saldo
                  FROM (
                          select or_entity, a.fi_epicon, substr(a.fi_epicon,1,9) epi, decode(b.in_indmor,'SI','SI','NO') in_indmor, a.saldo
                            from bas_men.balance_consolidado_geco a
                           inner join bas_men.maestro_epigrafes_segmentos b
                              on a.fi_epicon = b.fi_epicon
                           where a.or_entity not in (81,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,8211) /* RMR 29/01/2021 Añadido al filtro la 8211 */
                             and b.incorporar = 'SI'
                        )
                 group by or_entity, fi_epicon, epi, in_indmor
              ) c,
              (
                select a.or_entity, a.epi, a.totdot_es, a.totdot_ge, bas.totdot_es as REPARTIDO_ES_BASILEA, bas.totdot_ge as REPARTIDO_GE_BASILEA
                  from bas_men.provisiones_repartir_aux a, bas_men.provision_basilea bas
                 where a.or_entity = bas.or_entity(+)
                   and a.epi = bas.epi(+)
              ) d
         where c.or_entity = d.or_entity
           and c.epi = d.epi
           and c.total_saldo * -1 > 0;

    commit;
    VN_NUMERR:= 8;

    insert into BAS_MEN.PROVISION_BALANCE_REPARTIR
         select c.or_entity, c.fi_epicon, c.epi, c.total_saldo*-1 total_saldo, c.in_indmor,  d.totdot_es, d.totdot_ge,
                nvl(REPARTIDO_ES_BASILEA,0) REPARTIDO_ES_BASILEA, nvl(REPARTIDO_GE_BASILEA,0) REPARTIDO_GE_BASILEA
         from (
                SELECT or_entity, fi_epicon, epi, in_indmor, SUM(saldo) total_saldo
                  FROM (
                          select or_entity, a.fi_epicon, substr(a.fi_epicon,1,9) epi, decode(b.in_indmor,'SI','SI','NO') in_indmor, a.saldo
                            from bas_men.balance_consolidado_geco a
                           inner join bas_men.maestro_epigrafes_segmentos b
                              on a.fi_epicon = b.fi_epicon
                           where a.or_entity not in (81,9125,9126,9127,9128,9129,9130,9131,9132,9133,9134,9135,9136,9137,9138,8211) /* RMR 29/01/2021 Añadido al filtro la 8211 */
                             and b.incorporar = 'SI'
                        )
                 group by or_entity, fi_epicon, epi, in_indmor
              ) c,
              (
                select a.or_entity, a.epi, a.totdot_es, a.totdot_ge, bas.totdot_es as REPARTIDO_ES_BASILEA, bas.totdot_ge as REPARTIDO_GE_BASILEA
                  from bas_men.provisiones_repartir_aux a
                     , bas_men.provision_basilea bas
                where a.or_entity = bas.or_entity(+)
                  and a.epi = bas.epi(+)
              ) d,
              ( select OR_ENTITY, EPI
                  from bas_men.provisiones_repartir_aux
                minus
                select distinct OR_ENTITY, EPI
                  from bas_men.PROVISION_BALANCE_REPARTIR
              ) e
         where c.or_entity = d.or_entity
           and c.or_entity = e.or_entity
           and substr(c.epi,1,7) = substr(e.epi,1,7)
           and substr(c.epi,1,7) = substr(d.epi,1,7)
           and c.total_saldo * -1 > 0;

    commit;
    VN_NUMERR:= 9;

/* 22/04/2021 - NAV - Añadimos este merge si Suma de TOTAL SALDO es menor que TOTDOT_ES resto hay que sumar en TOTDOT_GE */
    MERGE into BAS_MEN.PROVISION_BALANCE_REPARTIR a
        USING (  SELECT DISTINCT OR_ENTITY, EPI
                      , CASE WHEN TOTAL_SALDO_MAX < TOTDOT_ES THEN TOTAL_SALDO_MAX
                             ELSE TOTDOT_ES
                        END AS TOTDOT_ES
                      , CASE WHEN TOTAL_SALDO_MAX < TOTDOT_ES THEN TOTDOT_GE + (TOTDOT_ES - TOTAL_SALDO_MAX)
                             ELSE TOTDOT_GE
                        END AS TOTDOT_GE
                      , REPARTIDO_ES_BASILEA, REPARTIDO_GE_BASILEA
                   FROM (
                         SELECT OR_ENTITY, FI_EPICON, EPI, TOTAL_SALDO, SUM(TOTAL_SALDO) OVER (PARTITION BY OR_ENTITY, EPI, IN_INDMOR, TOTDOT_ES, TOTDOT_GE) TOTAL_SALDO_MAX
                              , IN_INDMOR, TOTDOT_ES, TOTDOT_GE, REPARTIDO_ES_BASILEA, REPARTIDO_GE_BASILEA
                           FROM BAS_MEN.PROVISION_BALANCE_REPARTIR
                          WHERE IN_INDMOR = 'SI'
                          ORDER BY OR_ENTITY
                        )
                  WHERE TOTAL_SALDO_MAX < TOTDOT_ES
               ) b
            ON (A.OR_ENTITY = B.OR_ENTITY
           AND A.EPI        = B.EPI)
          WHEN MATCHED THEN
              UPDATE
                  set a.TOTDOT_ES = b.TOTDOT_ES,
                      a.TOTDOT_GE = b.TOTDOT_GE;

   COMMIT;
   VN_NUMERR:= 10;

/* 29/01/2021 RMR Comentamos merges */
    /*merge into BAS_MEN.PROVISION_BALANCE_REPARTIR a
        using (  SELECT or_entity, fi_epicon, epi, in_indmor, total_saldo,
                 case
                    when total_saldo > totdot_es then totdot_es
                    else total_saldo
                 end as totdot_es
            FROM (
                    select or_entity, fi_epicon, epi, in_indmor, totdot_es, TOTAL_SALDO,
                           (select count(*)
                              from BAS_MEN.PROVISION_BALANCE_REPARTIR a
                             where a.or_entity = b.or_entity
                               and in_indmor = 'SI') AS indmor_SI
                     from bas_men.PROVISION_BALANCE_REPARTIR b
                    group by or_entity, fi_epicon, epi, in_indmor, totdot_es, totdot_ge, TOTAL_SALDO
                   )
           where indmor_SI >= 2 and totdot_es > 0 and in_indmor = 'SI') b
          on (a.or_entity   = b.or_entity
           and a.fi_epicon  = b.fi_epicon)
          WHEN MATCHED THEN
              UPDATE
                  set a.TOTDOT_ES = b.totdot_es;

    commit;
    VN_NUMERR:= 10;

    merge into BAS_MEN.PROVISION_BALANCE_REPARTIR a
       using(  select OR_ENTITY ,EPI, IN_INDMOR, REPARTIDO_ES_BASILEA, TOTAL_SALDO, TOTDOT_ES, TOTDOT_GE, RESTO_ES, RESTO_GE
                 from
                      (
                      select OR_ENTITY ,EPI ,IN_INDMOR , TOTDOT_ES, TOTDOT_GE, REPARTIDO_ES_BASILEA, TOTAL_SALDO,
                             case when REPARTIDO_ES_BASILEA < TOTAL_SALDO then TOTAL_SALDO - REPARTIDO_ES_BASILEA
                                  else 0
                             end as RESTO_ES,
                             case when REPARTIDO_ES_BASILEA < TOTAL_SALDO then ((TOTDOT_ES + TOTDOT_GE + REPARTIDO_ES_BASILEA) - TOTAL_SALDO)
                                  else TOTDOT_ES + TOTDOT_GE
                              end as RESTO_GE
                        from BAS_MEN.PROVISION_BALANCE_REPARTIR
                        where in_indmor = 'SI'
                          AND TOTDOT_ES <> 0
                          AND TOTDOT_ES + REPARTIDO_ES_BASILEA > TOTAL_SALDO
                      )
            ) aux
            on (a.or_entity = aux.or_entity
           and a.EPI = aux.EPI)
          WHEN MATCHED THEN
              UPDATE
                  set a.TOTDOT_GE = aux.RESTO_GE,
                      a.TOTDOT_ES = aux.RESTO_ES;

    commit;
    VN_NUMERR:= 11;*/

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.ASIG_PROV_FINAL');

    insert into bas_men.asig_prov_final
        select  or_entity, fi_epicon, epi,
                case
                    when epi = '010100101' then 'OT' /* 19/01/2021 - NAV - Para inmuebles, el idpro1 es OT */
                    when in_indmor = 'SI' then 'ES'
                    when in_indmor = 'NO' then 'GE'
                end as or_idpro1
              , provision
          from (
                  select a.or_entity, a.fi_epicon,  a.epi, 'SI' as in_indmor, a.totdot_es as provision
                    from bas_men.provision_balance_repartir a,
                        ( select or_entity
                            from bas_men.provision_balance_repartir
                           where in_indmor = 'SI' and total_saldo < totdot_es and totdot_ge = 0
                        ) b
                   where a.or_entity = b.or_entity

                 union all

                  select or_entity, fi_epicon, epi, in_indmor, provision
                    from (
                            SELECT  case
                                        when in_indmor = 'SI' and totdot_es <> 0 then totdot_es
                                        when in_indmor = 'NO' and totdot_ge <> 0 then totdot_ge
                                        else 0
                                    end as provision, or_entity, in_indmor, fi_epicon, epi
                            FROM  bas_men.provision_balance_repartir
                                )
                   where provision > 0
                   group by provision, or_entity, in_indmor , fi_epicon, epi

                 union all

                  SELECT or_entity, fi_epicon, epi, 'SI' as in_indmor, totdot_es AS provision
                    FROM (
                            select or_entity, fi_epicon, epi, in_indmor, totdot_es, totdot_ge,
                                   (select count(*) from bas_men.provision_balance_repartir a
                                     where a.or_entity = b.or_entity and in_indmor = 'SI') AS indmor_SI
                                  ,(select count(*) from bas_men.provision_balance_repartir c
                                     where c.or_entity = b.or_entity and in_indmor = 'NO') AS indmor_NO
                             from bas_men.provision_balance_repartir b
                            group by or_entity, fi_epicon, epi, in_indmor, totdot_es, totdot_ge
                           )
/* NAV - 11-08-202101 - Para evitar dupilacdos solo vamos a crear proviciones para Específica cuando totdot_ge = 0
                   where (indmor_SI = 0 or indmor_NO = 0) */
                   where ((totdot_ge = 0 and indmor_SI = 0) or indmor_NO = 0)
               );

    commit;
    VN_NUMERR:= 13;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.DOTACIONES_FILIALES');

    insert into BAS_MEN.DOTACIONES_FILIALES
        select PROVISION , OR_ENTITY, OR_IDPRO1, or_tipope, FI_EPICON
          from (
                  SELECT PROVISION, OR_ENTITY, OR_IDPRO1, null as or_tipope, FI_EPICON
                  FROM  bas_men.asig_prov_final
                )
        where provision > 0;

    commit;

    VN_NUMERR:= 14;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.DOTACIONES_FILIALES_FIN');

    INSERT INTO BAS_MEN.DOTACIONES_FILIALES_FIN
    SELECT /*+ full(B) parallel (B 8 ) */   B.OR_IDREG, B.OR_ENTITY, B.FI_EPICON, A.OR_IDPRO1, A.PROVISION, OR_DISPTOCON AS OR_DISPTO,
           OR_AVALESCON AS OR_AVALES, SUM(OR_DISPTOCON + OR_AVALESCON + OR_AJUVALCON + OR_DISBLECON) SALDO, 0 AS OR_PROVAPL, 0 AS CUENTA_ORIGEN
           , SUM(OR_DISPTOCON + OR_AVALESCON + OR_AJUVALCON + OR_DISBLECON) * 20/100 SALDO_20_PORCIENTO,
           A.PROVISION AS RESTO_PROVISION, IN_INDMOR, SUBSTR(OR_CODGAR,1,2) AS OR_CODGAR
      FROM BAS_MEN.DOTACIONES_FILIALES A,
           BAS_MEN.BASILEA B
     WHERE A.OR_ENTITY = B.OR_ENTITY
       AND A.FI_EPICON = B.FI_EPICON
       AND FI_ELIMI1 = 'NO'
       AND OR_DISPTOCON + OR_AVALESCON + OR_AJUVALCON + OR_DISBLECON > 0
       AND OR_DISPTOCON + OR_AVALESCON + OR_AJUVALCON + OR_DISBLECON <> OR_PROVAPL
     GROUP BY B.OR_IDREG, B.OR_ENTITY, B.FI_EPICON, A.OR_IDPRO1, A.PROVISION, OR_DISPTOCON, OR_AVALESCON, 0, 0, 0, IN_INDMOR, SUBSTR(OR_CODGAR,1,2) ;

    VV_NRegs_Ins := SQL%ROWCOUNT;
    COMMIT;

    /*  DELETE BAS_MEN.DOTACIONES_FILIALES_FIN
    WHERE OR_IDREG IN (SELECT FI_EPICON FROM BAS_MEN.DOTACIONES_FILIALES WHERE OR_TIPOPE IS NOT NULL);*/

    COMMIT;
    VN_NUMERR:= 15;

    FOR CUR IN PROVISION LOOP

       UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
          SET OR_PROVAPL = SALDO*CUR.PORAPL
        WHERE OR_ENTITY = CUR.OR_ENTITY
          AND PROVISION = CUR.PROVISION
          AND OR_IDPRO1 = CUR.OR_IDPRO1;

    END LOOP;

    COMMIT;
    VN_NUMERR:= 16;

    VV_ENTIDAD := 0;
    VV_FIN     := 'NO';
    VV_PROVI   := 0;

    FOR CUR IN PROVISION_20 LOOP

       IF VV_FIN = 'NO' OR (VV_ENTIDAD <> CUR.OR_ENTITY AND VV_PROVI <> CUR.PROVISION) THEN

          IF VV_ENTIDAD <> CUR.OR_ENTITY OR VV_PROVI <> CUR.PROVISION THEN
             VV_COUNT           := 0;
             VV_RESTO_PROVISION :=0;
          END IF;

          IF VV_COUNT = 0 THEN

             IF CUR.PROVISION <= CUR.SALDO_20_PORCIENTO THEN
                CUR.SALDO_20_PORCIENTO := CUR.PROVISION;
             ELSE
                   VV_COUNT           := VV_COUNT+1;
                   VV_RESTO_PROVISION := CUR.PROVISION - CUR.SALDO_20_PORCIENTO;
                   VV_ENTIDAD         := CUR.OR_ENTITY;
                   VV_PROVI           := CUR.PROVISION;
                   VV_FIN             := 'NO';
             END IF;

             UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
                SET OR_PROVAPL      = CUR.SALDO_20_PORCIENTO,
                    OR_IDPRO1       = CUR.OR_IDPRO1,
                    RESTO_PROVISION = VV_RESTO_PROVISION
              WHERE OR_IDREG        = CUR.OR_IDREG;

          ELSE

               VV_COUNT:= VV_COUNT+1;
               VV_RESTO_PROVISION := VV_RESTO_PROVISION-CUR.SALDO_20_PORCIENTO;

               IF VV_RESTO_PROVISION > 0 THEN

                  UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
                     SET OR_PROVAPL = CUR.SALDO_20_PORCIENTO,
                         OR_IDPRO1 = CUR.OR_IDPRO1,
                         RESTO_PROVISION = VV_RESTO_PROVISION
                   WHERE OR_IDREG = CUR.OR_IDREG;

               ELSE

                     UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
                        SET OR_PROVAPL = CUR.SALDO_20_PORCIENTO + VV_RESTO_PROVISION,
                            OR_IDPRO1 = CUR.OR_IDPRO1,
                            RESTO_PROVISION = VV_RESTO_PROVISION
                      WHERE OR_IDREG = CUR.OR_IDREG;

                      VV_FIN:= 'SI';

               END IF;

          END IF;

       END IF;

    END LOOP;

    COMMIT;
    VN_NUMERR:= 17;

    VV_RESTO_PROVISION := 0;
    VV_COUNT           := 0;
    VV_FIN             := 'NO';
    VV_ENTIDAD         := 0;
    VV_PROVI           := 0;

    FOR CUR IN PROVISION_RESTO LOOP

       IF VV_FIN = 'NO' OR (VV_ENTIDAD <> CUR.OR_ENTITY AND VV_PROVI <> CUR.PROVISION_RESTO) THEN

          IF VV_ENTIDAD <> CUR.OR_ENTITY OR VV_PROVI <> CUR.PROVISION_RESTO THEN
             VV_COUNT:= 0;
             VV_RESTO_PROVISION:=0;
          END IF;

          IF VV_COUNT = 0 THEN

             IF CUR.PROVISION_RESTO <= CUR.SALDO_RESTO THEN

                CUR.SALDO_RESTO := CUR.PROVISION_RESTO;

             ELSE

                   VV_COUNT:= VV_COUNT+1;
                   VV_RESTO_PROVISION:=   CUR.PROVISION_RESTO-CUR.SALDO_RESTO;
                   VV_ENTIDAD := CUR.OR_ENTITY;
                   VV_PROVI := CUR.PROVISION_RESTO;
                   VV_FIN:= 'NO';

             END IF;

             UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
                SET OR_PROVAPL = OR_PROVAPL + CUR.SALDO_RESTO,
                    OR_IDPRO1 = CUR.OR_IDPRO1,
                    RESTO_PROVISION = VV_RESTO_PROVISION
              WHERE OR_IDREG = CUR.OR_IDREG;

          ELSE

            VV_COUNT:= VV_COUNT+1;

            VV_RESTO_PROVISION := VV_RESTO_PROVISION-CUR.SALDO_RESTO;

            IF VV_RESTO_PROVISION > 0 THEN

               UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
                  SET OR_PROVAPL = OR_PROVAPL + CUR.SALDO_RESTO,
                      OR_IDPRO1 = CUR.OR_IDPRO1,
                      RESTO_PROVISION = VV_RESTO_PROVISION
                WHERE OR_IDREG = CUR.OR_IDREG;

            ELSE

                  UPDATE BAS_MEN.DOTACIONES_FILIALES_FIN
                     SET OR_PROVAPL = OR_PROVAPL + CUR.SALDO_RESTO + VV_RESTO_PROVISION,
                         OR_IDPRO1 = CUR.OR_IDPRO1,
                         RESTO_PROVISION = VV_RESTO_PROVISION
                   WHERE OR_IDREG = CUR.OR_IDREG;

                VV_FIN:= 'SI';

            END IF;

           END IF;

        END IF;

    END LOOP;

    COMMIT;
    VN_NUMERR:= 18;


   -- Actualización de BASILEA

    MERGE /*+ full(Dst) full(Sel) parallel(Dst 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Dst
      USING  BAS_MEN.DOTACIONES_FILIALES_FIN Sel
         ON (Dst.OR_IDREG = Sel.OR_IDREG )
       WHEN MATCHED THEN
     UPDATE
        SET Dst.OR_PROVAPL = case
                                when abs(dst.OR_PROVAPL + sel.OR_PROVAPL) > (or_disptocon+or_avalescon+or_disblecon+or_ajuvalcon) then
                                    (or_disptocon+or_avalescon+or_disblecon+or_ajuvalcon)
                                else
                                    dst.OR_PROVAPL + sel.OR_PROVAPL
                                end
          , Dst.OR_IDPRO1  = Sel.OR_IDPRO1;

    VV_NRegs_Act := SQL%ROWCOUNT;

    COMMIT;
    VN_NUMERR:= 99;
    --
    -- Actualización del control de procesos
    --

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           REG_INS_OK = VV_NRegs_Ins,
           REG_UPD_OK = VV_NRegs_Act
     WHERE PROCES = Cte_Nom_Procedure
       AND ESTAT  = 'INICIADO';

EXCEPTION
    WHEN OTHERS THEN

       VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

       ROLLBACK;

       UPDATE BAS_MEN.CONTROL_PROCES
          SET ESTAT = 'FINALIZADO',
              DATA_FIN = SYSDATE,
              FINALITZAT = 'KO',
              ERROR_ORAC = VV_MENSAJE,
              REG_INS_OK = VV_NRegs_Ins,
              REG_UPD_OK = VV_NRegs_Act,
              ERROR_PROG = SUBSTR('NUMERR: '||VN_NUMERR,1,255),
              NUM_ERROR  = VN_NUMERR
        WHERE PROCES = Cte_Nom_Procedure
          AND ESTAT  = 'INICIADO';
       COMMIT;

       RAISE;
END;


/*

   --
   ------------- VALIDAMOS QUE NO HAYA MAS SALDO QUE DOTACION . NO HA DE SALIR NINGUN REGISTRO---------------------------------------------
   --

   select *
   from BAS_MEN.DOTACIONES_FILIALES_FIN
   where OR_PROVAPL > saldo;

   --
   --- VALIDAMOS QUE SE HAYA ASIGNADO TODA LA DOTACION - SUM(OR_PROVAPL) = PROVISION Excepto si el SUM(SALDO) es menor que la provisión ---
   --


   SELECT b.OR_ENTITY
        , a.or_idpro1, b.or_idpro1
        , round(SUM(OR_PROVAPL),2)
        , a.PROVISION
        , round(a.PROVISION-sum(or_provapl),2)
        , sum(or_provapl)-sum(saldo)
        , SUM(SALDO_20_PORCIENTO), SUM(SALDO)
   from BAS_MEN.DOTACIONES_FILIALES_FIN a,
        BAS_MEN.dotaciones_filiales b
   WHERE a.OR_ENTITY(+) = b.or_entity
     and a.fi_epicon(+) = b.fi_epicon
   GROUP BY b.OR_ENTITY
          , a.or_idpro1
          , a.PROVISION, b.or_idpro1
   order by 1,3;

   --

--------------------------------------------------------------------------------------------------------------------------
*/

--************************************************************************************************************************--
--************************************************************************************************************************--
--                                       INSERCION EN BASILEA                                                             --
--                                  a partir de la BAS_MEN.DOTACIONES_FILIALES_FIN                                        --
--************************************************************************************************************************--
--************************************************************************************************************************--

 --ALTER SESSION ENABLE PARALLEL DML;


  --MERGE /*+ full(Dst) full(Sel) parallel(Dst 8) parallel(Sel 8) */ INTO BAS_MEN.BASILEA Dst
   /* USING  BAS_MEN.DOTACIONES_FILIALES_FIN Sel
       ON (Dst.OR_IDREG = Sel.OR_IDREG )
     WHEN MATCHED THEN
   UPDATE
      SET Dst.OR_PROVAPL =  case when abs(dst.OR_PROVAPL + sel.OR_PROVAPL) > (or_disptocon+or_avalescon+or_disblecon+or_ajuvalcon) then (or_disptocon+or_avalescon+or_disblecon+or_ajuvalcon)  else dst.OR_PROVAPL + sel.OR_PROVAPL end
        , Dst.OR_IDPRO1  = Sel.OR_IDPRO1;
COMMIT;
*/

/

select * from sys.user_errors WHERE NAME = 'REPARTO_DOTACIONESFILIALES';


/* INI 01/11/2021 - NAV - HDEV-78571  Añadido reparto de provisiones, el maestro es: MAESTRO_CUADRE_PROV_SAS*/
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CUADRE_PROVISIONES (ENTIDAD   IN NUMBER,
                                                            METODO    IN VARCHAR2,
                                                            MOROSIDAD IN VARCHAR2,
                                                            SALDO     IN FLOAT)
    IS

    vor_idreg_auto   NUMBER(12)           DEFAULT 0;
    vversion         NUMBER(2)            DEFAULT 1;
    PN_FECPRO        NUMBER(6)            DEFAULT 0;
    v_prov_restante  FLOAT;
    --
    Cte_Proces       VARCHAR2(256)        DEFAULT 'FNC_CUADRE_PROVISIONES';
    vNumErr          NUMBER(2)            DEFAULT 1;
    v_Msg_Err        VARCHAR2(255)        DEFAULT '';
    v_OR_IDMES       NUMBER(6);
    v_ORDEN          NUMBER(6);


    CURSOR Cursor_Insolvencias IS
        SELECT /*+ full(a) parallel (a 8) */ a.OR_IDREG, a.OR_DISPTO, a.OR_DISBLE, a.OR_PROVAPL, a.OR_IDMES
             , OR_ENTITY, a.IN_INDMOR, a.IN_METODE, a.OR_IDPRO1, a.OR_DISPTO + a.OR_DISBLE - a.OR_PROVAPL as ESPACIO_PROV
          FROM BAS_MEN.BASILEA a
         WHERE a.IN_INDMOR = MOROSIDAD
           AND a.OR_ENTITY = ENTIDAD
           AND a.IN_METODE = METODO
           AND a.FI_ELIMI1 = 'NO'
           AND a.OR_DISPTO + a.OR_DISBLE > 0
         ORDER BY a.OR_DISPTO + a.OR_DISBLE - a.OR_PROVAPL DESC;

BEGIN

    -- Cierre de cualquier tx abierta
    ROLLBACK;
    --Iniciamos log del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

    --Recuperamos la fecha del pase actual
    BEGIN
      SELECT TO_NUMBER(substr(VALPARM,1,6))
        INTO PN_FECPRO
        FROM BAS_MEN.PARAMETROS_PROCESO
       WHERE CODCSB   = 81
         AND CODPARM  = '0001'
         AND SECPARM  = '01';
    EXCEPTION
         WHEN OTHERS THEN
             RAISE;
     END;

    vNumErr := 1;

    BEGIN
      SELECT NVL(max(version),1) , NVL(MAX(OR_IDMES),0)
        INTO vversion, v_OR_IDMES
        FROM BAS_MEN.CUADRE_PROVISIONES_ORIG;
    EXCEPTION
      WHEN OTHERS THEN
        vversion := 1;
        v_OR_IDMES := 0;
    END;

    vNumErr := 3;

    v_prov_restante := SALDO;
    v_ORDEN := 1;

    IF v_OR_IDMES <> PN_FECPRO THEN
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CUADRE_PROVISIONES_ORIG');
      
      vversion := 1;
      
    ELSE
      MERGE /*+ parallel(Upd 4) */ INTO BAS_MEN.BASILEA dst
       USING (SELECT *
                FROM BAS_MEN.CUADRE_PROVISIONES_ORIG
               WHERE VERSION = vversion) src
          ON (dst.OR_IDREG = src.OR_IDREG)
        WHEN MATCHED THEN
          UPDATE
             SET dst.OR_PROVAPL  = src.OR_PROVAPL
               , dst.OR_IDPRO1   = src.OR_IDPRO1;

      COMMIT;
      
      vversion := vversion + 1;
      
    END IF;

    vNumErr := 4;

   --Si hay diferencia, se borra la tabla donde se guardan los originales y utilizamos el cursor para cuadrar
    IF v_prov_restante > 0 THEN

      vNumErr := 5;

      INSERT INTO BAS_MEN.CUADRE_PROVISIONES_ORIG (OR_IDREG, OR_PROVAPL, VERSION, OR_ENTITY, OR_IDMES, IN_INDMOR, IN_METODE)
      VALUES (0, v_prov_restante, vversion, ENTIDAD, PN_FECPRO, MOROSIDAD, METODO);

      COMMIT;

      FOR cur IN Cursor_Insolvencias LOOP

        vNumErr := 10;

        -- Si ya está cuadrado, salimos del cursor
        IF v_prov_restante < 1 THEN
            EXIT;

        ELSE

          vNumErr := 11;
          /* Guardamos el registro original junto con vversion antes de actualizarlo */
          INSERT INTO BAS_MEN.CUADRE_PROVISIONES_ORIG (OR_IDREG, VERSION, OR_DISPTO, OR_DISBLE, OR_PROVAPL, OR_IDPRO1, OR_ENTITY, OR_IDMES, IN_INDMOR, IN_METODE, v_ORDEN)
          VALUES (cur.OR_IDREG, vversion, cur.OR_DISPTO, cur.OR_DISBLE, cur.OR_PROVAPL, cur.OR_IDPRO1, cur.OR_ENTITY, cur.OR_IDMES, cur.IN_INDMOR, cur.IN_METODE, v_ORDEN);

          v_ORDEN := v_ORDEN +1;

          vNumErr := 12;

          IF v_prov_restante < cur.ESPACIO_PROV THEN

              vNumErr := 13;

              UPDATE BAS_MEN.BASILEA a
                 SET OR_PROVAPL = a.OR_PROVAPL + v_prov_restante,
                     OR_IDPRO1  = 'ES'
               WHERE a.OR_IDREG = cur.OR_IDREG;

              v_prov_restante := 0;

          -- Si no cabe toda, ajustamos la que podamos al igualarla a la exposición, de esta forma en la proxima iteracion no saldrá este registro
          ELSE

              vNumErr := 14;

              UPDATE BAS_MEN.BASILEA a
                 SET OR_PROVAPL = OR_PROVAPL + cur.ESPACIO_PROV,
                     OR_IDPRO1  = 'ES'
               WHERE OR_IDREG = cur.OR_IDREG;

              v_prov_restante := v_prov_restante - cur.ESPACIO_PROV;

          END IF;

          vNumErr := 15;

        END IF;

      END LOOP;

      COMMIT;

      vNumErr := 16;

    END IF;

    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Msg_Err, vNumErr);

      RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_CUADRE_PROVISIONES';

create or replace PROCEDURE     BAS_MEN.BASI_REPARTO_DOTACION_FILIALES IS


   VV_TABLA           CONSTANT VARCHAR2(200) := 'BAS_MEN.BASILEA';
   VN_FECPRO_AAAAMMDD          NUMBER(8);
   VN_MESPRO_AAAAMM            NUMBER(6);
   VN_NumErr                   NUMBER(6)         DEFAULT 0;
   vN_NRegs_Ins                NUMBER(12)        DEFAULT 0;
   Vv_Mensaje_Err              VARCHAR2(255)     DEFAULT 'OK';
   VV_Nom_Proceso     BAS_MEN.CONTROL_PROCES.PROCES%TYPE;

   CURSOR Cursor_SALDO IS
    SELECT OR_ENTITY, IN_METODE, IN_INDMOR, ABS(SALDO) as SALDO
      FROM BAS_MEN.MAESTRO_CUADRE_PROV;

BEGIN

  -- Tablas Usuario Necesarias : BAS_MEN_MENSUAL.DOTACIONES_FILIALES_SAS

  ROLLBACK; -- Cierre de cualquier TX que pudiera haber abierta.

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  --
  -- Obtención de las fechas del proceso en Formato AAAAMM y AAAAMMDD
  --
  BAS_MEN.SP_Obtener_Fechas_Proceso (VN_MesPro_AAAAMM, VN_FecPro_AAAAMMDD);

  --
  -- Información en el control de LOG (Tabla CONTROL_PROCESO) del inicio del proceso
  --
  VV_Nom_Proceso := 'BAS_MEN REPARTO_DOTACIONES_FILIALES '||VV_TABLA||' '||VN_MesPro_AAAAMM;

  BAS_MEN.SP_Info_Control_Proces (VV_Nom_Proceso, 'INICIADO');

  --  --
  --  -- Reparto Dotaciones Filiales
  --  --
  BAS_MEN.REPARTO_DOTACIONESFILIALES (VN_MESPRO_AAAAMM);
  COMMIT;

  /* INI 01/11/2021 - NAV - HDEV-78571  Añadido reparto de provisiones, el maestro es: MAESTRO_CUADRE_PROV_SAS*/
  -- Reparto Provisiones
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CUADRE_PROV');

  -- Volcamos los datos a BAS_MEN
  INSERT INTO BAS_MEN.MAESTRO_CUADRE_PROV
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_CUADRE_PROV_SAS;
  COMMIT;

  FOR cur IN Cursor_SALDO LOOP

    BAS_MEN.FNC_CUADRE_PROVISIONES(cur.OR_ENTITY, cur.IN_METODE, cur.IN_INDMOR, cur.SALDO);
    COMMIT;

  END LOOP;
  /* FIN 01/11/2021 - NAV - HDEV-78571  Añadido reparto de provisiones, el maestro es: MAESTRO_CUADRE_PROV_SAS*/

  --
  -- Información en el control de LOG (Tabla CONTROL_PROCESO) del final del proceso
  --
  BAS_MEN.SP_Info_Control_Proces (VV_Nom_Proceso, 'FINALIZADO', 'OK', vV_Mensaje_Err);

EXCEPTION
    WHEN OTHERS THEN
          --
          -- Actualización: Fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
          --
          vV_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' Error: '||vN_NumErr,1,255);

          ROLLBACK;

          BAS_MEN.SP_Info_Control_Proces (VV_Nom_Proceso, 'FINALIZADO', 'KO', vV_Mensaje_Err);

          RAISE;

END;

/
  
--bka40115=====================================================================================================
Select 'bka40115' As Compilando from dual;

create or replace PROCEDURE   BAS_MEN.FNC_VALIDA_RATINGS IS

  Cte_Nom_Proc             CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := 'BAS_MEN.FNC_VALIDA_RATINGS';

  v_NRegs_Ins              NUMBER(9)            DEFAULT 0;
  
  v_Paso                   NUMBER(3)            DEFAULT 0;
  v_Mensaje_Err            VARCHAR2(256)        DEFAULT ' ';
  
BEGIN

  --
  -- Info. del inicio del proceso en la tabla CONTROL_PROCES
  --
  BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proc , 'INICIADO');
  
 
  --
  -- Borrado de las tablas de salida del proceso
  --
  v_Paso := 1;
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.VALIDA_RATINGS');
  
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_NO_INFORMADOS');

  --
  -- Generación de la tabla con todos los ratings
  --  
  v_Paso := 2;
  INSERT INTO BAS_MEN.VALIDA_RATINGS
        --
        -- FACTORING_COBERTURA
        --
        SELECT DISTINCT Nvl(RAT_FITCH ,'SR')    FROM DCRPROP_MENSUAL.FACTORING_COBERTURA_SAS
         UNION
        SELECT DISTINCT Nvl(RAT_MOODY ,'SR')    FROM DCRPROP_MENSUAL.FACTORING_COBERTURA_SAS
         UNION
        SELECT DISTINCT Nvl(RAT_SP ,'SR')       FROM DCRPROP_MENSUAL.FACTORING_COBERTURA_SAS
         UNION
        SELECT DISTINCT Nvl(RAT_DBRS ,'SR')     FROM DCRPROP_MENSUAL.FACTORING_COBERTURA_SAS
         UNION
        --
        -- ASEGURADORAS
        --
        SELECT DISTINCT Nvl(RAT_FITCH ,'SR')    FROM DCRPROP_MENSUAL.ASEGURADORAS_SAS
         UNION 
        SELECT DISTINCT Nvl(RAT_MOODY ,'SR')    FROM DCRPROP_MENSUAL.ASEGURADORAS_SAS
         UNION 
        SELECT DISTINCT Nvl(RAT_SP ,'SR')       FROM DCRPROP_MENSUAL.ASEGURADORAS_SAS
         UNION
        SELECT DISTINCT Nvl(RAT_DBRS,'SR')      FROM DCRPROP_MENSUAL.ASEGURADORAS_SAS
         UNION
        --
        -- RATINGS_SOBERANOS
        --
        SELECT DISTINCT Nvl(FITCH,'SR')     FROM DCRPROP_MENSUAL.RATINGS_SOBERANOS_SAS
         UNION
        SELECT DISTINCT Nvl(MOODY,'SR')     FROM DCRPROP_MENSUAL.RATINGS_SOBERANOS_SAS
         UNION
        SELECT DISTINCT Nvl(SP  ,'SR')      FROM DCRPROP_MENSUAL.RATINGS_SOBERANOS_SAS
         UNION
        SELECT DISTINCT Nvl(DBRS ,'SR')     FROM DCRPROP_MENSUAL.RATINGS_SOBERANOS_SAS  
         UNION
        --
        --  BLOOMBERG_RF 
        --
        SELECT DISTINCT Nvl(FITCH ,'SR')        FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION
        SELECT DISTINCT Nvl(MOODY,'SR')         FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION  
        SELECT DISTINCT Nvl(SP ,'SR')           FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION
        SELECT DISTINCT Nvl(DBRS ,'SR')         FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION
        --
        --  BLOOMBERG_RF_EMISION
        --
        SELECT DISTINCT Nvl(FITCH_EMISOR,'SR')         FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION
        SELECT DISTINCT Nvl(MOODY_EMISOR,'SR')         FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION  
        SELECT DISTINCT Nvl(SP_EMISOR,'SR')            FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
         UNION
        SELECT DISTINCT Nvl(DBRS_EMISOR,'SR')          FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS
        --
        --  EEFF
        --
        UNION
         SELECT DISTINCT Nvl(RATING_FITCH,'SR')     FROM DCRPROP_MENSUAL.RATING_EXTERNO_EEFF_SAS
         UNION
        SELECT DISTINCT Nvl(RATING_MOODY,'SR')     FROM DCRPROP_MENSUAL.RATING_EXTERNO_EEFF_SAS
         UNION
        SELECT DISTINCT Nvl(RATING_SP,'SR')        FROM DCRPROP_MENSUAL.RATING_EXTERNO_EEFF_SAS
         UNION
        SELECT DISTINCT Nvl(RATING_DB,'SR')      FROM DCRPROP_MENSUAL.RATING_EXTERNO_EEFF_SAS
        --
        --  EMISIONES
        --
         UNION
         SELECT DISTINCT Nvl(RATING_FITCH,'SR')     FROM DCRPROP_MENSUAL.RATINGS_EMISORES_SAS
         UNION
        SELECT DISTINCT Nvl(RATING_MOODYS,'SR')     FROM DCRPROP_MENSUAL.RATINGS_EMISORES_SAS
         UNION
        SELECT DISTINCT Nvl(RATING_SP,'SR')        FROM DCRPROP_MENSUAL.RATINGS_EMISORES_SAS
         UNION
        SELECT DISTINCT Nvl(RATING_DBRS,'SR')      FROM DCRPROP_MENSUAL.RATINGS_EMISORES_SAS;

  v_NRegs_Ins := SQL%ROWCOUNT;
  COMMIT;

  
  v_Paso := 3;
  IF v_NRegs_Ins = 0 THEN RAISE_APPLICATION_ERROR(-20000, 'ERROR. NO SE HAN GENERADO REGISTROS PARA LA TABLA VALIDA_RATINGS'); END IF;
      
  v_NRegs_Ins := 0;
  
  --
  -- Generación de la tabla con todos los ratings NO INFORMADOS 
  --   
  v_Paso := 4;
  INSERT INTO BAS_MEN.RATINGS_NO_INFORMADOS    
  SELECT VALORES_RATINGS FROM BAS_MEN.VALIDA_RATINGS
  MINUS  
  SELECT MOODY FROM DCRPROP_MENSUAL.MAESTRO_TIPOS_RATING_SAS;

  v_NRegs_Ins := SQL%ROWCOUNT;
     
  COMMIT;
  
  v_Paso := 5;
  IF v_NRegs_Ins <> 0 THEN RAISE_APPLICATION_ERROR(-20001, 'ERROR. HAY RATINGS SIN INFORMAR'); END IF;
  
  v_Paso := 6;
  BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proc , 'FINALIZADO', 'OK');
 
  v_Paso := NULL;
  

EXCEPTION 
   WHEN OTHERS THEN
    --
    --      Actualización del Control del Proceso.
    --
    v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM,1,255);

    ROLLBACK;
    
    BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proc, 'FINALIZADO', 'KO', v_Mensaje_Err, v_Paso);  
    
    RAISE_APPLICATION_ERROR(-20000, 'NUMERR:'||v_Paso);

END;
/
									
create or replace PROCEDURE BAS_MEN.FNC_MEJOR_RATING ( PE_ID        IN BAS_MEN.GTT_MEJOR_RATING.ID%TYPE
                                   									 , PE_Orden_SP  IN BAS_MEN.GTT_MEJOR_RATING.ORDEN%TYPE
                                   									 , PE_Orden_FI  IN BAS_MEN.GTT_MEJOR_RATING.ORDEN%TYPE
                                   									 , PE_Orden_MD  IN BAS_MEN.GTT_MEJOR_RATING.ORDEN%TYPE                             
                                   									 , PE_Orden_DB  IN BAS_MEN.GTT_MEJOR_RATING.ORDEN%TYPE
                                   									 , PS_ECAI     OUT BAS_MEN.GTT_MEJOR_RATING.ECAI%TYPE
                                   									 )
IS

   v_N_Rat_Validos NUMBER(1)   DEFAULT 0;
 	 
     
BEGIN
 

    PS_ECAI := '';
    
    --
    -- Se informa en una tabla Temporal Los Ratins con su id, Orden, ECAI y se le asinga un peso  
    --
    INSERT INTO BAS_MEN.GTT_MEJOR_RATING
    --  PN_DBRS --
    SELECT PE_ID , PE_Orden_DB AS Orden, 'DB' AS ECAI, 0 AS PESO FROM DUAL
    UNION
    --  MD --
    SELECT PE_ID , PE_Orden_MD AS Orden, 'MD' AS ECAI, 1 AS PESO FROM DUAL
    UNION
    --  FI --
    SELECT PE_ID , PE_Orden_FI AS Orden, 'FI' AS ECAI, 2 AS PESO FROM DUAL 
    UNION
    --  SP --
    SELECT PE_ID , PE_Orden_SP AS Orden, 'SP' AS ECAI, 3 AS PESO FROM DUAL;

    -- Obtención del nº de distintos ratings validos.
    BEGIN

        SELECT COUNT(DISTINCT ORDEN)
          INTO v_N_Rat_Validos
          FROM BAS_MEN.GTT_MEJOR_RATING MejRat 
         WHERE ID     = PE_ID
           AND ORDEN <> 23;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         PS_ECAI := 'SR'; -- NO HAY NINGUNO VALIDO.
      WHEN OTHERS THEN
        RAISE;
    END;
   
					 
      IF v_N_Rat_Validos = 0 THEN
         PS_ECAI := 'SR';
         
      ELSIF v_N_Rat_Validos =   1 THEN
       -- Sólo 1 Valido, Este ( y en el caso de que sean iguales el de mayor PESO ).
        
        SELECT ECAI
          INTO PS_ECAI    
          FROM BAS_MEN.GTT_MEJOR_RATING  MejRat
         WHERE ID = PE_ID
           AND MejRat.ORDEN <> 23
           AND MejRat.PESO  = ( SELECT MAX(PESO) 
                                  FROM BAS_MEN.GTT_MEJOR_RATING MaxPeso    
                                 WHERE ID             = PE_ID
                                   AND MaxPeso.ORDEN <> 23                    
                              );
      ELSIF v_N_Rat_Validos >   1 THEN
                              
              SELECT ECAI
                INTO PS_ECAI
              FROM 
                (SELECT ECAI, orden, PESO
                 FROM ( SELECT * 
                          FROM ( SELECT ECAI, ORDEN, PESO
                                   FROM BAS_MEN.GTT_MEJOR_RATING MejRat
                                  WHERE ID            = PE_ID
                                    AND MejRat.ORDEN <> 23 
                                  ORDER BY ORDEN, PESO DESC
                               )
                        WHERE  ROWNUM <= 2                                 
                      ) DosMasBajas
                 ORDER BY ORDEN DESC, PESO DESC
                 )
                 WHERE ROWNUM = 1;
      ELSE 
         PS_ECAI := 'SR';
       
    END IF;
                            
END; 
/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_RATING_SOB ( PV_TABLA IN  VARCHAR2 )
IS

  CURSOR Cur_Rating_RF IS -- Antes RF
    SELECT /*+ full(b) parallel (b 8) */ DISTINCT B.OR_IDREG, A.*
      FROM BAS_MEN.BLOOMBERG_RF A
         , BAS_MEN.BASILEA   B
     WHERE A.COD_ISIN = B.OR_COISIN
       AND ((SUBSTR(OR_EPIIND,1,5) in ('02004', '03002', '01005') and fi_tipexp <> 'Repos')
        OR OR_TIPOPE = 'RF');
  
  CURSOR Cur_Rating_RF_EMISOR IS -- Antes RF
  SELECT /*+ full(b) parallel (b 8) */ DISTINCT B.OR_IDREG, A.*
    FROM BAS_MEN.BLOOMBERG_RF A
       , BAS_MEN.BASILEA   B
   WHERE A.COD_ISIN = B.OR_COISIN
     AND ((SUBSTR(OR_EPIIND,1,5) in ('02004', '03002', '01005') and fi_tipexp <> 'Repos')
      OR OR_TIPOPE = 'RF');
   
  CURSOR Cur_Maestro_Rating_SOBERANOS IS -- Antes SOBERANOS
     SELECT OR_IDPAIS, MOODY, SP, FITCH, DBRS
       FROM BAS_MEN.RATINGS_SOBERANOS;

  CURSOR Cur_Obt_RatSob_Paises IS
     SELECT /*+ full(basi) parallel(basi 8)*/  DISTINCT
            MSob.CODI_NUM_PAIS 				AS OR_IDPAIS
          , NVL(MSob.RAT_S_P	 ,'SR') AS RAT_SP   
          , NVL(MSob.RAT_MOODYS,'SR') AS RAT_MOODY
          , NVL(MSob.RAT_FITCH, 'SR') AS RAT_FITCH
          , NVL(MSob.RAT_DBRS,	'SR') AS RAT_DBRS
          , MSob.CODI_SOLVENCIA
       FROM BAS_MEN.MAESTRO_SOBERANOS MSob;
                       
  CURSOR Cur_Rating_Aseguradoras IS -- Antes ASEG
    SELECT B.OR_IDREG,  a.or_idpers
         , NVL(RAT_MOODY,'SR') AS MOODY
         , NVL(RAT_SP,'SR')    AS SP
         , A.RATEXT, B.IN_RATEXT
		 FROM BAS_MEN.ASEGURADORAS a
         , BAS_MEN.BASILEA      b
     WHERE a.OR_IDPERS = B.OR_IDPERS
       and nvl(b.in_ratext, 'NR') in ('NR', 'SR', '?'); --XCG, solo se asigna rating aseguradora si no tiene ya rating por otro motivo. 09/12/2019;

  CURSOR Cur_Rating_Aseg_OFEX IS -- Antes ASEG_OFEX
     SELECT /*+ full(b) parallel (b 8) */ B.OR_IDREG,  B.IN_RATEXT, a.*--, B.IN_SEGMBSINI, B.OR_CODIGO_BIC, 
      FROM (select a.or_idpers, NVL(RAT_MOODY,'SR') MOODY, NVL(RAT_SP,'SR') SP
         , A.RATEXT from BAS_MEN.ASEGURADORAS a
         where A.OR_IDPERS = '12-M99999999') a
         , BAS_MEN.BASILEA      b
     WHERE B.OR_NUMOFI = 825
       AND B.IN_SUCEPT = 'EMFACO'
       and nvl(b.in_ratext, 'NR') in ('NR', 'SR', '?'); --XCG, solo se asigna rating aseguradora si no tiene ya rating por otro motivo. 09/12/2019;;

  CURSOR Cur_Rating_Factoring_Cobertura IS -- Antes FACTORING_COBERTURA
    SELECT /*+ full(b) parallel (b 8)*/  distinct A.OR_CLUNICONTR
	     ,  A.OR_REFOPE    /*11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */
         ,  NVL(RAT_MOODY,'SR') AS MOODY
         ,  NVL(RAT_SP,'SR')    AS SP
         ,  NVL(RAT_FITCH,'SR') AS FITCH
         ,  NVL(RAT_DBRS,'SR') AS DBRS
         --, '?' IN_SEGMBSINI, '?' OR_CODIGO_BIC
      FROM BAS_MEN.MAESTRO_FACTORING_COBERTURA a;  
  
  CURSOR Cursor_Rat_Ext_EEFF IS
    SELECT ROWNUM AS OR_IDREG
         , CODIGO_BIC
         , NOMBRE
         , NVL(RATING_SP, '?')                                  AS Rating_SP
         , NVL(DATE_SP, TO_DATE('19000101', 'YYYYMMDD'))        AS Date_SP
         , NVL(RATING_FITCH, '?')                               AS Rating_Fitch
         , NVL(DATE_FITCH, TO_DATE('19000101', 'YYYYMMDD'))     AS Date_Fitch
         , NVL(RATING_MOODY, '?')                               AS Rating_Moody
         , NVL(DATE_MOODY, TO_DATE('19000101', 'YYYYMMDD'))     AS Date_Moody
         , NVL(RATING_DB, '?')                                  AS Rating_DB
         , NVL(DATE_DB, TO_DATE('19000101', 'YYYYMMDD'))        AS Date_DB
     FROM BAS_MEN.RATING_EXTERNO_EEFF;

  CURSOR Cur_Rating_Eeff is      
    SELECT /*+ full(b) parallel (b 8)*/  b.OR_IDREG, RATING
      FROM BAS_MEN.MAESTRO_RATING_EXTERNO_EEFF a
         , BAS_MEN.BASILEA b
     WHERE b.OR_CODIGO_BIC = BIC
       AND IN_SEGMBSINI   IN ('007','018','021','028','029','034')
       and rating <> 'NR';   
  
  
  CURSOR Cur_Rating_Emisores IS
    SELECT /*+ parallel (b 8) */ DISTINCT B.OR_IDREG, A.*
      FROM BAS_MEN.RATINGS_EMISORES A
         , BAS_MEN.BASILEA   B
     WHERE A.OR_NUMPERSONA = B.OR_NUMPERSONA
       and nvl(b.in_ratext, 'NR') in ('NR', 'SR', '?'); --XCG, solo se asigna rating emisor si no tiene ya rating por otro motivo. 09/12/2019
     

  VN_NUMERR       			 NUMBER(3);
  VN_COUNT        			 NUMBER(9):=0;
  VV_ROWID        			 VARCHAR2(50);
  VV_MENSAJE      			 VARCHAR2(255);  
  VN_RATIN        			 NUMBER(3);
  VV_RATSOB       			 VARCHAR2(4);
  VV_SRASOB       			 VARCHAR2(2);
  VV_SRASOBCP     			 VARCHAR2(2);
  VN_SP           			 NUMBER(3);
  VN_FITCH        			 NUMBER(3);
  VN_MOODY        			 NUMBER(3);
  VN_DBRS         			 NUMBER(3);
  VV_ECAI         			 VARCHAR2(2);
  VV_ECAICP       			 VARCHAR2(2);
  VN_FECCAL       			 NUMBER(8);
  VV_RATSOBINT    			 FLOAT(126);
  VV_FECSOBINT    			 NUMBER (10);
  VV_RAT_SP       			 VARCHAR2 (10 Byte);
  VV_FEC_SP       			 NUMBER (10);
  VV_RAT_MOODY    			 VARCHAR2 (10);
  VV_RAT_FITCH    			 VARCHAR2 (10);
  VV_FEC_MOODY    			 NUMBER (10);
  VV_FEC_FITCH    			 NUMBER (10);
  PN_FECHA_CIERRA 			 NUMBER(8);
  VV_SRATEXT      			 VARCHAR2(2);
  VV_RAT_EXT      			 VARCHAR2(4);
  VV_RAT_DBRS     			 VARCHAR2(12);
  VN_FECCAL_DATE  			 DATE;
  VV_SRATEXT_EMISOR      VARCHAR2(2);
  VV_RAT_EXT_EMISOR      VARCHAR2(4);
  VN_FECCAL_EMISOR       NUMBER(8);
  VV_ECAI_EMISOR         VARCHAR2(2);

      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      -- Procedimiento interno de carga de las tablas de usuario en el schema de pase
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      PROCEDURE Sp_Carga_Tablas_SAS_en_Schema IS 
      
                BEGIN
      				
      				--
              -- Volcado a BAS_MEN de tabla de usuario MAESTRO_TIPOS_RATING_SAS
              --
      				
              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TIPOS_RATING');

              INSERT INTO BAS_MEN.MAESTRO_TIPOS_RATING
              SELECT * FROM DCRPROP_MENSUAL.MAESTRO_TIPOS_RATING_SAS;

              COMMIT;
              
              --
              -- Volcado a BAS_MEN de tabla de usuario FACTORING_COBERTURA_SAS
              --

              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_FACTORING_COBERTURA');
              
              INSERT INTO BAS_MEN.MAESTRO_FACTORING_COBERTURA
              SELECT * FROM DCRPROP_MENSUAL.FACTORING_COBERTURA_SAS;
              
              COMMIT;
              
              --
              -- Volcado a BAS_MEN de tabla de usuario ASEGURADORAS_SAS
              --
              
              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.ASEGURADORAS');
              
              INSERT INTO BAS_MEN.ASEGURADORAS
              SELECT * FROM DCRPROP_MENSUAL.ASEGURADORAS_SAS;
              
              COMMIT;
              
              --
              -- Volcado a BAS_MEN de tabla de usuario RATINGS_SOBERANOS_SAS
              --
              
              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_SOBERANOS');
              
              INSERT INTO BAS_MEN.RATINGS_SOBERANOS
              SELECT * FROM DCRPROP_MENSUAL.RATINGS_SOBERANOS_SAS;
              
              COMMIT;
              
              --
              -- Volcado a BAS_MEN de tabla de usuario BLOOMBERG_RF_SAS
              --
              
              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BLOOMBERG_RF');
              
              INSERT INTO BAS_MEN.BLOOMBERG_RF
              SELECT * FROM DCRPROP_MENSUAL.BLOOMBERG_RF_SAS;
              
              COMMIT;
              
              
              --
              -- Volcado a BAS_MEN de tabla de usuario RATING_EXTERNO_EEFF_SAS
              --
              
              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATING_EXTERNO_EEFF');

              INSERT INTO BAS_MEN.RATING_EXTERNO_EEFF
              SELECT * FROM DCRPROP_MENSUAL.RATING_EXTERNO_EEFF_SAS;

              COMMIT;
              
              
              --
              -- Volcado a BAS_MEN de tabla de usuario RATINGS_EMISORES_SAS
              --
              
              BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RATINGS_EMISORES');

              INSERT INTO BAS_MEN.RATINGS_EMISORES
              SELECT * FROM DCRPROP_MENSUAL.RATINGS_EMISORES_SAS;

              COMMIT;
              
              --
              -- Tratamiento para cargar los datos de RATINGS_EMISORES
              --
              
              UPDATE BAS_MEN.RATINGS_EMISORES SET RATING_FITCH  = 'SR' WHERE NVL(RATING_FITCH,'#N/A N/A')     IN ('#N/A N/A', '#N/A Sec');  
              UPDATE BAS_MEN.RATINGS_EMISORES SET RATING_MOODYS = 'SR' WHERE NVL(RATING_MOODYS,'#N/A N/A')    IN ('#N/A N/A', '#N/A Sec');  
              UPDATE BAS_MEN.RATINGS_EMISORES SET RATING_SP     = 'SR' WHERE NVL(RATING_SP,'#N/A N/A')        IN ('#N/A N/A', '#N/A Sec');
              UPDATE BAS_MEN.RATINGS_EMISORES SET RATING_DBRS   = 'SR' WHERE NVL(RATING_DBRS,'#N/A N/A')      IN ('#N/A N/A', '#N/A Sec');
              
              --
              -- Tratamiento para cargar los datos de RATINGS_SOBERANOS
              --
              
              UPDATE BAS_MEN.RATINGS_SOBERANOS SET FITCH = 'SR' WHERE NVL(FITCH,'#N/A N/A')     IN ('#N/A N/A', '#N/A Sec');  
              UPDATE BAS_MEN.RATINGS_SOBERANOS SET MOODY = 'SR' WHERE NVL(MOODY,'#N/A N/A')     IN ('#N/A N/A', '#N/A Sec');  
              UPDATE BAS_MEN.RATINGS_SOBERANOS SET SP    = 'SR' WHERE NVL(SP,'#N/A N/A')        IN ('#N/A N/A', '#N/A Sec');
              UPDATE BAS_MEN.RATINGS_SOBERANOS SET DBRS  = 'SR' WHERE NVL(DBRS,'#N/A N/A')      IN ('#N/A N/A', '#N/A Sec');
              
              COMMIT;
              
              --
              -- Tratamiento para cargar los datos para obtención del RATEXT_ISIN.
              --
              
              UPDATE BAS_MEN.BLOOMBERG_RF SET FITCH = 'SR' WHERE FITCH = '#N/A N/A'; 
              UPDATE BAS_MEN.BLOOMBERG_RF SET MOODY = 'SR' WHERE MOODY = '#N/A N/A';  
              UPDATE BAS_MEN.BLOOMBERG_RF SET SP    = 'SR' WHERE SP    = '#N/A N/A';
              
              COMMIT;

              --
              -- Tratamiento para cargar los datos de la EMISION para obtención del RATEXT_ISIN de la emisión.MOODY
              --

              UPDATE BAS_MEN.BLOOMBERG_RF SET FITCH_EMISOR = 'SR' WHERE FITCH_EMISOR = '#N/A N/A';
              UPDATE BAS_MEN.BLOOMBERG_RF SET MOODY_EMISOR = 'SR' WHERE MOODY_EMISOR = '#N/A N/A';
              UPDATE BAS_MEN.BLOOMBERG_RF SET SP_EMISOR    = 'SR' WHERE SP_EMISOR    = '#N/A N/A';

              COMMIT;

              --
              -- Tratamiento para cargar los datos de Ratings Externos EEFF.
              --

              UPDATE BAS_MEN.RATING_EXTERNO_EEFF SET RATING_FITCH = 'SR' WHERE RATING_FITCH = '#N/A N/A';
              UPDATE BAS_MEN.RATING_EXTERNO_EEFF SET RATING_MOODY = 'SR' WHERE RATING_MOODY = '#N/A N/A';
              UPDATE BAS_MEN.RATING_EXTERNO_EEFF SET RATING_SP    = 'SR' WHERE RATING_SP    = '#N/A N/A';
              UPDATE BAS_MEN.RATING_EXTERNO_EEFF SET RATING_DB    = 'SR' WHERE RATING_DB    = '#N/A N/A';              

              COMMIT;

      END;
      --
      -- Fin del Procedimiento interno de carga de las tablas de usuario en el schema de pase
      --
      
      
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      -- Procedimiento interno de Obtención de los Valores Rating Externos
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/
      /** ------------------------------------------------------------------------------------- **/      
      PROCEDURE SP_Obt_Valores_Ratings_Ext ( PE_Id           IN NUMBER
                                           , PE_In_SegmBSIni IN BAS_MEN.BASILEA.IN_SEGMBSINI%TYPE  
                                           , PE_Codigo_BIC   IN BAS_MEN.BASILEA.OR_CODIGO_BIC%TYPE                                          
                                           , PE_SP           IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_FITCH        IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE 
                                           , PE_MOODY        IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_DBRS         IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_Fec_SP       IN NUMBER
                                           , PE_Fec_FITCH    IN NUMBER                                           
                                           , PE_Fec_MOODY    IN NUMBER                                                                                      
                                           , PE_Datos        IN VARCHAR2
                                           , PS_RAT_EXT     OUT BAS_MEN.MAESTRO_TIPOS_RATING.RAT_EXT%TYPE
                                           , PS_FecCal      OUT NUMBER
                                           )
      IS

          VN_SP     BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
          VN_FITCH  BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
          VN_MOODY  BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
          VN_RATIN  BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
          VN_DBRS   BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;

          PS_ECAI   BAS_MEN.ASEGURADORAS.ECAI%TYPE DEFAULT '?';

          /** ------------------------------------------------------------------------------------- **/
          -- Función interna del campo orden según Rating/Calific
          /** ------------------------------------------------------------------------------------- **/
          FUNCTION SF_Obt_Orden_Tipos_Rating ( PE_Calific IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE )
          RETURN BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE
          IS
              PS_Orden BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 23;
          BEGIN

              BEGIN
                SELECT DISTINCT ORDEN
                  INTO PS_Orden
                  FROM BAS_MEN.MAESTRO_TIPOS_RATING
                 WHERE MOODY = PE_Calific
                   AND ROWNUM = 1;
              EXCEPTION
                WHEN OTHERS THEN
                      PS_Orden := 23;
              END;
              
              COMMIT;

              RETURN PS_Orden;
              
          END;

          /** ------------------------------------------------------------------------------------- **/
          -- Función interna de obtención del campo RAT_EXT  según Orden
          /** ------------------------------------------------------------------------------------- **/

          FUNCTION SF_Obt_Rat_Ext ( PE_In_SegmBSIni IN BAS_MEN.BASILEA.IN_SEGMBSINI%TYPE  
                                  , PE_Codigo_BIC   IN BAS_MEN.BASILEA.OR_CODIGO_BIC%TYPE
                                  , PE_Datos        IN VARCHAR2
                                  , PE_Orden        IN BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE 
                                  )
          RETURN BAS_MEN.MAESTRO_TIPOS_RATING.RAT_EXT%TYPE
          IS
              PS_Rat_Ext BAS_MEN.MAESTRO_TIPOS_RATING.RAT_EXT%TYPE DEFAULT 'SR';
          BEGIN

              -- Obt. del Rating de EEFF siempre que no se trate de obtener el Rating Soberano 
              SELECT DISTINCT RAT_EXT
               INTO PS_Rat_Ext
               FROM BAS_MEN.MAESTRO_TIPOS_RATING
              WHERE ORDEN = PE_Orden;
            
             RETURN PS_Rat_Ext;

          EXCEPTION
            WHEN OTHERS THEN 
                PS_Rat_Ext := 'SR';
                RETURN PS_Rat_Ext;

          END;

      /** ------------------------------------------------------------------------------------- **/
      -- Procedimiento interno de Obtención de los Valores Rating Externos
      /** ------------------------------------------------------------------------------------- **/

      --
      -- Inicio del programa principal
      --
      BEGIN

            PS_RAT_EXT   := 'SR';
            PS_ECAI      := '?';

            VN_SP    := SF_Obt_Orden_Tipos_Rating ( PE_SP );
            VN_FITCH := SF_Obt_Orden_Tipos_Rating ( PE_FITCH );
            VN_MOODY := SF_Obt_Orden_Tipos_Rating ( PE_MOODY );
            VN_DBRS  := SF_Obt_Orden_Tipos_Rating ( PE_DBRS );

            BAS_MEN.FNC_MEJOR_RATING ( PE_Id
                                     , VN_SP
                                     , VN_FITCH
                                     , VN_MOODY
                                     , VN_DBRS
                                     , PS_ECAI
                                     );

            IF PS_ECAI = 'SP' THEN
               VN_RATIN  := VN_SP;
               PS_FecCal := PE_Fec_SP;                              
            ELSIF PS_ECAI = 'MD' THEN
               VN_RATIN  := VN_MOODY;
               PS_FecCal := PE_Fec_Moody;               
            ELSIF PS_ECAI = 'FI' THEN
               VN_RATIN  := VN_FITCH;
               PS_FecCal := PE_Fec_Fitch;
            ELSIF PS_ECAI = 'DB' THEN
               VN_RATIN  := VN_DBRS;   
            ELSE
               VN_RATIN  := 23;
            END IF;

            PS_RAT_EXT := SF_Obt_Rat_Ext( PE_In_SegmBSIni
                                        , PE_Codigo_BIC
                                        , PE_Datos
                                        , VN_RATIN 
                                        );

      END;
      --
      -- Fin del Procedimiento interno de Obtención de los Valores Rating Externos
      --


BEGIN

  --
  -- Información del Inicio del proceso en CONTROL_PROCES
  --
  VN_NUMERR:= 1;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
  VALUES ('14_6 FNC_RATING_SOB '||PV_TABLA, SYSDATE, 'INICIADO');
  
  COMMIT;
  
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
  
  commit;
  
  --
  -- Carga de las tablas de usuario en el schema de pase
  --
  VN_NUMERR:= 2;
  VN_COUNT:= 0;

  SP_Carga_Tablas_SAS_en_Schema;
  
  --
  -- Tratamiento para cargar los datos de la EMISION para obtención del RATEXT_ISIN de la emisión.
  --

  VN_NUMERR:= 3;

  FOR CUR IN Cur_Maestro_Rating_SOBERANOS LOOP
  
     UPDATE BAS_MEN.MAESTRO_SOBERANOS
        SET RAT_S_P       = CUR.SP
          , RAT_MOODYS    = CUR.MOODY
          , RAT_FITCH     = CUR.FITCH
          , RAT_DBRS      = CUR.DBRS
      WHERE CODI_NUM_PAIS = CUR.OR_IDPAIS;
     
  END LOOP;
  
  COMMIT;

  VN_NUMERR:= 4;

  --
  -- Actualización de IN_RATEXT - IN_SRATEX - IN_ECAI y el RATEXT_ISIN de la emisión en el MAESTRO_RF y BASILEA.
  --

  FOR CUR IN Cur_Rating_RF LOOP
  
     VV_RAT_EXT := 'NR';
     VV_SRATEXT := 'SR';
     VV_ECAI    := '?';
     VN_FECCAL  := NULL;

     SP_Obt_Valores_Ratings_Ext ( Cur.OR_IDREG
                                , NULL           
                                , NULL                                
                                , Cur.SP
                                , Cur.FITCH
                                , Cur.MOODY
                                , CUR.DBRS
                                , NULL
                                , NULL
                                , NULL
                                , 'RF'
                                , VV_RAT_EXT
                                , VN_FECCAL
                                );
  
      
   UPDATE BAS_MEN.BASILEA
          SET IN_RATEXT_ISIN      = VV_RAT_EXT
        WHERE OR_IDREG = CUR.OR_IDREG;
  
  END LOOP;

  COMMIT;
  VN_NUMERR:= 5;
  
  --
  -- Actualización de IN_RATEXT - IN_SRATEX - IN_ECAI y el RATEXT_ISIN de la emisión en el MAESTRO_RF y BASILEA.
  --

  FOR CUR IN Cur_Rating_RF_EMISOR LOOP
     
     VV_RAT_EXT_EMISOR := 'NR';
     VV_SRATEXT_EMISOR := 'SR';
     VV_ECAI_EMISOR    := '?';
     VN_FECCAL_EMISOR  := NULL;
                                
     SP_Obt_Valores_Ratings_Ext ( Cur.OR_IDREG
                                 , NULL 
                                 , NULL
                                 , Cur.SP_EMISOR
                                 , Cur.FITCH_EMISOR
                                 , Cur.MOODY_EMISOR
                                 , Cur.DBRS_EMISOR
                                 , NULL
                                 , NULL
                                 , NULL
                                 , 'RF_EMISION'
                                 , VV_RAT_EXT_EMISOR
                                 , VN_FECCAL_EMISOR
                                 );
  
      
     UPDATE BAS_MEN.BASILEA
        SET IN_RATEXT = VV_RAT_EXT_EMISOR
      WHERE OR_IDREG = CUR.OR_IDREG;
  
  END LOOP;

  COMMIT;
  VN_NUMERR:= 6;
  
  --
  -- Tabla Auxiliar para almacenar los Ratings de los paises que hay en BBDD (BASILEA)  
  --
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAE_RATING_PAIS_BASILEA');
   
  FOR CUR IN Cur_Obt_RatSob_Paises  LOOP
  
     VN_COUNT     := VN_COUNT + 1;
     VV_ROWID     := CUR.OR_IDPAIS;
     VV_FECSOBINT := 9999;
     VV_RATSOBINT := 99;
     VV_RAT_SP    := 'SR';
     VV_RAT_FITCH := 'SR';
     VV_RAT_MOODY := 'SR';
     VV_RAT_DBRS  := 'SR';
     VV_RATSOB    := 'NR';
     VV_SRASOB    := 'SR';
     VV_ECAI      := '?';
     VN_FECCAL    := NULL; -- No interviene en esta actualización
  
     
     SP_Obt_Valores_Ratings_Ext ( Cur.OR_IDPAIS
                                , NULL 
                                , NULL
                                , Cur.RAT_SP
                                , Cur.RAT_FITCH
                                , Cur.RAT_MOODY
                                , Cur.RAT_DBRS
                                , NULL
                                , NULL
                                , NULL
                                , 'RATSOBBASI'
                                , VV_RATSOB --VV_RAT_EXT
                                , VN_FECCAL                               
                                );
  
     INSERT INTO BAS_MEN.MAE_RATING_PAIS_BASILEA 
     VALUES ( Cur.OR_IDPais
            , Cur.RAT_SP   , NULL
            , Cur.RAT_MOODY, NULL
            , Cur.RAT_FITCH, NULL 
            , Cur.RAT_DBRS
            , VV_RATSOB, NULL
            , Cur.CODI_SOLVENCIA
           );                            
  
  END LOOP;
  
  COMMIT;
  VN_NUMERR:= 7;
  
  --
  -- Update BASILEA por paises pegandole los ratings de la tabla auxiliar de paises.
  --  
   
  MERGE /*+ parallel(Upd 8) */ 
   INTO BAS_MEN.BASILEA Upd
  USING BAS_MEN.MAE_RATING_PAIS_BASILEA Sel
     ON (Upd.OR_IDPAIS = Sel.OR_IDPAIS)
   WHEN MATCHED THEN
  UPDATE
     SET Upd.IN_RATSOB    = Sel.RATSOB;
  
  commit;
  
  VN_NUMERR:= 8;

  MERGE 
   INTO BAS_MEN.MAESTRO_SOBERANOS Upd
  USING BAS_MEN.MAE_RATING_PAIS_BASILEA Sel
     ON (Upd.CODI_NUM_PAIS = Sel.OR_IDPAIS)
   WHEN MATCHED THEN
  UPDATE
     SET Upd.RAT_INT = Sel.RATSOB;                                                         

  COMMIT;

  VN_NUMERR:= 10;
  
  MERGE 
	 INTO BAS_MEN.MAESTRO_FACTORING_COBERTURA dest
	USING DCRPROP_MENSUAL.ASEGURADORAS_SAS  src    
		 ON (dest.nombre_aseguradora = src.OR_NOMPER)
	 WHEN MATCHED THEN 
	UPDATE 
		 SET  dest.RAT_SP = src.RAT_SP,
	   			dest.RAT_MOODY = src.RAT_MOODY,
	   			dest.RAT_FITCH = src.RAT_FITCH,
	        dest.RAT_DBRS = src.RAT_DBRS;
                
	COMMIT;
	VN_NUMERR:= 11;

  UPDATE BAS_MEN.MAESTRO_FACTORING_COBERTURA
     SET RAT_SP = (SELECT DISTINCT RAT_S_P FROM BAS_MEN.MAESTRO_SOBERANOS WHERE CODI_NUM_PAIS = 724)
       , RAT_MOODY = (SELECT DISTINCT RAT_MOODYS FROM BAS_MEN.MAESTRO_SOBERANOS WHERE CODI_NUM_PAIS = 724)
       , RAT_FITCH = (SELECT DISTINCT RAT_FITCH FROM BAS_MEN.MAESTRO_SOBERANOS WHERE CODI_NUM_PAIS = 724)
   WHERE IN_SEGSTDA = 'Soberanos';
  
  COMMIT;
  
  VN_NUMERR:= 12;

  FOR CUR IN Cur_Rating_Factoring_Cobertura LOOP
  
     VV_RAT_EXT   := 'SR';
     VV_SRATEXT   := 'SR';
     VV_ECAI      := '?';
  
      SP_Obt_Valores_Ratings_Ext ( 0
                                 , null --Cur.IN_SegmBSIni 
                                 , null --Cur.OR_Codigo_BIC
                                 , Cur.SP
                                 , cur.fitch                 -- Fitch
                                 , Cur.MOODY
                                 , cur.dbrs               -- DBRS
                                 , NULL               
                                 , NULL                                                
                                 , NULL               
                                 , 'ASEG'
                                 , VV_RAT_EXT
                                 , VN_FECCAL
                                 );
      
      /*UPDATE BAS_MEN.MAESTRO_FACTORING_COBERTURA
         SET RATEXT_AVALISTA = VV_RAT_EXT
       WHERE OR_CLUNICONTR = CUR.OR_CLUNICONTR;*/
	   
	   /*INI 11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */

    IF CUR.OR_CLUNICONTR IS NOT NULL AND CUR.OR_REFOPE IS NOT NULL
    THEN
        UPDATE BAS_MEN.MAESTRO_FACTORING_COBERTURA
             SET RATEXT_AVALISTA = VV_RAT_EXT
           WHERE OR_CLUNICONTR   = CUR.OR_CLUNICONTR
         AND OR_REFOPE       = CUR.OR_REFOPE;

    ELSIF CUR.OR_CLUNICONTR IS NOT NULL AND CUR.OR_REFOPE IS NULL
    THEN
      UPDATE BAS_MEN.MAESTRO_FACTORING_COBERTURA
       SET RATEXT_AVALISTA = VV_RAT_EXT
       WHERE OR_CLUNICONTR   = CUR.OR_CLUNICONTR;

    END IF;
	  
   /*FIN 11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */
  
  END LOOP;
  
  COMMIT;
  
  VN_NUMERR:= 13;

  --MERGE /*+ full(upd) parallel(Upd 8) */ 
   /*INTO BAS_MEN.BASILEA Upd
  USING BAS_MEN.MAESTRO_FACTORING_COBERTURA Sel
     ON (FLOOR(sel.OR_CLUNICONTR/100)= upd.OR_CLUNICONTR and RATEXT_AVALISTA <> 'NR')
   WHEN MATCHED THEN
  UPDATE
     SET Upd.IN_RATEXTAVA2    = Sel.RATEXT_AVALISTA;*/
	 
	/*INI 11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */

  MERGE /*+ full(upd) parallel(Upd 8) */
   INTO BAS_MEN.BASILEA Upd
  USING BAS_MEN.MAESTRO_FACTORING_COBERTURA Sel
     ON ( (
            ( FLOOR(sel.OR_CLUNICONTR/100)= upd.OR_CLUNICONTR AND sel.OR_REFOPE = upd.OR_REFOPE AND sel.OR_REFOPE IS NOT NULL )
           OR
            ( FLOOR(sel.OR_CLUNICONTR/100)= upd.OR_CLUNICONTR AND sel.OR_REFOPE IS NULL )
          )
        AND RATEXT_AVALISTA <> 'NR'
        )
   WHEN MATCHED THEN
  UPDATE
     SET Upd.IN_RATEXTAVA2    = Sel.RATEXT_AVALISTA;
  
  /*FIN 11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */
  
  commit;
  
  VN_NUMERR:= 14;

  --
  -- Tabla para almacenar los Ratings externos de EEFF (Lo utiliza el usuario) 
  --
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_RATING_EXTERNO_EEFF');
  --
  -- Obtención de los datos de rating externos dados por el usuario
  --
  FOR Cur_Rat_Ext_EEFF IN Cursor_Rat_Ext_EEFF LOOP
     --
     SP_Obt_Valores_Ratings_Ext ( Cur_Rat_Ext_EEFF.OR_IDREG
                                , NULL             -- IN_SegmBSIni
                                , Cur_Rat_Ext_EEFF.CODIGO_BIC
                                , Cur_Rat_Ext_EEFF.Rating_SP
                                , Cur_Rat_Ext_EEFF.Rating_Fitch
                                , Cur_Rat_Ext_EEFF.Rating_MOODY
                                , Cur_Rat_Ext_EEFF.Rating_DB
                                , TO_NUMBER(TO_CHAR(TRUNC(Cur_Rat_Ext_EEFF.DATE_SP),'YYYYMMDD'))
                                , TO_NUMBER(TO_CHAR(TRUNC(Cur_Rat_Ext_EEFF.DATE_Fitch),'YYYYMMDD'))
                                , TO_NUMBER(TO_CHAR(TRUNC(Cur_Rat_Ext_EEFF.DATE_Moody),'YYYYMMDD'))
                                , 'RATEEFF'
                                , VV_RAT_EXT
                                , VN_FECCAL
                                );


     IF VN_FECCAL IS NOT NULL THEN
        VN_FECCAL_DATE := TO_DATE(TO_CHAR(VN_FECCAL),'YYYYMMDD');
     ELSE
        VN_FECCAL_DATE := TO_DATE('19000101', 'YYYYMMDD');
     END IF;
     
     INSERT INTO BAS_MEN.MAESTRO_RATING_EXTERNO_EEFF ( BIC, NOMBRE, RATING, FECHA_RATING )
     VALUES (Cur_Rat_Ext_EEFF.CODIGO_BIC, Cur_Rat_Ext_EEFF.NOMBRE,  VV_RAT_EXT, VN_FECCAL_DATE);
     -- 
     
  END LOOP;
  --
  COMMIT;

  VN_NUMERR:= 15;

  FOR CUR IN Cur_Rating_EEFF LOOP
  
       UPDATE BAS_MEN.BASILEA
          SET IN_RATEXT = CUR.RATING
        WHERE OR_IDREG  = CUR.OR_IDREG;
  
  END LOOP;

  COMMIT;
  VN_NUMERR:= 16;
  
  --
  -- Actualización de IN_RATEXT - IN_SRATEX - IN_ECAI y el RATEXT_ISIN de la emisión de FREDDIE MAC, FANNIE MAE y GINNIE MAE
  --

  FOR CUR IN Cur_Rating_Emisores LOOP
     
     VV_RAT_EXT_EMISOR := 'NR';
     VV_SRATEXT_EMISOR := 'SR';
     VV_ECAI_EMISOR    := '?';
     VN_FECCAL_EMISOR  := NULL;
                                
     SP_Obt_Valores_Ratings_Ext ( Cur.OR_IDREG
                                 , NULL 
                                 , NULL
                                 , Cur.RATING_SP
                                 , Cur.RATING_FITCH
                                 , Cur.RATING_MOODYS
                                 , Cur.RATING_DBRS
                                 , NULL
                                 , NULL
                                 , NULL
                                 , 'EMISORES'
                                 , VV_RAT_EXT_EMISOR
                                 , VN_FECCAL_EMISOR
                                 );
  
      
       UPDATE BAS_MEN.BASILEA
          SET IN_RATEXT = VV_RAT_EXT_EMISOR  -- XCG. se actualiza el ratext, no el ratext del isin. 12/2018
        WHERE OR_IDREG = CUR.OR_IDREG;
  
  END LOOP;

  COMMIT;
	VN_NUMERR:= 17;
	
  FOR CUR IN Cur_Rating_Aseguradoras LOOP
  
      VV_RAT_EXT   := 'NR';
      VV_SRATEXT   := 'SR';
      VV_ECAI      := '?';
      VN_FECCAL    := NULL; -- No interviene en esta actualización
  
      SP_Obt_Valores_Ratings_Ext ( Cur.OR_IDREG
                                 , NULL            -- IN_SegmBSIni 
                                 , NULL            -- OR_Codigo_BIC                                 
                                 , Cur.SP
                                 , 23              -- Fitch
                                 , Cur.MOODY
                                 , NULL            --.DBRS
                                 , NULL
                                 , NULL
                                 , NULL
                                 , 'ASEG'
                                 , VV_RAT_EXT
                                 , VN_FECCAL
                                 );
  
      UPDATE BAS_MEN.BASILEA
         SET IN_RATEXT = VV_RAT_EXT
       WHERE OR_IDREG = CUR.OR_IDREG;
  
       UPDATE BAS_MEN.ASEGURADORAS
         SET RATEXT  = VV_RAT_EXT
       WHERE OR_IDPERS = CUR.OR_IDPERS;
  
  END LOOP;
  
  COMMIT;

  VN_NUMERR:= 18;
  
  FOR CUR IN Cur_Rating_ASEG_OFEX LOOP
  
      VV_RAT_EXT   := 'NR';
      VV_SRATEXT   := 'SR';
      VV_ECAI      := '?';                          
      VN_FECCAL    := NULL; -- No interviene en esta actualización
  
      SP_Obt_Valores_Ratings_Ext ( Cur.OR_IDREG
                                 , NULL              -- IN_SegmBSIni 
                                 , NULL              -- OR_Codigo_BIC                                 
                                 , Cur.SP
                                 , 23               -- Fitch
                                 , Cur.MOODY
                                 , NULL             -- DBRS
                                 , NULL
                                 , NULL
                                 , NULL
                                 , 'ASEG_OFEX'
                                 , VV_RAT_EXT
                                 , VN_FECCAL
                                 );
   
      UPDATE BAS_MEN.BASILEA
         SET IN_RATEXT = VV_RAT_EXT
       WHERE OR_IDREG = CUR.OR_IDREG;
  
      UPDATE BAS_MEN.aseguradoras
         SET RATEXT  = VV_RAT_EXT
           , SRATEXt = VV_SRATEXT
           , ECAI    = VV_ECAI
       WHERE OR_IDPERS = CUR.OR_IDPERS;
  
  END LOOP;
  
  COMMIT;
  
  VN_NUMERR:= 19;   
   
   UPDATE BAS_MEN.CONTROL_PROCES
      SET ESTAT = 'FINALIZADO',
          DATA_FIN = SYSDATE,
          FINALITZAT = 'OK',
          REG_UPD_OK = VN_COUNT
    WHERE PROCES = '14_6 FNC_RATING_SOB '||PV_TABLA
      AND ESTAT  = 'INICIADO';
  
  
EXCEPTION
    WHEN OTHERS THEN
       VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
       UPDATE BAS_MEN.CONTROL_PROCES
          SET ESTAT = 'FINALIZADO',
              DATA_FIN = SYSDATE,
              FINALITZAT = 'KO',
              ERROR_ORAC = VV_MENSAJE,
              REG_UPD_OK = VN_COUNT,
              ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
              NUM_ERROR  = VN_NUMERR
        WHERE PROCES = '14_6 FNC_RATING_SOB '||PV_TABLA
          AND ESTAT  = 'INICIADO';
     COMMIT;
  
     RAISE;
END;

/

create or replace PROCEDURE BAS_MEN.BASI_RATINGS_EXTERNOS_Y_PAISES
IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VV_RETORNO    VARCHAR2(2):='OK';
   
   ERR_DIFERENTES EXCEPTION;
   VV_OR_IDREG  NUMBER(12);

BEGIN

COMMIT;

EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM) 
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';
    
  BAS_MEN.FNC_VALIDA_RATINGS();
  COMMIT;
     
  BAS_MEN.FNC_RATING_SOB (VV_TABLA); 
  COMMIT; 
  
END;

/

--bka20086=====================================================================================================
Select 'bka20086' As Compilando from dual;

create or replace PROCEDURE BAS_MEN.UPDATE_PROCESO (PROCESO IN VARCHAR2)
IS

/*************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA      */
/*************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA                */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA                         */
/*      TABLAS de updates de usuario  en Basilea:                                                 */
/*                                        FILTRO: DCRPROP_MENSUAL.UPDATE_BASILEA_FILTRO_XX_SAS    */
/*                                      SEGMENTO: DCRPROP_MENSUAL.UPDATE_BASILEA_SEGMENTO_XX_SAS  */
/*                                           EAD: DCRPROP_MENSUAL.UPDATE_BASILEA_EAD_XX_SAS       */
/*                                       PRE_MET: DCRPROP_MENSUAL.UPDATE_BASILEA_PRE_MET_XX_SAS   */
/**************************************************************************************************/
    --
    -- Variables del proceso principal.
    --
    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(256)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT '';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';

    ncount                  NUMBER                  DEFAULT 0;
    TABLA_SAS               VARCHAR2(30)            DEFAULT '';

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
          where EN_PROCESO = PROCESO
        order by TABLA;

BEGIN

    v_NumErr := 0;

    ROLLBACK;
    -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.


    FOR C_UPD IN Cursor_Update LOOP
        --
        In_Tabla_Orig := C_UPD.TABLA;
        --
        Cte_Proces          := 'UPDATE PROCESO Tabla_Orig: '|| In_Tabla_Orig;
        v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
        --
        -- Información de Inicio en Control del Proceso.
        --
        v_NumErr := 1;
        INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES (Cte_Proces, SYSDATE, 'INICIADO');
        COMMIT;

        --
        -- Insersión en tabla de descartes
        --
        v_Numerr := 2;
        v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA SELECT /*+ FULL(A) PARALLEL (A 4)*/ ''' ||  v_Tabla_Orig   || ''' ,sysdate, A.*  FROM '||v_Tabla_Base||' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Eliminación de registros en Basilea.
        --
        v_Numerr := 3;
        --
        v_Sentencia_dinamica := 'DELETE /*+ PARALLEL (A 8)*/ ' || v_Tabla_Base || ' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Insersión de registros en Basilea.
        --
        v_Numerr := 4;
        v_Sentencia_dinamica := 'INSERT /*+ FULL(A) PARALLEL (A 8)*/ INTO ' ||v_Tabla_Base || ' A SELECT * FROM ' || v_Tabla_Orig;
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        v_RegIns := SQL%ROWCOUNT;
        --
        COMMIT;
        --
        -- Insercción de registros de la SAS origen en tabla final.
        --
        v_Numerr := 7;
        --
        v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATES_BASILEA SELECT /*+ PARALLEL (A 8) */ ''' ||  v_Tabla_Orig   || ''' AS TABLA_ORIGEN ,sysdate, A.*  FROM '||v_Tabla_Base||' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Actualización del Control del Proceso.
        --
        v_Numerr := 10;
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
           , DATA_FIN    = SYSDATE
           , FINALITZAT  = v_Fin_Proc
           , REG_INS_OK  = v_RegIns
           , ERROR_ORAC  = v_Mensaje_Err
         WHERE PROCES  = Cte_Proces
           AND ESTAT   = 'INICIADO';
        COMMIT;
        --
    END LOOP;

 EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        --
        v_Fin_Proc   := 'KO';
        v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);
        --
        --      Actualización del Control del Proceso.
        --
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = v_Fin_Proc
             , ERROR_ORAC  = v_Mensaje_Err
             , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
             , NUM_ERROR   = v_NumErr
          WHERE PROCES  = Cte_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;
        RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'UPDATE_PROCESO';

/* 22/09/2020 RMR TM-2567
Primero de los 2 procesos añadidos para introducir en la base un nuevo registro con el objetivo
de automatizar un ajuste que hacía mensualmente negocio en las provisiones phase in. La segunda
parte se realiza tras STDAn en update pre corep (BAS_MEN.FNC_AJUSTE_PROV_PHASEIN2)*/
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_AJUSTE_PROV_PHASEIN IS

    vor_idreg_auto   NUMBER(12)              DEFAULT 0;
    vmax_or_idreg    NUMBER(12)              DEFAULT 0;
    vor_idreg_ajuste NUMBER(12)              DEFAULT 0;
    vdot_conso       FLOAT(126)              DEFAULT 0;
    vdot_ind         FLOAT(126)              DEFAULT 0;
    PN_FECPRO        NUMBER(6)               DEFAULT 0;
    --
    Cte_Proces       VARCHAR2(256)           DEFAULT 'FNC_AJUSTE_PROV_PHASEIN';
    vNumErr          NUMBER(2)               DEFAULT 1;
    v_Msg_Err        VARCHAR2(255)           DEFAULT '';

BEGIN
  -- Cierre de cualquier tx abierta
  ROLLBACK;
  -- Habilitación paralelismo
  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  --Iniciamos log del proceso
  BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

  --Recuperamos la fecha del pase actual
  BEGIN
    SELECT TO_NUMBER(substr(VALPARM,1,6))
      INTO PN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB   = 81
       AND CODPARM  = '0001'
       AND SECPARM  = '01';
  EXCEPTION
       WHEN OTHERS THEN
           RAISE;
   END;

  --Averiguamos el maximo or_idreg actual, en la base
  vNumErr := 1;

  SELECT /*+ FULL (a) PARALLEL (a, 8) */ MAX(OR_IDREG)
    INTO vmax_or_idreg
    FROM BAS_MEN.BASILEA a;

  -- Si no es la primera ejecución, buscamos el or_idreg para mantenerlo
  vNumErr := 2;

  BEGIN
    SELECT /*+ FULL (a) PARALLEL (a, 4) */ OR_IDREG
      INTO vor_idreg_ajuste
      FROM BAS_MEN.BASILEA a
     WHERE OR_NOMPER = 'AUTO: Ajuste Provisiones Phasein';
  EXCEPTION
       WHEN OTHERS THEN
           vor_idreg_ajuste := vmax_or_idreg+1; /* Si es la primera ejecución, no lo encontrará y pondrá el maximo de BASILEA + 1*/
  END;

  vNumErr := 3;

  DELETE /*+ PARALLEL (a, 8) */ FROM BAS_MEN.BASILEA a
  WHERE OR_IDREG = vor_idreg_ajuste;
  COMMIT;

  vNumErr := 4;

  INSERT INTO BAS_MEN.BASILEA (
        OR_IDREG, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, OR_TITULARITAT, OR_NOMPER, OR_COISIN, OR_PERSON, OR_IDECNO
        , OR_IDCNAE, OR_IDCNAEREL, OR_PROCED, OR_NUMOFI, OR_REFOPE, OR_REFOPE2, OR_TIPOPE, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES, IN_ANTIGU, OR_SEGGES, OR_CODGAR, OR_TIPAVA
        , OR_TIPGAR, OR_CODTIT, OR_DESTPR, OR_TIPOFI, OR_TIPOPR, OR_IMPLTV, OR_VALTAS, OR_CONCED, OR_IDPAIS, IN_ITITSN, IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND, OR_EPIIND
        , FI_EPICON, FI_PORCON, OR_DIVISA, FI_TIPEXP, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_FAIRVA, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON
        , OR_REPOSCON, OR_AJUVALCON, OR_FAIRVACON, IN_TIPDER, IN_FAIRVABO, IN_FAIRVABOCON, FI_SUMEXP, IN_VTAGRU, IN_VTAGRU_CONS, OR_RATINT, OR_MODRAT0, OR_SEGRIE, OR_PUNT0, OR_SITUAC0, OR_FECPUN0
        , IN_SEGMBSINI, IN_SEGMBS0, IN_SEGMBS1, IN_SEGMBS2, IN_SEGMBS, IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT, IN_RATSOB, FI_ELIMI1, IN_METODE, IN_SUCEPT, IN_SEG_HIP, OR_FECPRREV, OR_CLUNIENT
        , OR_CLUNIPROD, OR_CLUNICONTR, OR_CLUNICUENT, OR_CLUNIOPERA, FI_MESCURA, OR_FECCAR, OR_PRESTMIG, OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB, FI_EADAIRB, OR_CNAESCPCB, FI_EADCONAIRB, FI_CCFAIRB
        , IN_TIPOREG, IN_GRUP_TIPIDE, IN_GRUP_IDPER, IN_NOM_GRUP, IN_IDCALIFIC, OR_PUNTSCO, OR_FECSCO, OR_NUMSCOFIN, IN_INDCURA, OR_PROVAPL, OR_INDHOLDING, OR_VERSPREST, OR_DESCTAVISTA, OR_CODPRODO, OR_CODISO
        , OR_PRODERIV, IN_ACTIVO, OR_NUMFINREG, OR_TIPOBJETO, OR_SEGFAC, OR_SEGFIC, OR_IDSITUAC, IN_IDCALIFICREL, OR_SUBSTDA, OR_MODSCO, OR_FINABE, OR_TIPDERIV, OR_NUMPERCTAV, OR_CNAECTAVIS, OR_CNOCTAVIS
        , OR_OPCVEN, IN_METODE_1, OR_CODIGO_BIC, IN_EXISTENCIAS, IN_ACTIVO_CIR, IN_FECMORA, OR_CTACLI, IN_NUMEMP, IN_HIPOAVAL, IN_NIFGRUPCON, IN_PYME, OR_INDHOLDINGREL, OR_SEGFIC2, IN_PRESTPERCENT, IN_CAT_BDE_N
        , OR_CLUNIENT_CUENT, OR_CLUNIPROD_CUENT, OR_CLUNIENT_OPERA, OR_CLUNIPROD_OPERA, IN_OPER_MIGR, IN_IDGRUPO, MARCA_EPA, OR_FECDEU, OR_NUMPERSONA, OR_PERSCTAVISTA, OR_TITUCTAVISTA, IN_FACTCOR, OR_SITCON, IN_RATEXT_ISIN, IN_REFINAN
        , ID_AMBIT_DRC, IN_ACTIVO_CONS, OR_CONTRATO_GARANTIA, OR_IDMES, OR_NIFCIFAVA,OR_PESOW, OR_PUNTGRUP, OR_MARCONOT, OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS, INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP
        , FECHFINSIMP, IN_DEFAULT, OR_MODGRUP)
  SELECT
    vor_idreg_ajuste,'00-' as OR_IDPERS,'0' as OR_TIPIDE,'?' as OR_NIFCIF,'0' as OR_TIPIDEIBM,'?','0','AUTO: Ajuste Provisiones Phasein','?','0','999'
    ,'0','0','?','0','0','?','?','0','0','99999999','99999999','0','99','FIC00500','0'
    ,'?','99','0','?','0','9999','0','0','724','NO','NO','GE','81','9999999999999','010080070000000000'
    ,'010050205110100000000000000000','1','EUR','Drawn','0','0','0','0','0','0','0','0','0','0','0'
    ,'0','0','0','?','0','0','0','0','0','99','?','?','9999','?','9999'
    ,'XXX','?','?','?','Otros Activos','NR','SR','NR','A','NO','STDA','?','N','0','?'
    ,'?','0','0','0','0','0','0','0','?','0','0','0','0','0','1'
    ,'IN','0','?','?','0','9999','9999','?','?','0','N','99999','?','?','?'
    ,'?','0','?','0','99','?','0','0','?','?','?','?','0','0','0'
    ,'?','?','?','0','0','?','0','0','NO','?','N','?','?','999','9999'
    ,'?','?','?','?','?','0','NO','0','0','0','0','1','?','NR','0'
    ,'0','0','0', PN_FECPRO,'?','0','0','?','?','0','0','N','?','00','?'
    ,'?','N',null
  FROM DUAL;
  COMMIT;

  vNumErr := 5;
  BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
  COMMIT;

 EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Msg_Err, vNumErr);

      RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_AJUSTE_PROV_PHASEIN';


/* 21/01/2021 NAV - Nuevo ajuste INTANGIBLE */
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_AJUSTE_INTANGIBLES IS

    vor_idreg_auto   NUMBER(12)              DEFAULT 0;
    vmax_or_idreg    NUMBER(12)              DEFAULT 0;
    vor_idreg_ajuste NUMBER(12)              DEFAULT 0;
    vdot_conso       FLOAT(126)              DEFAULT 0;
    vdot_ind         FLOAT(126)              DEFAULT 0;
    PN_FECPRO        NUMBER(6)               DEFAULT 0;
    --
    Cte_Proces       VARCHAR2(256)           DEFAULT 'FNC_AJUSTE_INTANGIBLES';
    vNumErr          NUMBER(2)               DEFAULT 1;
    v_Msg_Err        VARCHAR2(255)           DEFAULT '';

    cursor c1 is
      SELECT *
        FROM BAS_MEN.SALDO_AJUSTE_INTANGIBLE;

BEGIN
    -- Cierre de cualquier tx abierta
    ROLLBACK;
    -- Habilitación paralelismo
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    --Iniciamos log del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

    --Recuperamos la fecha del pase actual
    BEGIN
      SELECT TO_NUMBER(substr(VALPARM,1,6))
        INTO PN_FECPRO
        FROM BAS_MEN.PARAMETROS_PROCESO
       WHERE CODCSB   = 81
         AND CODPARM  = '0001'
         AND SECPARM  = '01';
    EXCEPTION
         WHEN OTHERS THEN
             RAISE;
     END;

    vNumErr := 1;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SALDO_AJUSTE_INTANGIBLE');
    INSERT INTO BAS_MEN.SALDO_AJUSTE_INTANGIBLE
      SELECT * FROM DCRPROP_MENSUAL.SALDO_AJUSTE_INTANGIBLE_SAS;

    COMMIT;
    vNumErr := 2;

    --Averiguamos el maximo or_idreg actual, en la base
    SELECT /*+ FULL (a) PARALLEL (a, 8) */ MAX(OR_IDREG)
      INTO vmax_or_idreg
      FROM BAS_MEN.BASILEA a;

    FOR CUR IN c1 LOOP

        vNumErr := 5;

        -- Si no es la primera ejecución, buscamos el or_idreg para mantenerlo
        BEGIN
          SELECT /*+ FULL (a) PARALLEL (a, 4) */ OR_IDREG
            INTO vor_idreg_ajuste
            FROM BAS_MEN.BASILEA a
           WHERE OR_NOMPER = 'AUTO: Ajuste Intangibles'
             AND OR_ENTITY = cur.OR_ENTITY;
        EXCEPTION
             WHEN OTHERS THEN
                 vmax_or_idreg := vmax_or_idreg + 1;/* Si es la primera ejecución, no lo encontrará y pondrá el maximo de BASILEA + 1*/
                 vor_idreg_ajuste := vmax_or_idreg;
        END;

        vNumErr := 10;

        DELETE /*+ PARALLEL (a, 8) */ FROM BAS_MEN.BASILEA a
        WHERE OR_IDREG = vor_idreg_ajuste;
        COMMIT;

        vNumErr := 15;

        INSERT INTO BAS_MEN.BASILEA (
                OR_IDREG, OR_IDPERS, OR_TIPIDE, OR_NIFCIF, OR_TIPIDEIBM, OR_NIFCIFIBM, OR_TITULARITAT, OR_NOMPER, OR_COISIN, OR_PERSON, OR_IDECNO
              , OR_IDCNAE, OR_IDCNAEREL, OR_PROCED, OR_NUMOFI, OR_REFOPE, OR_REFOPE2, OR_TIPOPE, OR_FECOPE, OR_FECVTO, OR_VIDINI, OR_VIDRES, IN_ANTIGU, OR_SEGGES, OR_CODGAR, OR_TIPAVA
              , OR_TIPGAR, OR_CODTIT, OR_DESTPR, OR_TIPOFI, OR_TIPOPR, OR_IMPLTV, OR_VALTAS, OR_CONCED, OR_IDPAIS, IN_ITITSN, IN_INDMOR, OR_IDPRO1, OR_ENTITY, OR_CTAIND, OR_EPIIND
              , FI_EPICON, FI_PORCON, OR_DIVISA, FI_TIPEXP, OR_DISPTO, OR_DISBLE, OR_AVALES, OR_FUTURS, OR_REPOS, OR_AJUVAL, OR_FAIRVA, OR_DISPTOCON, OR_DISBLECON, OR_AVALESCON, OR_FUTURSCON
              , OR_REPOSCON, OR_AJUVALCON, OR_FAIRVACON, IN_TIPDER, IN_FAIRVABO, IN_FAIRVABOCON, FI_SUMEXP, IN_VTAGRU, IN_VTAGRU_CONS, OR_RATINT, OR_MODRAT0, OR_SEGRIE, OR_PUNT0, OR_SITUAC0, OR_FECPUN0
              , IN_SEGMBSINI, IN_SEGMBS0, IN_SEGMBS1, IN_SEGMBS2, IN_SEGMBS, IN_RATEXTAVA2, IN_SRATIN, IN_RATEXT, IN_RATSOB, FI_ELIMI1, IN_METODE, IN_SUCEPT, IN_SEG_HIP, OR_FECPRREV, OR_CLUNIENT
              , OR_CLUNIPROD, OR_CLUNICONTR, OR_CLUNICUENT, OR_CLUNIOPERA, FI_MESCURA, OR_FECCAR, OR_PRESTMIG, OR_CLAVISO, OR_FECALTBLO, OR_TITUSCPCB, OR_PERSONSCPCB, FI_EADAIRB, OR_CNAESCPCB, FI_EADCONAIRB, FI_CCFAIRB
              , IN_TIPOREG, IN_GRUP_TIPIDE, IN_GRUP_IDPER, IN_NOM_GRUP, IN_IDCALIFIC, OR_PUNTSCO, OR_FECSCO, OR_NUMSCOFIN, IN_INDCURA, OR_PROVAPL, OR_INDHOLDING, OR_VERSPREST, OR_DESCTAVISTA, OR_CODPRODO, OR_CODISO
              , OR_PRODERIV, IN_ACTIVO, OR_NUMFINREG, OR_TIPOBJETO, OR_SEGFAC, OR_SEGFIC, OR_IDSITUAC, IN_IDCALIFICREL, OR_SUBSTDA, OR_MODSCO, OR_FINABE, OR_TIPDERIV, OR_NUMPERCTAV, OR_CNAECTAVIS, OR_CNOCTAVIS
              , OR_OPCVEN, IN_METODE_1, OR_CODIGO_BIC, IN_EXISTENCIAS, IN_ACTIVO_CIR, IN_FECMORA, OR_CTACLI, IN_NUMEMP, IN_HIPOAVAL, IN_NIFGRUPCON, IN_PYME, OR_INDHOLDINGREL, OR_SEGFIC2, IN_PRESTPERCENT, IN_CAT_BDE_N
              , OR_CLUNIENT_CUENT, OR_CLUNIPROD_CUENT, OR_CLUNIENT_OPERA, OR_CLUNIPROD_OPERA, IN_OPER_MIGR, IN_IDGRUPO, MARCA_EPA, OR_FECDEU, OR_NUMPERSONA, OR_PERSCTAVISTA, OR_TITUCTAVISTA, IN_FACTCOR, OR_SITCON, IN_RATEXT_ISIN, IN_REFINAN
              , ID_AMBIT_DRC, IN_ACTIVO_CONS, OR_CONTRATO_GARANTIA, OR_IDMES, OR_NIFCIFAVA,OR_PESOW, OR_PUNTGRUP, OR_MARCONOT, OR_MARCONDV, OR_FECTAS, IN_NUMEMP_CONS, INDCURA, FECHINICURA, TIPODEFAULT, FECHINISIMP
              , FECHFINSIMP, IN_DEFAULT, OR_MODGRUP)
        SELECT
               vor_idreg_ajuste as OR_IDREG, '00-' as OR_IDPERS, '0' as OR_TIPIDE, '?' as OR_NIFCIF, '0' as OR_TIPIDEIBM, '?' as OR_NIFCIFIBM, '0' as OR_TITULARITAT
              , 'AUTO: Ajuste Intangibles' as OR_NOMPER, '?' as OR_COISIN, '0' as OR_PERSON, '999' as OR_IDECNO, '0' as OR_IDCNAE, '0' as OR_IDCNAEREL, '?' as OR_PROCED
              , '0' as OR_NUMOFI, '0' as OR_REFOPE, '?' as OR_REFOPE2, '?' as OR_TIPOPE, '0' as OR_FECOPE, '0' as OR_FECVTO, '99999999' as OR_VIDINI, '99999999' as OR_VIDRES
              , '0' as IN_ANTIGU, '99' as OR_SEGGES, 'FIC00500' as OR_CODGAR, '0' as OR_TIPAVA, '?' as OR_TIPGAR, '99' as OR_CODTIT, '0' as OR_DESTPR, '?' as OR_TIPOFI
              , '0' as OR_TIPOPR, '9999' as OR_IMPLTV, '0' as OR_VALTAS, '0' as OR_CONCED, '724' as OR_IDPAIS, 'NO' as IN_ITITSN, 'NO' as IN_INDMOR, 'GE' as OR_IDPRO1
              , cur.OR_ENTITY as OR_ENTITY, '9999999999999' as OR_CTAIND, '010080070000000000' as OR_EPIIND, CUR.FI_EPICON as FI_EPICON, '1' as FI_PORCON
              , 'EUR' as OR_DIVISA, 'Drawn' as FI_TIPEXP, '0' as OR_DISPTO, '0' as OR_DISBLE, '0' as OR_AVALES, '0' as OR_FUTURS, '0' as OR_REPOS, '0' as OR_AJUVAL, '0' as OR_FAIRVA
              , '0' as OR_DISPTOCON, '0' as OR_DISBLECON, '0' as OR_AVALESCON, '0' as OR_FUTURSCON, '0' as OR_REPOSCON, '0' as OR_AJUVALCON, '0' as OR_FAIRVACON, '?' as IN_TIPDER
              , '0' as IN_FAIRVABO, '0' as IN_FAIRVABOCON, '0' as FI_SUMEXP, '0' as IN_VTAGRU, '0' as IN_VTAGRU_CONS, '99' as OR_RATINT, '?' as OR_MODRAT0, '?' as OR_SEGRIE
              , '9999' as OR_PUNT0, '?' as OR_SITUAC0, '9999' as OR_FECPUN0, 'XXX' as IN_SEGMBSINI, '?' as IN_SEGMBS0, '?' as IN_SEGMBS1, '?' as IN_SEGMBS2, 'Otros Activos' as IN_SEGMBS
              , 'NR' as IN_RATEXTAVA2, 'SR' as IN_SRATIN, 'NR' as IN_RATEXT, 'A' as IN_RATSOB, 'NO' as FI_ELIMI1, 'STDA' as IN_METODE, '?' as IN_SUCEPT, 'N' as IN_SEG_HIP
              , '0' as OR_FECPRREV, '?' as OR_CLUNIENT, '?' as OR_CLUNIPROD, '0' as OR_CLUNICONTR, '0' as OR_CLUNICUENT, '0' as OR_CLUNIOPERA, '0' as FI_MESCURA, '0' as OR_FECCAR
              , '0' as OR_PRESTMIG, '0' as OR_CLAVISO, '?' as OR_FECALTBLO, '0' as OR_TITUSCPCB, '0' as OR_PERSONSCPCB, '0' as FI_EADAIRB, '0' as OR_CNAESCPCB, '0' as FI_EADCONAIRB
              , '1' as FI_CCFAIRB, 'IN' as IN_TIPOREG, '0' as IN_GRUP_TIPIDE, '?' as IN_GRUP_IDPER, '?' as IN_NOM_GRUP, '0' as IN_IDCALIFIC, '9999' as OR_PUNTSCO, '9999' as OR_FECSCO
              , '?' as OR_NUMSCOFIN, '?' as IN_INDCURA, '0' as OR_PROVAPL, 'N' as OR_INDHOLDING, '99999' as OR_VERSPREST, '?' as OR_DESCTAVISTA, '?' as OR_CODPRODO, '?' as OR_CODISO
              , '?' as OR_PRODERIV, '0' as IN_ACTIVO, '?' as OR_NUMFINREG, '0' as OR_TIPOBJETO, '99' as OR_SEGFAC, '?' as OR_SEGFIC, '0' as OR_IDSITUAC, '0' as IN_IDCALIFICREL
              , '?' as OR_SUBSTDA, '?' as OR_MODSCO, '?' as OR_FINABE, '?' as OR_TIPDERIV, '0' as OR_NUMPERCTAV, '0' as OR_CNAECTAVIS, '0' as OR_CNOCTAVIS, '?' as OR_OPCVEN
              , '?' as IN_METODE_1, '?' as OR_CODIGO_BIC, '0' as IN_EXISTENCIAS, '0' as IN_ACTIVO_CIR, '?' as IN_FECMORA, '0' as OR_CTACLI, '0' as IN_NUMEMP, 'NO' as IN_HIPOAVAL
              , '?' as IN_NIFGRUPCON, 'N' as IN_PYME, '?' as OR_INDHOLDINGREL, '?' as OR_SEGFIC2, '999' as IN_PRESTPERCENT, '9999' as IN_CAT_BDE_N, '?' as OR_CLUNIENT_CUENT
              , '?' as OR_CLUNIPROD_CUENT, '?' as OR_CLUNIENT_OPERA, '?' as OR_CLUNIPROD_OPERA, '?' as IN_OPER_MIGR, '0' as IN_IDGRUPO, 'NO' as MARCA_EPA, '0' as OR_FECDEU
              , '0' as OR_NUMPERSONA, '0' as OR_PERSCTAVISTA, '0' as OR_TITUCTAVISTA, '1' as IN_FACTCOR, '?' as OR_SITCON, 'NR' as IN_RATEXT_ISIN, '0' as IN_REFINAN
              , '0' as ID_AMBIT_DRC, '0' as IN_ACTIVO_CONS, '0' as OR_CONTRATO_GARANTIA, PN_FECPRO as OR_IDMES, '?' as OR_NIFCIFAVA, '0' as OR_PESOW, '0' as OR_PUNTGRUP
              , '?' as OR_MARCONOT, '?' as OR_MARCONDV, '0' as OR_FECTAS, '0' as IN_NUMEMP_CONS, 'N' as INDCURA, '?' as FECHINICURA, '00' as TIPODEFAULT, '?' as FECHINISIMP
              , '?' as FECHFINSIMP, 'N' as IN_DEFAULT, null as OR_MODGRUP
           FROM DUAL;

        COMMIT;

    END LOOP;

    vNumErr := 99;
    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Msg_Err, vNumErr);

      RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_AJUSTE_INTANGIBLES';


CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_DERECHOS_TANTEO IS

    CTE_NOM_PROCEDURE     CONSTANT VARCHAR2(75)  := 'DERECHOS_TANTEO';
    VN_NUMERR             NUMBER(3);
    VV_MENSAJE            VARCHAR2(255);

    IMPORTE_TOTAL_UPDATE  NUMBER(15,2);
    VV_COUNT_REG          NUMBER(10);
    v_Version             NUMBER(2)       DEFAULT 1;

BEGIN

    VN_NUMERR:= 1;

    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (Cte_Nom_Procedure, SYSDATE, 'INICIADO');

    COMMIT;

    VN_NUMERR:= 2;

    /*  INI - 13/07/2020 - NAV - UPDATE DERECHOS DE TANTEO */
    BEGIN
      SELECT NVL(max(version),0) + 1
        INTO v_Version
        FROM BAS_MEN.UPDATE_DERECHOS_TANTEO;
    EXCEPTION
      WHEN OTHERS THEN
        v_Version := 1;
    END;

    INSERT /*+ parallel (B 8) */ INTO BAS_MEN.UPDATE_DERECHOS_TANTEO B
        SELECT  /*+ full(a) full(b) parallel (a 8) parallel (b 8)*/ sysdate AS FECHA, v_Version AS VERSION, a.OR_IDREG, a.OR_NOMPER, a.IN_TIPOREG, b.FI_RWASTDA, b.FI_POSPRESTDA_INI
             , a.OR_DISPTO, OR_ENTITY, FI_ELIMI1
          FROM BAS_MEN.BASILEA a
             , BAS_MEN.BASILEA_STDA b
         WHERE a.OR_IDREG = b.OR_IDREG
          AND FI_EPICON = '010050205110100000000000000000' AND OR_CTAIND = 4422300 AND OR_ENTITY = 81;/* 11/02/2021 - NAV - Se mantiene únicamente la cuenta individual 4422300 de la 81.  */

    COMMIT;

    VN_NUMERR := 15;

    MERGE /*+ parallel(Upd 4) */ INTO BAS_MEN.BASILEA dst
     USING (SELECT *
              FROM BAS_MEN.UPDATE_DERECHOS_TANTEO
             WHERE VERSION = v_Version) src
        ON (dst.OR_IDREG = src.OR_IDREG)
      WHEN MATCHED THEN
        UPDATE
           SET dst.OR_NOMPER  = 'Derecho de Tanteo'
             , dst.IN_TIPOREG = 'IN';

    COMMIT;

    VN_NUMERR := 16;

    MERGE /*+ parallel(Upd 4) */ INTO BAS_MEN.BASILEA_STDA dst
     USING (SELECT *
              FROM BAS_MEN.UPDATE_DERECHOS_TANTEO
             WHERE VERSION = v_Version) src
        ON (dst.OR_IDREG = src.OR_IDREG)
      WHEN MATCHED THEN
        UPDATE
           SET dst.FI_RWASTDA        = 1
             , dst.FI_POSPRESTDA_INI = 1;

    COMMIT;

/***************************************UPDATE BASILEA*****************************************/
    VN_NUMERR:= 98;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           REG_UPD_OK = VV_COUNT_REG
     WHERE PROCES = Cte_Nom_Procedure
       AND ESTAT  = 'INICIADO';

    COMMIT;

    VN_NUMERR:= 99;

EXCEPTION
    WHEN OTHERS THEN

       VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

       ROLLBACK;

       UPDATE BAS_MEN.CONTROL_PROCES
          SET ESTAT = 'FINALIZADO',
              DATA_FIN = SYSDATE,
              FINALITZAT = 'KO',
              ERROR_ORAC = VV_MENSAJE,
              ERROR_PROG = SUBSTR('NUMERR: '||VN_NUMERR,1,255),
              NUM_ERROR  = VN_NUMERR
        WHERE PROCES = Cte_Nom_Procedure
          AND ESTAT  = 'INICIADO';
       COMMIT;

       RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_DERECHOS_TANTEO';

--bka40100=====================================================================================================
Select 'bka40100' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.SP_Rating_Finalista (
                                             PE_SP           IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_FITCH        IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_MOODY        IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_DBRS         IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE
                                           , PE_Fec_SP       IN NUMBER
                                           , PE_Fec_FITCH    IN NUMBER
                                           , PE_Fec_MOODY    IN NUMBER
                                           , PE_Fec_DBRS     IN NUMBER
                                           , PS_RAT_EXT     OUT BAS_MEN.MAESTRO_TIPOS_RATING.RAT_EXT%TYPE
                                           , PS_FecCal      OUT NUMBER
                                           )
      IS
      VN_SP     BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
      VN_FITCH  BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
      VN_MOODY  BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
      VN_RATIN  BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;
      VN_DBRS   BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 0;

      v_N_Rat_Validos  NUMBER (2)                  DEFAULT 0;
      PS_ECAI BAS_MEN.GTT_MEJOR_RATING.ECAI%TYPE   DEFAULT 'SR';

      /* Función interna para devolver el ORDEN del rating introducido */
      FUNCTION SF_Obt_Orden_Tipos_Rating ( PE_Calific IN BAS_MEN.MAESTRO_TIPOS_RATING.MOODY%TYPE )
      RETURN BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE
      IS
          PS_Orden BAS_MEN.MAESTRO_TIPOS_RATING.ORDEN%TYPE DEFAULT 23;
      BEGIN

          BEGIN
            SELECT DISTINCT ORDEN
              INTO PS_Orden
              FROM BAS_MEN.MAESTRO_TIPOS_RATING
             WHERE MOODY = PE_Calific
               AND ROWNUM = 1;
          EXCEPTION
            WHEN OTHERS THEN
                  PS_Orden := 23;
          END;
          RETURN PS_Orden;

      END SF_Obt_Orden_Tipos_Rating;
      /* FIN Función interna */

/* Calculo de los ratings válidos y cual es el finalista */
/* PROGRAMA PRINCIPAL */
BEGIN

      PS_RAT_EXT   := 'SR';
      PS_FecCal    := null;
      PS_ECAI      := 'SR';

      VN_SP    := SF_Obt_Orden_Tipos_Rating ( PE_SP );
      VN_FITCH := SF_Obt_Orden_Tipos_Rating ( PE_FITCH );
      VN_MOODY := SF_Obt_Orden_Tipos_Rating ( PE_MOODY );
      VN_DBRS  := SF_Obt_Orden_Tipos_Rating ( PE_DBRS );
      DELETE BAS_MEN.GTT_MEJOR_RATING;

      -- Se asigna un peso a cada rating
      INSERT INTO BAS_MEN.GTT_MEJOR_RATING
      SELECT 1 as PE_ID ,  VN_DBRS AS Orden, 'DB' AS ECAI, 0 AS PESO FROM DUAL
      UNION
      SELECT 1 as PE_ID , VN_MOODY AS Orden, 'MD' AS ECAI, 1 AS PESO FROM DUAL
      UNION
      SELECT 1 as PE_ID , VN_FITCH AS Orden, 'FI' AS ECAI, 2 AS PESO FROM DUAL
      UNION
      SELECT 1 as PE_ID ,    VN_SP AS Orden, 'SP' AS ECAI, 3 AS PESO FROM DUAL;

      -- Obtención del nº de distintos ratings validos.
      BEGIN
          SELECT /* PARALLEL(MejRat,4) */ COUNT(DISTINCT ORDEN)
            INTO v_N_Rat_Validos
            FROM BAS_MEN.GTT_MEJOR_RATING MejRat
           WHERE ORDEN <> 23;
      EXCEPTION
        WHEN OTHERS THEN
           PS_ECAI := 'SR';
      END;

      /* Si no hay ratings validos */
      IF v_N_Rat_Validos = 0 THEN
         PS_ECAI := 'SR';

      /* Si hay 1 solo rating válido */
      ELSIF v_N_Rat_Validos =   1 THEN

        SELECT /* PARALLEL(MejRat,4) */ ECAI
          INTO PS_ECAI
          FROM BAS_MEN.GTT_MEJOR_RATING  MejRat
         WHERE MejRat.ORDEN <> 23
           AND MejRat.PESO  = ( SELECT MAX(PESO)
                                  FROM BAS_MEN.GTT_MEJOR_RATING MaxPeso
                                 WHERE MaxPeso.ORDEN <> 23
                              );
      /* Si hay más de 1 rating válido */
      ELSIF v_N_Rat_Validos >   1 THEN

              SELECT ECAI
                INTO PS_ECAI
              FROM
                (SELECT ECAI, orden, PESO
                 FROM ( SELECT *
                          FROM ( SELECT /* PARALLEL(MejRat,4) */ ECAI, ORDEN, PESO
                                   FROM BAS_MEN.GTT_MEJOR_RATING MejRat
                                  WHERE MejRat.ORDEN <> 23
                                  ORDER BY ORDEN, PESO DESC
                               )
                        WHERE  ROWNUM <= 2
                      ) DosMasBajas
                 ORDER BY ORDEN DESC, PESO DESC
                 )
                 WHERE ROWNUM = 1;
      ELSE
         PS_ECAI := 'SR';

      END IF;

      IF PS_ECAI = 'SP' THEN
         VN_RATIN  := VN_SP;
         PS_FecCal := PE_Fec_SP;
      ELSIF PS_ECAI = 'MD' THEN
         VN_RATIN  := VN_MOODY;
         PS_FecCal := PE_Fec_Moody;
      ELSIF PS_ECAI = 'FI' THEN
         VN_RATIN  := VN_FITCH;
         PS_FecCal := PE_Fec_Fitch;
      ELSIF PS_ECAI = 'DB' THEN
         VN_RATIN  := VN_DBRS;
         PS_FecCal := PE_Fec_DBRS;
      ELSE
         VN_RATIN  := 23;
      END IF;

      /* Devuelve el RATING correspondiente al ORDEN introducido */
      BEGIN
         SELECT /* PARALLEL(TR,4) */ DISTINCT RAT_EXT
           INTO PS_Rat_Ext
           FROM BAS_MEN.MAESTRO_TIPOS_RATING TR
          WHERE ORDEN = VN_RATIN;
      EXCEPTION
        WHEN OTHERS THEN
            PS_Rat_Ext := 'SR';
        END;

END;

/

show errors;

/************************************************************************************/
/* CREATE DE VISTA DEL PERIMETRO DE GARANTIAS FINANCIERAS                           */
/************************************************************************************/
CREATE OR REPLACE FORCE VIEW BAS_MEN.VW_PERIMETRO_GARANTIAS AS
SELECT /* PARALLEL(p,4) */
      OR_CONTRATO_GARANTIA
	, OR_CLUNICONTR  
    , OR_CODGAR
    , FCHVCTOGR
    , FCHINVIG
    , CODIGOISIN
    , DIVISAGR
    , CODIGOLEIPER
    , OR_NUMPERSONA
    , OR_PERSON
    , OR_NIFCIF
    , OR_NOMPER
    , OR_IDCNAE
    , OR_CODISO
    , IN_RATSOB
    , SECTOREISOR
    , fch_rating_FITCH
    , rating_FITCH
    , fch_rating_MOODYS
    , rating_MOODYS
    , fch_rating_SP
    , rating_SP
    , fch_rating_DBRS
    , rating_DBRS
    , OR_CTACLI
    , OR_NUMOFI
   FROM BAS_MEN.GARANTIAS_FUERA_BASE_STDA_1 p;
/

--FLA FIN

/************************************************************************************/
/* CREATE DE VISTA DE LA SEGMENTACIÓN DEL STDA                                      */
/************************************************************************************/

CREATE OR REPLACE FORCE VIEW BAS_MEN.VISTA_SEGMENT_STDA AS
  (SELECT /*+ full(bas) full(stda) PARALLEL (BAS 8) PARALLEL (STDA 8) */  BAS.OR_IDREG
                      , BAS.OR_IDPERS
                      , NVL(BAS.IN_VTAGRU,0) IN_VTAGRU
                      , NVL(BAS.IN_VTAGRU_CONS,0) IN_VTAGRU_CONS
                      , BAS.OR_TITULARITAT
                      , IN_NUMEMP
                      , IN_NUMEMP_CONS
                      /* SMG 17/09/19 - Modificaciones eliminación tramo 3*/
                      , DECODE(IN_SEGSTDA_HIP, 'RRE', DECODE(IN_INDMOR, 'SI', OR_SALDO_ORIG, 'CT', OR_SALDO_ORIG, 'AD', OR_SALDO_ORIG, OR_SALDO_ORIG3)
                                               , OR_SALDO_ORIG) as FI_EXPSTDA_FULLY
                      , BAS.IN_SEGMBS1, BAS.IN_SEGMBS, NVL(BAS.OR_NIFCIF,'?') OR_NIFCIF, BAS.OR_TIPIDE, BAS.IN_SEGMBS0
                      , NVL(BAS.IN_ACTIVO,0) IN_ACTIVO
                      , NVL(BAS.IN_ACTIVO_CONS,0) IN_ACTIVO_CONS
                      , OBSERVACIONES
                      , NVL(IN_NUMEMP_CONS, 0) NUM_EMPLEADOS
                      , IN_TIPOREG, OR_CTACLI,IN_PYME, BAS.IN_GRUP_IDPER, BAS.OR_ENTITY, BAS.OR_REFOPE, FI_ELIMI1, OR_EPIIND, FI_EPICON
                      , IN_SEGMBSINI, OR_NUMOFI, IN_SEGSTDA_HIP, IN_INDMOR
                      , OR_TIPOPE, OR_PROCED, OR_DISPTO
        /* 201606 Se cambia la identificación de la RF, en lugar de ser por epígrafe será por el Tipo de Operación (OR_TIPOPE)*/
                      , OR_SALDO_ORIG3
                      , BAS.FI_SUMEXP
                      , STDA.ID_CLIENTE
                 FROM BAS_MEN.BASILEA BAS,
                      BAS_MEN.BASILEA_SEGM_AUX STDA,
                      BAS_MEN.MAESTRO_VENTAS VEND
                WHERE BAS.OR_IDREG = STDA.OR_IDREG
                  AND BAS.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','002','017','101','102','103','104','106','107')
                  AND (BAS.IN_TIPOREG IN ('ITSA','SA','FA','DN','FFD','PX','RX','OXE', 'MMDN' ,'MMOXC' ,'MMOXE' ,'MMPX', 'MMSA', 'CESA'
                                          ,'REN', 'OXC','RN','MMRN', 'AVSA', 'DI', 'SI', 'CEOXE', 'FMX', 'IIC-LTA', 'IIC-FBA') /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                        OR substr(BAS.IN_TIPOREG,1,2) = 'CI') /*RBR 7/09/2021 Añadido CI% */
                  AND BAS.OR_NIFCIF = VEND.CIF_FILIAL(+));

CREATE OR REPLACE FORCE VIEW BAS_MEN.VISTA_METODO_STDA AS
  (SELECT /*+ FULL(A) FULL(B) FULL(C) parallel (a 4) parallel (b 4) parallel (c 4) */ B.OR_IDREG,  B.IN_SEGMBS,
            DECODE(B.IN_RATEXT,'SR','NR','?','NR', NVL(B.IN_RATEXT,'NR')) IN_RATEXT,
            DECODE(B.IN_RATSOB,'SR','NR','?','NR', NVL(B.IN_RATSOB,'NR')) IN_RATSOB,
            B.IN_INDMOR, B.OR_TIPOPE, B.OR_IDPRO1, B.OR_FAIRVA,B.OR_IDPAIS,
            B.OR_PROCED, B.OR_VIDRES, B.OR_VIDINI,
            B.OR_CODGAR,
            B.OR_FAIRVACON,B.OR_DISPTO, B.OR_DISBLE, B.OR_AVALES,
            B.OR_TIPAVA,
            B.OR_CTAIND,  B.FI_TIPEXP, B.OR_TIPGAR, B.OR_DESTPR, B.IN_TIPDER,
            B.OR_EPIIND, B.IN_RATEXTAVA2, B.IN_SEGMBSINI,
            DECODE(B.FI_TIPEXP,'OTC',NVL(B.FI_EADAIRB,0),
                               'Repos',NVL(B.FI_EADAIRB,0),
                               B.OR_DISPTO + B.OR_DISBLE + B.OR_AVALES + B.OR_FUTURS + B.OR_REPOS + B.OR_AJUVAL) TOTAL,
            DECODE(B.FI_TIPEXP,'OTC',NVL(B.FI_EADCONAIRB,0),
                               'Repos',NVL(B.FI_EADCONAIRB,0),
                               B.OR_DISPTOCON + B.OR_DISBLECON + B.OR_AVALESCON + B.OR_FUTURSCON + B.OR_REPOSCON + B.OR_AJUVALCON) TOTALCON,
            B.IN_FAIRVABO, B.FI_PORCON, B.IN_SEG_HIP,B.IN_SEGMBS0,
            CASE
              WHEN B.IN_TIPOREG = 'FF' THEN
                   '501'
              WHEN B.IN_TIPOREG = 'FC' AND B.IN_SEGMBSINI = '106' THEN
                   '501'
              WHEN B.IN_SEGMBSINI IN ('002','003','005','006','009','010','017','019','027','101','102') AND B.FI_ELIMI1 in ('NO', 'SRABS')
               AND C.IN_SEGMBS1 IS NULL THEN
                 '?'
              ELSE NVL(C.IN_SEGMBS1,'?')
            END IN_SEGMBS1,
            NVL(B.OR_PROVAPL,0) OR_PROVAPL
            /* RMR 05/08/2020 STDA aislado con nuevos planes de retasaciones  */
            , NVL(ROUND((nop.IMPRIESVIVLTV/1000),2), B.OR_IMPLTV) AS OR_IMPLTV
            /* RMR 05/08/2020 */
            ,B.OR_TIPOFI
            ,B.OR_ENTITY
            ,NVL(nop.IMPTASAC, B.OR_VALTAS) as OR_VALTAS /* RMR 05/08/2020 STDA aislado con nuevos planes de retasaciones  */
            ,B.OR_CODISO, B.OR_DIVISA, B.OR_REFOPE, b.OR_IDPERS,
            NVL(B.OR_IDSITUAC,0) OR_IDSITUAC,
            B.OR_TIPOBJETO,
            B.OR_CONCED, B.IN_TIPOREG,
            B.OR_FECCAR, B.OR_TIPOPR, B.OR_FECOPE, B.FI_EPICON, OR_CODPRODO,
            B.OR_NUMOFI, B.OR_CTACLI, B.FI_CCFAIRB, B.in_sucept,  NVL(D.CODGAR, '?') CODGAR_PIGNORATICIA,
            OR_CLUNIENT,OR_CLUNIPROD, B.OR_CLUNICONTR,OR_TITULARITAT, DECODE(OR_FECDEU, 0, NULL, OR_FECDEU) OR_FECDEU, OR_CLUNICUENT,
            OR_SITCON, NVL(IN_RATEXT_ISIN, 'NR') AS IN_RATEXT_ISIN,
            case when mor.OR_IDREG is NULL and in_indmor = 'SI' then
                      in_indmor
                 when mor.OR_IDREG is NULL and in_indmor <> 'SI' then
                      'NO'
                 else 'CT'
            end AS IN_INDMOR_STDA, B.OR_NIFCIF,
            B.OR_NIFCIFIBM
            ,CASE when OR_IDPRO1 = 'OT' then 1
                  WHEN OR_ENTITY IN (81, 242, 9109) THEN NVL(Sf.SF,1)
                  ELSE 1
             END AS SF
            ,CASE when OR_IDPRO1 = 'OT' then 1
                  WHEN OR_ENTITY IN (81, 242, 9109) THEN NVL(Sf.SF_CONS, 1)
                  ELSE 1
             END AS SF_CONS
            , b.or_idmes, c.ead, b.or_ajuval, b.OR_PERSON
            , case when high.or_idreg is null then 'N'
                  ELSE 'S'
              END AS SW_MARCA_HIGH_RISK
            , LPAD(b.OR_FECVTO,8 ,'0')        AS OR_FECVTO /* FLA 202201 - Miami Fase II */
            , NVL(garfin.FCHVCTOGR, 99999999) AS FCHVCTOGR
            , garfin.DIVIMPGAR, b.IN_SEGMBS2 /* NAV 25/05/2022 - HDEV-158497 - Haircut Divisa  */
                  FROM BAS_MEN.BASILEA B,
                       BAS_MEN.SEGMBS1_STDA C,
                       BAS_MEN.GARANTIAS_PIGNORATIVAS D,
                       BAS_MEN.MAESTRO_MOROSO_CT_STDA Mor,
                       BAS_MEN.FACTOR_DOTACION_SCALAR Sf,
                       BAS_MEN.SALUME_Z_SINPIG nop, /* RMR 05/08/2020 */
                       BAS_MEN.IDREG_HIGH_RISK high,
                       BAS_MEN.PERIMETRO_GARANTIAS_1 garfin /* FLA 202201 - Miami Fase II */
                 WHERE B.OR_IDREG = C.OR_IDREG(+)
                   AND B.OR_CODGAR = D.CODGAR(+)
                   AND B.OR_IDREG  = Mor.OR_IDREG(+)
                   AND B.IN_METODE = Sf.IN_METODE(+)
                  /* RMR 05/08/2020 STDA aislado con nuevos planes de retasaciones  */
                   AND b.OR_CLUNIENT = nop.entidadcto (+)
                   AND b.OR_CLUNIPROD = nop.CODTIPOPROD (+)
                   AND b.or_clunicontr = nop.CODCONTRATO (+)
				           AND b.or_idreg = high.or_idreg(+)
                   AND b.OR_CONTRATO_GARANTIA = garfin.OR_CONTRATO_GARANTIA(+) /* FLA 202201 - Miami Fase II */
       );


/************************************************************************************/
/* CREATE DE LA DEFINICION DEL PACKAGE   BAS_MEN.CALCULO_CAMPOS_GR            */
/************************************************************************************/

--FLA 09/03/22 
CREATE OR REPLACE PACKAGE BAS_MEN.CALCULO_CAMPOS_GR IS

    TYPE CURSOR_BASILEA2  IS REF CURSOR RETURN BAS_MEN.VW_PERIMETRO_GARANTIAS%ROWTYPE;
    TYPE T_ARRAY_GR IS TABLE OF BAS_MEN.GARANTIAS_FUERA_BASE_STDA_2%ROWTYPE;

    FUNCTION F_GARANTIAS (CUR IN CURSOR_BASILEA2)RETURN T_ARRAY_GR
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED;

END;
/

show errors;

CREATE OR REPLACE PACKAGE BODY BAS_MEN.CALCULO_CAMPOS_GR IS

 FUNCTION F_GARANTIAS (cur IN cursor_basilea2)RETURN T_ARRAY_GR
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED

      AS

      in_rec cur%ROWTYPE;
      out_rec BAS_MEN.GARANTIAS_FUERA_BASE_STDA_2%ROWTYPE;

        v_NumErr                 NUMBER(3)   ;
        VV_ROWID                 VARCHAR2(15);
        VN_FECPRO                NUMBER(8)   ;

        VV_IN_SEGMBS             VARCHAR2(25);
        VV_IN_SEGMBSINI          VARCHAR2(3) ;
        VV_RAT_FINAL             VARCHAR2(4) ;
        VV_FEC_RAT_FINAL         NUMBER(8)   ;
        VV_IN_SEGSTDA            VARCHAR2(50);

        VV_IDPAIS                   NUMBER(4);
        VN_FI_RWASTDA                   FLOAT;
        VN_FI_POSPRESTDA_INI            FLOAT;
        SW_MONEDA_PAIS_UE         VARCHAR2(1);
        SW_MONEDA_LOCAL           VARCHAR2(1);
        SW_Moneda_Local_Pais_UE   VARCHAR2(1);
        VV_IN_SEGRWASTDA          VARCHAR2(50);
        VV_OR_VIDRES                    FLOAT;
        VV_OR_VIDINI                    FLOAT;

 BEGIN

    SELECT TO_NUMBER(VALPARM)
      INTO VN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

      LOOP fetch cur into in_rec;
      EXIT WHEN cur%notfound;
        /******************************/
        v_NumErr             := 0  ;
        VV_ROWID             := TO_CHAR(IN_REC.OR_CONTRATO_GARANTIA);
        VV_IN_SEGMBS         := '?';
        VV_IN_SEGMBSINI      := '?';
        VV_RAT_FINAL         := 'SR';
        VV_FEC_RAT_FINAL     := NULL;
        VV_IN_SEGSTDA        := '?';

        VV_IDPAIS            := NULL;
        VN_FI_RWASTDA         := 1;
        VN_FI_POSPRESTDA_INI  := 1;
        SW_MONEDA_PAIS_UE := 'N';
        SW_MONEDA_LOCAL   := 'N';
        SW_Moneda_Local_Pais_UE := NULL;
        VV_IN_SEGRWASTDA := '?';
        VV_OR_VIDRES     := 0;
        VV_OR_VIDINI     := 0;

        /******************************/

        v_NumErr  := 1;
        /* IN_SEGMBSINI */

        /* Para depósitos o Cash el segmento será de Otros Activos ('XXX') */
        IF IN_REC.OR_CODGAR IN ('GR 12103', 'GR 12301', 'GR 12101', 'GR 12102', 'GR 12104') THEN
           VV_IN_SEGMBSINI := 'XXX';

        ELSE
           BEGIN
             SELECT /* PARALLEL(ma,4) */ IN_SEGMBSINI_NEW
               INTO VV_IN_SEGMBSINI
               FROM BAS_MEN.MAESTRO_RESEG_TOTAL ma
              WHERE ma.OR_IDPERS = IN_REC.OR_NIFCIF;
           EXCEPTION
              WHEN OTHERS THEN
                    BEGIN
                       SELECT /* PARALLEL(p,4) */IN_SEGMBSINI
                         INTO VV_IN_SEGMBSINI
                         FROM BAS_MEN.MAESTRO_PERSONALIDADES p
                        WHERE p.OR_PERSON = IN_REC.OR_PERSON;
                EXCEPTION
                     WHEN OTHERS THEN
                       VV_IN_SEGMBSINI := VV_IN_SEGMBSINI;                       
                     END;
             END;
        END IF;

        IF IN_REC.OR_CODGAR LIKE ('GR 12%') AND IN_REC.SECTOREISOR IS NOT NULL THEN
           BEGIN
                SELECT IN_SEGMBSINI
                  INTO VV_IN_SEGMBSINI
                  FROM BAS_MEN.SECTOR_EMISOR_BLOOMBERG bl
                 WHERE bl.SECTOREISOR  = IN_REC.SECTOREISOR;
               EXCEPTION
                 WHEN OTHERS THEN
                   VV_IN_SEGMBSINI := VV_IN_SEGMBSINI;
             END;
        END IF;

        BEGIN
           SELECT /* PARALLEL(bde,4) */ IN_SEGMBSINI
           INTO VV_IN_SEGMBSINI
           FROM BAS_MEN.MAESTRO_RESEGMENTACION_BDE bde
           WHERE bde.OR_NIFCIF = IN_REC.OR_NIFCIF;
        EXCEPTION
           WHEN OTHERS THEN
              VV_IN_SEGMBSINI := VV_IN_SEGMBSINI;
        END;

        v_NumErr  := 2;
        /* VV_IN_SEGMBS */

        BEGIN
          SELECT  IN_SEGBS
            INTO VV_IN_SEGMBS
            FROM BAS_MEN.MAESTRO_SEGMENTOS s
           WHERE s.IN_SEGMBSINI = VV_IN_SEGMBSINI;
        EXCEPTION
             WHEN OTHERS THEN
                VV_IN_SEGMBS := '?';
          END;

        v_NumErr  := 3;
        /* VV_IN_SEGSTDA y VV_IN_SEGRWASTDA */

        BEGIN
           SELECT  IN_SEGSTDA, IN_SEGRWASTDA
             INTO VV_IN_SEGSTDA, VV_IN_SEGRWASTDA
             FROM BAS_MEN.MAESTRO_SEGMENTOS s
            WHERE s.IN_SEGMBSINI = VV_IN_SEGMBSINI;
        EXCEPTION
             WHEN OTHERS THEN
                 VV_IN_SEGSTDA:= '?';
        END;

        IF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS/RETAIL' THEN
             VV_IN_SEGSTDA :='Empresas';
        END IF;

        IF VV_IN_SEGMBSINI = '034' THEN
           BEGIN
               SELECT  distinct IN_SEGSTDA, IN_SEGRWASTDA
                 INTO VV_IN_SEGSTDA, VV_IN_SEGRWASTDA
                 FROM BAS_MEN.MAESTRO_SEGMENTOS s
                WHERE s.IN_SEGBS = VV_IN_SEGMBS
                  AND s.IN_SEGMBSINI <> '034'
                  AND s.IN_SEGSTDA <> 'BMultides';
           EXCEPTION
                WHEN OTHERS THEN
                   VV_IN_SEGSTDA:= '?';
            END;
        END IF;

        v_NumErr  := 9;
		/*VV_RAT_FINAL y VV_FEC_RAT_FINAL*/
		
        /* Rating finalista */
		BAS_MEN.SP_Rating_Finalista( IN_REC.rating_SP
                                  , IN_REC.rating_FITCH
                                  , IN_REC.rating_MOODYS
                                  , IN_REC.rating_DBRS
                                  , IN_REC.fch_rating_SP
                                  , IN_REC.fch_rating_FITCH
                                  , IN_REC.fch_rating_MOODYS
                                  , IN_REC.fch_rating_DBRS
                                  , VV_RAT_FINAL
                                  , VV_FEC_RAT_FINAL);

        v_NumErr  := 10;
        /* VN_FI_POSPRESTDA_INI */

        IF IN_REC.FCHVCTOGR = 99991231 THEN -- La garantía no vence
           VV_OR_VIDRES :=  9999;
        ELSE
           VV_OR_VIDRES :=  TO_DATE(IN_REC.FCHVCTOGR, 'YYYYMMDD') - TO_DATE(VN_FECPRO, 'YYYYMMDD');
        END IF;

        IF IN_REC.FCHINVIG IS NULL THEN -- No hay fecha de inicio de garantia
           VV_OR_VIDINI :=  9999;
        ELSE
           VV_OR_VIDINI :=  TO_DATE(VN_FECPRO, 'YYYYMMDD') - TO_DATE(IN_REC.FCHINVIG, 'YYYYMMDD');
        END IF;

        BEGIN
           SELECT /* PARALLEL(s,4) */ CODI_NUM_PAIS
             INTO VV_IDPAIS
             FROM BAS_MEN.MAESTRO_SOBERANOS s
            WHERE CODI_PAIS = IN_REC.OR_CODISO;
        EXCEPTION
             WHEN OTHERS THEN
                 VV_IDPAIS:= null;
        END;

        BAS_MEN.CALCULO_STDA.SP_Obt_Datos_Moneda (IN_REC.DIVISAGR, VV_IDPAIS, SW_MONEDA_PAIS_UE , SW_MONEDA_LOCAL, SW_Moneda_Local_Pais_UE);

        v_NumErr  := 11;
		
        /* Si SI TIENE rating del pais */
        IF NVL(IN_REC.IN_RATSOB, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-', 'B', 'BB-')  then
              /* Para el segmento de SOBERANOS y EMPRESAS empezamos poniendo el RWA correspondiente al rating del pais  */
              IF UPPER(VV_IN_SEGSTDA) IN ('SOBERANOS', 'EMPRESAS') THEN
                     BEGIN
                        SELECT  MAX(PERCENT)
                          INTO VN_FI_POSPRESTDA_INI
                          FROM BAS_MEN.MAESTRO_RWA_STDA RS
                         WHERE NOM     = 'SOBERANOS'
                           AND RAT_EXT = IN_REC.IN_RATSOB;
                     EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                               VN_FI_POSPRESTDA_INI := -9;
                     END;

                     /*Para empresas nos quedamos con el peor RWA según rating soberano o externo si este es del 100%, sino, nos quedamos con el externo.*/
                     IF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS' THEN
                          IF NVL(VV_RAT_FINAL, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-') then

                            BEGIN
                               SELECT   MAX(PERCENT)
                                 INTO VN_FI_RWASTDA
                                 FROM BAS_MEN.MAESTRO_RWA_STDA RS
                                WHERE NOM     = 'EMPRESAS'
                                  AND RAT_EXT = VV_RAT_FINAL;
                            EXCEPTION
                               WHEN NO_DATA_FOUND THEN
                                  VN_FI_RWASTDA := -9;
                            END;

                          END IF;

                          IF VN_FI_RWASTDA = 1 AND nvl(VV_RAT_FINAL, 'NR') = 'NR' THEN
                             IF VN_FI_RWASTDA > VN_FI_POSPRESTDA_INI THEN
                                 VN_FI_POSPRESTDA_INI:= VN_FI_RWASTDA;
                             ELSE
                                  VN_FI_RWASTDA:= VN_FI_POSPRESTDA_INI;
                             END IF;
                          ELSE
                               VN_FI_POSPRESTDA_INI:= VN_FI_RWASTDA;
                          END IF;
                     END IF;

              /* Para el resto de segmentos, obtenemos el RWA mediante el rating del emisor/emision*/
              ELSE
                  BEGIN
                     SELECT MAX(PERCENT)
                       INTO VN_FI_RWASTDA
                       FROM BAS_MEN.MAESTRO_RWA_STDA RS
                      WHERE NOM     = 'EMPRESAS'
                        AND RAT_EXT = VV_RAT_FINAL;
                  EXCEPTION
                     WHEN NO_DATA_FOUND THEN
                        VN_FI_RWASTDA := -9;
                  END;
                  VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
              END IF;

        /* Si NO TIENE rating del pais  */
        ELSIF NVL(IN_REC.IN_RATSOB, 'NR') = 'NR' then
                IF UPPER(VV_IN_SEGSTDA) = 'SOBERANOS' THEN
                     VN_FI_RWASTDA    := 1;
                     VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                ELSIF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS' THEN
                     IF NVL(VV_RAT_FINAL, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-') then

                          BEGIN
                              SELECT  MAX(PERCENT)
                                INTO VN_FI_RWASTDA
                                FROM BAS_MEN.MAESTRO_RWA_STDA RS
                               WHERE NOM     = 'EMPRESAS'
                                 AND RAT_EXT = VV_RAT_FINAL;
                          EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                 VN_FI_RWASTDA := -9;
                          END;

                     END IF;

                     VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

               END IF;

        END IF;

        IF VV_IN_SEGSTDA = 'Interbancario_CP' THEN
              VN_FI_RWASTDA        := 1;
              VN_FI_POSPRESTDA_INI := 1;
        -- CALCULO DEL RWA PARA ADMINISTRACIONES CENTRALES Y BANCOS CENTRALES
        ELSIF UPPER(VV_IN_SEGSTDA) = 'SOBERANOS' THEN /*XCG, 26/06/2017. Se incluye el segmento 37 al tratamiento de Soberanos con moneda Europea al 0%.*/
              IF VV_IN_SEGMBSINI IN ('008','035', '037') and SW_MONEDA_LOCAL = 'S' THEN
                 VN_FI_RWASTDA        := 0;
                 VN_FI_POSPRESTDA_INI := 0;
              END IF;
        -- CALCULO DEL RWA PARA EMPRESAS
        ELSIF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS' AND NVL(VN_FI_RWASTDA, -9) IN (-9,1) THEN
              VN_FI_RWASTDA        := 1;
              VN_FI_POSPRESTDA_INI := 1;
        -- CALCULO DEL RWA PARA INSTITUCIONES DE INVERSIÓN COLECTIVA
        ELSIF UPPER(VV_IN_SEGSTDA) = 'IIC' THEN
              IF NVL(VN_FI_RWASTDA, -9) IN (-9,1) THEN
                 VN_FI_RWASTDA        := 1;
                 VN_FI_POSPRESTDA_INI := 1;
              END IF;
        -- CALCULO DEL RWA PARA ADMINISTRACIONES REGIONALES Y AUTORIDADES LOCALES --
        ELSIF UPPER(VV_IN_SEGSTDA) = 'A.R Y CORP.LOCALES' THEN
              /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
              IF VV_IN_SEGMBSINI = '030' and SW_MONEDA_LOCAL = 'S' THEN
                 VN_FI_RWASTDA        := 0;
                 VN_FI_POSPRESTDA_INI := 0;
              /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
              ELSIF VV_IN_SEGMBSINI IN ('001','004') AND SW_MONEDA_LOCAL = 'S' THEN
                    /*Corporación local de país miembro o las que el regulador da tratamiento preferente (Brasil, México, etc)*/
                    /* y financiada en moneda local, se aplicará un RW del 0%.*/
                    VN_FI_RWASTDA        := 0;
                    VN_FI_POSPRESTDA_INI := 0;
              ELSIF NVL(VV_RAT_FINAL, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-') then
                   VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';

                    BEGIN
                       SELECT  MAX(PERCENT)
                         INTO VN_FI_RWASTDA
                         FROM BAS_MEN.MAESTRO_RWA_STDA RS
                        WHERE NOM     = VV_IN_SEGRWASTDA
                          AND RAT_EXT = VV_RAT_FINAL;
                    EXCEPTION
                         WHEN NO_DATA_FOUND THEN
                              VN_FI_RWASTDA := -9;
                              END;
                    VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
              ELSE
                    BEGIN
                       SELECT  MAX(PERCENT)
                         INTO VN_FI_RWASTDA
                         FROM BAS_MEN.MAESTRO_RWA_STDA RS
                        WHERE NOM     = 'INTERBANCARIO-SOB'
                          AND RAT_EXT = in_rec.IN_RATSOB;
                    EXCEPTION
                         WHEN NO_DATA_FOUND THEN
                              VN_FI_RWASTDA := -9;
                    END;
                    VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

              END IF;
              --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
              IF NVL(VN_FI_RWASTDA, -9) IN (-9, 1) THEN
                    VN_FI_RWASTDA := 1;
                    VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
              END IF;

        -- CALCULO DEL RWA PARA ENTIDADES DEL SECTOR PÚBLICO Y OTRAS INSTITUCIONES PÚBLICAS SIN FINES DE LUCRO
        ELSIF UPPER(VV_IN_SEGSTDA) = 'ENT.SP/OT.INST' THEN

            -- Los segmbsini segmbsini 022,023 y 031 al 0% y los segmbsini 024 y 025 también 201409 si son país miembro.
            /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
            IF VV_IN_SEGMBSINI IN ('022', '023', '024', '025', '031') AND SW_MONEDA_LOCAL = 'S' then
                   VN_FI_RWASTDA          := 0.1; -- En lugar del 0% se le pone un 10% por requerimientos de Miami
                 --VN_FI_RWASTDA        := 0;
                   VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

            /* Las exposiciones frente a cualquier ente del sector público con vencimiento original inferior a 3 meses se les asignará
            un RWA del 20% a no ser que les toque un 0% independientemente de su naturaleza.*/
            ELSIF VV_OR_VIDINI <= 90 THEN
                   VN_FI_RWASTDA  := 0.2;
                   VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

            ELSIF NVL(VV_RAT_FINAL, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-') THEN
                  VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';

                   BEGIN
                      SELECT  MAX(PERCENT)
                        INTO VN_FI_RWASTDA
                        FROM BAS_MEN.MAESTRO_RWA_STDA RS
                       WHERE NOM     = VV_IN_SEGRWASTDA
                         AND RAT_EXT = VV_RAT_FINAL;
                   EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                             VN_FI_RWASTDA := -9;
                   END;

                   VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

            ELSE
                   -- 201609 El ini 031 - ICO por Soberanos
                   IF VV_IN_SEGMBSINI = '031'   THEN VV_IN_SEGRWASTDA := 'SOBERANOS';
                   ELSE                              VV_IN_SEGRWASTDA := 'INTERBANCARIO-SOB';
                   END IF;

                   BEGIN
                      SELECT  MAX(PERCENT)
                        INTO VN_FI_RWASTDA
                        FROM BAS_MEN.MAESTRO_RWA_STDA RS
                       WHERE NOM     = VV_IN_SEGRWASTDA
                         AND RAT_EXT = IN_REC.IN_RATSOB;
                   EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                             VN_FI_RWASTDA := -9;
                   END;

                    VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
            END IF;
            -- JCVJCVJCV 201403 No hay inis 033, se elimina
            --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
            IF NVL(VN_FI_RWASTDA, -9) IN (-9, 1) THEN
                 VN_FI_RWASTDA := 1;
                 VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
            END IF;

         -- CALCULO DEL RWA PARA BANCOS MULTILATERALES DE DESARROLLO
         ELSIF UPPER(VV_IN_SEGSTDA) = 'BMULTIDES' AND VV_IN_SEGMBSINI <> '021' THEN

              IF VV_IN_SEGMBSINI = '032' THEN
                 VN_FI_RWASTDA := 0;
                 VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
              ELSIF NVL(VN_FI_RWASTDA, -9) IN (-9, 1) THEN
                 VN_FI_RWASTDA := 0.5;
                 VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
              END IF;

          /* CALCULO DEL RWA PARA ORGANIZACIONES INTERNACIONALES */
          /* UE, FMI, Banco de Pagos Internacionales. Facilidad Europea de Estabilización Financiera, Mecanismo Europeo de Estabilidad y EEFF
          internacionales establecidas por dos o más Estados miembros y cuyo cometido consista en movilizar recursos financieros y prestar ayuda
          financiera vendrán mapeados por el MAESTRO_PERSONALIDADES al 26 y ponderan al 0%, el resto vendrán mapeados al 027 y ponderan al 100% */
          ELSIF UPPER(VV_IN_SEGSTDA) = 'ORGANIZACIONES INT.' THEN
                IF VV_IN_SEGMBSINI = '026' THEN
                     VN_FI_RWASTDA := 0;
                     VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                ELSE
                     VN_FI_RWASTDA := 1;
                     VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                END IF;
          /* CALCULO DEL RWA PARA EL SEGMENTO DE INSTITUCIONES.
          Nuevo cálculo 25/03/14 JCVJCVJCV 201403 Se incluye el tratamiento de Institucion al MultiDes del INI 021 excepto el corto plazo*/
          ELSIF UPPER(VV_IN_SEGSTDA) = 'INSTITUCIONES' OR VV_IN_SEGMBSINI = '021'  THEN

                VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                IF ((VV_OR_VIDRES <= 90) ) -- Vencimiento residual <= 3 meses
                   AND SW_MONEDA_LOCAL = 'S' AND VV_IN_SEGMBSINI <> '021' THEN -- De un estado miembro o de tratamiento favorable
                     VN_FI_RWASTDA := 0.2;
                     VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                ELSIF NVL(VV_RAT_FINAL, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-') then

                       IF VV_OR_VIDRES <= 90  then
                          VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                       ELSE
                          VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                       END IF;

                       BEGIN
                          SELECT  MAX(PERCENT)
                            INTO VN_FI_RWASTDA
                            FROM BAS_MEN.MAESTRO_RWA_STDA RS
                           WHERE NOM     = VV_IN_SEGRWASTDA
                             AND RAT_EXT = VV_RAT_FINAL;
                       EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                             VN_FI_RWASTDA := -9;
                       END;

                ELSIF NVL(IN_REC.IN_RATSOB, 'NR') IN ('AAA', 'AA+', 'AA', 'AA-', 'A+', 'A', 'A-', 'BBB+', 'BBB', 'BBB-', 'B', 'BB-') then

                     BEGIN
                        SELECT  MAX(PERCENT)
                          INTO VN_FI_RWASTDA
                          FROM BAS_MEN.MAESTRO_RWA_STDA RS
                         WHERE NOM     = 'INTERBANCARIO-SOB'
                           AND RAT_EXT = IN_REC.IN_RATSOB;
                     EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                               VN_FI_RWASTDA := -9;
                     END;

                ELSIF VV_OR_VIDINI <= 90  then
                      VN_FI_RWASTDA := 0.2;
                END IF;

                --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
                IF NVL(VN_FI_RWASTDA, -9) IN (-9,1) THEN
                   VN_FI_RWASTDA := 1;
                END IF;

                VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
          END IF;
	
		  IF VN_FI_POSPRESTDA_INI = 0 THEN	
		    VN_FI_POSPRESTDA_INI := 0.1; --valor como minimo FLOOR
		  END IF;
	
          /* Depósitos y cash ponderan al 0% */
          IF IN_REC.OR_CODGAR IN ('GR 12103', 'GR 12301', 'GR 12101', 'GR 12102', 'GR 12104') THEN
             VN_FI_POSPRESTDA_INI := 0;
             VV_IN_SEGSTDA := 'Otros Activos';
          END IF;



    ---------------------------------
    OUT_REC.OR_CONTRATO_GARANTIA          := IN_REC.OR_CONTRATO_GARANTIA ; --1
    OUT_REC.OR_CLUNICONTR                 := IN_REC.OR_CLUNICONTR        ; --2
    OUT_REC.OR_CODGAR                     := IN_REC.OR_CODGAR            ; --3
    OUT_REC.FCHVCTOGR                     := IN_REC.FCHVCTOGR            ; --4
    OUT_REC.FCHINVIG                      := IN_REC.FCHINVIG             ; --5
    OUT_REC.CODIGOISIN                    := IN_REC.CODIGOISIN           ; --6
    OUT_REC.DIVISAGR                      := IN_REC.DIVISAGR             ; --7
    OUT_REC.CODIGOLEIPER                  := IN_REC.CODIGOLEIPER         ; --8
    OUT_REC.OR_NUMPERSONA                 := IN_REC.OR_NUMPERSONA        ; --9
    OUT_REC.OR_PERSON                     := IN_REC.OR_PERSON            ; --10
    OUT_REC.OR_NIFCIF                     := IN_REC.OR_NIFCIF            ; --11
    OUT_REC.OR_NOMPER                     := IN_REC.OR_NOMPER            ; --12
    OUT_REC.OR_IDCNAE                     := IN_REC.OR_IDCNAE            ; --13
    OUT_REC.SECTOREISOR                   := IN_REC.SECTOREISOR          ; --14
    OUT_REC.OR_CTACLI                     := IN_REC.OR_CTACLI            ; --15
    OUT_REC.OR_NUMOFI                     := IN_REC.OR_NUMOFI            ; --16
    OUT_REC.OR_CODISO                     := IN_REC.OR_CODISO            ; --17
    OUT_REC.IN_RATSOB                     := IN_REC.IN_RATSOB            ; --18
    ---------NUEVOS-------------------------------------------------------
    OUT_REC.IN_SEGMBSINI                  := VV_IN_SEGMBSINI             ; --19
    OUT_REC.IN_SEGMBS                     := VV_IN_SEGMBS                ; --20
    OUT_REC.IN_SEGSTDA_INI                := VV_IN_SEGSTDA               ; --21
    OUT_REC.rating_ISIN                   := VV_RAT_FINAL                ; --22
    OUT_REC.fch_rating_ISIN               := VV_FEC_RAT_FINAL            ; --23
    OUT_REC.FI_POSPRESTDA_INI             := VN_FI_POSPRESTDA_INI        ; --24

        pipe row(out_rec);

     END LOOP;

    EXCEPTION WHEN OTHERS THEN
       RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(v_NumErr)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
  END F_GARANTIAS;

END;

/

show errors;
--FLA FIN

/************************************************************************************/
/* CREATE DE LA DEFINICION DEL PACKAGE   BAS_MEN.CALCULO_STDA                       */
/************************************************************************************/
CREATE OR REPLACE PACKAGE BAS_MEN.CALCULO_STDA IS

    TYPE CURSOR_BASILEA_SEGMENT_STDA IS REF CURSOR RETURN BAS_MEN.VISTA_SEGMENT_STDA%ROWTYPE;
    TYPE T_ARRAY_BASILEA_SEGMENT_STDA IS TABLE OF BAS_MEN.SEGMBS1_STDA%ROWTYPE;

    TYPE CURSOR_BASILEA IS REF CURSOR RETURN BAS_MEN.VISTA_METODO_STDA%ROWTYPE;
    TYPE T_ARRAY_BASILEA_METODO_STDA IS TABLE OF BAS_MEN.BASILEA_STDA%ROWTYPE;

    PROCEDURE SP_OBT_DATOS_MONEDA  ( PE_COD_ISO_MONEDA     IN BAS_MEN.MAESTRO_PAISES_UE_DIVISA.OR_DIVISA%TYPE
                                   , PE_COD_ISO_PAIS       IN BAS_MEN.MAESTRO_PAISES_UE_DIVISA.OR_IDPAIS%TYPE
                                   , PS_ES_MONEDA_PAIS_UE OUT CHAR
                                   , PS_ES_MONEDA_LOCAL   OUT CHAR
                                   , PS_ES_MONEDA_LOCAL_PAIS_UE OUT CHAR
                                   );

    /* FLA 202201 - Miami Fase II -- Procedicimient para calcular excepciones de garantias financieras */
    PROCEDURE SP_CALC_EXCP_PERMITIDAS ( PE_CLUNICONTR  IN BAS_MEN.MAESTRO_RD874.OPERACION%TYPE
                                      , PE_ID_CLIENTE  IN BAS_MEN.MAESTRO_NOSUSCEPT_OFEX.IDCLIENTE%TYPE
                                      , PE_CODGAR      IN BAS_MEN.BASILEA.OR_CODGAR%TYPE
                                      , PS_EXCEPCION   OUT CHAR
                    );


    FUNCTION F_SEGMENT_STDA (CUR IN CURSOR_BASILEA_SEGMENT_STDA, PN_FECPRO IN NUMBER) RETURN T_ARRAY_BASILEA_SEGMENT_STDA
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED;

    FUNCTION F_METODO_STDA (CUR IN CURSOR_BASILEA, PN_FECPRO IN NUMBER)RETURN T_ARRAY_BASILEA_METODO_STDA
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED;

END;
/

show errors;

/************************************************************************************/
/* CREATE DE LA DEFINICION DE LA FUNCION DEL PACKAGE                                */
/************************************************************************************/
CREATE OR REPLACE PACKAGE BODY BAS_MEN.CALCULO_STDA AS
    --
    -- Procedimiento de obtención de datos de moneda/divisa según paises.
    --
    PROCEDURE SP_OBT_DATOS_MONEDA  ( PE_Cod_ISO_Moneda       IN BAS_MEN.MAESTRO_PAISES_UE_DIVISA.OR_DIVISA%TYPE
                                   , PE_Cod_ISO_Pais         IN BAS_MEN.MAESTRO_PAISES_UE_DIVISA.OR_IDPAIS%TYPE
                                   , PS_Es_Moneda_Pais_UE   OUT CHAR
                                   , PS_Es_Moneda_Local     OUT CHAR
                                   , PS_Es_Moneda_Local_Pais_UE OUT CHAR
                                   )
    IS

        v_Es_Pais_UE                VARCHAR2(1) DEFAULT 'N';
        v_Es_Moneda_Pais_UE         VARCHAR2(1) DEFAULT 'N';
        v_Es_Moneda_Local_Pais_UE   VARCHAR2(1) DEFAULT 'N';
        v_Es_Moneda_Local_Pais_NOUE VARCHAR2(1) DEFAULT 'N';

    BEGIN
    	

        Ps_Es_Moneda_Pais_UE        := 'N';
        Ps_Es_Moneda_Local          := 'N';
        v_Es_Moneda_Local_Pais_UE   := 'N';
        v_Es_Moneda_Local_Pais_NOUE := 'N';

        BEGIN

          SELECT DISTINCT 'S'
             INTO v_Es_Pais_UE
             FROM BAS_MEN.MAESTRO_PAISES_UE_DIVISA
            WHERE OR_IDPAIS = PE_Cod_ISO_Pais;
        EXCEPTION
             WHEN OTHERS THEN
                  v_Es_Pais_UE      := 'N';
        END;

        BEGIN

          SELECT DISTINCT 'S'
             INTO v_Es_Moneda_Pais_UE
             FROM BAS_MEN.MAESTRO_PAISES_UE_DIVISA
            WHERE OR_DIVISA  = PE_Cod_ISO_Moneda;

            IF ( v_Es_Pais_UE = 'S' AND v_Es_Moneda_Pais_UE = 'S' ) THEN
                  PS_Es_Moneda_Pais_UE      := 'S';
            END IF;

        EXCEPTION
             WHEN OTHERS THEN
                  PS_Es_Moneda_Pais_UE      := 'N';
        END;

        BEGIN
           SELECT 'S'
             INTO V_Es_Moneda_Local_Pais_UE
             FROM BAS_MEN.MAESTRO_PAISES_UE_DIVISA
            WHERE OR_DIVISA = PE_Cod_ISO_Moneda
              AND OR_IDPAIS = PE_Cod_ISO_Pais;
        EXCEPTION
             WHEN OTHERS THEN
                  V_Es_Moneda_Local_Pais_UE := 'N';
        END;

        BEGIN
           SELECT 'S'
             INTO v_Es_Moneda_Local_Pais_NOUE
             FROM BAS_MEN.MAESTRO_PAISES_NOUE_DIVISA
            WHERE OR_DIVISA = PE_Cod_ISO_Moneda
              AND OR_IDPAIS = PE_Cod_ISO_Pais;
        EXCEPTION
             WHEN OTHERS THEN
                  v_Es_Moneda_Local_Pais_NOUE := 'N';
        END;

        IF ( V_Es_Moneda_Local_Pais_UE = 'S' OR v_Es_Moneda_Local_Pais_NOUE = 'S' ) THEN
             Ps_Es_Moneda_Local := 'S';
        END IF;

    END;

    /* FLA 202201 - Miami Fase II -- Procedicimient para calcular excepciones de garantias financieras */
    PROCEDURE SP_CALC_EXCP_PERMITIDAS ( PE_CLUNICONTR  IN BAS_MEN.MAESTRO_RD874.OPERACION%TYPE
                                      , PE_ID_CLIENTE  IN BAS_MEN.MAESTRO_NOSUSCEPT_OFEX.IDCLIENTE%TYPE
                                      , PE_CODGAR      IN BAS_MEN.BASILEA.OR_CODGAR%TYPE
                                      , PS_EXCEPCION   OUT CHAR
                                      )
     IS
       V_EXCEPCION_1         VARCHAR2(1) DEFAULT 'N';
       V_EXCEPCION_2         VARCHAR2(1) DEFAULT 'N';
       V_EXCEPCION_3         VARCHAR2(1) DEFAULT 'N';

  BEGIN
    --Inicializamos variable por defecto con el valor 'N'
	PS_EXCEPCION := 'N';
   
    --Excepcion 1
    -- Contratos amparados en el RD874
       BEGIN
          SELECT DISTINCT 'S'
             INTO V_EXCEPCION_1
             FROM BAS_MEN.MAESTRO_RD874
            WHERE SUBSTR(OPERACION, 1, 10)  = PE_CLUNICONTR;
        EXCEPTION
             WHEN OTHERS THEN
                  V_EXCEPCION_1      := 'N';
        END;

    -- Excepcion 2
    -- Banca privada de Miami (solución parcial por ahora)
        BEGIN
          SELECT DISTINCT 'S'
            INTO V_EXCEPCION_2
            FROM BAS_MEN.MAESTRO_NOSUSCEPT_OFEX
           WHERE IDCLIENTE  = PE_ID_CLIENTE
             AND UPPER(COMENTARIO) = 'BANCA PRIVADA';
         EXCEPTION
              WHEN OTHERS THEN
                   V_EXCEPCION_2 := 'N';
        END;

    --Excepcion 3
    --Cash y depósitos pignorados
    IF PE_CODGAR IN ('GR 12103', 'GR 12301', 'GR 12101', 'GR 12102', 'GR 12104') THEN
      V_EXCEPCION_3 := 'S';
    END IF;

    IF V_EXCEPCION_1 = 'S' OR V_EXCEPCION_2 = 'S' OR V_EXCEPCION_3 = 'S' THEN
       PS_EXCEPCION := 'S';
	ELSE   
	   PS_EXCEPCION := 'N';
    END IF;
	
  END;

    FUNCTION F_SEGMENT_STDA (cur IN cursor_basilea_SEGMENT_STDA, PN_FECPRO IN NUMBER) RETURN t_array_basilea_SEGMENT_STDA
             parallel_enable(PARTITION cur by any)
             PIPELINED
          as

      in_rec cur%ROWTYPE;
      out_rec BAS_MEN.SEGMBS1_STDA%ROWTYPE;
      v_num NUMBER;

      VV_IN_SEGMBS1      VARCHAR2(3);
      VV_TROBAT          VARCHAR2(2);
      VN_TOT_EADAIRB     FLOAT;
      VV_ROWID           VARCHAR2(12);
      VN_COUNT           NUMBER(9):=0;
      VN_NUMERR          NUMBER(3);
      VV_MENSAJE         VARCHAR2(255);

      BEGIN
      LOOP

        fetch cur into in_rec;
        EXIT WHEN cur%notfound;

        VN_COUNT:= VN_COUNT + 1;
        VV_ROWID:= TO_CHAR(IN_REC.OR_IDREG);
        /* RMR 28/05/2020 Cambiado valor de la variable VV_IN_SEGMBS1 a ? para que estos acaben con un RW del 100% */
        /* VV_IN_SEGMBS1:= '500'; */
        VV_IN_SEGMBS1:= '?';
        VN_TOT_EADAIRB:= 0;
        VV_TROBAT := 'SI';
        VN_NUMERR:= 100;

        -- 201906 - Suma de exposici¢n STDA agrupando por id_cliente.
        BEGIN
           SELECT FI_SUMEAD
             INTO VN_TOT_EADAIRB
             FROM BAS_MEN.MAESTRO_SUMEAD_STDA
            WHERE ID_CLIENTE = IN_REC.ID_CLIENTE;
        EXCEPTION
          WHEN OTHERS THEN
              IF IN_REC.FI_ELIMI1 IN ('NO','TITACT2','RFNEG','SWATIT','CRSUB','BONTIT','LINLIQ','EQUITY', 'SRABS') AND IN_REC.OR_TIPOPE <> 'RF' THEN
                     IF (IN_REC.IN_SEGSTDA_HIP = 'RRE') AND IN_REC.IN_INDMOR NOT IN ('SI', 'CT', 'AD') THEN /*JCVJCVJCV 201403 NREQ*/ 
                          VN_TOT_EADAIRB := IN_REC.OR_SALDO_ORIG3; /*NO Dejan de sumar los RRE (Excepto si son Alto Riesgo o Morosos) XCG, 30/12/10 sOLO SUMA EL TRAMO 3 CJVJCV 201403*/
                          -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                     ELSE
                         VN_TOT_EADAIRB := IN_REC.OR_DISPTO;
                     END IF;
              ELSE
                  VN_TOT_EADAIRB := 0;
              END IF;
        END;

        VN_NUMERR:= 200;
        /* RMR 28/05/2020 Movida inserción de valor para que no acaben con RW 100% los que deberían tener un RW 0% */
        VV_IN_SEGMBS1:= '500';
        --Segmentació PYME según ventas consolidadas, individuales y total activo.

        IF IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','002','017') THEN
           /* Nuevos requerimientos Pyme Minorista: menor 250 empleados y (ventas menor 50M o activo menor 43M). XCG, 18/10/13. (2014)*/
           IF IN_REC.NUM_EMPLEADOS <= 250 AND (IN_REC.IN_VTAGRU_CONS/1000000 <= 50 OR IN_REC.IN_ACTIVO_CONS/1000000 <= 43) THEN
               VV_IN_SEGMBS1:= '501';
                IF VN_TOT_EADAIRB > 1000000 THEN
                  VV_IN_SEGMBS1:= '500';
               END IF;
           END IF;
        ELSE
             VV_IN_SEGMBS1:= '501';
             IF VN_TOT_EADAIRB > 1000000 THEN
                VV_IN_SEGMBS1:= '500';
             END IF;
        END IF;

        /* Registros por tratamiento directo a empresas*/
        IF IN_REC.IN_TIPOREG IN ('DI', 'SI') AND IN_REC.IN_SEGMBSINI = '005' THEN
           VV_IN_SEGMBS1 := '500';

          /* 201606 Se cambia la identificación de la RF, en lugar de ser por epígrafe será por el Tipo de Operación (OR_TIPOPE)*/
        ELSIF IN_REC.IN_TIPOREG IN ('FA') AND IN_REC.OR_TIPOPE = 'RF' AND nvl(IN_REC.OR_PROCED, '?') <> 'TES-INTERM' AND IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027')  THEN
              VV_IN_SEGMBS1 := '500';
        END IF;

        VN_NUMERR:= 300;


        IF  IN_REC.IN_TIPOREG IN ('DN','RN','MMDN','MMRN') THEN

          VN_TOT_EADAIRB := IN_REC.FI_SUMEXP;
          VV_IN_SEGMBS1  := IN_REC.IN_SEGMBS1;

        END IF;


        OUT_REC.OR_IDREG   := IN_REC.OR_IDREG;
        OUT_REC.IN_SEGMBS1 := VV_IN_SEGMBS1;
        OUT_REC.EAD        := VN_TOT_EADAIRB;

        pipe row(out_rec);

        END LOOP;

     EXCEPTION
       WHEN OTHERS THEN

            RAISE_APPLICATION_ERROR(-20000, 'VN_NUMERR:'||VN_NUMERR);

    end F_SEGMENT_STDA;

    --
    -- Función de Cálculo del STDA
    --
    FUNCTION F_METODO_STDA (cur IN cursor_basilea, PN_FECPRO IN NUMBER)RETURN t_array_basilea_METODO_STDA
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED
      AS

      in_rec cur%ROWTYPE;
      out_rec BAS_MEN.BASILEA_STDA%ROWTYPE;
      v_num NUMBER;

      VV_ROWID                      VARCHAR2(12);
      VN_COUNT                      NUMBER(9):=0;
      VN_COUNT_KO                   NUMBER(9):=0;
      VV_ERROR                      VARCHAR2(100);
      VN_NUMERR                     NUMBER(3);
      VV_RET                        VARCHAR2(2);
      FALLO1                        EXCEPTION;
      VV_GARANTIA_ENCONTRADA        BOOLEAN;
      VV_FAC_COBERT_ENCONTRADO      BOOLEAN;
      VV_CTASTDA_ENCONTRADA         NUMBER(1);
      VV_RATING                     VARCHAR2(4);
      VN_RATING_AVAL                VARCHAR2(4);
      VN_PROVIESP                   FLOAT;
      VN_RATIO                      FLOAT;
      VN_NOM                        VARCHAR2(20);
      VN_RAT                        VARCHAR2(4);
      VN_FI_RWASTDA                 FLOAT;
      VN_FI_RWASTDA_AVAL            FLOAT;
      VN_FI_RWASTDA_XXX             FLOAT;
      VN_FI_RWA1                    FLOAT;
      VN_FI_RWA2                    FLOAT;
      VN_FI_RWA3                    FLOAT;
      VN_FI_RWA1_INI                FLOAT; -- 201512 RWA Tramos Inicial (Antes de mitigación)
      VN_FI_RWA2_INI                FLOAT; -- 201512 RWA Tramos Inicial (Antes de mitigación)
      VN_FI_RWA3_INI                FLOAT; -- 201512 RWA Tramos Inicial (Antes de mitigación)
      VN_FI_CCFSTDA                 FLOAT;
      VN_FI_CCFSTDA_XXX             FLOAT;
      VN_FAIRVABOCON                float;
      VV_IN_SEGSTDA                 VARCHAR2(50);
      VV_IN_SEGRWASTDA              VARCHAR2(50);
      VV_IN_SEGSTDA1                VARCHAR2(50);
      VV_IN_SEGSTDA_AUX             VARCHAR2(50);
      VV_IN_SEGSTDA_AVAL            VARCHAR2(50);
      VV_IN_SEGMBS3                 VARCHAR2(3);
      VV_USO_PROPIO                 VARCHAR2(2);
      VN_FI_POSPRESTDA              FLOAT;
      VN_FI_POSPRESTDA_INI          FLOAT;
      VN_FI_POSPRESTDA_HIP          FLOAT;
      VN_FI_POSPOSTSTDA             FLOAT;
      VV_IN_SEGSTDA_PRE             VARCHAR2(50);
      VV_IN_SEGSTDA_INI             VARCHAR2(50);
      VV_IN_SEGSTDA_POST            VARCHAR2(50);
      VV_IN_SEGSTDA_CP_INI          VARCHAR2(50);
      VV_TIPO_FINCA                 VARCHAR2(11);
      VV_CONSTRUIDA                 VARCHAR2(2);
      VN_OR_VALTAS                  float;
      VN_OR_CONCED                  float;
      VN_OR_SALDO_ORIG              FLOAT;
      VN_OR_SALDO_ORIG1             FLOAT;
      VN_OR_SALDO_ORIG2             FLOAT;
      VN_OR_SALDO_ORIG3             FLOAT;
      VN_OR_SALDO_ORIGCON           FLOAT;
      VN_OR_SALDO_ORIGCON1          FLOAT;
      VN_OR_SALDO_ORIGCON2          FLOAT;
      VN_OR_SALDO_ORIGCON3          FLOAT;
      VN_OR_PROVAPL1                FLOAT;
      VN_OR_PROVAPL2                FLOAT;
      VN_OR_PROVAPL3                FLOAT;
      VN_FI_EXPSTDA_FULLY           FLOAT;
      VN_FI_EXPSTDA_FULLY_CON       FLOAT;
      VN_FI_EXPSTDA_FULLY1          FLOAT;
      VN_FI_EXPSTDA_FULLY2          FLOAT;
      VN_FI_EXPSTDA_FULLY3          FLOAT;
      VN_FI_EXPSTDA_FULLY_CON1      FLOAT;
      VN_FI_EXPSTDA_FULLY_CON2      FLOAT;
      VN_FI_EXPSTDA_FULLY_CON3      FLOAT;
      VN_FI_EXPSTDA_PHASEIN         FLOAT;
      VN_FI_EXPSTDA_PHASEIN_CON     FLOAT;
      VN_FI_EXPSTDA_PHASEIN1        FLOAT;
      VN_FI_EXPSTDA_PHASEIN2        FLOAT;
      VN_FI_EXPSTDA_PHASEIN3        FLOAT;
      VN_FI_EXPSTDA_PHASEIN_CON1    FLOAT;
      VN_FI_EXPSTDA_PHASEIN_CON2    FLOAT;
      VN_FI_EXPSTDA_PHASEIN_CON3    FLOAT;
      VN_FI_PROV_PHASEIN            FLOAT;
      VN_FI_PROV_PHASEIN_CON        FLOAT;
      VN_FI_PROV_PHASEIN1           FLOAT;
      VN_FI_PROV_PHASEIN2           FLOAT;
      VN_FI_PROV_PHASEIN3           FLOAT;
      VN_FI_PROV_PHASEIN_CON1       FLOAT;
      VN_FI_PROV_PHASEIN_CON2       FLOAT;
      VN_FI_PROV_PHASEIN_CON3       FLOAT;
      VN_FI_PROV_FULLY              FLOAT;
      VN_FI_PROV_FULLY_CON          FLOAT;
      VN_FI_PROV_FULLY1             FLOAT;
      VN_FI_PROV_FULLY2             FLOAT;
      VN_FI_PROV_FULLY3             FLOAT;
      VN_FI_PROV_FULLY_CON1         FLOAT;
      VN_FI_PROV_FULLY_CON2         FLOAT;
      VN_FI_PROV_FULLY_CON3         FLOAT;
      VN_TOTAL                      FLOAT;
      VN_TOTALCON                   FLOAT;
      VN_TOTAL1                     FLOAT;
      VN_TOTAL2                     FLOAT;
      VN_TOTAL3                     FLOAT;
      VN_TOTALCON1                  FLOAT;
      VN_TOTALCON2                  FLOAT;
      VN_TOTALCON3                  FLOAT;
      VN_TOTAL_FULLY                FLOAT;
      VN_TOTAL_FULLY_CON            FLOAT;
      VN_TOTAL_FULLY1               FLOAT;
      VN_TOTAL_FULLY2               FLOAT;
      VN_TOTAL_FULLY3               FLOAT;
      VN_TOTAL_FULLY_CON1           FLOAT;
      VN_TOTAL_FULLY_CON2           FLOAT;
      VN_TOTAL_FULLY_CON3           FLOAT;
      VN_TOTAL_PHASEIN              FLOAT;
      VN_TOTAL_PHASEIN_CON          FLOAT;
      VN_TOTAL_PHASEIN1             FLOAT;
      VN_TOTAL_PHASEIN2             FLOAT;
      VN_TOTAL_PHASEIN3             FLOAT;
      VN_TOTAL_PHASEIN_CON1         FLOAT;
      VN_TOTAL_PHASEIN_CON2         FLOAT;
      VN_TOTAL_PHASEIN_CON3         FLOAT;
      VN_OR_TOTDISPTO               FLOAT;
      VV_IN_TRAMO1                  FLOAT;
      VV_IN_TRAMO2                  FLOAT;
      VV_IN_TRAMO3                  FLOAT;
      VN_MOROSO                     VARCHAR2(2);
      SW_MONEDA_PAIS_UE             VARCHAR2(1);
      SW_MONEDA_LOCAL               VARCHAR2(1);
      SW_Moneda_Local_Pais_UE       VARCHAR2(1);
      VV_RATING_EXT                 VARCHAR2(4);
      VV_MENSAJE                    VARCHAR2(255);
      VV_IN_SEGSTDA_HIP             VARCHAR2(25);
      v_ECC_Cualificada             VARCHAR2(2) DEFAULT '?';
      v_Depo_Ecc_Cualificada        VARCHAR2(2) DEFAULT '?';
      vV_C_CCP                      NUMBER(1)   DEFAULT 0;
--FLA5
    SW_EXCEPCION                  VARCHAR2(1);
    SW_MITIGACION                 VARCHAR2(1);
--FLA5 FIN

      BEGIN

      LOOP fetch cur into in_rec;
         EXIT WHEN cur%notfound;

           VN_NUMERR:= 10;
           VN_COUNT := VN_COUNT + 1;
           VV_ROWID := TO_CHAR(IN_REC.OR_IDREG);
           VN_TOTAL    := IN_REC.TOTAL;
           VN_TOTALCON := IN_REC.TOTALCON;
           VN_OR_TOTDISPTO := 0;
           VN_OR_VALTAS := 0;
           VV_IN_SEGRWASTDA := '?';

             /********************************************************************************************************/
             /* NO APLICAMOS PROVISIONES                                                                             */
            /********************************************************************************************************/

           VV_RATING                            :='NR';
           VN_RATIO                             := 0;
           VN_FI_CCFSTDA                        := 1;
           VN_FI_RWASTDA                        := 1;
           VN_FI_POSPRESTDA                     := 0;
           VV_IN_SEGSTDA                        := '?';
           VV_IN_SEGSTDA_INI                    := '?';
           VV_IN_SEGSTDA_HIP                    := '?';
           VV_IN_SEGSTDA_PRE                    := NULL;
           VV_IN_SEGSTDA_POST                   := NULL;
           VN_FI_POSPOSTSTDA                    := 0;
           VN_FI_POSPRESTDA_INI                 := 1;
           VN_FI_POSPRESTDA_HIP                 := -9;
           VV_IN_SEGSTDA_CP_INI                 := '?';
           VV_IN_TRAMO1                         := 0;
           VV_IN_TRAMO2                         := 0;
           VV_IN_TRAMO3                         := 0;
           VN_FI_RWA1                           := 0;
           VN_FI_RWA2                           := 0;
           VN_FI_RWA3                           := 0;
           VN_FI_RWA1_INI                       := 0; -- 201512 RWA Tramos Inicial (Antes de mitigación)
           VN_FI_RWA2_INI                       := 0; -- 201512 RWA Tramos Inicial (Antes de mitigación)
           VN_FI_RWA3_INI                       := 0; -- 201512 RWA Tramos Inicial (Antes de mitigación)
           VN_OR_SALDO_ORIG                     := IN_REC.TOTAL;
           VN_OR_SALDO_ORIG1                    := 0;
           VN_OR_SALDO_ORIG2                    := 0;
           VN_OR_SALDO_ORIG3                    := 0;
           VN_OR_SALDO_ORIGCON                  := IN_REC.TOTALCON;
           VN_OR_SALDO_ORIGCON1                 := 0;
           VN_OR_SALDO_ORIGCON2                 := 0;
           VN_OR_SALDO_ORIGCON3                 := 0;
           VN_OR_PROVAPL1                       := 0;
           VN_OR_PROVAPL2                       := 0;
           VN_OR_PROVAPL3                       := 0;
           VN_FI_EXPSTDA_FULLY                  := 0;
           VN_FI_EXPSTDA_FULLY_CON              := 0;
           VN_FI_EXPSTDA_FULLY1                 := 0;
           VN_FI_EXPSTDA_FULLY2                 := 0;
           VN_FI_EXPSTDA_FULLY3                 := 0;
           VN_FI_EXPSTDA_FULLY_CON1             := 0;
           VN_FI_EXPSTDA_FULLY_CON2             := 0;
           VN_FI_EXPSTDA_FULLY_CON3             := 0;
           VN_FI_EXPSTDA_PHASEIN                := 0;
           VN_FI_EXPSTDA_PHASEIN_CON            := 0;
           VN_FI_EXPSTDA_PHASEIN1               := 0;
           VN_FI_EXPSTDA_PHASEIN2               := 0;
           VN_FI_EXPSTDA_PHASEIN3               := 0;
           VN_FI_EXPSTDA_PHASEIN_CON1           := 0;
           VN_FI_EXPSTDA_PHASEIN_CON2           := 0;
           VN_FI_EXPSTDA_PHASEIN_CON3           := 0;
           VN_TOTAL1                            := 0;
           VN_TOTAL2                            := 0;
           VN_TOTAL3                            := 0;
           VN_TOTALCON1                         := 0;
           VN_TOTALCON2                         := 0;
           VN_TOTALCON3                         := 0;
           VN_TOTAL_FULLY                       := 0;
           VN_TOTAL_FULLY_CON                   := 0;
           VN_TOTAL_FULLY1                      := 0;
           VN_TOTAL_FULLY2                      := 0;
           VN_TOTAL_FULLY3                      := 0;
           VN_TOTAL_FULLY_CON1                  := 0;
           VN_TOTAL_FULLY_CON2                  := 0;
           VN_TOTAL_FULLY_CON3                  := 0;
           VN_TOTAL_PHASEIN                     := 0;
           VN_TOTAL_PHASEIN_CON                 := 0;
           VN_TOTAL_PHASEIN1                    := 0;
           VN_TOTAL_PHASEIN2                    := 0;
           VN_TOTAL_PHASEIN3                    := 0;
           VN_TOTAL_PHASEIN_CON1                := 0;
           VN_TOTAL_PHASEIN_CON2                := 0;
           VN_TOTAL_PHASEIN_CON3                := 0;
           VV_IN_SEGSTDA_AUX                    := '?';
           VN_FI_RWASTDA_XXX                    := NULL;
           VV_RATING_EXT                        := 'NR';
           VN_FI_PROV_PHASEIN                   := 0;
           VN_FI_PROV_PHASEIN_CON               := 0;
           VN_FI_PROV_PHASEIN1                  := 0;
           VN_FI_PROV_PHASEIN2                  := 0;
           VN_FI_PROV_PHASEIN3                  := 0;
           VN_FI_PROV_PHASEIN_CON1              := 0;
           VN_FI_PROV_PHASEIN_CON2              := 0;
           VN_FI_PROV_PHASEIN_CON3              := 0;
           VN_FI_PROV_FULLY                     := 0;
           VN_FI_PROV_FULLY_CON                 := 0;
           VN_FI_PROV_FULLY1                    := 0;
           VN_FI_PROV_FULLY2                    := 0;
           VN_FI_PROV_FULLY3                    := 0;
           VN_FI_PROV_FULLY_CON1                := 0;
           VN_FI_PROV_FULLY_CON2                := 0;
           VN_FI_PROV_FULLY_CON3                := 0;
           VN_MOROSO                            := 'NO';

               /* TRATAMIENTO DEL TOTALDISPUESTO */
               /* 16/02/2022 BNM HDEV-111873 - ofex en los tramos hipotecarios   */
               /* IF IN_REC.IN_TIPOREG in ('OXE', 'MMOXE', 'PX', 'OX') THEN
                  VN_OR_TOTDISPTO := IN_REC.or_valtas*(IN_REC.or_impltv/100);
                  VN_OR_VALTAS    := IN_REC.or_valtas;
                  VN_OR_CONCED    := IN_REC.OR_CONCED;
               ELSE */
                    BEGIN
                       SELECT OR_DISPTO, OR_VALTAS, OR_CONCED
                         INTO VN_OR_TOTDISPTO, VN_OR_VALTAS, VN_OR_CONCED
                         FROM BAS_MEN.MAESTRO_REFOPE_DISPTO
                        WHERE OR_REFOPE = IN_REC.OR_REFOPE
                          AND OR_IDPERS = IN_REC.OR_IDPERS
                          AND OR_ENTITY = IN_REC.OR_ENTITY;
                    EXCEPTION
                         WHEN OTHERS THEN
                              VN_OR_TOTDISPTO := 0;
                              VN_OR_VALTAS := 0;
                              VN_OR_CONCED := 0;
                    END;
               /* END IF; 16/02/2022 BNM HDEV-111873 - ofex en los tramos hipotecarios   */

               /* TRATAMIENTO VALOR DE TASACIÓN MENOR O IGUAL A CERO */
               IF VN_OR_VALTAS <= 0 THEN
                   IF VN_OR_CONCED = 0 THEN
                      VN_OR_VALTAS := VN_OR_TOTDISPTO;
                   ELSE
                      VN_OR_VALTAS := VN_OR_CONCED;
                   END IF;
               END IF;


               VN_NUMERR:= 30;

               -- Obtiene el segmento estandar para las exposiciones
               -- que no sean derechos de cobro, projecte finance, real estate ni bonos garantizados
               IF IN_REC.IN_SEGMBS NOT IN ('Derechos Cobro','Project Finance','Real Estate','Object Finance') AND IN_REC.IN_SEGMBSINI <> '034' THEN
                   BEGIN
                      SELECT IN_SEGSTDA, IN_SEGRWASTDA
                        INTO VV_IN_SEGSTDA, VV_IN_SEGRWASTDA
                        FROM BAS_MEN.MAESTRO_SEGMENTOS
                       WHERE IN_SEGMBSINI = IN_REC.IN_SEGMBSINI;
                   EXCEPTION
                      WHEN OTHERS THEN
                         VV_IN_SEGSTDA:= '?';
                   END;

                  /*El segmento EMPRESAS/RETAIL NO PUEDE DARSE. Vuelve a evaluarse nuevamente para determinar si es Empresa o Retail. JCVJCVJCV 201403*/
                  IF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS/RETAIL' OR (UPPER(VV_IN_SEGSTDA) = 'RETAIL') THEN
                      IF IN_REC.IN_SEGMBS1 = '501' OR
                         (IN_REC.IN_SEGMBS1  = '?' AND IN_REC.IN_SEGMBSINI NOT IN ('003','005','006','009','010','019','027'))  THEN  /*Se añaden las IIC (Ini 009). XCG 20/06/2018*/
                          VV_IN_SEGSTDA :='Retail';
                      ELSIF IN_REC.IN_SEGMBS1 = '500' OR
                            (IN_REC.IN_SEGMBS1  = '?' AND IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027')) THEN /*Se añaden las IIC (Ini 009). XCG 20/06/2018*/
                            VV_IN_SEGSTDA :='Empresas';
                      END IF;
                  END IF;

                  VN_NUMERR:= 40;

               -- Calcula el segmento estandar para derechos de cobro, projecte finance o real estate
               ELSIF IN_REC.IN_SEGMBS in ('Derechos Cobro','Project Finance','Real Estate', 'Object Finance') THEN

                     IF IN_REC.IN_SEGMBS1 = '?' OR IN_REC.IN_SEGMBS1 IS NULL THEN
                           /* derecho de cobro no es pyme empresas o pyme minoristas
                                                   buscamos el segmento que le corresponde como si de otra exposicion se tratara */
                        BEGIN
                           SELECT IN_SEGSTDA, IN_SEGRWASTDA
                             INTO VV_IN_SEGSTDA, VV_IN_SEGRWASTDA
                             FROM BAS_MEN.MAESTRO_SEGMENTOS
                            WHERE IN_SEGMBSINI = IN_REC.IN_SEGMBSINI
                              AND IN_REC.IN_SEGMBS IN ('Derechos Cobro', 'Project Finance', 'Real Estate','Object Finance');
                        EXCEPTION
                           WHEN OTHERS THEN
                              NULL;
                        END;

                        IF (UPPER(VV_IN_SEGSTDA) = 'EMPRESAS/RETAIL' OR UPPER(VV_IN_SEGSTDA) = 'RETAIL') AND IN_REC.IN_SEGMBS1 = '?' THEN
                            VV_IN_SEGSTDA :='Empresas';
                        END IF;
                     ELSIF IN_REC.IN_SEGMBS1 = '500'  THEN
                           VV_IN_SEGSTDA :='Empresas';
                     ELSIF IN_REC.IN_SEGMBS1 ='501'  THEN
                           VV_IN_SEGSTDA :='Retail';
                     END IF;

               -- Obtiene el segmento estándar del bono garantizado si no se hubiera segmentado como bono garantizado
               -- asi le asignaremos el RWA del emisor. Una vez calculado el RWA del emisor aplicaremos el RWA del bono
               -- ya que para obtener el RWA del bono necesitamos primero conocer el del emisor. Calculado el RWA
               -- se cambiará el segmento estándar por el de bono garantizado.
               ELSIF IN_REC.IN_SEGMBSINI = '034' THEN
                   BEGIN
                      SELECT distinct IN_SEGSTDA, IN_SEGRWASTDA
                        INTO VV_IN_SEGSTDA, VV_IN_SEGRWASTDA
                        FROM BAS_MEN.MAESTRO_SEGMENTOS
                       WHERE IN_SEGBS = IN_REC.IN_SEGMBS
                         and in_segmbsini <> '034'
                         and in_segstda <> 'BMultides';
                   EXCEPTION
                      WHEN OTHERS THEN
                         VV_IN_SEGSTDA:= '?';
                   END;
               END IF;

               /* JCVJCVJCV 201403 Se elimina aqui el tratamiento del 'RRE', 'CRE' Actual ya que no va por segmentos y se añade más adelante el nuevo tratamiento*/

               /* JOM 201512 Modificación tratamiento Inmuebles Adjudicados (AD): tratamiento de "Otros Activos" en lugar de "Morosos"*/
               /*IF IN_REC.IN_INDMOR IN ('SI', 'AD') OR IN_REC.IN_INDMOR_STDA = 'CT' THEN --XCG, 25/03/14. el alto riesgo cambia y va por maestro, lo que antes era alto riesgo pasa a Morosos N -- JCVJCVJCV 201403 Nuevo Tratamiento de Mora STDA*/
               IF IN_REC.IN_INDMOR IN ('SI') OR IN_REC.IN_INDMOR_STDA = 'CT' THEN /*XCG, 25/03/14. el alto riesgo cambia y va por maestro, lo que antes era alto riesgo pasa a Morosos N -- JCVJCVJCV 201403 Nuevo Tratamiento de Mora STDA*/
                  VV_IN_SEGSTDA_AUX := 'Morosos';
               end if;

               VN_NUMERR:= 50;

               IF IN_REC.FI_TIPEXP = 'Undrawn' THEN

                  BEGIN
                    SELECT DISTINCT 'SI'
                      INTO VN_MOROSO
                      FROM BAS_MEN.UNDRAWN_MOROSOS
                     WHERE OR_CLUNIENT    = IN_REC.OR_CLUNIENT
                       AND OR_CLUNIPROD   = IN_REC.OR_CLUNIPROD
                       AND OR_CLUNICONTR  = IN_REC.OR_CLUNICONTR
                       AND OR_TITULARITAT = IN_REC.OR_TITULARITAT;
                  EXCEPTION
                       WHEN OTHERS THEN
                            VN_MOROSO := 'NO';
                  END;

               END IF;

              -- Llamada a procedure para realizar el calculo del Factor de conversion de credito
              BAS_MEN.FNC_CALCUL_CCF('STDA',
                              1,
                              1,
                              UPPER(IN_REC.IN_SEGMBS),
                              UPPER(IN_REC.FI_TIPEXP),
                              UPPER(IN_REC.OR_PROCED),
                              UPPER(IN_REC.OR_TIPOPE),
                              IN_REC.OR_VIDINI,
                              IN_REC.OR_VIDRES,
                              IN_REC.OR_CLUNICUENT,
                              VN_MOROSO,
                              IN_REC.OR_TIPAVA,
                              IN_REC.IN_SEGMBSINI,
                              IN_REC.OR_EPIIND,
                              IN_REC.FI_EPICON,
                              IN_REC.IN_SEGMBS0,  --AÑADIMOS CAMPO NUEVO PARA TRATAR PROMOCIONES
                              'NO',
                              IN_REC.OR_CTAIND,
                              0,
                              IN_REC.OR_TIPGAR,
                              IN_REC.OR_ENTITY,
                              IN_REC.in_sucept,
                              IN_REC.IN_TIPOREG,
                              NULL, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                              NULL, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                              NULL, -- HDEV-107786 - JRJ Se añaden por modificar la funcion ccf 22/06
                              VN_FI_CCFSTDA,
                              VV_RET);

               IF VV_RET <> 'OK' THEN
                  VV_RET:= SUBSTR('NUM:'||TO_CHAR(VN_NUMERR)||'FNC_CALCUL_CCF:'||VV_RET,1,100);
                  RAISE FALLO1;
               END IF;

               /* TRATAMIENTO ESPECiAL PARA BSFINCOM */
               -- 201606 Para derivados de BSFINCOM CCF 0
               --IF IN_REC.OR_ENTITY = 242 AND SUBSTR(IN_REC.FI_EPICON,1,5) = '03002' THEN
               IF IN_REC.OR_ENTITY = 242 AND IN_REC.FI_TIPEXP = 'Undrawn' THEN
                  VN_FI_CCFSTDA := 0;
               END IF;

               /*********************************************************************************************************************/
               /* RECALCULO DEL CCFSTDA PARA LOS DISPONIBLES DE PRESTAMOS EN FUNCION DEL TIPO DE PRESTAMO Y DE LA FECHA DE CARENCIA */
               /*********************************************************************************************************************/
               IF IN_REC.OR_PROCED = 'PR-DISPONI' AND (IN_REC.IN_SEGMBS0 <> '200' OR (IN_REC.IN_SEGMBS0 = '200' AND IN_REC.OR_FECCAR = 0)) THEN
                  IF IN_REC.OR_TIPOPR IN (49, 55, 89, 127, 170, 5049, 5127, 7049, 8262) THEN
                     VN_FI_CCFSTDA := 0;
                  ELSIF IN_REC.OR_TIPOPR IN (4, 46, 77, 81, 82, 83, 84, 95, 101, 102, 103, 123, 124, 138, 139,
                                          150, 151, 152, 159, 160, 183, 184, 196, 2101, 2201,
                                          5081, 5082, 5083, 5095, 5101, 5103, 6081, 6083) THEN
                        IF IN_REC.OR_FECCAR <> 0 THEN
                           IF IN_REC.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                           END IF;
                        ELSE
                             IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(IN_REC.OR_FECOPE, 'YYYYMMDD'))/30 > 18 THEN
                                VN_FI_CCFSTDA := 0;
                             END IF;
                        END IF;
                  ELSIF IN_REC.OR_TIPOPR IN (125, 129, 162, 166, 167, 177, 179, 180, 5166, 5168, 6166) THEN
                        IF IN_REC.OR_FECCAR <> 0 THEN
                           IF IN_REC.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                           END IF;
                        ELSE
                             IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(IN_REC.OR_FECOPE, 'YYYYMMDD'))/30 > 36 THEN
                                VN_FI_CCFSTDA := 0;
                             END IF;
                        END IF;
                  ELSIF IN_REC.OR_TIPOPR = 8137 THEN
                        IF IN_REC.OR_FECCAR <> 0 THEN
                           IF IN_REC.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                           END IF;
                        ELSE
                             IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(IN_REC.OR_FECOPE, 'YYYYMMDD'))/30 > 48 THEN
                                VN_FI_CCFSTDA := 0;
                             END IF;
                        END IF;
                  ELSIF IN_REC.OR_TIPOPR IN (7, 5047) THEN
                        IF IN_REC.OR_FECCAR <> 0 THEN
                           IF IN_REC.OR_FECCAR < PN_FECPRO THEN
                              VN_FI_CCFSTDA := 0;
                           END IF;
                        ELSE
                             VN_FI_CCFSTDA := 0;
                        END IF;
                  ELSIF IN_REC.OR_TIPOPR IN (117, 5118) THEN
                        IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(IN_REC.OR_FECOPE, 'YYYYMMDD'))/30 > 12 THEN
                           VN_FI_CCFSTDA := 0;
                        END IF;
                  ELSIF IN_REC.OR_TIPOPR IN (176, 8151, 8219, 8221, 134, 135) THEN
                        IF TO_NUMBER(TO_DATE(PN_FECPRO, 'YYYYMMDD') - TO_DATE(IN_REC.OR_FECOPE, 'YYYYMMDD'))/30 > 36 THEN
                           VN_FI_CCFSTDA := 0;
                        END IF;
                  END IF;

               END IF;

               /************************************************************************************/
               /* OBTENCION DEL CCF PARA OTROS ACTIVOS A PARTIR DEL MAESTRO DE EPIGRAFES SEGMENTOS */
               /************************************************************************************/
               VN_FI_RWASTDA_XXX := NULL;
               IF IN_REC.in_tiporeg in ('DC','DI','DX','FC','IN','OX','SC','SI','SX')
                  OR (IN_REC.IN_SEGMBSINI = 'XXX' AND IN_REC.IN_TIPOREG IN ('SA', 'OXC', 'OXE', 'MMOXE', 'MMSA', 'MMOXC', 'CESA', 'AVSA', 'CEOXE', 'IIC-LTA', 'IIC-FBA')) THEN /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */

                 VN_FI_RWASTDA_XXX := NULL;
                 VN_FI_CCFSTDA_XXX := VN_FI_CCFSTDA;

                 BEGIN
                   SELECT RWA, CCF
                     INTO VN_FI_RWASTDA_XXX, VN_FI_CCFSTDA
                     FROM BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS
                    WHERE FI_EPICON = IN_REC.FI_EPICON
                      AND RWA IS NOT NULL;
                 EXCEPTION
                   WHEN OTHERS THEN
                       VN_FI_RWASTDA_XXX := NULL;
                       VN_FI_CCFSTDA := VN_FI_CCFSTDA_XXX;
                 END;

                 IF NOT (IN_REC.IN_SEGMBSINI = 'XXX' AND IN_REC.IN_TIPOREG <> 'OX') THEN
                    VN_FI_CCFSTDA := VN_FI_CCFSTDA_XXX;
                 END IF;

               END IF;

               -- Los CDS de los derivados de Andorra tienen CCF 0
               IF IN_REC.OR_TIPOPE = 'CDS' AND IN_REC.IN_TIPOREG in ('FA') AND IN_REC.FI_TIPEXP = 'OTC' THEN
                  VN_FI_CCFSTDA := 0.1;
               END IF;

               /* @RMC 20100630: Si el tiporeg es DN o Consolidado Manual tomamos el CCF de basilea */
               IF IN_REC.IN_TIPOREG IN ('ITDN', 'DN', 'MMDN', 'RN','ITRN','MMRN') THEN /* 201606 Se añaden 'RN','ITRN','MMRN' correspondientes a neteo de repos*/
                  VN_FI_CCFSTDA := IN_REC.FI_CCFAIRB;
               END IF;

               VN_NUMERR:= 60;
               --- 29/3/2007: en caso de no tener provisión nos quedamos con la exposición, sea positiva o negativa.


               -- Asignación de la exposicion en funcion del tipo de exposicion
               IF UPPER(IN_REC.FI_TIPEXP) = 'OTC' THEN
                  VN_FI_EXPSTDA_FULLY    := VN_TOTAL;
                  VN_FI_EXPSTDA_FULLY_CON := VN_TOTALCON;
               ELSIF UPPER(IN_REC.FI_TIPEXP) = 'REPOS' THEN
                     VN_FI_EXPSTDA_FULLY    := VN_TOTAL;
                     VN_FI_EXPSTDA_FULLY_CON := VN_TOTALCON;
               ELSE
                  VN_FI_EXPSTDA_FULLY    := VN_TOTAL * VN_FI_CCFSTDA;
                  VN_FI_EXPSTDA_FULLY_CON := VN_TOTALCON * VN_FI_CCFSTDA;

               END IF;

               /* JCVJCVJCV 201403 Se elimina aqui el tratamiento del  TROCEO DE 'RRE', 'CRE' Actual ya que no va por segmentos y se añade más adelante el nuevo tratamiento*/

               VN_NUMERR:= 70;

               /*********************************************************************/
               /*TRATAMIENTO PARA VER SI LA DIVISA ES LOCAL O NO OR_DIVISA OR_CODISO*/
               /*********************************************************************/
               --xcg, 25/03/2014 Se realiza el tratamiento por maestros.
               SW_MONEDA_PAIS_UE := 'N';
               SW_MONEDA_LOCAL   := 'N';

               SP_Obt_Datos_Moneda (IN_REC.OR_DIVISA, IN_REC.OR_IDPAIS, SW_MONEDA_PAIS_UE , SW_MONEDA_LOCAL, SW_Moneda_Local_Pais_UE);

               /*******************************/
               /*OBTENCION DE LAS PONDERACION */
               /*******************************/

            -- JOM 201512 Modificación tratamiento Inmuebles Adjudicados (AD): tratamiento de "Otros Activos" en lugar de "Morosos"
            --IF UPPER(IN_REC.IN_INDMOR) NOT IN ('SI', 'AD') AND IN_REC.IN_INDMOR_STDA <> 'CT' THEN
              IF UPPER(IN_REC.IN_INDMOR) NOT IN ('SI') AND IN_REC.IN_INDMOR_STDA <> 'CT' THEN

                  IF NVL(IN_REC.IN_RATSOB, 'NR') not in ('NR', 'SR', '?') then

                         IF UPPER(VV_IN_SEGSTDA) IN ('SOBERANOS', 'EMPRESAS') THEN
                            VV_RATING := upper(IN_REC.IN_RATSOB);

                            BEGIN
                               SELECT MAX(PERCENT)
                                 INTO VN_FI_RWASTDA
                                 FROM BAS_MEN.MAESTRO_RWA_STDA
                                WHERE NOM     = 'SOBERANOS'
                                  AND RAT_EXT = VV_RATING;
                            EXCEPTION
                                 WHEN NO_DATA_FOUND THEN
                                      VN_FI_RWASTDA := -9;
                            END;

                            VN_FI_POSPRESTDA_INI := nvl(VN_FI_RWASTDA, -9);

                            /*Para empresas nos quedamos con el peor RWA según rating soberano o externo si este es del 100%, sino, nos quedamos con el externo.*/
                            /*El ratextava2 no se utiliza en esta parte, se utiliza en la mitigación de riesgos por avalista.XCG, 5/11/13*/
                            IF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS' THEN /*JCVJCVJCV 201403  Se elimina aqui el tratamiento 'RRE', 'CRE' y se pasa más adelante donde se da el nuevo tratamiento 'RRE', 'CRE'  */
                                -- JCV 201409  Pdte 1º Por RATEXT_ISIN
                                -- EMISION
                                 IF NVL(IN_REC.In_RatExt_ISIN, 'NR') not in ('NR', 'SR', '?') then

                                   VV_RATING_EXT := upper(IN_REC.IN_RATEXT_ISIN);

                                   BEGIN
                                      SELECT MAX(PERCENT)
                                        INTO VN_FI_RWASTDA
                                        FROM BAS_MEN.MAESTRO_RWA_STDA
                                       WHERE NOM     = 'EMPRESAS'
                                         AND RAT_EXT in (VV_RATING_EXT);
                                   EXCEPTION
                                      WHEN NO_DATA_FOUND THEN
                                         VN_FI_RWASTDA := -9;
                                   END;

                                 ELSE -- EMISOR

                                   VV_RATING_EXT := upper(IN_REC.IN_RATEXT);

                                   BEGIN
                                      SELECT MAX(PERCENT)
                                        INTO VN_FI_RWASTDA
                                        FROM BAS_MEN.MAESTRO_RWA_STDA
                                       WHERE NOM     = 'EMPRESAS'
                                         AND RAT_EXT in (VV_RATING_EXT);
                                   EXCEPTION
                                      WHEN NO_DATA_FOUND THEN
                                         VN_FI_RWASTDA := -9;
                                   END;

                                 END IF;

                                 if VN_FI_RWASTDA = 1 and nvl(VV_RATING_EXT, 'NR') in ('NR', '?', 'SR') then
                                    if VN_FI_RWASTDA > VN_FI_POSPRESTDA_INI then -- SI 100% ES MAYOR QUE EL DE SOBERANOS
                                        VN_FI_POSPRESTDA_INI:= VN_FI_RWASTDA; -- TE QUEDAS CON EL 100%
                                    else
                                         VN_FI_RWASTDA:= VN_FI_POSPRESTDA_INI; -- SI EL DE SOBERANOS ES MAYOR TE QUEDAS CON EL DE SOBERANOS
                                    end if;
                                 else
                                      VN_FI_POSPRESTDA_INI:= VN_FI_RWASTDA;
                                 end if;

                               /* JCVJCVJCV 201403  Se elimina aqui el tratamiento 'RRE', 'CRE' y se pasa más adelante donde se da el nuevo tratamiento 'RRE', 'CRE'*/

                            END IF;

                       ELSE

                            VV_RATING_EXT := upper(IN_REC.IN_RATEXT);

                            BEGIN
                               SELECT MAX(PERCENT)
                                 INTO VN_FI_RWASTDA
                                 FROM BAS_MEN.MAESTRO_RWA_STDA
                                WHERE NOM     = 'EMPRESAS'
                                  AND RAT_EXT in (VV_RATING_EXT);
                            EXCEPTION
                               WHEN NO_DATA_FOUND THEN
                                  VN_FI_RWASTDA := -9;
                            END;

                            VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                       END IF;

                       VN_NUMERR:= 80;

                     --dbms_output.put_line('2 :'||VV_IN_SEGSTDA||'-'||VV_IN_SEGSTDA_INI||'-'||VN_FI_RWASTDA||'-'||VN_FI_POSPRESTDA_INI||'-'||VN_FI_POSPRESTDA_HIP);

                  ELSIF NVL(IN_REC.IN_RATSOB, 'NR') in ('NR', 'SR', '?') then
---FIN

                     IF UPPER(VV_IN_SEGSTDA) = 'SOBERANOS' THEN
                        VN_FI_RWASTDA    := 1;
                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                     ELSIF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS' THEN /* JCVJCVJCV 201403  Se elimina aqui el tratamiento 'RRE', 'CRE' y se pasa más adelante donde se da el nuevo tratamiento 'RRE', 'CRE'*/

                        -- JCV 201409  Pdte 1º Por RATEXT_ISIN
                           IF NVL(IN_REC.In_RatExt_ISIN, 'NR') not in ('NR', 'SR', '?') then
                               VV_RATING_EXT := upper(IN_REC.IN_RATEXT_ISIN);

                               BEGIN
                                  SELECT MAX(PERCENT)
                                    INTO VN_FI_RWASTDA
                                    FROM BAS_MEN.MAESTRO_RWA_STDA
                                   WHERE NOM     = 'EMPRESAS'
                                     AND RAT_EXT in (VV_RATING_EXT);
                               EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                     VN_FI_RWASTDA := -9;
                               END;

                           ELSE

                                VV_RATING := IN_REC.IN_RATEXT;

                                /* NOTA: LOS VALORES DEL POSPRESTDA NO SON COHERENTES EN LA TABLA */
                                BEGIN
                                 SELECT PERCENT
                                  INTO VN_FI_RWASTDA
                                  FROM BAS_MEN.MAESTRO_RWA_STDA
                                 WHERE NOM     = 'EMPRESAS'
                                   AND RAT_EXT = UPPER(VV_RATING);
                                EXCEPTION
                                 WHEN NO_DATA_FOUND THEN
                                   VN_FI_RWASTDA := -9;
                                END;

                           END IF;

                           VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                     END IF;

                     --dbms_output.put_line('3 :'||VV_IN_SEGSTDA||'-'||VV_IN_SEGSTDA_INI||'-'||VN_FI_RWASTDA||'-'||VN_FI_POSPRESTDA_INI||'-'||VN_FI_POSPRESTDA_HIP);
                  END IF;

                  --OTROS ACTIVOS AL 100% (Otros activos que no son XXX)
                  /*IF IN_REC.IN_SEGMBSINI IN ('011','012','013','014','015','016') THEN
                     VN_FI_RWASTDA := 1;
                     VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                  END IF;*/

                  IF IN_REC.OR_IDPAIS IN (3072,3088,3056,3008,3004,3230,3114,3016,3564,3566,3044,3569) AND UPPER(VV_IN_SEGSTDA)= 'BMULTIDES' THEN
                        VN_FI_RWASTDA := 0;
                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                  ELSIF VV_IN_SEGSTDA = 'Interbancario_CP' THEN
                        VN_FI_RWASTDA := 1;
                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'RETAIL' THEN -- OR (VV_IN_SEGSTDA IN ('RRE','CRE') AND IN_REC.IN_SEGMBS1 = '501')  /* JCVJCVJCV 201403  Se elimina aqui el tratamiento 'RRE', 'CRE' y se pasa más adelante donde se da el nuevo tratamiento 'RRE', 'CRE'*/
                        VN_FI_RWASTDA := 0.75;
                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        /* JCVJCVJCV 201403  Se elimina aqui el tratamiento 'RRE', 'CRE' y se pasa más adelante donde se da el nuevo tratamiento 'RRE', 'CRE'*/
                  -- CALCULO DEL RWA PARA ADMINISTRACIONES CENTRALES Y BANCOS CENTRALES
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'SOBERANOS' THEN /*XCG, 26/06/2017. Se incluye el segmento 37 al tratamiento de Soberanos con moneda Europea al 0%.*/
                        /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
/*                      IF IN_REC.IN_SEGMBSINI IN ('008','035', '037') and ( SW_MONEDA_PAIS_UE = 'S' OR SW_MONEDA_LOCAL = 'S' ) THEN*/
                        IF IN_REC.IN_SEGMBSINI IN ('008','035', '037') and SW_MONEDA_LOCAL = 'S' THEN
                        /*--NAV - F */
                           VN_FI_RWASTDA := 0;
                           VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        end if;
                  -- CALCULO DEL RWA PARA EMPRESAS
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'EMPRESAS' AND NVL(VN_FI_RWASTDA, -9) IN (-9,1) THEN
                        VN_FI_RWASTDA := 1;
                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                  -- CALCULO DEL RWA PARA INSTITUCIONES DE INVERSIÓN COLECTIVA
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'IIC' THEN
                        --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
                        IF NVL(VN_FI_RWASTDA, -9) IN (-9,1) THEN
                           VN_FI_RWASTDA := 1;
                           VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        END IF;
                   -- CALCULO DEL RWA PARA ADMINISTRACIONES REGIONALES Y AUTORIDADES LOCALES --
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'A.R Y CORP.LOCALES' THEN -- 201409 pais y moneda local
                        /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
/*                      IF IN_REC.IN_SEGMBSINI = '030' and ( SW_MONEDA_PAIS_UE = 'S' OR SW_MONEDA_LOCAL = 'S' ) THEN*/
                        IF IN_REC.IN_SEGMBSINI = '030' and SW_MONEDA_LOCAL = 'S' THEN
                        /*--NAV - F */
                           VN_FI_RWASTDA := 0;
                           VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
/*                      ELSIF IN_REC.IN_SEGMBSINI IN ('001','004') AND ( SW_MONEDA_PAIS_UE = 'S' OR SW_MONEDA_LOCAL = 'S' ) THEN*/
                        ELSIF IN_REC.IN_SEGMBSINI IN ('001','004') AND SW_MONEDA_LOCAL = 'S' THEN
                        /*--NAV - F */
                              /* JCV 201406 20140722. CCAA/Corporación local de país miembro o las que el regulador da tratamiento preferente (Brasil, México, etc)*/
                              /* y financiada en moneda local, se aplicará un RW del 0%.*/
                              VN_FI_RWASTDA := 0; --0.2;
                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        -- JCV 201409  Pdte 1º Por RATEXT_ISIN
                        ELSIF NVL(IN_REC.In_RatExt_ISIN, 'NR') not in ('NR', 'SR', '?') then
                                                        -- No se evalua si es corto o largo plazo, por defecto largo. XCG, 22/10/2014
                              /*if IN_REC.OR_VIDINI <= 90  then
                                 VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                              else*/
                                   VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                              --end if;

                              BEGIN
                                 SELECT MAX(PERCENT)
                                   INTO VN_FI_RWASTDA
                                   FROM BAS_MEN.MAESTRO_RWA_STDA
                                  WHERE NOM     = VV_IN_SEGRWASTDA
                                    AND RAT_EXT = IN_REC.In_RatExt_ISIN;
                              EXCEPTION
                                   WHEN NO_DATA_FOUND THEN
                                        VN_FI_RWASTDA := -9;
                              END;

                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                        ELSIF NVL(IN_REC.IN_RATEXT, 'NR') NOT in ('NR', '?', 'SR') THEN

                              /*if IN_REC.OR_VIDINI <= 90  then
                                 VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                              else*/
                                   VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                              --end if;

                              BEGIN
                                 SELECT MAX(PERCENT)
                                   INTO VN_FI_RWASTDA
                                   FROM BAS_MEN.MAESTRO_RWA_STDA
                                  WHERE NOM     = VV_IN_SEGRWASTDA
                                    AND RAT_EXT = in_rec.IN_RATEXT;
                              EXCEPTION
                                   WHEN NO_DATA_FOUND THEN
                                        VN_FI_RWASTDA := -9;
                              END;

                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                        ELSE
                              BEGIN
                                 SELECT MAX(PERCENT)
                                   INTO VN_FI_RWASTDA
                                   FROM BAS_MEN.MAESTRO_RWA_STDA
                                  WHERE NOM     = 'INTERBANCARIO-SOB'
                                    AND RAT_EXT = in_rec.in_ratsob;
                              EXCEPTION
                                   WHEN NO_DATA_FOUND THEN
                                        VN_FI_RWASTDA := -9;
                              END;

                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                        END IF;
                        --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
                        IF NVL(VN_FI_RWASTDA, -9) IN (-9, 1) THEN
                           VN_FI_RWASTDA := 1;
                           VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        END IF;
                  -- CALCULO DEL RWA PARA ENTIDADES DEL SECTOR PÚBLICO Y OTRAS INSTITUCIONES PÚBLICAS SIN FINES DE LUCRO
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'ENT.SP/OT.INST' THEN

                      -- 201406 - 20140722 Nuevo tratamiento Entes del Sector Público
                      -- Los segmbsini segmbsini 022,023 y 031 al 0% y los segmbsini 024 y 025 también 201409 si son país miembro.
                      /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
/*                    IF IN_REC.IN_SEGMBSINI IN ('022', '023', '024', '025', '031') AND ( SW_MONEDA_PAIS_UE = 'S' OR SW_MONEDA_LOCAL = 'S' ) then */
                      IF IN_REC.IN_SEGMBSINI IN ('022', '023', '024', '025', '031') AND SW_MONEDA_LOCAL = 'S' then
                      /*--NAV - F */
                            VN_FI_RWASTDA        := 0;
                            VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                     /* Las exposiciones frente a cualquier ente del sector público con vencimiento original inferior a 3 meses se les asignará un RWA del 20% a no ser que les toque
                        un 0% independientemente de su naturaleza.*/
                     ELSIF IN_REC.OR_VIDINI <= 90 /*OR (IN_REC.OR_VIDINI > 90 AND IN_REC.OR_VIDRES <= 90)*/ THEN --XCG, 20/10/2014
                            VN_FI_RWASTDA  := 0.2;
                            VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                      -- JCV 201409  Pdte 1º Por RATEXT_ISIN
                      ELSIF NVL(IN_REC.IN_RatExt_ISIN, 'NR') NOT in ('NR', '?', 'SR') THEN
                            -- No se evalua si es corto o largo plazo, por defecto largo. XCG, 22/10/2014
                           /* if IN_REC.OR_VIDINI <= 90 then
                               VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                            else*/
                                 VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                            --end if;

                            BEGIN
                               SELECT MAX(PERCENT)
                                 INTO VN_FI_RWASTDA
                                 FROM BAS_MEN.MAESTRO_RWA_STDA
                                WHERE NOM     = VV_IN_SEGRWASTDA
                                  AND RAT_EXT = IN_REC.IN_RatExt_ISIN;
                            EXCEPTION
                                 WHEN NO_DATA_FOUND THEN
                                      VN_FI_RWASTDA := -9;
                            END;

                            VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                      ELSIF NVL(IN_REC.IN_RATEXT, 'NR') NOT in ('NR', '?', 'SR') THEN
                             -- No se evalua si es corto o largo plazo, por defecto largo. XCG, 22/10/2014
                            /*if IN_REC.OR_VIDINI <= 90  then
                               VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                            else*/
                                 VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                            --end if;

                            BEGIN
                               SELECT MAX(PERCENT)
                                 INTO VN_FI_RWASTDA
                                 FROM BAS_MEN.MAESTRO_RWA_STDA
                                WHERE NOM     = VV_IN_SEGRWASTDA
                                  AND RAT_EXT = in_rec.IN_RATEXT;
                            EXCEPTION
                                 WHEN NO_DATA_FOUND THEN
                                      VN_FI_RWASTDA := -9;
                            END;

                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                      ELSE -- JCVJCVJCV 201403 El resto en función del Rating Soberano del MAESTRO RWA STDA escala 'INTERBANCARIO-SOB'

                             -- 201609 El ini 031 - ICO por Soberanos
                             IF IN_REC.IN_SEGMBSINI = '031'   THEN VV_IN_SEGRWASTDA := 'SOBERANOS';
                             ELSE                                  VV_IN_SEGRWASTDA := 'INTERBANCARIO-SOB';
                             END IF;

                             BEGIN
                                SELECT MAX(PERCENT)
                                  INTO VN_FI_RWASTDA
                                  FROM BAS_MEN.MAESTRO_RWA_STDA
                                 WHERE NOM     = VV_IN_SEGRWASTDA
                                   AND RAT_EXT = in_rec.in_ratsob;
                             EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                       VN_FI_RWASTDA := -9;
                             END;

                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                      END IF;
                        -- JCVJCVJCV 201403 No hay inis 033, se ellimina
                        --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
                      IF NVL(VN_FI_RWASTDA, -9) IN (-9, 1) THEN
                         VN_FI_RWASTDA := 1;
                         VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                      END IF;

                  -- CALCULO DEL RWA PARA BANCOS MULTILATERALES DE DESARROLLO
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'BMULTIDES' AND in_rec.in_segmbsini <> '021' THEN
                        --
                        -- JCVJCVJCV 201403 Vendrán mapeados por el maestro de personalidades a inis '032' --> al 0% y
                        --                                                                           '021' --> como Institucioens
                        IF IN_REC.IN_SEGMBSINI = '032' THEN
                           VN_FI_RWASTDA := 0;
                           VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        -- JCVJCVJCV 201403 No hay inis 029, se COMENTA. Si existieran quedaría vacio habrá que determinar que hacer
                        --ELSIF IN_REC.IN_SEGMBSINI = '029' THEN
                        --      VN_FI_RWASTDA := 0.2;
                        --      VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 50%
                        ELSIF NVL(VN_FI_RWASTDA, -9) IN (-9, 1) THEN
                              VN_FI_RWASTDA := 0.5;
                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        END IF;

                  /* CALCULO DEL RWA PARA ORGANIZACIONES INTERNACIONALES JCVJCVJCV 201403*/
                  /*  UE, FMI, Banco de Pagos Internacionales. Facilidad Europea de Estabilización Financiera, Mecanismo Europeo de Estabilidad  y EEFF internacionales establecidas*/
                  /* por dos o más Estados miembros y cuyo cometido consista en movilizar recursos financieros y prestar ayuda financiera vendrán mapeados por el MAESTRO_PERSONALIDADES*/
                  /* al 26 y ponderan al 0%, el resto vendrán mapeados al 027 y ponderan al 100%*/
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'ORGANIZACIONES INT.' THEN

                        IF IN_REC.IN_SEGMBSINI = '026' THEN
                            VN_FI_RWASTDA := 0;
                            VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        ELSE
                             VN_FI_RWASTDA := 1;
                             VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                        END IF;
                  /* CALCULO DEL RWA PARA EL SEGMENTO DE INSTITUCIONES. Nuevo cálculo 25/03/14 JCVJCVJCV 201403 Se incluye el tratamiento de Institucion al MultiDes del INI 021 excepto el corto plazo*/
                  ELSIF UPPER(VV_IN_SEGSTDA) = 'INSTITUCIONES' OR in_rec.in_segmbsini = '021'  THEN

                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                        IF ((IN_REC.OR_VIDRES <= 90) ) -- Vencimiento residual <= 3 meses
                           /*--NAV - 24/02/2020 - ya que ahora solo ponderará al 0% lo que este financiado dentro de la unión europea*/
/*                         AND (SW_MONEDA_PAIS_UE = 'S' OR SW_MONEDA_LOCAL = 'S') AND in_rec.in_segmbsini <> '021' THEN -- De un estado miembro o de tratamiento favorable*/
                           AND SW_MONEDA_LOCAL = 'S' AND in_rec.in_segmbsini <> '021' THEN -- De un estado miembro o de tratamiento favorable
                           /*--NAV - F */
                             VN_FI_RWASTDA := 0.2;
                             VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                        -- JCV 201409 1º por RatExt_ISIN
                        ELSIF NVL(IN_REC.In_RatExt_ISIN, 'NR') not in ('NR', 'SR', '?') then

                               if IN_REC.OR_VIDRES <= 90  then
                                  VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                               else
                                    VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                               end if;

                               BEGIN
                                  SELECT MAX(PERCENT)
                                    INTO VN_FI_RWASTDA
                                    FROM BAS_MEN.MAESTRO_RWA_STDA
                                   WHERE NOM     = VV_IN_SEGRWASTDA
                                     AND RAT_EXT = IN_REC.In_Ratext_ISIN;
                               EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                     VN_FI_RWASTDA := -9;
                               END;

                        ELSIF nvl(in_rec.in_ratext, 'NR') not in ('NR', 'SR', '?') then

                               IF IN_REC.OR_VIDRES <= 90  then
                                  VV_IN_SEGRWASTDA:= 'INTERBANCARIO-CP';
                               ELSE
                                    VV_IN_SEGRWASTDA:= 'INTERBANCARIO-LP';
                               END IF;

                               BEGIN
                                  SELECT MAX(PERCENT)
                                    INTO VN_FI_RWASTDA
                                    FROM BAS_MEN.MAESTRO_RWA_STDA
                                   WHERE NOM     = VV_IN_SEGRWASTDA
                                     AND RAT_EXT = in_rec.in_ratext;
                               EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                     VN_FI_RWASTDA := -9;
                               END;

                        ELSIF NVL(in_rec.in_ratsob, 'NR') not in ('NR', 'SR', '?') then

                             BEGIN
                                SELECT MAX(PERCENT)
                                  INTO VN_FI_RWASTDA
                                  FROM BAS_MEN.MAESTRO_RWA_STDA
                                 WHERE NOM     = 'INTERBANCARIO-SOB'
                                   AND RAT_EXT = in_rec.in_ratsob;
                             EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                       VN_FI_RWASTDA := -9;
                             END;

                        ELSIF in_rec.OR_PROCED = 'ES-NEGDOC' OR in_rec.OR_TIPOPE = 'CD' then
                              IF IN_REC.OR_VIDRES <= 30  then
                                 VN_FI_RWASTDA := 0.2;
                              ELSE
                                   VN_FI_RWASTDA := 0.5;
                              END IF;
                        ELSIF IN_REC.OR_VIDINI <= 90  then
                              VN_FI_RWASTDA := 0.2;
                        END IF;

                        --si no cumple la condición anterior ni se le ha asignado rating se manda a un RWA del 100%
                        IF NVL(VN_FI_RWASTDA, -9) IN (-9,1) THEN
                           VN_FI_RWASTDA := 1;
                        END IF;

                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                  END IF; -- Fin del IF UPPER(IN_REC.IN_SRASOB) = 'CR' THEN

                  --CALCULO RWA PARA OTROS ACTIVOS MEDIANTE EL MAESTRO DE EPIGRAFES SEGMENTOS RMW@ 21/07/2009
                  IF (IN_REC.in_tiporeg in ('DC', 'DI', 'DX', 'FC', 'OX', 'SC', 'SI', 'SX')
                  OR (IN_REC.IN_SEGMBSINI = 'XXX' AND IN_REC.IN_TIPOREG IN ('SA', 'OXC', 'MMOXC', 'MMSA', 'CESA', 'AVSA', 'CEOXE', 'IIC-LTA', 'IIC-FBA')) /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                  OR (IN_REC.in_tiporeg IN ('IN') AND (UPPER(VV_IN_SEGSTDA) <> 'INSTITUCIONES' OR VN_FI_RWASTDA_XXX = 0.2))) /*xcg, 02/01/2014 para Instituciones no se compara el rating con la ponderación del epígrafe y siempre prevalece el rating soberano, salvo que el del epígrafe vaya al 20%, entonces nos creemos este.*/
                 AND VN_FI_RWASTDA_XXX IS NOT NULL THEN

                     -- Los derivados de filiales no recuperan el RWA del maestro epígrafes segmentos.
                     IF IN_REC.in_tiporeg = 'FC' and IN_REC.fi_tipexp = 'OTC' THEN
                        VN_FI_RWASTDA_XXX:= null;
                     ELSE
                          /* @rmc 201012: los registros que no tengan el tiporeg 'SC','SI','SX','ITSI','DC','DI','DX','IN','ITDI','ITIN' se comparara el RWA con el previo para quedarse con uno*/
                          IF IN_REC.in_tiporeg in ('SC', 'SI', 'SX', 'DC', 'DI', 'DX', 'FC')
                             OR (IN_REC.IN_SEGMBSINI = 'XXX' AND IN_REC.IN_TIPOREG IN ('SA', 'OXC', 'MMOXC', 'MMSA', 'CESA', 'AVSA', 'CEOXE', 'IIC-LTA', 'IIC-FBA')) then /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                              VN_FI_RWASTDA := VN_FI_RWASTDA_XXX;
                              VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                          ELSIF abs(nvl(VN_FI_RWASTDA,-9)) >= VN_FI_RWASTDA_XXX THEN
                                VN_FI_RWASTDA := VN_FI_RWASTDA_XXX;
                                VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                          END IF;
                     END IF;
                  END IF;

              END IF; -- FIN DE MOROSOS O CT

              VN_NUMERR:= 90;

              /* CALCULO DEL SEGMENTO PARA LEASING */ -- JCVJCVJCV 201403 Nuevo tratamiento  ya no va por segmentos.
              IF IN_REC.OR_PROCED = 'LEASING'
                 AND IN_REC.OR_TIPOBJETO IN (2030, 2031,2010, 2011, 2020, 2021) THEN

                  IF IN_REC.OR_TIPOBJETO IN (2030, 2031) THEN
                      VV_IN_SEGMBS3     := '072';
                      VV_IN_SEGSTDA_HIP := 'RRE';  /* JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'.  Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP*/
                      VV_IN_SEGSTDA1    := 'RRE';

                  ELSIF IN_REC.OR_TIPOBJETO IN (2010, 2011, 2020, 2021) THEN
                      VV_IN_SEGMBS3     := '073';
                      VV_IN_SEGSTDA_HIP := 'CRE';  /* JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'.  Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP*/
                      VV_IN_SEGSTDA1    := 'CRE';
                  END IF;

              ELSIF IN_REC.OR_TIPGAR IN ('HC','HV','HX','HR') AND IN_REC.CODGAR_PIGNORATICIA = '?' then

                  VV_TIPO_FINCA := '?';
                  VV_USO_PROPIO := '?';
                  VV_CONSTRUIDA := '?';

                  BEGIN
                    SELECT UPPER(TIPO_FINCA)
                         , USO_PROPIO
                         , CONSTRUIDA
                      INTO VV_TIPO_FINCA
                         , VV_USO_PROPIO
                         , VV_CONSTRUIDA
                      FROM BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
                     WHERE TIPOFI = IN_REC.OR_TIPOFI
                       AND UPPER(INMUEBLE) = 'INMUEBLE';
                  EXCEPTION
                     WHEN OTHERS THEN
                         NULL;
                  END;

                  IF VV_TIPO_FINCA = 'COMERCIAL' AND VV_CONSTRUIDA = 'SI' THEN
                     VV_IN_SEGMBS3     := '073';
                     VV_IN_SEGSTDA_HIP := 'CRE';  /* JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'.  Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP*/
                     VV_IN_SEGSTDA1    := 'CRE';

                  ELSIF VV_TIPO_FINCA = 'RES' AND VV_USO_PROPIO = 'SI' THEN
                        VV_IN_SEGMBS3     := '072';
                        VV_IN_SEGSTDA_HIP := 'RRE';  /* JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'.  Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP*/
                        VV_IN_SEGSTDA1    := 'RRE';
                  END IF;

              END IF;
             /* Fin CALCULO DEL SEGMENTO PARA LfEASING */

              -- todos los registros de andorra con tipgar = HR se mandan a RRE. XCG, 13/01/2020 Andorra se segmenta como la 81, según tipo finca
              /*IF IN_REC.OR_ENTITY = 9109 AND IN_REC.OR_TIPGAR = 'HR' THEN
                 VV_IN_SEGMBS3     := '072';
                 VV_IN_SEGSTDA_HIP := 'RRE';  -- JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'.  Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP
                 VV_IN_SEGSTDA1    := 'RRE';
              END IF;      */

              /* Tratamos el total dispuesto en valor absoluto.   */
              /* Obtenemos el valor de tasación máximo por operación. */
              VN_NUMERR := 100;

              IF VV_IN_SEGSTDA_HIP = 'RRE' THEN   --JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'. Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP

                  -- LTV es menor o igual al 80%, Total dispuesto a 0, se cálcula sólo el tramo 1. XCG, 25/03/14
                  IF (IN_REC.OR_IMPLTV > 0 and IN_REC.OR_IMPLTV <= 80) OR VN_OR_TOTDISPTO <= 0 /*OR IN_REC.OR_PROCED = 'LEASING'*/ THEN

                      VV_IN_TRAMO1 := 1;
                      --IF VV_IN_TRAMO1 > 1 THEN VV_IN_TRAMO1 := 1; END IF;

                      VN_FI_RWA1 := 0.35;

                      -- Si no hay total dispuesto o es negativo se aplica el criterio del 80%, 15% y 5%. Antes
                      -- JCVJCVJCV 201403 Cambia el criterio a 80% 20% 0%
                      IF VN_OR_TOTDISPTO <= 0 /*AND IN_REC.OR_PROCED <> 'LEASING'*/ THEN --XCG, 25/03/14
                          VV_IN_TRAMO1 := 0.8;
                          VV_IN_TRAMO2 := 0.20; --0.15; JCVJCVJCV 201403 Cambia el criterio a 80% 20% 0%
                          VV_IN_TRAMO3 := 0;    -- 0.05; JCVJCVJCV 201403 Cambia el criterio a 80% 20% 0%
                          VN_FI_RWA1 := 0.35;
                          VN_FI_RWA2 := VN_FI_RWASTDA; -- JOM 201512 Hipotecarios CRE/RRE no morosos. 2º tramo si 3º tiene RW menor, tendrá el mismo que 3º
                        -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                        --  VN_FI_RWA3 := VN_FI_RWASTDA;
                          VN_FI_RWA3 := 0;
                        -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                      END IF;

                  -- LTV es mayor al 80% y menor o igual al 100%, se cálcula el tramo 1 y 2. XCG, 25/03/14
                  ELSIF IN_REC.OR_IMPLTV > 80 AND IN_REC.OR_IMPLTV <= 100 THEN

                      VN_NUMERR := 110;

                      VV_IN_TRAMO1 := (0.8 * VN_OR_VALTAS) / ABS(VN_OR_TOTDISPTO);

                      IF VV_IN_TRAMO1 > 1 THEN
                         VV_IN_TRAMO1 := 1;
                      END IF;

                      VN_FI_RWA1 := 0.35;

                      VV_IN_TRAMO2 := 1 - VV_IN_TRAMO1;
                      VN_FI_RWA2 := VN_FI_RWASTDA;

                  -- LTV es mayor al 100%, se cálcula el tramo 1, 2 y 3
                  ELSE

                      VN_NUMERR := 120;

                      VV_IN_TRAMO1 := (0.8 * VN_OR_VALTAS) / ABS(VN_OR_TOTDISPTO);
                      IF VV_IN_TRAMO1 > 1 THEN
                          VV_IN_TRAMO1 := 1;
                      END IF;
                      -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                      /* VV_IN_TRAMO2 := ((1 * VN_OR_VALTAS) / ABS(VN_OR_TOTDISPTO)) - VV_IN_TRAMO1; -- JCVJCVJCV 201403 Antes 0.8
                      IF VV_IN_TRAMO2 > 1 THEN
                         VV_IN_TRAMO2 := 1 - VV_IN_TRAMO1;
                      END IF;

                      VV_IN_TRAMO3 := 1 - VV_IN_TRAMO1 - VV_IN_TRAMO2; */
                      VV_IN_TRAMO3 := 0;
                      VV_IN_TRAMO2 := 1 - VV_IN_TRAMO1;
                      -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                      VN_FI_RWA1 := 0.35;
                      VN_FI_RWA2 := VN_FI_RWASTDA;
                   -- VN_FI_RWA3 := VN_FI_RWASTDA; SMG 17/09/19 - Modificaciones eliminación tramo 3
                      VN_FI_RWA3 := 0;

                  END IF;

              ELSIF VV_IN_SEGSTDA_HIP = 'CRE' THEN /*JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'. Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP*/

                  -- LTV es menor o igual al 60%, Total dispuesto a 0, se cálcula sólo el tramo 1. XCG, 25/03/14
                  IF (IN_REC.OR_IMPLTV > 0 and IN_REC.OR_IMPLTV <= 60) OR VN_OR_TOTDISPTO <= 0 /*OR IN_REC.OR_PROCED = 'LEASING'*/ THEN

                      VV_IN_TRAMO1 := 1;
                      IF VV_IN_TRAMO1 > 1 THEN VV_IN_TRAMO1 := 1; END IF;

                      VN_FI_RWA1 := 0.5;

                      /* Si no hay total dispuesto o es negativo se aplica el criterio del 60%, 20% y 20%. xcg, XCG, 25/03/14*/
                      /* Si no hay total dispuesto o es negativo se aplica el criterio del 60%, 40% y 0%. JCVJCVJCV, 201403 09/05/2014.*/
                      IF VN_OR_TOTDISPTO <= 0 /*AND IN_REC.OR_PROCED <> 'LEASING'*/ THEN
                          VV_IN_TRAMO1 := 0.6; -- 0.6;
                          VV_IN_TRAMO2 := 0.4; -- 0.2;
                          VV_IN_TRAMO3 := 0;   -- 0.2;
                          VN_FI_RWA1 := 0.5;
                          --VN_FI_RWA2 := 1;
                          VN_FI_RWA2 := VN_FI_RWASTDA; /* JOM 201512 Hipotecarios CRE/RRE no morosos. 2º tramo si 3º tiene RW menor, tendrá el mismo que 3º*/
                        --VN_FI_RWA3 := VN_FI_RWASTDA; SMG 17/09/19 - Modificaciones eliminación tramo 3
                          VN_FI_RWA3 := 0;

                      END IF;

                  -- LTV es mayor al 60% y menor o igual al 100%, se cálcula el tramo 1 y 2. XCG, 25/03/14
                  ELSIF IN_REC.OR_IMPLTV > 60 AND IN_REC.OR_IMPLTV <= 100 THEN

                      VN_NUMERR := 130;

                      VV_IN_TRAMO1 := (0.6 * VN_OR_VALTAS) / ABS(VN_OR_TOTDISPTO);
                      IF VV_IN_TRAMO1 > 1 THEN VV_IN_TRAMO1 := 1; END IF;

                      VV_IN_TRAMO2 := 1 - VV_IN_TRAMO1;
                      VN_FI_RWA1 := 0.5;
                      --VN_FI_RWA2 := 1;
                      VN_FI_RWA2 := VN_FI_RWASTDA; -- JOM 201512

                  -- LTV es mayor al 100%, se cálcula el tramo 1, 2 y 3
                  ELSE

                      VN_NUMERR := 140;

                      VV_IN_TRAMO1 := (0.6 * VN_OR_VALTAS) / ABS(VN_OR_TOTDISPTO);
                      IF VV_IN_TRAMO1 > 1 THEN
                          VV_IN_TRAMO1 := 1;
                      END IF;
                      -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                      /* VV_IN_TRAMO2 := ( (1 * VN_OR_VALTAS) / ABS(VN_OR_TOTDISPTO)) - VV_IN_TRAMO1;  -- JCVJCVJCV 201403 Antes 0.8
                      IF VV_IN_TRAMO2 > 1 THEN VV_IN_TRAMO2 := 1 - VV_IN_TRAMO1; END IF;

                      VV_IN_TRAMO3 := 1 - VV_IN_TRAMO1 - VV_IN_TRAMO2; */
                      VV_IN_TRAMO3 := 0;
                      VV_IN_TRAMO2 := 1 - VV_IN_TRAMO1;
                      -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                      VN_FI_RWA1 := 0.5;
                      --VN_FI_RWA2 := 1;
                      VN_FI_RWA2 := VN_FI_RWASTDA; -- JOM 201512
                    --VN_FI_RWA3 := VN_FI_RWASTDA; SMG 17/09/19 - Modificaciones eliminación tramo 3
                      VN_FI_RWA3 := 0;

                  END IF;

              END IF; -- Fin del IF VV_IN_SEGSTDA_HIP = 'RRE'

              IF VV_IN_SEGSTDA_HIP IN ('RRE','CRE') THEN /*JCVJCVJCV 201403 Nuevo tratamiento 'RRE', 'CRE'. Se cambia  VV_IN_SEGSTDA por VV_IN_SEGSTDA_HIP*/

                  /* CONTROLA QUE NO HAYA TRAMOS NEGATIVOS */
                  IF VV_IN_TRAMO3 < 0 THEN

                     IF VV_IN_TRAMO2 + VV_IN_TRAMO3 = 0 THEN

                         VV_IN_TRAMO2 := 0;
                         VV_IN_TRAMO3 := 0;

                     ELSIF VV_IN_TRAMO2 + VV_IN_TRAMO3 > 0 THEN

                         VV_IN_TRAMO2 := VV_IN_TRAMO2 + VV_IN_TRAMO3;
                         VV_IN_TRAMO3 := 0;

                     END IF;
                  END IF;

                  VN_TOTAL1            := VN_TOTAL   * VV_IN_TRAMO1;
                  VN_TOTAL2            := VN_TOTAL   * VV_IN_TRAMO2;
                  VN_TOTAL3            := VN_TOTAL   * VV_IN_TRAMO3;
                  VN_TOTALCON1         := VN_TOTALCON * VV_IN_TRAMO1;
                  VN_TOTALCON2         := VN_TOTALCON * VV_IN_TRAMO2;
                  VN_TOTALCON3         := VN_TOTALCON * VV_IN_TRAMO3;

                  VN_OR_SALDO_ORIG1    := VN_OR_SALDO_ORIG    * VV_IN_TRAMO1;
                  VN_OR_SALDO_ORIG2    := VN_OR_SALDO_ORIG    * VV_IN_TRAMO2;
                  VN_OR_SALDO_ORIG3    := VN_OR_SALDO_ORIG    * VV_IN_TRAMO3;

                  VN_OR_SALDO_ORIGCON1 := VN_OR_SALDO_ORIGCON * VV_IN_TRAMO1;
                  VN_OR_SALDO_ORIGCON2 := VN_OR_SALDO_ORIGCON * VV_IN_TRAMO2;
                  VN_OR_SALDO_ORIGCON3 := VN_OR_SALDO_ORIGCON * VV_IN_TRAMO3;
                  VN_OR_PROVAPL1       := IN_REC.OR_PROVAPL   * VV_IN_TRAMO1;
                  VN_OR_PROVAPL2       := IN_REC.OR_PROVAPL   * VV_IN_TRAMO2;
                  VN_OR_PROVAPL3       := IN_REC.OR_PROVAPL   * VV_IN_TRAMO3;

                  VN_FI_EXPSTDA_FULLY1       := VN_FI_EXPSTDA_FULLY       * VV_IN_TRAMO1;
                  VN_FI_EXPSTDA_FULLY2       := VN_FI_EXPSTDA_FULLY       * VV_IN_TRAMO2;
                  VN_FI_EXPSTDA_FULLY3       := VN_FI_EXPSTDA_FULLY       * VV_IN_TRAMO3;
                  VN_FI_EXPSTDA_FULLY_CON1    := VN_FI_EXPSTDA_FULLY_CON    * VV_IN_TRAMO1;
                  VN_FI_EXPSTDA_FULLY_CON2    := VN_FI_EXPSTDA_FULLY_CON    * VV_IN_TRAMO2;
                  VN_FI_EXPSTDA_FULLY_CON3    := VN_FI_EXPSTDA_FULLY_CON    * VV_IN_TRAMO3;


                  -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                  VN_TOTAL3                 :=0;
                  VN_TOTALCON3              :=0;
                  VN_OR_SALDO_ORIG3         :=0;
                  VN_OR_SALDO_ORIGCON3      :=0;
                  VN_OR_PROVAPL3            :=0;
                  VN_FI_EXPSTDA_FULLY3      :=0;
                  VN_FI_EXPSTDA_FULLY_CON3  :=0;
                  -- SMG 17/09/19 - Modificaciones eliminación tramo 3

                 /*@RMC 20100630: Informa los RWA de los tramos en función de si ha ido algo al tramo correspondiente o no */
                 IF VV_IN_TRAMO1 = 0 then
                   VN_FI_RWA1 := 0;
                 END IF;

                 IF VV_IN_TRAMO2 = 0 then
                   VN_FI_RWA2 := 0;
                 END IF;

                 IF VV_IN_TRAMO3 = 0 then
                   VN_FI_RWA3 := 0;
                 END IF;

                 IF nvl(VN_FI_EXPSTDA_FULLY_CON, 0) = 0 THEN
                    VN_FI_POSPRESTDA_HIP := (nvl(VV_in_tramo1,0)*NVL(VN_FI_RWA1,0)) + (nvl(VV_in_tramo2,0)*NVL(VN_FI_RWA2,0)) + (nvl(VV_in_tramo3,0)*NVL(VN_FI_RWA3,0));
                 ELSE
                      -- CALCULA LA MEDIA PONDERA DEL RWA PARA UTILIZARLA EN CASO DE APLICAR GARANTÍAS
                      VN_FI_POSPRESTDA_HIP := (NVL(VN_FI_RWA1,0) * VN_FI_EXPSTDA_FULLY_CON1 + NVL(VN_FI_RWA2,0) * VN_FI_EXPSTDA_FULLY_CON2 +
                                               NVL(VN_FI_RWA3,0) * VN_FI_EXPSTDA_FULLY_CON3)/(VN_FI_EXPSTDA_FULLY_CON1+VN_FI_EXPSTDA_FULLY_CON2+VN_FI_EXPSTDA_FULLY_CON3);
                 END IF;

                 -- Comparativa CRE/RRE, nos quedamos con el menor rwa
                 IF VV_IN_SEGSTDA_HIP IN ('RRE','CRE') AND VN_FI_POSPRESTDA_HIP > VN_FI_RWASTDA AND VN_FI_RWASTDA <> -9 THEN
                        VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                 ELSE
                       VN_FI_POSPRESTDA_INI := VN_FI_POSPRESTDA_HIP;
                       VN_FI_RWASTDA        := VN_FI_POSPRESTDA_HIP;
                       VV_IN_SEGSTDA        := VV_IN_SEGSTDA_HIP;

                 END IF;

              END IF; -- Fin del IF VV_IN_SEGSTDA_HIP IN ('RRE','CRE')

              --dbms_output.put_line(VV_IN_TRAMO1||'-'||VV_IN_TRAMO2||'-'||VV_IN_TRAMO3);

              VN_FI_RWA1_INI := VN_FI_RWA1; -- 201512 RWA Tramos Inicial (Antes de mitigación)
              VN_FI_RWA2_INI := VN_FI_RWA2; -- 201512 RWA Tramos Inicial (Antes de mitigación)
              VN_FI_RWA3_INI := VN_FI_RWA3; -- 201512 RWA Tramos Inicial (Antes de mitigación)
              --dbms_output.put_line('2 :'||VV_IN_SEGSTDA||'-'||VV_IN_SEGSTDA_INI||'-'||VN_FI_RWASTDA||'-'||VN_FI_POSPRESTDA_INI||'-'||VN_FI_POSPRESTDA_HIP);

              -- Las promociones (IN_SEGMBS0 = '200') se han de considerar alto riesgo 201606 indra (JCV)
              -- Consideramos alto riesgo todas la promociones, independiente si es moroso - 20170125 #ACI (Optimissa)
              /* 19/11/2021 RMR Forzar que ninguna IIC (047) se marque como Alto Riesgo HDEV-94952 */
              IF ((IN_REC.IN_SEGMBS0 = '200' OR IN_REC.OR_PERSON in (212,225,231,293,309 ) OR IN_REC.SW_MARCA_HIGH_RISK = 'S')
                OR (IN_REC.FI_EPICON IN ('010050206110100000000000000000', '010050206070100000000000000000') AND IN_REC.OR_ENTITY IN (9571,9724))) AND IN_REC.IN_SEGMBSINI <> '047' THEN /* RMR 13/11/2020  Añadido GRECO como alto riesgo */
                 VV_IN_SEGSTDA_AUX    := 'Alto Riesgo';
                 VN_FI_RWA1_INI       := 1.5;
                 VN_FI_RWA2_INI       := 1.5;
                 -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                 --VN_FI_RWA3_INI       := 1.5;
                 VN_FI_RWA3_INI       := 0;
                 -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                 VN_FI_RWA1           := 1.5;
                 VN_FI_RWA2           := 1.5;
                 -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                 --VN_FI_RWA3           := 1.5;
                 VN_FI_RWA3           := 0;
                 -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                 VN_FI_RWASTDA        := 1.5;
                 VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

              END IF;


              /*******************************************************************************/
              /**  FIN DEL PROCESO DE TROCEO DE LAS OPERACIONES DE LOS SEGMENTOS RRE O CRE  **/
              /*******************************************************************************/

              -- Cálculo del RWA para determinadas cuentas.
              BEGIN
                 SELECT RWA, rwa
                   INTO VN_FI_RWASTDA, VN_FI_POSPRESTDA_INI
                   FROM BAS_MEN.MAESTRO_CUENTAS_RWA
                  WHERE OR_CTAIND = IN_REC.OR_CTAIND;
              EXCEPTION
                   WHEN OTHERS THEN
                        NULL;
              END;

              VV_IN_SEGSTDA_INI := VV_IN_SEGSTDA;

              -- JOM 201512 Modificación tratamiento Inmuebles Adjudicados (AD): tratamiento de "Otros Activos" en lugar de "Morosos"
              --IF UPPER(IN_REC.OR_IDPRO1) IN ('ES','OT','RP') AND ( IN_REC.IN_INDMOR = 'SI' OR IN_REC.IN_INDMOR_STDA = 'CT' ) THEN
                  VN_PROVIESP := IN_REC.OR_PROVAPL * IN_REC.SF;
              --ELSE
               --   VN_PROVIESP := 0;
              --END IF;

              -- Las garantías que mitigan suman  provisión 28/12/16, Xisco.
              -- SMG 17/09/19 - Modificaciones eliminación tramo 3
              /*
              IF VN_PROVIESP <> 0 AND (IN_REC.OR_DISPTO+IN_REC.OR_DISBLE+IN_REC.OR_AVALES+in_rec.or_ajuval) <> 0 THEN

                 IF VV_IN_SEGSTDA_INI IN ('CRE', 'RRE') and VN_OR_SALDO_ORIG3 <> 0 THEN -- Hipotecarios solo suma el saldo del tercer tramo. XCG, 28/01/16
                    VN_RATIO := ROUND(VN_PROVIESP/(VN_OR_SALDO_ORIG3),4); --XCG, redondeo a 4 decimales. 24/10/2017
                 ELSIF VV_IN_SEGSTDA_INI not IN ('CRE', 'RRE') THEN
                       VN_RATIO := ROUND(VN_PROVIESP/(IN_REC.OR_DISPTO+IN_REC.OR_DISBLE+IN_REC.OR_AVALES+in_rec.or_ajuval),4);
                 ELSE
                       VN_RATIO:= 1;    -- Si saldo fuera 0, dotación cubre el 100%.     XCG, 28/01/16
                 END IF;
                 */
              IF IN_REC.OR_PROVAPL <> 0 AND (IN_REC.OR_DISPTO+IN_REC.OR_DISBLE+IN_REC.OR_AVALES+in_rec.or_ajuval) <> 0 THEN
                 IF VV_IN_SEGSTDA_INI IN ('CRE', 'RRE') and VN_OR_SALDO_ORIG2 <> 0 THEN /* Hipotecarios solo suma el saldo del tercer tramo. XCG, 28/01/16*/
                    VN_RATIO := ROUND(IN_REC.OR_PROVAPL/(VN_OR_SALDO_ORIG2),4); --XCG, redondeo a 4 decimales. 24/10/2017
                 ELSIF VV_IN_SEGSTDA_INI not IN ('CRE', 'RRE') THEN
                       VN_RATIO := ROUND(IN_REC.OR_PROVAPL/(IN_REC.OR_DISPTO+IN_REC.OR_DISBLE+IN_REC.OR_AVALES+in_rec.or_ajuval),4);
                 ELSE
                       VN_RATIO:= 1;    -- Si saldo fuera 0, dotación cubre el 100%.     XCG, 28/01/16
                 END IF;

                 -- SMG 17/09/19 - Modificaciones eliminación tramo 3

              END IF;

              --dbms_output.put_line(VV_IN_SEGSTDA||'-'||VV_IN_SEGSTDA_INI||'-'||VN_FI_RWASTDA||'-'||VN_FI_POSPRESTDA_INI||'-'||VN_FI_POSPRESTDA_HIP);

              IF VV_IN_SEGSTDA_AUX in ('Morosos') THEN

                 VN_FI_POSPRESTDA := VN_FI_POSPRESTDA_INI; /* RMR 20/03/2020  Añadido tratamiento POSPRESTDA */
                 VN_FI_RWASTDA := 1.5;
                 VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                 VV_IN_SEGSTDA_INI := VV_IN_SEGSTDA;
                 VV_GARANTIA_ENCONTRADA := TRUE;

                 -- xcg.28/01/16. Tramo 1 y tramo 2 al 100%. Solo el tramo 3 va al 150%.
                 IF VV_IN_SEGSTDA_INI IN ('RRE','CRE') THEN
                    VN_FI_RWA1 := 1;
                    -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                    --VN_FI_RWA2 := 1;
                    --VN_FI_RWA3 := 1.5;
                    VN_FI_RWA2 := 1.5;
                    VN_FI_RWA3 := 0;
                    -- SMG 17/09/19 - Modificaciones eliminación tramo 3

                 END IF;

                 IF VN_RATIO >= 0.2 THEN
                    VN_FI_RWASTDA := 1;
                    VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;

                    IF VV_IN_SEGSTDA_INI IN ('RRE','CRE') THEN
                        -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                        --  VN_FI_RWA3 := 1;
                        VN_FI_RWA3 := 0;
                        VN_FI_RWA2 := 1;
                        -- SMG 17/09/19 - Modificaciones eliminación tramo 3
                    END IF;

                 END IF;

                 IF VV_IN_SEGSTDA_INI IN ('RRE','CRE') THEN

                       IF nvl(VN_FI_EXPSTDA_FULLY_CON, 0) = 0 THEN
                       VN_FI_POSPRESTDA_INI := (nvl(VV_in_tramo1,0)*NVL(VN_FI_RWA1,0)) + (nvl(VV_in_tramo2,0)*NVL(VN_FI_RWA2,0)) + (nvl(VV_in_tramo3,0)*NVL(VN_FI_RWA3,0));
                    ELSE
                         VN_FI_POSPRESTDA_INI := (NVL(VN_FI_RWA1,0) * VN_FI_EXPSTDA_FULLY_CON1 + NVL(VN_FI_RWA2,0) * VN_FI_EXPSTDA_FULLY_CON2 +
                                                    NVL(VN_FI_RWA3,0) * VN_FI_EXPSTDA_FULLY_CON3)/(VN_FI_EXPSTDA_FULLY_CON1+VN_FI_EXPSTDA_FULLY_CON2+VN_FI_EXPSTDA_FULLY_CON3);
                    END IF;

                 END IF;

                 VN_FI_RWA1_INI := VN_FI_RWA1; -- 201512 RWA Tramos Inicial Morosos (Antes de mitigación).XCG
                 VN_FI_RWA2_INI := VN_FI_RWA2; -- 201512 RWA Tramos Inicial Morosos (Antes de mitigación).XCG
                 VN_FI_RWA3_INI := VN_FI_RWA3; -- 201512 RWA Tramos Inicial Morosos (Antes de mitigación).XCG

                 BEGIN
                     SELECT IN_SEGSTDA, FI_RWASTDA
                       INTO VV_IN_SEGSTDA, VN_FI_RWASTDA
                       FROM BAS_MEN.MAESTRO_SEGSTDA_GARANT
                      WHERE OR_CODGAR = IN_REC.OR_CODGAR;
                   EXCEPTION
                     WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                         VV_GARANTIA_ENCONTRADA := FALSE;
                 END;

                 -- @RMC 20/01/2008: Exposiciones morosas garantizadas
                 -- Solo se mitiga si el RWA por garantía es menor. XCG 06/05/13
                 IF VV_GARANTIA_ENCONTRADA AND VN_FI_POSPRESTDA_INI > VN_FI_RWASTDA THEN
                    VV_IN_SEGSTDA_PRE := VV_IN_SEGSTDA_INI;
                    IF VV_IN_SEGSTDA = '?' THEN
                       VV_IN_SEGSTDA := VV_IN_SEGSTDA_INI;
                    END IF;

                     VV_IN_SEGSTDA_POST := VV_IN_SEGSTDA;
                     /*VN_FI_POSPOSTSTDA  := VN_FI_RWASTDA; RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                     /*VN_FI_POSPRESTDA   := VN_FI_POSPRESTDA_INI;RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */

                     IF VV_IN_SEGSTDA_INI IN ('RRE','CRE') THEN
                        VN_FI_RWA1 := VN_FI_RWASTDA;
                        VN_FI_RWA2 := VN_FI_RWASTDA;
                      --VN_FI_RWA3 := VN_FI_RWASTDA; SMG 17/09/19 - Modificaciones eliminación tramo 3
                        VN_FI_RWA3 := 0;
                     END IF;

                 ELSE
                      VN_FI_RWASTDA := VN_FI_POSPRESTDA_INI;
                      VV_IN_SEGSTDA := VV_IN_SEGSTDA_INI;
                 END IF;

              END IF;

              -- xcg. 17/10/2017. Con el segmento 045 que identifica las CCP ya no hace falta volver a evaluar las tablas.
              -- Cálculo de la variable C_CCP

              v_ECC_Cualificada      := '?';
              v_Depo_Ecc_Cualificada := '?';

              BEGIN
                  SELECT MCCC.ECC_CUALIFICADA
                    INTO v_ECC_Cualificada
                    FROM BAS_MEN.MAESTRO_CONTRAPARTES       MCCC
                   WHERE MCCC.OR_NIFCIF = In_Rec.OR_NIFCIF;
              EXCEPTION
                WHEN OTHERS THEN
                  v_ECC_Cualificada  := '?';
              END;

              BEGIN
                 SELECT MDEP.ECC_CUALIFICADA
                   INTO v_Depo_Ecc_Cualificada
                   FROM BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS MDEP
                  WHERE MDEP.OR_ENTITY = In_Rec.OR_ENTITY
                    AND MDEP.OR_CTAIND = In_Rec.OR_CTAIND;
              EXCEPTION
                WHEN OTHERS THEN
                      v_Depo_Ecc_Cualificada := '?';
              END;

            /*
            Valores posibles
            0--> Aquellas posiciones que no cumplan con las condiciones de los puntos que vienen a continuación.
            1--> Variable FI_TIPEXP='Repos' ó FI_TIPEXP='OTC' y que no sea una ECCC (Entidad de Contrapartida Central Cualificada),
            2--> Variable FI_TIPEXP='Repos' ó FI_TIPEXP='OTC', y con el acreditado informado con la variable ECC_CUALIFICADA='SI', según el maestro comentado en el punto anterior.
            3--> Los depósitos en garantía se identificarán según maestro por cuenta contable, ya que en Basilea se carga esta información vía inserción de saldos y no tienen datos personales.
                 Las cuentas contables identificadas se encuentran en la pestaña C_CCP.
                 Se tomarán áquellas cuentas contables informadas como ECC_CUALIFICADA='NO'.
            4--> Misma manera de proceder que para el valor 3, pero aplicando el filtro para ECC_CUALIFICADA='SI'.

                     variable ECC_CUALIFICADA='NO' en el maestro de ECCC
                     La identificación y búsqueda del acreditado en BASILEA se realizará cruzando por el campo OR_NIFCIF de este maestro.
            */

            vV_C_CCP := 0;

            -- 201409 - 20140919 los derivados contabilizados en cuentas de orden (epígrafe 3.3) cuya contrapartida
            -- sea Eurex (NIFCIFIBM EUXCDEFFXXX) se han marcada por proceso con el IN_TIPER “MERORG”
            -- Para esta peraciones se informara el campo C_CCP con el valor “2”.

            IF IN_REC.IN_TIPDER = 'MERORG' AND IN_REC.OR_NIFCIFIBM = 'EUXCDEFFXXX' THEN
               vV_C_CCP := 2;
            ELSIF ( IN_REC.FI_TIPEXP IN ('Repos','OTC')) or IN_REC.FI_EPICON = '030020200000000000000000000000'   THEN
               IF    (v_ECC_Cualificada = 'NO')  THEN vV_C_CCP := 1;
               ELSIF (v_ECC_Cualificada = 'SI') THEN vV_C_CCP := 2;
               END IF;
            ELSE
              IF    ( v_Depo_Ecc_Cualificada = 'NO')  THEN vV_C_CCP := 3;
              ELSIF ( v_Depo_Ecc_Cualificada = 'SI')  THEN vV_C_CCP := 4;
              END IF;
            END IF;

            -- Todas las cámaras, valor de la variable : 1 a 4 al 2% (RWA Inicial)
            IF vV_C_CCP <> 0 THEN
               VN_FI_POSPRESTDA_INI := 0.02;
            END IF;

           /* NUEVOS INIS 042, 043, 044 RV Y DTAs */ /* 201406 JCV 20140728 Nuevo Tratamiento para la RV y DTAs nuevos sectores 042, 043 y 044*/

           IF IN_REC.In_SegmBSIni IN ('042', '044') THEN
               VN_FI_POSPRESTDA_INI := 1;
           ELSIF IN_REC.In_SegmBSIni IN ('043') THEN
               VN_FI_POSPRESTDA_INI := 2.5;
           END IF;

      /**********************************************************************/
      /*  ADMISIBILIDAD DE GARANTÍAS FINANCIERAS PARA MITIGACION DE RIESGO  */
      /**********************************************************************/

      /* APARTADO 7.2 INADMISIBILIDAD GARANTIAS FINANCIERAS */
      /* Por defecto todas las garantías son admisibles */
      SW_MITIGACION := 'S';

      IF IN_REC.OR_CODGAR LIKE 'GR 12%' THEN

          /* Las garantias Pignorativas quedan descartadas por defecto */
          IF IN_REC.OR_CODGAR IN ('GR 12105', 'GR 12106', 'GR 12112', 'GR 12113', 'GR 12114', 'GR 12115',
                                  'GR 12302', 'GR 12306', 'GR 12307', 'GR 12308', 'GR 12397', 'GR 12399') THEN
              SW_MITIGACION := 'N';
          END IF;

          /* Si tiene fecha de vencimiento de garantía */
          IF IN_REC.FCHVCTOGR <> 99999999 THEN
              /* Si la garantia vence DESPUES de la operacion garantizada, se admite dicha garantía */
              IF TO_DATE(IN_REC.FCHVCTOGR, 'YYYYMMDD') >= TO_DATE(IN_REC.OR_FECVTO, 'YYYYMMDD') THEN
                 SW_MITIGACION := 'S';

              /* Si la garantía vence ANTES que la operación garantizada, solo se admite si cumple una de las 3 excepciones */
              ELSE
                 SP_Calc_Excp_Permitidas (IN_REC.OR_CLUNICONTR, IN_REC.OR_CTACLI, IN_REC.OR_CODGAR, SW_EXCEPCION);

                 IF SW_EXCEPCION = 'S' THEN SW_MITIGACION := 'S';
                 ELSE  SW_MITIGACION := 'N';
                 END IF;
              END IF;
          END IF;

      END IF; 
      /*FIN  APARTADO 7.2 INADMISIBILIDAD GARANTIAS FINANCIERAS */

          /*****************************************************************/
          /*   APLICACION DE TECNICAS DE MITIGACION DE RIESGO (GARANTIAS)  */
          /*****************************************************************/

               /* RECUPERA EL SEGMENTO ESTANDAR Y EL RWA PARAMETRIZADO PARA LA GARANTÍA CORRESPONDIENTE */
               /* JOM 201512 Modificación tratamiento Inmuebles Adjudicados (AD): tratamiento de "Otros Activos" en lugar de "Morosos"*/
               /*IF UPPER(IN_REC.IN_INDMOR) NOT IN ('SI', 'AD') AND IN_REC.IN_INDMOR_STDA <> 'CT'  THEN -- JCVJCVJCV 201403 Nuevo Tratamiento de Mora STDA*/
               IF ( (UPPER(IN_REC.IN_INDMOR) NOT IN ('SI') AND IN_REC.IN_INDMOR_STDA <> 'CT')  OR VV_IN_SEGSTDA_AUX  = 'Alto Riesgo' )
                   AND SW_MITIGACION = 'S' -- FLA 202201 - Miami Fase II
               THEN

                  VV_IN_SEGSTDA_INI := VV_IN_SEGSTDA;
                  VV_GARANTIA_ENCONTRADA := TRUE;

                  BEGIN
                     SELECT IN_SEGSTDA   , FI_RWASTDA
                       INTO VV_IN_SEGSTDA, VN_FI_RWASTDA
                       FROM BAS_MEN.MAESTRO_SEGSTDA_GARANT
                      WHERE OR_CODGAR = IN_REC.OR_CODGAR;
                  EXCEPTION
                       WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                            VV_GARANTIA_ENCONTRADA := FALSE;
                  END;
  
                  IF VV_GARANTIA_ENCONTRADA AND -- Solo se mitiga si el RWA por garantía es menor. XCG 06/05/13
                    (VN_FI_POSPRESTDA_INI > VN_FI_RWASTDA OR VN_FI_POSPRESTDA_HIP > VN_FI_RWASTDA) THEN

                      VV_IN_SEGSTDA_PRE := VV_IN_SEGSTDA_INI; 
                      /* SI OBTENEMOS ? EN EL SEGMENTO LA EXPOSICION SE QUEDA EN EL MISMO SEGMENTO QUE TENIA PREMITIGACION */
                      IF VV_IN_SEGSTDA = '?' THEN
                         VV_IN_SEGSTDA := VV_IN_SEGSTDA_INI;
                      END IF;

                      VV_IN_SEGSTDA_POST := VV_IN_SEGSTDA;

                      --Se ha de aplicar la técnica de mitigación de riesgos a los RWA parciales. XCG, 26/08/08.
                      IF VV_IN_SEGSTDA_INI IN ('RRE','CRE') THEN
                         VN_FI_RWA1 := VN_FI_RWASTDA;
                         VN_FI_RWA2 := VN_FI_RWASTDA;
                       --VN_FI_RWA3 := VN_FI_RWASTDA; SMG 17/09/19 - Modificaciones eliminación tramo 3
                         VN_FI_RWA3 := 0;
                      END IF;

                  ELSE
                    /* FLA 202201 Aquellos cuyo RWA mitigado depende del avalista, se respetará la marca */
                    IF VN_FI_RWASTDA <> 99 THEN
                       VN_FI_RWASTDA := VN_FI_POSPRESTDA_INI;
                       VV_IN_SEGSTDA := VV_IN_SEGSTDA_INI;
                    END IF;
                  END IF;

               END IF;

               --dbms_output.put_line(VV_IN_SEGSTDA||'-'||VV_IN_SEGSTDA_INI||'-'||VN_FI_RWASTDA||'-'||VN_FI_POSPRESTDA_INI||'-'||VN_FI_POSPRESTDA_HIP);

        /****************************************************************/
        /*  APLICACION DE TECNICAS DE MITIGACION DE RIESGO (AVALISTA)  */
        /****************************************************************/
            /* TRATAMIENTO PARA LOS FACTORING CON COBERTURA Y BSCOVERING */

               VV_FAC_COBERT_ENCONTRADO := TRUE;
               /*BEGIN
                   SELECT substr(in_segstda,1,1)||lower(substr(IN_SEGSTDA,2,length(in_segstda))) IN_SEGSTDA
                        , RATEXT_AVALISTA
                     INTO VV_IN_SEGSTDA_AVAL, VN_RATING_AVAL
                     FROM BAS_MEN.MAESTRO_FACTORING_COBERTURA
                    WHERE OR_CLUNICONTR = IN_REC.OR_CLUNICONTR
                       OR FLOOR(OR_CLUNICONTR/100) = IN_REC.OR_CLUNICONTR;
               EXCEPTION
                  WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                     VV_FAC_COBERT_ENCONTRADO := FALSE;
               END;*/
			   
	    /*INI 11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */

        BEGIN
          SELECT SUBSTR(IN_SEGSTDA,1,1)||LOWER(SUBSTR(IN_SEGSTDA,2,LENGTH(IN_SEGSTDA))) IN_SEGSTDA
               , RATEXT_AVALISTA
            INTO VV_IN_SEGSTDA_AVAL, VN_RATING_AVAL
            FROM BAS_MEN.MAESTRO_FACTORING_COBERTURA
           WHERE (OR_CLUNICONTR = IN_REC.OR_CLUNICONTR  OR  FLOOR(OR_CLUNICONTR/100) = IN_REC.OR_CLUNICONTR)
             AND  OR_REFOPE     = floor(IN_REC.OR_REFOPE/1000)
             AND  OR_REFOPE IS NOT NULL;

        EXCEPTION
           WHEN OTHERS THEN
               BEGIN
                   SELECT SUBSTR(IN_SEGSTDA,1,1)||LOWER(SUBSTR(IN_SEGSTDA,2,LENGTH(IN_SEGSTDA))) IN_SEGSTDA
                        , RATEXT_AVALISTA
                     INTO VV_IN_SEGSTDA_AVAL, VN_RATING_AVAL
                     FROM BAS_MEN.MAESTRO_FACTORING_COBERTURA
                    WHERE (OR_CLUNICONTR = IN_REC.OR_CLUNICONTR OR FLOOR(OR_CLUNICONTR/100) = IN_REC.OR_CLUNICONTR)
                      AND OR_REFOPE IS NULL;
               EXCEPTION
                  WHEN OTHERS THEN
                      VV_FAC_COBERT_ENCONTRADO := FALSE;
               END;
        END;
        
		/*FIN 11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column */

               /* TRATAMIENTO PARA LOS CREDITOS OFICIALES CON COBERTURA. Parte garantizada XCG, 14/01/11 */

               IF NOT(VV_FAC_COBERT_ENCONTRADO) THEN

                  IF IN_REC.OR_CODGAR = 'GR 12105' THEN

                     BEGIN
                        SELECT substr(SEGMENTO,1,1)||lower(substr(SEGMENTO,2,length(SEGMENTO))) IN_SEGSTDA, IN_RATAVA
                          INTO VV_IN_SEGSTDA_AVAL, VN_RATING_AVAL
                          FROM BAS_MEN.CREDITO_OFICIAL_COBERTURA
                         WHERE OR_IDPERS = IN_REC.OR_IDPERS
                           AND OR_NUMCTA = IN_REC.OR_CLUNICONTR;

                               VV_FAC_COBERT_ENCONTRADO := TRUE;

                     EXCEPTION
                          WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                               VV_FAC_COBERT_ENCONTRADO := FALSE;
                     END;
                  END IF;

                  --Para el Factoring de MIAMI XCG, 7/2/2012

                  IF IN_REC.OR_NUMOFI = 825 AND IN_REC.IN_SUCEPT = 'EMFACO' THEN

                     BEGIN
                        SELECT 'Empresas', RATEXT
                          INTO VV_IN_SEGSTDA_AVAL, VN_RATING_AVAL
                          FROM BAS_MEN.ASEGURADORAS
                         WHERE OR_IDPERS = '12-M99999999';

                               VV_FAC_COBERT_ENCONTRADO := TRUE;

                     EXCEPTION
                          WHEN NO_DATA_FOUND OR TOO_MANY_ROWS THEN
                               VV_FAC_COBERT_ENCONTRADO := FALSE;
                     END;

                  END IF;

               END IF;

               /* Si encuentra el faactoring accede al maestro RWA_STDA para obtener el nuevo RWA */
               IF VV_FAC_COBERT_ENCONTRADO THEN

                  VN_FI_RWASTDA_AVAL := 999999;

                  IF UPPER(VV_IN_SEGSTDA_AVAL) = 'SOBERANOS' THEN
                     VN_FI_RWASTDA_AVAL := 0;
                  ELSE

                       BEGIN
                          SELECT PERCENT
                            INTO VN_FI_RWASTDA_AVAL
                            FROM BAS_MEN.MAESTRO_RWA_STDA
                           WHERE NOM     = UPPER(VV_IN_SEGSTDA_AVAL)
                             AND RAT_EXT = UPPER(VN_RATING_AVAL);
                       EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                 VN_FI_RWASTDA_AVAL := 999999;
                       END;

                  END IF;

                  /* Si el RWA obtenido es mejor se queda con el RWA del avalista */
                  IF VN_FI_RWASTDA_AVAL < VN_FI_RWASTDA THEN

                     -- Actualiza los campos de segmentos
                     VV_IN_SEGSTDA_PRE  := VV_IN_SEGSTDA_INI;
                     VV_IN_SEGSTDA_POST := VV_IN_SEGSTDA_AVAL;
                     VV_IN_SEGSTDA      := VV_IN_SEGSTDA_AVAL;

                     -- Actualiza los campos de rwa
                     /*VN_FI_POSPRESTDA   := VN_FI_POSPRESTDA_INI;RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                     /*VN_FI_POSPOSTSTDA  := VN_FI_RWASTDA_AVAL;  RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                     VN_FI_RWASTDA      := VN_FI_RWASTDA_AVAL;

                     IF VV_IN_SEGSTDA_INI IN ('RRE','CRE') THEN
                        VN_FI_RWA1 := VN_FI_RWASTDA;
                        VN_FI_RWA2 := VN_FI_RWASTDA;
                      --VN_FI_RWA3 := VN_FI_RWASTDA; SMG 17/09/19 - Modificaciones eliminación tramo 3
                        VN_FI_RWA3 := 0;
                        /*VN_FI_POSPRESTDA  := VN_FI_POSPRESTDA_HIP; RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                     END IF;

                  END IF;

               END IF;

               IF VV_IN_SEGSTDA_AUX in ('Morosos', 'Alto Riesgo') THEN
                  VN_FI_POSPOSTSTDA := VN_FI_RWASTDA;
                  IF VN_FI_POSPOSTSTDA > VN_FI_POSPRESTDA THEN
                      VN_FI_POSPOSTSTDA := VN_FI_POSPRESTDA;
                  END IF;
               END IF;

               --dbms_output.put_line(VV_IN_SEGSTDA||'-'||VV_IN_SEGSTDA_INI||'-'||VN_FI_RWASTDA||'-'||VN_FI_POSPRESTDA_INI||'-'||VN_FI_POSPRESTDA_HIP);

              /********************************************************************************************/
              /** Cambio de RWA de los Bonos garantizados:                                               **/
              /** ---------------------------------------                                                **/
              /** Se sustituye el RWA del emisor por el del bono y el segmeto del emisor por el del bono **/
              /**                                                                                        **/
              /********************************************************************************************/

               IF IN_REC.IN_SEGMBSINI = '034' THEN --Cédulas Hipotecarias. XCG, 25/03/14 - Se añade que no tengan rating JCVJCVJCV 201403
                  IF VV_IN_SEGSTDA_AUX in ('Morosos', 'Alto Riesgo') THEN
                     VN_FI_POSPRESTDA_INI:=  VN_FI_RWASTDA ;
                  ELSIF nvl(IN_REC.IN_RATEXT_ISIN, 'NR') not in ('NR', 'SR') or nvl(IN_REC.IN_RATEXT, 'NR') not in ('NR', 'SR')  THEN
                      BEGIN
                          SELECT PERCENT
                            INTO VN_FI_POSPRESTDA_INI
                            FROM BAS_MEN.MAESTRO_RWA_STDA
                           WHERE NOM     = 'BONOS GARANTIZADOS'
                             AND RAT_EXT = in_rec.IN_RATEXT_ISIN;
                        EXCEPTION
                             WHEN NO_DATA_FOUND THEN
                                  BEGIN
                                     SELECT PERCENT
                                       INTO VN_FI_POSPRESTDA_INI
                                       FROM BAS_MEN.MAESTRO_RWA_STDA
                                      WHERE NOM     = 'BONOS GARANTIZADOS'
                                        AND RAT_EXT = in_rec.in_ratext;
                                  EXCEPTION
                                     WHEN NO_DATA_FOUND THEN
                                          VN_FI_POSPRESTDA_INI := VN_FI_RWASTDA;
                                  END;
                        END;
                   ELSE
                         IF VN_FI_RWASTDA = 0.2  THEN VN_FI_POSPRESTDA_INI := 0.1;
                         ELSIF VN_FI_RWASTDA = 0.5  THEN VN_FI_POSPRESTDA_INI := 0.2;
                         ELSIF VN_FI_RWASTDA = 0.75 THEN VN_FI_POSPRESTDA_INI := 0.1;
                         ELSIF VN_FI_RWASTDA = 1    THEN VN_FI_POSPRESTDA_INI := 0.5;
                         ELSIF VN_FI_RWASTDA = 1.5  THEN VN_FI_POSPRESTDA_INI := 1;
                         END IF;
                  END IF;


                  -- CAMBIA EL SEGMENTO DEL EMISOR AL DEL BONO
                  VV_IN_SEGSTDA_INI  := 'Bonos Garantizados';
                  VV_IN_SEGSTDA      := VV_IN_SEGSTDA_INI;
                  VN_FI_RWASTDA      := VN_FI_POSPRESTDA_INI;
                  /*VN_FI_POSPRESTDA   := NULL; RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                  /*VN_FI_POSPOSTSTDA  := NULL; RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                  VV_IN_SEGSTDA_PRE  := NULL;
                  VV_IN_SEGSTDA_POST := NULL;

                  IF VV_IN_SEGSTDA_AUX in ('Morosos', 'Alto Riesgo') THEN
                     VN_FI_POSPRESTDA:= VN_FI_POSPRESTDA_INI;
                     VN_FI_POSPOSTSTDA:= VN_FI_RWASTDA;
                  END IF;

               END IF;

               /* Corrige la inicialización de las entradas y salidas, poniéndolas a null si el segmento de entradas esta sin informar */
               /*IF VV_IN_SEGSTDA_POST IS NULL THEN
                   /* VN_FI_POSPOSTSTDA := NULL; RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
                   /*VN_FI_POSPRESTDA  := NULL; RMR 20/03/2020 Eliminado asignación nuevo valor a FI_POSPOSTSTDA */
               /*END IF;*/

               IF vv_IN_SEGSTDA IN ('CRE','RRE') AND VV_IN_SEGSTDA_AUX not in ('Morosos', 'Alto Riesgo') THEN
                  IF nvl(VN_FI_EXPSTDA_FULLY_CON, 0) = 0 THEN
                     VN_FI_RWASTDA := (nvl(VV_in_tramo1,0)*NVL(VN_FI_RWA1,0)) + (nvl(VV_in_tramo2,0)*NVL(VN_FI_RWA2,0)) + (nvl(VV_in_tramo3,0)*NVL(VN_FI_RWA3,0));
                  ELSE
                        -- CALCULA LA MEDIA PONDERA DEL RWA PARA UTILIZARLA EN CASO DE APLICAR GARANTÍAS
                       VN_FI_RWASTDA := (NVL(VN_FI_RWA1,0) * nvl(VN_FI_EXPSTDA_FULLY_CON1, 0) + NVL(VN_FI_RWA2,0) * nvl(VN_FI_EXPSTDA_FULLY_CON2, 0) +
                                                 NVL(VN_FI_RWA3,0) * nvl(VN_FI_EXPSTDA_FULLY_CON3, 0))/(VN_FI_EXPSTDA_FULLY_CON1+VN_FI_EXPSTDA_FULLY_CON2+VN_FI_EXPSTDA_FULLY_CON3);
                  END IF;
               end if;

               IF vv_IN_SEGSTDA_ini IN ('CRE','RRE') AND VV_IN_SEGSTDA_AUX not in ('Morosos', 'Alto Riesgo') THEN
                  VN_FI_POSPRESTDA_INI := VN_FI_POSPRESTDA_HIP;
               ELSIF vv_IN_SEGSTDA_ini IN ('CRE','RRE') AND VV_IN_SEGSTDA_AUX in ('Morosos') THEN
                  VN_FI_POSPRESTDA:= VN_FI_POSPRESTDA_HIP;
                 -- VN_FI_POSPOSTSTDA:= VN_FI_RWASTDA;
               END IF;

               IF vv_IN_SEGSTDA IN ('CRE','RRE') AND VV_IN_SEGSTDA_AUX in ('Morosos', 'Alto Riesgo') THEN
                  IF nvl(VN_FI_EXPSTDA_FULLY_CON, 0) = 0 THEN
                     VN_FI_RWASTDA := (nvl(VV_in_tramo1,0)*NVL(VN_FI_RWA1,0)) + (nvl(VV_in_tramo2,0)*NVL(VN_FI_RWA2,0)) + (nvl(VV_in_tramo3,0)*NVL(VN_FI_RWA3,0));
                  ELSE
                        -- CALCULA LA MEDIA PONDERA DEL RWA PARA UTILIZARLA EN CASO DE APLICAR GARANTÍAS
                       VN_FI_RWASTDA := (NVL(VN_FI_RWA1,0) * nvl(VN_FI_EXPSTDA_FULLY_CON1, 0) + NVL(VN_FI_RWA2,0) * nvl(VN_FI_EXPSTDA_FULLY_CON2, 0) +
                                                 NVL(VN_FI_RWA3,0) * nvl(VN_FI_EXPSTDA_FULLY_CON3, 0))/(VN_FI_EXPSTDA_FULLY_CON1+VN_FI_EXPSTDA_FULLY_CON2+VN_FI_EXPSTDA_FULLY_CON3);
                  END IF;
               end if;

          /********************************************************************************************************/
          /* APLICAMOS PROVISIONES, COGEMOS LOS CAMPOS DE LAS VARIABLES YA CALCULADAS                             */
          /********************************************************************************************************/

               VN_FI_PROV_PHASEIN                 := 0;
               VN_FI_PROV_PHASEIN_CON             := 0;
               VN_FI_PROV_PHASEIN1                := 0;
               VN_FI_PROV_PHASEIN2                := 0;
               VN_FI_PROV_PHASEIN3                := 0;
               VN_FI_PROV_PHASEIN_CON1            := 0;
               VN_FI_PROV_PHASEIN_CON2            := 0;
               VN_FI_PROV_PHASEIN_CON3            := 0;
               VN_FI_PROV_FULLY                   := 0;
               VN_FI_PROV_FULLY_CON               := 0;
               VN_FI_PROV_FULLY1                  := 0;
               VN_FI_PROV_FULLY2                  := 0;
               VN_FI_PROV_FULLY3                  := 0;
               VN_FI_PROV_FULLY_CON1              := 0;
               VN_FI_PROV_FULLY_CON2              := 0;
               VN_FI_PROV_FULLY_CON3              := 0;

               -- Provisiones especificas       -- 2018/04 Dejamos de distinguir por dotación (eliminamos el tratamiento para la genérica)

               IF (IN_REC.TOTAL <= 0 AND IN_REC.OR_PROVAPL > 0) OR (IN_REC.TOTAL >= 0 AND IN_REC.OR_PROVAPL < 0) THEN /*XCG, Saldo distinto a dotación. Dotación 0. xcg.20/04/2018*/
                  VN_FI_PROV_FULLY := 0;
                  VN_TOTAL_FULLY:= IN_REC.TOTAL;
               ELSE
                    IF abs(IN_REC.OR_PROVAPL) > abs(IN_REC.TOTAL) THEN
                       VN_FI_PROV_FULLY := IN_REC.TOTAL; --Dotación mayor que saldo, dotación igual a saldo (3/12/12).
                    else
                           VN_FI_PROV_FULLY := IN_REC.OR_PROVAPL;
                    END IF;

                    VN_TOTAL_FULLY:= IN_REC.TOTAL - VN_FI_PROV_FULLY;

               END IF;

               IF (IN_REC.TOTALCON <= 0 AND IN_REC.OR_PROVAPL > 0) OR (IN_REC.TOTALCON >= 0 AND IN_REC.OR_PROVAPL < 0) THEN /*XCG, Saldo distinto a dotación. Dotación 0. xcg.20/04/2018*/
                  VN_FI_PROV_FULLY_CON := 0;
                  VN_TOTAL_FULLY_CON := IN_REC.TOTALCON;
               ELSE
                    IF abs(IN_REC.OR_PROVAPL) > abs(IN_REC.TOTALCON) THEN
                       VN_FI_PROV_FULLY_CON := IN_REC.TOTALCON * IN_REC.FI_PORCON; /*Dotación mayor que saldo, dotación igual a saldo (3/12/12).                */
                    else
                            VN_FI_PROV_FULLY_CON := IN_REC.OR_PROVAPL * IN_REC.FI_PORCON;
                    END IF;

                    VN_TOTAL_FULLY_CON := IN_REC.TOTALCON - VN_FI_PROV_FULLY_CON;

               END IF;

               VN_NUMERR:= 170;

               IF VV_IN_SEGSTDA_INI IN ('CRE','RRE') THEN
                  IF (IN_REC.TOTAL <= 0 AND IN_REC.OR_PROVAPL > 0) OR (IN_REC.TOTAL >= 0 AND IN_REC.OR_PROVAPL < 0)  THEN /*XCG, Saldo distinto a dotación. Dotación 0. xcg.20/04/2018*/
                     VN_FI_PROV_FULLY := 0;
                     VN_FI_PROV_FULLY1:= 0;
                     VN_FI_PROV_FULLY2:= 0;
                     VN_FI_PROV_FULLY3:= 0;
                     VN_TOTAL_FULLY1      := VN_TOTAL1 ;
                     VN_TOTAL_FULLY2      := VN_TOTAL2 ;
                     VN_TOTAL_FULLY3      := VN_TOTAL3;
                  ELSE
                       VN_FI_PROV_FULLY1    := VN_FI_PROV_FULLY   * VV_IN_TRAMO1;
                       VN_FI_PROV_FULLY2    := VN_FI_PROV_FULLY   * VV_IN_TRAMO2;
                       VN_FI_PROV_FULLY3    := VN_FI_PROV_FULLY   * VV_IN_TRAMO3;
                       VN_TOTAL_FULLY1      := VN_TOTAL1          - VN_FI_PROV_FULLY1;
                       VN_TOTAL_FULLY2      := VN_TOTAL2          - VN_FI_PROV_FULLY2;
                       VN_TOTAL_FULLY3      := VN_TOTAL3          - VN_FI_PROV_FULLY3;
                  END IF;

                  IF (IN_REC.TOTALCON <= 0 AND IN_REC.OR_PROVAPL > 0) OR (IN_REC.TOTALCON >= 0 AND IN_REC.OR_PROVAPL < 0) THEN /*XCG, Saldo distinto a dotación. Dotación 0. xcg.20/04/2018*/
                     VN_FI_PROV_FULLY_CON := 0;
                     VN_FI_PROV_FULLY_CON1:= 0;
                     VN_FI_PROV_FULLY_CON2:= 0;
                     VN_FI_PROV_FULLY_CON3:= 0;
                     VN_TOTAL_FULLY_CON1   := VN_TOTALCON1;
                     VN_TOTAL_FULLY_CON2   := VN_TOTALCON2;
                     VN_TOTAL_FULLY_CON3   := VN_TOTALCON3;
                  ELSE
                       VN_FI_PROV_FULLY_CON1 := VN_FI_PROV_FULLY_CON  * VV_IN_TRAMO1;
                       VN_FI_PROV_FULLY_CON2 := VN_FI_PROV_FULLY_CON  * VV_IN_TRAMO2;
                       VN_FI_PROV_FULLY_CON3 := VN_FI_PROV_FULLY_CON  * VV_IN_TRAMO3;
                       VN_TOTAL_FULLY_CON1   := VN_TOTALCON1          - VN_FI_PROV_FULLY_CON1;
                       VN_TOTAL_FULLY_CON2   := VN_TOTALCON2          - VN_FI_PROV_FULLY_CON2;
                       VN_TOTAL_FULLY_CON3   := VN_TOTALCON3          - VN_FI_PROV_FULLY_CON3;

                  END IF;

               END IF;

               VN_FI_PROV_PHASEIN       := VN_FI_PROV_FULLY       * IN_REC.SF;
               VN_FI_PROV_PHASEIN1      := VN_FI_PROV_FULLY1      * IN_REC.SF;
               VN_FI_PROV_PHASEIN2      := VN_FI_PROV_FULLY2      * IN_REC.SF;
               VN_FI_PROV_PHASEIN3      := VN_FI_PROV_FULLY3      * IN_REC.SF;
               VN_FI_PROV_PHASEIN_CON   := VN_FI_PROV_FULLY_CON   * IN_REC.SF_CONS;
               VN_FI_PROV_PHASEIN_CON1  := VN_FI_PROV_FULLY_CON1  * IN_REC.SF_CONS;
               VN_FI_PROV_PHASEIN_CON2  := VN_FI_PROV_FULLY_CON2  * IN_REC.SF_CONS;
               VN_FI_PROV_PHASEIN_CON3  := VN_FI_PROV_FULLY_CON3  * IN_REC.SF_CONS;
               VN_TOTAL_PHASEIN         := VN_TOTAL               - VN_FI_PROV_PHASEIN;
               VN_TOTAL_PHASEIN_CON     := VN_TOTALCON            - VN_FI_PROV_PHASEIN_CON;
               VN_TOTAL_PHASEIN1        := VN_TOTAL1              - VN_FI_PROV_PHASEIN1;
               VN_TOTAL_PHASEIN2        := VN_TOTAL2              - VN_FI_PROV_PHASEIN2;
               VN_TOTAL_PHASEIN3        := VN_TOTAL3              - VN_FI_PROV_PHASEIN3;
               VN_TOTAL_PHASEIN_CON1    := VN_TOTALCON1           - VN_FI_PROV_PHASEIN_CON1;
               VN_TOTAL_PHASEIN_CON2    := VN_TOTALCON2           - VN_FI_PROV_PHASEIN_CON2;
               VN_TOTAL_PHASEIN_CON3    := VN_TOTALCON3           - VN_FI_PROV_PHASEIN_CON3;

               VN_NUMERR:= 180;

               -- Asignación de la exposicion en funcion del tipo de exposicion
               IF UPPER(IN_REC.FI_TIPEXP) in ('OTC', 'REPOS') THEN -- 201406 20140730 EAD STDA = EAD IRB
                  VN_FI_EXPSTDA_FULLY       := IN_REC.TOTAL;
                  VN_FI_EXPSTDA_FULLY_CON   := IN_REC.TOTALCON;
                  VN_FI_EXPSTDA_PHASEIN     := IN_REC.TOTAL;
                  VN_FI_EXPSTDA_PHASEIN_CON := IN_REC.TOTALCON;

                  --INI - NAV - 03/10/2019 -- informar EXPSTDA_PHASEIN1, 2, 3
                  VN_FI_EXPSTDA_PHASEIN1     := VN_TOTAL_FULLY1;
                  VN_FI_EXPSTDA_PHASEIN2     := VN_TOTAL_FULLY2;
                  VN_FI_EXPSTDA_PHASEIN3     := VN_TOTAL_FULLY3;
                  VN_FI_EXPSTDA_PHASEIN_CON1 := VN_TOTAL_PHASEIN_CON1 * VN_FI_CCFSTDA;
                  VN_FI_EXPSTDA_PHASEIN_CON2 := VN_TOTAL_PHASEIN_CON2 * VN_FI_CCFSTDA;
                  VN_FI_EXPSTDA_PHASEIN_CON3 := VN_TOTAL_PHASEIN_CON3 * VN_FI_CCFSTDA;
                  --FIN - NAV - 03/10/2019 -- informar EXPSTDA_PHASEIN1, 2, 3

                  IF VV_IN_SEGSTDA_INI IN ('CRE','RRE') THEN
                     VN_FI_EXPSTDA_FULLY1       := VN_TOTAL_FULLY1;
                     VN_FI_EXPSTDA_FULLY2       := VN_TOTAL_FULLY2;
                     VN_FI_EXPSTDA_FULLY3       := VN_TOTAL_FULLY3;
                     VN_FI_EXPSTDA_FULLY_CON1   := VN_TOTAL_FULLY_CON1;
                     VN_FI_EXPSTDA_FULLY_CON2   := VN_TOTAL_FULLY_CON2;
                     VN_FI_EXPSTDA_FULLY_CON3   := VN_TOTAL_FULLY_CON3;
                     VN_FI_EXPSTDA_PHASEIN1     := VN_TOTAL_FULLY1;
                     VN_FI_EXPSTDA_PHASEIN2     := VN_TOTAL_FULLY2;
                     VN_FI_EXPSTDA_PHASEIN3     := VN_TOTAL_FULLY3;
                     VN_FI_EXPSTDA_PHASEIN_CON1 := VN_TOTAL_FULLY_CON1;
                     VN_FI_EXPSTDA_PHASEIN_CON2 := VN_TOTAL_FULLY_CON2;
                     VN_FI_EXPSTDA_PHASEIN_CON3 := VN_TOTAL_FULLY_CON3;

                  END IF;

               ELSE
                    VN_FI_EXPSTDA_FULLY       := VN_TOTAL_FULLY         * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_FULLY_CON   := VN_TOTAL_FULLY_CON     * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN     := VN_TOTAL_PHASEIN       * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN_CON := VN_TOTAL_PHASEIN_CON   * VN_FI_CCFSTDA;

                    --INI - NAV - 03/10/2019 -- informar EXPSTDA_PHASEIN1, 2, 3
                    VN_FI_EXPSTDA_PHASEIN1     := VN_TOTAL_PHASEIN1 * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN2     := VN_TOTAL_PHASEIN2 * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN3     := VN_TOTAL_PHASEIN3 * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN_CON1 := VN_TOTAL_PHASEIN_CON1 * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN_CON2 := VN_TOTAL_PHASEIN_CON2 * VN_FI_CCFSTDA;
                    VN_FI_EXPSTDA_PHASEIN_CON3 := VN_TOTAL_PHASEIN_CON3 * VN_FI_CCFSTDA;
                    --FIN - NAV - 03/10/2019 -- informar EXPSTDA_PHASEIN1, 2, 3

                    IF VV_IN_SEGSTDA_INI IN ('CRE','RRE') THEN
                       VN_FI_EXPSTDA_FULLY1       := VN_TOTAL_FULLY1 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_FULLY2       := VN_TOTAL_FULLY2 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_FULLY3       := VN_TOTAL_FULLY3 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_FULLY_CON1   := VN_TOTAL_FULLY_CON1 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_FULLY_CON2   := VN_TOTAL_FULLY_CON2 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_FULLY_CON3   := VN_TOTAL_FULLY_CON3 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_PHASEIN1     := VN_TOTAL_PHASEIN1 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_PHASEIN2     := VN_TOTAL_PHASEIN2 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_PHASEIN3     := VN_TOTAL_PHASEIN3 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_PHASEIN_CON1 := VN_TOTAL_PHASEIN_CON1 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_PHASEIN_CON2 := VN_TOTAL_PHASEIN_CON2 * VN_FI_CCFSTDA;
                       VN_FI_EXPSTDA_PHASEIN_CON3 := VN_TOTAL_PHASEIN_CON3 * VN_FI_CCFSTDA;
                    END IF;

               END IF;

               --Se calcula un RWA ponderado una vez restadas las dotaciones. xcg, 02/01/14. Con la exposición y no el saldo orig.
               IF VV_IN_SEGSTDA IN ('CRE','RRE') /*AND IN_REC.IN_SEGSTDA_AUX not in ('Morosos', 'Alto Riesgo')*/  THEN
                  IF nvl(VN_FI_EXPSTDA_FULLY_CON, 0) = 0 THEN
                     VN_FI_RWASTDA:= (nvl(VV_IN_TRAMO1,0)*NVL(VN_FI_RWA1,0)) + (nvl(VV_IN_TRAMO2,0)*NVL(VN_FI_RWA2,0)) + (nvl(VV_IN_TRAMO3,0)*NVL(VN_FI_RWA3,0));
                  ELSE
                       VN_FI_RWASTDA:= (NVL(VN_FI_RWA1,0) * VN_FI_EXPSTDA_FULLY_CON1 + NVL(VN_FI_RWA2,0) * VN_FI_EXPSTDA_FULLY_CON2 +
                                        NVL(VN_FI_RWA3,0) * VN_FI_EXPSTDA_FULLY_CON3)/(VN_FI_EXPSTDA_FULLY_CON1+VN_FI_EXPSTDA_FULLY_CON2+VN_FI_EXPSTDA_FULLY_CON3);
                  END IF;
               END IF;


         /* depósitos a la vista en entidades de crédito reciban la misma ponderación que el efectivo en caja (0%) y segstda = 'Otros Activos'. ADP 26/03/19*/
         -- XCG, 02/09/2021 se añade una cuenta en la que su colateral está cubierto por un depósito a la vista en entidades de crédito
         IF ((IN_REC.FI_EPICON IN ('010010301010100000000000000000','010010301010203000000000000000','010010302010100000000000000000',
                                 '010010302010203000000000000000','010010100000000000000000000000') AND VV_IN_SEGSTDA_AUX not in ('Morosos', 'Alto Riesgo')) OR IN_REC.OR_CTAIND = 2610000100)  THEN
          VV_IN_SEGSTDA := 'Otros Activos';
          VN_FI_RWASTDA := 0;
          VV_IN_SEGSTDA_INI := 'Otros Activos';
          VN_FI_POSPRESTDA_INI := 0;
         END IF;

         /* INI - 25/02/2021 - NAV - 4. TM-4358: Llevar Update de Incomed al STDA y quitarlo de update pre coreps */
         IF IN_REC.FI_EPICON = '010050103010000000000000000000' AND IN_REC.OR_ENTITY = 9819 THEN
           VN_FI_RWASTDA := 0.5;
           VN_FI_POSPRESTDA_INI := 0.5;
         END IF;

         /* 14/12/2021 - NAV - HDEV-101419 -  Asignamos a Galera 1 y 2 un RWA de 0% */
         IF IN_REC.IN_TIPOREG = 'CETITULI' THEN
           VN_FI_RWASTDA := 0;

           IF in_rec.OR_IDPERS = '97-' THEN
             VV_IN_SEGSTDA := 'Otros Activos';
           END IF;
         END IF;

         /* NAV 25/05/2022 - HDEV-158497 - Haircut Divisa  */
         IF in_rec.OR_ENTITY in (81, 8211) AND in_rec.OR_CODGAR in ('GR 12101', 'GR 12102', 'GR 12103', 'GR 12104', 'GR 12301') 
         AND in_rec.IN_TIPOREG <> 'MXN' AND in_rec.OR_DIVISA <> in_rec.DIVIMPGAR AND in_rec.IN_SEGMBS2 <> '301' AND VN_FI_RWASTDA = 0 THEN
            VN_FI_RWASTDA := 0.2;
         END IF;

               -- SMG 17/09/19 - Modificaciones eliminación tramo 3
               VN_FI_RWA3                 :=0;
               VN_OR_SALDO_ORIG3          :=0;
               VN_OR_SALDO_ORIGCON3       :=0;
               VV_IN_TRAMO3               :=0;
               VN_OR_PROVAPL3             :=0;
               VN_FI_EXPSTDA_FULLY3       :=0;
               VN_FI_EXPSTDA_FULLY_CON3   :=0;
               VN_FI_EXPSTDA_PHASEIN3     :=0;
               VN_FI_EXPSTDA_PHASEIN_CON3 :=0;
               VN_FI_PROV_PHASEIN_CON3    :=0;
               VN_FI_PROV_PHASEIN3        :=0;
               VN_FI_PROV_FULLY3          :=0;
               VN_FI_PROV_FULLY_CON3      :=0;
               VN_FI_RWA3_INI             :=0;
               -- SMG 17/09/19 - Modificaciones eliminación tramo 3

               OUT_REC.OR_IDREG                        := IN_REC.OR_IDREG                 ;
               OUT_REC.IN_SEGSTDA                      := VV_IN_SEGSTDA                   ;
               OUT_REC.FI_RWASTDA                      := VN_FI_RWASTDA                   ;
               OUT_REC.FI_RATIOSPSTDA                  := VN_RATIO                        ;
               OUT_REC.FI_POSPOSTSTDA                  := VN_FI_POSPOSTSTDA               ;
               OUT_REC.IN_SEGSTDA_INI                  := VV_IN_SEGSTDA_INI               ;
               OUT_REC.IN_SEGSTDA_POST                 := VV_IN_SEGSTDA_POST              ;
               OUT_REC.IN_TRAMO2                       := VV_IN_TRAMO2                    ;
               OUT_REC.FI_RWA1                         := VN_FI_RWA1                      ;
               OUT_REC.FI_RWA2                         := VN_FI_RWA2                      ;
               OUT_REC.FI_RWA3                         := VN_FI_RWA3                      ;
               OUT_REC.OR_SALDO_ORIG1                  := VN_OR_SALDO_ORIG1               ;
               OUT_REC.OR_SALDO_ORIG3                  := VN_OR_SALDO_ORIG3               ;
               OUT_REC.OR_SALDO_ORIGCON1               := VN_OR_SALDO_ORIGCON1            ;
               OUT_REC.OR_SALDO_ORIGCON3               := VN_OR_SALDO_ORIGCON3            ;
               OUT_REC.OR_PROVAPL2                     := VN_OR_PROVAPL2                  ;
               OUT_REC.IN_SEGMBS1                      := IN_REC.IN_SEGMBS1               ;
               OUT_REC.FI_CCFSTDA                      := VN_FI_CCFSTDA                   ;
               OUT_REC.FI_POSPRESTDA                   := VN_FI_POSPRESTDA                ;
               OUT_REC.IN_SEGSTDA_PRE                  := VV_IN_SEGSTDA_PRE               ;
               OUT_REC.FI_POSPRESTDA_INI               := VN_FI_POSPRESTDA_INI            ;
               OUT_REC.IN_TRAMO1                       := VV_IN_TRAMO1                    ;
               OUT_REC.IN_TRAMO3                       := VV_IN_TRAMO3                    ;
               OUT_REC.OR_SALDO_ORIG                   := VN_OR_SALDO_ORIG                ;
               OUT_REC.OR_SALDO_ORIG2                  := VN_OR_SALDO_ORIG2               ;
               OUT_REC.OR_SALDO_ORIGCON                := VN_OR_SALDO_ORIGCON             ;
               OUT_REC.OR_SALDO_ORIGCON2               := VN_OR_SALDO_ORIGCON2            ;
               OUT_REC.OR_PROVAPL1                     := VN_OR_PROVAPL1                  ;
               OUT_REC.OR_PROVAPL3                     := VN_OR_PROVAPL3                  ;
               OUT_REC.FI_EXPSTDA_FULLY                := VN_FI_EXPSTDA_FULLY             ;
               OUT_REC.FI_EXPSTDA_FULLY_CON            := VN_FI_EXPSTDA_FULLY_CON         ;
               OUT_REC.FI_EXPSTDA_FULLY1               := VN_FI_EXPSTDA_FULLY1            ;
               OUT_REC.FI_EXPSTDA_FULLY2               := VN_FI_EXPSTDA_FULLY2            ;
               OUT_REC.FI_EXPSTDA_FULLY3               := VN_FI_EXPSTDA_FULLY3            ;
               OUT_REC.FI_EXPSTDA_FULLY_CON1           := VN_FI_EXPSTDA_FULLY_CON1        ;
               OUT_REC.FI_EXPSTDA_FULLY_CON2           := VN_FI_EXPSTDA_FULLY_CON2        ;
               OUT_REC.FI_EXPSTDA_FULLY_CON3           := VN_FI_EXPSTDA_FULLY_CON3        ;
               OUT_REC.FI_EXPSTDA_PHASEIN              := VN_FI_EXPSTDA_PHASEIN           ;
               OUT_REC.FI_EXPSTDA_PHASEIN_CON          := VN_FI_EXPSTDA_PHASEIN_CON       ;
               OUT_REC.FI_EXPSTDA_PHASEIN1             := VN_FI_EXPSTDA_PHASEIN1          ;
               OUT_REC.FI_EXPSTDA_PHASEIN2             := VN_FI_EXPSTDA_PHASEIN2          ;
               OUT_REC.FI_EXPSTDA_PHASEIN3             := VN_FI_EXPSTDA_PHASEIN3          ;
               OUT_REC.FI_EXPSTDA_PHASEIN_CON1         := VN_FI_EXPSTDA_PHASEIN_CON1      ;
               OUT_REC.FI_EXPSTDA_PHASEIN_CON2         := VN_FI_EXPSTDA_PHASEIN_CON2      ;
               OUT_REC.FI_EXPSTDA_PHASEIN_CON3         := VN_FI_EXPSTDA_PHASEIN_CON3      ;
               OUT_REC.FI_PROV_PHASEIN                 := VN_FI_PROV_PHASEIN              ;
               OUT_REC.FI_PROV_PHASEIN_CON             := VN_FI_PROV_PHASEIN_CON          ;
               OUT_REC.FI_PROV_PHASEIN_CON1            := VN_FI_PROV_PHASEIN_CON1         ;
               OUT_REC.FI_PROV_PHASEIN_CON2            := VN_FI_PROV_PHASEIN_CON2         ;
               OUT_REC.FI_PROV_PHASEIN_CON3            := VN_FI_PROV_PHASEIN_CON3         ;
               OUT_REC.FI_PROV_PHASEIN1                := VN_FI_PROV_PHASEIN1             ;
               OUT_REC.FI_PROV_PHASEIN2                := VN_FI_PROV_PHASEIN2             ;
               OUT_REC.FI_PROV_PHASEIN3                := VN_FI_PROV_PHASEIN3             ;
               OUT_REC.FI_PROV_FULLY                   := VN_FI_PROV_FULLY                ;
               OUT_REC.FI_PROV_FULLY_CON               := VN_FI_PROV_FULLY_CON            ;
               OUT_REC.FI_PROV_FULLY1                  := VN_FI_PROV_FULLY1               ;
               OUT_REC.FI_PROV_FULLY2                  := VN_FI_PROV_FULLY2               ;
               OUT_REC.FI_PROV_FULLY3                  := VN_FI_PROV_FULLY3               ;
               OUT_REC.FI_PROV_FULLY_CON1              := VN_FI_PROV_FULLY_CON1           ;
               OUT_REC.FI_PROV_FULLY_CON2              := VN_FI_PROV_FULLY_CON2           ;
               OUT_REC.FI_PROV_FULLY_CON3              := VN_FI_PROV_FULLY_CON3           ;
               OUT_REC.IN_SEGSTDA_AUX                  := VV_IN_SEGSTDA_AUX               ;
               OUT_REC.IN_SEGSTDA_HIP                  := VV_IN_SEGSTDA_HIP               ;
               OUT_REC.IN_INDMOR_STDA                  := IN_REC.IN_INDMOR_STDA           ;
               OUT_REC.C_CCP                           := VV_C_CCP                        ;
               OUT_REC.FI_RWA1_INI                     := VN_FI_RWA1_INI                  ; -- 201512 RWA Tramos Inicial (Antes de mitigación)
               OUT_REC.FI_RWA2_INI                     := VN_FI_RWA2_INI                  ; -- 201512 RWA Tramos Inicial (Antes de mitigación)
               OUT_REC.FI_RWA3_INI                     := VN_FI_RWA3_INI                  ; -- 201512 RWA Tramos Inicial (Antes de mitigación)
               OUT_REC.OR_IDMES                        := IN_REC.OR_IDMES                 ;
               OUT_REC.FI_SUMEXP_STDA                  := IN_REC.EAD                      ;
               OUT_REC.FI_VALTAS_STDA                  := VN_OR_VALTAS                    ;
               OUT_REC.FI_IMPLTV_STDA                  := IN_REC.OR_IMPLTV                ;


           pipe row(out_rec);

         END LOOP;

         EXCEPTION WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
END F_METODO_STDA;

END;

/

show errors;

--FLA 09/03/22 
/************************************************************************************/
/* CREATE DEL PROCEDIMIENTO DEL MITIGACION_GARANTIAS                                  */
/************************************************************************************/
CREATE OR REPLACE PROCEDURE BAS_MEN.MITIGACION_GARANTIAS IS

		v_NumErr         NUMBER(3);
		VV_RETORNO       VARCHAR2(2)  DEFAULT 'OK';
		VV_MENSAJE             VARCHAR2(255);

--PRINCIPAL--
BEGIN

      COMMIT;

    --
    -- Información de Inicio en Control del Proceso.
    --
    v_NumErr := 0;
    BAS_MEN.SP_Info_Control_Proces ('MITIGACION_GARANTIAS' , 'INICIADO');
    COMMIT;
	  
    v_NumErr := 1;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_GARANTIAS_2';

    /* La tabla PERIMETRO_GARANTIAS_1 se crea justo antes de la BASILEA_STDA */
    /* Obtenemos el perímetro  de las garantías de la base de exposiciones pendientes de mitigar (FI_RWASTDA = 99) */
    INSERT /*+ PARALLEL(c,4) */ INTO BAS_MEN.PERIMETRO_GARANTIAS_2 c
    SELECT /*+ full(p) full(bas) full(stda) PARALLEL(p,4) PARALLEL(bas,4) PARALLEL(stda,4) */  DISTINCT
          p.OR_CONTRATO_GARANTIA,
          bas.OR_CLUNICONTR,
          p.OR_CODGAR,
          p.FCHVCTOGR,
          p.FCHINVIG,
          p.TIPO_GARAN
      FROM BAS_MEN.PERIMETRO_GARANTIAS_1 p
     INNER JOIN BAS_MEN.BASILEA bas
        ON (bas.OR_CONTRATO_GARANTIA = p.OR_CONTRATO_GARANTIA AND bas.OR_CODGAR = p.OR_CODGAR)
     INNER JOIN BAS_MEN.BASILEA_STDA stda
        ON (bas.OR_IDREG = stda.OR_IDREG AND stda.FI_RWASTDA = 99 );  

    COMMIT;

    /*****************************************/
    /* OBTENCIÓN DATOS GARANTIAS FINANCIERAS */
    /*****************************************/

    v_NumErr := 2;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_GR_FINANCIERAS_1';

    INSERT /*+ PARALLEL(a,4) */ INTO BAS_MEN.PERIMETRO_GR_FINANCIERAS_1 a
    SELECT /*+ PARALLEL(per,4) PARALLEL(gr,4) PARALLEL(uso7,4) PARALLEL(p16,4) */ DISTINCT
           per.OR_CONTRATO_GARANTIA
         , per.OR_CLUNICONTR
         , per.OR_CODGAR
         , per.FCHVCTOGR
         , per.FCHINVIG
         , CASE WHEN gr.GR01_CODCONTRAT         IS NOT NULL THEN gr.GR11_CODGISIN
                WHEN uso7.CONTRATOGARANTIA_OPGR IS NOT NULL THEN uso7.CODIGOISINBIEN_OPGR_GRBI
            END AS CODIGOISIN
         , CASE WHEN gr.GR01_CODCONTRAT         IS NOT NULL THEN gr.GR01_DIVIMPGAR
                WHEN uso7.CONTRATOGARANTIA_OPGR IS NOT NULL THEN uso7.DIVISAGR_OPGR
            END AS DIVISAGR
         , p16.NUMPERSONA AS OR_NUMPERSONA
      FROM BAS_MEN.PERIMETRO_GARANTIAS_2 per
      LEFT JOIN BAS_MEN.GR10F_MAESTRO_GARANT gr
        ON ( per.OR_CONTRATO_GARANTIA = gr.GR01_CODCONTRAT)
      LEFT JOIN BAS_MEN.M_CAP_MIAMI_GARANTIA uso7
        ON ( per.OR_CONTRATO_GARANTIA = uso7.CONTRATOGARANTIA_OPGR)
     LEFT JOIN BAS_MEN.PE1601 p16
        ON ( per.OR_CONTRATO_GARANTIA = p16.CODCONTRAT)
     WHERE PER.TIPO_GARAN = 'FINA'; -- Solo buscaremos en las garantias financieras de BASILEA

    COMMIT;

    v_NumErr := 3;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.RATINGS_ISIN';

    INSERT /*+ PARALLEL(b,4) */  INTO BAS_MEN.RATINGS_ISIN b
    SELECT /*+ PARALLEL(USO2,4) */
          MESCONTABLE,
          CODIGOISIN,
          SECTOREISOR,
        --FITCH
          CASE WHEN FCHRTNGFHLPEISIN is not null THEN FCHRTNGFHLPEISIN --Fecha Fitch a LP para EMISIONES
               WHEN FCHRTNGFHLPEMSOR is not null THEN FCHRTNGFHLPEMSOR --Fecha Fitch a LP en caso de default para EMISIONES
               ELSE NULL
           END as FCH_RATING_FITCH,
          CASE WHEN FCHRTNGFHLPEISIN is not null AND RTNGFHLPEISIN  NOT IN ('NR','N.A','WD','WR','N.D.') THEN RTNGFHLPEISIN  --Rating Fitch a LP para EMISIONES
               WHEN FCHRTNGFHLPEMSOR is not null AND RTNGFHLPDEMSOR NOT IN ('NR','N.A','WD','WR','N.D.') THEN RTNGFHLPDEMSOR --Rating Fitch a LP en caso de default para EMISIONES  
               ELSE 'NR'
           END  as rating_FITCH,
        --MOODYS
          CASE WHEN FCHRTNGMDEISIN   is not null then FCHRTNGMDEISIN    -- Fecha Moodys para EMISIONES
               WHEN FCHRTNGMDLPEISIN is not null then FCHRTNGMDLPEISIN  -- Fecha Moodys LP para EMISIONES
               WHEN FCHRTNGMDEMSOR   is not null then FCHRTNGMDEMSOR    -- Fecha Moodys para EMISOR
               WHEN FCHRTNGMDUNEMSOR is not null then FCHRTNGMDUNEMSOR  -- Fecha Moodys de la deuda senior unsecured para EMISOR
               WHEN FCHRTNGMDDVEMSOR is not null then FCHRTNGMDDVEMSOR  -- Fecha Moodys en divisa extranjera para EMISOR
               ELSE NULL
           END as fch_rating_MOODYS,
          CASE WHEN FCHRTNGMDEISIN   is not null AND RTNGMDEISIN   NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGMDEISIN    -- Rating Moodys para EMISIONES
               WHEN FCHRTNGMDLPEISIN is not null AND RTNGMDLPEISIN NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGMDLPEISIN  -- Rating Moodys LP para EMISIONES
               WHEN FCHRTNGMDEMSOR   is not null AND RTNGMDEMSOR   NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGMDEMSOR    -- Rating Moodys para el EMISOR
               WHEN FCHRTNGMDUNEMSOR is not null AND RTNGMDUNEMSOR NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGMDUNEMSOR  -- Rating Moodys de la deuda senior unsecured para EMISOR
               WHEN FCHRTNGMDDVEMSOR is not null AND RTNGMDDVEMSOR NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGMDDVEMSOR  -- Rating Moodys en divisa extranjera para EMISOR
               ELSE 'NR'
           END as rating_MOODYS,
       --Standard and Poors
          CASE WHEN FCHRTNGSPEISIN   is not null then FCHRTNGSPEISIN   --Fecha SP para EMISIONES
               WHEN FCHRTNGSPLPEISIN is not null then FCHRTNGSPLPEISIN --Fecha SP de LP para EMISIONES
               WHEN FCHRTNGSPLPEMSOR is not null then FCHRTNGSPLPEMSOR --Fecha SP a LP en divisa extranjera para EMISOR
               ELSE NULL
           END as fch_rating_SP,
          CASE WHEN FCHRTNGSPEISIN   is not null AND RTNGSPEISIN     NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGSPEISIN     --Rating SP para EMISIONES
               WHEN FCHRTNGSPLPEISIN is not null AND RTNGSPLPEISIN   NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGSPLPEISIN   --Rating SP LP para EMISIONES
               WHEN FCHRTNGSPLPEMSOR is not null AND RTNGSPLPDVEMSOR NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGSPLPDVEMSOR --Rating SP a LP en divisa extranjera para EMISOR
               ELSE 'NR'
          END as rating_SP,
       --DBRS
          CASE WHEN FCHRTNGDBLPEISIN is not null then FCHRTNGDBLPEISIN  --Fecha DBRS para EMISIONES
               WHEN FCHRTNGDBLPEMSOR is not null then FCHRTNGDBLPEMSOR  --Fecha DBRS para EMISOR
               ELSE NULL
           END as fch_rating_DBRS,
          CASE WHEN FCHRTNGDBLPEISIN is not null AND RTNGDBLPEISIN NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGDBLPEISIN --Rating DBRS para EMISIONES
               WHEN FCHRTNGDBLPEMSOR is not null AND RTNGDBLPEMSOR NOT IN ('NR','N.A','WD','WR','N.D.') then RTNGDBLPEMSOR --Rating DBRS para EMISOR
               ELSE 'NR'
           END as rating_DBRS
      FROM BAS_MEN.M_BDU_RTINGEISIN USO2;
     COMMIT;

    v_NumErr := 4;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.GARANTIAS_FUERA_BASE_STDA_1';

    /* Insertamos los datos de las garantías financieras */
    INSERT /*+ PARALLEL (a,4) */ INTO BAS_MEN.GARANTIAS_FUERA_BASE_STDA_1 a
    SELECT /*+ PARALLEL (pr,4) PARALLEL (pers,4) PARALLEL (uso6,4) PARALLEL (rat,4) PARALLEL (sob,4)*/
           DISTINCT
           pr.OR_CONTRATO_GARANTIA
         , pr.OR_CLUNICONTR
         , pr.OR_CODGAR
         , pr.FCHVCTOGR
         , pr.FCHINVIG
         , pr.CODIGOISIN
         , pr.DIVISAGR
         , null as CODIGOLEIPER
         , null as OR_NUMPERSONA
         , null as OR_PERSON
         , null as OR_NIFCIF
         , null as OR_NOMPER
         , null as OR_IDCNAE
         , sob.CODI_PAIS   AS OR_CODISO
         , sob.RAT_INT     AS IN_RATSOB
         , rat.SECTOREISOR
         , uso6.CODCLIENTEOFEX   AS OR_CTACLI
         , case when uso6.CODCLIENTEOFEX is not null then 825 else null end AS OR_NUMOFI
         , rat.fch_rating_FITCH
         , rat.rating_FITCH
         , rat.fch_rating_MOODYS
         , rat.rating_MOODYS
         , rat.fch_rating_SP
         , rat.rating_SP
         , rat.fch_rating_DBRS
         , rat.rating_DBRS
      FROM BAS_MEN.PERIMETRO_GR_FINANCIERAS_1 pr
      LEFT JOIN BAS_MEN.M_RENTAFIJA_LIQUIDEZ rf
        ON ( pr.CODIGOISIN = rf.CODIGOISIN)
      LEFT JOIN BAS_MEN.M_CAP_MIAMI_PROD_IM uso6
        ON (pr.OR_CONTRATO_GARANTIA = USO6.CONTRATO)
      LEFT JOIN BAS_MEN.RATINGS_ISIN rat
        ON ( pr.CODIGOISIN = rat.CODIGOISIN)
      LEFT JOIN BAS_MEN.M_CAP_MIAMI_GARANTIA uso7
        ON (PR.OR_CONTRATO_GARANTIA = USO7.CONTRATOGARANTIA_OPGR AND
            PR.OR_CLUNICONTR = uso7.CONTRATO)
      LEFT JOIN BAS_MEN.MAESTRO_SOBERANOS sob
      ON (sob.CODI_CEE_PAIS = CASE WHEN uso7.CONTRATO IS NOT NULL AND
                                        USO7.CONTRATOGARANTIA_OPGR IS NOT NULL THEN USO7.CODIGOPAISBIEN_OPGR_GRBI
                                   ELSE rf.PAISRIESGOEMISIN 
                                END);
    COMMIT;

    v_NumErr := 5;

    /****************************************/
    /* OBTENCIÓN DATOS GARANTIAS PERSONALES */
    /****************************************/

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_1';

    /* Obtenemos el listado de los mejores posibles avalistas */
    INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_1 c
    SELECT /*+ full(a) full(b) PARALLEL (a,4) PARALLEL (b,4) */
           a.OR_CONTRATO_GARANTIA,
		   a.OR_CLUNICONTR,
           a.OR_NUMPERSONA,
           a.OR_NIFCIF,
           MIN(b.FI_POSPRESTDA_INI) KEEP (DENSE_RANK FIRST ORDER BY B.FI_POSPRESTDA_INI, A.OR_CONTRATO_GARANTIA,a.OR_NUMPERSONA NULLS LAST) AS FI_POSPRESTDA_INI,
           MIN(b.IN_SEGSTDA_INI)    KEEP (DENSE_RANK FIRST ORDER BY B.FI_POSPRESTDA_INI, A.OR_CONTRATO_GARANTIA,a.OR_NUMPERSONA NULLS LAST) AS IN_SEGSTDA_INI
      FROM BAS_MEN.BASILEA a
     INNER JOIN BAS_MEN.BASILEA_STDA b
             ON a.OR_IDREG = b.OR_IDREG
            AND b.IN_SEGSTDA_INI NOT IN ('Otros Activos', 'RRE/CRE', 'RRE','CRE') -- Excluimos hipotecas comerciales y retail
     WHERE a.FI_ELIMI1 = 'NO'
       AND a.in_sratin NOT IN ('MORA', 'BLQRM')
       AND a.IN_METODE = 'STDA'
       AND a.OR_NUMPERSONA <> 0
       AND a.OR_NIFCIF <> '?'
       AND a.OR_TIPIDE NOT IN (0,2,3,4,5) -- Excluimos personas fisicas del perímetro de garantes
       AND a.OR_CONTRATO_GARANTIA NOT IN (0, 999999999999992, 999999999999993, 999999999999994, 999999999999995, 999999999999996, 999999999999997, 999999999999999)
     GROUP BY a.OR_CONTRATO_GARANTIA, a.OR_CLUNICONTR, a.OR_NUMPERSONA, a.OR_NIFCIF ;

    COMMIT;

    v_NumErr := 6;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PE1601_AVALISTAS';

    /* Obtenemos los contratos y las personas avalistas de la PE16 */
    INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.PE1601_AVALISTAS c
    SELECT /*+ PARALLEL (a,4) */ DISTINCT CODCONTRAT, NUMPERSONA
      FROM BAS_MEN.PE1601 a
     WHERE CODRELPECO = 34;  -- Personas que actúan como avalistas

    COMMIT;

    v_NumErr := 7;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_2';

    /* Calculamos el mejor avalista basándonos en el menor RWA */
    INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_2 c
    SELECT /*+ PARALLEL (a,4) PARALLEL (b,4) */ b.CODCONTRAT AS OR_CONTRATO_GARANTIA, a.OR_CLUNICONTR,
           MIN(a.OR_NIFCIF)         KEEP (DENSE_RANK FIRST ORDER BY a.FI_POSPRESTDA_INI, b.CODCONTRAT, b.NUMPERSONA NULLS LAST) AS OR_NIFCIF,
           MIN(a.or_NUMPERSONA)     KEEP (DENSE_RANK FIRST ORDER BY a.FI_POSPRESTDA_INI, b.CODCONTRAT, b.NUMPERSONA NULLS LAST) AS OR_NUMPERSONA,
           MIN(a.FI_POSPRESTDA_INI) KEEP (DENSE_RANK FIRST ORDER BY a.FI_POSPRESTDA_INI, b.CODCONTRAT, b.NUMPERSONA NULLS LAST) AS FI_POSPRESTDA_INI,
           MIN(a.IN_SEGSTDA_INI)        KEEP (DENSE_RANK FIRST ORDER BY a.FI_POSPRESTDA_INI, b.CODCONTRAT, b.NUMPERSONA NULLS LAST) AS IN_SEGSTDA_INI
      FROM  BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_1 a
          , BAS_MEN.PE1601_AVALISTAS b
     WHERE a.or_NUMPERSONA = b.NUMPERSONA
     GROUP BY b.CODCONTRAT, a.OR_CLUNICONTR;

    COMMIT;

    v_NumErr := 8;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.AVALISTAS_FUERA_BASE_STDA_1';

    /* Nos quedamos con todas las personas que pueden ser avalistas, pero NO tienen exposiciones en BASILEA */
    INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.AVALISTAS_FUERA_BASE_STDA_1 c
    SELECT /*+ PARALLEL (aux, 4) PARALLEL (c, 4) */ DISTINCT
           aux.OR_CONTRATO_GARANTIA,
		   aux.OR_CLUNICONTR,
           aux.OR_CODGAR,
           aux.NUMPERSONA as OR_NUMPERSONA
      FROM (
            SELECT /*+ parallel (a, 4) parallel (b, 4) */
                   a.OR_CONTRATO_GARANTIA, a.OR_CLUNICONTR, a.OR_CODGAR, b.NUMPERSONA
              FROM BAS_MEN.PERIMETRO_GARANTIAS_2 a
             INNER JOIN BAS_MEN.PE1601_AVALISTAS b
                ON b.CODCONTRAT = a.OR_CONTRATO_GARANTIA
             WHERE A.TIPO_GARAN = 'PERS'
            ) aux
      LEFT JOIN BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_2 c
        ON (aux.OR_CONTRATO_GARANTIA = c.OR_CONTRATO_GARANTIA AND aux.NUMPERSONA = c.OR_NUMPERSONA
		AND aux.OR_CLUNICONTR = c.OR_CLUNICONTR)
     WHERE c.OR_CONTRATO_GARANTIA IS NULL AND C.OR_NUMPERSONA IS NULL AND c.OR_CLUNICONTR IS NULL;

    COMMIT;

    v_NumErr := 9;

    /* Insertamos los datos de las garantías personales */
    INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.GARANTIAS_FUERA_BASE_STDA_1 c
    SELECT /*+ PARALLEL (pr,4) PARALLEL (p2,4) PARALLEL (pers,4) PARALLEL (gr,4) PARALLEL (uso7,4) PARALLEL (emi,4) PARALLEL (sob,4) PARALLEL (uso1,4) PARALLEL (uso6,4) */
          DISTINCT
          pr.OR_CONTRATO_GARANTIA
        , pr.OR_CLUNICONTR
        , pr.OR_CODGAR
        , p2.FCHVCTOGR
        , p2.FCHINVIG
        , NULL     AS CODIGOISIN
        , CASE WHEN gr.GR01_CODCONTRAT         IS NOT NULL THEN gr.GR01_DIVIMPGAR
               WHEN uso7.CONTRATOGARANTIA_OPGR IS NOT NULL THEN uso7.DIVISAGR_OPGR
           END  AS DIVISAGR
        , pers.CODIGOLEIPER
        , pr.OR_NUMPERSONA
        , pers.PERSONALIDADPER  AS OR_PERSON
        , pers.IDEFISCPER       AS OR_NIFCIF
        , TRIM(pers.NOMBREPER||' '||pers.PRIMERAPELLPER||' '||pers.SEGUNDOAPELLPER) AS OR_NOMPER
        , pers.CNAEPER          AS OR_IDCNAE
        , sob.CODI_PAIS         AS OR_CODISO
        , sob.RAT_INT           AS IN_RATSOB
        , NULL                  AS SECTOREISOR
        , uso6.CODCLIENTEOFEX   AS OR_CTACLI
        , case when uso6.CODCLIENTEOFEX is not null then 825 else null end AS OR_NUMOFI
        , NULL  AS fch_rating_FITCH
        , case when uso1.CODIGOLEIEEMP is not null then RTNGFHLPDEEMP -- Rating Fitch a LP en caso de default para la empresa
               when emi.OR_NUMPERSONA  is not null then RATING_FITCH
           end  AS rating_FITCH
        , NULL  AS fch_rating_MOODYS
        , case when uso1.CODIGOLEIEEMP is not null then RTNGMDEEMP -- Rating Moodys para la empresa
               when uso1.CODIGOLEIEEMP is not null and RTNGMDEEMP is null then RTNGMDDVEEMP -- Rating Moodys en divisa extranjera para la empresa
               when emi.OR_NUMPERSONA  is not null then RATING_MOODYS
           end AS rating_MOODYS
        , NULL AS fch_rating_SP
        , case when uso1.CODIGOLEIEEMP is not null then RTNGSPLPDVEEMP -- Rating SP a LP en divisa extranjera para la empresa
               when emi.OR_NUMPERSONA  is not null then RATING_SP
           end AS rating_SP
        , NULL AS fch_rating_DBRS
        , case when uso1.CODIGOLEIEEMP is not null then RTNGDBLPEEMP -- Rating DBRS a LP para la empresa
               when emi.OR_NUMPERSONA  is not null then RATING_DBRS
           end AS rating_DBRS
     FROM BAS_MEN.AVALISTAS_FUERA_BASE_STDA_1 pr
     LEFT JOIN BAS_MEN.PERIMETRO_GARANTIAS_2 p2
        ON (pr.OR_CONTRATO_GARANTIA = p2.OR_CONTRATO_GARANTIA AND pr.OR_CODGAR = p2.OR_CODGAR)
     LEFT JOIN BAS_MEN.M_BDU_PERSONES pers
       ON ( pr.OR_NUMPERSONA = pers.NUMPERSONA)
     LEFT JOIN BAS_MEN.GR10F_MAESTRO_GARANT gr
       ON ( pr.OR_CONTRATO_GARANTIA = gr.GR01_CODCONTRAT)
     LEFT JOIN BAS_MEN.M_CAP_MIAMI_GARANTIA uso7
       ON ( pr.OR_CONTRATO_GARANTIA = uso7.CONTRATOGARANTIA_OPGR)
     LEFT JOIN BAS_MEN.RATINGS_EMISORES emi
       ON (emi.OR_NUMPERSONA = pr.OR_NUMPERSONA)
     LEFT JOIN BAS_MEN.MAESTRO_SOBERANOS sob
       ON (sob.CODI_CEE_PAIS = pers.PAISRESIDENPER)
     LEFT JOIN BAS_MEN.M_BDU_RTINGEEMP uso1
       ON ( pers.CODIGOLEIPER= uso1.CODIGOLEIEEMP)
     LEFT JOIN BAS_MEN.M_CAP_MIAMI_PROD_IM uso6
       ON (pr.OR_CONTRATO_GARANTIA = USO6.CONTRATO)
     ;

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','GARANTIAS_FUERA_BASE_STDA_1', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_NumErr := 10;

    /***********************************************/
    /* Cálculo GARANTIAS PERSONALES y FINANCIERAS  */
    /***********************************************/

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.GARANTIAS_FUERA_BASE_STDA_2';

    INSERT /*+ PARALLEL(a,4) */ INTO BAS_MEN.GARANTIAS_FUERA_BASE_STDA_2 a
   (
     OR_CONTRATO_GARANTIA
    ,OR_CLUNICONTR 
    ,OR_CODGAR
    ,FCHVCTOGR
    ,FCHINVIG
    ,CODIGOISIN
    ,DIVISAGR
    ,CODIGOLEIPER
    ,OR_NUMPERSONA
    ,OR_PERSON
    ,OR_NIFCIF
    ,OR_NOMPER
    ,OR_IDCNAE
    ,SECTOREISOR
    ,OR_CTACLI
    ,OR_NUMOFI
    ,OR_CODISO
    ,IN_RATSOB
    ,IN_SEGMBSINI
    ,IN_SEGMBS
    ,RATING_ISIN
    ,FCH_RATING_ISIN
    ,IN_SEGSTDA_INI  --fla ojo cambiar
    ,FI_POSPRESTDA_INI)
    SELECT
      cur.OR_CONTRATO_GARANTIA
     ,cur.OR_CLUNICONTR 
     ,cur.OR_CODGAR
     ,cur.FCHVCTOGR
     ,cur.FCHINVIG
     ,cur.CODIGOISIN
     ,cur.DIVISAGR
     ,cur.CODIGOLEIPER
     ,cur.OR_NUMPERSONA
     ,cur.OR_PERSON
     ,cur.OR_NIFCIF
     ,cur.OR_NOMPER
     ,cur.OR_IDCNAE
     ,cur.SECTOREISOR
     ,cur.OR_CTACLI
     ,cur.OR_NUMOFI
     ,cur.OR_CODISO
     ,cur.IN_RATSOB
     ,cur.IN_SEGMBSINI
     ,cur.IN_SEGMBS
     ,cur.RATING_ISIN
     ,cur.FCH_RATING_ISIN
     ,cur.IN_SEGSTDA_INI
     ,cur.FI_POSPRESTDA_INI
      FROM
        TABLE(BAS_MEN.CALCULO_CAMPOS_GR.F_GARANTIAS
        ( CURSOR
           ( SELECT /* PARALLEL(p,4) */
                OR_CONTRATO_GARANTIA
               ,OR_CLUNICONTR
              , OR_CODGAR
              , FCHVCTOGR
              , FCHINVIG
              , CODIGOISIN
              , DIVISAGR
              , CODIGOLEIPER
              , OR_NUMPERSONA
              , OR_PERSON
              , OR_NIFCIF
              , OR_NOMPER
              , OR_IDCNAE
              , OR_CODISO
              , IN_RATSOB
              , SECTOREISOR
              , fch_rating_FITCH
              , rating_FITCH
              , fch_rating_MOODYS
              , rating_MOODYS
              , fch_rating_SP
              , rating_SP
              , fch_rating_DBRS
              , rating_DBRS
              , OR_CTACLI
              , OR_NUMOFI
               FROM BAS_MEN.GARANTIAS_FUERA_BASE_STDA_1 p
            )
        )
             ) cur;

    COMMIT;

    v_NumErr := 11;

    /*******************************************/
    /* PREPARAMOS MEJORES GARANTIAS PERSONALES */
    /*******************************************/

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.AVALISTAS_FUERA_BASE_STDA_2';

    /* Nos quedamos con el mejor avalista (de fuera de base) para cada contrato */
    INSERT /*+ PARALLEL(c,4) */ INTO BAS_MEN.AVALISTAS_FUERA_BASE_STDA_2 c
    SELECT /*+ PARALLEL(a,4)*/ OR_CONTRATO_GARANTIA, OR_CLUNICONTR,
       MIN (OR_NUMPERSONA)     KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as OR_NUMPERSONA,
       MIN (OR_NIFCIF)         KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as OR_NIFCIF,
       MIN (FI_POSPRESTDA_INI) KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as FI_POSPRESTDA_INI,
       MIN (IN_SEGSTDA_INI)    KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as IN_SEGSTDA_INI
      FROM BAS_MEN.GARANTIAS_FUERA_BASE_STDA_2 a
     WHERE OR_CODGAR LIKE 'GR 21%'
     GROUP BY OR_CONTRATO_GARANTIA, OR_CLUNICONTR;

     COMMIT;

    v_NumErr := 12;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_3';

    /* Los avalistas con exposicion en la base prevalecen sobre los externos, pero los complementamos con los mejores externos */
       INSERT /*+ PARALLEL(a,4) */ INTO BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_3 a
     SELECT /*+ PARALLEL(b,4) */ OR_CONTRATO_GARANTIA, OR_CLUNICONTR, OR_NUMPERSONA, OR_NIFCIF, IN_SEGSTDA_INI, FI_POSPRESTDA_INI
       FROM BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_2   b
    UNION
     SELECT /*+ PARALLEL(c,4) */ OR_CONTRATO_GARANTIA, OR_CLUNICONTR, OR_NUMPERSONA, OR_NIFCIF, IN_SEGSTDA_INI, FI_POSPRESTDA_INI
       FROM BAS_MEN.AVALISTAS_FUERA_BASE_STDA_2  c
       WHERE NOT EXISTS ( SELECT 1 FROM  BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_2 d 
	                      WHERE d.OR_CONTRATO_GARANTIA = c.OR_CONTRATO_GARANTIA  
						    AND d.OR_CLUNICONTR = c.OR_CLUNICONTR);
	   --TRIM(OR_CONTRATO_GARANTIA||OR_CLUNICONTR)  NOT IN (SELECT /*+ PARALLEL (d, 4) */ TRIM(OR_CONTRATO_GARANTIA||OR_CLUNICONTR)  FROM BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_2 d); --ojo FLA
    COMMIT;

    v_NumErr := 13;

    /* Actualizamos Basilea con el mejor avalista encontrado */
    MERGE /*+ PARALLEL(dst,4)  PARALLEL(scr,4) */ INTO BAS_MEN.basilea dst
    USING BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_3 scr
       ON (dst.or_contrato_garantia = scR.OR_CONTRATO_GARANTIA AND dst.OR_CLUNICONTR = scR.OR_CLUNICONTR 
	   AND OR_CODGAR IN ('GR 21101','GR 21102','GR 21103','GR 21105','GR 21106','GR 21107','GR 21108','GR 21109','GR 21201','GR 21299','GR 21301') )
    WHEN MATCHED THEN
       UPDATE
          SET dst.OR_NIFCIFAVA = scr.OR_NIFCIF;

    COMMIT;

    v_NumErr := 14;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.BASILEA_PERS_PDTE_MITIGAR';

    /* Inventariamos aquellas exposiciones que necesitarán el RWA y el segmento del garante */
    INSERT /*+ PARALLEL(I,4) */ INTO BAS_MEN.BASILEA_PERS_PDTE_MITIGAR I
    SELECT /*+ full(b) PARALLEL(b,4) PARALLEL(a,4) */
          A.OR_IDMES
        , b.or_idreg  , b.or_clunicontr        , b.or_nifcif , b.or_nifcifava , b.or_titularitat
        , b.or_nomper , b.or_contrato_garantia , b.or_codgar , b.in_segmbsini , b.in_segmbs
        , b.in_sratin , b.fi_elimi1            , b.FI_CCFAIRB, b.FI_EADAIRB   , b.FI_EADCONAIRB
        , a.FI_EXPSTDA_FULLY
        , a.FI_EXPSTDA_FULLY_CON
        , a.IN_SEGSTDA_INI
        , a.IN_SEGSTDA
        , a.FI_RWASTDA
        , a.FI_POSPRESTDA_INI
      FROM BAS_MEN.basilea b
      INNER JOIN BAS_MEN.basilea_stda a
    ON ( b.or_idreg = a.or_idreg)
     WHERE b.fi_elimi1 = 'NO'
       AND b.in_sratin NOT IN ('MORA', 'BLQRM')
       AND b.or_nifcifava <> '?'
       AND a.FI_RWASTDA = 99  -- Marcados en el MAESTRO_SEGSTDA_GARANT_SAS como que su RWA depende del garante
       AND b.OR_CODGAR LIKE ('GR 21%')-- Que tengan un avalista   17/03/22 FLA
       --AND b.OR_CODGAR IN ('GR 21101', 'GR 21102','GR 21103','GR 21105','GR 21106','GR 21107','GR 21108','GR 21109','GR 21201','GR 21299','GR 21301') 17/03/22 FLA cambiamos mejor por linea anterior AND b.OR_CODGAR LIKE ('GR 21%')
     ORDER BY b.or_clunicontr, b.or_nifcif, b.or_titularitat;

    COMMIT;

    /********************************************/
    /* PREPARAMOS MEJORES GARANTIAS FINANCIERAS */
    /********************************************/

     v_NumErr := 15;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.FINANCIERAS_FUERA_BASE_STDA';

    /* Nos quedamos con el mejor avalista (de fuera de base) para cada contrato */
    INSERT /*+ PARALLEL(c,4) */ INTO BAS_MEN.FINANCIERAS_FUERA_BASE_STDA c
    SELECT /*+ PARALLEL(a,4) */ OR_CONTRATO_GARANTIA, OR_CLUNICONTR,
       MIN (OR_NUMPERSONA)     KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as OR_NUMPERSONA,
       MIN (OR_NIFCIF)         KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as OR_NIFCIF,
       MIN (FI_POSPRESTDA_INI) KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as FI_POSPRESTDA_INI,
       MIN (IN_SEGSTDA_INI)    KEEP (DENSE_RANK FIRST ORDER BY FI_POSPRESTDA_INI, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as IN_SEGSTDA_INI
      FROM BAS_MEN.GARANTIAS_FUERA_BASE_STDA_2 a
     WHERE OR_CODGAR LIKE 'GR 12%'
     GROUP BY OR_CONTRATO_GARANTIA, OR_CLUNICONTR;

    COMMIT;

     v_NumErr := 16;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.BASILEA_FINA_PDTE_MITIGAR';

    /* Insertamos en BASILEA_PDTE_MITIGAR las garantías financieras*/
    INSERT /*+ PARALLEL(I,4) */ INTO BAS_MEN.BASILEA_FINA_PDTE_MITIGAR I
    SELECT /*+ full(b) PARALLEL(b,4) PARALLEL(a,4) */
          A.OR_IDMES
        , b.or_idreg  , b.or_clunicontr        , b.or_nifcif , b.or_nifcifava , b.or_titularitat
        , b.or_nomper , b.or_contrato_garantia , b.or_codgar , b.in_segmbsini , b.in_segmbs
        , b.in_sratin , b.fi_elimi1            , b.FI_CCFAIRB, b.FI_EADAIRB   , b.FI_EADCONAIRB
        , a.FI_EXPSTDA_FULLY
        , a.FI_EXPSTDA_FULLY_CON
        , a.IN_SEGSTDA_INI
        , a.IN_SEGSTDA
        , a.FI_RWASTDA
        , a.FI_POSPRESTDA_INI
      FROM BAS_MEN.basilea b
      INNER JOIN BAS_MEN.basilea_stda a
    ON ( b.or_idreg = a.or_idreg)
     WHERE b.fi_elimi1 = 'NO'
       --AND b.or_idreg = a.or_idreg
      AND a.FI_RWASTDA = 99  -- Marcados en el MAESTRO_SEGSTDA_GARANT_SAS como que su RWA depende del garante
      AND b.OR_CODGAR LIKE ('GR 12%')-- Que tengan una garantía financiera 17/03/22 FLA
      --AND b.OR_CODGAR IN ('GR 12107','GR 12109','GR 12110','GR 12111','GR 12116','GR 12117','GR 12201','GR 12303','GR 12305') 17/03/22 FLA cambiamos mejor por linea anterior AND b.OR_CODGAR LIKE ('GR 12%')
     ORDER BY b.or_clunicontr, b.or_nifcif, b.or_titularitat;

    COMMIT;

    /************************************/
    /* MITIGACIÓN GARANTIAS FINANCIERAS */
    /************************************/

    v_NumErr := 17;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.BASILEA_GR_MITIGADO';

    /* Si el FI_POSPRESTDA_INI de la garantia financiera, mejora el RWA inicial, se utilizará ese valor como mitigacion */
    INSERT /*+ PARALLEL(I,4) */ INTO BAS_MEN.BASILEA_GR_MITIGADO I
    SELECT /*+ full(b) PARALLEL(b,4) PARALLEL(aval,4) */
          b.OR_IDMES
        , b.or_idreg  , b.or_clunicontr        , b.or_nifcif , b.or_nifcifava , b.or_titularitat
        , b.or_nomper , b.or_contrato_garantia , b.or_codgar , b.in_segmbsini , b.in_segmbs
        , b.in_sratin , b.fi_elimi1            , b.FI_CCFAIRB, b.FI_EADAIRB   , b.FI_EADCONAIRB
        , b.FI_EXPSTDA_FULLY
        , b.FI_EXPSTDA_FULLY_CON
        , b.IN_SEGSTDA_INI
        , CASE WHEN aval.FI_POSPRESTDA_INI <  b.FI_POSPRESTDA_INI THEN aval.IN_SEGSTDA_INI
               ELSE b.IN_SEGSTDA_INI
           END AS IN_SEGSTDA
        , CASE WHEN aval.FI_POSPRESTDA_INI <  b.FI_POSPRESTDA_INI THEN aval.FI_POSPRESTDA_INI
               ELSE b.FI_POSPRESTDA_INI
           END AS FI_RWASTDA
        , b.FI_POSPRESTDA_INI
      FROM BAS_MEN.BASILEA_FINA_PDTE_MITIGAR b
     INNER JOIN BAS_MEN.FINANCIERAS_FUERA_BASE_STDA aval
        ON (b.or_contrato_garantia  = aval.or_contrato_garantia
            and b.or_clunicontr     = aval.or_clunicontr)
       WHERE b.or_codgar LIKE 'GR 12%'
         AND aval.IN_SEGSTDA_INI <> '?';  /* NAV - 02/05/2022 - HDEV-152520 - Exposiciones con OR_COGDAR =12107 (Garantías sobre valores renta fija depositados en BS) 
         que entran en el nuevo proceso de mitigación de Miami y no encuentran Sector en la tabla de ratings de Bloomberg ? Dejar los registros sin mitigar 
         (actualizar segmento final y RWA final con los valores iniciales) */

    COMMIT;

    /***********************************/
    /* MITIGACIÓN GARANTIAS PERSONALES */
    /***********************************/

    v_NumErr := 18;

    /* Si el FI_POSPRESTDA_INI del avalista es mejor que el del avalado, se avala, en caso contrario dejamos los valores pre mitigación */
    INSERT /*+ PARALLEL(I,4) */ INTO BAS_MEN.BASILEA_GR_MITIGADO I
    SELECT /*+ full(b) PARALLEL(b,4) PARALLEL(aval,4) */
          b.OR_IDMES
        , b.or_idreg  , b.or_clunicontr        , b.or_nifcif , b.or_nifcifava , b.or_titularitat
        , b.or_nomper , b.or_contrato_garantia , b.or_codgar , b.in_segmbsini , b.in_segmbs
        , b.in_sratin , b.fi_elimi1            , b.FI_CCFAIRB, b.FI_EADAIRB   , b.FI_EADCONAIRB
        , b.FI_EXPSTDA_FULLY
        , b.FI_EXPSTDA_FULLY_CON
        , b.IN_SEGSTDA_INI
        , CASE WHEN aval.FI_POSPRESTDA_INI <  b.FI_POSPRESTDA_INI THEN aval.IN_SEGSTDA_INI
               ELSE b.IN_SEGSTDA_INI
           END AS IN_SEGSTDA
        , CASE WHEN aval.FI_POSPRESTDA_INI <  b.FI_POSPRESTDA_INI THEN aval.FI_POSPRESTDA_INI
               ELSE b.FI_POSPRESTDA_INI
           END AS FI_RWASTDA
        , b.FI_POSPRESTDA_INI
      FROM BAS_MEN.BASILEA_PERS_PDTE_MITIGAR b
     INNER JOIN BAS_MEN.MEJOR_AVALISTA_STDA_TEMP_3 aval
        ON (b.or_contrato_garantia = aval.or_contrato_garantia AND b.or_nifcifava = aval.or_nifcif AND b.or_clunicontr = aval.or_clunicontr)
       WHERE b.or_codgar LIKE 'GR 21%' 
         AND aval.IN_SEGSTDA_INI <> '?';  /* NAV - 02/05/2022 - HDEV-152520 - Exposiciones con OR_COGDAR =12107 (Garantías sobre valores renta fija depositados en BS) 
             que entran en el nuevo proceso de mitigación de Miami y no encuentran Sector en la tabla de ratings de Bloomberg ? Dejar los registros sin mitigar 
             (actualizar segmento final y RWA final con los valores iniciales) */

    COMMIT;

    v_NumErr := 19;
   
    /* Actualizamos segmento standard final y RWA final con la mitigacion del avalista */
    MERGE /*+ PARALLEL (dst 4)  PARALLEL (scr 4) */ INTO BAS_MEN.BASILEA_STDA dst
    USING BAS_MEN.BASILEA_GR_MITIGADO scr
       ON (dst.or_idreg = scr.or_idreg)
    WHEN MATCHED THEN
       UPDATE
          SET dst.FI_RWASTDA = scr.FI_RWASTDA,
              dst.IN_SEGSTDA = scr.IN_SEGSTDA;

    COMMIT;

    v_NumErr := 20;

    /* Para todos aquellos que quedan sin avalista/garantía financiera, dejamos sus valores sin mitigación */
    UPDATE /*+ PARALLEL (a 4) */ BAS_MEN.BASILEA_STDA a
       SET FI_RWASTDA = FI_POSPRESTDA_INI,
           IN_SEGSTDA = IN_SEGSTDA_INI
    WHERE FI_RWASTDA = 99;

    COMMIT;

	v_Numerr := 30;
    BAS_MEN.SP_INFO_CONTROL_PROCES ('MITIGACION_GARANTIAS', 'FINALIZADO', VV_RETORNO);
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        --
        -- Actualización del fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
        VV_Mensaje  := SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' '||v_NumErr,1,255);
        VV_RETORNO  := 'KO';

        BAS_MEN.SP_INFO_CONTROL_PROCES ('MITIGACION_GARANTIAS', 'FINALIZADO', VV_RETORNO, VV_Mensaje);
        ROLLBACK;

        RAISE;
        COMMIT;
END;

/

show errors;

--FLA FIN


/************************************************************************************/
/* CREATE DEL PROCEDIMIENTO DEL STDA                                                */
/************************************************************************************/
CREATE OR REPLACE PROCEDURE BAS_MEN.METODO_STDA (PV_TABLA         IN  VARCHAR2,
                                                 PN_FECPRO        IN  NUMBER,
                                                 PN_OPC_DER       IN  NUMBER,
                                                 PN_F             IN  NUMBER,
                                               --  SW_APLICAR_PROVI IN  VARCHAR2,
                                                 PV_RET           OUT VARCHAR2) IS

VV_ROWID               VARCHAR2(12);
VN_COUNT               NUMBER(9):=0;
VN_COUNT_KO            NUMBER(9):=0;
VV_ERROR               VARCHAR2(100);
VN_NUMERR              NUMBER(3);
VV_RET                 VARCHAR2(2);
FALLO1                 EXCEPTION;
VV_MENSAJE             VARCHAR2(255);
SW_MARCA_DEFAULT       VARCHAR2(4); /* RMR 06/05/2020 - Añadido switch para controlar si el proceso es de contabilidad o de NDoD*/
SW_MARCA_HIGH_RISK     VARCHAR2(1);

--PRINCIPAL--
BEGIN

 PV_RET:= 'OK';
 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('METODO STANDARD '||PV_TABLA, SYSDATE, 'INICIADO');

COMMIT;

  VN_NUMERR:= 0;

  /* RMR 06/05/2020 - Inicio - Añadido switch para controlar si el proceso es de contabilidad o de NDoD*/
  BEGIN
     SELECT VALPARM
       INTO SW_MARCA_DEFAULT
       FROM BAS_MEN.parametros_proceso
      WHERE CODCSB     = 81
        AND CODPARM    = '0002'
        AND SECPARM    = '01';
     EXCEPTION
       WHEN OTHERS THEN
           RAISE;
   END;
     /* RMR 06/05/2020 - Fin*/

--   RECARGA DE LA TABLA GARANTIAS PIGNORATIVAS -- INICIO
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.GARANTIAS_PIGNORATIVAS');

  INSERT INTO BAS_MEN.GARANTIAS_PIGNORATIVAS
  SELECT * FROM DCRPROP_MENSUAL.GARANTIAS_PIGNORATIVAS_SAS;

  commit;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS');

  insert into BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS
  select * from DCRPROP_MENSUAL.MAESTRO_CUENTAS_CONT_DEPOS_SAS;

  commit;

  VN_NUMERR:= '110';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CONTRAPARTES');

  insert into BAS_MEN.MAESTRO_CONTRAPARTES
  select * from DCRPROP_MENSUAL.MAESTRO_CONTRAPARTES_SAS;

  commit;

  VN_NUMERR:= '130';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_RWA_STDA');

  insert into BAS_MEN.MAESTRO_RWA_STDA
  select * from DCRPROP_MENSUAL.MAESTRO_RWA_STDA_sas;

  commit;

  VN_NUMERR:= '140';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CUENTAS_RWA');
  insert into BAS_MEN.MAESTRO_CUENTAS_RWA
  select * from DCRPROP_MENSUAL.MAESTRO_CUENTAS_RWA_SAS;

  commit;

  VN_NUMERR:= '150';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SEGSTDA_GARANT');

  INSERT INTO BAS_MEN.MAESTRO_SEGSTDA_GARANT
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_SEGSTDA_GARANT_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS');

  INSERT INTO BAS_MEN.MAESTRO_EPIGRAFES_SEGMENTOS
  SELECT * FROM DCRPROP_MENSUAL.EPIGRAFES_SEGMENTOS_SAS;

  COMMIT;

  VN_NUMERR:= '160';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PAISES_UE_DIVISA');

  INSERT INTO BAS_MEN.MAESTRO_PAISES_UE_DIVISA
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PAISES_UE_DIVISA_SAS;

  COMMIT;

  VN_NUMERR:= '170';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PAISES_NOUE_DIVISA');

  INSERT INTO BAS_MEN.MAESTRO_PAISES_NOUE_DIVISA
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PAISES_NOUE_DIVISA_SAS;

  COMMIT;

  VN_NUMERR:= '180';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.FACTOR_DOTACION_SCALAR');

  INSERT INTO BAS_MEN.FACTOR_DOTACION_SCALAR
  SELECT * FROM DCRPROP_MENSUAL.FACTOR_DOTACION_SCALAR_SAS;

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_NOSUSCEPT_OFEX');

  INSERT INTO BAS_MEN.MAESTRO_NOSUSCEPT_OFEX
  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_NOSUSCEPT_OFEX_SAS;

  COMMIT;

  VN_NUMERR:= '181';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_HIGH_RISK');

  INSERT INTO BAS_MEN.MAESTRO_HIGH_RISK
  SELECT nvl(OR_NIFCIF, '?') as OR_NIFCIF, nvl(OR_CLUNICONTR, 0) as OR_CLUNICONTR, nvl(OR_CTACLI, 0) as OR_CTACLI, nvl(OR_REFOPE, 0) as OR_REFOPE
       , TIPO, FECHA_ALTA, OR_ENTITY
    FROM DCRPROP_MENSUAL.MAESTRO_HIGH_RISK_SAS;

  COMMIT;

  VN_NUMERR:= '182';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.IDREG_HIGH_RISK');

  INSERT INTO BAS_MEN.IDREG_HIGH_RISK
  SELECT or_idreg
    FROM (
        SELECT /*+ PARALLEL (b,8) */  or_idreg,
                CASE WHEN HRSK1.OR_NIFCIF <> '?' AND HRSK1.OR_REFOPE     <> 0 AND HRSK1.OR_CLUNICONTR <> 0 THEN 'S'
                     WHEN HRSK2.OR_NIFCIF <> '?' AND HRSK2.OR_REFOPE     <> 0 THEN 'S'
                     WHEN HRSK3.OR_NIFCIF <> '?' AND HRSK3.OR_CLUNICONTR <> 0 THEN 'S'
                     WHEN HRSK4.OR_NIFCIF <> '?' THEN 'S'
                     WHEN HRSK5.OR_REFOPE <> 0 AND HRSK5.OR_CLUNICONTR <> 0 THEN 'S'
                     WHEN HRSK6.OR_REFOPE <> 0 THEN 'S'
                     WHEN HRSK7.OR_CLUNICONTR <> 0 THEN 'S'
                     WHEN HRSK8.OR_CTACLI <> 0 THEN 'S'
                    ELSE 'N'
                END AS SW_MARCA_HIGH_RISK
          FROM BAS_MEN.BASILEA B
                 , (select distinct OR_NIFCIF, OR_REFOPE, OR_CLUNICONTR FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_NIFCIF <> '?' and OR_REFOPE <> 0 and OR_CLUNICONTR <> 0) HRSK1
                 , (select distinct OR_NIFCIF, OR_REFOPE                FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_NIFCIF <> '?' and OR_REFOPE <> 0 and OR_CLUNICONTR = 0) HRSK2
                 , (select distinct OR_NIFCIF, OR_CLUNICONTR            FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_NIFCIF <> '?' and OR_CLUNICONTR <> 0 and OR_REFOPE = 0) HRSK3
                 , (select distinct OR_NIFCIF                           FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_NIFCIF <> '?'and OR_CLUNICONTR = 0 and OR_REFOPE = 0) HRSK4
                 , (select distinct OR_REFOPE, OR_CLUNICONTR            FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_REFOPE <> 0 and OR_CLUNICONTR <> 0 and OR_NIFCIF = '?') HRSK5
                 , (select distinct OR_REFOPE                           FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_REFOPE <> 0 and OR_CLUNICONTR = 0 and OR_NIFCIF = '?') HRSK6
                 , (select distinct OR_CLUNICONTR                       FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_CLUNICONTR <> 0 and OR_REFOPE = 0 and OR_NIFCIF = '?') HRSK7
                 , (select distinct OR_CTACLI                           FROM BAS_MEN.MAESTRO_HIGH_RISK where OR_CTACLI <> 0) HRSK8
         WHERE FI_ELIMI1 = 'NO'
           AND b.OR_NIFCIF     = HRSK1.OR_NIFCIF(+) AND b.OR_REFOPE     = HRSK1.OR_REFOPE(+)    AND b.OR_CLUNICONTR = HRSK1.OR_CLUNICONTR(+)
           AND b.OR_NIFCIF     = HRSK2.OR_NIFCIF(+) AND b.OR_REFOPE     = HRSK2.OR_REFOPE(+)
           AND b.OR_NIFCIF     = HRSK3.OR_NIFCIF(+) AND b.OR_CLUNICONTR = HRSK3.OR_CLUNICONTR(+)
           AND b.OR_NIFCIF     = HRSK4.OR_NIFCIF(+)
           AND b.OR_REFOPE     = HRSK5.OR_REFOPE(+) AND b.OR_CLUNICONTR = HRSK5.OR_CLUNICONTR(+)
           AND b.OR_REFOPE     = HRSK6.OR_REFOPE(+)
           AND b.OR_CLUNICONTR = HRSK7.OR_CLUNICONTR(+)
           AND b.OR_CTACLI     = HRSK8.OR_CTACLI(+)
         )
   WHERE SW_MARCA_HIGH_RISK = 'S';
  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_REFOPE_DISPTO');

  --No suman las garantías pignoraticias
  INSERT /*+ parallel (X 4) */ INTO BAS_MEN.MAESTRO_REFOPE_DISPTO X
    --SELECT /*+ FULL(A) PARALLEL(A 4)   */ OR_REFOPE, SUM(A.OR_DISPTO), OR_ENTITY, OR_IDPERS, MAX(A.OR_VALTAS), MAX(OR_CONCED)
      SELECT /*+ FULL(A) PARALLEL(A 4)   */ OR_REFOPE, SUM(A.OR_DISPTO), OR_ENTITY, OR_IDPERS, CASE WHEN MAX(nop.IMPTASAC) IS NOT NULL THEN MAX(nop.IMPTASAC) ELSE MAX(A.OR_VALTAS) end, MAX(OR_CONCED)
         FROM BAS_MEN.BASILEA A,
              BAS_MEN.GARANTIAS_PIGNORATIVAS D,
              BAS_MEN.MAESTRO_FINCA_INMOBILIARIA INMO, --JCVJCVJCV 201403 Se añade el Maestro Finca Inmobiliaria
              BAS_MEN.SALUME_Z_SINPIG nop /* RMR 05/08/2020 Añadido para obtener el valor de la tasación */
        WHERE A.FI_ELIMI1 in ('NO', 'SRABS')
          AND NVL(OR_REFOPE, 0) <> 0
          AND A.OR_CODGAR = D.CODGAR(+)
          AND D.CODGAR IS NULL
          and inmo.TIPOFI(+) = OR_TIPOFI
          --and or_entity <> 9109
       /* AND IN_TIPOREG NOT IN ('OXE','PX','OX', 'MMOXE')  16/02/2022 BNM HDEV-111873 - ofex en los tramos hipotecarios  */
          and case
                   when OR_PROCED = 'LEASING' and OR_TIPOBJETO IN (2030, 2031,2010, 2011, 2020, 2021) then 'HIP'
                   when OR_TIPGAR IN ('HC','HV','HX','HR') and TIPO_FINCA = 'COMERCIAL' AND CONSTRUIDA = 'SI' and UPPER(INMUEBLE) = 'INMUEBLE' then 'HIP'
                   when OR_TIPGAR IN ('HC','HV','HX','HR') and TIPO_FINCA = 'RES' AND USO_PROPIO = 'SI' and UPPER(INMUEBLE) = 'INMUEBLE' then 'HIP'
                   else 'NOHIP'
              end = 'HIP'
           AND A.OR_CLUNIENT    = nop.entidadcto (+) /* RMR 05/08/2020 Añadidos los siguientes cruces */
           and A.OR_CLUNIPROD   = nop.CODTIPOPROD (+)
           and A.or_clunicontr  = nop.CODCONTRATO (+)
           group by OR_REFOPE, OR_ENTITY, OR_IDPERS;

  COMMIT;

  VN_NUMERR:= '030';

-- **  RECARGA DE LA TABLA BAS_MEN.BASILEA_SEGM_AUX -- INICIO
-- 201906 - Suma de exposici¢n STDA agrupando por id_cliente.
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_SEGM_AUX');

  INSERT /*+ parallel (X 4) */ INTO BAS_MEN.BASILEA_SEGM_AUX X
  SELECT /*+ FULL(BAS) FULL(MDR) FULL(INM) FULL(GAR) PARALLEL(BAS,4) PARALLEL(MDR,4) PARALLEL(INM,4) PARALLEL(GAR,4) PARALLEL(BAS,4) */
    BAS.OR_IDREG,
    --------------------------- IN_SEGSTDA_HIP -------------------------------------------------------------------
    CASE --WHEN BAS.OR_ENTITY = 9109 AND BAS.OR_TIPGAR = 'HR' THEN 'RRE'
         WHEN BAS.OR_PROCED = 'LEASING' AND BAS.OR_TIPOBJETO IN (2030, 2031,2010, 2011, 2020, 2021) THEN
              CASE WHEN BAS.OR_TIPOBJETO IN (2030, 2031) THEN 'RRE'
                   ELSE '?'
              END
         WHEN BAS.OR_TIPGAR IN ('HC','HV','HX','HR') AND GAR.CODGAR IS NULL THEN
              CASE
                   WHEN UPPER(INM.INMUEBLE) = 'INMUEBLE' AND INM.TIPO_FINCA = 'RES' AND INM.USO_PROPIO = 'SI' THEN 'RRE'
                   ELSE '?'
              END
         ELSE '?'
    END IN_SEGSTDA_HIP,
    --------------------------- OR_SALDO_ORIG ----------------------------------------------------------------------------------------
    CASE WHEN UPPER(BAS.FI_TIPEXP) IN ('OTC','REPOS') THEN NVL(BAS.FI_EADAIRB,0)
        ELSE BAS.OR_DISPTO + BAS.OR_DISBLE + BAS.OR_AVALES + BAS.OR_FUTURS + BAS.OR_REPOS + BAS.OR_AJUVAL END OR_SALDO_ORIG,
    --------------------------- OR_SALDO_ORIG3 ----------------------------------------------------------------------------------------------------------------------------
    CASE WHEN NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV) > 100 AND NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100)) <= 0  THEN 0
         WHEN NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV) > 100  THEN
            1 -
            --TRAMO 1 INI
            CASE WHEN  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100))) > 1 THEN 1
                 ELSE  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100)))  END
            --TRAMO 2 INI
            - (CASE WHEN  ((1 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100)))) -
                           CASE  WHEN  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100))) > 1 THEN 1
                                 ELSE  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100)))  END ) > 1 THEN
                                            1 - CASE WHEN  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100))) > 1 THEN 1
                                                     ELSE  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100)))  END
                   ELSE  (1 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100))) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100))) -
                           CASE  WHEN  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100))) > 1 THEN 1
                                 ELSE  (0.8 * NVL(MRD.OR_VALTAS,BAS.OR_VALTAS)) / ABS(NVL(MRD.OR_DISPTO,NVL(nop.IMPTASAC, BAS.OR_VALTAS)*(NVL(round((nop.IMPRIESVIVLTV/1000),2), BAS.OR_IMPLTV)/100)))  END END )

        ELSE 0 END
        *
        CASE WHEN UPPER(BAS.FI_TIPEXP) IN ('OTC','REPOS') THEN NVL(BAS.FI_EADAIRB,0)
             ELSE BAS.OR_DISPTO + BAS.OR_DISBLE + BAS.OR_AVALES + BAS.OR_FUTURS + BAS.OR_REPOS + BAS.OR_AJUVAL END AS OR_SALDO_ORIG3,
    /*--------------------------- ID_CLIENTE -------------------------------------------------------------------------------------------- 201906 - A¤adimos el identificador Id Cliente*/
    CASE WHEN NVL(BAS.IN_GRUP_IDPER,'?') <> '?' THEN
          'GRUP:' || BAS.IN_GRUP_IDPER
         WHEN BAS.OR_NUMOFI IN (800,801,813,821,825) AND BAS.OR_TITULARITAT = 0 THEN
          'OFEX:' || (BAS.OR_NUMOFI * 10000000000 + BAS.OR_CTACLI)
         WHEN BAS.OR_ENTITY = 9109 AND NVL(BAS.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
          'ANDO:' || BAS.OR_IDPERS
         WHEN BAS.OR_PERSONSCPCB IN (816,831,833) AND BAS.OR_PROCED <> 'FACTORING' and ( BAS.IN_SEGMBSINI in ('002','017') ) THEN
          'TITU:' || BAS.OR_TITUSCPCB
         WHEN BAS.OR_TITULARITAT NOT IN (0,9,99) THEN
          'TITU:' || BAS.OR_TITULARITAT
         WHEN NVL(BAS.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
          'NIFS:' || BAS.OR_NIFCIF
         ELSE
          'REGI:' || BAS.OR_IDREG
    END ID_CLIENTE
    FROM
    BAS_MEN.BASILEA BAS,
    BAS_MEN.MAESTRO_REFOPE_DISPTO MRD,
    BAS_MEN.MAESTRO_FINCA_INMOBILIARIA INM,
    BAS_MEN.GARANTIAS_PIGNORATIVAS GAR,
    BAS_MEN.SALUME_Z_SINPIG nop /* RMR 05/08/2020 */
  WHERE
    BAS.OR_REFOPE = MRD.OR_REFOPE(+)
    AND BAS.OR_IDPERS = MRD.OR_IDPERS(+)
    AND BAS.OR_ENTITY = MRD.OR_ENTITY(+)
    AND BAS.OR_TIPOFI = INM.TIPOFI(+)
    AND BAS.OR_CODGAR = GAR.CODGAR(+)
    AND BAS.OR_CLUNIENT    = nop.entidadcto (+)
    AND BAS.OR_CLUNIPROD   = nop.CODTIPOPROD (+)
    AND BAS.or_clunicontr  = nop.CODCONTRATO (+)
    ;

    COMMIT;

     VN_NUMERR:= '040';

 -- 201906 - Suma de exposici¢n STDA agrupando por id_cliente.

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SUMEAD_STDA');

  INSERT /*+ parallel (X 4) */  INTO BAS_MEN.MAESTRO_SUMEAD_STDA X
    SELECT T.ID_CLIENTE, SUM(T.FI_EXPSTDA_FULLY) FI_SUMEAD
      FROM (SELECT /*+ FULL(A) FULL(STDA)  parallel (a 4) parallel (STDA 4) */  ID_CLIENTE,
                   CASE WHEN FI_ELIMI1 IN ('NO','TITACT2','RFNEG','SWATIT','CRSUB','BONTIT','LINLIQ','EQUITY', 'SRABS') AND nvl(A.OR_TIPOPE,'?') <> 'RF' AND FI_TIPEXP = 'Drawn' THEN
                             DECODE(IN_SEGSTDA_HIP, 'RRE', DECODE(IN_INDMOR, 'SI', OR_SALDO_ORIG, 'CT', OR_SALDO_ORIG, 'AD', OR_SALDO_ORIG, OR_SALDO_ORIG3), OR_SALDO_ORIG)
                        else
                             0
                   END as FI_EXPSTDA_FULLY
              FROM BAS_MEN.BASILEA A,
                   BAS_MEN.BASILEA_SEGM_AUX STDA
             WHERE A.OR_IDREG = STDA.OR_IDREG
               ) T
     GROUP BY T.ID_CLIENTE;

  COMMIT;

  /*Para obtener la EAD del STDA, solo se utilizará la titularidad o el nif en caso de que esta no esté informada.*/
  /*Si el nif tampoco estuviese informado, se obtendría la EAD del registro. XCG, 28/08/08.                       */

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SEGMBS1_STDA');

  /************************************************************************************/
  /* LLAMADA A LA FUNCION                                                             */
  /************************************************************************************/

  insert /*+ PARALLEL (x 4) */ into BAS_MEN.SEGMBS1_STDA x
         (OR_IDREG, IN_SEGMBS1, EAD)
  select CUR.OR_IDREG, CUR.IN_SEGMBS1, CUR.EAD
    from table(BAS_MEN.CALCULO_STDA.F_SEGMENT_STDA
       (cursor(SELECT /*+ full(bas) full(stda) full(vend) parallel(vend 4) PARALLEL (BAS 4) PARALLEL (STDA 4) */  BAS.OR_IDREG,  BAS.OR_IDPERS, NVL(BAS.IN_VTAGRU,0) IN_VTAGRU, NVL(BAS.IN_VTAGRU_CONS,0) IN_VTAGRU_CONS,
                      BAS.OR_TITULARITAT, IN_NUMEMP, IN_NUMEMP_CONS,
                      DECODE(IN_SEGSTDA_HIP, 'RRE', DECODE(IN_INDMOR, 'SI', OR_SALDO_ORIG, 'CT', OR_SALDO_ORIG, 'AD', OR_SALDO_ORIG, OR_SALDO_ORIG3), OR_SALDO_ORIG) as FI_EXPSTDA_FULLY,
                      BAS.IN_SEGMBS1, BAS.IN_SEGMBS, NVL(BAS.OR_NIFCIF,'?') OR_NIFCIF, BAS.OR_TIPIDE, BAS.IN_SEGMBS0,
                      NVL(BAS.IN_ACTIVO,0) IN_ACTIVO, NVL(BAS.IN_ACTIVO_CONS,0) IN_ACTIVO_CONS, OBSERVACIONES,
                      NVL(IN_NUMEMP_CONS, 0) NUM_EMPLEADOS,
                      IN_TIPOREG, OR_CTACLI,IN_PYME, BAS.IN_GRUP_IDPER, BAS.OR_ENTITY, BAS.OR_REFOPE, FI_ELIMI1, OR_EPIIND, FI_EPICON
                      ,IN_SEGMBSINI, OR_NUMOFI, IN_SEGSTDA_HIP, IN_INDMOR
                      , OR_TIPOPE, OR_PROCED, OR_DISPTO, /* 201606 Se cambia la identificación de la RF, en lugar de ser por epígrafe será por el Tipo de Operación (OR_TIPOPE) */
                      OR_SALDO_ORIG3
                      , BAS.FI_SUMEXP
                    , STDA.ID_CLIENTE
                 FROM BAS_MEN.BASILEA BAS,
                      BAS_MEN.BASILEA_SEGM_AUX STDA,
                      BAS_MEN.MAESTRO_VENTAS VEND
                WHERE BAS.OR_IDREG = STDA.OR_IDREG
                  AND BAS.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','002','017','101','102','103','104','106','107', '011', '012', '013', '014', '015', '016') /*  Se añaden las corporaciones locales. XCG 20/06/2018*/
                  AND (BAS.IN_TIPOREG IN ('SA','FA','DN','FFD','PX','RX','OXE','MMDN' ,'MMOXC' ,'MMOXE' ,'MMPX', 'MMSA', 'CESA'
                                        ,'REN', 'OXC','CEOXE','RN','MMRN', 'AVSA', 'DI', 'SI', 'FMX', 'IIC-LTA', 'IIC-FBA') /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                      OR substr(BAS.IN_TIPOREG,1,2) = 'CI') /*RBR 7/09/2021 Añadido CI% */
                  AND BAS.OR_NIFCIF = VEND.CIF_FILIAL(+)), PN_FECPRO)) CUR;

  COMMIT;

   VN_NUMERR:= '181';

  /*----------------------------------------------*/
  /*  FUERZA LA RENTA FIJA A EMPRESAS             */
  /*----------------------------------------------*/
  UPDATE /*+ full(i) parallel (i 4)*/ BAS_MEN.SEGMBS1_STDA i
     SET IN_SEGMBS1 = '500'
   WHERE OR_IDREG IN (SELECT /*+ full(s) parallel (s 4)*/ OR_IDREG
                        FROM BAS_MEN.BASILEA s
                       WHERE s.OR_TIPOPE = 'RF' AND OR_PROCED <> 'TES-INTERM'
                     )
     AND IN_SEGMBS1 = '501';

  COMMIT;

  VN_NUMERR:= '190';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONTR_REFOPE_MOROSO_STDA');

  INSERT /*+ parallel (I 4)*/
    INTO BAS_MEN.CONTR_REFOPE_MOROSO_STDA I
  -- Corporaciones Locales, Otras Instituciones, Otros Activo y Soberanos
  SELECT /*+ parallel (Basi 4)*/ DISTINCT
         0
       , or_idpers
       , CASE
         -- No se tendrán en cuenta las C. Locales para los que la regulación aplica un tratamiento em ponderaciones (0% y 20%)
         -- es decir, no se tendran en cuenta los semgentos 001,  004, 024 y  025 de los Segmentos de C. Locales
          WHEN IN_SEGMBSINI IN ('033','039','040', '041')              THEN 'CORPORACIONES LOCALES'
          WHEN IN_SEGMBSINI IN ('011', '012','013','014','015','016')  THEN 'OTRAS INSTITUCIONES'
          WHEN IN_SEGMBSINI IN ('XXX')                                 THEN 'OTROS ACTIVOS'
          -- No se tendrán en cuenta las Soberanos para los que la regulación aplica un tratamiento em ponderaciones (0% y 20%)
          -- es decir, no se tendran en cuenta los semgentos 008, 022, 023, 030, 031, 035 de Soberanos
          WHEN IN_SEGMBSINI IN ('026','032','036','037','038')         THEN 'SOBERANOS'
         END
       , NULL -- TitUnica
    FROM BAS_MEN.BASILEA Basi
   WHERE IN_SEGMBSINI IN
         ( '033','039','040'
         , '011', '012','013','014','015','016'
         , 'XXX'
         , '026','032','036','037','038'
         )
      AND Basi.IN_INDMOR = 'SI'
      and or_idpers not in ('?', '12-', '97-', '00-', '95-')
      AND Basi.OR_PROCED <> 'ADJUDICADO'
  UNION
  -- Empresas y Comercios y Autonomos de 501
  SELECT /*+ parallel (Basi 4)*/ DISTINCT
          CASE
            WHEN NVL(Basi.OR_CLUNICONTR,0) IN (0,999999999999999) THEN Basi.OR_REFOPE
            ELSE                                                       Basi.OR_CLUNICONTR
          END
        , '?'
        , CASE
           WHEN IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN 'EMPRESAS'
           WHEN IN_SEGMBSINI IN ('002', '017', '101', '102')                      THEN 'COMERCIO Y AUTONOMOS'
          END
        , CASE
           WHEN IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN OR_TITULARITAT
           WHEN IN_SEGMBSINI IN ('002', '017', '101', '102')                      THEN DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT
                                                                                                             , OR_TITUSCPCB
                                                                                             )
          END TitUnica
     FROM BAS_MEN.BASILEA      Basi
        , BAS_MEN.SEGMBS1_STDA Seg1Stda
    WHERE Seg1Stda.OR_IDREG    = Basi.OR_IDREG
      AND Basi.IN_SEGMBSINI   IN ( '003', '005', '006', '009', '010', '019', '027' -- Empresas
                                 , '002', '017', '101', '102'                      -- CyA
                                 )
      AND Seg1Stda.IN_SEGMBS1  = '501'
      AND Basi.IN_INDMOR       = 'SI'
      AND Basi.OR_PROCED <> 'ADJUDICADO';

  COMMIT;

  VN_NUMERR:= '200';

  --Maestro de Posiciones Contratos/Refope - IdPers  Morosos (Ya Segmentado x el STDA)

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.IDREG_NOMOROSO_STDA');

  INSERT /*+ parallel (i 4)*/ INTO BAS_MEN.IDREG_NOMOROSO_STDA I
  -- Corporaciones Locales, Otras Instituciones, Otros Activo y Soberanos
  SELECT /*+ parallel (Basi 4)*/ DISTINCT
           OR_IDREG
        ,  0
        , or_idpers
        , CASE
           -- No se tendrán en cuenta las C. Locales para los que la regulación aplica un tratamiento em ponderaciones (0% y 20%)
           -- es decir, no se tendran en cuenta los semgentos 001, 004, 024 y  025 de los Segmentos de C. Locales
           WHEN IN_SEGMBSINI IN ('033','039','040', '041')              THEN 'CORPORACIONES LOCALES'
           WHEN IN_SEGMBSINI IN ('011', '012','013','014','015','016')  THEN 'OTRAS INSTITUCIONES'
           WHEN IN_SEGMBSINI IN ('XXX')                                 THEN 'OTROS ACTIVOS'
           -- No se tendrán en cuenta las Soberanos para los que la regulación aplica un tratamiento em ponderaciones (0% y 20%)
           -- es decir, no se tendran en cuenta los semgentos 008, 022, 023, 030, 031, 035 de Soberanos
           WHEN IN_SEGMBSINI IN ('026','032','036','037','038')         THEN 'SOBERANOS'
          END AS SEGMENTO
       ,  NULL -- TitUnica
     FROM BAS_MEN.BASILEA  Basi
    WHERE IN_SEGMBSINI IN
          ( '033','039','040'
          , '011', '012','013','014','015','016'
          , 'XXX'
          , '026','032','036','037','038'
          )
       AND Basi.IN_INDMOR = 'NO'
       and or_idpers not in ('?', '12-', '97-', '00-', '95-')
  UNION
  -- Empresas y Comercios y Autonomos de 501
  SELECT /*+ parallel (Basi 4)*/ DISTINCT
           Basi.OR_IDREG
        ,  CASE
            WHEN NVL(Basi.OR_CLUNICONTR,0) IN (0,999999999999999) THEN Basi.OR_REFOPE
            ELSE                                                       Basi.OR_CLUNICONTR
          END AS CONTRATO_REFOPE
        , '?'
        , CASE
           WHEN IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN 'EMPRESAS'
           WHEN IN_SEGMBSINI IN ('002', '017', '101', '102')                      THEN 'COMERCIO Y AUTONOMOS'
          END AS SEGMENTO
        , CASE
           WHEN IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN OR_TITULARITAT
           WHEN IN_SEGMBSINI IN ('002', '017', '101', '102')                      THEN DECODE(OR_TITUSCPCB, 0, OR_TITULARITAT
                                                                                                             , OR_TITUSCPCB
                                                                                             )
          END TitUnica
     FROM BAS_MEN.BASILEA       Basi
        , BAS_MEN.SEGMBS1_STDA  Seg1Stda
    WHERE Seg1Stda.OR_IDREG   = Basi.OR_IDREG
      AND Basi.IN_SEGMBSINI  IN ( '003', '005', '006', '009', '010', '019', '027' -- Empresas
                                 , '002', '017', '101', '102'                     -- CyA
                                )
      AND Seg1Stda.IN_SEGMBS1 = '501'
      AND Basi.IN_INDMOR      = 'CT';

  COMMIT;

  VN_NUMERR:= '300';

  --****************************************************************************************************-
  -- Maestro de Morosos a Contagiar IN_INDMOR_STDA (MAESTRO_MOROSO_CT_STDA) (Ya Segmentado x el STDA)
  --****************************************************************************************************-
  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MOROSO_CT_STDA');

  /* RMR 06/05/2020 Inicio - Añadido control de cogatio de morosos para contagiar procesando en contabilidad como siempre */
  /* y en el ELSE, contagiar solo por NIF ya que se trataría de un pase según la nueva deficion de mora                   */
  IF SW_MARCA_DEFAULT = 'CONT' THEN

        INSERT /*+ parallel (i 4)*/ INTO BAS_MEN.MAESTRO_MOROSO_CT_STDA I
        -- Contagio de NO MOROSO con alguna posición en MORA
        SELECT /*+ parallel (Basi 4)*/
               NoMor.*
          FROM BAS_MEN.IDREG_NOMOROSO_STDA      NoMor
             , BAS_MEN.CONTR_REFOPE_MOROSO_STDA Mor
         WHERE NoMor.CONTRATO_REFOPE         = Mor.CONTRATO_REFOPE
           AND NoMor.SEGMENTO                = Mor.SEGMENTO
           AND NVL(NoMor.CONTRATO_REFOPE,0) <> 0
           AND DECODE(NVL(NoMor.OR_TITUNICA,0), 0, 0
                                                 , NoMor.OR_TITUNICA
                     )                       = DECODE(NVL(Mor.OR_TITUNICA,0),0, 0
                                                                              , Mor.OR_TITUNICA
                                                     )
        UNION
        SELECT /*+ parallel (Basi 4)*/
               NoMor.*
          FROM BAS_MEN.IDREG_NOMOROSO_STDA      NoMor
             , BAS_MEN.CONTR_REFOPE_MOROSO_STDA Mor
         WHERE NoMor.or_idpers  = Mor.or_idpers
           AND NoMor.SEGMENTO         = Mor.SEGMENTO
           AND NVL(NoMor.or_idpers,'?') <> '?'
        UNION
        -- CTs de Empresas y CyA NO 501
        SELECT /*+ parallel (Basi 4)*/ DISTINCT
                Basi.OR_IDREG
             ,  CASE
                 WHEN NVL(Basi.OR_CLUNICONTR,0) IN (0,999999999999999) THEN Basi.OR_REFOPE
                 ELSE                                                       Basi.OR_CLUNICONTR
               END AS CONTRATO_REFOPE
             , OR_IDPERS
             , NULL
             , NULL
          FROM BAS_MEN.BASILEA           Basi
             , BAS_MEN.SEGMBS1_STDA      Seg1Stda
         WHERE Seg1Stda.OR_IDREG    = Basi.OR_IDREG
           AND Basi.IN_SEGMBSINI   IN  ( '003', '005', '006', '009', '010', '019', '027' -- Empresas
                                        , '002', '017', '101', '102'                      -- CyA
                                        )
           AND Seg1Stda.IN_SEGMBS1 <> '501'
           AND Basi.IN_INDMOR       = 'CT'
       UNION
        -- CTs de EEFF,  Prestamos Tarjetas y Créditos
       SELECT /*+ parallel (Basi 4)*/ DISTINCT
                OR_IDREG
             ,  CASE
                 WHEN NVL(Basi.OR_CLUNICONTR,0) IN (0,999999999999999) THEN Basi.OR_REFOPE
                 ELSE                                                       Basi.OR_CLUNICONTR
               END AS CONTRATO_REFOPE
             , or_idpers
             , null
             , NULL
          FROM BAS_MEN.BASILEA           Basi
         WHERE Basi.IN_SEGMBSINI  IN ( '007','018','021','028','029','034' -- EEFF
                                     , '103', '104'                        -- Prestamos
                                     , '106', '107'                        -- Tarjetas y Créditos
                                     )
           AND Basi.IN_INDMOR = 'CT';

        COMMIT;


      ELSE /* RMR 06/05/2020 En caso de ser un proceso bajo la nueva DoD solo contagiaremos por NIF (es decir, idpers) y aquellos contagiados por EAD */

        INSERT /*+ parallel (I 4)*/ INTO BAS_MEN.MAESTRO_MOROSO_CT_STDA I
          SELECT /*+  parallel (NoMor 4)*/
                 NoMor.*
           FROM BAS_MEN.IDREG_NOMOROSO_STDA      NoMor
               , BAS_MEN.CONTR_REFOPE_MOROSO_STDA Mor
           WHERE NoMor.or_idpers  = Mor.or_idpers
             AND NoMor.SEGMENTO         = Mor.SEGMENTO
             AND NVL(NoMor.or_idpers,'?') <> '?'
         UNION
        -- CTs de Empresas y CyA NO 501
        SELECT /*+ parallel (Basi 4)*/ DISTINCT
                Basi.OR_IDREG
             ,  CASE
                 WHEN NVL(Basi.OR_CLUNICONTR,0) IN (0,999999999999999) THEN Basi.OR_REFOPE
                 ELSE                                                       Basi.OR_CLUNICONTR
               END AS CONTRATO_REFOPE
             , OR_IDPERS
             , NULL
             , NULL
          FROM BAS_MEN.BASILEA           Basi
             , BAS_MEN.SEGMBS1_STDA      Seg1Stda
         WHERE Seg1Stda.OR_IDREG    = Basi.OR_IDREG
           AND Basi.IN_SEGMBSINI   IN  ( '003', '005', '006', '009', '010', '019', '027' -- Empresas
                                        , '002', '017', '101', '102'                      -- CyA
                                        )
           AND Seg1Stda.IN_SEGMBS1 <> '501'
           AND Basi.IN_INDMOR       = 'CT';

          COMMIT;
  /* RMR 06/05/2020 Fin */

  END IF;

  VN_NUMERR:= '400';

    /* 03/03/2022 FLA Creamos tabla para conocer el vencimiento de las garantias*/
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PERIMETRO_GARANTIAS_1';

    /* Obtenemos el perímetro total de las garantías de la base de exposiciones, filtrando por personales y financieras */
    INSERT /*+ PARALLEL (c,8) */ INTO BAS_MEN.PERIMETRO_GARANTIAS_1 c
    SELECT /*+ full(a) PARALLEL (a,4) PARALLEL (gar,4) */  DISTINCT
          a.OR_CONTRATO_GARANTIA,
          MAX(a.OR_CODGAR),	
          CASE WHEN gar.CODCONTRAT IS NOT NULL THEN
                 CASE
                    WHEN gar.CODTIPVEN = 'VEPRO' THEN TO_NUMBER(regexp_replace(gar.FCHAVENC, '[^0-9]', '')) -- Vencimiento propio
                    WHEN gar.CODTIPVEN IN ('VEOPE', 'SINVE') THEN 99991231 -- Vencimiento con la operación o sin vencimiento
                  END
               WHEN USO7.CONTRATOGARANTIA_OPGR IS NOT NULL THEN
                 CASE
                    WHEN USO7.TIPOVCTOGR_OPGR = 'VEPRO' THEN TO_NUMBER(USO7.FCHVCTOGR_OPGR) -- Vencimiento propio
                    WHEN USO7.TIPOVCTOGR_OPGR IN ('VEOPE', 'SINVE') THEN 99991231 -- Vencimiento con la operación o sin vencimiento
                  END
               ELSE NULL
           END AS FCHVCTOGR,
          TO_NUMBER(regexp_replace(gar.FCHINVIG, '[^0-9]', '')) as FCHINVIG,
          CASE WHEN a.OR_CODGAR LIKE 'GR 12%' THEN 'FINA'
               WHEN a.OR_CODGAR LIKE 'GR 21%' THEN 'PERS'
           END AS TIPO_GARAN,
          /* NAV 25/05/2022 - HDEV-158497 - Haircut Divisa  */
          CASE WHEN gar.CODCONTRAT IS NOT NULL THEN gar.DIVIMPGAR 
               ELSE uso7.DIVISAGR_OPGR
          END AS DIVIMPGAR
      FROM BAS_MEN.BASILEA a
      LEFT JOIN BAS_MEN.GARAN_GARANTIAS gar
        ON (a.OR_CONTRATO_GARANTIA = gar.CODCONTRAT)
      LEFT JOIN BAS_MEN.M_CAP_MIAMI_GARANTIA USO7
        ON (a.OR_CONTRATO_GARANTIA = USO7.CONTRATOGARANTIA_OPGR)
      WHERE a.FI_ELIMI1 = 'NO'  -- Con riesgo de crédito
        AND a.OR_CONTRATO_GARANTIA NOT IN (0, 999999999999992, 999999999999993, 999999999999994, 999999999999995, 999999999999996, 999999999999997, 999999999999999)
        AND ( a.OR_CODGAR LIKE 'GR 12%' -- Garantías financieras
           OR a.OR_CODGAR LIKE 'GR 21%' -- Garantías personales
            )
      GROUP BY a.OR_CONTRATO_GARANTIA,    
          CASE WHEN gar.CODCONTRAT IS NOT NULL THEN
                 CASE
                    WHEN gar.CODTIPVEN = 'VEPRO' THEN TO_NUMBER(regexp_replace(gar.FCHAVENC, '[^0-9]', '')) -- Vencimiento propio
                    WHEN gar.CODTIPVEN IN ('VEOPE', 'SINVE') THEN 99991231 -- Vencimiento con la operación o sin vencimiento
                  END
               WHEN USO7.CONTRATOGARANTIA_OPGR IS NOT NULL THEN
                 CASE
                    WHEN USO7.TIPOVCTOGR_OPGR = 'VEPRO' THEN TO_NUMBER(USO7.FCHVCTOGR_OPGR) -- Vencimiento propio
                    WHEN USO7.TIPOVCTOGR_OPGR IN ('VEOPE', 'SINVE') THEN 99991231 -- Vencimiento con la operación o sin vencimiento
                  END
               ELSE NULL
           END ,
          TO_NUMBER(regexp_replace(gar.FCHINVIG, '[^0-9]', '')) ,
          CASE WHEN a.OR_CODGAR LIKE 'GR 12%' THEN 'FINA'
               WHEN a.OR_CODGAR LIKE 'GR 21%' THEN 'PERS'
          END,
          /* NAV 25/05/2022 - HDEV-158497 - Haircut Divisa  */
          CASE WHEN gar.CODCONTRAT IS NOT NULL THEN gar.DIVIMPGAR 
               ELSE uso7.DIVISAGR_OPGR
          END;
          
     COMMIT; 
     
  VN_NUMERR:= '450';

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_STDA', 'VERDADERO');

  /************************************************************************************/
  /* LLAMADA A LA FUNCION                                                             */
  /************************************************************************************/

  INSERT /*+ PARALLEL(STDA 4) APPEND */
    INTO BAS_MEN.BASILEA_STDA STDA
         (OR_IDREG, FI_EXPSTDA_FULLY, FI_RWASTDA, FI_RATIOSPSTDA, FI_POSPOSTSTDA, IN_SEGSTDA_INI,
         IN_SEGSTDA_POST, IN_TRAMO2, FI_RWA1, FI_RWA3, OR_SALDO_ORIG1, OR_SALDO_ORIG3, OR_SALDO_ORIGCON1,
         OR_SALDO_ORIGCON3, OR_PROVAPL2, FI_EXPSTDA_FULLY1, FI_EXPSTDA_FULLY3, FI_EXPSTDA_FULLY_CON2, IN_SEGMBS1,
         IN_SEGSTDA, FI_EXPSTDA_FULLY_CON, FI_CCFSTDA, FI_POSPRESTDA, IN_SEGSTDA_PRE,
         FI_POSPRESTDA_INI, IN_TRAMO1, IN_TRAMO3, FI_RWA2, OR_SALDO_ORIG, OR_SALDO_ORIG2, OR_SALDO_ORIGCON,
         OR_SALDO_ORIGCON2, OR_PROVAPL1, OR_PROVAPL3, FI_EXPSTDA_FULLY2, FI_EXPSTDA_FULLY_CON1, FI_EXPSTDA_FULLY_CON3, IN_SEGSTDA_AUX,
         FI_PROV_PHASEIN,
         FI_PROV_PHASEIN1, FI_PROV_PHASEIN2, FI_PROV_PHASEIN3, FI_PROV_PHASEIN_CON, FI_PROV_PHASEIN_CON1, FI_PROV_PHASEIN_CON2, FI_PROV_PHASEIN_CON3,
         FI_PROV_FULLY, FI_PROV_FULLY1, FI_PROV_FULLY2, FI_PROV_FULLY3, FI_PROV_FULLY_CON, FI_PROV_FULLY_CON1, FI_PROV_FULLY_CON2,
         FI_PROV_FULLY_CON3, IN_SEGSTDA_HIP, IN_INDMOR_STDA, C_CCP,
         FI_RWA1_INI, FI_RWA2_INI, FI_RWA3_INI, OR_IDMES,
         FI_EXPSTDA_PHASEIN,FI_EXPSTDA_PHASEIN_CON,FI_EXPSTDA_PHASEIN1,FI_EXPSTDA_PHASEIN2,FI_EXPSTDA_PHASEIN3,FI_EXPSTDA_PHASEIN_CON1,FI_EXPSTDA_PHASEIN_CON2,FI_EXPSTDA_PHASEIN_CON3,
         FI_SUMEXP_STDA, FI_VALTAS_STDA, FI_IMPLTV_STDA
         )
    select CUR.OR_IDREG, CUR.FI_EXPSTDA_FULLY, CUR.FI_RWASTDA, CUR.FI_RATIOSPSTDA, CUR.FI_POSPOSTSTDA, CUR.IN_SEGSTDA_INI,
         CUR.IN_SEGSTDA_POST, CUR.IN_TRAMO2, CUR.FI_RWA1, CUR.FI_RWA3, CUR.OR_SALDO_ORIG1, CUR.OR_SALDO_ORIG3, CUR.OR_SALDO_ORIGCON1,
         CUR.OR_SALDO_ORIGCON3, CUR.OR_PROVAPL2, CUR.FI_EXPSTDA_FULLY1, CUR.FI_EXPSTDA_FULLY3, CUR.FI_EXPSTDA_FULLY_CON2, CUR.IN_SEGMBS1,
         CUR.IN_SEGSTDA, CUR.FI_EXPSTDA_FULLY_CON, CUR.FI_CCFSTDA, CUR.FI_POSPRESTDA, CUR.IN_SEGSTDA_PRE,
         CUR.FI_POSPRESTDA_INI, CUR.IN_TRAMO1, CUR.IN_TRAMO3, CUR.FI_RWA2, CUR.OR_SALDO_ORIG, CUR.OR_SALDO_ORIG2, CUR.OR_SALDO_ORIGCON,
         CUR.OR_SALDO_ORIGCON2, CUR.OR_PROVAPL1, CUR.OR_PROVAPL3, CUR.FI_EXPSTDA_FULLY2, CUR.FI_EXPSTDA_FULLY_CON1, CUR.FI_EXPSTDA_FULLY_CON3, CUR.IN_SEGSTDA_AUX,
         CUR.FI_PROV_PHASEIN,
         FI_PROV_PHASEIN1, CUR.FI_PROV_PHASEIN2, CUR.FI_PROV_PHASEIN3, CUR.FI_PROV_PHASEIN_CON, CUR.FI_PROV_PHASEIN_CON1, CUR.FI_PROV_PHASEIN_CON2, CUR.FI_PROV_PHASEIN_CON3,
         CUR.FI_PROV_FULLY, CUR.FI_PROV_FULLY1, CUR.FI_PROV_FULLY2, CUR.FI_PROV_FULLY3, CUR.FI_PROV_FULLY_CON, CUR.FI_PROV_FULLY_CON1, CUR.FI_PROV_FULLY_CON2,
         CUR.FI_PROV_FULLY_CON3, CUR.IN_SEGSTDA_HIP, NVL(Cur.IN_INDMOR_STDA, 'NO') AS IN_INDMOR_STDA, cur.C_CCP,
         FI_RWA1_INI, FI_RWA2_INI, FI_RWA3_INI, cur.OR_IDMES,
         CUR.FI_EXPSTDA_PHASEIN, CUR.FI_EXPSTDA_PHASEIN_CON, CUR.FI_EXPSTDA_PHASEIN1, CUR.FI_EXPSTDA_PHASEIN2, CUR.FI_EXPSTDA_PHASEIN3, CUR.FI_EXPSTDA_PHASEIN_CON1, CUR.FI_EXPSTDA_PHASEIN_CON2, CUR.FI_EXPSTDA_PHASEIN_CON3,
         CUR.FI_SUMEXP_STDA, CUR.FI_VALTAS_STDA, CUR.FI_IMPLTV_STDA
    from table(BAS_MEN.CALCULO_STDA.F_METODO_STDA
       ( cursor (SELECT /*+ FULL(B) FULL(C) FULL(Mor) PARALLEL (B 4) PARALLEL (C 4) PARALLEL (Mor 4) PARALLEL (high 4) PARALLEL (GARFIN 4) PARALLEL (nop 4) */
                        B.OR_IDREG,  B.IN_SEGMBS,
                        DECODE(B.IN_RATEXT,'SR','NR','?','NR', NVL(B.IN_RATEXT,'NR')) IN_RATEXT,
                        DECODE(B.IN_RATSOB,'SR','NR','?','NR', NVL(B.IN_RATSOB,'NR')) IN_RATSOB,
                        B.IN_INDMOR, B.OR_TIPOPE, B.OR_IDPRO1, B.OR_FAIRVA,B.OR_IDPAIS,
                        B.OR_PROCED, B.OR_VIDRES, B.OR_VIDINI,
                        /*CASE           RMR 09/06/2020
                            WHEN OPGAR.OR_CODGAR IS NOT NULL THEN OPGAR.OR_CODGAR
                        ELSE B.OR_CODGAR
                        END AS OR_CODGAR,*/
                        B.OR_CODGAR,
                        B.OR_FAIRVACON,B.OR_DISPTO, B.OR_DISBLE, B.OR_AVALES,
                        B.OR_TIPAVA,
                        B.OR_CTAIND,  B.FI_TIPEXP, B.OR_TIPGAR, B.OR_DESTPR, B.IN_TIPDER,
                        B.OR_EPIIND, B.IN_RATEXTAVA2, B.IN_SEGMBSINI,
                        DECODE(B.FI_TIPEXP,'OTC',NVL(B.FI_EADAIRB,0),
                                           'Repos',NVL(B.FI_EADAIRB,0),
                                           B.OR_DISPTO + B.OR_DISBLE + B.OR_AVALES + B.OR_FUTURS + B.OR_REPOS + B.OR_AJUVAL) TOTAL,
                        DECODE(B.FI_TIPEXP,'OTC',NVL(B.FI_EADCONAIRB,0),
                                           'Repos',NVL(B.FI_EADCONAIRB,0),
                                           B.OR_DISPTOCON + B.OR_DISBLECON + B.OR_AVALESCON + B.OR_FUTURSCON + B.OR_REPOSCON + B.OR_AJUVALCON) TOTALCON,
                        B.IN_FAIRVABO, B.FI_PORCON, B.IN_SEG_HIP,B.IN_SEGMBS0,
                        CASE
                          WHEN B.IN_TIPOREG = 'FF' THEN /* Los FF van todos a Retail*/
                               '501'
                          WHEN B.IN_TIPOREG = 'FC' AND B.IN_SEGMBSINI = '106' THEN
                               '501'
                          ELSE NVL(C.IN_SEGMBS1,'?')
                        END IN_SEGMBS1,
                        NVL(B.OR_PROVAPL,0) OR_PROVAPL
                        /* RMR 05/08/2020 STDA aislado con nuevos planes de retasaciones  */
                        , NVL(ROUND((nop.IMPRIESVIVLTV/1000),2), B.OR_IMPLTV) AS OR_IMPLTV
                         /* RMR 05/08/2020 */
                        ,B.OR_TIPOFI
                        ,B.OR_ENTITY
                        /* RMR 05/08/2020 STDA aislado con nuevos planes de retasaciones  */
                        , NVL(nop.IMPTASAC, B.OR_VALTAS) as OR_VALTAS
                        /* RMR 05/08/2020 */
                        ,B.OR_CODISO, B.OR_DIVISA, B.OR_REFOPE, b.OR_IDPERS,
                        NVL(B.OR_IDSITUAC,0) OR_IDSITUAC, /* INDICADOR MOROSOS Dudosos por razones distintas de la morosidad y dudosos por arrastre*/
                        B.OR_TIPOBJETO,
                        B.OR_CONCED, B.IN_TIPOREG,
                        B.OR_FECCAR, B.OR_TIPOPR, B.OR_FECOPE, B.FI_EPICON, OR_CODPRODO,
                        B.OR_NUMOFI, B.OR_CTACLI, B.FI_CCFAIRB, B.in_sucept,  NVL(D.CODGAR, '?') CODGAR_PIGNORATICIA,
                        OR_CLUNIENT,OR_CLUNIPROD, B.OR_CLUNICONTR,OR_TITULARITAT, DECODE(OR_FECDEU, 0, NULL, OR_FECDEU) OR_FECDEU, OR_CLUNICUENT,
                        OR_SITCON, NVL(IN_RATEXT_ISIN, 'NR') AS IN_RATEXT_ISIN,
                        CASE WHEN mor.OR_IDREG IS NULL AND in_indmor = 'SI' THEN
                                  in_indmor
                             WHEN mor.OR_IDREG IS NULL AND in_indmor <> 'SI' THEN
                                  'NO'
                             ELSE 'CT'
                        END AS IN_INDMOR_STDA, B.OR_NIFCIF,
                        B.OR_NIFCIFIBM
                        /* RMR 09/01/2020 - Inicio - Ahora se aplicara el factor escalar únicamente a determinadas entidades*/
                        ,CASE when OR_IDPRO1 = 'OT' then 1
                              WHEN OR_ENTITY IN (81, 242, 9109) THEN NVL(Sf.SF,1)
                              ELSE 1
                         END AS SF
                        ,CASE when OR_IDPRO1 = 'OT' then 1
                              WHEN OR_ENTITY IN (81, 242, 9109) THEN NVL(Sf.SF_CONS, 1)
                              ELSE 1
                         END AS SF_CONS
                        /* RMR 09/01/2020 - Fin*/
                        , b.or_idmes, c.ead, b.or_ajuval, b.OR_PERSON
                        , case when high.or_idreg is null then 'N'
                               ELSE 'S'
                          END AS SW_MARCA_HIGH_RISK
                        , LPAD(b.OR_FECVTO,8 ,'0')        AS OR_FECVTO         -- fla9 202201
                        , NVL(GARFIN.FCHVCTOGR, 99999999) AS FCHVCTOGR         -- fla9 202201
                        , garfin.DIVIMPGAR, b.IN_SEGMBS2 /* NAV 25/05/2022 - HDEV-158497 - Haircut Divisa  */
                  FROM BAS_MEN.BASILEA B,
                       BAS_MEN.SEGMBS1_STDA C,
                       BAS_MEN.GARANTIAS_PIGNORATIVAS D,
                       BAS_MEN.MAESTRO_MOROSO_CT_STDA Mor,
                       BAS_MEN.FACTOR_DOTACION_SCALAR Sf,
                       BAS_MEN.SALUME_Z_SINPIG        nop /* RMR 05/08/2020 */
                       /* Eliminado MAESTRO_OPERACION_GARANTIA ya que a partir de ahora se actualizará correctamente en Segmentación, RMR 09/06/2020*/
                       /*(SELECT DISTINCT OR_REFOPE, OR_CODGAR FROM BAS_MEN.MAESTRO_OPERACION_GARANTIA) OPGAR */
                     , BAS_MEN.IDREG_HIGH_RISK        high
                     , BAS_MEN.PERIMETRO_GARANTIAS_1  GARFIN    -- fla9 202201(tabla generada en el script nuevo del 10.2)
                 WHERE B.OR_IDREG = C.OR_IDREG(+)
                   AND B.OR_CODGAR = D.CODGAR(+)
                   AND B.OR_IDREG  = Mor.OR_IDREG(+)
                   AND B.IN_METODE = Sf.IN_METODE(+)
                  /* RMR 05/08/2020 STDA aislado con nuevos planes de retasaciones  */
                   AND b.OR_CLUNIENT = nop.entidadcto (+)
                   AND b.OR_CLUNIPROD = nop.CODTIPOPROD (+)
                   AND b.or_clunicontr = nop.CODCONTRATO (+)
                 /*AND B.OR_REFOPE = OPGAR.OR_REFOPE(+)*/ /* RMR 05/08/2020 */
                   AND b.or_idreg = high.or_idreg(+)
                   AND b.OR_CONTRATO_GARANTIA = GARFIN.OR_CONTRATO_GARANTIA(+) -- fla9 202201
        ), PN_FECPRO)) CUR;

  COMMIT;

  VN_NUMERR:= '499';

  MERGE /*+ parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_STDA    Upd
  USING (SELECT OR_IDREG, FI_RWASTDA, FI_POSPRESTDA_INI
           FROM BAS_MEN.MAESTRO_IIC) Sel
     ON (Sel.OR_IDREG = Upd.OR_IDREG)
   WHEN MATCHED THEN
    UPDATE
        SET
         Upd.FI_RWASTDA        = Sel.FI_RWASTDA,
         Upd.FI_POSPRESTDA_INI = Sel.FI_POSPRESTDA_INI;

  COMMIT;

  VN_NUMERR:= '500';

  dbms_stats.gather_table_stats('BAS_MEN','BASILEA_STDA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

  VN_NUMERR:= '999';

  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT = 'FINALIZADO',
         DATA_FIN = SYSDATE,
         FINALITZAT = 'OK',
         REG_INS_OK = VN_COUNT,
         REG_UPD_KO = VN_COUNT_KO
   WHERE PROCES = 'METODO STANDARD '||PV_TABLA
     AND ESTAT  = 'INICIADO';

  COMMIT;

  VN_NUMERR:= '600';

EXCEPTION
  WHEN OTHERS THEN
     PV_RET := 'KO';
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            REG_UPD_KO = VN_COUNT_KO,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = 'METODO STANDARD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

     COMMIT;
     RAISE;
END;

/

show errors;


create or replace PROCEDURE BAS_MEN.UPDATE_PROCESO_STDA (PROCESO IN VARCHAR2)
IS

/*******************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA_STDA       */
/*******************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA_STDA                */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA_STDA                         */
/*      PARÁMETROS update a ejecutar  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_STDA_PARAM_SAS        */
/*      TABLAS de updates de usuario  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_STDA_XX_SAS           */
/*******************************************************************************************************/

    --
    -- Variables del proceso principal.
    --

    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(255)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT ' ';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA_STDA';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';
    ncount                  NUMBER                  DEFAULT 0;

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
          where EN_PROCESO = PROCESO
        order by TABLA;

BEGIN
    ROLLBACK;                                                -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.

    v_NumErr := 0;
    --
    -- Updates del STDA
    --

    FOR C_UPD IN Cursor_Update LOOP
      --
      -- Parámetros relativos al update a procesar
      --
      In_Tabla_Orig := C_UPD.TABLA;

      Cte_Proces          := 'UPDATE PROCESO STDA Tabla_Orig: '|| In_Tabla_Orig;
      v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
      --
      -- Información de Inicio en Control del Proceso.
      --
      v_NumErr := 1;
      INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
      VALUES (Cte_Proces, SYSDATE, 'INICIADO');
      COMMIT;
      --
      -- Insersión en tabla de descartes
      --
      v_Numerr := 2;
      v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA_STDA SELECT /*+ PARALLEL (A 4)*/ ''' || v_Tabla_Orig || ''' , sysdate, A.* FROM '||v_Tabla_Base|| ' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
      EXECUTE IMMEDIATE v_Sentencia_dinamica;
      COMMIT;
      --
      -- Eliminación de registros en Basilea STDA.
      --
      v_Numerr := 3;
      v_Sentencia_dinamica := 'DELETE /*+ FULL(A) PARALLEL (A 8)*/ '||v_Tabla_Base||' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
      EXECUTE IMMEDIATE v_Sentencia_dinamica;
      COMMIT;
      --
      -- Insersión de registros en Basilea STDA.
      --
      v_Numerr := 4;
      v_Sentencia_dinamica := 'INSERT /*+ FULL(A) PARALLEL (A 8)*/ INTO '||v_Tabla_Base||' A SELECT * FROM '||v_Tabla_Orig;
      EXECUTE IMMEDIATE v_Sentencia_dinamica;
      v_RegIns := SQL%ROWCOUNT;
      COMMIT;
      --
      -- Insercción de registros en tabla final.
      --
      v_Numerr := 9;
      v_Sentencia_dinamica := 'INSERT /* + APPEND */ INTO BAS_MEN.UPDATES_BASILEA_STDA SELECT /*+ PARALLEL (A 8) */ ''' || v_Tabla_Orig || ''' AS TABLA_ORIGEN, sysdate, A.* FROM ' || v_Tabla_Base|| ' A, ' || v_Tabla_Orig || ' B WHERE A.OR_IDREG = B.OR_IDREG';
      EXECUTE IMMEDIATE v_Sentencia_dinamica;
      --
      -- Actualización del Control del Proceso.
      --
      v_Numerr := 10;
      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT       = 'FINALIZADO'
           , DATA_FIN    = SYSDATE
           , FINALITZAT  = v_Fin_Proc
           , REG_INS_OK  = v_RegIns
           , ERROR_ORAC  = v_Mensaje_Err
       WHERE PROCES  = Cte_Proces
         AND ESTAT   = 'INICIADO';

      COMMIT;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN

    ROLLBACK;

    v_Fin_Proc   := 'KO';
    v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);
    --
    --      Actualización del Control del Proceso.
    --
    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = v_Fin_Proc
         , ERROR_ORAC  = v_Mensaje_Err
         , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
         , NUM_ERROR   = v_NumErr
      WHERE PROCES  = Cte_Proces
        AND ESTAT   = 'INICIADO';

    COMMIT;
    RAISE;
END;

/

show errors;


create or replace PROCEDURE  BAS_MEN.BASI_METODO_ESTANDARD IS

   VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
   VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
   VN_OPC_DER    NUMBER:= 1;
   VN_F          NUMBER:= 1;
   VN_OPCBSTDA   NUMBER:= 1;
   VV_RETORNO    VARCHAR2(2):='OK';

   ERR_DIFERENTES EXCEPTION;
   VV_OR_IDREG  NUMBER(12);

BEGIN

commit;

EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  BAS_MEN.METODO_STDA ('BASILEA_STDA', VN_FECPRO, VN_OPC_DER, VN_F,  VV_RETORNO);
  COMMIT;

  --fla 16/03/22 replicamos la tabla BAS_MEN.BASILEA_STDA (justo antes de insertar datos en ella y existen registros con FI_RWASTDA = 99 )
	BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_STDA_PREMITIGACION');
    INSERT /*+ parallel (a 4) */ INTO BAS_MEN.BASILEA_STDA_PREMITIGACION a
    SELECT /*+ parallel (stda 4) */ * FROM BAS_MEN.BASILEA_STDA stda;

    COMMIT;
--fla fin

  BAS_MEN.MITIGACION_GARANTIAS();
  COMMIT;
  
  BAS_MEN.UPDATE_PROCESO_STDA('UPDATE_PROCESO_STDA');
  COMMIT;
  
end;

/

show errors;
--bka40096=====================================================================================================
Select 'bka40096' As Compilando from dual;

CREATE OR REPLACE FORCE VIEW BAS_MEN.vista_calculo_pd AS
/*HDEV-107790 09/02/2022 CAMBIO (+) POR LEFT JOINS*/
SELECT /*+ parallel (a 4) */ A.OR_IDREG, A.OR_IDPERS, A.OR_SEGGES, A.FI_MESCURA,  OR_SEGFIC2, in_sratin,
                    DECODE(SUBSTR(NVL(d.DESC_FINAL_OK, 'R'), 1, 1), 'D', 'DS', 'R') SECTOR, IN_SUCEPT, A.OR_TIPIDE,
                    DECODE(A.OR_TITUSCPCB, NULL, A.OR_TITULARITAT, 0, A.OR_TITULARITAT, A.OR_TITUSCPCB) OR_TITULARITAT, A.FI_CCFAIRB,
                    OR_SEGFIC, IN_SEGMBSINI, A.FI_EADAIRB, OR_CLAVISO, A.FI_EADCONAIRB,
                    OR_SEGRIE, OR_PUNT0, OR_MODSCO, IN_RATSOB, IN_SEGMBS0, OR_MODRAT0, OR_RATINT,
                    OR_PUNTSCO, IN_INDMOR, IN_OPER_MIGR, OR_FECOPE, OR_COISIN, IN_REFINAN, OR_IDMES, A.OR_FECSCO, A.OR_NUMOFI, A.OR_CTACLI
                    , OR_FECPUN0, ID_FCH_ALTA, ID_FCH_NACI /* 25/03/2021 RMR MoC en la PD Empresas */
               FROM BAS_MEN.BASILEA A
               LEFT JOIN   (SELECT DISTINCT CNAE93, DESC_FINAL_OK  FROM BAS_MEN.MAESTRO_CNAES_SECTOR) d
               ON (D.CNAE93=A.OR_IDCNAE)
               LEFT JOIN BAS_MEN.PERSONAS per
               ON (per.ID_PERSONA=A.OR_NUMPERSONA);
               
/************************************************************************************/
/* CREATE DE LA DEFINICION DEL PACKAGE                                              */
/************************************************************************************/

CREATE OR REPLACE PACKAGE BAS_MEN.CALCULO_PD is

    TYPE cursor_basilea is REF CURSOR RETURN BAS_MEN.vista_calculo_pd%ROWTYPE;
    TYPE t_array_basilea_CALCULO_PD_OLD IS TABLE OF BAS_MEN.BASILEA_AIRB_PD_OLD%ROWTYPE;
    TYPE t_array_basilea_CALCULO_PD IS TABLE OF BAS_MEN.BASILEA_AIRB_PD%ROWTYPE;

    /* INI HDEV-107786 Nuevos calibrados */
    FUNCTION F_CALCULO_PD_OLD (cur IN cursor_basilea, PN_FECPRO IN NUMBER) return t_array_basilea_CALCULO_PD_OLD
    parallel_enable(PARTITION cur by any)
    PIPELINED;
    
    FUNCTION F_CALCULO_PD (cur IN cursor_basilea, PN_FECPRO IN NUMBER) return t_array_basilea_CALCULO_PD
    parallel_enable(PARTITION cur by any)
    PIPELINED;

    FUNCTION F_ASIGNACION_PD(P_PRELACION IN VARCHAR2,P_SEGMENTO IN VARCHAR2) RETURN FLOAT PARALLEL_ENABLE;

    FUNCTION F_ASIG_PD_X_BUCKET(P_BUCKET IN OUT NUMBER,P_SEGMENTO IN VARCHAR2,P_Z IN  FLOAT) RETURN FLOAT PARALLEL_ENABLE;

    FUNCTION F_CALCULO_ESCALA_MAESTRA(P_FEC_PROC IN NUMBER,P_ID_TITULARIDAD IN NUMBER,P_SEGMENTO IN VARCHAR2,  P_MODELO IN VARCHAR2 , P_TIPRAT IN NUMBER,P_PUNT_IMP IN NUMBER, P_BUCKET OUT NUMBER, P_Z OUT FLOAT) RETURN FLOAT PARALLEL_ENABLE;
    /* FIN HDEV-107786 Nuevos calibrados */

end;
/

show errors;

/************************************************************************************/
/* CREATE DE LA DEFINICION DE LA FUNCION DEL PACKAGE                                */
/************************************************************************************/

CREATE OR REPLACE PACKAGE BODY BAS_MEN.CALCULO_PD AS

 
FUNCTION F_CALCULO_PD_OLD (cur IN cursor_basilea, PN_FECPRO IN NUMBER) RETURN t_array_basilea_CALCULO_PD_OLD
         parallel_enable(PARTITION cur by any)
         PIPELINED
      as

  in_rec cur%ROWTYPE;
  out_rec BAS_MEN.BASILEA_AIRB_PD_OLD%ROWTYPE;
  v_num NUMBER;

  VV_ROWID                  VARCHAR2(50);
  VN_COUNT                  NUMBER(9);
  VV_MENSAJE                VARCHAR2(255);
  VN_NUMERR                 NUMBER(3);
  VN_OR_PUNTFIN             FLOAT(126);
  VN_OR_PUNTFINS            FLOAT(126);
  VN_OR_PUNT                FLOAT(126);
  VN_PD_ORIGINAL            FLOAT(126);
  VN_RATING_INT             NUMBER(4,2);
  VV_OR_SEGRIE              VARCHAR2(10);
  VN_OR_MODRAT              VARCHAR2(5);
  VN_PUNTMIN                FLOAT(126);
  VN_PUNTMAX                FLOAT(126);
  VN_PUNTNOR                FLOAT(126);
  VN_RATINT                 NUMBER(4,2);
  VN_CICLOA1                FLOAT(126);
  VN_CICLOB1                FLOAT(126);
  VN_PD_AJUSCIC             FLOAT(126);
  VN_OR_PUNTSCO             FLOAT(126);
  VN_MODELO_CALI            VARCHAR2(33);
  VN_PD_FLOOR               FLOAT(126);
  VN_TIP_RAT                NUMBER(2);
  VN_PDCONT                 FLOAT(126);
  VN_PDPOOL                 FLOAT(126);
  VN_FI_RATCONT             NUMBER(4,2);
  VV_TROBAT                 VARCHAR2(2);
  VV_OR_SEGFIC              VARCHAR2(2);
  VV_OR_SEGFIC2             VARCHAR2(10);
  VN_MES                    FLOAT(126);
  VV_LIMITE                 FLOAT(126);
  VV_ENTIDAD                VARCHAR2(6);
  vn_ead                    float(126);
  vv_Id_Res                 NUMBER(1) DEFAULT 1;
  VN_MULTIPLICADOR_PDCONT   FLOAT(126);
  VN_FLAG_NUEVA_EMP         NUMBER(1,0);
  VN_BUCKET                 NUMBER(2); /* 29/03/2021 XCG - Outdated y unrated */
  VN_MAX_BUCKET             NUMBER(2); /* 29/03/2021 XCG - Outdated y unrated */
  VN_MIN_BUCKET             NUMBER(2); /* 29/03/2021 XCG - Outdated y unrated */

  BEGIN
  LOOP

     fetch cur into in_rec;
     EXIT WHEN cur%notfound;

     VN_NUMERR                := 3;
     VN_COUNT                 := VN_COUNT + 1;
     VV_ROWID                 := TO_CHAR(IN_REC.OR_IDREG);
     VN_PD_ORIGINAL           := 99;
     VN_RATING_INT            := 99;
     VN_OR_PUNTFIN            := 0;
     VN_PUNTMIN               := 0;
     VN_PUNTMAX               := 100;
     VN_PUNTNOR               := 0;
     VN_RATINT                := 99;
     VN_OR_PUNTFINS           := 0;
     VN_CICLOA1               := 0;
     VN_CICLOB1               := 0;
     VN_PD_AJUSCIC            := 0;
     VN_OR_PUNTSCO            :=0;
     VN_MODELO_CALI           := '?';
     VN_PD_FLOOR              := 99;
     VN_PDCONT                := 99;
     VN_PDPOOL                := 99;
     VN_TIP_RAT               := 0;
     VN_FI_RATCONT            := 99;
     VV_OR_SEGRIE             := '?';
     VV_LIMITE                :=0;
     VV_ENTIDAD               := 'BS';
     vn_ead                   := in_rec.fi_eadairb;
     vv_Id_Res                := 1;
     VN_MULTIPLICADOR_PDCONT  := 1;
     VN_MES                   := 0;
     VN_BUCKET                := 0;
     VN_MAX_BUCKET            := 0;
     VN_MIN_BUCKET            := 0;
     VN_FLAG_NUEVA_EMP        := 0; /* 25/03/2021 Añadida variable para la antigüedad de la empresa para el MoC en empresas */
     VN_BUCKET                := 0; /* 29/03/2021 XCG - Outdated y unrated */
     VN_MAX_BUCKET            := 0; /* 29/03/2021 XCG - Outdated y unrated */
     VN_MIN_BUCKET            := 0; /* 29/03/2021 XCG - Outdated y unrated */

     VV_OR_SEGFIC2 := IN_REC.OR_SEGFIC2;
     VV_OR_SEGFIC  := IN_REC.OR_SEGFIC;
     VV_OR_SEGRIE  := IN_REC.OR_SEGRIE;
     VN_OR_PUNT    := IN_REC.OR_PUNT0;
     VN_OR_MODRAT  := IN_REC.OR_MODRAT0;
     VN_OR_PUNTSCO := IN_REC.OR_PUNTSCO;

     --Mapeamos el modelo de c¿digos no parametrizados en la PD. XCG, 1/08/08.
     BEGIN
        SELECT COD_MODELO
          INTO VN_OR_MODRAT
          FROM BAS_MEN.MAESTRO_MAPEO_MODELO
         WHERE MODELO = IN_REC.OR_MODRAT0;
     EXCEPTION
          WHEN OTHERS THEN
               VN_OR_MODRAT :=  IN_REC.OR_MODRAT0;
     END;

     VN_NUMERR:= 5;

     IF IN_REC.IN_SEGMBSINI = '103' THEN
        VV_OR_SEGRIE:= 'H';
     ELSIF IN_REC.IN_SEGMBSINI = '104' THEN
           VV_OR_SEGRIE:= 'C';
     ELSIF IN_REC.IN_SEGMBSINI IN ('002', '017') THEN
           VV_OR_SEGRIE:= 'CCAA';
     ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'KT' THEN
           VV_OR_SEGRIE:= 'CRED';
     ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'TA' THEN
           VV_OR_SEGRIE:= 'TARJ';
     ELSIF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN
           IF IN_REC.IN_SRATIN = 'CURA' THEN /* NOTA: 201512 SRAT para todas las exposiciones. En este caso no hace falta tenerlo en cuenta sólo para el método 'AIRB' ya que no afecta.*/
              VV_OR_SEGRIE:= IN_REC.OR_SEGFIC;
           ELSIF IN_REC.IN_SRATIN in ('BLQR') then
                 IF IN_REC.OR_SEGFIC2 in ('HO', 'PA', 'PA001', 'PA002', 'PA003', 'PA005') THEN
                    VV_OR_SEGRIE := 'PAT'; --Holdings como patrimoniales
                 ELSIF IN_REC.OR_SEGFIC2 IN ('MT', 'UT') THEN
                       IF SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('PU', 'PT') THEN
                           VV_OR_SEGRIE:= 'P3';
                       ELSIF IN_REC.OR_SEGFIC IN ('E3', 'E4', 'E5') THEN
                             VV_OR_SEGRIE:= IN_REC.OR_SEGFIC||IN_REC.SECTOR; /*UTE¿s hay que coger el Segfic y buscar el macrosector.*/
                       ELSE
                            VV_OR_SEGRIE:= IN_REC.OR_SEGFIC;
                       END IF;
                 ELSIF SUBSTR(IN_REC.OR_SEGFIC2,1,2) = 'NC' THEN
                       VV_OR_SEGRIE:= 'E'||SUBSTR(IN_REC.OR_SEGFIC2,3,3);
                 ELSE
                       VV_OR_SEGRIE:= IN_REC.OR_SEGFIC2; /* Para bloqueos se utiliza el Segmento Ficticio 2. XCG, 26/07/11.*/
                 END IF;
           END IF;
     ELSIF IN_REC.OR_SEGGES = 1 THEN
           VV_OR_SEGRIE:= 'PART';
     ELSIF IN_REC.OR_SEGGES = 2 THEN
           VV_OR_SEGRIE:= 'CCAA';
     END IF;

          -- Su c¿lculo real de PD coreps se hace posteriormente.
          /* Calculo de la PD para empresas/promotores   */

            IF IN_REC.IN_SRATIN IN ('CRVI', 'CRDE', 'SR', 'SR_CAD', 'SR_INC', 'SR_FEC', 'MORA') /* 06/07/2021 - NAV - XCG solicito añadin MORA */
             AND SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('EM','EU','ET','PR','PU','PT','HO','PA','NC', 'GR')  THEN

               VN_NUMERR:= 61;
               
               /* 10/01/2022 - NAV- HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos - De nuevo cambiamos VV_OR_SEGRIE por IN_REC.OR_SEGFIC2 */
               IF SUBSTR(IN_REC.OR_SEGFIC2,1,2) IN ('GR', 'E5', 'P5') OR IN_REC.OR_SEGFIC2 in ('PA005', 'NC5DS', 'NC5R', 'NC5') THEN  /* la PD de corporates y grupos XCG 03/2016.*/ /* 18/05/2021 - Cambiamos el campo IN_REC.OR_SEGFIC2 por VV_OR_SEGRIE */
                  IF IN_REC.OR_SEGFIC2 = 'GRP' THEN
                     VN_MODELO_CALI:= 'GR_PROM';
                  ELSIF IN_REC.OR_SEGFIC2 = 'GR' THEN
                        VN_MODELO_CALI:= 'GR_EMPR';
                  ELSIF SUBSTR(IN_REC.OR_SEGFIC2,1,3) = 'NC5' THEN
                        VN_MODELO_CALI:= 'E5';
                  ELSIF IN_REC.OR_SEGFIC2 <> 'PA005' THEN
                        VN_MODELO_CALI:= SUBSTR(IN_REC.OR_SEGFIC2,1,2);
                  ELSE
                         VN_MODELO_CALI:= IN_REC.OR_SEGFIC2;
                  END IF;
                  
                    /* INI - 14/12/2021- FMRR - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos  */
                    
                    IF substr(IN_REC.IN_SRATIN,1,2) IN ('SR') THEN

                       BEGIN
                          SELECT max(PD_REG)
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL;

                    ELSIF IN_REC.IN_SRATIN = 'CRDE' THEN

                       /* 04/01/2021 RMR - INICIO */

                        IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                           FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
                         OR
                           NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                           FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
                        THEN VN_FLAG_NUEVA_EMP := 1;
                        ELSE VN_FLAG_NUEVA_EMP := 0;
                        END IF;

                      BEGIN
                              SELECT BUCKET
                                INTO VN_BUCKET --bucket origen
                                FROM BAS_MEN.PD_CORPORATES_GRUPOS
                               WHERE SEG = VN_MODELO_CALI
                                 AND TIPO = 'NORMAL'
                                 AND PUNT_MIN <= VN_OR_PUNT
                                 AND PUNT_MAX >= VN_OR_PUNT;
                      EXCEPTION
                      WHEN OTHERS THEN
                             BEGIN
                                SELECT BUCKET
                                  INTO VN_BUCKET
                                  FROM BAS_MEN.PD_CORPORATES_GRUPOS
                                 WHERE SEG = VN_MODELO_CALI
                                   AND TIPO = 'NORMAL'
                                   AND PUNT_MIN = VN_OR_PUNT
                                   AND PUNT_MAX = VN_OR_PUNT;
                             EXCEPTION
                                  WHEN OTHERS THEN
                                       VN_BUCKET := 0;
                             END;
                       END;


                       VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses a migracion unrated

                       /* 04/01/2021 RMR - FIN */

                       BEGIN -- obtenemos el número de buckets de un modelo
                          SELECT MAX(BUCKET), MIN(BUCKET)
                            INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_MAX_BUCKET:= 0;
                                 VN_MIN_BUCKET:= 0;
                       END;

                       BEGIN
                          SELECT PD_REG, MULTIPLICADOR_PDCONT
                            INTO VN_PD_ORIGINAL, VN_MULTIPLICADOR_PDCONT
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL'
                             AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL* VN_MULTIPLICADOR_PDCONT; -- pd contínua igual a la pool pd * multiplicador.

                    ELSE

                       BEGIN
                          SELECT PD_REG
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL'
                             AND PUNT_MIN <= IN_REC.OR_PUNT0
                             AND PUNT_MAX >= IN_REC.OR_PUNT0;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL;

                    END IF;
                    
                    /* FIN - 14/12/2021 - FMRR - HDEV-101803 */

               ELSE

                    /* 26/03/2021 RMR Calculo de la antigüedad de la empresa para el MoC en empresas */
                    IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                         FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
                       OR
                         NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                         FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
                      THEN VN_FLAG_NUEVA_EMP := 1;
                      ELSE VN_FLAG_NUEVA_EMP := 0;
                    END IF;

                    IF substr(IN_REC.IN_SRATIN,1,2) IN ('SR') THEN

                       BEGIN
                          SELECT max(POOL_PD)
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                           WHERE SUBSEGMENTO = IN_REC.OR_SEGFIC2/*Case when IN_REC.OR_SEGFIC2 = 'E5DS' then 'E4DS'
                                                    when IN_REC.OR_SEGFIC2 = 'E5R' then 'E4R'
                                                    when IN_REC.OR_SEGFIC2 = 'P5' then 'P3'
                                                    when IN_REC.OR_SEGFIC2 = 'NC5R' then 'NC4R'
                                                    when IN_REC.OR_SEGFIC2 = 'NC5DS' then 'NC4DS'
                                                    when IN_REC.OR_SEGFIC2 = 'GR' then 'E4'
                                                    when IN_REC.OR_SEGFIC2 = 'PA005' then 'PAT'
                                                    else IN_REC.OR_SEGFIC2 end */
                             AND TIPO = 'NORMAL'
                             AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL;

                    ELSE

                         -- Con el modelo se obtine el nuevo modelo de calificaci¿n. 23/06/09.--
                         BEGIN
                           SELECT DISTINCT MODELO
                             INTO VN_MODELO_CALI
                             FROM BAS_MEN.MAESTRO_MODELO_RATING
                            WHERE MODRAT = VN_OR_MODRAT;
                         EXCEPTION
                              WHEN OTHERS THEN
                                   VN_MODELO_CALI := '?';
                         END;

                         BEGIN
                            SELECT DISTINCT MINIMO, MAXIMO, A, B, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                              INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                              FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                             WHERE MODELO = VN_MODELO_CALI
                               AND TIPO = 'NORMAL'
                               AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP;
                         EXCEPTION
                              WHEN OTHERS THEN
                                   NULL;
                         END;

                         VN_NUMERR:= 62;

                         /* Normalizacion de la PD */
                         IF VN_PUNTMIN >= VN_OR_PUNT THEN
                            VN_OR_PUNT := VN_PUNTMIN;
                         ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
                            VN_OR_PUNT := VN_PUNTMAX;
                         END IF;

                         VN_PUNTNOR :=  100 * ((VN_OR_PUNT - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
                         VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
                         VN_PDCONT:= LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT); /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */

                         BEGIN
                            SELECT POOL_PD, BUCKET
                              INTO VN_PD_ORIGINAL, VN_BUCKET
                              FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                             WHERE MODELO = VN_MODELO_CALI
                               AND TIPO = 'NORMAL'
                               AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP
                               AND PUNTMIN <= VN_PUNTNOR
                               AND PUNTMAX >= VN_PUNTNOR;
                         EXCEPTION
                              WHEN OTHERS THEN
                                   BEGIN
                                      SELECT POOL_PD, BUCKET
                                        INTO VN_PD_ORIGINAL, VN_BUCKET
                                        FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                                       WHERE MODELO = VN_MODELO_CALI
                                         AND TIPO = 'NORMAL'
                                         AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP
                                         AND PUNTMIN = VN_PUNTNOR
                                         AND PUNTMAX = VN_PUNTNOR;
                                   EXCEPTION
                                        WHEN OTHERS THEN
                                             VN_PD_ORIGINAL := 99;
                                             VN_BUCKET := 0;
                                   END;
                         END;

                         VN_NUMERR:= 63;

                         IF IN_REC.IN_SRATIN = 'CRDE' and SUBSTR(IN_REC.OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') and IN_REC.OR_SEGFIC2 NOT IN ('PA005', 'NC5DS', 'NC5R', 'NC5') THEN -- nuevo tratamiento outrated. XCG, 23/03/2021

                            VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses_para_unrated.

                            BEGIN -- obtenemos el número de buckets de un modelo
                               SELECT MAX(BUCKET), MIN(BUCKET)
                                 INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                                 FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                                WHERE MODELO = VN_MODELO_CALI
                                  AND TIPO = 'NORMAL'
                                  AND FLAG_NUEVA = 0; --XCG 5/5/2021 los depurados no utilizan el flag nueva
                            EXCEPTION
                                 WHEN OTHERS THEN
                                      VN_MAX_BUCKET:= 0;
                                      VN_MIN_BUCKET:= 0;
                            END;

                            BEGIN
                               SELECT POOL_PD, MULTIPLICADOR_PDCONT
                                 INTO VN_PD_ORIGINAL, VN_MULTIPLICADOR_PDCONT
                                 FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                                WHERE MODELO = VN_MODELO_CALI
                                  AND TIPO = 'NORMAL'
                                  AND FLAG_NUEVA = 0 --XCG 5/5/2021 los depurados no utilizan el flag nueva
                                  AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
                            EXCEPTION
                                 WHEN OTHERS THEN
                                      VN_PD_ORIGINAL := 99;
                            END;

                            VN_PDCONT:= VN_PD_ORIGINAL* VN_MULTIPLICADOR_PDCONT; -- pd contínua igual a la pool pd * multiplicador.

                         END IF;
                    END IF;
               END IF;
           END IF;
            

            IF IN_REC.IN_SRATIN = 'CURA' THEN

                  VN_MES:= FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.FI_MESCURA, 'YYYYMM'))+1);

                  IF VN_MES < 0 THEN
                     VN_MES:=0;
                  ELSIF VN_MES > 12 THEN
                        VN_MES:=12;
                  END IF;

                  IF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN

                     -- Cambian los l¿mites de la PD de Cura. XCG 25/07/11.
                     BEGIN
                        SELECT LIMITE
                          INTO VV_LIMITE
                          FROM BAS_MEN.LIMITES_CURA
                         WHERE SEGFIC = CASE
                                             when SUBSTR(IN_REC.OR_SEGFIC2,1,2) in ('HO', 'PA') then /* XCG, holdings y patrimoniales se identifican por el segfic y no por el campo de personas. 201609*/
                                                  'PA'
                                             when IN_REC.OR_SEGFIC2 in ('MT', 'UT') then
                                                  case
                                                       when IN_REC.OR_SEGFIC IN ('E3', 'E4', 'E5') THEN
                                                            IN_REC.OR_SEGFIC||IN_REC.SECTOR
                                                       ELSE
                                                             IN_REC.OR_SEGFIC
                                                  end
                                             when SUBSTR(IN_REC.OR_SEGFIC2,1,2) = 'NC' THEN
                                                  'E'||SUBSTR(IN_REC.OR_SEGFIC2,3,3)
                                             WHEN IN_REC.OR_SEGFIC2 = 'GR' THEN
                                                  SUBSTR(IN_REC.OR_SEGFIC2,1,2)||IN_REC.SECTOR
                                             else
                                                  IN_REC.OR_SEGFIC2
                                        end;
                     EXCEPTION
                          WHEN OTHERS THEN
                               VV_LIMITE:= 0;
                     END;

                     BEGIN
                        SELECT EAD
                          INTO vn_ead
                          FROM BAS_MEN.MAESTRO_EAD_CURA
                         WHERE OR_TITULARITAT = IN_REC.OR_TITULARITAT
                           AND SEGMENTO = 'EMP';
                     EXCEPTION
                          WHEN OTHERS THEN
                               BEGIN
                                  SELECT EAD
                                    INTO vn_ead
                                    FROM BAS_MEN.MAESTRO_EAD_CURA_OFEX
                                   WHERE OR_NUMOFI = IN_REC.OR_NUMOFI
                                     AND OR_CTACLI = IN_REC.OR_CTACLI
                                     AND SEGMENTO = 'EMP';
                               EXCEPTION
                                    WHEN OTHERS THEN
                                         NULL;
                               END;
                     END;

                     -- 29/03/2019 - Incremento y limitación de PD exposiciones E0-E1-E2-E3 - Se añade el TIPO 'PYME'
                     BEGIN
                        SELECT DECODE(SIGN(vn_ead-VV_LIMITE),1, ALTO, BAJO)
                          INTO VN_PD_FLOOR
                          FROM BAS_MEN.MAESTRO_PD_EMPRESAS_CURA
                         WHERE OR_MES = VN_MES
                           AND TIPO = CASE
                                           WHEN SUBSTR(IN_REC.IN_SUCEPT,1,2)  IN ('PR', 'PU', 'PT') THEN 'PROM'
                                           WHEN SUBSTR(IN_REC.OR_SEGFIC2,1,2) IN ('E0', 'E1', 'E2', 'E3')     THEN 'PYME'
                                           ELSE
                                                'EMPR'
                                      END;
                     EXCEPTION
                          WHEN OTHERS THEN
                               VN_PD_FLOOR:= 99;
                     END;

                       VN_NUMERR:= 51;

                 end if; 
                  VN_NUMERR:= 6;

                  VN_PDCONT := VN_PD_FLOOR;
                  VN_PD_ORIGINAL := VN_PD_FLOOR;

            ELSIF IN_REC.IN_SRATIN = 'BLQR' AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) <> 'EF' THEN

                  VN_CICLOA1      := 0;
                  VN_CICLOB1      := 0;
                  VN_PUNTMIN      := 0;
                  VN_PUNTMAX      := 100;
                  VN_PUNTNOR      := 0;
                  VN_PD_FLOOR     := 99;
                  VN_PD_ORIGINAL    := 99;
                  VN_MODELO_CALI  := '?';
                  VN_PD_AJUSCIC   := 0;
                  VN_PDCONT       := 99;
                  VN_TIP_RAT      := 0;
                  VN_NUMERR:= 164;

                  VN_NUMERR:= 165;

                  IF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN /* LA PD de bloqueo va directamente por modelo. XCG,24/04/14*/

                      IF SUBSTR(VV_OR_SEGRIE,1,2) IN ('GR', 'E5', 'P5') OR VV_OR_SEGRIE = 'PA005' THEN   /* La PD de corporates y grupos por modelo  08/09/2017*/

                         IF VV_OR_SEGRIE = 'GRP' THEN
                            VN_MODELO_CALI:= 'GR_PROM';
                         ELSIF VV_OR_SEGRIE = 'GR' THEN
                             VN_MODELO_CALI:= 'GR_EMPR';
                         ELSIF VV_OR_SEGRIE <> 'PA005' THEN
                             VN_MODELO_CALI:= SUBSTR(VV_OR_SEGRIE,1,2);
                         ELSE
                             VN_MODELO_CALI:=   VV_OR_SEGRIE;
                         END IF;

                         BEGIN
                           SELECT PD_REG
                             INTO VN_PD_FLOOR
                             FROM BAS_MEN.PD_CORPORATES_GRUPOS
                            WHERE SEG = VN_MODELO_CALI
                              AND TIPO = 'BLQR';
                              --AND PUNT_MIN <= IN_REC.OR_PUNT0
                              --AND PUNT_MAX >= IN_REC.OR_PUNT0;
                         EXCEPTION
                              WHEN OTHERS THEN
                                   VN_PD_FLOOR := 99;
                         END;

                      ELSE
                          BEGIN
                             SELECT DISTINCT POOL_PD, a, b, minimo, maximo, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                                INTO VN_PD_FLOOR, VN_CICLOA1, VN_CICLOB1, VN_PUNTMIN, VN_PUNTMAX, VN_MULTIPLICADOR_PDCONT
                                FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                               WHERE SUBSEGMENTO = VV_OR_SEGRIE
                                 AND TIPO = 'BLQR'
                                 AND PUNTMIN <= IN_REC.OR_PUNT0
                                 AND PUNTMAX >= IN_REC.OR_PUNT0;
                          EXCEPTION
                               WHEN OTHERS THEN
                                    VN_CICLOA1 := 1;
                                    VN_CICLOB1 := 1;
                                    VN_PD_FLOOR := 99;
                          END;

                      END IF;

                      VN_NUMERR:= 169;
                      VN_PDCONT := VN_PD_FLOOR;
                      VN_PD_ORIGINAL := VN_PD_FLOOR;

                  END IF;

            ELSIF IN_REC.IN_SRATIN in ('REFI', 'CRDER', 'SRR', 'SRR_CAD', 'SRR_INC', 'SRR_FEC')
              AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') and IN_REC.IN_SEGMBSINI not IN ('103', '104') THEN   /*CIVIR TAR-259 20/12/19 */

                  VN_NUMERR:= 181;
                  VN_CICLOA1      := 0;
                  VN_CICLOB1      := 0;
                  VN_PUNTMIN      := 0;
                  VN_PUNTMAX      := 100;
                  VN_PUNTNOR      := 0;
                  VN_PD_FLOOR     := 99;
                  VN_PD_ORIGINAL    := 99;
                  VN_MODELO_CALI  := '?';
                  VN_PD_AJUSCIC   := 0;
                  VN_PDCONT       := 99;
                  VN_TIP_RAT      := 0;

                  -- LA PD de refinanciados de empresas va directamente por modelo y puntuaci¿n. XCG,24/04/14
                  IF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN

                     VN_NUMERR:= 184;

                     IF SUBSTR(VV_OR_SEGRIE,1,2) IN ('GR', 'E5', 'P5') OR VV_OR_SEGRIE = 'PA005' THEN   /* la PD de corporates y grupos de refis XCG 03/2016.*/

                        IF VV_OR_SEGRIE = 'GRP' THEN
                           VN_MODELO_CALI:= 'GR_PROM';
                        ELSIF VV_OR_SEGRIE = 'GR' THEN
                              VN_MODELO_CALI:= 'GR_EMPR';
                        ELSIF SUBSTR(VV_OR_SEGRIE,1,3) = 'NC5' THEN
                              VN_MODELO_CALI:= 'E5';
                        ELSIF VV_OR_SEGRIE <> 'PA005' THEN
                              VN_MODELO_CALI:= SUBSTR(VV_OR_SEGRIE,1,2);
                        ELSE
                               VN_MODELO_CALI:= VV_OR_SEGRIE;
                        END IF;
            
                       VN_NUMERR:= 185;
            
                        /*  HDEV-170308 - Outdated/unrated para corporates y grupos */      
                       IF substr(IN_REC.IN_SRATIN,1,3) IN ('SRR') THEN
                            BEGIN
                               SELECT max(PD_REG), max(PD_REG)
                                 INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                                 FROM BAS_MEN.PD_CORPORATES_GRUPOS
                               WHERE SEG = VN_MODELO_CALI
                                 AND TIPO = 'REFI';
                            EXCEPTION
                                WHEN OTHERS THEN
                                VN_PD_ORIGINAL := 99;
                            END;
                       VN_PDCONT:= VN_PD_ORIGINAL;
            
                       VN_NUMERR:= 185;
            ELSIF IN_REC.IN_SRATIN = 'CRDER' THEN
                                  

              IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
              OR
                NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
              THEN VN_FLAG_NUEVA_EMP := 1;
                            ELSE VN_FLAG_NUEVA_EMP := 0;
                            END IF;
                  
              BEGIN
                 SELECT BUCKET
                    INTO VN_BUCKET --bucket origen
                    FROM BAS_MEN.PD_CORPORATES_GRUPOS
                  WHERE SEG = VN_MODELO_CALI
                     AND TIPO = 'REFI'
                     AND PUNT_MIN <= VN_OR_PUNT
                     AND PUNT_MAX >= VN_OR_PUNT;
              EXCEPTION
                   WHEN OTHERS THEN
                   BEGIN
                     SELECT BUCKET
                      INTO VN_BUCKET
                      FROM BAS_MEN.PD_CORPORATES_GRUPOS
                     WHERE SEG = VN_MODELO_CALI
                       AND TIPO = 'REFI'
                       AND PUNT_MIN = VN_OR_PUNT
                       AND PUNT_MAX = VN_OR_PUNT;
                   EXCEPTION
                      WHEN OTHERS THEN
                       VN_BUCKET := 0;
                       END;
               END;
               
               VN_NUMERR:= 186;
               VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses a migracion unrated
               VN_NUMERR:= 187;

               BEGIN -- obtenemos el número de buckets de un modelo
                  SELECT MAX(BUCKET), MIN(BUCKET)
                  INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                  FROM BAS_MEN.PD_CORPORATES_GRUPOS
                   WHERE SEG = VN_MODELO_CALI
                   AND TIPO = 'REFI';
               EXCEPTION
                WHEN OTHERS THEN
                   VN_MAX_BUCKET:= 0;
                   VN_MIN_BUCKET:= 0;
               END;
               VN_NUMERR:= 15;

               BEGIN
                  SELECT PD_REG, PD_REG, MULTIPLICADOR_PDCONT
                  INTO VN_PD_FLOOR, VN_PD_ORIGINAL, VN_MULTIPLICADOR_PDCONT
                  FROM BAS_MEN.PD_CORPORATES_GRUPOS
                   WHERE SEG = VN_MODELO_CALI
                  AND TIPO = 'REFI'
                  AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
               EXCEPTION
                  WHEN OTHERS THEN
                   VN_PD_ORIGINAL := 99;
               END;

               VN_PDCONT:= VN_PD_ORIGINAL* VN_MULTIPLICADOR_PDCONT; -- pd contínua igual a la pool pd * multiplicador.
            
            ELSE
              BEGIN
                 SELECT PD_REG, PD_REG
                 INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                 FROM BAS_MEN.PD_CORPORATES_GRUPOS
                WHERE SEG = VN_MODELO_CALI
                  AND TIPO = 'REFI'
                  AND PUNT_MIN <= IN_REC.OR_PUNT0
                  AND PUNT_MAX >= IN_REC.OR_PUNT0;
              EXCEPTION
                 WHEN OTHERS THEN
                    VN_PD_FLOOR := 99;
              END;

              VN_PDCONT := VN_PD_FLOOR;
              
            END IF;

                     ELSIF substr(IN_REC.IN_SRATIN,1,3) IN ('SRR') THEN

                         BEGIN
                            SELECT max(POOL_PD),max(POOL_PD)
                              INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                              FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                             WHERE SUBSEGMENTO = IN_REC.OR_SEGFIC2
                               AND TIPO = 'REFI';
                         EXCEPTION
                              WHEN OTHERS THEN
                                   VN_PD_FLOOR := 99;
                                   VN_PD_ORIGINAL := 99;
                         END;

                         VN_PDCONT:= VN_PD_FLOOR;

                     ELSE
                          BEGIN
                            SELECT DISTINCT MODELO
                              INTO VN_MODELO_CALI
                              FROM BAS_MEN.MAESTRO_MODELO_RATING
                             WHERE MODRAT = VN_OR_MODRAT;
                          EXCEPTION
                               WHEN OTHERS THEN
                                    VN_MODELO_CALI := '?';
                          END;

                          BEGIN
                             SELECT DISTINCT POOL_PD, POOL_PD, BUCKET
                                INTO VN_PD_FLOOR, VN_PD_ORIGINAL, VN_BUCKET
                                FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                               WHERE substr(modelo,5) = substr(VN_MODELO_CALI,5) /* NAV 12/05/20 - Xisco solicito para cambiar el campo VV_OR_SEGRIE por VN_MODELO_CALI */
                                 AND TIPO = 'REFI'
                                 AND PUNTMIN <= IN_REC.OR_PUNT0
                                 AND PUNTMAX >= IN_REC.OR_PUNT0;
                          EXCEPTION
                               WHEN OTHERS THEN
                                    VN_PD_FLOOR := 99;
                                    VN_PD_ORIGINAL := 99;
                                    VN_BUCKET := 0;
                          END;

                          IF IN_REC.IN_SRATIN = 'CRDER' THEN -- nuevo tratamiento outrated. XCG, 23/03/2021

                             VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses_para_unrated.

                             BEGIN -- obtenemos el número de buckets de un modelo
                                 SELECT count(BUCKET), MIN(BUCKET)
                                   INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                                   FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                                  WHERE substr(modelo,5) = substr(VN_MODELO_CALI,5)
                                    AND TIPO = 'REFI';
                              EXCEPTION
                                   WHEN OTHERS THEN
                                        VN_MAX_BUCKET:= 0;
                                        VN_MIN_BUCKET:= 0;
                              END;

                              BEGIN
                                 SELECT POOL_PD, POOL_PD
                                   INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                                   FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                                  WHERE substr(modelo,5) = substr(VN_MODELO_CALI,5)
                                    AND TIPO = 'REFI'
                                    AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
                              EXCEPTION
                                   WHEN OTHERS THEN
                                        VN_PD_FLOOR := 99;
                                        VN_PD_ORIGINAL := 99;
                              END;

                          END IF;

                          VN_PDCONT:= VN_PD_FLOOR;

                     END IF;                 

                  END IF;

            END IF;

       VN_PD_FLOOR:= VN_PD_ORIGINAL;

       /* Aplicacion del suelo a la pd coreps */
       IF VN_PD_FLOOR < 0.0003 THEN

          VN_PD_FLOOR := 0.0003;

       END IF;

       /* Aplicacion del suelo a la pd original */
       IF VN_PD_ORIGINAL < 0.0003 THEN

          VN_PD_ORIGINAL := 0.0001;

       END IF;

       /* Obtencion del ratint a partir de la PD */
       BEGIN
           SELECT RATING
             INTO VN_RATINT
             FROM BAS_MEN.MAESTRO_PD_POOLPD
            WHERE PDMIN <= VN_PD_FLOOR
              AND PDMAX > VN_PD_FLOOR;
       EXCEPTION
             WHEN OTHERS THEN
                  VN_RATINT := 99;
       END;

       VN_OR_PUNTFIN := VN_PUNTNOR;
       VN_NUMERR:= 78;

    -- END IF; -- 201512 SRAT para todas las exposiciones. Fin del if que sólo se haga por SRATING si el método es AIRB.

       -- Calculo de la PD Continua para los no susceptibles.
       IF VN_PDCONT = 99 OR IN_REC.IN_SEGMBS0 IN ('201', '203', '204') THEN

          VV_TROBAT := 'NO';

          ----PARA EL RESTO  DE SEGMENTOS
          IF VV_TROBAT = 'NO' THEN
             IF IN_REC.IN_SEGMBS0 = '201' THEN --Project Finance
                   VN_PDCONT:= 0.1907;
                   IF IN_REC.OR_RATINT >= 2.8 AND IN_REC.OR_RATINT <= 4.2 THEN
                      VN_PDCONT:= 0.0164;
                   ELSIF IN_REC.OR_RATINT  >= 4.3 and IN_REC.OR_RATINT <= 5.2 THEN
                         VN_PDCONT:= 0.008;
                   ELSIF IN_REC.OR_RATINT >= 5.3 AND IN_REC.OR_RATINT <> 99 THEN
                         VN_PDCONT:= 0.0045;
                   END IF;
             ELSIF IN_REC.IN_SEGMBS0 IN ('203', '204') THEN --Real Estate y Object Finance
                   VN_PDCONT:= 0.0238;
             END IF;
          END IF;

       END IF;

       --Calculo de la PD POOL
       IF VN_PD_FLOOR = 99 THEN
          VN_PDPOOL := VN_PDCONT;
       ELSE
            VN_PDPOOL := VN_PD_FLOOR;
       END IF;

       -- Tratamiento Morosos O BLOQUEOS CONTENCIOSOS. PD¿s a 1 y Ratings de capital a 0 --
       IF IN_REC.IN_INDMOR IN ('CT', 'SI') OR IN_REC.IN_SRATIN = 'BLQRM' THEN
          VN_FI_RATCONT := 0;
          VN_RATINT     := 0;
          VN_PDPOOL     := 1;
          VN_PDCONT     := 1;
         /* IF IN_REC.IN_SRATIN IN ('MORA', 'BLQRM') THEN --La PD coreps s¿lo se informa para el m¿todo AIRB. -- 201512 No hace falta modificarlo por marca SRATIN STDA */
          VN_PD_FLOOR := 1;
        --  END IF;
       END IF;

       -- tratamiento PF, RE y OF
       IF IN_REC.IN_SEGMBS0 IN ('201', '203', '204') THEN
          VN_PD_ORIGINAL := 99;
          VN_PD_FLOOR    := 99;
          VN_RATINT      := 99;
       END IF;

                 --C¿lculo del rating de capital continuo --
       BEGIN
        SELECT RATING
          INTO VN_FI_RATCONT
          FROM BAS_MEN.MAESTRO_PD_POOLPD
         WHERE PDMIN < VN_PDCONT
           AND PDMAX >= VN_PDCONT;
       EXCEPTION
            WHEN OTHERS THEN
                 VN_FI_RATCONT := 99;
       END;

       OUT_REC.OR_IDREG       := IN_REC.OR_IDREG;
       OUT_REC.FI_PD_ORIGINAL := VN_PD_ORIGINAL;
       OUT_REC.FI_PD_COREPS   := VN_PD_FLOOR;
       OUT_REC.FI_PDCONT      := VN_PDCONT;
       OUT_REC.FI_PDPOOL      := VN_PDPOOL;
       OUT_REC.FI_EADAIRB     := IN_REC.FI_EADAIRB;
       OUT_REC.FI_EADCONAIRB  := IN_REC.FI_EADCONAIRB;
       OUT_REC.FI_CCFAIRB     := IN_REC.FI_CCFAIRB;
       OUT_REC.FI_RATCON      := VN_FI_RATCONT;
       OUT_REC.IN_RATINT      := VN_RATINT;
       OUT_REC.OR_PUNTFIN     := VN_OR_PUNTFIN;
       OUT_REC.OR_IDMES       := IN_REC.OR_IDMES;
       OUT_REC.IN_FLAG_NUEVA  := VN_FLAG_NUEVA_EMP;

       pipe row(out_rec);

 END LOOP;

 EXCEPTION
   WHEN OTHERS THEN

        RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));

end F_CALCULO_PD_OLD;

/* INI HDEV-107786 Nuevos calibrados */
FUNCTION F_ASIGNACION_PD(P_PRELACION IN VARCHAR2,P_SEGMENTO IN VARCHAR2) RETURN FLOAT
    IS
    VN_NUMERR NUMBER;
    VN_PD BAS_MEN.MAESTRO_SEG_CALIB_PD.PD%TYPE;
    BEGIN
       VN_NUMERR:=1;
       BEGIN
          SELECT PD
             INTO  VN_PD
             FROM BAS_MEN.MAESTRO_SEG_CALIB_PD
            WHERE PRELACION=P_PRELACION
              AND SEGMENTO=P_SEGMENTO;

        EXCEPTION
           WHEN OTHERS  THEN
               VN_NUMERR:=2;
                 VN_PD:=99;
        END;
        VN_NUMERR:=3;
        RETURN VN_PD;
    EXCEPTION
      WHEN OTHERS THEN
           RETURN VN_PD;
           RAISE_APPLICATION_ERROR(-20000, 'F_ASIGNACION_PD '||SUBSTR(TO_CHAR(VN_NUMERR)||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
END F_ASIGNACION_PD;
 
FUNCTION F_ASIG_PD_X_BUCKET(P_BUCKET IN OUT NUMBER,P_SEGMENTO IN VARCHAR2,P_Z IN  FLOAT) RETURN FLOAT
    IS
    VN_NUMERR NUMBER;
    VN_BUCKET                 BAS_MEN.MAESTRO_PD_POOL_EMP.BUCKET%TYPE:=P_BUCKET;
    VN_PD                     BAS_MEN.MAESTRO_PD_POOL_EMP.POOL_PD%TYPE;
    VN_SEGMENTO               BAS_MEN.MAESTRO_PD_PARAM.SEGMENTO%TYPE:=P_SEGMENTO;
    VN_TIPO                   VARCHAR2(6);
    VN_Z                     FLOAT:=P_Z;
BEGIN
    VN_NUMERR:=1;
     --BUSCO TIPO BUCKET
     IF VN_SEGMENTO IN ('P1','P2','P3') THEN
         VN_TIPO:='PROM';
     ELSE
        VN_TIPO:='EMP';
     END IF;

     VN_NUMERR:=2;
     IF VN_BUCKET IS NOT NULL THEN
       BEGIN
          SELECT POOL_PD
             INTO  VN_PD
             FROM BAS_MEN.MAESTRO_PD_POOL_EMP
            WHERE BUCKET=VN_BUCKET
              AND TIPO=VN_TIPO;
        EXCEPTION
           WHEN OTHERS  THEN
                 VN_PD:=99;
        END;
     ELSIF VN_Z IS NOT NULL THEN
      VN_NUMERR:=3;
         BEGIN
           SELECT POOL_PD,BUCKET
              INTO VN_PD, P_BUCKET
              FROM BAS_MEN.MAESTRO_PD_POOL_EMP
            WHERE TIPO=VN_TIPO
             AND PUNT_MIN <= VN_Z
             AND PUNT_MAX >VN_Z;
         EXCEPTION
               WHEN OTHERS  THEN
                    VN_PD:=99;
         END;
    ELSE
        VN_NUMERR:=4;
       VN_PD:=99;
    END IF;
     VN_NUMERR:=5;
        RETURN VN_PD;
EXCEPTION
   WHEN OTHERS THEN
        RETURN VN_PD;
        RAISE_APPLICATION_ERROR(-20000, 'F_ASIG_PD_X_BUCKET '||SUBSTR(TO_CHAR(VN_NUMERR)||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
END F_ASIG_PD_X_BUCKET;

FUNCTION F_CALCULO_ESCALA_MAESTRA(P_FEC_PROC IN NUMBER,P_ID_TITULARIDAD IN NUMBER,P_SEGMENTO IN VARCHAR2,  P_MODELO IN VARCHAR2 , P_TIPRAT IN NUMBER,P_PUNT_IMP IN NUMBER, P_BUCKET OUT NUMBER, P_Z OUT FLOAT) RETURN FLOAT
 IS

  VN_NUMERR                 NUMBER(3);
  VN_IMP_MATERIALES         BAS_MEN.IMPAGOS_TITULARIDAD_PD.D_MAX_IMPAGO_12M_30%TYPE;
  VN_Z                      FLOAT;
  VN_ALFA                   BAS_MEN.MAESTRO_PD_PARAM.ESTIMADO%TYPE;
  VN_BETA                   BAS_MEN.MAESTRO_PD_PARAM.ESTIMADO%TYPE;
  VN_THETA                  BAS_MEN.MAESTRO_PD_PARAM.ESTIMADO%TYPE;
  VN_TIPO                   VARCHAR2(6);
  VN_BUCKET                 BAS_MEN.MAESTRO_PD_POOL_EMP.BUCKET%TYPE;
  VN_PD                     BAS_MEN.MAESTRO_PD_POOL_EMP.POOL_PD%TYPE;
  VN_FEC_PROC               NUMBER(8):=P_FEC_PROC;
  VN_ID_TITULARIDAD         BAS_MEN.IMPAGOS_TITULARIDAD_PD.OR_TITULARITAT%TYPE:=P_ID_TITULARIDAD;
  VN_SEGMENTO               BAS_MEN.MAESTRO_PD_PARAM.SEGMENTO%TYPE:=P_SEGMENTO;
  VN_MODELO                 BAS_MEN.MAESTRO_MODELO_RATING.MODELO%TYPE:=P_MODELO;
  VN_TIPRAT                 BAS_MEN.MAESTRO_MODELO_RATING.TIPRAT%TYPE:=P_TIPRAT;
  VN_PUNT_IMP               BAS_MEN.BASILEA.OR_PUNT0%TYPE:=P_PUNT_IMP;

BEGIN
    VN_NUMERR:=1;

    VN_ALFA :=0;
    VN_BETA :=0;
    VN_THETA :=0;
    VN_NUMERR:=2;
    VN_IMP_MATERIALES:=0;
 
    BEGIN
      SELECT D_MAX_IMPAGO_12M_30
         INTO VN_IMP_MATERIALES
       FROM BAS_MEN.IMPAGOS_TITULARIDAD_PD
      WHERE OR_TITULARITAT=VN_ID_TITULARIDAD;
    EXCEPTION
       WHEN OTHERS THEN
       VN_IMP_MATERIALES:=0;
    END;
  
    VN_NUMERR:=3;
    --cambio valores
    IF VN_SEGMENTO='P5' THEN --Es para obtener el valor CORP de Alfa y Beta
       VN_SEGMENTO:='P3';
        VN_TIPRAT:=98;
    END IF;
    VN_NUMERR:=4;
    
    BEGIN
         SELECT ESTIMADO
           INTO  VN_ALFA
           FROM BAS_MEN.MAESTRO_PD_PARAM
          WHERE PARAMETRO='d_tiprat_'||VN_TIPRAT
            AND SEGMENTO=VN_SEGMENTO;
    EXCEPTION
         WHEN OTHERS  THEN
              VN_ALFA:=0;
    END;
   
   VN_NUMERR:=5;

    BEGIN
       SELECT ESTIMADO
         INTO  VN_BETA
         FROM BAS_MEN.MAESTRO_PD_PARAM
        WHERE PARAMETRO='i_miss_punt_vig_'||VN_TIPRAT||'_0'
          AND SEGMENTO=VN_SEGMENTO;
    EXCEPTION
         WHEN OTHERS  THEN
              VN_BETA:=0;
    END;
    VN_NUMERR:=6;

    IF VN_IMP_MATERIALES = 1 THEN
        BEGIN
         SELECT ESTIMADO
           INTO  VN_THETA
          FROM BAS_MEN.MAESTRO_PD_PARAM
         WHERE PARAMETRO='d_max_impago_12m_30'
           AND SEGMENTO=VN_SEGMENTO;
         EXCEPTION
              WHEN OTHERS  THEN
                   VN_THETA:=0;
          END;

    END IF;
      
    VN_NUMERR:=7;
    VN_Z:=VN_ALFA+VN_BETA* VN_PUNT_IMP+VN_THETA;
    VN_NUMERR:=8;
    P_BUCKET:=NULL;
    VN_NUMERR:=9;
    VN_PD:=F_ASIG_PD_X_BUCKET(P_BUCKET,VN_SEGMENTO,VN_Z) ;
    VN_NUMERR:=10;
    P_Z:=VN_Z;
    RETURN VN_PD;
EXCEPTION
     WHEN OTHERS THEN
          RETURN VN_PD;
          RAISE_APPLICATION_ERROR(-20000, 'F_CALCULO_ESCALA_MAESTRA '||SUBSTR(TO_CHAR(VN_NUMERR)||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
END F_CALCULO_ESCALA_MAESTRA;
/* FIN HDEV-107786 Nuevos calibrados */

FUNCTION F_CALCULO_PD (cur IN cursor_basilea, PN_FECPRO IN NUMBER) RETURN t_array_basilea_CALCULO_PD
         parallel_enable(PARTITION cur by any)
         PIPELINED
      as

  in_rec cur%ROWTYPE;
  out_rec BAS_MEN.BASILEA_AIRB_PD%ROWTYPE;
  v_num NUMBER;

  VV_ROWID                  VARCHAR2(50);
  VN_COUNT                  NUMBER(9);
  VV_MENSAJE                VARCHAR2(255);
  VN_NUMERR                 NUMBER(3);
  VN_OR_PUNTFIN             FLOAT(126);
  VN_OR_PUNTFINS            FLOAT(126);
  VN_OR_PUNT                FLOAT(126);
  VN_PD_ORIGINAL            FLOAT(126);
  VN_RATING_INT             NUMBER(4,2);
  VV_OR_SEGRIE              VARCHAR2(10);
  VN_OR_MODRAT              VARCHAR2(5);
  VN_PUNTMIN                FLOAT(126);
  VN_PUNTMAX                FLOAT(126);
  VN_PUNTNOR                FLOAT(126);
  VN_RATINT                 NUMBER(4,2);
  VN_CICLOA1                FLOAT(126);
  VN_CICLOB1                FLOAT(126);
  VN_PD_AJUSCIC             FLOAT(126);
  VN_OR_PUNTSCO             FLOAT(126);
  VN_MODELO_CALI            VARCHAR2(33);
  VN_PD_FLOOR               FLOAT(126);
  VN_TIP_RAT                NUMBER(2);
  VN_PDCONT                 FLOAT(126);
  VN_PDPOOL                 FLOAT(126);
  VN_FI_RATCONT             NUMBER(4,2);
  VV_TROBAT                 VARCHAR2(2);
  VV_OR_SEGFIC              VARCHAR2(2);
  VV_OR_SEGFIC2             VARCHAR2(10);
  VN_MES                    FLOAT(126);
  VV_LIMITE                 FLOAT(126);
  VV_ENTIDAD                VARCHAR2(6);
  vn_ead                    float(126);
  vv_Id_Res                 NUMBER(1) DEFAULT 1;
  VN_MULTIPLICADOR_PDCONT   FLOAT(126);
  VN_FLAG_NUEVA_EMP         NUMBER(1,0);
  VN_BUCKET                 NUMBER(2); /* 29/03/2021 XCG - Outdated y unrated */
  VN_MAX_BUCKET             NUMBER(2); /* 29/03/2021 XCG - Outdated y unrated */
  VN_MIN_BUCKET             NUMBER(2); /* 29/03/2021 XCG - Outdated y unrated */
  /* INI HDEV-107786 Nuevos calibrados */
  VN_MODELO                 BAS_MEN.MAESTRO_MODELO_RATING.MODELO%TYPE;
  VN_TIPRAT                 BAS_MEN.MAESTRO_MODELO_RATING.TIPRAT%TYPE;
  VN_SIMP                   VARCHAR2(1);
  VN_PD_UNRATED_1           FLOAT(126);
  VN_PD_UNRATED_2           FLOAT(126);
  VN_PD_OUTDATED            FLOAT(126);
  VN_BUCKET_ORIG            BAS_MEN.MAESTRO_PD_POOL_EMP.BUCKET%TYPE;
  VN_T                      NUMBER;-- representa los meses transcurridos desde que se calculó el rating.
  VN_MES_DEPURADO           NUMBER;--representa los meses transcurridos entre la fecha de observación (fecha de proceso) y la fecha en la que el rating pasó a depurado
  VN_FEC_DEPURADO           NUMBER;--representa la fecha en la que el rating pasó a depurado
  VN_BUCKET_PEOR            BAS_MEN.MAESTRO_PD_POOL_EMP.BUCKET%TYPE; 
  VN_Z                      FLOAT;
  VN_FI_MESCURA             DATE; --se agrego para el calculo del v_mes cuando este viene  con valor cero o nulo
  VN_IN_SRATIN_2            VARCHAR2(30);
  /* FIN HDEV-107786 Nuevos calibrados */
  
  BEGIN
    VN_NUMERR:= 1;
  LOOP

     fetch cur into in_rec;
     EXIT WHEN cur%notfound;

     VN_NUMERR                := 3;
     VN_COUNT                 := VN_COUNT + 1;
     VV_ROWID                 := TO_CHAR(IN_REC.OR_IDREG);
     VN_PD_ORIGINAL           := 99;
     VN_RATING_INT            := 99;
     VN_OR_PUNTFIN            := 0;
     VN_PUNTMIN               := 0;
     VN_PUNTMAX               := 100;
     VN_PUNTNOR               := 0;
     VN_RATINT                := 99;
     VN_OR_PUNTFINS           := 0;
     VN_CICLOA1               := 0;
     VN_CICLOB1               := 0;
     VN_PD_AJUSCIC            := 0;
     VN_OR_PUNTSCO            :=0;
     VN_MODELO_CALI           := '?';
     VN_PD_FLOOR              := 99;
     VN_PDCONT                := 99;
     VN_PDPOOL                := 99;
     VN_TIP_RAT               := 0;
     VN_FI_RATCONT            := 99;
     VV_OR_SEGRIE             := '?';
     VV_LIMITE                :=0;
     VV_ENTIDAD               := 'BS';
     vn_ead                   := in_rec.fi_eadairb;
     vv_Id_Res                := 1;
     VN_MULTIPLICADOR_PDCONT  := 1;
     VN_MES                   := 0;
     VN_BUCKET                := 0;
     VN_MAX_BUCKET            := 0;
     VN_MIN_BUCKET            := 0;
     VN_FLAG_NUEVA_EMP        := 0; /* 25/03/2021 Añadida variable para la antigüedad de la empresa para el MoC en empresas */
     VN_BUCKET                := 0; /* 29/03/2021 XCG - Outdated y unrated */
     VN_MAX_BUCKET            := 0; /* 29/03/2021 XCG - Outdated y unrated */
     VN_MIN_BUCKET            := 0; /* 29/03/2021 XCG - Outdated y unrated */
     /* INI HDEV-107786 Nuevos calibrados */
     VV_OR_SEGFIC2            := IN_REC.OR_SEGFIC2;
     VV_OR_SEGFIC             := IN_REC.OR_SEGFIC;
     VV_OR_SEGRIE             := IN_REC.OR_SEGRIE;
     VN_OR_PUNT               := IN_REC.OR_PUNT0;
     VN_OR_MODRAT             := IN_REC.OR_MODRAT0;
     VN_OR_PUNTSCO            := IN_REC.OR_PUNTSCO;
     VN_Z                     :=9999;
     VN_IN_SRATIN_2           :=NULL;
     /* FIN HDEV-107786 Nuevos calibrados */
     VN_NUMERR:= 2;

     --Mapeamos el modelo de c¿digos no parametrizados en la PD. XCG, 1/08/08.
     BEGIN
        SELECT COD_MODELO
          INTO VN_OR_MODRAT
          FROM BAS_MEN.MAESTRO_MAPEO_MODELO
         WHERE MODELO = IN_REC.OR_MODRAT0;
     EXCEPTION
          WHEN OTHERS THEN
               VN_OR_MODRAT :=  IN_REC.OR_MODRAT0;
     END;

     VN_NUMERR:= 3;
    /* HDEV-107790 09/02/2022*/

     IF IN_REC.IN_SEGMBSINI = '103' THEN
        VV_OR_SEGRIE:= 'H';
     ELSIF IN_REC.IN_SEGMBSINI = '104' THEN
           VV_OR_SEGRIE:= 'C';
     ELSIF IN_REC.IN_SEGMBSINI IN ('002', '017') THEN
           VV_OR_SEGRIE:= 'CCAA';
     ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'KT' THEN
           VV_OR_SEGRIE:= 'CRED';
     ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'TA' THEN
           VV_OR_SEGRIE:= 'TARJ';
     ELSIF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN

                 IF IN_REC.OR_SEGFIC2 in ('HO', 'PA', 'PA001', 'PA002', 'PA003', 'PA005') THEN
                       VV_OR_SEGRIE := 'PAT';
                 ELSIF SUBSTR(IN_REC.OR_SEGFIC2,1,2) = 'NC' THEN
                       VV_OR_SEGRIE:= 'E'||SUBSTR(IN_REC.OR_SEGFIC2,3,3);
                 ELSE
                       VV_OR_SEGRIE:= IN_REC.OR_SEGFIC2;
                 END IF;
     ELSIF IN_REC.OR_SEGGES = 1 THEN
           VV_OR_SEGRIE:= 'PART';
     ELSIF IN_REC.OR_SEGGES = 2 THEN
           VV_OR_SEGRIE:= 'CCAA';
     END IF;
     
     VN_NUMERR:= 4;

          -- Su c¿lculo real de PD coreps se hace posteriormente.
          /* Calculo de la PD para empresas/promotores   */

            IF IN_REC.IN_SRATIN IN ('CRVI', 'CRDE', 'SR', 'SR_CAD', 'SR_INC', 'SR_FEC', 'MORA') /* 06/07/2021 - NAV - XCG solicito añadin MORA */
             AND SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('EM','EU','ET','PR','PU','PT','HO','PA','NC', 'GR')  THEN

               VN_NUMERR:= 5;

               /* 10/01/2022 - NAV- HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos - De nuevo cambiamos VV_OR_SEGRIE por IN_REC.OR_SEGFIC2 */
               IF SUBSTR(IN_REC.OR_SEGFIC2,1,2) IN ('GR', 'E5', 'P5') OR IN_REC.OR_SEGFIC2 in ('PA005', 'NC5DS', 'NC5R', 'NC5') THEN  /* la PD de corporates y grupos XCG 03/2016.*/ /* 18/05/2021 - Cambiamos el campo IN_REC.OR_SEGFIC2 por VV_OR_SEGRIE */
                  VN_NUMERR:= 6;
                  IF IN_REC.OR_SEGFIC2 = 'GRP' THEN
                     VN_MODELO_CALI:= 'GR_PROM';
                  ELSIF IN_REC.OR_SEGFIC2 = 'GR' THEN
                        VN_MODELO_CALI:= 'GR_EMPR';
                  ELSIF SUBSTR(IN_REC.OR_SEGFIC2,1,3) = 'NC5' THEN
                        VN_MODELO_CALI:= 'E5';
                  ELSIF IN_REC.OR_SEGFIC2 <> 'PA005' THEN
                        VN_MODELO_CALI:= SUBSTR(IN_REC.OR_SEGFIC2,1,2);
                  ELSE
                         VN_MODELO_CALI:= IN_REC.OR_SEGFIC2;
                  END IF;
                  VN_NUMERR:= 7;

                    /* INI - 14/12/2021- FMRR - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos  */

                    IF substr(IN_REC.IN_SRATIN,1,2) IN ('SR') THEN
                      VN_NUMERR:= 8;

                       BEGIN
                          SELECT max(PD_REG)
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL;

                    ELSIF IN_REC.IN_SRATIN = 'CRDE' THEN
                          VN_NUMERR:= 9;

                       /* 04/01/2021 RMR - INICIO */

                        IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                           FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
                         OR
                           NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                           FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
                        THEN VN_FLAG_NUEVA_EMP := 1;
                        ELSE VN_FLAG_NUEVA_EMP := 0;
                        END IF;
                        VN_NUMERR:= 10;

                      BEGIN
                              SELECT BUCKET
                                INTO VN_BUCKET --bucket origen
                                FROM BAS_MEN.PD_CORPORATES_GRUPOS
                               WHERE SEG = VN_MODELO_CALI
                                 AND TIPO = 'NORMAL'
                                 AND PUNT_MIN <= VN_OR_PUNT
                                 AND PUNT_MAX >= VN_OR_PUNT;
                           EXCEPTION
                                WHEN OTHERS THEN
                                     BEGIN
                                        SELECT BUCKET
                                          INTO VN_BUCKET
                                          FROM BAS_MEN.PD_CORPORATES_GRUPOS
                                         WHERE SEG = VN_MODELO_CALI
                                           AND TIPO = 'NORMAL'
                                           AND PUNT_MIN = VN_OR_PUNT
                                           AND PUNT_MAX = VN_OR_PUNT;
                                     EXCEPTION
                                          WHEN OTHERS THEN
                                               VN_BUCKET := 0;
                                     END;
                           END;
                       VN_NUMERR:= 13;


                       VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses a migracion unrated
                       VN_NUMERR:= 14;

                       /* 04/01/2021 RMR - FIN */

                       BEGIN -- obtenemos el número de buckets de un modelo
                          SELECT MAX(BUCKET), MIN(BUCKET)
                            INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_MAX_BUCKET:= 0;
                                 VN_MIN_BUCKET:= 0;
                       END;
                       VN_NUMERR:= 15;

                       BEGIN
                          SELECT PD_REG, MULTIPLICADOR_PDCONT
                            INTO VN_PD_ORIGINAL, VN_MULTIPLICADOR_PDCONT
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL'
                             AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL* VN_MULTIPLICADOR_PDCONT; -- pd contínua igual a la pool pd * multiplicador.

                    ELSE
                       VN_NUMERR:= 16;

                       BEGIN
                          SELECT PD_REG
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.PD_CORPORATES_GRUPOS
                           WHERE SEG = VN_MODELO_CALI
                             AND TIPO = 'NORMAL'
                             AND PUNT_MIN <= IN_REC.OR_PUNT0
                             AND PUNT_MAX >= IN_REC.OR_PUNT0;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL;

                    END IF;

                    /* FIN - 14/12/2021 - FMRR - HDEV-101803 */

               ELSE
                    VN_NUMERR:= 17;

                    /* 26/03/2021 RMR Calculo de la antigüedad de la empresa para el MoC en empresas */
                    IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                         FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
                       OR
                         NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                         FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
                      THEN VN_FLAG_NUEVA_EMP := 1;
                      ELSE VN_FLAG_NUEVA_EMP := 0;
                    END IF;
                     
               END IF;


            /* Cálculo de la PD para Comercios y Autónomos  */
            /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA
            ELSIF IN_REC.IN_SRATIN IN ('CRVI', 'CRDE', 'CRIDE') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'CA'   THEN    /* Rating inconsistente TAR-259 /17/12/19*/   /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
            --ELSIF IN_REC.IN_SRATIN IN ('CRVI', 'CRDE', 'CRIDE', 'SR', 'SR_CAD', 'SR_INC') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('CA', 'CR')   THEN
              ELSIF IN_REC.IN_SRATIN IN ('CRVI', 'CRDE', 'CRIDE', 'SR', 'SR_CAD', 'SR_INC') AND IN_REC.IN_SEGMBSINI in ('101', '102', '002', '017')   THEN

                  VN_NUMERR:= 30;

                  BEGIN
                     SELECT TIPRAT
                       INTO VN_TIP_RAT
                       FROM BAS_MEN.MAESTRO_MODELO_RATING
                      WHERE MODRAT = VN_OR_MODRAT;
                  EXCEPTION
                       WHEN OTHERS THEN
                            VN_TIP_RAT := 0;
                  END;

                  /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */
                  IF substr(IN_REC.IN_SRATIN,1,2) = 'SR' THEN

                       VN_NUMERR:= 31;

                       BEGIN
                          SELECT max(POOL_PD)
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO = 'NORMAL';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL;

                  ELSIF IN_REC.IN_SRATIN = 'CRDE' THEN
                  
                       VN_NUMERR:= 32;
             
                       BEGIN
                           SELECT DISTINCT MINIMO, MAXIMO, A, B, MULTIPLICADOR_PDCONT
                             INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                             FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                            WHERE TIPO_RATING = VN_TIP_RAT
                                AND TIPO = 'NORMAL';
                       EXCEPTION
                             WHEN OTHERS THEN
                                  NULL;
                       END;

                       /* Normalizacion de la PD */
                       IF VN_PUNTMIN >= VN_OR_PUNT THEN
                          VN_OR_PUNT := VN_PUNTMIN;
                       ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
                          VN_OR_PUNT := VN_PUNTMAX;
                       END IF;

                       VN_PUNTNOR :=  100 * ((VN_OR_PUNT - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));

                       BEGIN
                          SELECT BUCKET
                            INTO VN_BUCKET --bucket origen
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO_RATING = VN_TIP_RAT
                             AND TIPO = 'NORMAL'
                             AND PUNTMIN <= VN_PUNTNOR
                             AND PUNTMAX >= VN_PUNTNOR;
                       EXCEPTION
                          WHEN OTHERS THEN
                              VN_BUCKET := 0;
                       END;


                       VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses a migracion unrated

                       BEGIN -- obtenemos el número de buckets de un modelo
                          SELECT MAX(BUCKET), MIN(BUCKET)
                            INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO_RATING = VN_TIP_RAT
                             AND TIPO = 'NORMAL';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_MAX_BUCKET:= 0;
                                 VN_MIN_BUCKET:= 0;
                       END;

                       BEGIN
                          SELECT POOL_PD, MULTIPLICADOR_PDCONT
                            INTO VN_PD_ORIGINAL, VN_MULTIPLICADOR_PDCONT
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO_RATING = VN_TIP_RAT
                             AND TIPO = 'NORMAL'
                             AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_ORIGINAL* VN_MULTIPLICADOR_PDCONT; -- pd contínua igual a la pool pd * multiplicador.

                  ELSE
                  /* FIN - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */
                        VN_NUMERR:= 33;

                        BEGIN
                           SELECT DISTINCT MINIMO, MAXIMO, A, B, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                             INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                             FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                            WHERE TIPO_RATING = VN_TIP_RAT
                                AND TIPO = 'NORMAL';
                        EXCEPTION
                             WHEN OTHERS THEN
                                  NULL;
                        END;

                        /* Normalizacion de la PD */
                        IF VN_PUNTMIN >= VN_OR_PUNT THEN
                           VN_OR_PUNT := VN_PUNTMIN;
                           ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
                           VN_OR_PUNT := VN_PUNTMAX;
                        END IF;

                        VN_NUMERR:= 34;

                        VN_PUNTNOR :=  100 * ((VN_OR_PUNT - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));

                        --Obetencion de la PD por tipo de rating Y puntuacion.

                        BEGIN
                           SELECT POOL_PD
                             INTO VN_PD_ORIGINAL
                             FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                            WHERE TIPO = 'NORMAL'
                                 AND TIPO_RATING = VN_TIP_RAT
                              AND PUNTMIN <= VN_PUNTNOR
                              AND PUNTMAX >= VN_PUNTNOR;
                        EXCEPTION
                             WHEN OTHERS THEN
                                  VN_PD_ORIGINAL := 99;
                        END;

                        VN_NUMERR:= 35;

                        VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
                        VN_PDCONT:= LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT); /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */

                        VN_NUMERR:= 36;
                  END IF; /* 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */

            /* Cálculo de la PD para particulares */
            ELSIF IN_REC.IN_SRATIN IN ('CSORVI', 'REFI', 'SSEM', 'SSOR', 'CSGLVI', 'SSORR') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('CO','HI')
               /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo
               and (IN_REC.OR_FECOPE >= PN_fecpro-10000 AND NVL(IN_REC.OR_FECSCO,IN_REC.OR_FECOPE) >= PN_fecpro-10000) then -- PD Reactivo Préstamos*/
               and (IN_REC.OR_FECOPE > 19000101
               AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) <= 6
                    AND TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD') >= add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                 OR
                   (ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) > 6
                   AND TO_DATE(NULLIF(IN_REC.OR_FECOPE,10101),'YYYYMMDD') >= add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))) then -- PD Reactivo Préstamos

                  VN_NUMERR:= 37;

                  IF IN_REC.IN_SRATIN = 'CSORVI' THEN -- CSORVI
                     VN_NUMERR:= 38;
                     
                     BEGIN
                        SELECT distinct MIN, MAX, A, B, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                          INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                          FROM BAS_MEN.MAESTRO_PD_REACTIVO
                         WHERE MODELO_SCO = IN_REC.OR_SEGFIC2
                           AND GRUPO = IN_REC.IN_SRATIN;
                     EXCEPTION
                          WHEN OTHERS THEN
                               NULL;
                     END;
                     VN_NUMERR:= 39;
                     
                     --Normalizamos la puntuacion del scoring.
                     IF  VN_PUNTMIN >= VN_OR_PUNTSCO THEN
                         VN_OR_PUNTSCO := VN_PUNTMIN;
                     ELSIF VN_PUNTMAX <= VN_OR_PUNTSCO THEN
                           VN_OR_PUNTSCO := VN_PUNTMAX;
                     END IF;
                     VN_NUMERR:= 40;

                     VN_PUNTNOR :=  100 * ((VN_OR_PUNTSCO - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
                     VN_NUMERR:= 41;
                     VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
                     VN_NUMERR:= 42;

                     BEGIN
                             SELECT POOL_PD
                               INTO VN_PD_ORIGINAL
                               FROM BAS_MEN.MAESTRO_PD_REACTIVO
                              WHERE MODELO_SCO = IN_REC.OR_SEGFIC2
                                AND GRUPO = IN_REC.IN_SRATIN
                                AND PUNT_MIN < VN_PUNTNOR
                                AND PUNT_MAX >= VN_PUNTNOR;
                       EXCEPTION
                               WHEN OTHERS THEN
                                    BEGIN
                                       SELECT POOL_PD
                                         INTO VN_PD_ORIGINAL
                                         FROM BAS_MEN.MAESTRO_PD_REACTIVO
                                        WHERE MODELO_SCO = IN_REC.OR_SEGFIC2
                                          AND GRUPO = 'TC'; -- SI NO HAY MUESTRA DE MODELO / DICTAMEN, SE ACCEDE DE MANERA GLOBAL (TC)
                                    EXCEPTION
                                         WHEN OTHERS THEN
                                              VN_PD_ORIGINAL := 99;
                                    END;
                          END;

                     VN_NUMERR:= 43;

                  ELSIF IN_REC.IN_SRATIN IN ('SSEM', 'SSOR', 'CSGLVI') THEN
                         VN_NUMERR:= 44;

                          BEGIN
                              SELECT POOL_PD
                                INTO VN_PD_ORIGINAL
                                FROM BAS_MEN.MAESTRO_PD_REACTIVO
                               WHERE GRUPO = IN_REC.IN_SRATIN
                                 AND MODELO_SCO = IN_REC.OR_SEGFIC2;
                        EXCEPTION
                           WHEN OTHERS THEN
                                VN_PD_ORIGINAL := 99;
                          END;
                          VN_NUMERR:= 45;

                  ELSE    -- REFI
                          VN_NUMERR:= 46;
                          BEGIN
                             SELECT POOL_PD
                               INTO VN_PD_ORIGINAL
                               FROM BAS_MEN.MAESTRO_PD_REACTIVO
                              WHERE MODELO_SCO = IN_REC.OR_SEGFIC2
                                AND GRUPO = DECODE(IN_REC.IN_SRATIN,'SSORR', 'REFI', IN_REC.IN_SRATIN);
                          EXCEPTION
                               WHEN OTHERS THEN
                                   VN_NUMERR:= 47;
                                    BEGIN
                                       SELECT POOL_PD
                                         INTO VN_PD_ORIGINAL
                                         FROM BAS_MEN.MAESTRO_PD_REACTIVO
                                        WHERE MODELO_SCO = IN_REC.OR_SEGFIC2
                                          AND GRUPO = 'TC'; -- SI NO HAY MUESTRA DE MODELO / DICTAMEN, SE ACCEDE DE MANERA GLOBAL (TC)
                                    EXCEPTION
                                         WHEN OTHERS THEN
                                              VN_PD_ORIGINAL := 99;
                                    END;
                          END;
                  END IF;

                  VN_NUMERR:= 48;

                  -- PD Continua

                  IF IN_REC.IN_SRATIN = 'CSORVI' THEN
                       VN_PDCONT := LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT); /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                  ELSIF VN_PD_ORIGINAL < 0.0003 THEN
                     VN_PDCONT := 0.0003;
                  ELSE
                     VN_PDCONT := VN_PD_ORIGINAL;
                  END IF;

                  -- PD Floor

                  VN_RATINT := 99;
                  VN_PD_FLOOR:= VN_PD_ORIGINAL;

            ELSIF IN_REC.IN_SRATIN IN ('CSORVI', 'REFI')
                AND SUBSTR(IN_REC.IN_SUCEPT,1,2) IN ('CO','HI')
                --AND (IN_REC.OR_FECOPE < PN_fecpro-10000 OR IN_REC.OR_FECSCO < PN_fecpro-10000) then   /* PD Comportamental Préstamos*/
                /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo*/
                AND (IN_REC.OR_FECOPE > 19000101
                   AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) <= 6
                        AND TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                     OR
                       (ABS(MONTHS_BETWEEN(TO_DATE(nvl(IN_REC.OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(IN_REC.OR_FECOPE,'YYYYMMDD') )) > 6
                       AND TO_DATE(NULLIF(IN_REC.OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))) THEN /* PD Comportamental Préstamos*/

                  VN_NUMERR:= 49;
                  /* 20191030 - ARM - Tratar como entidad BS en lugar de la entidad de origen los empleados de entidades adquiridas del comportamental.*/
                  IF In_Rec.IN_OPER_MIGR IN ( 'BG', 'BGT' ) OR (In_Rec.IN_SUCEPT IN ('HINSTE','CONSTE') AND In_Rec.IN_OPER_MIGR IN ('CAM','BMN','BCG','LBI')) THEN
                     VV_ENTIDAD := 'BS';
                  ELSE
                        VV_ENTIDAD := In_Rec.In_Oper_Migr;
                  END IF;
                  VN_NUMERR:= 50;

                  IF SUBSTR(In_Rec.OR_IDPERS, 1, 2) IN ('00', '04') THEN
                      vv_Id_Res := 0; -- Nacional
                  ELSIF SUBSTR(In_Rec.OR_IDPERS, 1, 2) IN ('03', '05') THEN
                         vv_Id_Res := 1; -- Extranjero
                  ELSE
                        vv_Id_Res := 1; -- Extranjero por defecto
                  END IF;
                  VN_NUMERR:= 51;

                  BEGIN
                     SELECT PUNTSCO_MIN, PUNTSCO_MAX, POOL_PD, A, B, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                       INTO VN_PUNTMIN, VN_PUNTMAX, VN_PD_ORIGINAL, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                       FROM BAS_MEN.MAESTRO_PD_PRESTAMOS_COMP ParPD
                      WHERE ParPD.TIPO_ENTIDAD       = VV_ENTIDAD
                        AND ParPD.PROD_SCORE         = SUBSTR(IN_REC.IN_SUCEPT, 1, 2)
                        AND ParPD.ID_RES             = vv_Id_Res
                        AND ParPD.IN_REFINAN         = IN_REC.IN_REFINAN
                        AND IN_REC.OR_PUNTSCO  BETWEEN ParPD.PUNTSCO_MIN AND ParPD.PUNTSCO_MAX;

                  EXCEPTION
                     WHEN OTHERS THEN
                        VN_PUNTMIN     := 0;
                        VN_PUNTMAX     := 0;
                        VN_PD_ORIGINAL := 0;

                  END;
                  VN_NUMERR:= 52;

                  VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_OR_PUNTSCO)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_OR_PUNTSCO));
                  VN_NUMERR:= 53;

                  -- PD Continua

                  IF IN_REC.IN_SRATIN = 'REFI' THEN
                     VN_PDCONT := VN_PD_ORIGINAL;
                  ELSE
                     VN_PDCONT := LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT); /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                  END IF;

                  -- PD Floor

                  VN_RATINT := 99;
                  VN_PD_FLOOR:= VN_PD_ORIGINAL;
                  VN_NUMERR:= 54;


            /* Calculo de la PD para Tarjetas */
            ELSIF IN_REC.IN_SRATIN IN ('CSORVI', 'SSEM') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'TA' THEN

                  -- comento que este a¿o para tarjetas no se diferencia entre financiadas y no financiadas. Sergio Baena. XCG, 16/01/14
                --  VN_MODELO_CALI := 'T_segm0';
                 VN_NUMERR:= 55;

                  BEGIN
                     SELECT DISTINCT MIN, MAX
                       INTO VN_PUNTMIN, VN_PUNTMAX
                       FROM BAS_MEN.MAESTRO_PD_TARJETAS;
                   --   WHERE SEGMENTO_CALI = VN_MODELO_CALI;
                  EXCEPTION
                       WHEN OTHERS THEN
                            NULL;
                  END;
                  VN_NUMERR:= 56;

                  --Normalizamos la puntuaci¿n del scoring.
                  IF VN_PUNTMIN >= VN_OR_PUNTSCO THEN
                     VN_OR_PUNTSCO := VN_PUNTMIN;
                  ELSIF VN_PUNTMAX <= VN_OR_PUNTSCO THEN
                        VN_OR_PUNTSCO := VN_PUNTMAX;
                  END IF;
                  VN_NUMERR:= 57;

                  VN_PUNTNOR :=  100 * ((VN_OR_PUNTSCO - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
                  VN_NUMERR:= 58;

                  IF VN_PUNTNOR <> 0 THEN
                     VN_NUMERR:= 59;
                     BEGIN
                        SELECT DISTINCT POOL_PD_K, a, b, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                          INTO VN_PD_ORIGINAL, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                          FROM BAS_MEN.MAESTRO_PD_TARJETAS
                         WHERE /*SEGMENTO_CALI = VN_MODELO_CALI
                           AND */PUNT_MIN < VN_PUNTNOR
                           AND PUNT_MAX >= VN_PUNTNOR;
                     EXCEPTION
                          WHEN OTHERS THEN
                               VN_PD_ORIGINAL := 99;
                     END;

                  ELSE
                       VN_NUMERR:= 59;
                       BEGIN
                          SELECT DISTINCT POOL_PD_K, a, b, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                            INTO VN_PD_ORIGINAL, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                            FROM BAS_MEN.MAESTRO_PD_TARJETAS
                           WHERE /*SEGMENTO_CALI = VN_MODELO_CALI
                             AND */PUNT_MIN = VN_PUNTNOR;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                  END IF;
                  VN_NUMERR:= 60;

                  VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
                  VN_PDCONT:= LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT); /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                  VN_NUMERR:= 61;

            ELSIF IN_REC.IN_SRATIN IN ('CSORVI','SSEM') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'KT' THEN       /* Cálculo de la PD para Créditos */
                  VN_NUMERR:= 62;

                  BEGIN
                     SELECT DISTINCT MIN, MAX
                       INTO VN_PUNTMIN, VN_PUNTMAX
                       FROM BAS_MEN.MAESTRO_PD_CREDITOS;
                      --WHERE SEGMENTO_CALI = 'K_segm0';
                  EXCEPTION
                       WHEN OTHERS THEN
                            NULL;
                  END;
                  VN_NUMERR:= 63;

                  --Normalizamos la puntuaci¿n del scoring.
                  IF VN_PUNTMIN >= VN_OR_PUNTSCO THEN
                     VN_OR_PUNTSCO := VN_PUNTMIN;
                  ELSIF VN_PUNTMAX <= VN_OR_PUNTSCO THEN
                        VN_OR_PUNTSCO := VN_PUNTMAX;
                  END IF;
                  VN_NUMERR:= 64;

                  VN_PUNTNOR :=  100 * ((VN_OR_PUNTSCO - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
                  VN_NUMERR:= 65;

                  IF VN_PUNTNOR <> 0 THEN
                     VN_NUMERR:= 66;
                     BEGIN
                        SELECT DISTINCT POOL_PD_K, a, b, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                          INTO VN_PD_ORIGINAL, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                          FROM BAS_MEN.MAESTRO_PD_CREDITOS
                         WHERE /*SEGMENTO_CALI = 'K_segm0'
                           AND */PUNT_MIN < VN_PUNTNOR
                           AND PUNT_MAX >= VN_PUNTNOR;
                     EXCEPTION
                          WHEN OTHERS THEN
                               VN_PD_ORIGINAL := 99;
                     END;
                  ELSE
                       VN_NUMERR:= 67;
                       BEGIN
                          SELECT DISTINCT POOL_PD_K, a, b, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                            INTO VN_PD_ORIGINAL, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                            FROM BAS_MEN.MAESTRO_PD_CREDITOS
                           WHERE /*SEGMENTO_CALI = 'K_segm0'
                             AND */PUNT_MIN = VN_PUNTNOR;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                  END IF;
                  VN_NUMERR:= 68;

                  VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
                  VN_NUMERR:= 69;
                  VN_PDCONT:= LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT); /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */

            ELSIF IN_REC.IN_SRATIN IN ('CRVI', 'CRDE','CRIDE', 'BLQR', 'CEDM') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'EF' THEN /* Calculo de la PD para Entidades Financieras */  -- Rating inconsistente TAR-259 /17/12/19      --05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso
                  VN_NUMERR:= 70;

                 IF IN_REC.IN_SRATIN = 'CEDM' THEN /* Si la pd esta en el maestro de pd c¿lulas cam se toma esta. 23/07/13*/
                    VN_NUMERR:= 71;
                    BEGIN
                       SELECT PDFIN
                         INTO VN_PD_ORIGINAL
                         FROM BAS_MEN.PD_CEDULAS_CAM
                        WHERE OR_COISIN = in_rec.or_coisin;
                    EXCEPTION
                         WHEN OTHERS THEN
                              VN_PD_ORIGINAL := 99;
                    END;
                    VN_NUMERR:= 72;

                 ELSIF IN_REC.IN_SRATIN = 'BLQR' THEN /*Con el Ratint final obtenemos la PD, excepto para bloqueos que se obtiene la peor. XCG, 4/07/13      */
                       VN_NUMERR:= 73;

                       BEGIN
                          SELECT MAX(POOL_PD)
                            INTO VN_PD_ORIGINAL
                            FROM BAS_MEN.MAESTRO_PD_EEFF;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_ORIGINAL := 99;
                       END;

                 ELSE
                       -- OBTENCION PD EEFF.
                       VN_NUMERR:= 74;

                       BEGIN
                         SELECT DISTINCT POOL_PD
                           INTO VN_PD_ORIGINAL
                           FROM BAS_MEN.MAESTRO_PD_EEFF
                          WHERE PUNTMIN <= in_rec.OR_RATINT
                            AND PUNTMAX >= in_rec.OR_RATINT;
                      EXCEPTION
                           WHEN OTHERS THEN
                                VN_PD_ORIGINAL := 99;
                       END;
                 END IF;


                 VN_PDCONT:= VN_PD_ORIGINAL;

                 VN_NUMERR:= 75;

              END IF;
           
        /* INI HDEV-107786 Nuevos calibrados */
        IF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN
           VN_NUMERR:=75;
         /*BUSCO RATING*/
            BEGIN
              Select MODELO,TIPRAT
                INTO VN_MODELO, VN_TIPRAT
                FROM BAS_MEN.MAESTRO_MODELO_RATING
               WHERE MODRAT=IN_REC.OR_MODRAT0;
            EXCEPTION
            WHEN OTHERS THEN
                         VN_MODELO := NULL;
                         VN_TIPRAT:=0;
            END;
            VN_NUMERR:=76;
           
            BEGIN
                VN_NUMERR:=77;
                CASE
                    WHEN IN_REC.IN_SRATIN='CURA' THEN
                         VN_NUMERR:=78;
                         CASE
                            ----  CURA ----
                            WHEN VV_OR_SEGRIE IN ('E0','E1','E3DS','E3R','E4DS','E4R','PAT', 'P1', 'P2', 'P3') AND  IN_REC.OR_SEGFIC2 <> 'PA005' THEN

                                  VN_NUMERR:=79;
                                  VN_IN_SRATIN_2:='CURA';
                                  VN_PD_FLOOR:=F_ASIGNACION_PD('CURA',VV_OR_SEGRIE);
                                  VN_NUMERR:=80;
                                  VN_PD_ORIGINAL := VN_PD_FLOOR;

                            WHEN VV_OR_SEGRIE='E2' THEN
                                  VN_NUMERR:=81;
                                  CASE
                                      WHEN IN_REC.IN_REFINAN = 1 THEN
                                           ----CURA REFI ----
                                           VN_IN_SRATIN_2:='CURAREFI';
                                           VN_NUMERR:=82;
                                           VN_PD_FLOOR:=F_ASIGNACION_PD('CURAREFI',VV_OR_SEGRIE);
                                           VN_NUMERR:=83;
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                      WHEN IN_REC.OR_CLAVISO IN (9050,9052,9053,9054, 9051) THEN
                                           VN_NUMERR:=84;
                                           ---- CURA BLOQUEO ----
                                           VN_IN_SRATIN_2:='CURABLQR';
                                           VN_PD_FLOOR:=F_ASIGNACION_PD('CURABLQR',VV_OR_SEGRIE);
                                           VN_NUMERR:=85;
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                      ELSE
                                          ---- CURA RESTO NORMAL ----
                                          VN_NUMERR:=86;
                                          VN_IN_SRATIN_2:='CURARESTO';
                                          VN_PD_FLOOR:=F_ASIGNACION_PD('CURARESTO',VV_OR_SEGRIE);
                                          VN_NUMERR:=87;
                                          VN_PD_ORIGINAL := VN_PD_FLOOR;
                                  END CASE;
                             ELSE
                                  ---- CURA CORPORATES Y GRUPOS ----
                                  VN_NUMERR:=87;
                                BEGIN
                                      VN_NUMERR:=88;
                                      VN_MES:= FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.FI_MESCURA, 'YYYYMM'))+1);
                                      VN_NUMERR:=89;

                                      IF VN_MES < 0 THEN
                                       VN_MES:=0;
                                      ELSIF VN_MES > 12 THEN
                                        VN_MES:=12;
                                      END IF;
                                      VN_NUMERR:=90;

                                     -- Cambian los l¿mites de la PD de Cura. XCG 25/07/11.
                                     BEGIN
                                      SELECT LIMITE
                                        INTO VV_LIMITE
                                        FROM BAS_MEN.LIMITES_CURA
                                       WHERE SEGFIC = CASE
                                                 when SUBSTR(IN_REC.OR_SEGFIC2,1,2) in ('HO', 'PA') then /* XCG, holdings y patrimoniales se identifican por el segfic y no por el campo de personas. 201609*/
                                                    'PA'
                                                 when IN_REC.OR_SEGFIC2 in ('MT', 'UT') then
                                                    case
                                                       when IN_REC.OR_SEGFIC IN ('E3', 'E4', 'E5') THEN
                                                        IN_REC.OR_SEGFIC||IN_REC.SECTOR
                                                       ELSE
                                                         IN_REC.OR_SEGFIC
                                                    end
                                                 when SUBSTR(IN_REC.OR_SEGFIC2,1,2) = 'NC' THEN
                                                    'E'||SUBSTR(IN_REC.OR_SEGFIC2,3,3)
                                                 WHEN IN_REC.OR_SEGFIC2 = 'GR' THEN
                                                    SUBSTR(IN_REC.OR_SEGFIC2,1,2)||IN_REC.SECTOR
                                                 else
                                                    IN_REC.OR_SEGFIC2
                                                 end;
                                     EXCEPTION
                                        WHEN OTHERS THEN
                                           VV_LIMITE:= 0;
                                     END;
                                     VN_NUMERR:=91;

                                     BEGIN
                                      SELECT EAD
                                        INTO vn_ead
                                        FROM BAS_MEN.MAESTRO_EAD_CURA
                                       WHERE OR_TITULARITAT = IN_REC.OR_TITULARITAT
                                         AND SEGMENTO = 'EMP';
                                     EXCEPTION
                                        WHEN OTHERS THEN
                                          VN_NUMERR:=92;
                                          BEGIN
                                            SELECT EAD
                                            INTO vn_ead
                                            FROM BAS_MEN.MAESTRO_EAD_CURA_OFEX
                                             WHERE OR_NUMOFI = IN_REC.OR_NUMOFI
                                             AND OR_CTACLI = IN_REC.OR_CTACLI
                                             AND SEGMENTO = 'EMP';
                                          EXCEPTION
                                            WHEN OTHERS THEN
                                               NULL;
                                          END;
                                     END;
                                     VN_NUMERR:=93;

                                     -- 29/03/2019 - Incremento y limitación de PD exposiciones E0-E1-E2-E3 - Se añade el TIPO 'PYME'
                                     BEGIN
                                      SELECT DECODE(SIGN(vn_ead-VV_LIMITE),1, ALTO, BAJO)
                                        INTO VN_PD_FLOOR
                                        FROM BAS_MEN.MAESTRO_PD_EMPRESAS_CURA
                                       WHERE OR_MES = VN_MES
                                         AND TIPO = CASE
                                                 WHEN SUBSTR(IN_REC.IN_SUCEPT,1,2)  IN ('PR', 'PU', 'PT') THEN 'PROM'
                                                 WHEN SUBSTR(IN_REC.OR_SEGFIC2,1,2) IN ('E0', 'E1', 'E2', 'E3')     THEN 'PYME'
                                                 ELSE
                                                  'EMPR'
                                              END;
                                     EXCEPTION
                                        WHEN OTHERS THEN
                                           VN_PD_FLOOR:= 99;
                                     END;
                                     VN_PD_ORIGINAL := VN_PD_FLOOR;
                                     VN_NUMERR:=94;
                                END;

                         END CASE;
                ELSE
                  ---- NO CURA --
                  VN_NUMERR:=95;
                  CASE
                     WHEN IN_REC.IN_SRATIN IN('REFI','CRDER','SRR','SRR_INC','SRR_CAD','SRR_FEC')  AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204')  THEN
                           ----'REFI' ----
                           VN_NUMERR:=96;
                          IF SUBSTR(VV_OR_SEGRIE,1,2) IN ('GR', 'E5', 'P5') OR VV_OR_SEGRIE = 'PA005' THEN   /* la PD de corporates y grupos de refis XCG 03/2016.*/
                                VN_NUMERR:= 97;
                               IF VV_OR_SEGRIE = 'GRP' THEN
                                  VN_MODELO_CALI:= 'GR_PROM';
                               ELSIF VV_OR_SEGRIE = 'GR' THEN
                                     VN_MODELO_CALI:= 'GR_EMPR';
                               ELSIF SUBSTR(VV_OR_SEGRIE,1,3) = 'NC5' THEN
                                     VN_MODELO_CALI:= 'E5';
                               ELSIF VV_OR_SEGRIE <> 'PA005' THEN
                                     VN_MODELO_CALI:= SUBSTR(VV_OR_SEGRIE,1,2);
                               ELSE
                                     VN_MODELO_CALI:= VV_OR_SEGRIE;
                               END IF;
                                
                               BEGIN
                                 SELECT PD_REG, PD_REG
                                   INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                                   FROM BAS_MEN.PD_CORPORATES_GRUPOS
                                  WHERE SEG = VN_MODELO_CALI
                                    AND TIPO = 'REFI'
                                    AND PUNT_MIN <= IN_REC.OR_PUNT0
                                    AND PUNT_MAX >= IN_REC.OR_PUNT0;
                               EXCEPTION
                                     WHEN OTHERS THEN
                                          VN_PD_FLOOR := 99;
                               END;
        
                               VN_PDCONT := VN_PD_FLOOR;

                          ELSE
                              VN_NUMERR:=100;
                              CASE
                                   WHEN VV_OR_SEGRIE IN ('E3DS','E3R','E4DS','E4R','PAT', 'P1', 'P2', 'P3') THEN
                                        ---- REFI REFI ----
                                        VN_NUMERR:=101;
                                        VN_IN_SRATIN_2:='REFI';
                                        VN_PD_FLOOR:=F_ASIGNACION_PD('REFI',VV_OR_SEGRIE);
                                        VN_NUMERR:=102;
                                        VN_PD_ORIGINAL := VN_PD_FLOOR;
                                   --Aqui solo entran VV_OR_SEGRIE IN ('E0','E1','E2')  THEN
                                   ELSE
                                        VN_NUMERR:=103;
                                        CASE
                                              WHEN IN_REC.OR_CLAVISO IN (9050,9052,9053,9054, 9051) THEN --29/04/2022 14/06
                                                  ---- REFI BLOQUEO----
                                                  VN_NUMERR:=104;
                                                  VN_IN_SRATIN_2:='REFIBLQR';
                                                  VN_PD_FLOOR:=F_ASIGNACION_PD('REFIBLQR',VV_OR_SEGRIE);
                                                  VN_NUMERR:=105;
                                                  VN_PD_ORIGINAL := VN_PD_FLOOR;
                                              WHEN SUBSTR(IN_REC.IN_SUCEPT,3,4) IN ('FACL', 'DIVR', 'DESC', 'AVAL','TARG') THEN
                                                  ---- REFI NO SUCEPT ----
                                                  VN_NUMERR:=106;
                                                  VN_IN_SRATIN_2:='REFINS';
                                                  VN_PD_FLOOR:=F_ASIGNACION_PD('REFINS',VV_OR_SEGRIE);
                                                  VN_NUMERR:=107;
                                                  VN_PD_ORIGINAL := VN_PD_FLOOR;
                                              WHEN IN_REC.IN_SRATIN = 'REFI' THEN
                                              ---- REFI ESACALA MAESTRA ----
                                                  VN_NUMERR:=108;
                                                  VN_IN_SRATIN_2:=IN_REC.IN_SRATIN ;
                                                  VN_TIPRAT:=99;--para poder asignar parametros de refi
                                                  VN_PD_FLOOR:=F_CALCULO_ESCALA_MAESTRA(PN_FECPRO, IN_REC.OR_TITULARITAT,VV_OR_SEGRIE, VN_MODELO, VN_TIPRAT,IN_REC.OR_PUNT0,VN_BUCKET,VN_Z);
                                                  VN_PD_ORIGINAL := VN_PD_FLOOR;
                                                  VN_NUMERR:=109;
                                              WHEN IN_REC.IN_SRATIN ='CRDER' THEN
                                                  VN_NUMERR:=138;
                                                  VN_IN_SRATIN_2:=IN_REC.IN_SRATIN;
                                                  VN_TIPRAT:=99; --para poder asignar parametros de refi
                                                  VN_T:=MONTHS_BETWEEN ( TRUNC( TO_DATE(SUBSTR(PN_FECPRO,1,6),'YYYYMM') ) ,TRUNC (TO_DATE(SUBSTR(IN_REC.OR_FECPUN0,1,6),'YYYYMM') ) );
                                                  VN_NUMERR:=139;
                                                  --Busco la fecha del depurado
                                                  BEGIN
                                                    SELECT MAX(ID_MES)
                                                      INTO VN_FEC_DEPURADO
                                                      FROM BAS_MEN.SITUACIO_RATINGS
                                                     WHERE CODTIT=IN_REC.OR_TITULARITAT;
                                                  EXCEPTION
                                                    WHEN OTHERS THEN
                                                     VN_FEC_DEPURADO:=0;
                                                  END;
                                                  IF VN_FEC_DEPURADO IS NULL THEN --Para las ofex que no encontramos la fecha cuando pasan a depurados, asignamos la peor PD
                                                      VN_PD_FLOOR:=F_ASIGNACION_PD('UNRATED',VV_OR_SEGRIE);
                                                      VN_PD_ORIGINAL := VN_PD_FLOOR;
                                                  ELSE
                                                      VN_NUMERR:=140;
                                                      VN_MES_DEPURADO:= MONTHS_BETWEEN ( TRUNC( TO_DATE(SUBSTR(PN_FECPRO,1,6),'YYYYMM') ), TRUNC (TO_DATE(VN_FEC_DEPURADO,'YYYYMM') ) );
                                                      VN_NUMERR:=141;
                                                      CASE
                                                            WHEN VV_OR_SEGRIE IN ('E0','E1') THEN
                                                               VN_BUCKET_PEOR:=20;
                                                            WHEN VV_OR_SEGRIE='E2' THEN
                                                               VN_BUCKET_PEOR:=20;
                                                            WHEN VV_OR_SEGRIE='E3DS' THEN
                                                               VN_BUCKET_PEOR:=20;
                                                            WHEN VV_OR_SEGRIE='E3R' THEN
                                                               VN_BUCKET_PEOR:=20;
                                                            WHEN VV_OR_SEGRIE in ('E4DS','E4R','PAT')  THEN
                                                               VN_BUCKET_PEOR:=20;
                                                            WHEN VV_OR_SEGRIE in ('P1','P2','P3')  THEN
                                                               VN_BUCKET_PEOR:=6;
                                                            ELSE
                                                             VN_BUCKET_PEOR:=0;
                                                      END CASE;
                                                      VN_NUMERR:=142;
                                                      --calculo el pd oudated para obtener el bucket original
                                                      VN_PD_OUTDATED:=F_CALCULO_ESCALA_MAESTRA(PN_FECPRO, IN_REC.OR_TITULARITAT,VV_OR_SEGRIE, VN_MODELO, VN_TIPRAT,IN_REC.OR_PUNT0,VN_BUCKET_ORIG,VN_Z);
                                                      VN_NUMERR:=143;
                                                      --Calculo el Bucket
                                                      IF (24-VN_MES_DEPURADO) = 0 THEN
                                                         IF VV_OR_SEGRIE IN ('E0','E1','E2','E3DS','E3R','E4DS','E4R','PAT')
                                                            THEN VN_BUCKET:=20;
                                                         ELSE
                                                            VN_BUCKET:=6;
                                                         END IF;
                                                      ELSE
                                                         VN_BUCKET:=CEIL(VN_BUCKET_ORIG+((VN_T-VN_MES_DEPURADO)/(24-VN_MES_DEPURADO))* (VN_BUCKET_PEOR-VN_BUCKET_ORIG));
                                                         END IF;
                                                      VN_NUMERR:=144;
                                                      --asigno el pd segun el bucket hallado
                                                      VN_PD_FLOOR:=F_ASIG_PD_X_BUCKET(VN_BUCKET,VV_OR_SEGRIE,NULL);
                                                      VN_PD_ORIGINAL := VN_PD_FLOOR;
                                                      END IF;
                                              WHEN IN_REC.IN_SRATIN IN('SRR','SRR_INC','SRR_CAD','SRR_FEC') THEN
                                                  VN_NUMERR:=145;
                                                  VN_IN_SRATIN_2:=IN_REC.IN_SRATIN;
                                                  VN_PD_FLOOR:=F_ASIGNACION_PD('UNRATED',VV_OR_SEGRIE);
                                                  VN_NUMERR:=146;
                                                  VN_PD_ORIGINAL := VN_PD_FLOOR;
                                        END CASE;

                                   END CASE;

                          END IF;
                          VN_NUMERR:=111;

                     WHEN SUBSTR(IN_REC.IN_SUCEPT,3,4) IN ('FACL', 'DIVR', 'DESC', 'AVAL','TARG')  AND  IN_REC.IN_SRATIN='BLQR'  
                     AND VV_OR_SEGRIE IN ('E0','E1','E2','E3DS','E3R','E4DS','E4R','PAT', 'P1', 'P2', 'P3')  AND IN_REC.OR_SEGFIC2 <> 'PA005' THEN
                         ---- BLOQUEO NO SUCEP----
                         VN_NUMERR:=118;
                         VN_IN_SRATIN_2:='BLQRNS';
                         VN_PD_FLOOR:=F_ASIGNACION_PD('BLQRNS',VV_OR_SEGRIE);
                         VN_NUMERR:=119;
                         VN_PD_ORIGINAL := VN_PD_FLOOR;
                     WHEN IN_REC.IN_SRATIN='BLQR' AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) <> 'EF' THEN
                             ---- BLOQUEO RESTO ----
                          VN_NUMERR:=120;
                          BEGIN
                              VN_NUMERR:= 121;

                              VN_CICLOA1      := 0;
                              VN_CICLOB1      := 0;
                              VN_PUNTMIN      := 0;
                              VN_PUNTMAX      := 100;
                              VN_PUNTNOR      := 0;
                              VN_PD_FLOOR     := 99;
                              VN_PD_ORIGINAL  := 99;
                              VN_MODELO_CALI  := '?';
                              VN_PD_AJUSCIC   := 0;
                              VN_TIP_RAT      := 0;

                              IF SUBSTR(VV_OR_SEGRIE,1,2) IN ('GR', 'E5', 'P5') OR VV_OR_SEGRIE = 'PA005' THEN   /* La PD de corporates y grupos por modelo  08/09/2017*/
                                              VN_NUMERR:=123;

                                  IF VV_OR_SEGRIE = 'GRP' THEN
                                       VN_MODELO_CALI:= 'GR_PROM';
                                    ELSIF VV_OR_SEGRIE = 'GR' THEN
                                          VN_MODELO_CALI:= 'GR_EMPR';
                                    ELSIF VV_OR_SEGRIE <> 'PA005' THEN
                                           VN_MODELO_CALI:= SUBSTR(VV_OR_SEGRIE,1,2);
                                    ELSE
                                           VN_MODELO_CALI:=   VV_OR_SEGRIE;
                                  END IF;
                                  VN_NUMERR:=124;

                                  BEGIN
                                       SELECT PD_REG
                                         INTO VN_PD_FLOOR
                                         FROM BAS_MEN.PD_CORPORATES_GRUPOS
                                        WHERE SEG = VN_MODELO_CALI
                                          AND TIPO = 'BLQR';
                                            --AND PUNT_MIN <= IN_REC.OR_PUNT0
                                            --AND PUNT_MAX >= IN_REC.OR_PUNT0;
                                  EXCEPTION
                                            WHEN OTHERS THEN
                                                 VN_PD_FLOOR := 99;
                                  END;
                                  VN_PD_ORIGINAL := VN_PD_FLOOR;
                              ELSE
                                  VN_NUMERR:=125;
                                  VN_IN_SRATIN_2:='BLQRRESTO';
                                  VN_PD_FLOOR:=F_ASIGNACION_PD('BLQRRESTO',VV_OR_SEGRIE);
                                  VN_NUMERR:=126;
                                  VN_PD_ORIGINAL := VN_PD_FLOOR;
                              END IF;
                          END;
                     WHEN IN_REC.IN_SRATIN IN ('CRVI','MORA','BLQRM') AND VV_OR_SEGRIE IN ('E0','E1','E2','E3DS','E3R','E4DS','E4R','PAT', 'P1', 'P2', 'P3') AND IN_REC.OR_SEGFIC2 <> 'PA005' THEN
                                 VN_NUMERR:=127;
                                 CASE
                                      WHEN VV_OR_SEGRIE IN ('E4DS','E4R') AND VN_MODELO=('TR3_'||VV_OR_SEGRIE) THEN 
                                           ---- Normal TR3 ----
                                           VN_NUMERR:=128;
                                           VN_IN_SRATIN_2:=IN_REC.IN_SRATIN||'_TR3';
                                           VN_PD_FLOOR:=F_ASIGNACION_PD('NORMTR3',VV_OR_SEGRIE);
                                           VN_NUMERR:=129;
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                      WHEN VV_OR_SEGRIE IN ('E3DS','E3R','E4DS','E4R','PAT') AND VN_MODELO IN('TR1_'||VV_OR_SEGRIE, 'TR2_'||VV_OR_SEGRIE) THEN 
                                           ---- Normal TR1+TR2 ----
                                           VN_NUMERR:=130;
                                           VN_IN_SRATIN_2:=IN_REC.IN_SRATIN||'_TR1TR2';
                                           VN_PD_FLOOR:=F_ASIGNACION_PD('NORMTR1TR2',VV_OR_SEGRIE);
                                           VN_NUMERR:=131;
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                      ELSE
                                           ---- ESCALA MAESTRA--;
                                           VN_NUMERR:=132;
                                           VN_IN_SRATIN_2:=IN_REC.IN_SRATIN;
                                           VN_PD_FLOOR:=F_CALCULO_ESCALA_MAESTRA(PN_FECPRO, IN_REC.OR_TITULARITAT,VV_OR_SEGRIE, VN_MODELO, VN_TIPRAT,IN_REC.OR_PUNT0,VN_BUCKET,VN_Z);
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                           VN_NUMERR:=133;
                                      END CASE;
                     
                     WHEN IN_REC.IN_SRATIN IN ('SR_CAD','SR_FEC','SR','SR_INC') AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') 
                     AND VV_OR_SEGRIE IN ('E0','E1','E2','E3DS','E3R','E4DS','E4R','PAT', 'P1', 'P2', 'P3') AND IN_REC.OR_SEGFIC2 <> 'PA005' THEN
                     ---- UNRATED ----
                         VN_NUMERR:=136;
                         VN_IN_SRATIN_2:=IN_REC.IN_SRATIN;
                         VN_PD_FLOOR:=F_ASIGNACION_PD('UNRATED',VV_OR_SEGRIE);
                         VN_NUMERR:=137;
                         VN_PD_ORIGINAL := VN_PD_FLOOR;
                     WHEN IN_REC.IN_SRATIN = 'CRDE' AND VV_OR_SEGRIE IN ('E0','E1','E2','E3DS','E3R','E4DS','E4R','PAT', 'P1', 'P2', 'P3') AND IN_REC.OR_SEGFIC2 <> 'PA005' THEN
                     ----'OUTDATED'----
                         VN_IN_SRATIN_2:=IN_REC.IN_SRATIN;
                                 CASE
                                      WHEN VV_OR_SEGRIE IN ('E4DS','E4R') AND VN_MODELO=('TR3_'||VV_OR_SEGRIE) THEN
                                           VN_PD_FLOOR:= F_ASIGNACION_PD('NORMTR3',VV_OR_SEGRIE);
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                      WHEN VV_OR_SEGRIE IN ('E3DS','E3R','E4DS','E4R','PAT') AND VN_MODELO IN('TR1_'||VV_OR_SEGRIE, 'TR2_'||VV_OR_SEGRIE) THEN
                                           VN_PD_FLOOR:= F_ASIGNACION_PD('NORMTR1TR2',VV_OR_SEGRIE);
                                           VN_PD_ORIGINAL := VN_PD_FLOOR;
                                      ELSE
                                           VN_NUMERR:=138;
                                           --representa los meses transcurridos desde que se calculó el rating
                                           VN_T:=MONTHS_BETWEEN ( TRUNC( TO_DATE(SUBSTR(PN_FECPRO,1,6),'YYYYMM') ) ,TRUNC (TO_DATE(SUBSTR(IN_REC.OR_FECPUN0,1,6),'YYYYMM') ) );
                                           VN_NUMERR:=139;
                                           --Busco la fecha del depurado
                                           BEGIN
                                             SELECT MAX(ID_MES)
                                              INTO VN_FEC_DEPURADO
                                            FROM BAS_MEN.SITUACIO_RATINGS
                                            WHERE CODTIT=IN_REC.OR_TITULARITAT;
                                           EXCEPTION
                                             WHEN OTHERS THEN
                                               VN_FEC_DEPURADO:=0;
                                           END;
                                           IF VN_FEC_DEPURADO IS NULL THEN
                                              VN_PD_FLOOR:=F_ASIGNACION_PD('UNRATED',VV_OR_SEGRIE);
                                              VN_PD_ORIGINAL := VN_PD_FLOOR;
                                           ELSE
                                              VN_NUMERR:=140;
                                              --Realizo el calculo del mes depurado
                                              VN_MES_DEPURADO:= MONTHS_BETWEEN ( TRUNC( TO_DATE(SUBSTR(PN_FECPRO,1,6),'YYYYMM') ), TRUNC (TO_DATE(VN_FEC_DEPURADO,'YYYYMM') ) );
                                              VN_NUMERR:=141;
                                               CASE
                                                  WHEN VV_OR_SEGRIE IN ('E0','E1') THEN
                                                     VN_BUCKET_PEOR:=20;
                                                  WHEN VV_OR_SEGRIE='E2' THEN
                                                     VN_BUCKET_PEOR:=20;
                                                  WHEN VV_OR_SEGRIE='E3DS' THEN
                                                     VN_BUCKET_PEOR:=20;
                                                  WHEN VV_OR_SEGRIE='E3R' THEN
                                                     VN_BUCKET_PEOR:=20;
                                                  WHEN VV_OR_SEGRIE in ('E4DS','E4R','PAT')  THEN
                                                     VN_BUCKET_PEOR:=20;
                                                  WHEN VV_OR_SEGRIE in ('P1','P2','P3')  THEN
                                                     VN_BUCKET_PEOR:=6;
                                                  ELSE
                                                   VN_BUCKET_PEOR:=0;
                                               END CASE;
                                              VN_NUMERR:=142;
                                              --calculo el pd oudated para obtener el bucket original
                                              VN_PD_OUTDATED:=F_CALCULO_ESCALA_MAESTRA(PN_FECPRO, IN_REC.OR_TITULARITAT,VV_OR_SEGRIE, VN_MODELO, VN_TIPRAT,IN_REC.OR_PUNT0,VN_BUCKET_ORIG,VN_Z);
                                              VN_NUMERR:=143;
                                              IF
                                                 (24-VN_MES_DEPURADO) = 0 THEN
                                                     IF VV_OR_SEGRIE IN ('E0','E1','E2','E3DS','E3R','E4DS','E4R','PAT') THEN
                                                          VN_BUCKET:=20;
                                                     ELSE
                                                          VN_BUCKET:=6;
                                                     END IF;
                                              ELSE
                                                 --Calculo el Bucket
                                                 VN_BUCKET:=CEIL(VN_BUCKET_ORIG+((VN_T-VN_MES_DEPURADO)/(24-VN_MES_DEPURADO))* (VN_BUCKET_PEOR-VN_BUCKET_ORIG));
                                              END IF;
                                              VN_NUMERR:=144;
                                              --asigno el pd segun el bucket hallado
                                              VN_PD_FLOOR:=F_ASIG_PD_X_BUCKET(VN_BUCKET,VV_OR_SEGRIE,NULL);
                                              VN_PD_ORIGINAL := VN_PD_FLOOR;
                                           END IF;
                                 END CASE;
                                 VN_NUMERR:=145;
                     ELSE
                     -- --'OTROS --
                     VN_NUMERR:=146;
                  END CASE;
            END CASE;
            
            VN_PDCONT:=-1;   --le agrego para empresas VN_PDCONT:=-1;
           
            END;
        /* FIN HDEV-107786 Nuevos calibrados */

        /* CCAA */
        ELSIF IN_REC.IN_SEGMBSINI IN ('101', '102', '002', '017') THEN
             /* no Empresas */
              VN_NUMERR:=147;
              IF IN_REC.IN_SRATIN = 'CURA' THEN
                 --CURA NO EMPRESAS --
                  VN_NUMERR:=148;
                  VN_MES:= FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.FI_MESCURA, 'YYYYMM'))+1);
                  IF VN_MES < 0 THEN
                     VN_MES:=0;
                  ELSIF VN_MES > 12 THEN
                        VN_MES:=12;
                  END IF;

                  BEGIN
                       SELECT LIMITE
                         INTO VV_LIMITE
                         FROM BAS_MEN.LIMITES_CURA
                        WHERE SEGFIC = 'CA';
                  EXCEPTION
                         WHEN OTHERS THEN
                              VV_LIMITE:= 0;
                  END;
                  VN_NUMERR:=149;

                  BEGIN
                       SELECT EAD
                         INTO vn_ead
                         FROM BAS_MEN.MAESTRO_EAD_CURA
                        WHERE OR_TITULARITAT = IN_REC.OR_TITULARITAT
                          AND SEGMENTO = 'CA';
                  EXCEPTION
                         WHEN OTHERS THEN
                             VN_NUMERR:=150;
                              BEGIN
                                 SELECT EAD
                                   INTO vn_ead
                                   FROM BAS_MEN.MAESTRO_EAD_CURA_OFEX
                                  WHERE OR_NUMOFI = IN_REC.OR_NUMOFI
                                    AND OR_CTACLI = IN_REC.OR_CTACLI
                                    AND SEGMENTO = 'CA';
                              EXCEPTION
                                   WHEN OTHERS THEN
                                        NULL;
                              END;
                  END;
                  VN_NUMERR:=151;

                   BEGIN
                       SELECT DECODE(SIGN(vn_ead-VV_LIMITE),1, ALTO, BAJO)
                         INTO VN_PD_FLOOR
                         FROM BAS_MEN.MAESTRO_PD_CCAA_CURA
                        WHERE OR_MES = VN_MES;
                   EXCEPTION
                         WHEN OTHERS THEN
                              VN_PD_FLOOR:= 99;
                   END;

                   VN_PDCONT := VN_PD_FLOOR;
                   VN_PD_ORIGINAL := VN_PD_FLOOR;

              ELSIF IN_REC.IN_SRATIN in ('REFI', 'CRDER', 'SRR', 'SRR_CAD', 'SRR_INC', 'SRR_FEC')   AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') THEN
                    --varios
                    VN_NUMERR:=152;
                    VN_CICLOA1      := 0;
                    VN_CICLOB1      := 0;
                    VN_PUNTMIN      := 0;
                    VN_PUNTMAX      := 100;
                    VN_PUNTNOR      := 0;
                    VN_PD_FLOOR     := 99;
                    VN_PD_ORIGINAL    := 99;
                    VN_MODELO_CALI  := '?';
                    VN_PD_AJUSCIC   := 0;
                    VN_TIP_RAT      := 0;
                    VN_NUMERR:=153;

                    /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */
                    IF substr(IN_REC.IN_SRATIN,1,3) IN ('SRR') THEN

                       BEGIN
                          SELECT max(POOL_PD),max(POOL_PD)
                            INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO = 'REFI';
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_FLOOR := 99;
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT:= VN_PD_FLOOR;

                    --outrated
                    ELSIF IN_REC.IN_SRATIN = 'CRDER' THEN

                         VN_MES:= GREATEST(1,24-FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.or_fecpun0, 'YYYYMMDD'))));-- meses_para_unrated.

                       BEGIN
                           SELECT DISTINCT MINIMO, MAXIMO, A, B, MULTIPLICADOR_PDCONT
                             INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                             FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                            WHERE TIPO_RATING = 6
                                AND TIPO = 'REFI';
                       EXCEPTION
                             WHEN OTHERS THEN
                                  NULL;
                       END;
 
                       /* Normalizacion de la PD */
                       IF VN_PUNTMIN >= VN_OR_PUNT THEN
                          VN_OR_PUNT := VN_PUNTMIN;
                       ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
                          VN_OR_PUNT := VN_PUNTMAX;
                       END IF;
 
                       VN_PUNTNOR :=  100 * ((VN_OR_PUNT - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
 
                       BEGIN
                          SELECT BUCKET
                            INTO VN_BUCKET --bucket origen
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO_RATING = 6
                             AND TIPO = 'REFI'
                             AND PUNTMIN <= VN_PUNTNOR
                             AND PUNTMAX >= VN_PUNTNOR;
                       EXCEPTION
                          WHEN OTHERS THEN
                              VN_BUCKET := 0;
                       END;

                         BEGIN -- obtenemos el número de buckets de un modelo
                             SELECT count(BUCKET), MIN(BUCKET)
                               INTO VN_MAX_BUCKET, VN_MIN_BUCKET
                               FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                              WHERE TIPO = 'REFI';
                          EXCEPTION
                               WHEN OTHERS THEN
                                    VN_MAX_BUCKET:= 0;
                                    VN_MIN_BUCKET:= 0;
                          END;

                          BEGIN
                             SELECT POOL_PD, POOL_PD
                               INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                               FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                              WHERE TIPO = 'REFI'
                                AND BUCKET = GREATEST(VN_MIN_BUCKET,VN_BUCKET - (ceil(VN_MAX_BUCKET/VN_MES))); -- se obtiene la PD final del bucket penalizado
                          EXCEPTION
                               WHEN OTHERS THEN
                                    VN_PD_FLOOR := 99;
                                    VN_PD_ORIGINAL := 99;
                          END;

                    ELSE
                    /* FIN - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */


                        BEGIN
                           SELECT DISTINCT MINIMO, MAXIMO
                             INTO VN_PUNTMIN, VN_PUNTMAX
                             FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                            WHERE TIPO = 'REFI'
                                 AND TIPO_RATING = 6;
                        EXCEPTION
                             WHEN OTHERS THEN
                                  NULL;
                        END;
                       VN_NUMERR:=154;

                       /* Normalizacion de la PD */
                       IF VN_PUNTMIN >= VN_OR_PUNT THEN
                          VN_OR_PUNT := VN_PUNTMIN;
                          ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
                          VN_OR_PUNT := VN_PUNTMAX;
                       END IF;
                       VN_NUMERR:=155;

                       --Obtencion de la PD por tipo de rating 'REFI' y puntuacion.
                       BEGIN
                          SELECT POOL_PD, POOL_PD
                            INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO = 'REFI'
                                AND TIPO_RATING = 6
                             AND PUNTMIN <= VN_OR_PUNT
                             AND PUNTMAX >= VN_OR_PUNT;
                       EXCEPTION
                            WHEN OTHERS THEN
                                 VN_PD_FLOOR := 99;
                                 VN_PD_ORIGINAL := 99;
                       END;

                       VN_PDCONT := VN_PD_ORIGINAL;

                    END IF; /* 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA */

              ELSIF IN_REC.IN_SRATIN = 'BLQR' AND IN_REC.IN_SEGMBS0 NOT IN ('201', '203', '204') AND SUBSTR(IN_REC.IN_SUCEPT,1,2) <> 'EF' THEN
                    VN_NUMERR:=156;
                    VN_CICLOA1      := 0;
                    VN_CICLOB1      := 0;
                    VN_PUNTMIN      := 0;
                    VN_PUNTMAX      := 100;
                    VN_PUNTNOR      := 0;
                    VN_PD_FLOOR     := 99;
                    VN_PD_ORIGINAL    := 99;
                    VN_MODELO_CALI  := '?';
                    VN_PD_AJUSCIC   := 0;
                    VN_TIP_RAT      := 0;
                    VN_NUMERR:=157;
                    BEGIN
                          SELECT POOL_PD, POOL_PD
                            INTO VN_PD_FLOOR, VN_PD_ORIGINAL
                            FROM BAS_MEN.MAESTRO_POOLPD_CCAA
                           WHERE TIPO = 'BLQR';
                    EXCEPTION
                            WHEN OTHERS THEN
                                VN_NUMERR:=158;
                                 VN_PD_FLOOR := 99;
                                 VN_PD_ORIGINAL := 99;
                                 VN_CICLOA1 := 0;
                                 VN_CICLOB1 := 0;
                   END;

                   VN_PDCONT := VN_PD_ORIGINAL;

                   VN_NUMERR:= 159;
            END IF;
        ELSE
            -- not IN ('101', '102', '002', '017') THEN
           /* no Empresas */
            VN_NUMERR:= 160;
             IF IN_REC.IN_SRATIN = 'CURA' THEN
                ---- CURA NO EMPRESAS IN_REC.IN_SEGMBSINI IN (101, 102, 002, 017) ---
                 VN_NUMERR:= 161;
             VN_MES:= FLOOR(MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.FI_MESCURA, 'YYYYMM'))+1);
                  IF VN_MES < 0 THEN
                     VN_MES:=0;
                  ELSIF VN_MES > 12 THEN
                        VN_MES:=12;
                  END IF;
               BEGIN
                      SELECT PD
                        INTO VN_PD_FLOOR
                        FROM BAS_MEN.MAESTRO_PD_EXMOROS_CURA
                       WHERE OR_SEGRIE = VV_OR_SEGRIE
                         AND OR_MES = VN_MES;
                   EXCEPTION
                        WHEN OTHERS THEN
                             VN_PD_FLOOR:= 99;
                   END;
                    VN_NUMERR:= 162;

              VN_PD_ORIGINAL := VN_PD_FLOOR;
              VN_PDCONT      := VN_PD_FLOOR;
            END IF;
      END IF;

       VN_PD_FLOOR:= VN_PD_ORIGINAL;

       /* Aplicacion del suelo a la pd coreps */
       IF VN_PD_FLOOR < 0.0003 THEN
          VN_PD_FLOOR := 0.0003;
       END IF;

       /* Aplicacion del suelo a la pd original */
       IF VN_PD_ORIGINAL < 0.0003 THEN
          VN_PD_ORIGINAL := 0.0001;
       END IF;

       /* Obtencion del ratint a partir de la PD */
       BEGIN
           SELECT RATING
             INTO VN_RATINT
             FROM BAS_MEN.MAESTRO_PD_POOLPD
            WHERE PDMIN <= VN_PD_FLOOR
              AND PDMAX > VN_PD_FLOOR;
       EXCEPTION
             WHEN OTHERS THEN
                  VN_RATINT := 99;
       END;

       VN_OR_PUNTFIN := VN_PUNTNOR;
       VN_NUMERR:= 163;

    -- END IF; -- 201512 SRAT para todas las exposiciones. Fin del if que sólo se haga por SRATING si el método es AIRB.

       -- Calculo de la PD Continua para los no susceptibles.
       IF VN_PDCONT = 99 OR IN_REC.IN_SEGMBS0 IN ('201', '203', '204') THEN

          VV_TROBAT := 'NO';

          ----PARA EL RESTO  DE SEGMENTOS
          IF VV_TROBAT = 'NO' THEN
             IF IN_REC.IN_SEGMBS0 = '201' THEN --Project Finance
                   VN_PDCONT:= 0.1907;
                   IF IN_REC.OR_RATINT >= 2.8 AND IN_REC.OR_RATINT <= 4.2 THEN
                      VN_PDCONT:= 0.0164;
                   ELSIF IN_REC.OR_RATINT  >= 4.3 and IN_REC.OR_RATINT <= 5.2 THEN
                         VN_PDCONT:= 0.008;
                   ELSIF IN_REC.OR_RATINT >= 5.3 AND IN_REC.OR_RATINT <> 99 THEN
                         VN_PDCONT:= 0.0045;
                   END IF;
             ELSIF IN_REC.IN_SEGMBS0 IN ('203', '204') THEN --Real Estate y Object Finance
                   VN_PDCONT:= 0.0238;
             ELSIF IN_REC.IN_SEGMBSINI IN ('011', '012', '013', '014', '015', '016') THEN --Otras instituciones
                   VN_PDCONT := 0.0106;
             ELSIF IN_REC.IN_SEGMBSINI IN ('008', '022', '023', '030', '031', '032', '026', '035', '036', '037', '038') THEN --Soberanos

                   IF NVL(IN_REC.IN_RATSOB, 'NR') IN ('NR', 'SR', '?') THEN
                      BEGIN
                         SELECT DISTINCT RAT_INT
                           INTO IN_REC.IN_RATSOB
                           FROM BAS_MEN.MAESTRO_SOBERANOS
                          WHERE CODI_NUM_PAIS = 724;
                      EXCEPTION
                           WHEN OTHERS THEN
                                NULL;
                      END;
                   END IF;

                   BEGIN
                      SELECT PDCONT
                        INTO VN_PDCONT
                        FROM BAS_MEN.MAESTRO_PDCONT_SOBERANOS
                       WHERE RATING = IN_REC.IN_RATSOB;
                   EXCEPTION
                        WHEN OTHERS THEN
                             VN_PDCONT := 0.0001;
                   END;
             ELSIF IN_REC.IN_SEGMBSINI IN ('001', '004', '024', '025', '033', '039', '040', '041') THEN --Corporaciones Locales
                   VN_PDCONT:= 0.0005;
             ELSIF IN_REC.IN_SEGMBSINI = '107' THEN --Targetas. Nuevas PDs por defecto. JCV 13/02/2015
                   VN_PDCONT:= 0.0152;
                   IF IN_REC.IN_OPER_MIGR = 'CAM' THEN
                        VN_PDCONT:= 0.0375;
                   ELSIF IN_REC.IN_OPER_MIGR ='BMN' then
                        VN_PDCONT:= 0.0375;
                   ELSIF IN_REC.IN_OPER_MIGR = 'BCG' then
                        VN_PDCONT:= 0.0375;
                   ELSIF IN_REC.IN_OPER_MIGR = 'LBI' THEN
                        VN_PDCONT:= 0.0150;
                   END IF;
             ELSIF IN_REC.IN_SEGMBSINI = '103' AND nvl(IN_REC.OR_segfic2, '?') = '?'  THEN --Pr¿stamos Hipotecarios. Nuevas pd¿s por defecto. XCG, 15/01/14

                   VN_PDCONT:= 0.0076;

                   IF IN_REC.IN_OPER_MIGR = 'CAM' THEN
                      VN_PDCONT:= 0.0106;
                   ELSIF IN_REC.IN_OPER_MIGR ='BMN' then
                         VN_PDCONT:= 0.0181;
                   ELSIF IN_REC.IN_OPER_MIGR = 'BCG' then
                         VN_PDCONT:= 0.0362;
                   ELSIF IN_REC.IN_OPER_MIGR = 'LBI' THEN
                         VN_PDCONT:= 0.0434;
                   END IF;

             ELSIF IN_REC.IN_SEGMBSINI = '104' AND nvl(IN_REC.OR_segfic2, '?') = '?' THEN --Pr¿stamos. Nuevas pd¿s por defecto. XCG, 15/01/14

                   VN_PDCONT:= 0.0222;

                   IF IN_REC.IN_OPER_MIGR = 'CAM' THEN
                      VN_PDCONT:= 0.0222;
                   ELSIF IN_REC.IN_OPER_MIGR ='BMN' then
                         VN_PDCONT:= 0.0333;
                   ELSIF IN_REC.IN_OPER_MIGR = 'BCG' then
                         VN_PDCONT:= 0.0666;
                   ELSIF IN_REC.IN_OPER_MIGR = 'LBI' THEN
                         VN_PDCONT:= 0.0666;
                   END IF;
             ELSIF IN_REC.IN_SEGMBSINI = '106' THEN -- Resto Minorista Sc Crédito. Nuevas PDs por defecto. JCV 13/02/2015
                   VN_PDCONT:= 0.0150;
                   IF IN_REC.IN_OPER_MIGR = 'CAM' THEN
                        VN_PDCONT:= 0.0381;
                   ELSIF IN_REC.IN_OPER_MIGR ='BMN' then
                        VN_PDCONT:= 0.0229;
                   ELSIF IN_REC.IN_OPER_MIGR = 'BCG' then
                        VN_PDCONT:= 0.0457;
                   ELSIF IN_REC.IN_OPER_MIGR = 'LBI' THEN
                        VN_PDCONT:= 0.0152;
                   END IF;

             ELSIF IN_REC.IN_SEGMBSINI IN ('007', '018', '021', '028', '029', '034', '045') THEN
                   VN_PDCONT:= 0.0001; --EEFF
             END IF;
          END IF;

       END IF;

       VN_NUMERR:= 164;

       --Calculo de la PD POOL
       IF VN_PD_FLOOR = 99 THEN
          VN_PDPOOL := VN_PDCONT;
       ELSE
            VN_PDPOOL := VN_PD_FLOOR;
       END IF;

       -- Tratamiento Morosos O BLOQUEOS CONTENCIOSOS. PD¿s a 1 y Ratings de capital a 0 --
       IF IN_REC.IN_INDMOR IN ('CT', 'SI') OR IN_REC.IN_SRATIN = 'BLQRM' THEN
          VN_FI_RATCONT := 0;
          VN_RATINT     := 0;
          VN_PDPOOL     := 1;
          VN_PDCONT     := 1;
         -- HDEV-107790 13/05/2022
          IF VN_IN_SRATIN_2 is not null THEN
              IF IN_REC.IN_SRATIN = 'BLQRM'  THEN
                  VN_IN_SRATIN_2 := 'BLQRM';
              ELSE
                  VN_IN_SRATIN_2 := 'MORA';
              END IF;
          END IF;
         /* IF IN_REC.IN_SRATIN IN ('MORA', 'BLQRM') THEN --La PD coreps s¿lo se informa para el m¿todo AIRB. -- 201512 No hace falta modificarlo por marca SRATIN STDA */
          VN_PD_FLOOR := 1;
        --  END IF;
       END IF;

       -- tratamiento PF, RE y OF
       IF IN_REC.IN_SEGMBS0 IN ('201', '203', '204') THEN
          VN_PD_ORIGINAL := 99;
          VN_PD_FLOOR    := 99;
          VN_RATINT      := 99;
       END IF;

                 --C¿lculo del rating de capital continuo --
       BEGIN
        SELECT RATING
          INTO VN_FI_RATCONT
          FROM BAS_MEN.MAESTRO_PD_POOLPD
         WHERE PDMIN < VN_PDCONT
           AND PDMAX >= VN_PDCONT;
       EXCEPTION
            WHEN OTHERS THEN
                 VN_FI_RATCONT := 99;
       END;

       VN_NUMERR:= 165;

       OUT_REC.OR_IDREG       := IN_REC.OR_IDREG;
       OUT_REC.FI_PD_ORIGINAL := VN_PD_ORIGINAL;
       OUT_REC.FI_PD_COREPS   := VN_PD_FLOOR;
       OUT_REC.FI_PDCONT      := VN_PDCONT;
       OUT_REC.FI_PDPOOL      := VN_PDPOOL;
       OUT_REC.FI_EADAIRB     := IN_REC.FI_EADAIRB;
       OUT_REC.FI_EADCONAIRB  := IN_REC.FI_EADCONAIRB;
       OUT_REC.FI_CCFAIRB     := IN_REC.FI_CCFAIRB;
       OUT_REC.FI_RATCON      := VN_FI_RATCONT;
       OUT_REC.IN_RATINT      := VN_RATINT;
       OUT_REC.OR_PUNTFIN     := VN_OR_PUNTFIN;
       OUT_REC.OR_IDMES       := IN_REC.OR_IDMES;
       OUT_REC.IN_FLAG_NUEVA  := VN_FLAG_NUEVA_EMP;
       /* HDEV-107786 Nuevos calibrados */
       OUT_REC.PUNT_UNIFICADA := VN_Z;
       OUT_REC.IN_SRATIN      := IN_REC.IN_SRATIN;
       OUT_REC.IN_SRATIN_2    := VN_IN_SRATIN_2;
       /* HDEV-107786 Nuevos calibrados */
       pipe row(out_rec);

 END LOOP;

 EXCEPTION
   WHEN OTHERS THEN

        RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));

end F_CALCULO_PD;

END;

/


show errors;


/*******************************************************************************************/
/**                                FNC_CALCUL_PD                                          **/
/*******************************************************************************************/

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CALCUL_PD (PV_TABLA   IN  VARCHAR2,
                                           PN_OPC     IN  NUMBER,
                                           PN_FECPRO  IN  NUMBER,
                                           PV_FECHA   IN  NUMBER,
                                           PV_RET1    IN  VARCHAR2,
                                           PV_RET     OUT VARCHAR2) IS

  --Variables locals
  VV_ROWID        VARCHAR2(50);
  VN_COUNT        NUMBER(9);
  VV_MENSAJE      VARCHAR2(255);
  VN_NUMERR       NUMBER(3);

--fla0101 FNC_CALCUL_PD_OLD
PROCEDURE FNC_CALCUL_PD_OLD IS

BEGIN

     VN_NUMERR:= 1;
     INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
            VALUES ('16. FNC_CALCUL_PD_OLD '||PV_TABLA, SYSDATE, 'INICIADO');

      COMMIT;

     VN_NUMERR:= 2;
     VN_COUNT := 0;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EAD_CURA');

    INSERT  /*+ parallel (f 8) */ INTO BAS_MEN.MAESTRO_EAD_CURA f
    SELECT  /*+ full(a) parallel (a 8) */ DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB), SUM(FI_EADAIRB) EAD,
           DECODE(IN_SEGMBSINI, '101','CA', '102', 'CA', '002', 'CA', '017', 'CA','EMP')
      FROM BAS_MEN.BASILEA A
     WHERE FI_ELIMI1 IN ('NO', 'RFNEG', 'SRABS')
       AND IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027','101','102', '002', '017')
       and DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB) <> 0
       and IN_TIPOREG not IN ('OXE', 'OX', 'MMOXE') -- Se excluyen ofex. XCG. 22/06.
       AND OR_ENTITY in (81, 8211)  /* NAV 08/05/20 - TM-1483 - No se tiene que sumar el renting para calcular el limite de la cura */
     GROUP BY DECODE(OR_TITUSCPCB, NULL, OR_TITULARITAT, 0, OR_TITULARITAT, OR_TITUSCPCB),
           DECODE(IN_SEGMBSINI, '101','CA', '102', 'CA', '002', 'CA', '017', 'CA','EMP');

    COMMIT;

     VN_NUMERR:= 3;
    -- Maestro propio de ofex. XCG. 22/06.
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EAD_CURA_OFEX');

    INSERT  /*+ parallel (f 8) */ INTO BAS_MEN.MAESTRO_EAD_CURA_OFEX f
    SELECT  /*+ full(a) parallel (a 8) */ or_numofi, or_ctacli, SUM(FI_EADAIRB) EAD, DECODE(IN_SEGMBSINI, '101','CA', '102', 'CA', '002', 'CA', '017', 'CA','EMP') SEGMENTO
      FROM BAS_MEN.BASILEA A
     WHERE FI_ELIMI1 IN ('NO', 'RFNEG', 'SRABS')
       AND IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027','101','102', '002', '017')
       and IN_TIPOREG IN ('OXE', 'OX', 'MMOXE')
       AND OR_ENTITY in (81, 8211)
     GROUP BY or_numofi, or_ctacli, DECODE(IN_SEGMBSINI, '101','CA', '102', 'CA', '002', 'CA', '017', 'CA','EMP');

    COMMIT;
    VN_NUMERR:= 4;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.maestro_pd_empresas');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.maestro_poolpd_ccaa');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.maestro_pd_empresas_cura');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.maestro_pd_ccaa_cura');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.LIMITES_CURA');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_TARJETAS');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_CREDITOS');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MODELO_RATING');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_EEFF');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_EXMOROS_CURA');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_POOLPD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PD_CEDULAS_CAM');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PD_CORPORATES_GRUPOS');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_REACTIVO');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_PRESTAMOS_COMP');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.FECHA_CALIBRACIONES');
    /* INI HDEV-107786 JRJ */
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SEG_CALIB_PD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_PARAM');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_POOL_EMP');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.IMPAGOS_TITULARIDAD_PD');
    /* FIN HDEV-107786 JRJ */

    INSERT INTO BAS_MEN.maestro_pd_empresas               SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_EMPRESAS_SAS             ;
    INSERT INTO BAS_MEN.maestro_poolpd_ccaa               SELECT * FROM DCRPROP_MENSUAL.MAESTRO_POOLPD_CCAA_SAS             ;
    INSERT INTO BAS_MEN.maestro_pd_empresas_cura          SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_EMPRESAS_CURA_SAS        ;
    INSERT INTO BAS_MEN.maestro_pd_ccaa_cura              SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_CCAA_CURA_SAS            ;
    INSERT INTO BAS_MEN.LIMITES_CURA                      SELECT * FROM DCRPROP_MENSUAL.LIMITES_CURA_SAS                    ;
    INSERT INTO BAS_MEN.MAESTRO_PD_TARJETAS               SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_TARJETAS_SAS             ;
    INSERT INTO BAS_MEN.MAESTRO_PD_CREDITOS               SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_CREDITOS_SAS             ;
    INSERT INTO BAS_MEN.MAESTRO_MODELO_RATING             SELECT * FROM DCRPROP_MENSUAL.MAESTRO_MODELO_RATING_SAS           ;
    INSERT INTO BAS_MEN.MAESTRO_PD_EEFF                   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_EEFF_SAS                 ;
    INSERT INTO BAS_MEN.MAESTRO_PD_EXMOROS_CURA           SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_EXMOROS_CURA_SAS         ;
    INSERT INTO BAS_MEN.MAESTRO_PD_POOLPD                 SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_POOLPD_SAS               ;
    INSERT INTO BAS_MEN.PD_CEDULAS_CAM                    SELECT * FROM DCRPROP_MENSUAL.PD_CEDULAS_CAM_SAS                  ;
    INSERT INTO BAS_MEN.PD_CORPORATES_GRUPOS              SELECT * FROM DCRPROP_MENSUAL.PD_CORPORATES_GRUPOS_SAS            ;
    INSERT INTO BAS_MEN.MAESTRO_PD_REACTIVO               SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_REACTIVO_SAS             ;
    INSERT INTO BAS_MEN.MAESTRO_PD_PRESTAMOS_COMP         SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_PRESTAMOS_COMP_SAS       ;
    INSERT INTO BAS_MEN.FECHA_CALIBRACIONES               SELECT * FROM DCRPROP_MENSUAL.FECHA_CALIBRACIONES_SAS             ;
    /* INI HDEV-107786 JRJ */
    INSERT INTO BAS_MEN.MAESTRO_SEG_CALIB_PD              SELECT * FROM DCRPROP_MENSUAL.MAESTRO_SEG_CALIB_PD_SAS            ;
    INSERT INTO BAS_MEN.MAESTRO_PD_PARAM                  SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_PARAM_SAS                ;
    INSERT INTO BAS_MEN.MAESTRO_PD_POOL_EMP               SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PD_POOL_EMP_SAS             ;
    INSERT INTO BAS_MEN.IMPAGOS_TITULARIDAD_PD            SELECT * FROM DCRPROP_MENSUAL.IMPAGOS_TITULARIDAD_PD_SAS          ;
    /* FIN HDEV-107786 JRJ */
    COMMIT;

    VN_NUMERR:= 5;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_PD_OLD');

     /************************************************************************************/
    /* LLAMADA A LA FUNCION                                                             */
    /************************************************************************************/
    insert /*+ PARALLEL (x 4) */ into BAS_MEN.BASILEA_AIRB_PD_OLD x
    (OR_IDREG, FI_PD_ORIGINAL, FI_PD_COREPS, FI_PDCONT, FI_PDPOOL, FI_EADAIRB, FI_EADCONAIRB, FI_CCFAIRB, FI_RATCON, IN_RATINT, OR_PUNTFIN, OR_IDMES, IN_FLAG_NUEVA)
    select CUR.OR_IDREG, CUR.FI_PD_ORIGINAL, CUR.FI_PD_COREPS, CUR.FI_PDCONT, CUR.FI_PDPOOL, CUR.FI_EADAIRB, CUR.FI_EADCONAIRB, CUR.FI_CCFAIRB,
           CUR.FI_RATCON, CUR.IN_RATINT, CUR.OR_PUNTFIN, CUR.OR_IDMES, CUR.IN_FLAG_NUEVA
      from table(BAS_MEN.CALCULO_PD.F_CALCULO_PD_OLD
         (cursor(SELECT /*+ full(a) parallel (a 4)*/
                        A.OR_IDREG, A.OR_IDPERS, A.OR_SEGGES, A.FI_MESCURA, OR_SEGFIC2, in_sratin
                      , DECODE(SUBSTR(NVL(d.DESC_FINAL_OK, 'R'), 1, 1), 'D', 'DS', 'R') SECTOR
                      , IN_SUCEPT, A.OR_TIPIDE
                      , DECODE(A.OR_TITUSCPCB, NULL, A.OR_TITULARITAT, 0, A.OR_TITULARITAT, A.OR_TITUSCPCB) OR_TITULARITAT
                      , A.FI_CCFAIRB, OR_SEGFIC, IN_SEGMBSINI, A.FI_EADAIRB, OR_CLAVISO, A.FI_EADCONAIRB, OR_SEGRIE, OR_PUNT0, OR_MODSCO, IN_RATSOB, IN_SEGMBS0, OR_MODRAT0, OR_RATINT
                      , OR_PUNTSCO, IN_INDMOR, IN_OPER_MIGR, OR_FECOPE, OR_COISIN, IN_REFINAN, OR_IDMES, A.OR_FECSCO, a.OR_NUMOFI, a.OR_CTACLI
                      , OR_FECPUN0, ID_FCH_ALTA, ID_FCH_NACI /* 25/03/2021 RMR MoC en la PD Empresas */
                   FROM BAS_MEN.BASILEA A
                      , (SELECT DISTINCT CNAE93, DESC_FINAL_OK  FROM BAS_MEN.MAESTRO_CNAES_SECTOR) d
                       , BAS_MEN.PERSONAS per
                  WHERE OR_IDCNAE       = CNAE93(+)
                    AND A.OR_NUMPERSONA = per.ID_PERSONA(+)
          AND A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
          AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
          AND (A.IN_INDMOR NOT IN ('SI','CT') AND A.IN_SRATIN<>'BLQRM')
                    ), PN_FECPRO)) CUR;

    COMMIT;
    VN_NUMERR:= 10;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_PD_OLD', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    VN_NUMERR:= 99;

     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'OK',
            REG_INS_OK = VN_COUNT
      WHERE PROCES = '16. FNC_CALCUL_PD_OLD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        PV_RET := 'OK';

        COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16. FNC_CALCUL_PD_OLD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END;
--fla01 fin
PROCEDURE FNC_CALCUL_PD IS

BEGIN

     VN_NUMERR:= 1;
     INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
            VALUES ('16. FNC_CALCUL_PD '||PV_TABLA, SYSDATE, 'INICIADO');

      COMMIT;

     
    VN_NUMERR:= 4;

  
    VN_NUMERR:= 5;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_PD');
    /* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'BASILEA_AIRB_PD', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    /************************************************************************************/
    /* LLAMADA A LA FUNCION                                                             */
    /************************************************************************************/
    insert /*+ PARALLEL (x 4) */ into BAS_MEN.BASILEA_AIRB_PD x
    (OR_IDREG, FI_PD_ORIGINAL, FI_PD_COREPS, FI_PDCONT, FI_PDPOOL, FI_EADAIRB, FI_EADCONAIRB, FI_CCFAIRB, FI_RATCON, IN_RATINT, OR_PUNTFIN, OR_IDMES, IN_FLAG_NUEVA,PUNT_UNIFICADA,
     IN_SRATIN,IN_SRATIN_2)
    select CUR.OR_IDREG, CUR.FI_PD_ORIGINAL, CUR.FI_PD_COREPS, CUR.FI_PDCONT, CUR.FI_PDPOOL, CUR.FI_EADAIRB, CUR.FI_EADCONAIRB, CUR.FI_CCFAIRB,
           CUR.FI_RATCON, CUR.IN_RATINT, CUR.OR_PUNTFIN, CUR.OR_IDMES, CUR.IN_FLAG_NUEVA,CUR.PUNT_UNIFICADA,CUR.IN_SRATIN,CUR.IN_SRATIN_2
      from table(BAS_MEN.CALCULO_PD.F_CALCULO_PD
         (cursor(SELECT /*+ full(a) parallel (a 4)*/
                        A.OR_IDREG, A.OR_IDPERS, A.OR_SEGGES, A.FI_MESCURA, OR_SEGFIC2, in_sratin
                      , DECODE(SUBSTR(NVL(d.DESC_FINAL_OK, 'R'), 1, 1), 'D', 'DS', 'R') SECTOR
                      , IN_SUCEPT, A.OR_TIPIDE
                      , DECODE(A.OR_TITUSCPCB, NULL, A.OR_TITULARITAT, 0, A.OR_TITULARITAT, A.OR_TITUSCPCB) OR_TITULARITAT
                      , A.FI_CCFAIRB, OR_SEGFIC, IN_SEGMBSINI, A.FI_EADAIRB, OR_CLAVISO, A.FI_EADCONAIRB, OR_SEGRIE, OR_PUNT0, OR_MODSCO, IN_RATSOB, IN_SEGMBS0, OR_MODRAT0, OR_RATINT
                      , OR_PUNTSCO, IN_INDMOR, IN_OPER_MIGR, OR_FECOPE, OR_COISIN, IN_REFINAN, OR_IDMES, A.OR_FECSCO, a.OR_NUMOFI, a.OR_CTACLI
                      , OR_FECPUN0, ID_FCH_ALTA, ID_FCH_NACI /* 25/03/2021 RMR MoC en la PD Empresas */
                   FROM BAS_MEN.BASILEA A           --  /* HDEV-107790 14/02/2022*/ cambiamos (+) por left join)
                   LEFT JOIN (SELECT DISTINCT CNAE93, DESC_FINAL_OK  FROM BAS_MEN.MAESTRO_CNAES_SECTOR) d
                     ON (d.CNAE93=A.OR_IDCNAE)
                   LEFT JOIN  BAS_MEN.PERSONAS per
                     ON (per.ID_PERSONA=A.OR_NUMPERSONA)

                  --    , (SELECT DISTINCT CNAE93, DESC_FINAL_OK  FROM BAS_MEN.MAESTRO_CNAES_SECTOR) d
                  --     , BAS_MEN.PERSONAS per
                 -- WHERE OR_IDCNAE       = CNAE93(+)
                 --   AND A.OR_NUMPERSONA = per.ID_PERSONA(+)
                    ), PN_FECPRO)) CUR;

    COMMIT;
    VN_NUMERR:= 10;

     /* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'BASILEA_AIRB_PD', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

      VN_NUMERR:= 99;

     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'OK',
            REG_INS_OK = VN_COUNT
      WHERE PROCES = '16. FNC_CALCUL_PD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        PV_RET := 'OK';

        COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16. FNC_CALCUL_PD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END;

--fla01 FNC_PD_AJUSTE_GRUPO_OLD
PROCEDURE FNC_PD_AJUSTE_GRUPO_OLD IS

BEGIN

 VN_NUMERR:= 1;

 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.0 FNC_PD_AJUSTE_GRUPO_OLD '||PV_TABLA, SYSDATE, 'INICIADO');

COMMIT;

 VN_NUMERR:= 4;

/* Se obtiene la PD de las filiales y el peso de la matriz. PDFilial Ajustada= W * PDGrupo + (1 – W) * PD Filial - 08/01/18*/
/* Es necesario reprocesar la PD antes de reprocesar la PD Grupo para inicializar fi_pd_coreps y fi_pdcont*/
/* Añadir los grupos que son promotores 'GRP' al ajuste de PD grupo. Se bucketiza la pd ajustada a grupo para tomar una PD válida dentro del rango - ARM - 19/12/2019*/
BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.PD_FILIALES');

/* 05/01/2022 RMR HDEV-102708 | Rehecho el ajuste de grupo para discretizar la PD continua*/
--insert into BAS_MEN.PD_FILIALES
--select /*+ full(b) full(d) parallel (b 8) parallel (d 8) */ b.or_idreg, in_idcalific, nvl(OR_PESOW,0) OR_PESOW, fi_pd_coreps, fi_pdcont, OR_PUNTGRUP,
--       PD_REG as pd_grupo,             0.285 * PD_REG as pd_suelo,                  nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pd_coreps as pd_filial_grupo,
--       PD_REG as pd_con_grupo,         0.285 * PD_REG as pdcont_suelo,              nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pdcont    as pdcont_filial_grupo,
--       CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
--            ELSE 'GR_EMPR'
--       END AS seg, b.OR_MODRAT0, d.IN_FLAG_NUEVA
--  from BAS_MEN.basilea b,
--       BAS_MEN.basilea_airb_pd d,
--       BAS_MEN.PD_CORPORATES_GRUPOS pd,
--       BAS_MEN.MAESTRO_DETALLE_MODELOS c
-- where b.fi_elimi1 in ('NO', 'SRABS')
--   and b.or_idreg = d.or_idreg
--   and b.in_segmbsini in ('003','005','006','009','010','019','002','017','027')
--   and substr(b.in_sucept,1,2) in ('EM','EU','ET','PR','PU','PT','HO','PA')
--   and b.in_sratin = 'CRVI'  -- Rating inconsistente TAR-259 /17/12/19        /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
--   and b.or_modgrup = c.codmodelo (+)
--   and (b.in_metode = 'AIRB' or b.in_metode_1 = 'AIRB')
--   and pd.TIPO = 'NORMAL'
--   and pd.SEG = CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
--                  ELSE 'GR_EMPR'
--              END
--   and nvl(OR_PESOW, 0) <> 0
--   and pd.PUNT_MIN <= OR_PUNTGRUP
--   AND pd.PUNT_MAX >= OR_PUNTGRUP;

     
     INSERT /*+ parallel (a 4) */  into BAS_MEN.PD_FILIALES a
     SELECT or_idreg, in_idcalific, OR_PESOW, fi_pd_coreps, fi_pdcont, OR_PUNTGRUP
           , pd_grupo, pd_suelo, GREATEST(pd_suelo,pd_filial_grupo) as pd_filial_grupo
           , pd_con_grupo, pdcont_suelo, GREATEST(pdcont_suelo,pdcont_filial_grupo) as pdcont_filial_grupo
           , seg
           , TIP_RAT, IN_FLAG_NUEVA, OR_SEGFIC2, OR_MODRAT0
      FROM (
            SELECT /*+ full(b) full(d) parallel (b 8) parallel (d 8) */ b.or_idreg, in_idcalific, nvl(OR_PESOW,0) OR_PESOW, fi_pd_coreps, fi_pdcont, OR_PUNTGRUP,
                   PD_REG as pd_grupo,             0.285 * PD_REG as pd_suelo,                  nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pd_coreps as pd_filial_grupo,
                   PD_REG as pd_con_grupo,         0.285 * PD_REG as pdcont_suelo,              nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pdcont    as pdcont_filial_grupo,
                   CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
                        ELSE 'GR_EMPR'
                   END AS seg,
                   c.TIP_RAT, d.IN_FLAG_NUEVA, b.OR_SEGFIC2, b.OR_MODRAT0
              from BAS_MEN.basilea b,
                   BAS_MEN.basilea_airb_pd_OLD d,
                   BAS_MEN.PD_CORPORATES_GRUPOS pd,
                   BAS_MEN.MAESTRO_DETALLE_MODELOS c
             where b.fi_elimi1 in ('NO', 'SRABS')
               and b.or_idreg = d.or_idreg
               and b.in_segmbsini in ('003','005','006','009','010','019','002','017','027')
               and substr(b.in_sucept,1,2) in ('EM','EU','ET','PR','PU','PT','HO','PA')
               and b.in_sratin = 'CRVI'
               and b.or_modgrup = c.codmodelo (+)
               /*and (b.in_metode = 'AIRB' or b.in_metode_1 = 'AIRB') --> 27/01/2022 - NAV - HDEV-106917 - aplicar pd ajuste a grupo para los STDA tambien */
               and pd.TIPO = 'NORMAL'
               and pd.SEG = CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
                              ELSE 'GR_EMPR'
                          END
               and nvl(OR_PESOW, 0) <> 0
               and pd.PUNT_MIN <= OR_PUNTGRUP
               AND pd.PUNT_MAX >= OR_PUNTGRUP
              );
    commit;

VN_NUMERR:= 3;

/* Actualización de la PD y el ratint ajustados al grupo teniendo en cuenta el suelo y asignación una PD final según la bucketización respecto a PD_MIN y PD_MAX.*/
--MERGE /*+ full(dst) parallel(dst 4) */  INTO BAS_MEN.basilea_airb_pd dst
--USING (SELECT /*+ parallel (a 4) */ distinct or_idreg, b.RATING, c.RATING as ratcon, PD_REG, pdcont
--         FROM (select or_idreg, PD_REG, case when pdcont_filial_grupo < pdcont_suelo then pdcont_suelo else pdcont_filial_grupo end as pdcont
--                 from BAS_MEN.PD_FILIALES a,
--                      BAS_MEN.PD_CORPORATES_GRUPOS d
--                where a.seg = d.seg
--                  and d.PD_MIN <= case when pd_filial_grupo     < pd_suelo then pd_suelo else pd_filial_grupo end
--                  AND d.PD_MAX >= case when pd_filial_grupo     < pd_suelo then pd_suelo else pd_filial_grupo end) e,
--              BAS_MEN.MAESTRO_PD_POOLPD b,
--              BAS_MEN.MAESTRO_PD_POOLPD c
--        WHERE b.PDMIN <  PD_REG
--          AND b.PDMAX >= PD_REG
--          AND c.PDMIN <  pdcont
--          AND c.PDMAX >= pdcont) src
-- ON (dst.or_idreg = src.or_idreg)
-- WHEN MATCHED THEN
--      UPDATE
--         SET dst.fi_pd_coreps = src.pd_reg,
--             dst.fi_pdpool = src.pd_reg,
--             dst.fi_pdcont = src.pdcont,
--             dst.in_ratint = src.rating,
--             dst.fi_ratcon = src.ratcon;

-- Discretización para todo aquello que no sea corporate ni patrimonial
    MERGE /*+ full(dst) parallel(dst 4) */  INTO BAS_MEN.basilea_airb_pd_OLD dst
    USING (SELECT /*+ parallel (a 4) */ distinct or_idreg, b.RATING, c.RATING as ratcon, e.POOL_PD, e.pdcont
             FROM (select a.or_idreg, GREATEST(0.0003, d.POOL_PD) POOL_PD, a.pdcont_filial_grupo as pdcont
                     from BAS_MEN.PD_FILIALES a,
                          BAS_MEN.MAESTRO_MODELO_RATING c,
                          BAS_MEN.MAESTRO_PD_EMPRESAS d
                    where or_segfic2 NOT IN ('PA005', 'P5') AND or_segfic2 NOT LIKE 'E5%'
                      and a.OR_MODRAT0 = c.MODRAT
                      and d.MODELO     = c.MODELO
                      AND d.tipo       = 'NORMAL'
                      AND a.IN_FLAG_NUEVA = d.FLAG_NUEVA
                      and d.PD_MIN <= a.pd_filial_grupo
                      AND d.PD_MAX >= a.pd_filial_grupo
                      ) e,
                  BAS_MEN.MAESTRO_PD_POOLPD b,
                  BAS_MEN.MAESTRO_PD_POOLPD c
            WHERE b.PDMIN <  e.POOL_PD
              AND b.PDMAX >= e.POOL_PD
              AND c.PDMIN <  e.pdcont
              AND c.PDMAX >= e.pdcont) src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
          UPDATE
             SET dst.fi_pd_coreps = src.POOL_PD,
                 dst.fi_pdpool = src.POOL_PD,
                 dst.fi_pdcont = src.pdcont,
                 dst.in_ratint = src.rating,
                 dst.fi_ratcon = src.ratcon;
    COMMIT;

    VN_NUMERR:= 4;

    -- Discretización de corporates y patrimoniales
    MERGE /*+ full(dst) parallel(dst 4) */  INTO BAS_MEN.basilea_airb_pd_OLD dst
    USING (SELECT /*+ parallel (a 4) */ distinct or_idreg, b.RATING, c.RATING as ratcon, e.PD_REG, e.pdcont
     FROM (select or_idreg, PD_REG, pd_filial_grupo as pdcont
             from BAS_MEN.PD_FILIALES a,
                  BAS_MEN.PD_CORPORATES_GRUPOS d
            where (a.or_segfic2 IN ('PA005', 'P5') OR or_segfic2 LIKE 'E5%')
              and d.seg = CASE WHEN or_segfic2 LIKE 'E5%' then 'E5' ELSE a.or_segfic2 end
              and d.PD_MIN <= pd_filial_grupo
              AND d.PD_MAX >= pd_filial_grupo
              ) e,
          BAS_MEN.MAESTRO_PD_POOLPD b,
          BAS_MEN.MAESTRO_PD_POOLPD c
         WHERE b.PDMIN <  e.PD_REG
           AND b.PDMAX >= e.PD_REG
           AND c.PDMIN <  e.pdcont
           AND c.PDMAX >= e.pdcont) src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
          UPDATE
             SET dst.fi_pd_coreps = src.pd_reg,
                 dst.fi_pdpool = src.pd_reg,
                 dst.fi_pdcont = src.pdcont,
                 dst.in_ratint = src.rating,
                 dst.fi_ratcon = src.ratcon;
    COMMIT;

 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK'
  WHERE PROCES = '16.0 FNC_PD_AJUSTE_GRUPO_OLD '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.0 FNC_PD_AJUSTE_GRUPO_OLD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;

END;
--fla01 fin FNC_PD_AJUSTE_GRUPO_OLD


PROCEDURE FNC_PD_AJUSTE_GRUPO IS

BEGIN

 VN_NUMERR:= 1;

 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.0 FNC_PD_AJUSTE_GRUPO '||PV_TABLA, SYSDATE, 'INICIADO');

COMMIT;

 VN_NUMERR:= 4;

/* Se obtiene la PD de las filiales y el peso de la matriz. PDFilial Ajustada= W * PDGrupo + (1 – W) * PD Filial - 08/01/18*/
/* Es necesario reprocesar la PD antes de reprocesar la PD Grupo para inicializar fi_pd_coreps y fi_pdcont*/
/* Añadir los grupos que son promotores 'GRP' al ajuste de PD grupo. Se bucketiza la pd ajustada a grupo para tomar una PD válida dentro del rango - ARM - 19/12/2019*/
BAS_MEN.FNC_TRUNCATE_TABLE ('BAS_MEN.PD_FILIALES');

/* 05/01/2022 RMR HDEV-102708 | Rehecho el ajuste de grupo para discretizar la PD continua*/
--insert into BAS_MEN.PD_FILIALES
--select /*+ full(b) full(d) parallel (b 8) parallel (d 8) */ b.or_idreg, in_idcalific, nvl(OR_PESOW,0) OR_PESOW, fi_pd_coreps, fi_pdcont, OR_PUNTGRUP,
--       PD_REG as pd_grupo,             0.285 * PD_REG as pd_suelo,                  nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pd_coreps as pd_filial_grupo,
--       PD_REG as pd_con_grupo,         0.285 * PD_REG as pdcont_suelo,              nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pdcont    as pdcont_filial_grupo,
--       CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
--            ELSE 'GR_EMPR'
--       END AS seg, b.OR_MODRAT0, d.IN_FLAG_NUEVA
--  from BAS_MEN.basilea b,
--       BAS_MEN.basilea_airb_pd d,
--       BAS_MEN.PD_CORPORATES_GRUPOS pd,
--       BAS_MEN.MAESTRO_DETALLE_MODELOS c
-- where b.fi_elimi1 in ('NO', 'SRABS')
--   and b.or_idreg = d.or_idreg
--   and b.in_segmbsini in ('003','005','006','009','010','019','002','017','027')
--   and substr(b.in_sucept,1,2) in ('EM','EU','ET','PR','PU','PT','HO','PA')
--   and b.in_sratin = 'CRVI'  -- Rating inconsistente TAR-259 /17/12/19        /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
--   and b.or_modgrup = c.codmodelo (+)
--   and (b.in_metode = 'AIRB' or b.in_metode_1 = 'AIRB')
--   and pd.TIPO = 'NORMAL'
--   and pd.SEG = CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
--                  ELSE 'GR_EMPR'
--              END
--   and nvl(OR_PESOW, 0) <> 0
--   and pd.PUNT_MIN <= OR_PUNTGRUP
--   AND pd.PUNT_MAX >= OR_PUNTGRUP;


     INSERT /*+ parallel (a 4) */  into BAS_MEN.PD_FILIALES a
     SELECT or_idreg, in_idcalific, OR_PESOW, fi_pd_coreps, fi_pdcont, OR_PUNTGRUP
           , pd_grupo, pd_suelo, GREATEST(pd_suelo,pd_filial_grupo) as pd_filial_grupo
           , pd_con_grupo, pdcont_suelo, GREATEST(pdcont_suelo,pdcont_filial_grupo) as pdcont_filial_grupo
           , seg
           , TIP_RAT, IN_FLAG_NUEVA, OR_SEGFIC2, OR_MODRAT0
      FROM (
            SELECT /*+ full(b) full(d) parallel (b 8) parallel (d 8) */ b.or_idreg, in_idcalific, nvl(OR_PESOW,0) OR_PESOW, fi_pd_coreps, fi_pdcont, OR_PUNTGRUP,
                   PD_REG as pd_grupo,             0.285 * PD_REG as pd_suelo,                  nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pd_coreps as pd_filial_grupo,
                   PD_REG as pd_con_grupo,         0.285 * PD_REG as pdcont_suelo,              nvl(OR_PESOW,0) * PD_REG + (1 - nvl(OR_PESOW,0)) * fi_pdcont    as pdcont_filial_grupo,
                   CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
                        ELSE 'GR_EMPR'
                   END AS seg,
                   c.TIP_RAT, d.IN_FLAG_NUEVA, b.OR_SEGFIC2, b.OR_MODRAT0
              from BAS_MEN.basilea b,
                   BAS_MEN.basilea_airb_pd d,
                   BAS_MEN.PD_CORPORATES_GRUPOS pd,
                   BAS_MEN.MAESTRO_DETALLE_MODELOS c
             where b.fi_elimi1 in ('NO', 'SRABS')
               and b.or_idreg = d.or_idreg
               and b.in_segmbsini in ('003','005','006','009','010','019','002','017','027')
               and substr(b.in_sucept,1,2) in ('EM','EU','ET','PR','PU','PT','HO','PA')
               and b.in_sratin = 'CRVI'
               and b.or_modgrup = c.codmodelo (+)
               /*and (b.in_metode = 'AIRB' or b.in_metode_1 = 'AIRB') --> 27/01/2022 - NAV - HDEV-106917 - aplicar pd ajuste a grupo para los STDA tambien */
               and pd.TIPO = 'NORMAL'
               and pd.SEG = CASE WHEN C.DESC_BREV = 'GRP' THEN 'GR_PROM'
                              ELSE 'GR_EMPR'
                          END
               and nvl(OR_PESOW, 0) <> 0
               and pd.PUNT_MIN <= OR_PUNTGRUP
               AND pd.PUNT_MAX >= OR_PUNTGRUP
              );
    commit;
/* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'PD_FILIALES', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

VN_NUMERR:= 5;

/* Actualización de la PD y el ratint ajustados al grupo teniendo en cuenta el suelo y asignación una PD final según la bucketización respecto a PD_MIN y PD_MAX.*/
--MERGE /*+ full(dst) parallel(dst 4) */  INTO BAS_MEN.basilea_airb_pd dst
--USING (SELECT /*+ parallel (a 4) */ distinct or_idreg, b.RATING, c.RATING as ratcon, PD_REG, pdcont
--         FROM (select or_idreg, PD_REG, case when pdcont_filial_grupo < pdcont_suelo then pdcont_suelo else pdcont_filial_grupo end as pdcont
--                 from BAS_MEN.PD_FILIALES a,
--                      BAS_MEN.PD_CORPORATES_GRUPOS d
--                where a.seg = d.seg
--                  and d.PD_MIN <= case when pd_filial_grupo     < pd_suelo then pd_suelo else pd_filial_grupo end
--                  AND d.PD_MAX >= case when pd_filial_grupo     < pd_suelo then pd_suelo else pd_filial_grupo end) e,
--              BAS_MEN.MAESTRO_PD_POOLPD b,
--              BAS_MEN.MAESTRO_PD_POOLPD c
--        WHERE b.PDMIN <  PD_REG
--          AND b.PDMAX >= PD_REG
--          AND c.PDMIN <  pdcont
--          AND c.PDMAX >= pdcont) src
-- ON (dst.or_idreg = src.or_idreg)
-- WHEN MATCHED THEN
--      UPDATE
--         SET dst.fi_pd_coreps = src.pd_reg,
--             dst.fi_pdpool = src.pd_reg,
--             dst.fi_pdcont = src.pdcont,
--             dst.in_ratint = src.rating,
--             dst.fi_ratcon = src.ratcon;

-- Discretización para todo aquello que no sea corporate ni patrimonial
    MERGE /*+ full(dst) parallel(dst 4) */  INTO BAS_MEN.basilea_airb_pd dst
    USING (SELECT /*+ parallel (a 4) */ distinct or_idreg, b.RATING, c.RATING as ratcon, e.POOL_PD, e.pdcont
             FROM (select a.or_idreg, GREATEST(0.0003, d.POOL_PD) POOL_PD, a.pdcont_filial_grupo as pdcont
                     from BAS_MEN.PD_FILIALES a,
                          BAS_MEN.MAESTRO_MODELO_RATING c,
              --HDEV-107790
                          BAS_MEN.MAESTRO_PD_POOL_EMP d
                          --BAS_MEN.MAESTRO_PD_EMPRESAS d
                    where or_segfic2 NOT IN ('PA005', 'P5') AND or_segfic2 NOT LIKE 'E5%'
                      and a.OR_MODRAT0 = c.MODRAT
                      --and d.MODELO     = c.MODELO
                      --AND d.tipo       = 'NORMAL'
                      --AND a.IN_FLAG_NUEVA = d.FLAG_NUEVA
                      --and d.PD_MIN <= a.pd_filial_grupo
                      --AND d.PD_MAX >= a.pd_filial_grupo
            and D.TIPO=decode(A.OR_SEGFIC2,'P1','PROM', 'P2', 'PROM', 'P3', 'PROM', 'EMP')
                      and d.PD_MIN <= a.pd_filial_grupo
                      AND d.PD_MAX >= a.pd_filial_grupo
                      ) e,
                  BAS_MEN.MAESTRO_PD_POOLPD b,
                  BAS_MEN.MAESTRO_PD_POOLPD c
            WHERE b.PDMIN <  e.POOL_PD
              AND b.PDMAX >= e.POOL_PD
              AND c.PDMIN <  e.pdcont
              AND c.PDMAX >= e.pdcont) src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
          UPDATE
             SET dst.fi_pd_coreps = src.POOL_PD,
                 dst.fi_pdpool = src.POOL_PD,
                 dst.fi_pdcont = src.pdcont,
                 dst.in_ratint = src.rating,
                 dst.fi_ratcon = src.ratcon;
    COMMIT;

    VN_NUMERR:= 4;

    -- Discretización de corporates y patrimoniales
    MERGE /*+ full(dst) parallel(dst 4) */  INTO BAS_MEN.basilea_airb_pd dst
    USING (SELECT /*+ parallel (a 4) */ distinct or_idreg, b.RATING, c.RATING as ratcon, e.PD_REG, e.pdcont
     FROM (select or_idreg, PD_REG, pd_filial_grupo as pdcont
             from BAS_MEN.PD_FILIALES a,
                  BAS_MEN.PD_CORPORATES_GRUPOS d
            where (a.or_segfic2 IN ('PA005', 'P5') OR or_segfic2 LIKE 'E5%')
              and d.seg = CASE WHEN or_segfic2 LIKE 'E5%' then 'E5' ELSE a.or_segfic2 end
              and d.PD_MIN <= pd_filial_grupo
              AND d.PD_MAX >= pd_filial_grupo
              ) e,
          BAS_MEN.MAESTRO_PD_POOLPD b,
          BAS_MEN.MAESTRO_PD_POOLPD c
    WHERE b.PDMIN <  e.PD_REG
      AND b.PDMAX >= e.PD_REG
      AND c.PDMIN <  e.pdcont
      AND c.PDMAX >= e.pdcont) src
     ON (dst.or_idreg = src.or_idreg)
     WHEN MATCHED THEN
          UPDATE
             SET dst.fi_pd_coreps = src.pd_reg,
                 dst.fi_pdpool = src.pd_reg,
                 dst.fi_pdcont = src.pdcont,
                 dst.in_ratint = src.rating,
                 dst.fi_ratcon = src.ratcon;
    COMMIT;

 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK'
  WHERE PROCES = '16.0 FNC_PD_AJUSTE_GRUPO '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.0 FNC_PD_AJUSTE_GRUPO '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;

END;

/* ******************************************************************************************/
/* Obtiene la fecha de calculo para cada modelo                                             */
/* ******************************************************************************************/
FUNCTION FECHA_CAL(VN_MODELO varchar2) return number is
V_FECHA_CAL NUMBER(6);

begin

    select FECHA_CAL
      into V_FECHA_CAL
      from BAS_MEN.FECHA_CALIBRACIONES
     where MODELO=VN_MODELO;

return     V_FECHA_CAL;
EXCEPTION
    WHEN OTHERS THEN
    return null;
end FECHA_CAL;

--fla01 
PROCEDURE FNC_CALCUL_PD_MEDIA_OLD IS

VN_OR_PUNTFINS  FLOAT;

 /* Cursor utilizado para enriquecer los datos recogidos de basiela, basilea_airb con la PD media de empresas (BAS_MEN.PD_MEDIA_EMPRESAS)*/
 /* Se realiza una subconsulta, resultante del cruce con basilea, basilea_airb y maestro_cnaes para realizar el calculo del segmento de riesgos*/
 /* Al cruzar con el maestro_cnaes obtenemos el macrosector con el que podemos terminar de construir el segmento de riesgo*/


CURSOR BASILEA1 IS
   SELECT DISTINCT PDCONT, RATING, SEGRIE, ENTIDAD, IN_SRATIN
      FROM BAS_MEN.PD_MEDIA_EMPRESAS A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= PDCONT
       AND PDMAX > PDCONT;

CURSOR BASILEA2 IS
   SELECT DISTINCT TOTPD, RATING, SEGRIE, ENTIDAD, IN_SRATIN
      FROM BAS_MEN.PD_MEDIA_EMPRESAS A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= TOTPD
       AND PDMAX > TOTPD;

CURSOR BASILEA3 IS
    SELECT A.SEGRIE, A.ENTIDAD, B.PD_REG, A.IN_SRATIN
    FROM (SELECT SEGRIE, IN_SRATIN, ENTIDAD, MIN(ABS(DIFF)) DIFF
            FROM (SELECT DISTINCT B.SEGRIE, IN_SRATIN, ENTIDAD, A.PD_REG, B.PD_DISCRETA, ABS((A.PD_REG - B.PD_DISCRETA)) DIFF
                    FROM BAS_MEN.PD_CORPORATES_GRUPOS A,
                         BAS_MEN.PD_MEDIA_EMPRESAS B
                   WHERE SEG = B.SEGRIE
                     AND TIPO = DECODE(IN_SRATIN, 'CRVI', 'NORMAL', IN_SRATIN))        -- Rating inconsistente TAR-259 /17/12/19      /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
                GROUP BY SEGRIE, ENTIDAD, IN_SRATIN) A,
                 (SELECT DISTINCT B.SEGRIE, IN_SRATIN, ENTIDAD, A.PD_REG, B.PD_DISCRETA, ABS((A.PD_REG - B.PD_DISCRETA)) DIFF
                    FROM BAS_MEN.PD_CORPORATES_GRUPOS A,
                         BAS_MEN.PD_MEDIA_EMPRESAS B
                   WHERE SEG = B.SEGRIE
                     AND TIPO = DECODE(IN_SRATIN, 'CRVI', 'NORMAL', IN_SRATIN)) B        -- Rating inconsistente TAR-259 /17/12/19    /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
      WHERE A.SEGRIE = B.SEGRIE
        AND A.DIFF   = ABS(B.DIFF)
        AND A.ENTIDAD = B.ENTIDAD
        AND A.IN_SRATIN = B.IN_SRATIN;

BEGIN

 VN_NUMERR:= 1;
 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.1 FNC_PD_MEDIA_EMP_OLD '||PV_TABLA, SYSDATE, 'INICIADO');

COMMIT;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PD_MEDIA_EMPRESAS');

/*Tabla temporal para agilizar el cursor BASILEA. Optimización de FdelA. 4/07/08. Y Para añadir registros nuevos o modificados para pegarle las medias*/
INSERT /*+ parallel(a 8) */ INTO BAS_MEN.TEMP_PD_MEDIA_EMPRESAS a
SELECT /*+ FULL(D) FULL(E) parallel(D 8) parallel (E 8) */ E.OR_IDREG, OR_IDCNAE,
       case WHEN SUBSTR(OR_SEGFIC2,1,2) = 'E5' THEN -- la PD de corporates  XCG 03/2016.
                'E5'
            WHEN SUBSTR(OR_SEGFIC2,1,3) = 'NC5' then
                'E5'
            WHEN OR_SEGFIC2 = 'GRP' THEN -- la PD de grupos promotores XCG 03/2016.
               'GR_PROM'
            WHEN OR_SEGFIC2 = 'GR' THEN               -- la PD grupos empresas XCG 03/2016.
               'GR_EMPR'
            WHEN in_METODE = 'STDA' and OR_SEGFIC2 = '?' THEN
                 decode(in_segmbs1, '500', 'E2', '501', 'E0', 'E4')
            else
                OR_SEGFIC2
       end as OR_SEGRIE,
       FI_PD_original PD_DISCRETA_ANT, E.IN_RATINT IN_RATINT_ANT,
       case when in_sratin in ('SRR', 'CRDER') then 'REFI'
            when in_sratin = 'BLQR' then IN_SRATIN
            else 'CRVI'
       end as in_sratin,
       FI_PDCONT, 0, IN_SUCEPT, OR_MODRAT0,
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end as entidad,
       D.OR_TITULARITAT,
       D.IN_SRATIN -- 201512 SRAT para todas las exposiciones JCV2
  FROM BAS_MEN.BASILEA D,
       BAS_MEN.BASILEA_AIRB_PD_OLD E,
       (SELECT DISTINCT CNAE93, DESC_FINAL_OK  FROM BAS_MEN.MAESTRO_CNAES_SECTOR) A
 WHERE D.IN_INDMOR = 'NO'
   AND OR_IDCNAE = CNAE93(+)
   AND D.IN_SRATIN IN ('SR', 'CRDE', '?', 'SRR', 'CRDER')
   /* BNM 13/01/2022  HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos 
   AND (OR_segfic2 in ('PA005', 'E5R', 'GR', 'GRP', 'P5', 'E5DS', 'NC5R', 'NC5DS') OR (IN_METODE = 'STDA' and OR_SEGFIC2 = '?')) */
   AND IN_METODE = 'STDA' and OR_SEGFIC2 = '?'
   AND IN_SEGMBS0 NOT IN ('201', '203', '204')
   AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
   AND D.OR_IDREG = E.OR_IDREG;


COMMIT;

IF FECHA_CAL('EMPRESAS') = PV_FECHA THEN

/* XCG 20/01/2021 | Sustituido truncate SOLO PARA EL PASE DE 202012  */
--DELETE /*+ PARALLEL (D 8) */ FROM BAS_MEN.PD_MEDIA_EMPRESAS D
--WHERE NOT (in_sratin = 'REFI' AND segrie = 'UTE000');
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PD_MEDIA_EMPRESAS');

COMMIT;

INSERT /*+ PARALLEL (D 8) */ INTO BAS_MEN.PD_MEDIA_EMPRESAS D
SELECT /*+ FULL(A) FULL(B) PARALLEL (A 8) PARALLEL (B 8) */
       CASE
       WHEN OR_SEGFIC2 in ('P1', 'P2', 'P3', 'P5') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA') THEN
            OR_SEGFIC2
       WHEN SUBSTR(IN_SUCEPT,1,2) IN ('ET', 'PT', 'EU', 'PU') THEN
            DECODE(substr(IN_SUCEPT,1,2), 'ET' ,'MT000', 'PT', 'MT000', 'EU', 'UTE000', 'PU', 'UTE000')
       WHEN SUBSTR(IN_SUCEPT,1,2) IN ('HO', 'PA') THEN
            DECODE(substr(IN_SUCEPT,1,2), 'HO', 'HO000', 'PA', 'PA000')
       WHEN SUBSTR(OR_SEGFIC2,1,2) = 'E5' THEN -- la PD de corporates  XCG 03/2016.
            SUBSTR(OR_SEGFIC2,1,2)
       WHEN SUBSTR(OR_SEGFIC2,1,1) IN ('E', 'N') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA', 'PR') THEN
            OR_SEGFIC2
       WHEN OR_SEGFIC2 = 'GRP' THEN -- la PD de grupos promotores XCG 03/2016.
               'GR_PROM'
       WHEN OR_SEGFIC2 = 'GR' THEN   -- la PD de grupos empresas XCG 03/2016.
               'GR_EMPR'
       END AS OR_SEGRIE,
       SUM(A.FI_EADAIRB) TOTAL,
       count(*) TOTREG,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * B.IN_RATINT)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT,
       0 TOTPD,
       decode(sum(b.fi_eadairb), 0, 0, SUM((b.fi_eadairb) * b.FI_PD_COREPS)/ SUM(b.fi_eadairb)) PD_ORIGINAL,
       decode(sum(b.fi_eadairb), 0, 0, SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb)) PDCONT,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON,
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end as entidad, IN_SRATIN
  FROM BAS_MEN.BASILEA A,
       BAS_MEN.BASILEA_AIRB_PD_OLD B
 WHERE A.IN_SRATIN in ('CRVI','REFI','CIVIR')   -- Rating inconsistente TAR-259 /17/12/19  -- CIVIR TAR-259 20/12/19      /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
   AND FI_ELIMI1 IN ('NO', 'EQUITY', 'RFNEG', 'SRABS')
   AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
   AND A.OR_IDREG = B.OR_IDREG
   AND IN_SEGMBS0 NOT IN ('201', '203', '204')
    /* 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
   AND ( A.IN_METODE = 'AIRB'
       OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
       OR IN_METODE_1 = 'AIRB'
       )
 GROUP BY CASE
          WHEN OR_SEGFIC2 in ('P1', 'P2', 'P3', 'P5') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA') THEN
               OR_SEGFIC2
          WHEN SUBSTR(IN_SUCEPT,1,2) IN ('ET', 'PT', 'EU', 'PU') THEN
               DECODE(substr(IN_SUCEPT,1,2), 'ET' ,'MT000', 'PT', 'MT000', 'EU', 'UTE000', 'PU', 'UTE000')
          WHEN SUBSTR(IN_SUCEPT,1,2) IN ('HO', 'PA') THEN
               DECODE(substr(IN_SUCEPT,1,2), 'HO', 'HO000', 'PA', 'PA000')
          WHEN SUBSTR(OR_SEGFIC2,1,2) = 'E5' THEN
                  SUBSTR(OR_SEGFIC2,1,2)
          WHEN SUBSTR(OR_SEGFIC2,1,1) IN ('E', 'N') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA', 'PR') THEN
               OR_SEGFIC2
          WHEN OR_SEGFIC2 = 'GRP' THEN
                  'GR_PROM'
          WHEN OR_SEGFIC2 = 'GR' THEN
                  'GR_EMPR'
          END,
          case
               when IN_OPER_MIGR = 'BMN' then 'BMN'
               WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
               WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
               else 'BS'
          end, IN_SRATIN;

  VN_NUMERR:= 10;

  COMMIT;

 VN_NUMERR:= 115;

-- Insertamos registros de empresas con segrie general de 'E4'
INSERT /*+ PARALLEL (D 8) */ INTO BAS_MEN.PD_MEDIA_EMPRESAS D
SELECT /*+ FULL(A) FULL(B) PARALLEL (A 8) PARALLEL (B 8) */  SUBSTR(OR_SEGFIC2,1,2),
       SUM(A.FI_EADAIRB) TOTAL,
       count(*) TOTREG,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * b.IN_RATINT)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT,
       0 TOTPD,
       SUM((B.FI_EADAIRB) * B.FI_PD_COREPS)/ SUM(B.FI_EADAIRB) PD_ORIGINAL,
       SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb) PDCONT,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON,
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end as entidad, IN_SRATIN
  FROM BAS_MEN.BASILEA A,
       BAS_MEN.BASILEA_AIRB_PD_OLD B
 WHERE A.IN_SRATIN = 'CRVI' -- Rating inconsistente TAR-259 /17/12/19     /*5/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
   AND FI_ELIMI1 IN ('NO', 'EQUITY', 'RFNEG', 'SRABS')
   AND IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
   AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA', 'PR')
   AND SUBSTR(OR_SEGFIC2,1,2) = 'E4'
   AND A.OR_IDREG = B.OR_IDREG
   AND IN_SEGMBS0 NOT IN ('201', '203', '204')
    /* 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
   AND ( A.IN_METODE = 'AIRB'
       OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
       OR IN_METODE_1 = 'AIRB'
       )
 GROUP BY SUBSTR(OR_SEGFIC2,1,2),
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end, IN_SRATIN;

COMMIT;

 VN_NUMERR:= 12;
 VN_COUNT:= 0;

FOR CUR IN BASILEA3 LOOP

    VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.PD_MEDIA_EMPRESAS
--                               SET TOTPD = CUR.POOL_PD
       SET TOTPD = CUR.PD_REG
     WHERE SEGRIE = CUR.SEGRIE
       AND ENTIDAD = CUR.ENTIDAD
       AND IN_SRATIN = CUR.IN_SRATIN;

     VN_NUMERR:= 17;

    IF MOD(VN_COUNT,1)=0 THEN
           UPDATE BAS_MEN.CONTROL_PROCES
            SET REG_INS_OK = VN_COUNT
          WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
            AND ESTAT  = 'INICIADO';

    COMMIT;

       END IF;

END LOOP;

COMMIT;

VN_NUMERR:= 16;
VN_COUNT:= 0;

 FOR CUR IN BASILEA1 LOOP

    VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.PD_MEDIA_EMPRESAS
       SET RATCON = CUR.RATING
     WHERE SEGRIE = CUR.SEGRIE
     AND ENTIDAD = CUR.ENTIDAD
     AND IN_SRATIN = CUR.IN_SRATIN;

     VN_NUMERR:= 15;

     IF MOD(VN_COUNT,1)=0 THEN
            UPDATE BAS_MEN.CONTROL_PROCES
             SET REG_UPD_KO = VN_COUNT
           WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
             AND ESTAT  = 'INICIADO';

     COMMIT;

     END IF;

END LOOP;

COMMIT;

FOR CUR IN BASILEA2 LOOP

    VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.PD_MEDIA_EMPRESAS
       SET IN_RATINT = CUR.RATING
     WHERE SEGRIE = CUR.SEGRIE
     AND ENTIDAD = CUR.ENTIDAD
     AND IN_SRATIN = CUR.IN_SRATIN;

     VN_NUMERR:= 15;

     IF MOD(VN_COUNT,1)=0 THEN
            UPDATE BAS_MEN.CONTROL_PROCES
             SET REG_UPD_KO = VN_COUNT
           WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
             AND ESTAT  = 'INICIADO';

     COMMIT;

     END IF;

END LOOP;

COMMIT;

END IF;        -- END IF FECHA_CAL

VN_NUMERR:= 2;

 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.pd_temp_empresas_media');

insert into BAS_MEN.pd_temp_empresas_media
   SELECT OR_IDREG, A.ENTIDAD, A.OR_SEGRIE, PD_DISCRETA_ANT, IN_RATINT_ANT, B.PD_DISCRETA, B.IN_RATINT,
          A.IN_SRATIN, case when B.TOTPD <  0.0003 then 0.0003 else B.TOTPD end totpd, PDCONT, FI_PDCONT, B.RATCON, IN_SUCEPT, OR_MODRAT0, IN_SRATIN2
     FROM BAS_MEN.TEMP_PD_MEDIA_EMPRESAS A,
          BAS_MEN.PD_MEDIA_EMPRESAS B
    WHERE A.OR_SEGRIE = B.SEGRIE
      AND A.ENTIDAD = B.ENTIDAD
      AND A.IN_SRATIN = B.IN_SRATIN
      and (IN_SRATIN2 not in ('CRDE', 'CRDER') or (IN_SRATIN2 in ('CRDE', 'CRDER') and decode(PD_DISCRETA_ANT, 99, 0, PD_DISCRETA_ANT) <= TOTPD));

  commit;

 insert into BAS_MEN.pd_temp_empresas_media
    SELECT DISTINCT c.or_idreg, c.entidad, c.or_segrie, pd_discreta_ant,
                   in_ratint_ant, d.pd_discreta, d.in_ratint, c.in_sratin,
                   CASE
                      WHEN d.totpd < 0.0003
                         THEN 0.0003
                      ELSE d.totpd
                   END totpd, pdcont, fi_pdcont, d.ratcon, in_sucept,
                   or_modrat0, in_sratin2
              FROM (select f.*
                      from bas_men.temp_pd_media_empresas f,
                      BAS_MEN.pd_temp_empresas_media  e
                   where f.or_idreg = e.or_idreg(+)
                   and e.or_idreg is null
                   and f.in_sratin2 NOT IN ('CRDE', 'CRDER')) c,
                   (select * from bas_men.pd_media_empresas where entidad = 'BS') d
             WHERE c.or_segrie = d.segrie
               AND c.in_sratin = d.in_sratin;

commit;

 MERGE /*+ full(upd) parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_AIRB_PD_OLD Upd
       USING BAS_MEN.pd_temp_empresas_media  Sel
          ON (Upd.OR_IDREG = Sel.OR_IDREG)
        WHEN MATCHED THEN
      UPDATE
         SET FI_PD_COREPS = sel.TOTPD,
             FI_PDPOOL = sel.TOTPD,
             OR_PUNTFIN = 0,
             IN_RATINT  = sel.IN_RATINT,
             FI_PDCONT = sel.PDCONT,
             FI_RATCON = sel.RATCON;

 COMMIT;

 VN_NUMERR:= 6;
 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK',
        REG_UPD_OK = VN_COUNT
  WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP_OLD '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP_OLD '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END; -- FNC_CALCUL_PD_MEDIA_OLD
--fla01 fin

PROCEDURE FNC_CALCUL_PD_MEDIA IS

VN_OR_PUNTFINS  FLOAT;

 /* Cursor utilizado para enriquecer los datos recogidos de basiela, basilea_airb con la PD media de empresas (BAS_MEN.PD_MEDIA_EMPRESAS)*/
 /* Se realiza una subconsulta, resultante del cruce con basilea, basilea_airb y maestro_cnaes para realizar el calculo del segmento de riesgos*/
 /* Al cruzar con el maestro_cnaes obtenemos el macrosector con el que podemos terminar de construir el segmento de riesgo*/


CURSOR BASILEA1 IS
   SELECT DISTINCT PDCONT, RATING, SEGRIE, ENTIDAD, IN_SRATIN
      FROM BAS_MEN.PD_MEDIA_EMPRESAS A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= PDCONT
       AND PDMAX > PDCONT;

CURSOR BASILEA2 IS
   SELECT DISTINCT TOTPD, RATING, SEGRIE, ENTIDAD, IN_SRATIN
      FROM BAS_MEN.PD_MEDIA_EMPRESAS A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= TOTPD
       AND PDMAX > TOTPD;

CURSOR BASILEA3 IS
    SELECT A.SEGRIE, A.ENTIDAD, B.PD_REG, A.IN_SRATIN
    FROM (SELECT SEGRIE, IN_SRATIN, ENTIDAD, MIN(ABS(DIFF)) DIFF
            FROM (SELECT DISTINCT B.SEGRIE, IN_SRATIN, ENTIDAD, A.PD_REG, B.PD_DISCRETA, ABS((A.PD_REG - B.PD_DISCRETA)) DIFF
                    FROM BAS_MEN.PD_CORPORATES_GRUPOS A,
                         BAS_MEN.PD_MEDIA_EMPRESAS B
                   WHERE SEG = B.SEGRIE
                     AND TIPO = DECODE(IN_SRATIN, 'CRVI', 'NORMAL', IN_SRATIN))        -- Rating inconsistente TAR-259 /17/12/19      /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
                GROUP BY SEGRIE, ENTIDAD, IN_SRATIN) A,
                 (SELECT DISTINCT B.SEGRIE, IN_SRATIN, ENTIDAD, A.PD_REG, B.PD_DISCRETA, ABS((A.PD_REG - B.PD_DISCRETA)) DIFF
                    FROM BAS_MEN.PD_CORPORATES_GRUPOS A,
                         BAS_MEN.PD_MEDIA_EMPRESAS B
                   WHERE SEG = B.SEGRIE
                     AND TIPO = DECODE(IN_SRATIN, 'CRVI', 'NORMAL', IN_SRATIN)) B        -- Rating inconsistente TAR-259 /17/12/19    /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
      WHERE A.SEGRIE = B.SEGRIE
        AND A.DIFF   = ABS(B.DIFF)
        AND A.ENTIDAD = B.ENTIDAD
        AND A.IN_SRATIN = B.IN_SRATIN;

BEGIN

 VN_NUMERR:= 1;
 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.1 FNC_PD_MEDIA_EMP '||PV_TABLA, SYSDATE, 'INICIADO');

COMMIT;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PD_MEDIA_EMPRESAS');

/*Tabla temporal para agilizar el cursor BASILEA. Optimización de FdelA. 4/07/08. Y Para añadir registros nuevos o modificados para pegarle las medias*/
INSERT /*+ parallel(A 8) */ INTO BAS_MEN.TEMP_PD_MEDIA_EMPRESAS A (A.OR_IDREG,A.OR_IDCNAE,A.OR_SEGRIE,A.PD_DISCRETA_ANT,A.IN_RATINT_ANT,
                                                                   A.IN_SRATIN,A.FI_PDCONT,A.IDREG_AIRB,A.IN_SUCEPT,A.OR_MODRAT0,
                                                                   A.ENTIDAD,A.OR_TITULARITAT,A.IN_SRATIN2
                                                                   )
SELECT /*+  parallel(F 8)  */ F.OR_IDREG, F.OR_IDCNAE,F.OR_SEGRIE, F.PD_DISCRETA_ANT,F.IN_RATINT_ANT,F.in_sratin,  F.FI_PDCONT, F.IDREG_AIRB, F.IN_SUCEPT,
                              F.OR_MODRAT0,F.entidad,F.OR_TITULARITAT, F.IN_SRATIN2
FROM
(SELECT /*+ FULL(D) FULL(E) parallel(D 8) parallel (E 8) */ E.OR_IDREG, OR_IDCNAE,
       case WHEN SUBSTR(OR_SEGFIC2,1,2) = 'E5' THEN -- la PD de corporates  XCG 03/2016.
                'E5'
            WHEN SUBSTR(OR_SEGFIC2,1,3) = 'NC5' then
                'E5'
            WHEN OR_SEGFIC2 = 'GRP' THEN -- la PD de grupos promotores XCG 03/2016.
               'GR_PROM'
            WHEN OR_SEGFIC2 = 'GR' THEN               -- la PD grupos empresas XCG 03/2016.
               'GR_EMPR'
            WHEN in_METODE = 'STDA' and OR_SEGFIC2 = '?' THEN
                 decode(in_segmbs1, '500', 'E2', '501', 'E0', 'E4')
            else
                OR_SEGFIC2
       end as OR_SEGRIE,
       FI_PD_original PD_DISCRETA_ANT, E.IN_RATINT IN_RATINT_ANT,
       case when D.in_sratin in ('SRR', 'CRDER') then 'REFI'
            when D.in_sratin = 'BLQR' then D.IN_SRATIN
            else 'CRVI'
       end as in_sratin,
       FI_PDCONT, 0 IDREG_AIRB, IN_SUCEPT, OR_MODRAT0,
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end as entidad,
       D.OR_TITULARITAT,
       D.IN_SRATIN IN_SRATIN2 -- 201512 SRAT para todas las exposiciones JCV2
  FROM BAS_MEN.BASILEA D,
       BAS_MEN.BASILEA_AIRB_PD E

  WHERE D.IN_INDMOR = 'NO'
  --HDEV-107790 04/03/2022
  -- AND OR_IDCNAE = CNAE93(+) REEMPLAZO LEFT JOIN
   --HDEV-107790 04/03/2022 comentar linea in_srating
  -- AND D.IN_SRATIN IN ('SR', 'CRDE', '?', 'SRR', 'CRDER')
   /* BNM 13/01/2022  HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos
   AND (OR_segfic2 in ('PA005', 'E5R', 'GR', 'GRP', 'P5', 'E5DS', 'NC5R', 'NC5DS') OR (IN_METODE = 'STDA' and OR_SEGFIC2 = '?')) */
   AND IN_METODE = 'STDA' and OR_SEGFIC2 = '?'
   AND IN_SEGMBS0 NOT IN ('201', '203', '204')
   AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
   AND D.OR_IDREG = E.OR_IDREG
   ) F
    LEFT JOIN (SELECT DISTINCT CNAE93, DESC_FINAL_OK  FROM BAS_MEN.MAESTRO_CNAES_SECTOR) A
     ON ( A.CNAE93=F.OR_IDCNAE);



COMMIT;
/* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'TEMP_PD_MEDIA_EMPRESAS', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

IF FECHA_CAL('EMPRESAS') = PV_FECHA THEN

/* XCG 20/01/2021 | Sustituido truncate SOLO PARA EL PASE DE 202012  */
--DELETE /*+ PARALLEL (D 8) */ FROM BAS_MEN.PD_MEDIA_EMPRESAS D
--WHERE NOT (in_sratin = 'REFI' AND segrie = 'UTE000');
BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PD_MEDIA_EMPRESAS');
/* HDEV-107790 14/02/2022*/
dbms_stats.gather_table_stats('BAS_MEN', 'PD_MEDIA_EMPRESAS', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

COMMIT;

INSERT /*+ PARALLEL (D 8) */ INTO BAS_MEN.PD_MEDIA_EMPRESAS D
SELECT /*+ FULL(A) FULL(B) PARALLEL (A 8) PARALLEL (B 8) */
       CASE
       WHEN OR_SEGFIC2 in ('P1', 'P2', 'P3', 'P5') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA') THEN
            OR_SEGFIC2
       WHEN SUBSTR(IN_SUCEPT,1,2) IN ('ET', 'PT', 'EU', 'PU') THEN
            DECODE(substr(IN_SUCEPT,1,2), 'ET' ,'MT000', 'PT', 'MT000', 'EU', 'UTE000', 'PU', 'UTE000')
       WHEN SUBSTR(IN_SUCEPT,1,2) IN ('HO', 'PA') THEN
            DECODE(substr(IN_SUCEPT,1,2), 'HO', 'HO000', 'PA', 'PA000')
       WHEN SUBSTR(OR_SEGFIC2,1,2) = 'E5' THEN -- la PD de corporates  XCG 03/2016.
            SUBSTR(OR_SEGFIC2,1,2)
       WHEN SUBSTR(OR_SEGFIC2,1,1) IN ('E', 'N') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA', 'PR') THEN
            OR_SEGFIC2
       WHEN OR_SEGFIC2 = 'GRP' THEN -- la PD de grupos promotores XCG 03/2016.
               'GR_PROM'
       WHEN OR_SEGFIC2 = 'GR' THEN   -- la PD de grupos empresas XCG 03/2016.
               'GR_EMPR'
       END AS OR_SEGRIE,
       SUM(A.FI_EADAIRB) TOTAL,
       count(*) TOTREG,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * B.IN_RATINT)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT,
       0 TOTPD,
       decode(sum(b.fi_eadairb), 0, 0, SUM((b.fi_eadairb) * b.FI_PD_COREPS)/ SUM(b.fi_eadairb)) PD_ORIGINAL,
       decode(sum(b.fi_eadairb), 0, 0, SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb)) PDCONT,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON,
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end as entidad, A.IN_SRATIN
  FROM BAS_MEN.BASILEA A,
       BAS_MEN.BASILEA_AIRB_PD B
 WHERE A.IN_SRATIN in ('CRVI','REFI','CIVIR')   -- Rating inconsistente TAR-259 /17/12/19  -- CIVIR TAR-259 20/12/19      /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
   AND FI_ELIMI1 IN ('NO', 'EQUITY', 'RFNEG', 'SRABS')
   AND IN_SEGMBSINI IN ('003','005','006','009','010','019','027')
   AND A.OR_IDREG = B.OR_IDREG
   AND IN_SEGMBS0 NOT IN ('201', '203', '204')
    /* 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
   AND ( A.IN_METODE = 'AIRB'
       OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
       OR IN_METODE_1 = 'AIRB'
       )
 GROUP BY CASE
          WHEN OR_SEGFIC2 in ('P1', 'P2', 'P3', 'P5') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA') THEN
               OR_SEGFIC2
          WHEN SUBSTR(IN_SUCEPT,1,2) IN ('ET', 'PT', 'EU', 'PU') THEN
               DECODE(substr(IN_SUCEPT,1,2), 'ET' ,'MT000', 'PT', 'MT000', 'EU', 'UTE000', 'PU', 'UTE000')
          WHEN SUBSTR(IN_SUCEPT,1,2) IN ('HO', 'PA') THEN
               DECODE(substr(IN_SUCEPT,1,2), 'HO', 'HO000', 'PA', 'PA000')
          WHEN SUBSTR(OR_SEGFIC2,1,2) = 'E5' THEN
                  SUBSTR(OR_SEGFIC2,1,2)
          WHEN SUBSTR(OR_SEGFIC2,1,1) IN ('E', 'N') AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA', 'PR') THEN
               OR_SEGFIC2
          WHEN OR_SEGFIC2 = 'GRP' THEN
                  'GR_PROM'
          WHEN OR_SEGFIC2 = 'GR' THEN
                  'GR_EMPR'
          END,
          case
               when IN_OPER_MIGR = 'BMN' then 'BMN'
               WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
               WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
               else 'BS'
          end, A.IN_SRATIN;

  VN_NUMERR:= 10;

  COMMIT;
   /* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'PD_MEDIA_EMPRESAS', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

 VN_NUMERR:= 115;

-- Insertamos registros de empresas con segrie general de 'E4'
INSERT /*+ PARALLEL (D 8) */ INTO BAS_MEN.PD_MEDIA_EMPRESAS D
SELECT /*+ FULL(A) FULL(B) PARALLEL (A 8) PARALLEL (B 8) */  SUBSTR(OR_SEGFIC2,1,2),
       SUM(A.FI_EADAIRB) TOTAL,
       count(*) TOTREG,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * b.IN_RATINT)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT,
       0 TOTPD,
       SUM((B.FI_EADAIRB) * B.FI_PD_COREPS)/ SUM(B.FI_EADAIRB) PD_ORIGINAL,
       SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb) PDCONT,
       ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
              SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON,
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end as entidad, A.IN_SRATIN
  FROM BAS_MEN.BASILEA A,
       BAS_MEN.BASILEA_AIRB_PD B
 WHERE A.IN_SRATIN = 'CRVI' -- Rating inconsistente TAR-259 /17/12/19     /*5/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
   AND FI_ELIMI1 IN ('NO', 'EQUITY', 'RFNEG', 'SRABS')
   AND IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
   AND SUBSTR(IN_SUCEPT,1,2) NOT IN ('ET', 'PT', 'EU', 'PU', 'HO', 'PA', 'PR')
   AND SUBSTR(OR_SEGFIC2,1,2) = 'E4'
   AND A.OR_IDREG = B.OR_IDREG
   AND IN_SEGMBS0 NOT IN ('201', '203', '204')
    /* 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
   AND ( A.IN_METODE = 'AIRB'
       OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
       OR IN_METODE_1 = 'AIRB'
       )
 GROUP BY SUBSTR(OR_SEGFIC2,1,2),
       case
            when IN_OPER_MIGR = 'BMN' then 'BMN'
            WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
            WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
            else 'BS'
       end, A.IN_SRATIN;


COMMIT;
/* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'PD_MEDIA_EMPRESAS', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

 VN_NUMERR:= 12;
 VN_COUNT:= 0;

FOR CUR IN BASILEA3 LOOP

    VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.PD_MEDIA_EMPRESAS
--                               SET TOTPD = CUR.POOL_PD
       SET TOTPD = CUR.PD_REG
     WHERE SEGRIE = CUR.SEGRIE
       AND ENTIDAD = CUR.ENTIDAD
       AND IN_SRATIN = CUR.IN_SRATIN;

     VN_NUMERR:= 17;

    IF MOD(VN_COUNT,1)=0 THEN
           UPDATE BAS_MEN.CONTROL_PROCES
            SET REG_INS_OK = VN_COUNT
          WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
            AND ESTAT  = 'INICIADO';

    COMMIT;

       END IF;

END LOOP;

COMMIT;

VN_NUMERR:= 16;
VN_COUNT:= 0;

 FOR CUR IN BASILEA1 LOOP

    VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.PD_MEDIA_EMPRESAS
       SET RATCON = CUR.RATING
     WHERE SEGRIE = CUR.SEGRIE
     AND ENTIDAD = CUR.ENTIDAD
     AND IN_SRATIN = CUR.IN_SRATIN;

     VN_NUMERR:= 15;

     IF MOD(VN_COUNT,1)=0 THEN
            UPDATE BAS_MEN.CONTROL_PROCES
             SET REG_UPD_KO = VN_COUNT
           WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
             AND ESTAT  = 'INICIADO';

     COMMIT;

     END IF;

END LOOP;

COMMIT;

FOR CUR IN BASILEA2 LOOP

    VN_COUNT:= VN_COUNT + 1;

    UPDATE BAS_MEN.PD_MEDIA_EMPRESAS
       SET IN_RATINT = CUR.RATING
     WHERE SEGRIE = CUR.SEGRIE
     AND ENTIDAD = CUR.ENTIDAD
     AND IN_SRATIN = CUR.IN_SRATIN;

     VN_NUMERR:= 15;

     IF MOD(VN_COUNT,1)=0 THEN
            UPDATE BAS_MEN.CONTROL_PROCES
             SET REG_UPD_KO = VN_COUNT
           WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
             AND ESTAT  = 'INICIADO';

     COMMIT;

     END IF;

END LOOP;

COMMIT;

END IF;        -- END IF FECHA_CAL

VN_NUMERR:= 2;

 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.pd_temp_empresas_media');
 /* HDEV-107790 14/02/2022*/
  dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_EMPRESAS_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

insert into BAS_MEN.pd_temp_empresas_media
   SELECT OR_IDREG, A.ENTIDAD, A.OR_SEGRIE, PD_DISCRETA_ANT, IN_RATINT_ANT, B.PD_DISCRETA, B.IN_RATINT,
          A.IN_SRATIN, case when B.TOTPD <  0.0003 then 0.0003 else B.TOTPD end totpd, PDCONT, FI_PDCONT, B.RATCON, IN_SUCEPT, OR_MODRAT0, IN_SRATIN2
     FROM BAS_MEN.TEMP_PD_MEDIA_EMPRESAS A,
          BAS_MEN.PD_MEDIA_EMPRESAS B
    WHERE A.OR_SEGRIE = B.SEGRIE
      AND A.ENTIDAD = B.ENTIDAD
      AND A.IN_SRATIN = B.IN_SRATIN
      and (IN_SRATIN2 not in ('CRDE', 'CRDER') or (IN_SRATIN2 in ('CRDE', 'CRDER') and decode(PD_DISCRETA_ANT, 99, 0, PD_DISCRETA_ANT) <= TOTPD));

  commit;
/* HDEV-107790 14/02/2022*/
  dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_EMPRESAS_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

insert into BAS_MEN.pd_temp_empresas_media
   SELECT DISTINCT c.or_idreg, c.entidad, c.or_segrie, pd_discreta_ant,
                   in_ratint_ant, d.pd_discreta, d.in_ratint, c.in_sratin,
                   CASE
                      WHEN d.totpd < 0.0003
                         THEN 0.0003
                      ELSE d.totpd
                   END totpd, pdcont, fi_pdcont, d.ratcon, in_sucept,
                   or_modrat0, in_sratin2
              FROM (select f.*
                      from bas_men.temp_pd_media_empresas f,
                      BAS_MEN.pd_temp_empresas_media  e
                   where f.or_idreg = e.or_idreg(+)
                   and e.or_idreg is null
                   and f.in_sratin2 NOT IN ('CRDE', 'CRDER')) c,
                   (select * from bas_men.pd_media_empresas where entidad = 'BS') d
             WHERE c.or_segrie = d.segrie
               AND c.in_sratin = d.in_sratin;

commit;
 /* HDEV-107790 14/02/2022*/
  dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_EMPRESAS_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

   MERGE /*+ full(upd) parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_AIRB_PD Upd
       USING BAS_MEN.pd_temp_empresas_media  Sel
          ON (Upd.OR_IDREG = Sel.OR_IDREG)
        WHEN MATCHED THEN
      UPDATE
         SET FI_PD_COREPS = sel.TOTPD,
             FI_PDPOOL = sel.TOTPD,
             OR_PUNTFIN = 0,
             IN_RATINT  = sel.IN_RATINT,
             FI_PDCONT = sel.PDCONT,
             FI_RATCON = sel.RATCON;

 COMMIT;

 VN_NUMERR:= 6;
 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK',
        REG_UPD_OK = VN_COUNT
  WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.1 FNC_PD_MEDIA_EMP '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END; -- FNC_CALCUL_PD_MEDIA

  /*******************************************************************************************/
  /*******************************************************************************************/
  /*******************************************************************************************/
  /**                                FNC_CALCUL_PD_MEDIA_PART COMPORTAMENTAL                **/
  /*******************************************************************************************/
  /*******************************************************************************************/
  /*******************************************************************************************/

  PROCEDURE FNC_PD_MEDIA_PART_COMP IS

    Cte_Nom_Proc_PDMPComp CONSTANT VARCHAR2(60) := '16.3 FNC_PD_MEDIA_PART_COMP '||PV_TABLA;
    VN_Count        NUMBER;
    VN_OR_PUNTFINS  FLOAT;
    VV_ROWID        BAS_MEN.BASILEA.OR_IDREG%TYPE;
    Vv_Mensaje_Err  VARCHAR2(255)                         DEFAULT 'OK';

    CURSOR Cur_BASILEA3 IS
      SELECT /*+ FULL(A) */ A.TIPO_ENTIDAD, A.MODELO_SEGFIC, A.IN_SRATIN, B.POOL_PD AS PD
        FROM (SELECT TIPO_ENTIDAD, MODELO_SEGFIC, IN_SRATIN, MIN(ABS(DIFF1)) DIFF
                FROM (SELECT DISTINCT A.TIPO_ENTIDAD, B.MODELO_SEGFIC, B.IN_SRATIN, A.POOL_PD, B.PD_MEDIA, ABS(A.POOL_PD - B.PD_MEDIA) DIFF1
                       FROM BAS_MEN.MAESTRO_PD_PRESTAMOS_COMP A,
                            BAS_MEN.MAESTRO_PD_MEDIA_CMP B
                      WHERE A.TIPO_ENTIDAD = B.TIPO_OPMIGR
                        AND A.PROD_SCORE = SUBSTR(B.MODELO_SEGFIC,2,2)
                        AND CASE WHEN IN_REFINAN = 0 THEN 'CSORVI'
                                 WHEN IN_REFINAN = 1 THEN 'REFI'
                             END = B.IN_SRATIN
                        AND A.ID_RES = SUBSTR(B.MODELO_SEGFIC,4,1))
               GROUP BY TIPO_ENTIDAD, MODELO_SEGFIC, IN_SRATIN) A,
             (SELECT DISTINCT A.TIPO_ENTIDAD, B.MODELO_SEGFIC, B.IN_SRATIN, A.POOL_PD, B.PD_MEDIA, ABS(A.POOL_PD - B.PD_MEDIA) DIFF
               FROM BAS_MEN.MAESTRO_PD_PRESTAMOS_COMP A,
                    BAS_MEN.MAESTRO_PD_MEDIA_CMP B
              WHERE A.TIPO_ENTIDAD = B.TIPO_OPMIGR
                AND A.PROD_SCORE = SUBSTR(B.MODELO_SEGFIC,2,2)
                AND CASE WHEN IN_REFINAN = 0 THEN 'CSORVI'
                         WHEN IN_REFINAN = 1 THEN 'REFI'
                    END = B.IN_SRATIN
                AND A.ID_RES = SUBSTR(B.MODELO_SEGFIC,4,1)) B
       WHERE A.TIPO_ENTIDAD  = B.TIPO_ENTIDAD
         AND A.MODELO_SEGFIC = B.MODELO_SEGFIC
         AND A.IN_SRATIN     = B.IN_SRATIN
         AND A.DIFF          = B.DIFF;


    CURSOR Cur_BASILEA1 IS
      SELECT DISTINCT PDMedia.PDCONT, MaePD.RATING, PDMedia.MODELO_SEGFIC
        FROM BAS_MEN.MAESTRO_PD_MEDIA_CMP     PDMedia
           , BAS_MEN.MAESTRO_PD_POOLPD      MaePD
       WHERE MaePD.PDMIN  < PDMedia.PDCONT
         AND MaePD.PDMAX >= PDMedia.PDCONT;

  BEGIN

    VN_NUMERR:= 0;

      -- Información en el log de proceso del inicio de este. El procedimiento ya realiza el COMMIT;
      BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proc_PDMPComp, 'INICIADO');

    VN_NUMERR:= 1;

    /*******************************************************************************************************************/
    -- Obtención de las exposiciones a las que se le ha de informar la PD_MEDIA. Se informan en BAS_MEN.TEMP_PD_CMP
    /*******************************************************************************************************************/

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PD_CMP');
    /* HDEV-107790 14/02/2022*/
    dbms_stats.gather_table_stats('BAS_MEN', 'TEMP_PD_CMP', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    INSERT /*+ parallel (ActPDMedia 8) */ INTO BAS_MEN.TEMP_PD_CMP ActPDMedia
    SELECT  /*+ full(BasiR) full(AirbPDR) parallel (BasiR 8) parallel (AirbPDR 8) */
           BasiR.OR_IDREG
         , CASE
               WHEN BasiR.IN_SRATIN  in ('SSOR', 'SSOL', 'CSIVI')     THEN 'CSORVI'                        -- 14/11/2017 Se añaden los 'CSIVI'
               WHEN BasiR.IN_SRATIN  in ('SSORR', 'SSOLR')  THEN 'REFI'
               ELSE                                  '?'
           END                  AS IN_SRATIN -- Para PDMedia   /* 20191030 - ARM - Tratar como entidad BS en lugar de la entidad de origen los empleados de entidades adquiridas del comportamental.*/
         , CASE WHEN BasiR.IN_OPER_MIGR IN ( 'BG', 'BGT' ) OR (BasiR.IN_SUCEPT IN ('HINSTE','CONSTE') AND BasiR.IN_OPER_MIGR IN ('CAM','BMN','BCG','LBI')) THEN 'BS'
                ELSE                                            BasiR.IN_OPER_MIGR
           END                  AS Tipo_OpMigr
         , BasiR.OR_SEGFIC2     AS Modelo_SegFic
         , /*case when BasiR.In_Metode = 'AIRB' or BASIr.in_metode_1 = 'AIRB' OR SUBSTR(IN_TIPOREG,1,2) = 'MM' then 'AIRB' else in_metode end as */
         in_metode
         , AirbPDR.FI_PD_COREPS AS PD_Ant
     FROM BAS_MEN.BASILEA                BasiR
        , BAS_MEN.BASILEA_AIRB_PD        AirbPDR
    WHERE BasiR.OR_IDREG      = AirbPDR.OR_IDREG
      AND BasiR.IN_SRATIN    IN ('SSOR', 'SSORR', 'SSOL', 'CSIVI', 'SSOLR')
      --AND BasiR.OR_FECOPE     < PN_FECPRO-10000
      /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo
      AND (BasiR.OR_FECOPE < PN_FECPRO-10000 OR BasiR.OR_FECSCO < PN_FECPRO-10000) */
      AND (OR_FECOPE > 19000101
         AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) <= 6
              AND TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
           OR
             (ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) > 6
             AND TO_DATE(NULLIF(OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))) -- Comportamental
      AND BasiR.IN_SEGMBSINI IN ('103', '104');

    COMMIT;
     /* HDEV-107790 14/02/2022*/
     dbms_stats.gather_table_stats('BAS_MEN', 'TEMP_PD_CMP', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    VN_NUMERR:= 2;

    /************************************************************************************************************/
    -- Cálculo de pd_media de Vigentes (CSORVI) y Refinanciados (REFI) para establecer en los SSOR y SSORR.
    -- Por Sratin, TIPO_OPMIGR (Procedencia Migrados))y MODELO_SEGFIC (Segmento y Nacionalidad)
    -- Se informa en el BAS_MEN.MAESTRO_PD_MEDIA_CMP
    /************************************************************************************************************/

     IF FECHA_CAL('COMPORTAMENTAL') = PV_FECHA THEN

            BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_MEDIA_CMP');
            /* HDEV-107790 14/02/2022*/
            dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_PD_MEDIA_CMP', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

            INSERT /*+ parallel (MaePdMedia 8) */ INTO BAS_MEN.MAESTRO_PD_MEDIA_CMP MaePdMedia
                 SELECT /*+ FULL(Basi) FULL(PD) parallel (Basi 8) parallel (PD 8)*/
                        Basi.IN_SRATIN                                                                 /* 20191030 - ARM - Tratar como entidad BS en lugar de la entidad de origen los empleados de entidades adquiridas del comportamental. */
                      , CASE WHEN Basi.IN_OPER_MIGR IN ( 'BG', 'BGT' ) OR (Basi.IN_SUCEPT IN ('HINSTE','CONSTE') AND Basi.IN_OPER_MIGR IN ('CAM','BMN','BCG','LBI')) THEN 'BS'
                             ELSE Basi.IN_OPER_MIGR
                        END                                                                                AS TIPO_OPMIGR
                      , Basi.OR_SEGFIC2                                                                    AS MODELO_SEGFIC
                      , decode(sum(Basi.fi_eadairb), 0, 0, SUM((Basi.fi_eadairb) * PD.FI_PD_COREPS)/ SUM(Basi.fi_eadairb)) AS PD_MEDIA
                      , ROUND( ( SUM( (Basi.OR_DISPTO + Basi.OR_DISBLE + Basi.OR_AVALES + Basi.OR_FUTURS + Basi.OR_REPOS + Basi.OR_AJUVAL) * PD.IN_RATINT )
                               / SUM(  Basi.OR_DISPTO + Basi.OR_DISBLE + Basi.OR_AVALES + Basi.OR_FUTURS + Basi.OR_REPOS + Basi.OR_AJUVAL)
                               )/0.5,0
                              )* 0.5                                                                       AS RATING
                      , 99                                                                                 AS TOTPD
                      , decode(sum(Basi.fi_eadairb), 0, 0, SUM((Basi.fi_eadairb) * PD.FI_PDCONT)/ SUM(Basi.fi_eadairb)) AS PDCONT
                      , ROUND( ( SUM( (Basi.OR_DISPTO + Basi.OR_DISBLE + Basi.OR_AVALES + Basi.OR_FUTURS + Basi.OR_REPOS + Basi.OR_AJUVAL) * PD.FI_RATCON )
                               / SUM(  Basi.OR_DISPTO + Basi.OR_DISBLE + Basi.OR_AVALES + Basi.OR_FUTURS + Basi.OR_REPOS + Basi.OR_AJUVAL)
                               )/0.5,0
                              )* 0.5                                                                       AS RATCON
                      , SUM(Basi.FI_EADAIRB)                                                               AS EAD
                      , COUNT(*)                                                                           AS TOT_REG
                  FROM BAS_MEN.BASILEA         Basi
                     , BAS_MEN.BASILEA_AIRB_PD PD
                 WHERE Basi.FI_ELIMI1                IN ('NO', 'RFNEG', 'EQUITY', 'SRABS')
                   AND Basi.IN_SRATIN                IN ('CSORVI', 'REFI') -- REFI pD media de SSORR
                   AND Basi.IN_INDMOR                 = 'NO'
                   AND Basi.IN_SEGMBSINI             IN ('103', '104')
                   AND Basi.OR_IDREG                  = PD.OR_IDREG
                   --and Basi.or_fecope                 < PN_FECPRO-10000
                   /* 04/08/2021 RMR Cambiada revisión del campo para utilizar scoring comportamental o reactivo
                   AND (Basi.OR_FECOPE < PN_FECPRO-10000 OR Basi.OR_FECSCO < PN_FECPRO-10000) */
                   AND (OR_FECOPE > 19000101
                      AND ((ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) <= 6
                           AND TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12))
                        OR
                          (ABS(MONTHS_BETWEEN(TO_DATE(nvl(OR_FECSCO, PN_FECPRO),'YYYYMMDD'), TO_DATE(OR_FECOPE,'YYYYMMDD') )) > 6
                          AND TO_DATE(NULLIF(OR_FECOPE,10101),'YYYYMMDD') < add_months(TO_DATE(PN_FECPRO,'YYYYMMDD'),-12)))) -- Comportamental
                   AND Basi.or_fecope                <> 0  -- Pdte. Determinar
                   AND (  Basi.IN_METODE              = 'AIRB'
                       OR SUBSTR(Basi.IN_TIPOREG,1,2) = 'MM'
                       OR Basi.IN_METODE_1            = 'AIRB'
                       )
                 GROUP BY Basi.IN_SRATIN
                        , CASE WHEN Basi.IN_OPER_MIGR IN ( 'BG', 'BGT' ) OR (Basi.IN_SUCEPT IN ('HINSTE','CONSTE') AND Basi.IN_OPER_MIGR IN ('CAM','BMN','BCG','LBI')) THEN 'BS'
                               ELSE Basi.IN_OPER_MIGR
                          END
                        , Basi.OR_SEGFIC2;

            COMMIT;
            /* HDEV-107790 14/02/2022*/
              dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_PD_MEDIA_CMP', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

            VN_NUMERR:= 3;
            VN_COUNT:= 0;


            FOR CUR IN Cur_BASILEA3 LOOP

                 VN_COUNT:= VN_COUNT + 1;

                 UPDATE BAS_MEN.MAESTRO_PD_MEDIA_CMP
                    SET TOTPD = CUR.PD
                  WHERE TIPO_OPMIGR = CUR.TIPO_ENTIDAD
                    AND MODELO_SEGFIC = CUR.MODELO_SEGFIC
                    AND IN_SRATIN = CUR.IN_SRATIN
                    AND ROWNUM = 1;

                 IF MOD(VN_COUNT,1)=0 THEN
                       UPDATE BAS_MEN.CONTROL_PROCES
                       SET REG_INS_OK = VN_COUNT
                     WHERE PROCES = Cte_Nom_Proc_PDMPComp
                       AND ESTAT  = 'INICIADO';

                    COMMIT;

                 END IF;

             END LOOP;

             COMMIT;

               VN_NUMERR:= 6;

            FOR CUR IN Cur_BASILEA1 LOOP

                VN_COUNT:= VN_COUNT + 1;

                UPDATE BAS_MEN.MAESTRO_PD_MEDIA_CMP
                   SET RATCON = CUR.RATING
                 WHERE MODELO_SEGFIC = CUR.MODELO_SEGFIC;

                 IF MOD(VN_COUNT,1)=0 THEN
                        UPDATE BAS_MEN.CONTROL_PROCES
                         SET REG_UPD_KO = VN_COUNT
                       WHERE PROCES = Cte_Nom_Proc_PDMPComp
                         AND ESTAT  = 'INICIADO';

                 COMMIT;

                 END IF;

            END LOOP;

            COMMIT;

      END IF;        -- END IF FECHA_CAL

      VN_NUMERR:= 7;

 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.pd_temp_pres_comp_media');
/* HDEV-107790 14/02/2022*/
dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_PRES_COMP_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

insert into BAS_MEN.pd_temp_pres_comp_media
      SELECT ExpAAct.OR_IDREG, ExpAAct.MODELO_SEGFIC, ExpAAct.PD_ANT, MaePDMedia.PD_MEDIA, MaePDMedia.RATING
          , MaePDMedia.IN_SRATIN, ExpAAct.in_sratin  AS SRatin
          , MaePDMedia.TOTPD, MaePDMedia.PDCONT, MaePDMedia.RATCON, ExpAAct.IN_METODE
        FROM BAS_MEN.TEMP_PD_CMP       ExpAAct
           , BAS_MEN.MAESTRO_PD_MEDIA_CMP MaePDMedia
       WHERE ExpAAct.IN_SRATIN     = MaePDMedia.IN_SRATIN
         AND ExpAAct.TIPO_OPMIGR   = MaePDMedia.TIPO_OPMIGR
         AND ExpAAct.MODELO_SEGFIC = MaePDMedia.MODELO_SEGFIC;

commit;
/* HDEV-107790 14/02/2022*/
dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_PRES_COMP_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

   MERGE /*+ full(upd) parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_AIRB_PD Upd
       USING BAS_MEN.pd_temp_pres_comp_media  Sel
          ON (Upd.OR_IDREG = Sel.OR_IDREG)
        WHEN MATCHED THEN
      UPDATE
         SET FI_PD_COREPS = sel.TOTPD,
             FI_PDPOOL = sel.TOTPD,
             FI_PDCONT = sel.PDCONT;

   COMMIT;


       PV_RET := 'OK';

      --
      -- Actualización del fin OK en Control Proceso. El procedimiento ya realiza el COMMIT;
      --

      BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proc_PDMPComp, 'FINALIZADO', PV_RET, NULL, NULL);


  EXCEPTION
    WHEN OTHERS THEN
              --
              -- Actualización del fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
              --
            vV_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' C.E.'||VN_NumErr,1,255);
            PV_RET        := 'KO';

            ROLLBACK;

            BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proc_PDMPComp, 'FINALIZADO', PV_RET, vV_Mensaje_Err);

            RAISE;

  END; -- FNC_CALCUL_PD_MEDIA_PART_COMP


/*******************************************************************************************/
/**                                FNC_CALCUL_PD_MEDIA_CCAA                               **/
/*******************************************************************************************/

PROCEDURE FNC_CALCUL_PD_MEDIA_CCAA IS

  VN_OR_PUNTFINS  FLOAT;

CURSOR BASILEA1 IS
   SELECT DISTINCT PDCONT, B.RATING, MODELO, ENTIDAD, IN_SRATIN
      FROM BAS_MEN.MAESTRO_MEDIA_CCAA A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= PDCONT
       AND PDMAX > PDCONT;

CURSOR BASILEA2 IS
   SELECT DISTINCT TOTPD, B.RATING, MODELO, ENTIDAD, IN_SRATIN
      FROM BAS_MEN.MAESTRO_MEDIA_CCAA A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= TOTPD
       AND PDMAX > TOTPD;

--En la PD Media ya no nos quedamos con la PD más próxima superior, simplemente con la que tenga menor diferencia.

CURSOR BASILEA3 IS
    SELECT /*+ FULL(A) */ A.ENTIDAD, B.POOL_PD, A.IN_SRATIN
      FROM (SELECT IN_SRATIN, ENTIDAD, MIN(ABS(DIFF)) DIFF
            FROM (SELECT DISTINCT ENTIDAD, IN_SRATIN, A.POOL_PD, B.PD_MEDIA, A.POOL_PD - B.PD_MEDIA DIFF
                    FROM BAS_MEN.MAESTRO_POOLPD_CCAA A,
                         BAS_MEN.MAESTRO_MEDIA_CCAA B
                   WHERE A.TIPO = DECODE(B.IN_SRATIN, 'CRVI', 'NORMAL', 'NORMAL', B.IN_SRATIN))        /* Rating inconsistente TAR-259 /17/12/19  *//*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
                GROUP BY ENTIDAD, IN_SRATIN) A,
                 (SELECT DISTINCT ENTIDAD, IN_SRATIN, A.POOL_PD, B.PD_MEDIA, A.POOL_PD - B.PD_MEDIA DIFF
                    FROM BAS_MEN.MAESTRO_POOLPD_CCAA A,
                         BAS_MEN.MAESTRO_MEDIA_CCAA B
                   WHERE A.TIPO = DECODE(B.IN_SRATIN, 'CRVI', 'NORMAL', 'NORMAL', B.IN_SRATIN)) B    /* Rating inconsistente TAR-259 /17/12/19*/    /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
     WHERE A.DIFF   = ABS(B.DIFF)
       AND A.ENTIDAD = B.ENTIDAD
       AND A.IN_SRATIN = B.IN_SRATIN;

BEGIN

 VN_NUMERR:= 1;
 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.3 FNC_PD_MEDIA_CCAA '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_NUMERR:= 1;

BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PD_CCAA');

INSERT /*+ parallel (b 8) */ INTO BAS_MEN.TEMP_PD_CCAA b
        SELECT /*+ FULL(A) FULL(C) parallel (a 8) parallel (c 8) */ A.OR_IDREG,
               CASE
                   WHEN A.IN_SRATIN in ('CRDER', 'SRR') THEN
                           'CAREFI'
                   ELSE
                         'CA000'
               END MODELO, FI_PD_original PD_DISCRETA_ANT,
               -- 201512 IN_SRATIN para todo la BBDD control del Metodo AIRB -- JCV2
               CASE WHEN A.IN_SRATIN IN ('SRR', 'CRDER') THEN 'REFI'
                    ELSE  'CRVI'
               END IN_SRATIN,
               '?' SEGMENTO, FI_PDCONT, IN_SUCEPT, OR_MODRAT0,
              case
                   when IN_OPER_MIGR = 'BMN' then 'BMN'
                   WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
                   WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
                   else 'BS'
              end as entidad,
              A.IN_SRATIN
         FROM BAS_MEN.BASILEA A,
              BAS_MEN.BASILEA_AIRB_PD C
        WHERE A.OR_IDREG = C.OR_IDREG
        /* INI NAV 25/05/20220 - HDEV-154082 - Tratamiento outdated/unrated CCAA
          AND IN_SRATIN IN ('SR','CRIDE','CRDE','?', 'SRR', 'CRDER', 'CIVI')    -- Rating inconsistente TAR-259 /17/12/19 */
          /* AND (A.IN_SRATIN IN ('CRIDE','CRDE','?', 'CRDER', 'CIVI') OR (A.IN_SRATIN IN ('SR', 'SRR') AND IN_METODE <> 'AIRB'))
          AND IN_INDMOR = 'NO'
          AND (IN_SEGMBSINI IN ('101', '102', '002', '017') OR SUBSTR(OR_SEGFIC2,1,4) = 'CCAA'); */
          AND IN_METODE = 'STDA' AND IN_SUCEPT = '?'
          AND IN_INDMOR = 'NO'
          AND IN_SEGMBSINI IN ('101', '102', '002', '017');

  COMMIT;


 IF FECHA_CAL('CCAA') = PV_FECHA THEN

                                 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MEDIA_CCAA');

                                  INSERT /*+ parallel (c 8) */ INTO BAS_MEN.MAESTRO_MEDIA_CCAA c
                                      SELECT /*+ full(a) full(b) parallel (a 8) parallel (b 8) */
                                             CASE
                                                  WHEN A.IN_SRATIN = 'REFI' THEN
                                                       'CAREFI'
                                                  ELSE
                                                       'CA000'
                                             END MODELO,
                                             decode(sum(b.fi_eadairb), 0, 0, SUM((b.fi_eadairb) * b.FI_PD_COREPS)/ SUM(b.fi_eadairb)) PD_MEDIA,
                                             ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * B.IN_RATINT)/
                                                    SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT,
                                             0 TOTPD,
                                             '?',
                                             decode(sum(b.fi_eadairb), 0, 0, SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb)) PDCONT,
                                             ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
                                                    SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON,
                                             case
                                                   when IN_OPER_MIGR = 'BMN' then 'BMN'
                                                   WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
                                                   WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
                                                   else 'BS'
                                              end as entidad, A.in_sratin, SUM(A.FI_EADAIRB), COUNT(*)
                                        FROM BAS_MEN.BASILEA A,
                                             BAS_MEN.BASILEA_AIRB_PD B
                                       WHERE A.FI_ELIMI1 IN ('NO', 'RFNEG','EQUITY', 'SRABS')
                                         AND A.IN_SRATIN in ('CRVI','REFI')        -- Rating inconsistente TAR-259 /17/12/19            /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
                                         AND A.IN_INDMOR = 'NO'
                                         AND IN_SEGMBSINI IN ('101', '102', '002', '017')
                                         AND A.OR_IDREG = B.OR_IDREG
                                         /* 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
                                         AND ( A.IN_METODE = 'AIRB'
                                             OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
                                             OR IN_METODE_1 = 'AIRB'
                                             )
                                         GROUP BY
                                               CASE
                                                  WHEN A.IN_SRATIN = 'REFI' THEN
                                                     'CAREFI'
                                                  ELSE
                                                     'CA000'
                                               END ,
                                               case
                                                   when IN_OPER_MIGR = 'BMN' then 'BMN'
                                                   WHEN IN_OPER_MIGR = 'BCG' THEN 'BCG'
                                                   WHEN IN_OPER_MIGR = 'LBI' THEN 'LBI'
                                                   else 'BS'
                                              end, A.in_sratin;


                                 COMMIT;
                                 /* HDEV-107790 14/02/2022*/
                                 dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_MEDIA_CCAA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

                                 VN_NUMERR:= 2;
                                 VN_COUNT:= 0;

                                FOR CUR IN BASILEA3 LOOP

                                    VN_COUNT:= VN_COUNT + 1;

                                    UPDATE BAS_MEN.MAESTRO_MEDIA_CCAA
                                       SET TOTPD = CUR.POOL_PD
                                     WHERE ENTIDAD = CUR.ENTIDAD
                                       AND IN_SRATIN = CUR.IN_SRATIN;

                                     VN_NUMERR:= 4;

                                    IF MOD(VN_COUNT,1)=0 THEN
                                          UPDATE BAS_MEN.CONTROL_PROCES
                                          SET REG_INS_OK = VN_COUNT
                                        WHERE PROCES = '16.3 FNC_PD_MEDIA_CCAA '||PV_TABLA
                                          AND ESTAT  = 'INICIADO';

                                       COMMIT;

                                    END IF;

                                END LOOP;

                                COMMIT;
                                VN_COUNT:= 0;

                                FOR CUR IN BASILEA1 LOOP

                                    VN_COUNT:= VN_COUNT + 1;

                                    UPDATE BAS_MEN.MAESTRO_MEDIA_CCAA
                                       SET RATCON = CUR.RATING
                                     WHERE MODELO = CUR.MODELO
                                       AND ENTIDAD = CUR.ENTIDAD
                                       AND IN_SRATIN = CUR.IN_SRATIN;

                                     VN_NUMERR:= 15;

                                     IF MOD(VN_COUNT,1)=0 THEN
                                            UPDATE BAS_MEN.CONTROL_PROCES
                                             SET REG_UPD_KO = VN_COUNT
                                           WHERE PROCES = '16.1 FNC_PD_MEDIA_CCAA '||PV_TABLA
                                             AND ESTAT  = 'INICIADO';

                                     COMMIT;

                                     END IF;

                                END LOOP;

                                COMMIT;

                                 FOR CUR IN BASILEA2 LOOP

                                    VN_COUNT:= VN_COUNT + 1;

                                    UPDATE BAS_MEN.MAESTRO_MEDIA_CCAA
                                       SET RATING = CUR.RATING
                                     WHERE MODELO = CUR.MODELO
                                       AND ENTIDAD = CUR.ENTIDAD
                                       AND IN_SRATIN = CUR.IN_SRATIN;

                                     VN_NUMERR:= 15;

                                     IF MOD(VN_COUNT,1)=0 THEN
                                            UPDATE BAS_MEN.CONTROL_PROCES
                                             SET REG_UPD_KO = VN_COUNT
                                           WHERE PROCES = '16.3 FNC_PD_MEDIA_CCAA '||PV_TABLA
                                             AND ESTAT  = 'INICIADO';

                                     COMMIT;

                                     END IF;

                                END LOOP;

                                COMMIT;

END IF;   -- END IF FECHA_CAL


VN_NUMERR:= 5;
VN_COUNT := 0;


 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.pd_temp_ccaa_media');
 /* HDEV-107790 14/02/2022*/
 dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_CCAA_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

insert into BAS_MEN.pd_temp_ccaa_media
     SELECT  OR_IDREG, B.ENTIDAD, B.MODELO, PD_DISCRETA_ANT, B.PD_MEDIA, B.RATING, B.IN_SRATIN, case when B.TOTPD <  0.0003 then 0.0003 else B.TOTPD end totpd,
           PDCONT, FI_PDCONT, B.RATCON, IN_SUCEPT, OR_MODRAT0, IN_SRATIN2
      FROM BAS_MEN.TEMP_PD_CCAA E,
           BAS_MEN.MAESTRO_MEDIA_CCAA B
     WHERE B.MODELO = E.MODELO
       AND B.ENTIDAD = E.ENTIDAD
       AND B.IN_SRATIN = E.IN_SRATIN
       and (IN_SRATIN2 not in ('CRDE', 'CRDER') or (IN_SRATIN2 in ('CRDE', 'CRDER') and decode(PD_DISCRETA_ANT, 99, 0, PD_DISCRETA_ANT) <= TOTPD))
   union
   SELECT distinct c.OR_IDREG, d.ENTIDAD, d.MODELO, PD_DISCRETA_ANT, d.PD_MEDIA, d.RATING, d.IN_SRATIN, case when TOTPD <  0.0003 then 0.0003 else TOTPD end totpd,
           PDCONT, FI_PDCONT, d.RATCON, IN_SUCEPT, OR_MODRAT0, IN_SRATIN2
    FROM (SELECT a.or_idreg
            FROM BAS_MEN.TEMP_PD_CCAA A,
                 BAS_MEN.MAESTRO_MEDIA_CCAA B
           WHERE A.MODELO = B.MODELO(+)
             AND A.ENTIDAD = B.ENTIDAD(+)
             AND A.IN_SRATIN = B.IN_SRATIN(+)
             and b.MODELO is null) e,
         BAS_MEN.TEMP_PD_CCAA c,
         BAS_MEN.MAESTRO_MEDIA_CCAA d
   where c.MODELO = d.MODELO
     AND c.IN_SRATIN = d.IN_SRATIN
     and d.entidad = 'BS'
     and c.or_idreg = e.or_idreg
     and (IN_SRATIN2 not in ('CRDE', 'CRDER') or (IN_SRATIN2 in ('CRDE', 'CRDER') and decode(PD_DISCRETA_ANT, 99, 0, PD_DISCRETA_ANT) <= TOTPD));

commit;
/* HDEV-107790 14/02/2022*/
 dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_CCAA_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

   MERGE /*+ full(upd) parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_AIRB_PD Upd
       USING BAS_MEN.pd_temp_ccaa_media  Sel
          ON (Upd.OR_IDREG = Sel.OR_IDREG)
        WHEN MATCHED THEN
      UPDATE
         SET FI_PD_COREPS = sel.TOTPD,
             FI_PDPOOL = sel.TOTPD,
             OR_PUNTFIN = 0,
             IN_RATINT  = sel.RATING,
             FI_PDCONT = sel.PDCONT,
             FI_RATCON = sel.RATCON;

   commit;

 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK',
        REG_UPD_OK = VN_COUNT
  WHERE PROCES = '16.3 FNC_PD_MEDIA_CCAA '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.3 FNC_PD_MEDIA_CCAA '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END; -- FNC_CALCUL_PD_MEDIA_CCAA


/*******************************************************************************************/
/**                                FNC_CALCUL_PD_MEDIA_EEFF                               **/
/*******************************************************************************************/
PROCEDURE FNC_CALCUL_PD_MEDIA_EEFF IS

VN_OR_PUNTFINS  FLOAT;

CURSOR BASILEA IS
    SELECT OR_IDREG, OR_MODRAT0, PD_DISCRETA_ANT, B.PD_MEDIA, B.IN_RATINT,
            IN_SRATIN, B.TOTPD, PDCONT, FI_PDCONT, B.RATCON,  fi_pd_coreps /*  201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
      FROM (SELECT /*+ FULL(A) FULL(C) parallel (a 4) parallel (c 4) */ A.OR_IDREG, 'EEFF' or_modrat0, C.FI_PD_ORIGINAL PD_DISCRETA_ANT, fi_pd_coreps,
                   /*Case
                         when in_metode = 'AIRB' or in_metode_1 = 'AIRB' or substr(in_tiporeg,1,2) = 'MM' then IN_SRATIN
                         else '?'
                   end as*/ A.IN_SRATIN, FI_PDCONT,
                   DECODE(IN_OPER_MIGR, 'BMN', 'BMN', 'BCG', 'BCG', 'LBI', 'LBI', 'BS') ENTIDAD, IN_METODE /*  201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
              FROM BAS_MEN.BASILEA A,
                   BAS_MEN.BASILEA_AIRB_PD C
             WHERE nvl(A.IN_SRATIN, 'SR') IN ('SR', 'CRDE')
               AND IN_INDMOR = 'NO'
               AND A.OR_IDREG = C.OR_IDREG
               AND IN_SEGMBSINI IN ('007', '018', '021', '028', '029', '034')
           ) D
        , BAS_MEN.MAESTRO_PD_MEDIA_EEFF B
       WHERE OR_MODRAT0 = MODELO
         AND B.ENTIDAD = D.ENTIDAD
         AND METODO = 'STDA';

CURSOR BASILEA3 IS
    SELECT A.MODELO, a.metodo, B.POOL_PD, B.ENTIDAD
      FROM (SELECT MODELO, ENTIDAD, metodo, MIN(ABS(DIFF)) DIFF
             FROM (SELECT DISTINCT MODELO, ENTIDAD, metodo, A.POOL_PD, B.PD_MEDIA, (A.POOL_PD - B.PD_MEDIA) DIFF
                    FROM BAS_MEN.MAESTRO_PD_EEFF A,
                         BAS_MEN.MAESTRO_PD_MEDIA_EEFF B)
                GROUP BY MODELO, entidad, metodo) A,
                 (SELECT DISTINCT MODELO, ENTIDAD, metodo, A.POOL_PD, B.PD_MEDIA, (A.POOL_PD - B.PD_MEDIA) DIFF
                    FROM BAS_MEN.MAESTRO_PD_EEFF A,
                         BAS_MEN.MAESTRO_PD_MEDIA_EEFF B) B
     WHERE A.MODELO = B.MODELO
       and a.metodo = b.metodo
       AND A.ENTIDAD = B.ENTIDAD
       AND A.DIFF   = ABS(B.DIFF);

CURSOR BASILEA1 IS
   SELECT DISTINCT TOTPD, B.RATING, MODELO, ENTIDAD
      FROM BAS_MEN.MAESTRO_PD_MEDIA_EEFF A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= TOTPD
       AND PDMAX > TOTPD;

CURSOR BASILEA2 IS
 SELECT DISTINCT PDCONT, B.RATING, MODELO, ENTIDAD
      FROM BAS_MEN.MAESTRO_PD_MEDIA_EEFF A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= PDCONT
       AND PDMAX > PDCONT;

BEGIN

 VN_NUMERR:= 1;
 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  IF FECHA_CAL('EEFF') = PV_FECHA THEN

                          VN_NUMERR:= 1;

                             BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PD_MEDIA_EEFF');
                             /* HDEV-107790 14/02/2022*/
                             dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_PD_MEDIA_EEFF', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

                              COMMIT;

                              INSERT /*+ parallel (c 4) */ INTO BAS_MEN.MAESTRO_PD_MEDIA_EEFF c
                              SELECT /*+ FULL(A) FULL(B)  parallel (a 4) parallel (b 4) */ 'EEFF',
                                     SUM((A.FI_EADAIRB) * B.FI_PD_COREPS)/ SUM(A.FI_EADAIRB) PD_MEDIA,
                                     ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * B.IN_RATINT)/
                                            SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT, 0 TOTPD,
                                     SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb) PDCONT,
                                     ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
                                            SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON, 'STDA' METODO,
                                     count(*), sum(a.fi_eadairb),
                                     DECODE(IN_OPER_MIGR, 'BMN', 'BMN', 'BCG', 'BCG', 'LBI', 'LBI','BS') ENTIDAD /* JCVJCVJCV Si se añade el DECODE NO HAY QUE MODIFICAR LAS SELECTS !!!!*/
                                FROM BAS_MEN.BASILEA A,
                                     BAS_MEN.BASILEA_AIRB_PD B
                               WHERE A.OR_IDREG = B.OR_IDREG
                                 AND FI_ELIMI1 IN ('NO','RFNEG','EQUITY', 'SRABS')
                                 AND A.IN_SRATIN = 'CRVI' -- Rating inconsistente TAR-259 /17/12/19         /*05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso*/
                                 AND IN_INDMOR = 'NO'
                                 AND IN_SEGMBSINI IN ('007', '018', '021', '028', '029', '034')
                                 /* 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método*/
                                 AND ( A.IN_METODE = 'AIRB'
                                     OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
                                     OR IN_METODE_1 = 'AIRB'
                                     )
                               GROUP BY 'EEFF', DECODE(IN_OPER_MIGR, 'BMN', 'BMN', 'BCG', 'BCG', 'LBI', 'LBI','BS');

                             COMMIT;
                             /* HDEV-107790 14/02/2022*/
                             dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_PD_MEDIA_EEFF', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

                             VN_NUMERR:= 3;
                             VN_COUNT:= 0;

                            FOR CUR IN BASILEA3 LOOP

                                VN_COUNT:= VN_COUNT + 1;

                                UPDATE BAS_MEN.MAESTRO_PD_MEDIA_EEFF
                                   SET TOTPD = CUR.POOL_PD
                                 WHERE ENTIDAD = CUR.ENTIDAD;

                                 VN_NUMERR:= 4;

                                IF MOD(VN_COUNT,1)=0 THEN
                                       UPDATE BAS_MEN.CONTROL_PROCES
                                        SET REG_INS_OK = VN_COUNT
                                      WHERE PROCES = '16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA
                                        AND ESTAT  = 'INICIADO';

                                COMMIT;

                                   END IF;

                            END LOOP;

                            COMMIT;

                            FOR CUR IN BASILEA1 LOOP

                                VN_COUNT:= VN_COUNT + 1;

                                UPDATE BAS_MEN.MAESTRO_PD_MEDIA_EEFF
                                   SET IN_RATINT = CUR.RATING
                                 WHERE MODELO = CUR.MODELO
                                   AND ENTIDAD = CUR.ENTIDAD;

                                 VN_NUMERR:= 15;

                                 IF MOD(VN_COUNT,1)=0 THEN
                                        UPDATE BAS_MEN.CONTROL_PROCES
                                         SET REG_UPD_KO = VN_COUNT
                                       WHERE PROCES = '16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA
                                         AND ESTAT  = 'INICIADO';

                                 COMMIT;

                                 END IF;

                            END LOOP;

                            COMMIT;

                             FOR CUR IN BASILEA2 LOOP

                                VN_COUNT:= VN_COUNT + 1;

                                UPDATE BAS_MEN.MAESTRO_PD_MEDIA_EEFF
                                   SET RATCON = CUR.RATING
                                 WHERE MODELO = CUR.MODELO
                                   AND ENTIDAD = CUR.ENTIDAD;

                                 VN_NUMERR:= 15;

                                 IF MOD(VN_COUNT,1)=0 THEN
                                        UPDATE BAS_MEN.CONTROL_PROCES
                                         SET REG_UPD_KO = VN_COUNT
                                       WHERE PROCES = '16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA
                                         AND ESTAT  = 'INICIADO';

                                 COMMIT;

                                 END IF;

                            END LOOP;

                            COMMIT;

 END IF;  -- END IF FECHA_CAL

 VN_NUMERR:= 2;
 VN_COUNT:= 0;

--CURSOR PARA ESTABLECER EN BASILEA LA PD_MEDIA DE EEFF.
  FOR CUR IN BASILEA LOOP

    VN_NUMERR     := 3;
    VN_COUNT      := VN_COUNT + 1;
    VV_ROWID      := TO_CHAR(CUR.OR_IDREG);
    VN_NUMERR:= 6;
    VN_OR_PUNTFINS := 0;

    IF CUR.IN_SRATIN = 'CRDE' THEN

       IF CUR.PD_DISCRETA_ANT <= CUR.TOTPD OR CUR.PD_DISCRETA_ANT in (1, 99) THEN

          UPDATE BAS_MEN.BASILEA_AIRB_PD
             SET FI_PD_COREPS = CUR.TOTPD,
                 FI_PDPOOL = CUR.TOTPD,
                 OR_PUNTFIN = VN_OR_PUNTFINS,
                 IN_RATINT  = CUR.IN_RATINT,
                 FI_PDCONT = CUR.PDCONT,
                 FI_RATCON = CUR.RATCON
           WHERE OR_IDREG = CUR.OR_IDREG;

       ELSIF CUR.PD_DISCRETA_ANT < cur.fi_pd_coreps and cur.PD_DISCRETA_ANT <> 0.0001 then

                UPDATE BAS_MEN.BASILEA_AIRB_PD Upd_PD
                SET Upd_PD.FI_PD_COREPS = CUR.PD_DISCRETA_ANT,
                    Upd_PD.FI_PDPOOL = CUR.PD_DISCRETA_ANT,
                    Upd_PD.OR_PUNTFIN = VN_OR_PUNTFINS
              WHERE OR_IDREG = CUR.OR_IDREG;

       END IF;


    ELSIF CUR.IN_SRATIN IN ('SR') THEN

          UPDATE BAS_MEN.BASILEA_AIRB_PD
             SET FI_PD_COREPS = CUR.TOTPD,
                 FI_PDCONT = CUR.PDCONT,
                 FI_PDPOOL = CUR.TOTPD,
                 FI_RATCON = CUR.RATCON,
                 OR_PUNTFIN = VN_OR_PUNTFINS,
                 IN_RATINT  = CUR.IN_RATINT
           WHERE OR_IDREG = CUR.OR_IDREG;

    END IF;

    IF MOD(VN_COUNT,10000)=0 THEN

       UPDATE BAS_MEN.CONTROL_PROCES
          SET REG_UPD_OK = VN_COUNT
        WHERE PROCES = '16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA
          AND ESTAT  = 'INICIADO';
       COMMIT;

    END IF;

 END LOOP;

 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK',
        REG_UPD_OK = VN_COUNT
  WHERE PROCES = '16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.4 FNC_PD_MEDIA_EEFF '||PV_TABLA
        AND ESTAT  = 'INICIADO';

     commit;
     raise;

END; -- FNC_CALCUL_PD_MEDIA_EEFF

/*******************************************************************************************/
/**                                FNC_CALCUL_PD_MEDIA_TARJ_CRED                          **/
/*******************************************************************************************/

PROCEDURE FNC_CALCUL_PD_MEDIA_TARJ_CRED IS

  VN_OR_PUNTFINS  FLOAT;

CURSOR BASILEA4 IS
   SELECT DISTINCT TOTPD, b.RATING, modelo, ENTIDAD
      FROM BAS_MEN.MAESTRO_MEDIA_TARJ_CRED A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= TOTPD
       AND PDMAX > TOTPD;

CURSOR BASILEA5 IS
   SELECT DISTINCT TOTPD, b.RATING, modelo, ENTIDAD
      FROM BAS_MEN.MAESTRO_MEDIA_TARJ_CRED A,
           BAS_MEN.MAESTRO_PD_POOLPD B
     WHERE PDMIN <= PDCONT
       AND PDMAX > PDCONT;

--En la PD Media ya no nos quedamos con la PD más próxima superior, simplemente con la que tenga menor diferencia.

CURSOR BASILEA2 IS
  SELECT /*+ FULL(A) */A.MODELO, B.PD, B.ENTIDAD
    FROM (SELECT MODELO, ENTIDAD, MIN(ABS(DIFF)) DIFF
            FROM (SELECT DISTINCT B.MODELO,  B.ENTIDAD, A.POOL_PD_K PD, B.PD_MEDIA, A.POOL_PD_K - B.PD_MEDIA DIFF
                    FROM BAS_MEN.MAESTRO_PD_TARJETAS A,
                         BAS_MEN.MAESTRO_MEDIA_TARJ_CRED B
                   WHERE A.SEGMENTO_CALI = B.MODELO)
                GROUP BY MODELO, ENTIDAD) A,
                 (SELECT DISTINCT B.MODELO, B.ENTIDAD, A.POOL_PD_K PD, B.PD_MEDIA, A.POOL_PD_K - B.PD_MEDIA DIFF
                    FROM BAS_MEN.MAESTRO_PD_TARJETAS A,
                         BAS_MEN.MAESTRO_MEDIA_TARJ_CRED B
                   WHERE A.SEGMENTO_CALI = B.MODELO) B
   WHERE A.MODELO = B.MODELO
     AND A.DIFF   = ABS(B.DIFF)
     AND A.ENTIDAD = B.ENTIDAD;

CURSOR BASILEA3 IS
  SELECT /*+ FULL(A) */A.MODELO, B.PD, B.ENTIDAD
    FROM (SELECT MODELO, ENTIDAD, MIN(ABS(DIFF)) DIFF
            FROM (SELECT DISTINCT B.MODELO,  B.ENTIDAD, A.POOL_PD_K PD, B.PD_MEDIA, A.POOL_PD_K - B.PD_MEDIA DIFF
                    FROM BAS_MEN.MAESTRO_PD_CREDITOS A,
                         BAS_MEN.MAESTRO_MEDIA_TARJ_CRED B
                   WHERE A.SEGMENTO_CALI = B.MODELO)
                GROUP BY MODELO, ENTIDAD) A,
                 (SELECT DISTINCT B.MODELO, B.ENTIDAD, A.POOL_PD_K PD, B.PD_MEDIA, A.POOL_PD_K - B.PD_MEDIA DIFF
                    FROM BAS_MEN.MAESTRO_PD_CREDITOS A,
                         BAS_MEN.MAESTRO_MEDIA_TARJ_CRED B
                   WHERE A.SEGMENTO_CALI = B.MODELO) B
   WHERE A.MODELO = B.MODELO
     AND A.DIFF   = ABS(B.DIFF)
     AND A.ENTIDAD = B.ENTIDAD;

BEGIN

 VN_NUMERR:= 1;
 INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES ('16.6 FNC_PD_MEDIA_TARJ_CRED '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_NUMERR:= 1;


 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PD_COMPORTAMENTAL');
 /* HDEV-107790 14/02/2022*/
  dbms_stats.gather_table_stats('BAS_MEN', 'TEMP_PD_COMPORTAMENTAL', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

 INSERT /*+ parallel (D 4) */ INTO BAS_MEN.TEMP_PD_COMPORTAMENTAL  D
  SELECT /*+ FULL(A) FULL(C) parallel (a 4) parallel (c 4) */ A.OR_IDREG,
                   A.in_sratin, -- 201512 SRAT para todas las exposiciones
                   DECODE(OR_SEGFIC2, 'CRP', 'K_segm0', 'T_segm0') MODELO,
                   FI_PD_COREPS PD_DISCRETA_ANT,
                   A.IN_SRATIN,

                   DECODE(IN_OPER_MIGR, 'CAM', 'CAM', 'BMN', 'BMN', 'BCG', 'BCG', 'LBI', 'LBI','BS') ENTIDAD
              FROM BAS_MEN.BASILEA A,
                   BAS_MEN.BASILEA_AIRB_PD C
             WHERE (A.IN_SRATIN IN ('SSOR', '?')
                or A.IN_SRATIN = 'SSEM' and or_puntsco = 9999)
               AND IN_INDMOR = 'NO'
               AND IN_SUCEPT <> '?'
               and in_segmbsini in ('106', '107')
               AND A.OR_IDREG = C.OR_IDREG;

COMMIT;
 /* HDEV-107790 14/02/2022*/
dbms_stats.gather_table_stats('BAS_MEN', 'TEMP_PD_COMPORTAMENTAL', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

 IF FECHA_CAL('TARJ_CRED') = PV_FECHA  THEN

                                         BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MEDIA_TARJ_CRED');

                                         commit;
                                         /* HDEV-107790 14/02/2022*/
                                        dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_MEDIA_TARJ_CRED', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

                                           VN_NUMERR:= 11;

                                          INSERT /*+ parallel (c 4) */ INTO BAS_MEN.MAESTRO_MEDIA_TARJ_CRED c
                                              SELECT /*+ FULL(A) FULL(B) parallel (a 4) parallel (b 4) */ DECODE(OR_SEGFIC2, 'CRP', 'K_segm0', 'T_segm0') MODELO,
                                                     SUM((b.fi_eadairb) * b.FI_PD_COREPS)/ SUM(b.fi_eadairb) PD_MEDIA,
                                                     ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * B.IN_RATINT)/
                                                            SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 IN_RATINT,
                                                     0 TOTPD,
                                                     '?',
                                                     SUM((b.fi_eadairb) * b.FI_PDCONT)/ SUM(b.fi_eadairb) PDCONT,
                                                     ROUND((SUM((OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS) * FI_RATCON)/
                                                            SUM(OR_DISPTO + OR_DISBLE + OR_AVALES + OR_FUTURS + OR_REPOS))/0.5,0)* 0.5 RATCON,
                                                     DECODE(IN_OPER_MIGR, 'CAM', 'CAM', 'BMN', 'BMN', 'BCG', 'BCG', 'LBI', 'LBI','BS') ENTIDAD
                                                FROM BAS_MEN.BASILEA A,
                                                     BAS_MEN.BASILEA_AIRB_PD B
                                               WHERE A.FI_ELIMI1 IN ('NO', 'RFNEG','EQUITY', 'SRABS')
                                                 AND A.IN_SRATIN = 'CSORVI'
                                                 AND A.IN_INDMOR = 'NO'
                                                 AND IN_SEGMBSINI IN ('106', '107')
                                                 AND NVL(A.FI_MESCURA,0) = 0
                                                 AND A.OR_IDREG = B.OR_IDREG
                                                 -- 201512 SRAT para todas las exposiciones. Por lo que se añade un control de que sólo si el método es AIRB o por cambio de método
                                                 AND ( A.IN_METODE = 'AIRB'
                                                     OR SUBSTR(A.IN_TIPOREG,1,2) = 'MM'
                                                     OR IN_METODE_1 = 'AIRB'
                                                     )
                                                 GROUP BY DECODE(OR_SEGFIC2, 'CRP', 'K_segm0', 'T_segm0'),
                                                       DECODE(IN_OPER_MIGR, 'CAM', 'CAM', 'BMN', 'BMN', 'BCG', 'BCG', 'LBI', 'LBI','BS');

                                         COMMIT;
                                         /* HDEV-107790 14/02/2022*/
                                        dbms_stats.gather_table_stats('BAS_MEN', 'MAESTRO_MEDIA_TARJ_CRED', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

                                         VN_NUMERR:= 2;
                                         VN_COUNT:= 0;

                                         FOR CUR IN BASILEA2 LOOP

                                            VN_COUNT:= VN_COUNT + 1;

                                             VN_NUMERR:= 3;

                                            UPDATE BAS_MEN.MAESTRO_MEDIA_TARJ_CRED
                                               SET TOTPD = CUR.PD
                                             WHERE MODELO = CUR.MODELO
                                               AND ENTIDAD = CUR.ENTIDAD;

                                        END LOOP;

                                        COMMIT;

                                        FOR CUR IN BASILEA3 LOOP

                                            VN_COUNT:= VN_COUNT + 1;

                                            UPDATE BAS_MEN.MAESTRO_MEDIA_TARJ_CRED
                                               SET TOTPD = CUR.PD
                                             WHERE MODELO = CUR.MODELO
                                               AND ENTIDAD = CUR.ENTIDAD;

                                             VN_NUMERR:= 4;

                                            IF MOD(VN_COUNT,1)=0 THEN
                                                  UPDATE BAS_MEN.CONTROL_PROCES
                                                  SET REG_INS_OK = VN_COUNT
                                                WHERE PROCES = '16.6 FNC_PD_MEDIA_TARJ_CRED '||PV_TABLA
                                                  AND ESTAT  = 'INICIADO';

                                               COMMIT;

                                            END IF;

                                        END LOOP;

                                        COMMIT;
                                        VN_COUNT:= 0;

                                        FOR CUR IN BASILEA4 LOOP

                                            VN_COUNT:= VN_COUNT + 1;

                                            UPDATE BAS_MEN.MAESTRO_MEDIA_TARJ_CRED
                                               SET RATING = CUR.RATING
                                             WHERE MODELO = CUR.MODELO
                                               AND ENTIDAD = CUR.ENTIDAD;

                                             VN_NUMERR:= 15;

                                             IF MOD(VN_COUNT,1)=0 THEN
                                                    UPDATE BAS_MEN.CONTROL_PROCES
                                                     SET REG_UPD_KO = VN_COUNT
                                                   WHERE PROCES = '16.6 FNC_PD_MEDIA_TARJ_CRED '||PV_TABLA
                                                     AND ESTAT  = 'INICIADO';

                                             COMMIT;

                                             END IF;

                                        END LOOP;

                                        COMMIT;

                                        FOR CUR IN BASILEA5 LOOP

                                            VN_COUNT:= VN_COUNT + 1;

                                            UPDATE BAS_MEN.MAESTRO_MEDIA_TARJ_CRED
                                               SET RATCON = CUR.RATING
                                             WHERE MODELO = CUR.MODELO
                                               AND ENTIDAD = CUR.ENTIDAD;

                                             VN_NUMERR:= 15;

                                             IF MOD(VN_COUNT,1)=0 THEN
                                                    UPDATE BAS_MEN.CONTROL_PROCES
                                                     SET REG_UPD_KO = VN_COUNT
                                                   WHERE PROCES = '16.6 FNC_PD_MEDIA_TARJ_CRED '||PV_TABLA
                                                     AND ESTAT  = 'INICIADO';

                                             COMMIT;

                                             END IF;

                                        END LOOP;

                                        COMMIT;

END IF;  -- END IF FECHA_CAL

 BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.pd_temp_tarj_media');
 /* HDEV-107790 14/02/2022*/
dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_TARJ_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

insert into BAS_MEN.pd_temp_tarj_media
      SELECT OR_IDREG, B.MODELO, PD_DISCRETA_ANT, B.PD_MEDIA, B.RATING, sratin, B.TOTPD, PDCONT, RATCON, d.ENTIDAD
      FROM BAS_MEN.TEMP_PD_COMPORTAMENTAL D,
           BAS_MEN.MAESTRO_MEDIA_TARJ_CRED B
     WHERE D.MODELO = B.MODELO
       AND d.ENTIDAD = B.ENTIDAD
    union
   SELECT distinct C.OR_IDREG, D.MODELO, PD_DISCRETA_ANT, D.PD_MEDIA, D.RATING, sratin, D.TOTPD, PDCONT, RATCON, d.ENTIDAD
    FROM (SELECT  D.or_idreg, D.ENTIDAD
            FROM BAS_MEN.TEMP_PD_COMPORTAMENTAL D,
                 BAS_MEN.MAESTRO_MEDIA_TARJ_CRED B
           WHERE D.MODELO = B.MODELO(+)
             AND D.ENTIDAD = B.ENTIDAD(+)
             and b.MODELO is null) e,
         BAS_MEN.TEMP_PD_COMPORTAMENTAL c,
         BAS_MEN.MAESTRO_MEDIA_TARJ_CRED d
   where c.MODELO = d.MODELO
     and d.entidad = 'BS'
     and c.or_idreg = e.or_idreg;

commit;
/* HDEV-107790 14/02/2022*/
dbms_stats.gather_table_stats('BAS_MEN', 'PD_TEMP_TARJ_MEDIA', cascade=>false, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

   MERGE /*+ full(upd) parallel(Upd 4) parallel(Sel 4) */ INTO BAS_MEN.BASILEA_AIRB_PD Upd
       USING BAS_MEN.pd_temp_tarj_media  Sel
          ON (Upd.OR_IDREG = Sel.OR_IDREG)
        WHEN MATCHED THEN
      UPDATE
         SET FI_PD_COREPS = sel.TOTPD,
             FI_PDPOOL = sel.TOTPD,
             FI_PDCONT = sel.PDCONT;

     commit;

 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK',
        REG_UPD_OK = VN_COUNT
  WHERE PROCES = '16.6 FNC_PD_MEDIA_TARJ_CRED '||PV_TABLA
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            ERROR_ORAC = VV_MENSAJE,
            REG_UPD_OK = VN_COUNT,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '16.6 FNC_PD_MEDIA_TARJ_CRED '||PV_TABLA
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END; -- FNC_CALCUL_PD_MEDIA_TARJ_CRED

--PRINCIPAL--
BEGIN

   IF PN_OPC = 1 THEN
      FNC_CALCUL_PD_OLD;
   ELSIF PN_OPC = 2 THEN
         FNC_PD_AJUSTE_GRUPO_OLD;
   ELSIF PN_OPC = 3 THEN
         FNC_CALCUL_PD_MEDIA_OLD;
   ELSIF PN_OPC = 4 THEN
         FNC_CALCUL_PD;
   ELSIF PN_OPC = 5 THEN
         FNC_PD_AJUSTE_GRUPO;
   ELSIF PN_OPC = 6 THEN
         FNC_CALCUL_PD_MEDIA;
   ELSIF PN_OPC = 7 THEN
         FNC_PD_MEDIA_PART_COMP;
   ELSIF PN_OPC = 8 THEN
         FNC_CALCUL_PD_MEDIA_CCAA;
   ELSIF PN_OPC = 9 THEN
         FNC_CALCUL_PD_MEDIA_EEFF;
   ELSIF PN_OPC = 10 THEN
         FNC_CALCUL_PD_MEDIA_TARJ_CRED;
   END IF;

END;

/

show errors;


create or replace PROCEDURE  BAS_MEN.UPDATE_PROCESO_AIRB_PD (PROCESO IN VARCHAR2)
IS

/* *******************************************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA_AIRB_PD                              */
/* *******************************************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA_AIRB                                          */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA_AIRB_PD                                                */
/*      PARÁMETROS update a ejecutar  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_AIRB_PARAM_SAS                                  */
/*      TABLAS de updates de usuario  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_AIRB_PD_XX_SAS                                  */
/* *******************************************************************************************************************************/

    --
    -- Variables del proceso principal.
    --

    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(255)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT ' ';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA_AIRB_PD';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';
    ncount                  NUMBER                  DEFAULT 0;

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
          where EN_PROCESO = PROCESO
        order by TABLA;

BEGIN
    ROLLBACK;                                                -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.

    v_NumErr := 0;

    FOR C_UPD IN Cursor_Update LOOP

            -- Parámetros relativos al update a procesar
            In_Tabla_Orig := C_UPD.TABLA;

            Cte_Proces          := 'UPDATE PROCESO PD Tabla_Orig: '|| In_Tabla_Orig;
            v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
            --
            -- Información de Inicio en Control del Proceso.
            --
            v_NumErr := 1;
            INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
            VALUES (Cte_Proces, SYSDATE, 'INICIADO');
            COMMIT;
            --
            -- Insersión en tabla de descartes
            --
            v_Numerr := 2;
            v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA_PD SELECT /*+ PARALLEL (A 8)*/ ''' || v_Tabla_Orig || ''' , sysdate , A.* FROM '||  v_Tabla_Base || ' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            COMMIT;
            --
            -- Eliminación de registros en Basilea AIRB.
            --
            v_Numerr := 3;
            v_Sentencia_dinamica := 'DELETE /*+ PARALLEL (A 8)*/ '||v_Tabla_Base||' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            COMMIT;
            --
            -- Insersión de registros en Basilea AIRB.
            --
            v_Numerr := 4;
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (A 8)*/ INTO '||v_Tabla_Base||' A SELECT * FROM '||v_Tabla_Orig;
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            v_RegIns := SQL%ROWCOUNT;
            COMMIT;
            --
            -- Insercción de registros en tabla final.
            --
            v_Numerr := 9;
            v_Sentencia_dinamica := 'INSERT /* + APPEND */ INTO BAS_MEN.UPDATES_BASILEA_AIRB_PD SELECT /*+ PARALLEL (A 8) */ ''' || v_Tabla_Orig || ''' AS TABLA_ORIGEN, sysdate, A.* FROM ' || v_Tabla_Base|| ' A, ' || v_Tabla_Orig || ' B WHERE A.OR_IDREG = B.OR_IDREG';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            --
            -- Actualización del Control del Proceso.
            --
            v_Numerr := 10;
            UPDATE BAS_MEN.CONTROL_PROCES
               SET ESTAT       = 'FINALIZADO'
                 , DATA_FIN    = SYSDATE
                 , FINALITZAT  = v_Fin_Proc
                 , REG_INS_OK  = v_RegIns
                 , ERROR_ORAC  = v_Mensaje_Err
             WHERE PROCES  = Cte_Proces
               AND ESTAT   = 'INICIADO';

            COMMIT;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN

    ROLLBACK;

    v_Fin_Proc   := 'KO';
    v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);
    --
    --      Actualización del Control del Proceso.
    --
    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = v_Fin_Proc
         , ERROR_ORAC  = v_Mensaje_Err
         , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
         , NUM_ERROR   = v_NumErr
      WHERE PROCES  = Cte_Proces
        AND ESTAT   = 'INICIADO';

    COMMIT;
    RAISE;
END;

/

show errors;


create or replace PROCEDURE         BAS_MEN.BASI_CALCULO_PD IS

    vproces   VARCHAR2(40);
    vnumerr   NUMBER(2);
    vcodi     NUMBER(10);
    vdescripcio VARCHAR2(255);

    VV_TABLA      VARCHAR2(200):= 'BAS_MEN.BASILEA';
    VN_FECPRO     NUMBER(8); -- Ojo con la fecha del proceso.
    VN_MESPRO     NUMBER(6);   -- Ojo con la fecha del proceso.
    VN_OPC_DER    NUMBER:= 1;
    VN_F          NUMBER:= 1;
    VN_OPCBSTDA   NUMBER:= 1;
    VD_FECPRO     DATE;
    VV_RETORNO    VARCHAR2(2):='OK';
    
    VV_Proces    BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'MERGE PD CONTINUA';
    v_NRegs_Ins  BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE DEFAULT 0;

BEGIN

    COMMIT;

    vnumerr := 1;
    vproces := 'Basi Calculo PD';

    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
      INTO VN_MESPRO, VN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

    VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

    vnumerr := 2;
      
    BAS_MEN.FNC_CALCUL_PD (VV_TABLA, 1, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD_OLD
    COMMIT;

    vnumerr := 3;

    BAS_MEN.FNC_CALCUL_PD (VV_TABLA, 2, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_PD_AJUSTE_GRUPO_OLD
    COMMIT;

    vnumerr := 4;

    BAS_MEN.FNC_CALCUL_PD (VV_TABLA, 3, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD_MEDIA_OLD
    COMMIT;

    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 4, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD
    COMMIT;

    vnumerr := 3;

    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 5, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_PD_AJUSTE_GRUPO
    COMMIT;

    vnumerr := 5;

    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 6, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD_MEDIA
    COMMIT;

    vnumerr := 6;

    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 7, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_PD_MEDIA_PART_COMP
    COMMIT;

    vnumerr := 8;
/* 29/06/2022 HDEV-176702 - Se elimina calculo PD media (JRJ)
    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 8, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD_MEDIA_CCAA
    COMMIT;
 */
    vnumerr := 9;

    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 9, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD_MEDIA_EEFF
    COMMIT;

    vnumerr := 10;

    BAS_MEN.FNC_CALCUL_PD  (VV_TABLA, 10, VN_FECPRO, VN_MESPRO, VV_RETORNO, VV_RETORNO); -- FNC_CALCUL_PD_MEDIA_TARJ_CRED
    COMMIT;

    vnumerr := 9;

    BAS_MEN.SP_Info_Control_Proces (VV_Proces , 'INICIADO');
    COMMIT;

    MERGE /*+ parallel(pds 4) parallel(pds 4) */  INTO BAS_MEN.basilea_airb_pd pds
      USING BAS_MEN.basilea_airb_pd_old sdp
    ON (pds.or_idreg = sdp.or_idreg)
    WHEN MATCHED THEN
            UPDATE
               SET pds.FI_PDCONT = sdp.FI_PDCONT,
                   pds.FI_RATCON = sdp.FI_RATCON;
    
    v_NRegs_Ins := SQL%ROWCOUNT;
    
    COMMIT;

    -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
    VV_RETORNO := 'OK';
    BAS_MEN.SP_INFO_CONTROL_PROCES (VV_Proces, 'FINALIZADO', VV_RETORNO, null, null, v_NRegs_Ins);

    COMMIT;

    --Llama a la funcion de UPDATES BASILEA PD
    BAS_MEN.UPDATE_PROCESO_AIRB_PD('UPDATE_PROCESO_AIRB_PD');
    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

EXCEPTION
    WHEN others THEN
        ROLLBACK;

        vcodi:=sqlcode;
        vdescripcio:=sqlerrm;

        INSERT INTO ERRORS (proces,numerr,codi,descripcio,data)
        VALUES (vproces,vnumerr,vcodi,vdescripcio,sysdate);

        COMMIT;

        RAISE;
END;
/

show errors;
--bkd40082=====================================================================================================
Select 'bkd40082' As Compilando from dual;

CREATE OR REPLACE FORCE VIEW "BAS_MEN"."VISTA_CALCULO_LGD" AS
                     SELECT /*+ full(a) full(MVentas) full(MVentas_ibm) parallel (LTVCONC 8) parallel (a 8) parallel (e 8)
           parallel (MVentas 8)  parallel (MVentas_ibm 8) parallel (pre 8) parallel (GH 8) parallel (LTVEMP 8) parallel (MULT 8) */
                        DISTINCT  A.OR_IDREG, A.IN_SEGMBSINI,
                        /*CASE
                                WHEN OPGAR.OR_CODGAR IS NOT NULL THEN OPGAR.OR_CODGAR
                                ELSE A.OR_CODGAR
                        END AS OR_CODGAR,*/
                        A.OR_CODGAR, A.OR_SEGGES, A.OR_TIPOFI, A.IN_SEGMBS, A.IN_VTAGRU_CONS,
                        CASE WHEN A.in_segmbs0 = '201' then A.or_vidres
                             WHEN A.or_proced = 'LEASING' then nvl(le.OR_VIDRES, A.or_vidres)
                             WHEN A.OR_PROCED IN ('CR-SINDIC', 'CR-DISPONI', 'SINDICDIV') THEN
                                  nvl(nvl(sin.ID_MATURITY,matsin.ID_MATURITY), A.or_vidres)
                             WHEN A.OR_PROCED = 'PRES-DIVIS' OR A.OR_TIPOPE = 'PR' OR SUBSTR(A.OR_PROCED,1,3) = 'PR-' OR A.OR_CLUNIPROD = 'PR' then
                                  nvl(pre.or_vidres, A.or_vidres)
                             WHEN A.in_segmbs0 = '202' AND FI_TIPEXP IN ('Drawn', 'Undrawn') THEN
                                  nvl(dc.VIDRES_MEDIA, A.or_vidres)
                             WHEN (or_proced = 'AVALES' OR OR_TIPOPE in ('AF', 'AT')) AND OR_ENTITY IN (81, 8211) AND FI_TIPEXP = 'OffBalance' AND A.or_fecvto < 20990101 THEN
                                  nvl(ava.FI_VIDRES, A.or_vidres)
                             ELSE A.OR_VIDRES
                        END AS OR_VIDRES,
                        IN_SUCEPT, a.FI_TIPEXP, a.OR_FECVTO, a.OR_NIFCIF, A.IN_SEGMBS0, A.OR_NUMOFI, a.OR_FECCAR,
                        /* INI HDEV-107786 (substituimos LTV de concesion por el de empresas) */
                        CASE WHEN nvl(LTVEMP.LTV_SINPIG_COND,0) > 0  THEN
                                  --CASE WHEN (LTVCONC.LTVC_SINPIG) * 100 > 101 THEN 101
                                  --     WHEN (LTVCONC.LTVC_SINPIG) * 100 <  -1 THEN  0
                                  --     ELSE (LTVCONC.LTVC_SINPIG) * 100
                                  -- END
                                  CASE WHEN (nvl(LTVEMP.LTV_SINPIG_COND,0)) * 100 <  -1 THEN  0
                                       ELSE (nvl(LTVEMP.LTV_SINPIG_COND,0)) * 100
                                  END
                             ELSE 0
                        END AS IMPLTVEMP,
                        /* FIN HDEV-107786 (substituimos LTV de concesion por el de empresas) */
                        CASE WHEN A.OR_IMPLTV > 0 then
                            CASE  WHEN A.OR_IMPLTV > 101 THEN 101
                                  WHEN A.OR_IMPLTV <  -1 THEN  0
                            ELSE A.OR_IMPLTV
                            END
                        ELSE 0
                        END AS IMPLTV,
                        /* INI HDEV-107786 (substituimos LTV de concesion por el de empresas) */
                        CASE WHEN nvl(LTVEMP.LTV_SINPIG_COND,0) > 0 THEN
                            CASE WHEN nvl(MULT.MULTIPLICADOR_NAC_EMP,0) <> 0 THEN
                                      CASE  --WHEN LTVCONC.LTVC_SINPIG * MULT.MULTIPLICADOR_NAC_CON * 100 > 101 THEN 101
                                            WHEN nvl(LTVEMP.LTV_SINPIG_COND,0) * nvl(MULT.MULTIPLICADOR_NAC_EMP,0) * 100 <  -1 THEN  0
                                            ELSE nvl(LTVEMP.LTV_SINPIG_COND,0) * nvl(MULT.MULTIPLICADOR_NAC_EMP,0) * 100
                                       END
                                 ELSE  CASE --WHEN LTVCONC.LTVC_SINPIG * 100  > 101 THEN 101
                                            WHEN nvl(LTVEMP.LTV_SINPIG_COND,0) * 100 <  -1 THEN  0
                                            ELSE nvl(LTVEMP.LTV_SINPIG_COND,0) * 100
                                        END
                                  END
                             ELSE 0
                        END AS IMPLTVEMPMOR,
                        /* FIN HDEV-107786 (substituimos LTV de concesion por el de empresas) */
                        CASE WHEN A.OR_IMPLTV > 0  THEN
                          CASE WHEN MULT.MULTIPLICADOR_NAC_HOST <> 0 THEN
                                    CASE  WHEN A.OR_IMPLTV * MULT.MULTIPLICADOR_NAC_HOST > 101 THEN 101
                                          WHEN A.OR_IMPLTV * MULT.MULTIPLICADOR_NAC_HOST <  -1 THEN  0
                                          ELSE A.OR_IMPLTV * MULT.MULTIPLICADOR_NAC_HOST
                                     END
                               ELSE CASE WHEN A.OR_IMPLTV > 101 THEN 101
                                         WHEN A.OR_IMPLTV  <  -1 THEN  0
                                         ELSE A.OR_IMPLTV
                                     END
                               END
                           ELSE 0
                        END AS IMPLTVMOR,
                        DECODE(NVL(D.IN_SEG_HIP,  '?'), 'N', 'P', NVL(D.IN_SEG_HIP,  '?')) IN_SEG_HIP, A.FI_CCFAIRB,
                        NVL(GAR.CODGAR, '?') CODGAR_PIGNORATICIA,  A.OR_RATINT,
                        IN_TIPOREG,
                        NVL(E.EAD,NVL(OFEX.EAD,A.FI_EADAIRB)) EAD,
                        NVL(IN_FECMORA, '?') IN_FECMORA,
                        OR_CODPRODO, A.OR_CTACLI, A.OR_TIPOPE, A.OR_PERSON, A.OR_PERSONSCPCB,  A.OR_TIPOBJETO, OR_SEGFIC,
                        decode(or_idcnae, 6820, 'NO', DECODE(DESC_7ACTIVITATS, 'Construcción y Acts.Inmobiliarias', 'SI', 'NO')) CONSTRUCCION,
                        IN_SEGMBS1, IN_SEGMBS2, IN_ANTIGU/365 EDAD, a.OR_CLUNIPROD, a.OR_PROCED, OR_CTAIND, A.OR_TITULARITAT, A.OR_REFOPE, A.IN_INDMOR,
                        A.OR_ENTITY, OR_IDSITUAC, a.OR_CLUNIENT, A.OR_CLUNICONTR, a.OR_TIPGAR, IN_SRATIN, OR_CLUNICUENT,
                        DECODE(a.in_seg_hip, NULL, 'P', 'N', 'P', a.in_seg_hip) SEG_HIP_AUX, a.OR_FECOPE, OR_FECDEU,
                        OR_FECALTBLO, IN_PRESTPERCENT, OR_INDHOLDING, A.FI_EADAIRB, A.FI_EADCONAIRB,
                        OR_SITCON, OR_CODIGO_BIC, NVL(TarCyA.IMPORTE_TOTAL,0) as importe_total,
                        case
                             when in_vtagru_cons not in (150000, 600000, 3450000, 18000000, 115000000,200000000) then
                                  in_vtagru_cons
                             when in_vtagru_cons in (150000, 600000, 3450000, 18000000, 115000000,200000000)
                              and in_vtagru_cons = nvl(MVentas.VENTAS_CON, MVentas_ibm.VENTAS_CON) then
                                  in_vtagru_cons
                             else 0
                        end as ventas_con
                       , A.IN_ACTIVO_CONS, a.IN_ACTIVO, a.or_tipide, a.or_segfic2, a.OR_NIFCIFIBM
                       , A.IN_EXISTENCIAS, A.IN_VTAGRU, A.IN_ACTIVO_CIR, TarCyA.GARANTIZADA
                       , A.IN_REFINAN
                       , NVL(fac.entidad,9999) AS ENTFAC
                       , a.or_idmes
                       , nvl(A.OR_FECTAS, 99999999) AS OR_FECTAS
                       , TO_CHAR(FCHCONC.FECHA_TASACION, 'YYYYMM')  AS IN_FECTAS_CONC
                       , A.FI_EPICON
                       , A.TIPODEFAULT /*RMR 06/05/2020 Añadido tipo de mora de la nuevaDoD para la funcion de mora Subjetiva*/
                       , CASE WHEN wwr.GLOBALID IS NULL THEN 'NO'
                              ELSE 'SI'
                          END AS RIESGO_CORR_ADVERSA
                       , A.OR_VALTAS
                       , nvl(LTVEMP.VALOR_PIGNORATICIAS,0) VALOR_PIGNORATICIAS
                       , nvl(LTVEMP.TOTAL_VALOR_NETO_TOT_COND,0) TOTAL_VALOR_NETO_TOT_COND
                       , A.FI_ELIMI1
                       , CASE WHEN (COUNT( distinct CASE WHEN A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) THEN 'EMP'
                              ELSE 'NOE' END) OVER (PARTITION   BY    GH.ID_GRUPO_HIPOTECARIO)) > 1 THEN NULL
                              ELSE GH.ID_GRUPO_HIPOTECARIO
                         END AS ID_GRUPO_HIPOTECARIO
                       , NULL ESTATUS
                       , A.OR_VIDRES AS OR_VIDRESBAS
                   FROM BAS_MEN.BASILEA                      A
                       LEFT JOIN BAS_MEN.MAESTRO_TITULARITAT_HIPOTECA D
                        ON(D.OR_TITULARITAT = A.OR_TITULARITAT
                            AND D.OR_NUMFINREG = A.OR_NUMFINREG)
                       LEFT JOIN BAS_MEN.MAESTRO_TITULARITAT_IMPORTE  E
                        ON(E.OR_TITULARITAT =  A.OR_TITULARITAT)
                       LEFT JOIN  BAS_MEN.MAESTRO_OFEX_IMPORTE      OFEX
                        ON(OFEX.OR_CTACLI = A.OR_CTACLI
                            AND OFEX.OR_NUMOFI = A.OR_NUMOFI)
                       LEFT JOIN BAS_MEN.GARANTIAS_PIGNORATIVAS       GAR
                        ON(GAR.CODGAR = A.OR_CODGAR)
                       LEFT JOIN BAS_MEN.MAESTRO_CNAES_SECTOR         CNAE
                        ON(CNAE.CNAE93 =  A.OR_IDCNAE)
                       LEFT JOIN BAS_MEN.DATOS_CURVA_TARJETAS_CCAA    TarCyA
                        ON(TarCyA.OR_TITULARITAT = A.OR_TITULARITAT
                            AND TarCyA.OR_CLUNICONTR =  A.OR_CLUNICONTR )
                       LEFT JOIN  BAS_MEN.MAESTRO_VENTAS               MVentas
                        ON(MVentas.CIF_FILIAL =  A.OR_NIFCIF )
                       LEFT JOIN BAS_MEN.MAESTRO_VENTAS               MVentas_ibm
                        ON(MVentas_ibm.CIF_FILIAL =  A.OR_NIFCIFIBM)
                       LEFT JOIN (select /*+ parallel (po 4) */ CODCONAC,CODENTAC, TIPPROAC, MAX(FECHA_TASACION) FECHA_TASACION
                                    from BAS_MEN.BS_LTVC_POTENCIAL po group by CODCONAC,CODENTAC, TIPPROAC) FCHCONC
                       ON(FCHCONC.CODCONAC = A.OR_CLUNICONTR
                       AND FCHCONC.CODENTAC = A.OR_CLUNIENT
                       AND FCHCONC.TIPPROAC = A.OR_CLUNIPROD)
                        LEFT JOIN BAS_MEN.LTV_ACTUAL             LTVEMP
                        ON(LTVEMP.CODCONAC =  A.OR_CLUNICONTR
                            AND LTVEMP.CODENTAC = A.OR_CLUNIENT
                            AND LTVEMP.TIPPROAC = A.OR_CLUNIPROD)
                      /*COMENTADO HDEV-107786 04/04/2022 Cambio tabla */
                       -- LEFT JOIN BAS_MEN.BS_LTV_CONCESION             LTVEMP
                        -- ON(LTVEMP.CODCONAC =  A.OR_CLUNICONTR
                            -- AND LTVEMP.CODENTAC = A.OR_CLUNIENT
                            -- AND LTVEMP.TIPPROAC = A.OR_CLUNIPROD)
                       LEFT JOIN BAS_MEN.MAESTRO_IND_MULT_CTO_DEFAULT MULT
                        ON(MULT.COD_CONTRATO_CUENTA =  A.OR_CLUNICONTR
                            AND MULT.ENTIDADCTO_CUENTA = A.OR_CLUNIENT
                            AND MULT.CODIGO_TIPOPROD_CUENTA = A.OR_CLUNIPROD )
                       LEFT JOIN (select distinct factura, entidad, codcontrat from BAS_MEN.MAESTRO_FACTORING_ASEGURADORAS) fac
                        ON(FLOOR(fac.CODCONTRAT/100)=A.or_clunicontr
                            AND fac.factura = FLOOR(A.OR_CLUNIOPERA/1000))
                       LEFT JOIN BAS_MEN.MAESTRO_VIDRES_LEASING le
                        ON(le.OR_CLUNICONTR =  A.OR_CLUNICONTR)
                       LEFT JOIN (select distinct ID_REF_DISPOSICION, ID_MATURITY  from BAS_MEN.DISPOSICIONES_SINDICADOS) sin
                        ON(sin.ID_REF_DISPOSICION = A.OR_REFOPE)
                       LEFT JOIN (select distinct ID_REF_CONTRATO, ID_MATURITY  from BAS_MEN.MATURITY_SINDICADOS) matsin
                        ON(floor(matsin.ID_REF_CONTRATO/100) =  A.OR_CLUNICONTR  )
                       LEFT JOIN BAS_MEN.MATURITY_DERECHOS_COBRO DC
                        ON(DC.OR_TITULARITAT = A.OR_TITULARITAT)
                       LEFT JOIN BAS_MEN.MATURITY_AVALES ava
                        ON(ava.OR_REFOPE = A.OR_REFOPE
                            AND ava.or_fecvto = A.or_fecvto
                            AND ava.or_fecope = A.or_fecope)
                       LEFT JOIN(SELECT DISTINCT OR_REFOPE, OR_FECVTO, OR_VIDRES, IN_SEGMBS0 FROM BAS_MEN.MATURITY_PRESTAMOS) pre
                        ON(pre.OR_REFOPE =  A.OR_REFOPE
                            AND pre.or_fecvto = A.or_fecvto
                            AND pre.IN_SEGMBS0 = A.IN_SEGMBS0 )
                       LEFT JOIN BAS_MEN.WW_RISK_2 wwr
                        ON(WWR.GLOBALID =  CASE
                              WHEN A.FI_TIPEXP = 'OTC' AND A.OR_ENTITY IN (81, 8211) THEN A.OR_CLUNIPROD_OPERA || LPAD(A.OR_CLUNIOPERA, 15, '0')
                              ELSE NULL
                           END)
                        LEFT JOIN  (SELECT DISTINCT A.ID_GRUPO_HIPOTECARIO, A.CODENTAC,A.TIPPROAC,A.CODCONAC,TITULARIDAD_RIESGO FROM BAS_MEN.CA_LGD_PRINCIPAL A)GH
                        ON(GH.CODCONAC = A.OR_CLUNICONTR
                       AND GH.CODENTAC = A.OR_CLUNIENT
                       AND GH.TIPPROAC = A.OR_CLUNIPROD
                       and gh.TITULARIDAD_RIESGO=a.or_titularitat
                       and A.FI_ELIMI1='NO');




/

select * from sys.user_errors WHERE NAME = 'VISTA_CALCULO_LGD';
/



/*COMENTADO HDEV-107786*/
--DROP VIEW BAS_MEN.CURSOR_GRUPO_HIP_PERFORMING;

  CREATE OR REPLACE FORCE VIEW  BAS_MEN.CURSOR_GRUPO_HIP_PERFORMING  AS
  SELECT /*+ PARALLEL (A,4)*/
      A.ID_GRUPO_HIPOTECARIO,
      A.OR_FECVTO,
      A.OR_VIDRESBAS
    FROM BAS_MEN.VISTA_CALCULO_LGD A
   WHERE A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
     AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND  OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
     AND (A.IN_INDMOR NOT IN ('SI','CT') AND A.IN_SRATIN<>'BLQRM')
     AND A.ID_GRUPO_HIPOTECARIO IS NOT NULL;


/


show errors;

create or replace procedure BAS_MEN.LGD_MORA (
                        IN_SEGMBSINI         IN        BAS_MEN.BASILEA.IN_SEGMBSINI%TYPE,
                        IN_TIPOREG           IN        BAS_MEN.BASILEA.IN_TIPOREG%TYPE,
                        or_proced            IN        BAS_MEN.BASILEA.or_proced%TYPE,
                        IN_SEG_HIP           IN        BAS_MEN.BASILEA.IN_SEG_HIP%TYPE,
                        IN_SEGMBS2           IN        BAS_MEN.BASILEA.IN_SEGMBS2%TYPE,
                        IN_SEGMBS0           IN        BAS_MEN.BASILEA.IN_SEGMBS0%TYPE,
                        OR_CODGAR            IN        BAS_MEN.BASILEA.OR_CODGAR%TYPE,
                        OR_TIPOBJETO         IN        BAS_MEN.BASILEA.OR_TIPOBJETO%TYPE,
                        OR_CODPRODO          IN        BAS_MEN.BASILEA.OR_CODPRODO%TYPE,
                        ENTFAC               IN        number,
                        OR_INDHOLDING        IN        BAS_MEN.BASILEA.OR_INDHOLDING%TYPE,
                        OR_SEGFIC2           IN        BAS_MEN.BASILEA.OR_SEGFIC2%TYPE,
                        IN_EXISTENCIAS       IN        BAS_MEN.BASILEA.IN_EXISTENCIAS%TYPE,
                        IN_VTAGRU            IN        BAS_MEN.BASILEA.IN_VTAGRU%TYPE,
                        IN_ACTIVO_CIR        IN        BAS_MEN.BASILEA.IN_ACTIVO_CIR%TYPE,
                        OR_SEGFIC            IN        BAS_MEN.BASILEA.OR_SEGFIC%TYPE,
                        IN_PRESTPERCENT      IN        BAS_MEN.BASILEA.IN_PRESTPERCENT%TYPE,
                        CONSTRUCCION         IN        VARCHAR2,
                        IN_SUCEPT            IN        BAS_MEN.BASILEA.IN_SUCEPT%TYPE,
                        OR_IDSITUAC          IN        BAS_MEN.BASILEA.OR_IDSITUAC%TYPE,
                        OR_SITCON            IN        BAS_MEN.BASILEA.OR_SITCON%TYPE,
                        IN_SRATIN            IN        BAS_MEN.BASILEA.IN_SRATIN%TYPE,
                        OR_FECALTBLO         IN        BAS_MEN.BASILEA.OR_FECALTBLO%TYPE,
                        OR_FECDEU            IN OUT    BAS_MEN.BASILEA.OR_FECDEU%TYPE, /* 06/05/2020 - RMR - Añadido OUT para poder redefinir variable mas abajo*/
                        IN_FECMORA           IN        BAS_MEN.BASILEA.IN_FECMORA%TYPE,
                        IMPLTVEMPMOR         IN        float     ,
                        -- IMPLTVCONCMOR     IN        float     , /*HDEV-107786 08/03/2022 cambio nombre */
                        IMPLTVMOR            IN        float     ,
                        VV_GAR_HIP           IN        VARCHAR2  ,
                        PN_FECPRO            IN        number    ,
                        TIPODEFAULT          IN        BAS_MEN.BASILEA.TIPODEFAULT%TYPE DEFAULT NULL, /* 06/05/2020 - RMR - Añadido tipo de mora de la nuevaDoD para la funcion de mora Subjetiva*/
                        EAD                  IN        BAS_MEN.BASILEA.FI_EADAIRB%TYPE, /* INI - 04/11/2020 - NAV - TM-2900 - Hay que poner la LGDBE y LGDWC al 100% a los morosos, para los registros o titularidades menores a 100 euros */
                        RIESGO_CORR_ADVERSA  IN        VARCHAR2  , /* 05/08/2021 - RMR - Marcamos con 100% aquellos con riesgo de correlación adversa */
                        VV_LGD               OUT       fLOAT     ,
                        VN_LGD_LONGRUN       OUT       fLOAT     ,
                        VV_TIPO              OUT       VARCHAR2  ,
                        VN_C_TYPE_GUARANTEE  OUT       NUMBER    ,
                        VV_LGD_BE            OUT       fLOAT     ,
                        VV_LGD_WORST         OUT       fLOAT     ,
                        VV_FI_IMPLTV         OUT       fLOAT     ,
                        VV_FECHAMORA         OUT       number    ,
                        RET                  OUT       VARCHAR2  ,
                        VV_EDAD              OUT       VARCHAR2 /* 30/10/2019 RMR - Petición de Encarni, necesita la edad de la LGD morosa*/

            )
is

  VV_TIP_GAR                        VARCHAR2(55);
  VV_TIP_GAR_H                      VARCHAR2(55);
  VV_TIPO_PROC                      VARCHAR2(100);
  VV_SEGMENTO                       VARCHAR2(17);
--VV_EDAD                           FLOAT(126);
  VN_NUMERR                         NUMBER(3);
  VV_IN_EDAD                        VARCHAR2(32) := '?';
  VV_TRAMO_EDAD                     varchar2(32);
  vV_Es_Mora_Subjetiva              VARCHAR2(1)            DEFAULT 'N';
   ---SMG 24/09 - PETICION ENCARNI
  VV_LOANTOVALUEMIN         FLOAT(126);
  VV_LOANTOVALUEMAX         FLOAT(126);
  ---SMG 24/09 - PETICION ENCARNI
  SW_MARCA_DEFAULT   VARCHAR2(4); /* RMR 06/05/2020 - Añadido switch para controlar si el proceso es de contabilidad o de NDoD*/
   BEGIN

       /* RMR 06/05/2020 - Inicio - Añadido switch para controlar si el proceso es de contabilidad o de NDoD*/
       BEGIN
       SELECT VALPARM
         INTO SW_MARCA_DEFAULT
         FROM BAS_MEN.parametros_proceso
        WHERE CODCSB     = 81
          AND CODPARM    = '0002'
          AND SECPARM    = '01';
       EXCEPTION
         WHEN OTHERS THEN
             RAISE;
       END;
       /* RMR 06/05/2020 - Fin*/

          VV_TIPO_PROC := '?';
          VV_TIPO := '?';
          VV_TIP_GAR_H := '?';
          VV_TIP_GAR               := '?';
          VV_FECHAMORA             := 19010101;
          VV_FI_IMPLTV             := IMPLTVMOR;
          VN_C_TYPE_GUARANTEE := 0;
          VV_SEGMENTO              := '?';
          VV_EDAD                  := '';
          VV_IN_EDAD               := '';
          VV_LGD                   := 99;
          VV_LGD_WORST             := 99;
          VV_LGD_BE                := 99;
          VN_LGD_LONGRUN           := 0.35;
          VV_TRAMO_EDAD            := '?';
          ---SMG 24/09 - PETICION ENCARNI
          VV_LOANTOVALUEMIN      := 0;
          VV_LOANTOVALUEMAX      := 0;
          ---SMG 24/09 - PETICION ENCARNI

          /* RMR 06/05/2020 Inicio  - En caso de ejecutar según la nueva DoD, forzamos el fecdeu en 0 para que no entre por casuistica de +90 dias*/
          IF SW_MARCA_DEFAULT <> 'CONT' THEN
              OR_FECDEU := 0;
          END IF;
          /* RMR 06/05/2020 fin*/

          IF IN_SEGMBSINI = '034' THEN
             VV_LGD_WORST := 0.1125;
             VV_LGD_BE    := 0.1125;
             VV_TIPO:= 'Cédulas hipotecarias';
          ELSIF IN_SEGMBSINI IN ('007', '018', '021', '028', '029') THEN
             VV_LGD_WORST:= 0.45;
             VV_LGD_BE   := 0.45;
             VV_TIPO:= 'EEFF';
          ELSIF IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX', 'PX') OR substr(or_proced ,1,4) = 'OFEX' THEN
             VV_LGD_WORST:= 0.45;
             VV_LGD_BE   := 0.45;
             VV_TIPO:= 'OFEX';
          ELSIF IN_SEGMBS0 = '201' THEN
             VV_LGD_WORST:= 0.45;
             VV_LGD_BE   := 0.45;
             VV_TIPO:= 'Project Finance';
          /* INI - 04/11/2020 - NAV - TM-2900 - Poner LGDBE y LGDWC al 100% a los morosos, para los registros o titularidades menores a 100 euros */
          ELSIF EAD < 100 AND IN_SEGMBSINI IN ('103', '104','003','005','006','009','010','019','002','017','101','102','027','106','107') THEN
             VV_LGD_WORST   := 1;
             VV_LGD_BE      := 1;
             VV_TIPO        := 'Certificación de saldos < 100€';
          /* FIN - 04/11/2020 - NAV - TM-2900 */
          /* 05/08/2021 RMR Marcamos con 100% aquellos con riesgo de correlación adversa */
          ELSIF RIESGO_CORR_ADVERSA = 'SI' THEN
             VV_LGD_BE      := 1;
             VV_LGD_WORST   := 1;
             VV_TIPO        := 'Riesgo correlación adversa';
          ELSE
                IF VV_GAR_HIP = 'SI' THEN
                    IF IN_SEG_HIP IN ('N','P') THEN
                        VV_TIP_GAR_H    := '1ª Hipoteca';
                    ELSIF IN_SEG_HIP = 'S' THEN
                        VV_TIP_GAR_H := '2ª Hipoteca';
                    END IF;
                END IF;

                IF IN_SEGMBSINI IN ('103', '104', '106', '107', '101', '102', '002', '017') THEN
                     IF IN_SEGMBSINI IN ('101', '102', '002', '017') THEN
                        VV_SEGMENTO := 'CCAA';
                     ELSE
                        VV_SEGMENTO := 'PARTICULARES';
                     END IF;
                ELSIF IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN

                     IF IN_SEGMBS2 = '020' AND IN_SEGMBS0 = '200' THEN
                         VV_SEGMENTO := 'PROMOTORES';
                         --IF IN_SEGMBS2 = '020' AND IN_SEGMBS0 <> '200' THEN
                     ELSE
                         VV_SEGMENTO := 'EMPRESAS';
                     END IF;
                END IF;

                BEGIN
                    SELECT TIPGAR
                      INTO VV_TIP_GAR
                      FROM BAS_MEN.MAESTRO_TIPGAR
                     WHERE GARANTIA = OR_CODGAR;
                EXCEPTION
                    WHEN OTHERS THEN
                        VV_TIP_GAR:= 'DOEX'; --Como valor por defecto aplicaremos LGD de Documento Ejecutivo. XCG, 25/07/08.
                END;

                IF  VV_SEGMENTO in('EMPRESAS','CCAA') and OR_PROCED = 'LEASING' THEN
                    IF OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031) THEN
                        VV_TIPO_PROC  := 'Leasing inmobiliario';
                    ELSE
                        VV_TIPO_PROC  := 'Leasing no inmobiliario';
                    END IF;

                ELSIF OR_PROCED = 'FACTORING' THEN
                      IF VV_SEGMENTO in('EMPRESAS') THEN
                          IF OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR ENTFAC <> 9999 THEN
                                  IF OR_INDHOLDING IN ('1', '3', '4') THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo PAT';
                                  ELSIF OR_SEGFIC2 = 'P1' THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo E0-E1-P1';
                                  ELSIF OR_SEGFIC2 = 'P2' THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo E2-P2';
                                  ELSIF OR_SEGFIC2 = 'P3' THEN
                                          IF NVL(IN_EXISTENCIAS,99) <> 99 then
                                                  If IN_VTAGRU + IN_EXISTENCIAS > 30000000 THEN
                                                      VV_TIPO_PROC  := 'Documento ejecutivo E4-P3';
                                                  else
                                                      VV_TIPO_PROC  := 'Documento ejecutivo E3-P3';
                                                  end if;
                                          ELSIF NVL(IN_ACTIVO_CIR, 99) <> 99 AND IN_VTAGRU + IN_ACTIVO_CIR > 30000000 THEN
                                              VV_TIPO_PROC  := 'Documento ejecutivo E4-P3';
                                          ELSE
                                              VV_TIPO_PROC  := 'Documento ejecutivo E3-P3';
                                          END IF;
                                  ELSIF OR_SEGFIC2 = 'P5' THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo E4-P3';
                                  ELSIF OR_SEGFIC IN ('E0', 'E1')  THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo E0-E1-P1';
                                  ELSIF OR_SEGFIC = 'E2' THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo E2-P2';
                                  ELSIF OR_SEGFIC = 'E3' THEN
                                      VV_TIPO_PROC  := 'Documento ejecutivo E3-P3';
                                  ELSIF OR_SEGFIC IN ('E4', 'E5', 'GR') THEN -- RMR 21/10/2019 Añadido GR ya que se replicará el tratamiento acutal de E5
                                      VV_TIPO_PROC  := 'Documento ejecutivo E4-P3';
                                  ELSE
                                      VV_TIPO_PROC  := 'Documento ejecutivo E3-P3';
                                  END IF;

                          END IF;
                      END IF;

                     IF VV_SEGMENTO in('CCAA') THEN
                         VV_TIPO := 'Documento ejecutivo';
                     END IF;
                END IF;

                IF VV_TIP_GAR = 'HIP' AND IN_SEGMBSINI NOT IN ('106', '107') THEN

                   IF IN_SEG_HIP IN ('N','P') THEN
                   -- 1ª Hipoteca
                      IF VV_SEGMENTO = 'PROMOTORES' THEN
                         IF IN_PRESTPERCENT = 1         THEN
                             VV_TIPO :=  '1ª Hipoteca Suelo';
                         ELSIF IN_PRESTPERCENT = 2     THEN
                             VV_TIPO :=  '1ª Hipoteca Obra en curso';
                         ELSIF IN_PRESTPERCENT = 3     THEN
                             VV_TIPO :=  '1ª Hipoteca Producto acabado';
                         END IF;
                      END IF;

                   ELSIF IN_SEG_HIP = 'S' THEN
                           -- 2ª Hipoteca
                         IF VV_SEGMENTO IN('EMPRESAS','PROMOTORES') THEN
                             VV_SEGMENTO := 'EMPRESAS';
                             IF CONSTRUCCION = 'SI' THEN
                                 VV_TIPO :=  '2ª Hipoteca Construccion';
                             ELSE
                                 VV_TIPO :=  '2ª Hipoteca Resto';
                             END IF;
                         END IF;
                        END IF;

                  ELSIF VV_GAR_HIP = 'SI' AND IN_SEGMBSINI NOT IN ('106', '107') THEN
                    IF IN_SEG_HIP IN ('N','P') THEN
                                                --1ª Hipoteca
                                                IF VV_SEGMENTO = 'PROMOTORES' THEN
                                                        IF IN_PRESTPERCENT = 1         THEN
                                                                VV_TIP_GAR_H :=  '1ª Hipoteca Suelo';
                                                        ELSIF IN_PRESTPERCENT = 2     THEN
                                                            VV_TIP_GAR_H :=  '1ª Hipoteca Obra en curso';
                                                        ELSIF IN_PRESTPERCENT = 3     THEN
                                                            VV_TIP_GAR_H :=  '1ª Hipoteca Producto acabado';
                                                        END IF;
                                                END IF;

                    ELSIF IN_SEG_HIP = 'S' THEN
                                             --2ª Hipoteca
                                                IF VV_SEGMENTO IN('EMPRESAS','PROMOTORES') THEN
                                                        VV_SEGMENTO := 'EMPRESAS';
                                                        IF CONSTRUCCION = 'SI' THEN
                                                            VV_TIP_GAR_H :=  '2ª Hipoteca Construccion';
                                                        ELSE
                                                            VV_TIP_GAR_H :=  '2ª Hipoteca Resto';
                                                        END IF;
                                                END IF;
                    END IF;

                  ELSE

                      IF VV_SEGMENTO IN('EMPRESAS','PROMOTORES') THEN
                              VV_SEGMENTO := 'EMPRESAS';
                              IF VV_TIP_GAR = 'EXP' OR VV_TIP_GAR = 'D2' THEN -- Se tratará la Dineraria Experta como Experta. MR, 27/6/19
                                      VV_TIPO := 'Experta';
                              ELSIF VV_TIP_GAR = 'LEASNOIN' THEN
                                      VV_TIPO := 'Leasing no inmobiliario';
                              ELSIF VV_TIP_GAR = 'LEASIN' THEN
                                      VV_TIPO := 'Leasing inmobiliario';
                              ELSIF VV_TIP_GAR = 'D' THEN
                                      VV_TIPO := 'Dineraria';
                              ELSIF VV_TIP_GAR = 'DOEX' THEN
                                      IF OR_INDHOLDING IN ('1', '3', '4') THEN
                                          VV_TIPO := 'Documento ejecutivo PAT';
                                          ELSIF OR_SEGFIC2 = 'P1' THEN
                                              VV_TIPO := 'Documento ejecutivo E0-E1-P1';
                                          ELSIF OR_SEGFIC2 = 'P2' THEN
                                              VV_TIPO := 'Documento ejecutivo E2-P2';
                                          ELSIF OR_SEGFIC2 = 'P3' THEN
                                              IF NVL(IN_EXISTENCIAS,99) <> 99 then
                                                  If IN_VTAGRU + IN_EXISTENCIAS > 30000000 THEN
                                                      VV_TIPO := 'Documento ejecutivo E4-P3';
                                                  else
                                                      VV_TIPO := 'Documento ejecutivo E3-P3';
                                                  end if;
                                              ELSIF NVL(IN_ACTIVO_CIR, 99) <> 99 AND IN_VTAGRU + IN_ACTIVO_CIR > 30000000 THEN
                                                  VV_TIPO := 'Documento ejecutivo E4-P3';
                                              ELSE
                                                  VV_TIPO := 'Documento ejecutivo E3-P3';
                                              END IF;
                                          ELSIF OR_SEGFIC2 = 'P5' THEN
                                              VV_TIPO := 'Documento ejecutivo E4-P3';
                                          ELSIF OR_SEGFIC IN ('E0', 'E1')  THEN
                                              VV_TIPO := 'Documento ejecutivo E0-E1-P1';
                                          ELSIF OR_SEGFIC = 'E2' THEN
                                              VV_TIPO := 'Documento ejecutivo E2-P2';
                                          ELSIF OR_SEGFIC = 'E3' THEN
                                              VV_TIPO := 'Documento ejecutivo E3-P3';
                                          ELSIF OR_SEGFIC IN ('E4', 'E5', 'GR') THEN -- RMR 21/10/2019 Añadido GR ya que se replicará el tratamiento acutal de E5
                                              VV_TIPO := 'Documento ejecutivo E4-P3';
                                          ELSE
                                              VV_TIPO_PROC  := 'Documento ejecutivo E3-P3';
                                          END IF;

                              ELSIF VV_TIP_GAR = 'SDOEX' THEN
                                          IF OR_INDHOLDING IN ('1', '3', '4') THEN
                                              VV_TIPO := 'Sin Documento ejecutivo PAT';
                                          ELSE
                                              VV_TIPO := 'Sin Documento ejecutivo No PAT';
                                          END IF;

                              END IF;
                      END IF;

                      IF VV_SEGMENTO = 'PARTICULARES' THEN

                         IF VV_TIP_GAR = 'EXP' OR VV_TIP_GAR = 'D2' THEN -- Se tratará la Dineraria Experta como Experta. MR, 27/6/19
                            VV_TIPO := 'Experta';
                         ELSIF SUBSTR(IN_SUCEPT,1,2) = 'KT' THEN   --  MR, 04/04/17
                               VV_TIPO := 'Creditos Documento Ejecutivo';
                         ELSIF SUBSTR(IN_SUCEPT,1,2) = 'TA' THEN
                               VV_TIPO := 'Tarjetas de credito Sin Documento ejecutivo';
                         ELSE
                              IF VV_TIP_GAR = 'D' THEN
                                  VV_TIPO := 'Prestamo consumo Dineraria';
                              ELSE
                                  VV_TIPO:= 'Prestamo consumo Documento Ejecutivo';
                                  VV_TIP_GAR := 'DOEX';
                              END IF;
                         END IF;
                      END IF;

                      IF VV_SEGMENTO = 'CCAA' THEN
                          IF VV_TIP_GAR = 'EXP' OR VV_TIP_GAR = 'D2' THEN -- Se tratará la Dineraria Experta como Experta. MR, 27/6/19
                              VV_TIPO := 'Experta';
                          ELSIF VV_TIP_GAR = 'LEASNOIN' THEN
                              VV_TIPO := 'Leasing no inmobiliario';
                          ELSIF VV_TIP_GAR = 'LEASIN' THEN
                              VV_TIPO := 'Leasing inmobiliario';
                          ELSIF VV_TIP_GAR = 'D' THEN
                              VV_TIPO := 'Dineraria';
                          ELSIF VV_TIP_GAR = 'DOEX' THEN
                              VV_TIPO := 'Documento ejecutivo';
                          ELSIF VV_TIP_GAR = 'SDOEX' THEN
                              VV_TIPO := 'Sin Documento ejecutivo';
                          END IF;
                      END IF;

                  END IF;

                  VN_NUMERR:= 36;

                  vv_Es_Mora_Subjetiva := 'N';
                  /* RMR 06/05/2020 Inicio - Cambiamos la llamada a la función de la mora subjetiva para soportar la nueva DoD*/
                  vv_Es_Mora_Subjetiva := BAS_MEN.SF_Es_Mora_Subjetiva ( OR_IDSITUAC, OR_SITCON, TIPODEFAULT, SW_MARCA_DEFAULT );

                  IF    IN_SRATIN = 'BLQRM' THEN
                  -- Si la fecha de alta de Bloqueo no esta informada y no es mora subjetiva se asignará el máximo tramo. 201609
                      IF OR_FECALTBLO IN ( '?', '0001-01-01')  THEN
                          BEGIN
                              VV_EDAD := 30;     --EDAD en meses.
                              VV_FECHAMORA := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(PN_FECPRO ,'YYYYMMDD'),-30), 'YYYYMMDD'));
                          END;
                      ELSE
                          BEGIN
                              VV_EDAD := ceil((MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(OR_FECALTBLO, 'YYYY-MM-DD'))));     --EDAD en meses.
                              VV_FECHAMORA := to_number(TO_char(TO_DATE(OR_FECALTBLO, 'YYYY-MM-DD'), 'YYYYMMDD'));
                          END;
                      END IF;
                  ELSE

                      IF OR_FECDEU IN (0, 10101)  THEN
                              IF IN_FECMORA IN ( '?', '0001-01-01')  THEN
                                  BEGIN
                                       VV_EDAD := 30;     --EDAD en meses.
                                       VV_FECHAMORA := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(PN_FECPRO ,'YYYYMMDD'),-30), 'YYYYMMDD'));
                                  END;
                              ELSE
                                  BEGIN
                                      VV_EDAD := ceil((MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_FECMORA, 'YYYY-MM-DD')))); --EDAD en meses.
                                      VV_FECHAMORA := to_number(TO_char(TO_DATE(IN_FECMORA, 'YYYY-MM-DD'), 'YYYYMMDD'));

  --                              EXCEPTION
  --                                  WHEN OTHERS THEN
  --                                    Si falla por error en fecha en mora asignamos edad máxima
  --                                        IF vv_Es_Mora_Subjetiva = 'N' THEN
  --                                            VV_EDAD := 62;
  --                                        END IF;
                                  END;
                              END IF;
                      ELSE
                          BEGIN
                              VV_EDAD := ceil((MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(OR_FECDEU, 'YYYYMMDD')+90))); --EDAD en meses. OR_FECDEU + 90dies
                              VV_FECHAMORA := to_number(to_char(TO_DATE(OR_FECDEU, 'YYYYMMDD')+90, 'YYYYMMDD'));

--                        EXCEPTION
--                            WHEN OTHERS THEN
--                              Si falla por error en fecha en mora asignamos edad máxima
--                                  IF vv_Es_Mora_Subjetiva = 'N' THEN
--                                      VV_EDAD := 62;
--                                  END IF;
                          END;

                          IF VV_EDAD < 0 THEN
                                      VV_EDAD := 0;
                          END IF;

                      END IF;
                  END IF;

                  IF VV_TIPO IN (
                                 'Documento ejecutivo E0-E1-P1', 'Documento ejecutivo E2-P2',
                                 'Documento ejecutivo E4-P3',
                                 'Documento ejecutivo E3-P3',
                                 'Sin Documento ejecutivo PAT',
                                 'Sin Documento ejecutivo No PAT',
                                 'Tarjetas de credito Sin Documento ejecutivo',
                                 'Prestamo consumo Documento Ejecutivo',
                                 'Documento ejecutivo',
                                 'Sin Documento ejecutivo')
                      AND (VV_TIPO_PROC <> '?' OR SUBSTR(VV_TIP_GAR_H,1,11) IN ('1ª Hipoteca', '2ª Hipoteca')) THEN
                                                VV_TIPO      := '?';
                  END IF;

                  VN_NUMERR:= 37;

                -- ACCEDEREMOS AL MAESTRO DE LGD BEWC (UNICO) POR SEGMENTO, TIPO, LTV Y TRAMO. SE SELECCIONARÁ LA LGD BE Y LGD WC CORRESPONDIENTE AL REGISTRO.

                -- AGREGAR CONDICION DE PROMOTOR PARA DISTINGUIR ENTRE LTV Y LTV DE CONCESION:
                BEGIN
                    IF vv_Es_Mora_Subjetiva = 'S' THEN
                        VV_Tramo_Edad := 'PC_SUBJETIVOS';
                    ELSE
                        SELECT Tramos_LGD.CAMPO
                          INTO VV_Tramo_Edad
                          FROM BAS_MEN.TRAMOS_MAESTRO_LGD_BEWC   Tramos_LGD
                         WHERE ( (VV_EDAD  BETWEEN Tramos_LGD.N_MESES_DESDE  AND Tramos_LGD.N_MESES_HASTA) );
                    END IF;

                EXCEPTION
                    WHEN OTHERS THEN
                        VV_Tramo_Edad := '?';
                END;

                IF VV_Tramo_Edad <> '?' THEN
                        --SMG-30/04/19  LTV PROM-I
                        /*HDEV-107786 04/04/2022 Cambio nombre campo IMPLTVCONCMOR por IMPLTVEMPMOR */
                        IF VV_SEGMENTO    = 'PROMOTORES' AND IMPLTVMOR > 0 and IN_PRESTPERCENT <> 3 THEN
                        --SMG-30/04/19  LTV PROM-F

                            VV_FI_IMPLTV := IMPLTVMOR;
                        ELSE
                            VV_FI_IMPLTV := IMPLTVMOR;
                        END IF;

                        -- IF VV_SEGMENTO    = 'PROMOTORES' AND IMPLTVCONCMOR > 0 and IN_PRESTPERCENT <> 3 THEN
                        -- SMG-30/04/19  LTV PROM-F
                            -- VV_FI_IMPLTV := IMPLTVCONCMOR;
                        -- ELSE
                            -- VV_FI_IMPLTV := IMPLTVMOR;
                        -- END IF;
                        BEGIN
                            select distinct
                                   IN_TIPO
                                 , CASE WHEN VV_Tramo_Edad = 'TRAMO_1' THEN PC_TRAMO_1
                                        WHEN VV_Tramo_Edad = 'TRAMO_2' THEN PC_TRAMO_2
                                        WHEN VV_Tramo_Edad = 'TRAMO_3' THEN PC_TRAMO_3
                                        WHEN VV_Tramo_Edad = 'TRAMO_4' THEN PC_TRAMO_4
                                        WHEN VV_Tramo_Edad = 'TRAMO_5' THEN PC_TRAMO_5
                                        WHEN VV_Tramo_Edad = 'TRAMO_6' THEN PC_TRAMO_6
                                        WHEN VV_Tramo_Edad = 'TRAMO_7' THEN PC_TRAMO_7
                                        WHEN VV_Tramo_Edad = 'TRAMO_8' THEN PC_TRAMO_8
                                        WHEN VV_Tramo_Edad = 'TRAMO_9' THEN PC_TRAMO_9
                                        WHEN VV_Tramo_Edad = 'TRAMO_10'THEN PC_TRAMO_10
                                        WHEN VV_Tramo_Edad = 'PC_SUBJETIVOS'THEN PC_SUBJETIVOS
                                   END LGD,  PC_LOANTOVALUEMIN, PC_LOANTOVALUEMAX
                              into VV_TIPO, VV_LGD_BE, VV_LOANTOVALUEMIN, VV_LOANTOVALUEMAX
                              FROM BAS_MEN.MAESTRO_LGD_BEWC    Mae_LGD
                              WHERE
                                        (CASE WHEN VV_Tramo_Edad = 'TRAMO_1' THEN PC_TRAMO_1
                                              WHEN VV_Tramo_Edad = 'TRAMO_2' THEN PC_TRAMO_2
                                              WHEN VV_Tramo_Edad = 'TRAMO_3' THEN PC_TRAMO_3
                                              WHEN VV_Tramo_Edad = 'TRAMO_4' THEN PC_TRAMO_4
                                              WHEN VV_Tramo_Edad = 'TRAMO_5' THEN PC_TRAMO_5
                                              WHEN VV_Tramo_Edad = 'TRAMO_6' THEN PC_TRAMO_6
                                              WHEN VV_Tramo_Edad = 'TRAMO_7' THEN PC_TRAMO_7
                                              WHEN VV_Tramo_Edad = 'TRAMO_8' THEN PC_TRAMO_8
                                              WHEN VV_Tramo_Edad = 'TRAMO_9' THEN PC_TRAMO_9
                                              WHEN VV_Tramo_Edad = 'TRAMO_10'THEN PC_TRAMO_10
                                              WHEN VV_Tramo_Edad = 'PC_SUBJETIVOS'THEN PC_SUBJETIVOS
                                         END -- END CASE
                                        )   in (SELECT MIN(CASE WHEN VV_Tramo_Edad = 'TRAMO_1' THEN PC_TRAMO_1
                                                                WHEN VV_Tramo_Edad = 'TRAMO_2' THEN PC_TRAMO_2
                                                                WHEN VV_Tramo_Edad = 'TRAMO_3' THEN PC_TRAMO_3
                                                                WHEN VV_Tramo_Edad = 'TRAMO_4' THEN PC_TRAMO_4
                                                                WHEN VV_Tramo_Edad = 'TRAMO_5' THEN PC_TRAMO_5
                                                                WHEN VV_Tramo_Edad = 'TRAMO_6' THEN PC_TRAMO_6
                                                                WHEN VV_Tramo_Edad = 'TRAMO_7' THEN PC_TRAMO_7
                                                                WHEN VV_Tramo_Edad = 'TRAMO_8' THEN PC_TRAMO_8
                                                                WHEN VV_Tramo_Edad = 'TRAMO_9' THEN PC_TRAMO_9
                                                                WHEN VV_Tramo_Edad = 'TRAMO_10'THEN PC_TRAMO_10
                                                                WHEN VV_Tramo_Edad = 'PC_SUBJETIVOS'THEN PC_SUBJETIVOS
                                                            END -- END CASE
                                                          ) VV_LGD_BE
                                                                                FROM BAS_MEN.MAESTRO_LGD_BEWC        Mae_LGD
                                                                                WHERE IN_SEGMENTO = VV_SEGMENTO
                                                                                AND IN_BE_WC = 'BE'
                                                                                AND IN_TIPO IN (VV_TIPO, VV_TIPO_PROC, VV_TIP_GAR_H)
                                                                                AND ((PC_LOANTOVALUEMIN < VV_FI_IMPLTV
                                                                                AND PC_LOANTOVALUEMAX > VV_FI_IMPLTV)
                                                                                OR PC_LOANTOVALUEMAX = VV_FI_IMPLTV)
                                                                                                    )
                                                                                AND IN_SEGMENTO = VV_SEGMENTO
                                                                                AND IN_BE_WC = 'BE'
                                                                                AND IN_TIPO IN (VV_TIPO, VV_TIPO_PROC, VV_TIP_GAR_H)
                                                                                AND ((PC_LOANTOVALUEMIN < VV_FI_IMPLTV
                                                                                AND PC_LOANTOVALUEMAX > VV_FI_IMPLTV)
                                                                                OR PC_LOANTOVALUEMAX = VV_FI_IMPLTV);

                          EXCEPTION
                                    WHEN OTHERS THEN
                                         VV_LGD_BE := 99;
                          END;

                          VN_NUMERR:= 38;

                           BEGIN
                                      SELECT MIN(CASE WHEN VV_Tramo_Edad = 'TRAMO_1' THEN PC_TRAMO_1
                                                      WHEN VV_Tramo_Edad = 'TRAMO_2' THEN PC_TRAMO_2
                                                      WHEN VV_Tramo_Edad = 'TRAMO_3' THEN PC_TRAMO_3
                                                      WHEN VV_Tramo_Edad = 'TRAMO_4' THEN PC_TRAMO_4
                                                      WHEN VV_Tramo_Edad = 'TRAMO_5' THEN PC_TRAMO_5
                                                      WHEN VV_Tramo_Edad = 'TRAMO_6' THEN PC_TRAMO_6
                                                      WHEN VV_Tramo_Edad = 'TRAMO_7' THEN PC_TRAMO_7
                                                      WHEN VV_Tramo_Edad = 'TRAMO_8' THEN PC_TRAMO_8
                                                      WHEN VV_Tramo_Edad = 'TRAMO_9' THEN PC_TRAMO_9
                                                      WHEN VV_Tramo_Edad = 'TRAMO_10'THEN PC_TRAMO_10
                                                      WHEN VV_Tramo_Edad = 'PC_SUBJETIVOS'THEN PC_SUBJETIVOS
                                                      END) AS Min_LGD_BEW
                                          , min(C_TYPE_GUARANTEE) AS Min_Ty_Guarantee
                                      INTO VV_LGD_WORST, VN_C_TYPE_GUARANTEE
                                      FROM BAS_MEN.MAESTRO_LGD_BEWC   Mae_LGDW
                                      WHERE IN_SEGMENTO      = VV_SEGMENTO
                                      AND IN_BE_WC = 'WC'
                                      AND IN_TIPO IN (VV_TIPO)
                                      AND ((PC_LOANTOVALUEMIN < VV_FI_IMPLTV
                                      AND PC_LOANTOVALUEMAX > VV_FI_IMPLTV)
                                      OR PC_LOANTOVALUEMAX = VV_FI_IMPLTV);

                          EXCEPTION
                              WHEN OTHERS THEN
                              VV_LGD_WORST := 99;
                              VN_C_TYPE_GUARANTEE:= 0;
                          END;

                      END IF;

          END IF;

          VV_LGD         := VV_LGD_WORST;
          VN_LGD_LONGRUN := VV_LGD_WORST;
          VV_TIPO        := VV_SEGMENTO||'|'||substr(VV_TIPO,1,50)||'|'||TO_CHAR(VV_LOANTOVALUEMIN,'990.999999')||'|'||TO_CHAR(VV_LOANTOVALUEMAX,'990.999999')||'|'||VV_TRAMO_EDAD;

EXCEPTION
  WHEN OTHERS THEN
     RET:= SUBSTR('KO:'||TO_CHAR(SQLCODE)||'LGD_MORA'||SQLERRM,1,100);
END;

/

show errors;



CREATE OR REPLACE PACKAGE BAS_MEN.CALCULO_LGD IS

-- HDEV-107786 --comentado por cambios en paquete
    TYPE Cursor_Basilea              IS REF CURSOR RETURN BAS_MEN.VISTA_CALCULO_LGD%ROWTYPE;
--  TYPE T_Array_Basilea_Calculo_LGD IS TABLE OF BAS_MEN.BASILEA_AIRB_LGD%ROWTYPE;
    TYPE T_Array_Basilea_Calculo_LGD_AUX_1 IS TABLE OF BAS_MEN.BASILEA_AIRB_LGD_AUX_1%ROWTYPE;
    TYPE T_Array_Basilea_Calculo_LGD_AUX_2 IS TABLE OF BAS_MEN.BASILEA_AIRB_LGD_AUX_2%ROWTYPE;
    TYPE T_Array_Basilea_Calculo_LGD_AUX_3 IS TABLE OF BAS_MEN.BASILEA_AIRB_LGD_AUX_3%ROWTYPE;

--para calcular maturity grupo hipotecario
    TYPE cursor_grp_hip_perf is REF CURSOR RETURN BAS_MEN.CURSOR_GRUPO_HIP_PERFORMING%ROWTYPE;

--------------------------------------------------------------------------------------------------------------------------------
-- HDEV-107786 Agregado por cambios en paquete    17/05/2022
   FUNCTION F_CALCULO_LGD_ANT (Cur IN CURSOR_BASILEA, PN_FecPro IN NUMBER) RETURN T_Array_Basilea_Calculo_LGD_AUX_1
   PARALLEL_ENABLE(PARTITION Cur BY ANY)
   PIPELINED;
--------------------------------------------------------------------------------------------------------------------------------

--HDEV-107786 17/05/2022
  FUNCTION F_CALCULO_LGD_PERF_EMP (Cur IN Cursor_Basilea, PN_FecPro IN NUMBER) RETURN T_Array_Basilea_Calculo_LGD_AUX_2
  PARALLEL_ENABLE(PARTITION Cur BY ANY)
  PIPELINED;

--------------------------------------------------------------------------------------------------------------------------------

--HDEV-107786 17/05/2022
  FUNCTION F_CALCULO_LGD_NO_PERF_EMP  (Cur IN Cursor_Basilea, PN_FecPro IN NUMBER) RETURN T_Array_Basilea_Calculo_LGD_AUX_3
  PARALLEL_ENABLE(PARTITION Cur BY ANY)
  PIPELINED;

--------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PROC_CALCULO_LGD    (PN_FecPro IN NUMBER);

--FLA01 dejo espacio
END; -- PACKAGE CALCULO_LGD
/

show errors;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cuerpo del Package
CREATE OR REPLACE PACKAGE BODY  BAS_MEN.CALCULO_LGD IS

-------------------------------------------------------------------------
---HDEV-107786 17/05/2022
 FUNCTION F_CALCULO_LGD_ANT (Cur IN CURSOR_BASILEA, PN_FecPro IN NUMBER) RETURN T_Array_Basilea_Calculo_LGD_AUX_1
     PARALLEL_ENABLE(PARTITION Cur BY ANY)
     PIPELINED
 is
  In_Rec                            Cur%ROWTYPE;
  Out_Rec                           BAS_MEN.BASILEA_AIRB_LGD_AUX_1%ROWTYPE;
  ----- Varaibles del proceso -----
  v_Num                             NUMBER;

  VV_TIPO                           VARCHAR2(100);
  VV_TIPO_NOMORA                    VARCHAR2(100) DEFAULT '?';
  VV_LGD                            FLOAT(126);
  VV_GAR_HIP                        VARCHAR2(2);
  VV_TIP_GAR                        VARCHAR2(55);
  VV_TIP_GAR_H                      VARCHAR2(55);
  VV_TIPO_PROC                      VARCHAR2(100);
  VV_TIPO_HIP                       VARCHAR2(100);
  VV_SEGMENTO                       VARCHAR2(17);
  VV_LGD_WORST                      FLOAT(126);
  VV_LGD_BE                         FLOAT(126);
  VV_EDAD                           FLOAT(126);
  VN_LGD_LONGRUN                    FLOAT(126);
  VN_C_TYPE_GUARANTEE               NUMBER(1);
  VV_LGD_NOMORA                     FLOAT(126);
  VV_LGD_PROC                       FLOAT(126);
  VN_LGD_LONGRUN_PROC               FLOAT(126);
  VN_C_TYPE_GUARANTEE_PROC          NUMBER(1);
  VV_LGD_HIP                        FLOAT(126);
  VN_LGD_LONGRUN_HIP                FLOAT(126);
  VN_C_TYPE_GUARANTEE_HIP           NUMBER(1);
  VV_IMPORTE                        FLOAT(126);
  VV_FI_LGDLRNOMORA                 FLOAT(126);
  VV_ROWID                          VARCHAR2(12);
  VN_COUNT                          NUMBER(9):=0;
  VN_NUMERR                         NUMBER(3);
  VV_MENSAJE                        VARCHAR2(255);
  VV_MENSAJE2                       VARCHAR2(255);
  VV_RET                            VARCHAR2(100);
  FALLO1                            EXCEPTION;
  FALLO2                            EXCEPTION;
  VV_IN_SEGAIRB                     VARCHAR2(25);
  VN_FI_MATAIRB                     FLOAT;
  VN_FI_ELAIRB                      FLOAT;
  VN_FI_ELAIRBCON                   FLOAT;
  VV_IN_SEGMBS                      VARCHAR2(25);
  VV_INMUEBLE                       VARCHAR2(8);
  VV_IN_SEGMBS3                     VARCHAR2(3);
  VN_FI_ATAMAIRB                    FLOAT;
  VN_COUNT2                         NUMBER(10) :=0;
  CALCULO                           FLOAT :=0;
  VN_CUOTA                          NUMBER(10) := 0;
  VN_PERIOD                         NUMBER(4,1) := 0;
  VN_TIEMPO_PERIODO                 NUMBER(3) := 0;
  VN_OR_VIDRES                      FLOAT;
  VN_TIPO_PERIODO                   VARCHAR2(1) := '?';
  VN_IMPORTE                        FLOAT :=0;
  VV_NACIONAL                       varchar2(1);
  VV_TRAMO_EDAD                     varchar2(32);
  VV_PRIM_SEG_HIP                   VARCHAR2(4) := '?';
  VV_PC_LGD_EDAD_1                  FLOAT;
  VV_PC_LGD_LR_EDAD_1               FLOAT;
  VV_PC_LGD_EDAD_2                  FLOAT;
  VV_PC_LGD_LR_EDAD_2               FLOAT;
  VV_PC_LGD_EDAD_3                  FLOAT;
  VV_PC_LGD_LR_EDAD_3               FLOAT;
  VV_PC_LGD_EDAD_4                  FLOAT;
  VV_PC_LGD_LR_EDAD_4               FLOAT;
  VV_PC_LGD_EDAD_5                  FLOAT;
  VV_PC_LGD_LR_EDAD_5               FLOAT;
  VV_MES_TASACION                   NUMBER(6) :=0;
  VV_IN_EDAD                        VARCHAR2(32) := '?';
  VV_LGD_BEWC                       FLOAT;
  VV_IN_BE_WC                       VARCHAR2(2);
  VV_MULT                           FLOAT;
  VV_FECHAMORA                      NUMBER(8);
  VV_FI_IMPLTV                      NUMBER;
  VV_FECTAS                         NUMBER(6);

  VV_In_Activo_Cons_GEF          BAS_MEN.BASILEA_AIRB_LGD.IN_ACTIVO_CONS%TYPE     DEFAULT 0;
  VV_In_Activo_Cons              BAS_MEN.BASILEA_AIRB_LGD.IN_ACTIVO_CONS%TYPE      DEFAULT NULL; -- Por defecto null
  VV_Entidad_Ente                BAS_MEN.BASILEA_AIRB_LGD.ENTIDAD_ENTE%TYPE         DEFAULT 0;
  v_Es_Gran_EEFF                 VARCHAR2(1)                                    DEFAULT 'N';
  v_Es_Gran_EEFF_COREP           VARCHAR2(1)                                    DEFAULT 'N';
  v_Es_Ente_No_Regulado          VARCHAR2(1)                                    DEFAULT 'N';
  v_Sector_No_Regulado           VARCHAR2(1)                                    DEFAULT 'N';
  v_Person_No_Regulado           VARCHAR2(1)                                    DEFAULT 'N';
 --v_En_Fichero_CMOF               VARCHAR2(1)                                    DEFAULT 'N';
  v_En_TipOpe_Proced             VARCHAR2(1)                                    DEFAULT 'N';
  v_PerLiq_CSA                   BAS_MEN.MAESTRO_CSA_orig.PERIODICIDAD%TYPE     DEFAULT 1;
 --v_Dias_Periodicidad             NUMBER(3)                                      DEFAULT 1;

  vV_Es_Mora_Subjetiva           VARCHAR2(1)                                    DEFAULT 'N';

    ---SMG 24/09 - PETICION ENCARNI
  VV_LOANTOVALUEMIN         FLOAT(126);
  VV_LOANTOVALUEMAX         FLOAT(126);
  VV_OR_IDREG NUMBER;
 ---SMG 24/09 - PETICION ENCARNI


BEGIN

  VN_NUMERR:= 1;


   loop
    FETCH Cur  INTO in_rec; --asignamos el contenido del cursor a la variable
    EXIT WHEN Cur%NOTFOUND;
          VN_NUMERR:= 7;
        --Como el resultado del cursor no se insertara en  una tabla, debemos recorrer
        --el objeto in_rec en memoria

            BEGIN
            VN_NUMERR                := 2;
            VV_OR_IDREG              :=IN_REC.OR_IDREG;
            VN_COUNT                 := VN_COUNT + 1;
            VV_GAR_HIP               := 'NO';
            VV_LGD                   := 99;
            VV_TIPO                  := '?';
            VV_TIPO_PROC             := '?';
            VV_TIPO_HIP              := '?';
            VV_TIPO_NOMORA           := '?';
            VV_TIP_GAR               := '?';
            VV_TIP_GAR_H             := '?';
            VV_ROWID                 := TO_CHAR(IN_REC.OR_IDREG);
            VV_SEGMENTO              := '?';
            VV_LGD_WORST             := 99;
            VV_EDAD                  := '';
            VV_IN_EDAD               := '';
            VV_LGD_BE                := 99;
            VN_LGD_LONGRUN           := 0.35;
            VN_C_TYPE_GUARANTEE      := 0;
            VV_LGD_NOMORA            := 99;
            VV_INMUEBLE              := '?';
            VV_LGD_PROC              := 99;
            VN_LGD_LONGRUN_PROC      := 99;
            VN_C_TYPE_GUARANTEE_PROC := 0;
            VV_LGD_HIP               := 99;
            VN_LGD_LONGRUN_HIP       := 99;
            VN_C_TYPE_GUARANTEE_HIP  := 0;
            VV_IMPORTE               := 0;
            VV_FI_LGDLRNOMORA        := 99;
            VV_IN_SEGMBS             := IN_REC.IN_SEGMBS;
            VV_INMUEBLE              := '?';
            VV_IN_SEGMBS3            := '?';
            VN_FI_ATAMAIRB           := 0;
            VN_OR_VIDRES             := IN_REC.OR_VIDRES;
            VN_FI_MATAIRB            := 0;
            CALCULO                  := 0;
            VN_COUNT2                :=0;
            VV_TRAMO_EDAD            := '?';
            VV_PRIM_SEG_HIP          := 'N';
            VV_PC_LGD_EDAD_1         := 99;
            VV_PC_LGD_LR_EDAD_1      := 99;
            VV_PC_LGD_EDAD_2         := 99;
            VV_PC_LGD_LR_EDAD_2      := 99;
            VV_PC_LGD_EDAD_3         := 99;
            VV_PC_LGD_LR_EDAD_3      := 99;
            VV_PC_LGD_EDAD_4         := 99;
            VV_PC_LGD_LR_EDAD_4      := 99;
            VV_PC_LGD_EDAD_5         := 99;
            VV_PC_LGD_LR_EDAD_5      := 99;
            VV_LGD_BEWC              := 99;
            VV_IN_BE_WC              := '?';
            VV_MULT                  := 1;
            VV_FECTAS                := 190001;
            VV_FECHAMORA             := 19010101;
            VV_Es_Mora_Subjetiva     := 'N';
            VV_FI_IMPLTV             := IN_REC.IMPLTV;
            ---SMG 24/09 - PETICION ENCARNI
            VV_LOANTOVALUEMIN        := 0;
            VV_LOANTOVALUEMAX        := 0;
            ---SMG 24/09 - PETICION ENCARNI

     IF IN_REC.IN_SEG_HIP = '?' THEN
                     BEGIN
                          SELECT distinct IN_SEG_HIP
                            INTO IN_REC.IN_SEG_HIP
                            FROM BAS_MEN.MAESTRO_TIPO_HIPOTECAS -- XCG, cruce por contrato en vez de refope, 22/05/14
                           WHERE OR_TITULARITAT = IN_REC.OR_TITULARITAT
                             AND OR_CLUNICONTR = IN_REC.OR_CLUNICONTR;
                     EXCEPTION
                        WHEN OTHERS THEN
                             IF IN_REC.SEG_HIP_AUX = '?' THEN
                                IN_REC.IN_SEG_HIP:= 'P';
                             ELSE
                                 IN_REC.IN_SEG_HIP:= IN_REC.SEG_HIP_AUX;
                             END IF;
                     END;

      END IF;


     IF IN_REC.OR_TIPIDE IN (0, 4) THEN
                      VV_NACIONAL:= 'N';
                  ELSIF IN_REC.OR_TIPIDE IN (3, 5) THEN
                        VV_NACIONAL:= 'T';
                  ELSIF IN_REC.OR_ENTITY IN (81, 8211) THEN
                        VV_NACIONAL:= 'N';
                  ELSE
                       VV_NACIONAL:= 'T';
     END IF;

     -- Marca para saber si tiene garantia hipotecaria.
     IF IN_REC.IN_SEGMBSINI = '103' THEN
        --No se tienen en cuenta como hipotecarias las garantías pignoraticias. XCG, 01/08/11
        BEGIN
          SELECT 'NO'
            INTO VV_GAR_HIP
            FROM BAS_MEN.GARANTIAS_PIGNORATIVAS
            WHERE CODGAR = IN_REC.OR_CODGAR;
        EXCEPTION
             WHEN OTHERS THEN
                  VV_GAR_HIP:= 'SI';
        END;

     ELSIF IN_REC.IN_SEGMBSINI IN ('104','003','005','006','009','010','019','002','017','101','102','027') THEN

           IF IN_REC.OR_PROCED IN ('CR-SINDIC', 'INV-C/C-CO','INV-C/C-CR','INV-C/C-EX','PR-DISPONI', 'PRES-DIVIS','PR-MOROS', 'PR-PENDENT', 'PR-PERIOD','PR-VENCUTS','SINDICDIV', 'PR-CONTENC')
           OR (IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'OX',  'ITOXE', 'MMOXE',  'ITOXC', 'MMOXC') AND IN_REC.OR_TIPOPE IN ('CR', 'PR')) THEN

              IF IN_REC.IN_TIPOREG NOT IN ('OXE', 'OX',  'ITOXE', 'MMOXE') THEN
                     BEGIN
                        SELECT 'SI'
                          INTO VV_GAR_HIP
                          FROM BAS_MEN.MAESTRO_TIT_REF_HIP
                         WHERE OR_REFOPE = IN_REC.OR_REFOPE
                           AND OR_TITULARITAT = IN_REC.OR_TITULARITAT
                           AND OR_CLUNICONTR = IN_REC.OR_CLUNICONTR  -- XCG, 25/03/14, se introduce el contrato en el cruce
                           AND IN_REC.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS);
                     EXCEPTION
                          WHEN OTHERS THEN
                               BEGIN
                                 SELECT 'SI'
                                   INTO VV_GAR_HIP
                                   FROM BAS_MEN.MAESTRO_TIPGAR
                                  WHERE GARANTIA = IN_REC.OR_CODGAR
                                    and TIPGAR = 'HIP';
                               EXCEPTION
                                    WHEN OTHERS THEN
                                         VV_GAR_HIP:= 'NO';
                               END;
                     END;
              ELSE
                   BEGIN
                      SELECT 'SI'
                        INTO VV_GAR_HIP
                        FROM BAS_MEN.MAESTRO_OFEX_HIP
                       WHERE OR_CTACLI = IN_REC.OR_CTACLI
                         AND OR_NUMOFI = IN_REC.OR_NUMOFI
                         AND OR_REFOPE = IN_REC.OR_REFOPE
                         AND IN_REC.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS);
                   EXCEPTION
                        WHEN OTHERS THEN
                             BEGIN
                                SELECT 'SI'
                                  INTO VV_GAR_HIP
                                  FROM BAS_MEN.MAESTRO_TIPGAR
                                 WHERE GARANTIA = IN_REC.OR_CODGAR
                                   and TIPGAR = 'HIP';
                             EXCEPTION
                                  WHEN OTHERS THEN
                                       VV_GAR_HIP:= 'NO';
                             END;
                   END;
              END IF;
           ELSE
                BEGIN
                  SELECT 'SI'
                    INTO VV_GAR_HIP
                    FROM BAS_MEN.MAESTRO_TIPGAR
                   WHERE GARANTIA = IN_REC.OR_CODGAR
                     and TIPGAR = 'HIP';
                EXCEPTION
                     WHEN OTHERS THEN
                          VV_GAR_HIP:= 'NO';
                END;
           END IF;
     END IF;

     VN_NUMERR:= 4;

     IF IN_REC.IN_SEGMBSINI = '034' THEN -- Cédulas hipotecarias al 11,25%
        VV_LGD := 0.1125;
        VN_LGD_LONGRUN:= VV_LGD;
        VV_TIPO:= 'Cédulas hipotecarias';
     ELSIF IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX' THEN --Para Ofex, LGD Foundation
           VV_LGD         := 0.45;
           VN_LGD_LONGRUN := VV_LGD;
           VV_TIPO:= 'OFEX';
     ELSIF IN_REC.IN_SEGMBS0 = '201' THEN
           VV_LGD         := 0.45;
           VN_LGD_LONGRUN := VV_LGD;
           VV_TIPO:= 'Project Finance';
     ELSIF IN_REC.IN_SEGMBSINI IN ('007', '018', '021', '028', '029') THEN --Cálculo de LGD para EEFF al 45%.
           VV_LGD:= 0.45;
           VN_LGD_LONGRUN:= VV_LGD;
           VV_TIPO:= 'EEFF';
     ELSIF IN_REC.IN_SEGMBSINI IN ('008', '022', '023', '026', '030', '031', '032', '035', '036', '037', '038') THEN
           VN_LGD_LONGRUN:= 0.4; -- Soberanos.
     ELSIF IN_REC.IN_SEGMBSINI IN ('001', '004', '024', '025', '033', '039', '040') THEN
           VN_LGD_LONGRUN:= 0.4; -- Corporaciones Locales no morosas.
     ELSIF IN_REC.OR_ENTITY = 242 THEN
           VN_LGD_LONGRUN:= 0.55; -- BSFINCOM
     ELSIF IN_REC.EAD < 100 AND IN_REC.IN_SEGMBSINI IN ('103', '104','003','005','006','009','010','019','002','017','101','102','027','106','107') THEN
           VV_LGD              := 1;
           VN_LGD_LONGRUN      := 1;
           VV_LGD_NOMORA       := 1;
           VN_C_TYPE_GUARANTEE := 0;
           VV_TIPO:= 'Certificación de saldos < 100€';
     /* 05/08/2021 RMR Marcamos con 100% aquellos con riesgo de correlación adversa */
     ELSIF IN_REC.RIESGO_CORR_ADVERSA = 'SI' THEN
           VV_LGD  := 1;
           VV_LGD_NOMORA := 1;
           VN_LGD_LONGRUN := 1;
           VN_C_TYPE_GUARANTEE := 0;
           VV_TIPO:= 'Riesgo correlación adversa';
     ELSE
          VN_NUMERR:= 5;
          --LGD por procedencias, prevalecen sobre las demás LGDs Excepto si es la asignación por garantía devuelve una menor.
          IF IN_REC.OR_PROCED = 'LEASING' THEN

                IF IN_REC.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031) THEN
                    VV_TIP_GAR:= 'LEASIN';
                    VV_GAR_HIP := 'NO';
                ELSE
                    VV_TIP_GAR:= 'LEASNOIN';
                END IF;

                --CCAA
                IF IN_REC.IN_SEGMBSINI IN ('101', '102', '002', '017') THEN

                    VN_NUMERR:= 6;
                    VV_SEGMENTO := 'CCAA';

                    IF VV_TIP_GAR = 'LEASIN' THEN
                       VV_PRIM_SEG_HIP := 'LE';
                       VV_TIPO_PROC := 'RES';

                                           IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999    THEN
                          VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
                    ELSE
                            IF IN_REC.OR_FECOPE < 19000101 THEN
                                 VV_FECTAS := 190001;
                            ELSE
                                 VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
                            END IF;
                    END IF;

                          BEGIN
                              SELECT IN_MES_TASACION, IN_EDAD
                                INTO VV_MES_TASACION, VV_IN_EDAD
                                                               FROM BAS_MEN.TASACION_EDAD
                               WHERE IN_MES_TASACION between TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(VV_FECTAS ,'YYYY/MM'),-2), 'YYYYMM')) and VV_FECTAS;
                          EXCEPTION
                               WHEN no_data_found THEN
                                   VV_MES_TASACION    := 199501;
                                   VV_IN_EDAD        := 'NU_EDAD_1';
                          END;

                          BEGIN
                               SELECT DECODE(VV_IN_EDAD, 'NU_EDAD_1', PC_LGD_EDAD_1,
                                                         'NU_EDAD_2', PC_LGD_EDAD_2,
                                                         'NU_EDAD_3', PC_LGD_EDAD_3,
                                                         'NU_EDAD_4', PC_LGD_EDAD_4,
                                                         'NU_EDAD_5', PC_LGD_EDAD_5) LGD,
                                      DECODE(VV_IN_EDAD, 'NU_EDAD_1', PC_LGD_LR_EDAD_1,
                                                         'NU_EDAD_2', PC_LGD_LR_EDAD_2,
                                                         'NU_EDAD_3', PC_LGD_LR_EDAD_3,
                                                         'NU_EDAD_4', PC_LGD_LR_EDAD_4,
                                                         'NU_EDAD_5', PC_LGD_LR_EDAD_5) LGD_LR,
                                      C_TYPE_GUARANTEE
                                 INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                                  FROM BAS_MEN.MAESTRO_LGD_HIP
                                 WHERE IN_PRIM_SEG_HIP = VV_PRIM_SEG_HIP
                                   AND IN_TIPO = VV_TIPO_PROC
                                   AND IN_SEGMENTO = VV_SEGMENTO;
                          EXCEPTION
                               WHEN OTHERS THEN
                                  VV_LGD_PROC:= 99;
                                  VN_LGD_LONGRUN_PROC := 99;
                                  VN_C_TYPE_GUARANTEE_PROC := 0;
                          END;

                    ELSE

                        VV_TIPO_PROC := 'Leasing no inmobiliario';

                        BEGIN
                           SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                             INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                             FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                            WHERE IN_TIPO = VV_TIPO_PROC
                                  AND IN_SEGMENTO = VV_SEGMENTO;
                        EXCEPTION
                             WHEN OTHERS THEN
                                  VV_LGD_PROC:= 99;
                                  VN_LGD_LONGRUN_PROC:= 99;
                                  VN_C_TYPE_GUARANTEE_PROC := 0;
                        END;

                    END IF;

                    VN_NUMERR:= 7;

                --EMPRESAS
                ELSIF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN
                        VN_NUMERR:= 8;
                        VV_SEGMENTO := 'EMPRESAS';
                        VV_NACIONAL := 'N';

                      IF   VV_TIP_GAR = 'LEASNOIN' THEN
                           VV_TIPO_PROC := 'Leasing no inmobiliario';

                            BEGIN
                               SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                                 INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                                 FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                                WHERE IN_TIPO         = VV_TIPO_PROC
                                  AND IN_SEGMENTO = VV_SEGMENTO;
                            EXCEPTION
                                 WHEN OTHERS THEN
                                      VV_LGD_PROC:= 99;
                                      VN_LGD_LONGRUN_PROC:= 99;
                                      VN_C_TYPE_GUARANTEE_PROC := 0;
                            END;

                      ELSE
                            VV_PRIM_SEG_HIP := 'PRIM';
                            VV_FI_IMPLTV    := IN_REC.IMPLTV;

                            IF IN_REC.CONSTRUCCION = 'SI' THEN
                               VV_TIPO_PROC := 'CONSTRUCCION';
                            ELSIF IN_REC.CONSTRUCCION = 'NO' THEN
                                  VV_TIPO_PROC := 'RESTO';
                            END IF;

                            IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999    THEN
                                 VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
                            ELSE
                                 IF IN_REC.OR_FECOPE < 19000101 THEN
                                    VV_FECTAS := 190001;
                                 ELSE
                                      VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
                                 END IF;
                            END IF;

                            BEGIN
                                SELECT IN_MES_TASACION, IN_EDAD
                                  INTO VV_MES_TASACION, VV_IN_EDAD
                                  FROM BAS_MEN.TASACION_EDAD
                                 WHERE IN_MES_TASACION between TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(VV_FECTAS ,'YYYY/MM'),-2), 'YYYYMM')) and VV_FECTAS ;
                            EXCEPTION
                                 WHEN no_data_found THEN
                                      VV_MES_TASACION    := 199501;
                                      VV_IN_EDAD        := 'NU_EDAD_1';
                            END;

                            BEGIN
                                    SELECT DECODE(VV_IN_EDAD, 'NU_EDAD_1', PC_LGD_EDAD_1,
                                                              'NU_EDAD_2', PC_LGD_EDAD_2,
                                                              'NU_EDAD_3', PC_LGD_EDAD_3,
                                                              'NU_EDAD_4', PC_LGD_EDAD_4,
                                                              'NU_EDAD_5', PC_LGD_EDAD_5) LGD,
                                           DECODE(VV_IN_EDAD, 'NU_EDAD_1', PC_LGD_LR_EDAD_1,
                                                              'NU_EDAD_2', PC_LGD_LR_EDAD_2,
                                                              'NU_EDAD_3', PC_LGD_LR_EDAD_3,
                                                              'NU_EDAD_4', PC_LGD_LR_EDAD_4,
                                                              'NU_EDAD_5', PC_LGD_LR_EDAD_5) LGD_LR,
                                            C_TYPE_GUARANTEE, PC_LOANTOVALUEMIN, PC_LOANTOVALUEMAX
                                      INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC, VV_LOANTOVALUEMIN, VV_LOANTOVALUEMax
                                      FROM BAS_MEN.MAESTRO_LGD_HIP
                                     WHERE IN_PRIM_SEG_HIP  = VV_PRIM_SEG_HIP
                                       AND IN_TIPO                     = VV_TIPO_PROC
                                       AND IN_SEGMENTO             = VV_SEGMENTO
                                       AND ((PC_LOANTOVALUEMIN < VV_FI_IMPLTV
                                       AND PC_LOANTOVALUEMAX > VV_FI_IMPLTV)
                                        OR PC_LOANTOVALUEMAX = VV_FI_IMPLTV);

                            EXCEPTION
                                  WHEN OTHERS THEN
                                     VV_LGD_PROC:= 99;
                                     VN_LGD_LONGRUN_PROC := 99;
                                     VN_C_TYPE_GUARANTEE_PROC := 0;
                            END;
                      END IF;

                      VN_NUMERR:= 9;
                END IF;

                VV_TIPO_PROC := VV_SEGMENTO||'|'||VV_PRIM_SEG_HIP||'|'||substr(VV_TIPO_PROC,1,50)||'|'||VV_NACIONAL||'|'||TO_CHAR(VV_LOANTOVALUEMIN,'990.999999')||'|'||TO_CHAR(VV_LOANTOVALUEMAX,'990.999999')||'|'||VV_IN_EDAD;

                VN_NUMERR:= 10;

          --EFECTES
          ELSIF IN_REC.OR_PROCED = 'EFECTES' THEN
              VN_NUMERR:= 11;

              VV_SEGMENTO := 'EMPRESAS';

              IF IN_REC.IN_SEGMBSINI IN ('103', '104','003','005','006','009','010','019','002','017','101','102','027') THEN

                 VV_TIPO_PROC:= 'Descuento y factoring con recurso';

                 BEGIN
                      SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                        INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                        FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                       WHERE IN_TIPO     = VV_TIPO_PROC
                         AND IN_SEGMENTO = VV_SEGMENTO;
                 EXCEPTION
                         WHEN OTHERS THEN
                             VV_LGD_PROC:= 99;
                             VN_LGD_LONGRUN_PROC:= 99;
                             VN_C_TYPE_GUARANTEE_PROC := 0;
                 END;

              END IF;

              VV_TIPO_PROC := VV_SEGMENTO||'|'||substr(VV_TIPO_PROC,1,50);
              VN_NUMERR:= 13;

          -- Factoring
          ELSIF IN_REC.OR_PROCED = 'FACTORING' AND IN_REC.IN_SEGMBSINI IN ('103', '104','003','005','006','009','010','019','002','017','101','102','027') THEN

              VN_NUMERR:= 14;
              VV_SEGMENTO := 'EMPRESAS';

              -- LGD al 1% para los Factoring Sin Recurso Con Cobertura de BAS_MEN.MAESTRO_FACTORING_ASEGURADORAS 09/04/2018
              IF IN_REC.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR IN_REC.ENTFAC <> 9999 THEN

                   VV_TIPO_PROC:= 'Factoring sin recurso (con cobertura)';

                   BEGIN
                      SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                        INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                        FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                       WHERE IN_TIPO             = VV_TIPO_PROC
                         AND IN_SEGMENTO    =    VV_SEGMENTO;
                   EXCEPTION
                        WHEN OTHERS THEN
                             VV_LGD_PROC:= 99;
                             VN_LGD_LONGRUN_PROC:= 99;
                             VN_C_TYPE_GUARANTEE_PROC := 0;
                   END;

              ELSIF IN_REC.OR_CLUNICUENT = 999999999999999 THEN

                   VV_TIPO_PROC:= 'Descuento y factoring con recurso';

                   BEGIN
                      SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                        INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                        FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                       WHERE IN_TIPO             = VV_TIPO_PROC
                         AND IN_SEGMENTO    =    VV_SEGMENTO;
                   EXCEPTION
                        WHEN OTHERS THEN
                              VV_LGD_PROC:= 99;
                              VN_LGD_LONGRUN_PROC:= 99;
                              VN_C_TYPE_GUARANTEE_PROC:= 0;
                   END;

              ELSIF IN_REC.IN_SEGMBSINI IN ('002', '017', '101', '102') THEN -- Sin cobertura CCAA, como una SDOEX

                    VV_SEGMENTO := 'CCAA';
                    VV_TIPO_PROC := 'Sin documento ejecutivo';

                    BEGIN
                        SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                          INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                          FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                         WHERE IN_TIPO             = VV_TIPO_PROC
                           AND IN_SEGMENTO     = VV_SEGMENTO;
                    EXCEPTION
                          WHEN OTHERS THEN
                               VV_LGD_PROC:= 99;
                               VN_LGD_LONGRUN_PROC := 99;
                               VN_C_TYPE_GUARANTEE_PROC := 0;
                    END;
              ELSIF IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019', '027') THEN -- Sin cobertura Empresas como una SDOEX

                    VV_SEGMENTO := 'EMPRESAS';

                    IF IN_REC.OR_INDHOLDING IN ('1', '3', '4') THEN
                          VV_TIPO_PROC := 'Sin documento ejecutivo PAT';
                    ELSE
                          VV_TIPO_PROC := 'Sin documento ejecutivo No PAT';
                    END IF;

                    BEGIN
                        SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                          INTO VV_LGD_PROC, VN_LGD_LONGRUN_PROC, VN_C_TYPE_GUARANTEE_PROC
                          FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                         WHERE IN_TIPO             = VV_TIPO_PROC
                           AND IN_SEGMENTO     = VV_SEGMENTO;
                    EXCEPTION
                           WHEN OTHERS THEN
                                VV_LGD_PROC:= 99;
                                VN_LGD_LONGRUN_PROC:= 99;
                                VN_C_TYPE_GUARANTEE_PROC:= 0;
                    END;
              END IF;

              VV_TIPO_PROC := VV_SEGMENTO||'|'||substr(VV_TIPO_PROC,1,50);
              VN_NUMERR:= 15;
          END IF;

          ----- FIN ASIGNACIÓN LGD POR PROCEDENCIA --------------------------

          -----  ASIGNACIÓN LGD HIPOTECARIA --------------------------

          -- Si es particular o CCAA, primera hipoteca y con garantía hipotecaría. 5/12/07.
          IF (IN_REC.IN_SEG_HIP IN ('N','P') OR IN_REC.OR_PROCED = 'LEASING') AND VV_GAR_HIP = 'SI' AND IN_REC.IN_SEGMBSINI IN ('104', '103','101', '102', '002', '017') THEN

                  VN_NUMERR:= 16;
              -- Obtenemos el tipo de Finca para saber si es residencial o no. 5/12/07.
              IF IN_REC.IN_SEGMBSINI = '103' THEN
                     BEGIN
                         SELECT DECODE(TIPO_FINCA, 'RES', TIPO_FINCA, 'NO RES')
                           INTO VV_TIPO_HIP
                           FROM BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
                          WHERE TIPOFI = IN_REC.OR_TIPOFI;
                     EXCEPTION
                         WHEN OTHERS THEN
                          VV_TIPO_HIP := 'NO RES';
                          VV_NACIONAL := 'N';
                     END;
              -- Si es prestamo consumo con garantia hipotecaria o CCAA lo tratamos como prestamo hipotecario no residencial.
              -- No aplica el tratamiento de identificación del cliente para estos casos, tampoco del fiador. XCG, 22/04/14.
              ELSE
                   VV_TIPO_HIP := 'NO RES';
                   VV_NACIONAL := 'N';

              END IF;

              VN_NUMERR:= 17;

              VV_PRIM_SEG_HIP    := 'PRIM';        --ES PRIMERA HIPOTECA

              IF IN_REC.IN_SEGMBSINI IN ('101', '102', '002', '017') THEN
                 VV_SEGMENTO := 'CCAA';

              ELSE
                 VV_SEGMENTO := 'PARTICULARES';
              END IF;

              IF VV_TIP_GAR = 'LEASIN'   AND      VV_SEGMENTO = 'CCAA' THEN    --En caso de LEASING INMOBILIARIO,  IN_PRIM_SEG = LE y IN_TIPO, IN_CLIENTE_NACIONAL con sus valores defaults.
                   VV_LGD_HIP := VV_LGD_PROC;
                   VN_LGD_LONGRUN_HIP := VN_LGD_LONGRUN_PROC;
                   VN_C_TYPE_GUARANTEE_HIP := VN_C_TYPE_GUARANTEE_PROC;
                   VV_TIPO_HIP := VV_TIPO_PROC;

              ELSE

                   IF VV_TIPO_HIP = 'NO RES' THEN
                       VV_NACIONAL:= 'N';
                   END IF;

                   IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999    THEN
                       VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
                   ELSE
                       IF IN_REC.OR_FECOPE < 19000101 THEN
                          VV_FECTAS := 190001;
                       ELSE
                          VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
                       END IF;
                   END IF;


                   BEGIN
                       SELECT IN_MES_TASACION, IN_EDAD
                         INTO VV_MES_TASACION, VV_IN_EDAD
                         FROM BAS_MEN.TASACION_EDAD
                        WHERE IN_MES_TASACION between TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(VV_FECTAS ,'YYYY/MM'),-2), 'YYYYMM')) and VV_FECTAS ;
                   EXCEPTION
                        WHEN no_data_found THEN
                            VV_MES_TASACION    := 199501;
                            VV_IN_EDAD        := 'NU_EDAD_1';
                   END;


                   VV_FI_IMPLTV        := IN_REC.IMPLTV;

                   BEGIN
                      SELECT DECODE(VV_IN_EDAD,    'NU_EDAD_1', PC_LGD_EDAD_1,
                                                   'NU_EDAD_2', PC_LGD_EDAD_2,
                                                   'NU_EDAD_3', PC_LGD_EDAD_3,
                                                   'NU_EDAD_4', PC_LGD_EDAD_4,
                                                   'NU_EDAD_5', PC_LGD_EDAD_5) LGD,
                             DECODE(VV_IN_EDAD,    'NU_EDAD_1', PC_LGD_LR_EDAD_1,
                                                     'NU_EDAD_2', PC_LGD_LR_EDAD_2,
                                                     'NU_EDAD_3', PC_LGD_LR_EDAD_3,
                                                     'NU_EDAD_4', PC_LGD_LR_EDAD_4,
                                                     'NU_EDAD_5', PC_LGD_LR_EDAD_5) LGD_LR,
                                                    C_TYPE_GUARANTEE, PC_LOANTOVALUEMIN, PC_LOANTOVALUEMAX
                       INTO VV_LGD_HIP, VN_LGD_LONGRUN_HIP, VN_C_TYPE_GUARANTEE_HIP, VV_LOANTOVALUEMIN, VV_LOANTOVALUEMAX
                       FROM BAS_MEN.MAESTRO_LGD_HIP
                      WHERE ((PC_LOANTOVALUEMIN < VV_FI_IMPLTV
                        AND PC_LOANTOVALUEMAX > VV_FI_IMPLTV)
                         OR PC_LOANTOVALUEMAX = VV_FI_IMPLTV)
                                        AND IN_TIPO                 = VV_TIPO_HIP
                                        AND IN_CLIENTE_NACIONAL     = VV_NACIONAL
                                        AND IN_SEGMENTO             = VV_SEGMENTO
                                        AND IN_PRIM_SEG_HIP         = VV_PRIM_SEG_HIP;
                   EXCEPTION
                        WHEN OTHERS THEN
                             VV_LGD_HIP:= 99;
                             VN_LGD_LONGRUN_HIP:= 99;
                             VN_C_TYPE_GUARANTEE_HIP := 0;
                   END;

                   VV_TIPO_HIP    := VV_SEGMENTO||'|'||VV_PRIM_SEG_HIP||'|'||substr(VV_TIPO_HIP,1,50)||'|'||VV_NACIONAL||'|'||TO_CHAR(VV_LOANTOVALUEMIN,'990.999999')||'|'||TO_CHAR(VV_LOANTOVALUEMAX,'990.999999')||'|'||VV_IN_EDAD;


                   VN_NUMERR:= 18;

              END IF;

          -- Si es PARTICULAR o CCAA, SEGUNDA hipoteca y con garantía hipotecaría.
          ELSIF IN_REC.IN_SEG_HIP = 'S' AND IN_REC.IN_SEGMBSINI IN ('104','103','101','102','002','017') AND VV_GAR_HIP = 'SI' THEN
              VN_NUMERR:= 19;

              IF IN_REC.IN_SEGMBSINI IN ('101', '102', '002', '017') THEN
                      VV_SEGMENTO := 'CCAA';
              ELSE
                      VV_SEGMENTO := 'PARTICULARES';
              END IF;

              VV_PRIM_SEG_HIP        := 'SEG';
              VV_TIPO_HIP            := 'RES';
              VV_NACIONAL            := 'N';

              BEGIN
                  SELECT  PC_LGD_EDAD_1,    PC_LGD_LR_EDAD_1, C_TYPE_GUARANTEE
                    INTO VV_LGD_HIP, VN_LGD_LONGRUN_HIP, VN_C_TYPE_GUARANTEE_HIP
                    FROM BAS_MEN.MAESTRO_LGD_HIP
                               WHERE IN_TIPO                 = VV_TIPO_HIP
                                 AND IN_CLIENTE_NACIONAL     = VV_NACIONAL
                                 AND IN_SEGMENTO             = VV_SEGMENTO
                                 AND IN_PRIM_SEG_HIP         = VV_PRIM_SEG_HIP;
              EXCEPTION
                  WHEN OTHERS THEN
                        VV_LGD_HIP:= 99;
                        VN_LGD_LONGRUN_HIP:= 99;
                        VN_C_TYPE_GUARANTEE_HIP:= 0;
              END;


              VV_TIPO_HIP    := VV_SEGMENTO||'|'||substr(VV_TIPO_HIP,1,50)||'|'||VV_NACIONAL||'|'||VV_PRIM_SEG_HIP||'|'||VV_IN_EDAD;

              VN_NUMERR:= 20;

          -- Si es empresa con garantía hipotecaría:
          ELSIF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') AND VV_GAR_HIP = 'SI' THEN
              VN_NUMERR:= 21;


              --PROMOTORES CON PROMOCIÓN
              IF IN_REC.IN_SEGMBS2 = '020' AND IN_REC.IN_SEGMBS0 = '200' AND IN_REC.IN_SEG_HIP IN('P','N') THEN
                  VN_NUMERR:= 22;
                  VV_SEGMENTO            := 'PROMOTORES';
                  VV_PRIM_SEG_HIP        := 'PRIM';
                  VV_NACIONAL            := 'N';

                  IF IN_REC.IN_PRESTPERCENT = 1         THEN
                          VV_TIPO_HIP :=  'SUELO';
                  ELSIF IN_REC.IN_PRESTPERCENT = 2     THEN
                          VV_TIPO_HIP :=  'EN CURSO';
                  ELSIF IN_REC.IN_PRESTPERCENT = 3     THEN
                          VV_TIPO_HIP :=  'ACABADO';
                  END IF;

--SMG-I-CAMBIO LTV/FECTAS PARA PROMOTORES CON INM ACABADO
--                IF NVL(IN_REC.IN_FECTAS_CONC,0) > 190001 AND IN_REC.IN_FECTAS_CONC <> 999999    THEN
--                    VV_FECTAS := IN_REC.IN_FECTAS_CONC;
--                ELSE
--                    VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
--                END IF;
                  IF IN_REC.IN_PRESTPERCENT = 3 THEN
                          IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999  THEN
                              VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
                          ELSE
                              IF IN_REC.OR_FECOPE < 19000101 THEN
                                       VV_FECTAS := 190001;
                              ELSE
                                       VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
                              END IF;
                          END IF;
                  END IF;

                  IF IN_REC.IN_PRESTPERCENT IN (1,2) THEN
                          IF NVL(IN_REC.IN_FECTAS_CONC,0) > 190001 AND IN_REC.IN_FECTAS_CONC <> 999999 THEN
                                  VV_FECTAS := IN_REC.IN_FECTAS_CONC;
                          ELSE
                              IF IN_REC.OR_FECOPE < 19000101 THEN
                                       VV_FECTAS := 190001;
                              ELSE
                                       VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
                              END IF;
                          END IF;
                  END IF;
          --SMG-F-CAMBIO LTV/FECTAS PARA PROMOTORES CON INM ACABADO

                  BEGIN
                          SELECT IN_MES_TASACION, IN_EDAD
                            INTO VV_MES_TASACION, VV_IN_EDAD
                            FROM BAS_MEN.TASACION_EDAD
                           WHERE IN_MES_TASACION between TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(VV_FECTAS ,'YYYY/MM'),-2), 'YYYYMM')) and VV_FECTAS ;
                  EXCEPTION
                          WHEN OTHERS THEN
                              VV_MES_TASACION    := 199501;
                              VV_IN_EDAD        := 'NU_EDAD_1';
                  END;


              ELSE --Si es empresa con garantía hipotecaría:
                        VV_SEGMENTO    := 'EMPRESAS';
                        VN_NUMERR:= 23;


                        IF IN_REC.IN_SEG_HIP = 'S' THEN
                                VV_PRIM_SEG_HIP := 'SEG';
                        ELSE
                                VV_PRIM_SEG_HIP := 'PRIM';
                        END IF;


                        IF IN_REC.CONSTRUCCION = 'SI' THEN
                                VV_TIPO_HIP :=  'CONSTRUCCION';
                        ELSE
                                VV_TIPO_HIP :=  'RESTO';
                        END IF;

                        IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999    THEN
                            VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
                        ELSE
                            IF IN_REC.OR_FECOPE < 19000101 THEN
                                VV_FECTAS := 190001;
                            ELSE
                                VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
                            END IF;
                        END IF;

                        BEGIN
                            SELECT IN_MES_TASACION, IN_EDAD
                              INTO VV_MES_TASACION, VV_IN_EDAD
                              FROM BAS_MEN.TASACION_EDAD
                             WHERE IN_MES_TASACION between TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(VV_FECTAS ,'YYYY/MM'),-2), 'YYYYMM')) and VV_FECTAS ;
                        EXCEPTION
                             WHEN OTHERS THEN
                                 VV_MES_TASACION    := 199501;
                                 VV_IN_EDAD        := 'NU_EDAD_1';
                        END;
                        VN_NUMERR:= 24;


              END IF;

              VN_NUMERR:= 25;

              --SMG-30/04/19  LTV PROM-I
              --IF VV_SEGMENTO    = 'PROMOTORES' AND IN_REC.IMPLTVCONC > 0 THEN
              /*HDEV-107786 04/04/2022 Cambio nombre campo IMPLTVCONC por IMPLTVEMP */
              IF VV_SEGMENTO    = 'PROMOTORES' AND IN_REC.IMPLTV > 0 and IN_REC.IN_PRESTPERCENT <> 3 THEN
                    --SMG-30/04/19  LTV PROM-F

                    VV_FI_IMPLTV := IN_REC.IMPLTV;--IN_REC.IMPLTVCONC;
              ELSE
                    VV_FI_IMPLTV := IN_REC.IMPLTV;
              END IF;

             /*HDEV-107786 04/04/2022 COMENTADO */
             -- IF VV_SEGMENTO    = 'PROMOTORES' AND IN_REC.IMPLTVCONC > 0 and IN_REC.IN_PRESTPERCENT <> 3 THEN
             -- SMG-30/04/19  LTV PROM-F
              -- VV_FI_IMPLTV := IN_REC.IMPLTVCONC;
             -- ELSE
              -- VV_FI_IMPLTV := IN_REC.IMPLTV;
             -- END IF;
             BEGIN
                SELECT DECODE(VV_IN_EDAD, 'NU_EDAD_1', PC_LGD_EDAD_1,
                                          'NU_EDAD_2', PC_LGD_EDAD_2,
                                          'NU_EDAD_3', PC_LGD_EDAD_3,
                                          'NU_EDAD_4', PC_LGD_EDAD_4,
                                          'NU_EDAD_5', PC_LGD_EDAD_5) LGD,
                       DECODE(VV_IN_EDAD, 'NU_EDAD_1', PC_LGD_LR_EDAD_1,
                                          'NU_EDAD_2', PC_LGD_LR_EDAD_2,
                                          'NU_EDAD_3', PC_LGD_LR_EDAD_3,
                                          'NU_EDAD_4', PC_LGD_LR_EDAD_4,
                                          'NU_EDAD_5', PC_LGD_LR_EDAD_5) LGD_LR,
                                        C_TYPE_GUARANTEE,PC_LOANTOVALUEMIN, PC_LOANTOVALUEMAX
                  INTO VV_LGD_HIP, VN_LGD_LONGRUN_HIP, VN_C_TYPE_GUARANTEE_HIP, VV_LOANTOVALUEMIN, VV_LOANTOVALUEMAX
                  FROM BAS_MEN.MAESTRO_LGD_HIP
                 WHERE ((PC_LOANTOVALUEMIN < VV_FI_IMPLTV
                   AND PC_LOANTOVALUEMAX > VV_FI_IMPLTV)
                    OR PC_LOANTOVALUEMAX = VV_FI_IMPLTV)
                   AND IN_PRIM_SEG_HIP  = VV_PRIM_SEG_HIP
                   AND IN_SEGMENTO      = VV_SEGMENTO
                   AND IN_TIPO          = VV_TIPO_HIP;
              EXCEPTION
                   WHEN OTHERS THEN
                        VV_LGD_HIP:= 99;
                        VN_LGD_LONGRUN_HIP:= 99;
                        VN_C_TYPE_GUARANTEE_HIP:=0;
              END;

                VN_NUMERR:= 26;

                VV_TIPO_HIP    := VV_SEGMENTO||'|'||VV_PRIM_SEG_HIP||'|'||substr(VV_TIPO_HIP,1,50)||'|'||VV_NACIONAL||'|'||TO_CHAR(VV_LOANTOVALUEMIN,'990.999999')||'|'||TO_CHAR(VV_LOANTOVALUEMAX,'990.999999')||'|'||VV_IN_EDAD;

          END IF;
          VN_NUMERR:= 27;
          -----  FIN ASIGNACIÓN LGD HIPOTECARIA --------------------------

          BEGIN
                SELECT TIPGAR
                  INTO VV_TIP_GAR
                  FROM BAS_MEN.MAESTRO_TIPGAR
                 WHERE GARANTIA = IN_REC.OR_CODGAR;
          EXCEPTION
                WHEN OTHERS THEN
                    VV_TIP_GAR:= 'DOEX'; --Como valor por defecto aplicaremos LGD de Préstamo consumo documento Ejecutivo. XCG, 25/07/08.
          END;

          IF VV_TIP_GAR = 'EXP' THEN
               BEGIN
                  SELECT LGD, LGD_LR,C_TYPE_GUARANTEE
                    INTO VV_LGD, VN_LGD_LONGRUN,VN_C_TYPE_GUARANTEE
                    FROM BAS_MEN.MAESTRO_GARANTIA_EXP
                   WHERE GARANTIA = IN_REC.OR_CODGAR;
               EXCEPTION
                     WHEN OTHERS THEN
                         VV_LGD:= 99;
                         VN_LGD_LONGRUN:= 99;
                         VN_C_TYPE_GUARANTEE:=0;
               END;

               VV_TIPO := VV_TIP_GAR;
               VN_NUMERR:= 29;

          END IF;

          VN_NUMERR:= 28;

          -----  ASIGNACIÓN LGD POR GARANTIA --------------------------

         /*   IF (VV_TIP_GAR <> 'EXP'
            AND IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','104', '103','101','102','002','017','003','005','006','009','010','019','027'))
            OR IN_REC.IN_SEGMBSINI in ('106', '107')
            THEN*/

            /*  SMG 19/09 - CAMBIO PRELACION EXP PARTICULARES
     IF (VV_TIP_GAR <> 'EXP'
         AND IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','104', '103','101','102','002','017','003','005','006','009','010','019','027'))
          OR IN_REC.IN_SEGMBSINI in ('106', '107')*/

    IF VV_TIP_GAR <> 'EXP'
          AND IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027','104', '103','101','102','002','017','003','005','006','009','010','019','027','106','107') THEN
    -- SMG 19/09 - CAMBIO PRELACION EXP PARTICULARES

                      VN_NUMERR:= 30;

                          -- Si es particular y no tiene garantía hipotecaría
                  IF IN_REC.IN_SEGMBSINI in ('106', '107') THEN

                                    VV_SEGMENTO    := 'PARTICULARES';                        --  MR, 04/04/17
                                    IF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'KT' THEN
                                            VV_TIPO := 'DOEX (SGA) Credito';
                                    ELSIF SUBSTR(IN_REC.IN_SUCEPT,1,2) = 'TA' THEN
                                             VV_TIPO := 'Sin documento ejecutivo (SDOE) Tarjetas';

                                    ELSIF VV_TIP_GAR <> 'EXP' THEN
                                                IF VV_TIP_GAR = 'D' THEN
                                                     VV_TIPO := 'Prestamo Consumo Dineraria';
                                                ELSIF VV_TIP_GAR = 'D2' THEN        -- Se agrega la Dineraria Experta. MR, 27/6/19
                                                     VV_TIPO := 'Préstamos consumo Dineraria Experta';
                                                ELSE
                                          VV_TIPO:= 'Documento ejecutivo Prestamo Consumo';
                                                END IF;
                                    END IF;

                                    IF         VV_TIPO <> 'EXP' THEN
                                            BEGIN
                                                SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                                                  INTO VV_LGD, VN_LGD_LONGRUN, VN_C_TYPE_GUARANTEE
                                                  FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                                                 WHERE IN_TIPO      = VV_TIPO
                                                   AND IN_SEGMENTO    = VV_SEGMENTO;
                                            EXCEPTION
                                                 WHEN OTHERS THEN
                                                        VV_LGD:= 99;
                                                        VN_LGD_LONGRUN:= 99;
                                                        VN_C_TYPE_GUARANTEE:= 0;
                                            END;

                                            VV_TIPO    := VV_SEGMENTO||'|'||VV_TIPO; --  MR, 04/04/17

                                    END IF;

                          ELSIF IN_REC.IN_SEGMBSINI in ('104', '103') THEN

                                  VN_NUMERR:= 31;
                                    IF VV_TIP_GAR = 'HIP' THEN
                                         VV_LGD := VV_LGD_HIP;
                                         VN_LGD_LONGRUN:= VN_LGD_LONGRUN_HIP;
                                         VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_HIP;
                                         VV_TIPO := VV_TIPO_HIP;
                                    ELSE

                                         IF VV_TIP_GAR = 'D' THEN
                                             VV_TIPO := 'Prestamo Consumo Dineraria';
                                         ELSIF VV_TIP_GAR = 'D2' THEN        -- Se agrega la Dineraria Experta. MR, 27/6/19
                                             VV_TIPO := 'Préstamos consumo Dineraria Experta';
                                         ELSE
                                             VV_TIPO:= 'Documento ejecutivo Prestamo Consumo';
                                         END IF;

                                         VV_SEGMENTO    := 'PARTICULARES';

                                         BEGIN

                                              SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                                                INTO VV_LGD, VN_LGD_LONGRUN, VN_C_TYPE_GUARANTEE
                                                FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                                               WHERE IN_TIPO           = VV_TIPO
                                                    AND IN_SEGMENTO    = VV_SEGMENTO;
                                         EXCEPTION
                                               WHEN OTHERS THEN
                                                    VV_LGD:= 99;
                                                    VN_LGD_LONGRUN:= 99;
                                                    VN_C_TYPE_GUARANTEE:= 0;
                                         END;

                                           VV_TIPO    := VV_SEGMENTO||'|'||VV_TIPO;

                                    END IF;

                                     VN_NUMERR:= 32;

                  -- Si es CCAA y no tiene garantía hipotecaria.
                  ELSIF IN_REC.IN_SEGMBSINI IN ('101','102','002','017') THEN
                      VV_SEGMENTO    := 'CCAA';

                      VN_NUMERR:= 111;

                                    --La HIP no se compara con Leasing Inmobiliario
                                    IF VV_TIP_GAR = 'HIP' THEN
                                         VV_LGD := VV_LGD_HIP;
                                         VN_LGD_LONGRUN:= VN_LGD_LONGRUN_HIP;
                                         VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_HIP;
                                         VV_TIPO := VV_TIPO_HIP;
                                    ELSE

                                            IF VV_TIP_GAR = 'LEASNOIN' THEN
                                               VV_TIPO := 'Leasing no inmobiliario';
                                            ELSIF VV_TIP_GAR = 'D' THEN
                                               VV_TIPO := 'Dineraria';
                                            ELSIF VV_TIP_GAR = 'D2' THEN  -- Se agrega la Dineraria Experta. MR, 27/6/19
                                               VV_TIPO := 'Dineraria Experta';
                                            ELSIF VV_TIP_GAR = 'DOEX' THEN
                                               VV_TIPO := 'Documento ejecutivo';
                                            ELSIF VV_TIP_GAR = 'SDOEX' THEN
                                               VV_TIPO := 'Sin documento ejecutivo';
                                            END IF;

                                            BEGIN
                                                 SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                                                 INTO VV_LGD, VN_LGD_LONGRUN, VN_C_TYPE_GUARANTEE
                                                 FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                                                 WHERE IN_TIPO         = VV_TIPO
                                                 AND IN_SEGMENTO     = VV_SEGMENTO;
                                            EXCEPTION
                                                 WHEN OTHERS THEN
                                                     VV_LGD:= 99;
                                                     VN_LGD_LONGRUN := 99;
                                                     VN_C_TYPE_GUARANTEE := 0;
                                            END;

                          VV_TIPO    := VV_SEGMENTO||'|'||substr(VV_TIPO,1,50);

                                    END IF;



                                    VN_NUMERR:= 114;

                  --si es empresa y no tiene garantía hipotecaria
                  ELSIF IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027') THEN

                                    VN_NUMERR:= 47;
                                    VV_SEGMENTO    := 'EMPRESAS';                    -- Recalibrado LGD. Nav, 08/03/19

                      IF VV_TIP_GAR = 'HIP' THEN
                          VV_LGD := VV_LGD_HIP;
                          VN_LGD_LONGRUN:= VN_LGD_LONGRUN_HIP;
                          VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_HIP;
                          VV_TIPO := VV_TIPO_HIP;
                      ELSE

                               VN_NUMERR:= 48;
                           IF VV_TIP_GAR = 'LEASNOIN' THEN
                               VV_TIPO := 'Leasing no inmobiliario';
                           ELSIF VV_TIP_GAR = 'D' THEN
                               VV_TIPO := 'Dineraria';
                           ELSIF VV_TIP_GAR = 'D2' THEN -- Se agrega la Dineraria Experta. MR, 27/6/19
                               VV_TIPO := 'Dineraria Experta';
                           ELSIF VV_TIP_GAR = 'DOEX'             THEN
                                                 IF IN_REC.OR_INDHOLDING IN ('1', '3', '4')     THEN
                                                     VV_TIPO := 'Documento ejecutivo PAT';
                                                 ELSIF IN_REC.OR_SEGFIC2 = 'P1' THEN
                                                     VV_TIPO := 'Documento ejecutivo E0-E1-P1';
                                                 ELSIF IN_REC.OR_SEGFIC2 = 'P2' THEN
                                                     VV_TIPO := 'Documento ejecutivo E2-P2';
                                                 ELSIF IN_REC.OR_SEGFIC2 = 'P3' THEN
                                                         IF NVL(in_rec.IN_EXISTENCIAS,99) <> 99 then
                                                             if in_rec.IN_VTAGRU + in_rec.IN_EXISTENCIAS > 30000000 THEN
                                                                VV_TIPO := 'Documento ejecutivo E4-P3';
                                                             else
                                                                VV_TIPO := 'Documento ejecutivo E3-P3';
                                                             end if;
                                                         ELSIF NVL(in_rec.IN_ACTIVO_CIR, 99) <> 99 AND in_rec.IN_VTAGRU + in_rec.IN_ACTIVO_CIR > 30000000 THEN
                                                             VV_TIPO := 'Documento ejecutivo E4-P3';
                                                         ELSE
                                                             VV_TIPO := 'Documento ejecutivo E3-P3';
                                                         END IF;
                                                 ELSIF IN_REC.OR_SEGFIC2 = 'P5' THEN  -- 'P5' se añade nuevo indicador de tamaño del promotor. 201603. XCG.
                                                     VV_TIPO := 'Documento ejecutivo E4-P3';
                                                 ELSIF IN_REC.OR_SEGFIC IN ('E0', 'E1')  THEN
                                                     VV_TIPO := 'Documento ejecutivo E0-E1-P1';
                                                 ELSIF IN_REC.OR_SEGFIC = 'E2' THEN
                                                     VV_TIPO := 'Documento ejecutivo E2-P2';
                                                 ELSIF IN_REC.OR_SEGFIC = 'E3' THEN
                                                     VV_TIPO := 'Documento ejecutivo E3-P3';
                                                 ELSIF IN_REC.OR_SEGFIC IN ('E4', 'E5', 'GR') THEN -- 'E5' se añade nuevo indicador de tamaño de la empresa. 201603. XCG.
                                                     VV_TIPO := 'Documento ejecutivo E4-P3';   -- RMR 21/10/2019 Añadido GR al IN() anterior, ya que se replicará el tratamiento acutal de E5
                                                 ELSE
                                                     VV_TIPO := 'Documento ejecutivo E3-P3';
                                                 END IF;
                         ELSIF VV_TIP_GAR = 'SDOEX' THEN
                             IF IN_REC.OR_INDHOLDING IN ('1', '3', '4') THEN
                                 VV_TIPO := 'Sin documento ejecutivo PAT';
                             ELSE
                                 VV_TIPO := 'Sin documento ejecutivo No PAT';
                             END IF;
                         END IF;

                                         BEGIN
                                            SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
                                              INTO VV_LGD, VN_LGD_LONGRUN, VN_C_TYPE_GUARANTEE
                                              FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
                                              WHERE IN_TIPO        = VV_TIPO
                                                  AND IN_SEGMENTO  = VV_SEGMENTO;
                                         EXCEPTION
                                             WHEN OTHERS THEN
                                                   VV_LGD:= 99;
                                                   VN_LGD_LONGRUN:= 99;
                                                   VN_C_TYPE_GUARANTEE := 0;
                                 END;

                          VV_TIPO    := VV_SEGMENTO||'|'||substr(VV_TIPO,1,50);

                     END IF;

                          VN_NUMERR:= 33;



                  END IF;

          VN_NUMERR:= 34;

        end if;

     END IF;

     IF VN_LGD_LONGRUN = 0.35 AND IN_REC.IN_SEGMBSINI = '103' THEN
        VN_LGD_LONGRUN:= 0.052; --Préstamos Hipotecarios
     END IF;
    -----------------------------------------------  FIN CÁLCULO LGD SANAS - NO MOROSAS;

     --Comparativas de LGD, nos quedamos con la menor.
     IF IN_REC.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027', '101', '102', '002', '017', '103', '104')
        AND IN_REC.IN_TIPOREG NOT IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX') THEN

          IF VV_TIP_GAR NOT IN ('SDOEX', 'DOEX') THEN

             IF VV_LGD_PROC < VV_LGD THEN
                VV_LGD := VV_LGD_PROC;
                VN_LGD_LONGRUN := VN_LGD_LONGRUN_PROC;
                VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_PROC;
                VV_TIPO := VV_TIPO_PROC;
             END IF;

             IF VV_LGD_HIP < VV_LGD THEN
                IF IN_REC.OR_PROCED = 'LEASING' AND IN_REC.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031) THEN
                   VV_LGD :=  VV_LGD_PROC;
                   VN_LGD_LONGRUN := VN_LGD_LONGRUN_PROC;
                   VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_PROC;
                   VV_TIPO := VV_TIPO_PROC;
                ELSE
                   VV_LGD := VV_LGD_HIP;
                   VN_LGD_LONGRUN := VN_LGD_LONGRUN_HIP;
                   VN_C_TYPE_GUARANTEE := VN_C_TYPE_GUARANTEE_HIP;
                   VV_TIPO := VV_TIPO_HIP;
                END IF;
             END IF;

          ELSE
               IF VV_LGD_PROC <> 99 THEN
                  VV_LGD := VV_LGD_PROC;
                  VN_LGD_LONGRUN := VN_LGD_LONGRUN_PROC;
                  VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_PROC;
                  VV_TIPO := VV_TIPO_PROC;

                  IF VV_LGD_HIP < VV_LGD THEN
                     IF IN_REC.OR_PROCED = 'LEASING' AND IN_REC.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031) THEN
                        VV_LGD :=  VV_LGD_PROC;
                        VN_LGD_LONGRUN := VN_LGD_LONGRUN_PROC;
                        VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_PROC;
                        VV_TIPO := VV_TIPO_PROC;
                     ELSE
                        VV_LGD := VV_LGD_HIP;
                        VN_LGD_LONGRUN := VN_LGD_LONGRUN_HIP;
                        VN_C_TYPE_GUARANTEE:= VN_C_TYPE_GUARANTEE_HIP;
                        VV_TIPO := VV_TIPO_HIP;
                     END IF;
                  END IF;
               ELSIF VV_LGD_HIP <> 99 THEN
                     VV_LGD := VV_LGD_HIP;
                     VN_LGD_LONGRUN := VN_LGD_LONGRUN_HIP;
                     VN_C_TYPE_GUARANTEE := VN_C_TYPE_GUARANTEE_HIP;
                     VV_TIPO := VV_TIPO_HIP;
               END IF;
          END IF;
     ELSE
          IF VN_LGD_LONGRUN_PROC < VN_LGD_LONGRUN THEN
             VN_LGD_LONGRUN := VN_LGD_LONGRUN_PROC;
          END IF;
     END IF;

     VV_LGD_NOMORA     := VV_LGD;
     VV_FI_LGDLRNOMORA := VN_LGD_LONGRUN;
     VV_TIPO_NOMORA    := VV_TIPO; -- JCVJCV 201511 nueva variable LGD

     VN_NUMERR         := 35;

     ---------------------------------------------------- LGD MOROSA -----------------------------------------------------------------------------------------------------------------------

     IF IN_REC.IN_INDMOR IN ('SI', 'CT') OR IN_REC.IN_SRATIN = 'BLQRM' THEN

        BAS_MEN.LGD_MORA(IN_REC.IN_SEGMBSINI        ,
                        IN_REC.IN_TIPOREG           ,
                        IN_REC.OR_PROCED            ,
                        IN_REC.IN_SEG_HIP           ,
                        IN_REC.IN_SEGMBS2           ,
                        IN_REC.IN_SEGMBS0           ,
                        IN_REC.OR_CODGAR            ,
                        IN_REC.OR_TIPOBJETO         ,
                        IN_REC.OR_CODPRODO          ,
                        IN_REC.ENTFAC               ,
                        IN_REC.OR_INDHOLDING        ,
                        IN_REC.OR_SEGFIC2           ,
                        IN_REC.IN_EXISTENCIAS       ,
                        IN_REC.IN_VTAGRU            ,
                        IN_REC.IN_ACTIVO_CIR        ,
                        IN_REC.OR_SEGFIC            ,
                        IN_REC.IN_PRESTPERCENT      ,
                        IN_REC.CONSTRUCCION         ,
                        IN_REC.IN_SUCEPT            ,
                        IN_REC.OR_IDSITUAC          ,
                        IN_REC.OR_SITCON            ,
                        IN_REC.IN_SRATIN            ,
                        IN_REC.OR_FECALTBLO         ,
                        IN_REC.OR_FECDEU            ,
                        IN_REC.IN_FECMORA           ,
                        /*HDEV-107786 04/04/2022 Cambio nombre campo IMPLTVCONCMOR por IMPLTVEMPMOR */
                        IN_REC.IMPLTVEMPMOR ,
                        -- IN_REC.IMPLTVCONCMOR        ,
                        IN_REC.IMPLTVMOR            ,
                        VV_GAR_HIP                  ,
                        PN_FECPRO                   ,
                        IN_REC.TIPODEFAULT , /* 06/05/2020 - RMR - Añadido tipo de mora de la nuevaDoD para la funcion de mora Subjetiva*/
                        IN_REC.EAD         , /* 04/11/2020 - NAV - TM-2900 - Poner LGDBE y LGDWC al 100% a los morosos, para los registros o titularidades menores a 100 euros */
                        IN_REC.RIESGO_CORR_ADVERSA, /* 05/08/2021 - RMR - Marcamos con 100% aquellos con riesgo de correlación adversa */
                        VV_LGD             ,
                        VN_LGD_LONGRUN     ,
                        VV_TIPO            ,
                        VN_C_TYPE_GUARANTEE,
                        VV_LGD_BE       ,
                        VV_LGD_WORST    ,
                        VV_FI_IMPLTV    ,
                        VV_FECHAMORA    ,
                        vv_ret          ,
                        VV_EDAD
                --      VV_LOANTOVALUEMIN ,
                --      VV_LOANTOVALUEMAX
            );

     END IF;

    ---------------------------------------------------- Datos Fin LGD Mora  ----------------------------------------------------------------

     ----------------------------------------------------------------------------------------------------------------------------
     -- Asignación de Curva - Segmento AIRB
     ----------------------------------------------------------------------------------------------------------------------------

     -- JCVJCVJCV 201403 Modificaciones Obtención de la Curva (Segmento AIRB)
     -- Se añaden 2 nuevas categorizaciones:
     -- Grandes EEFF y Entes financieros no regulados
     --    Asignación de Curva:
     --       Para Grandes EEFF 'Emp/Sob/EEFF-CC'
     --       Para el Resto:
     --              Para SEGMBS1 '?' --> 'Emp/Sob/EEFF'
     --              Para SEGMBS1 500 --> 'SME-CC'
     --              Para SEGMBS1 501 --> Como antes
     -- Nueva Asignación de Curva de Tarjetas para CCAA.
     -- Se llevarán a la curva de renovables admisibles, las exposiciones en tarjetas de comercios y autónomos no garantizadas y
     -- cuyo importe total del acreditado sea < 100000.
     --

     VN_NUMERR:= 210;

     Vv_In_Activo_Cons_GEF  := 0; -- Ojo aqui no se ha de tener en cuenta el Activo_Cons del Maestro de Ventas

     IF IN_REC.IN_SEGMBSINI IN ('007', '018', '021', '028', '029') THEN --EEFF
         -- Ojo por ahora no se utiliza el ACTIVO_CONS de BASILEA_INI sino de las tablas Activo_consolidado_EEFF y Maestro_Matriz_Filial_EEFF y
         BEGIN
             SELECT distinct ActCon.ACTIVO_CONSOLIDADO
               INTO Vv_In_Activo_Cons_GEF
               FROM BAS_MEN.MAESTRO_MATRIZ_FILIAL_EEFF Matriz
                  , BAS_MEN.ACTIVO_CONSOLIDADO_EEFF    ActCon
         --SMG 24/09-I MODIFICACIÓN PARA UTILIZAR EL ULTIMATE PARENT
         --   WHERE Matriz.BICGRUPO = ActCon.BIC
              WHERE Matriz.ULTIMATE_PARENT = ActCon.BIC
         --SMG 24/09-F MODIFICACIÓN PARA UTILIZAR EL ULTIMATE PARENT
                AND Matriz.BICBANCO = IN_REC.Or_Codigo_BIC;
         EXCEPTION
             WHEN OTHERS THEN
                 Vv_In_Activo_Cons_GEF  := 0;
         END;
     END IF;

     V_Es_Gran_EEFF       := 'N';
     V_Es_Gran_EEFF_COREP := 'N';
     --
     -- EN principio no haría falta comprobar lo de > 70.000 M de eur ya que todos los que estan en la tabla de Activo lo son.
     --
     IF ( NVL(Vv_In_Activo_Cons_GEF,0) > 70000 ) THEN
          v_Es_Gran_EEFF_COREP   := 'S';     -- Para COREP es suficiente que sea > 70000
          IF IN_REC.IN_SegmBSIni IN ('007', '034') THEN
             v_Es_Gran_EEFF      := 'S';  -- Para AIRB adicionalmente han de ser de los segmentos 7 o 34.
          END IF;
     END IF;

     v_Es_Ente_No_Regulado := 'N';

     begin
           SELECT case when REGULADA_SN = 'NO' then 'S' else 'N' end
             INTO v_Es_Ente_No_Regulado
             FROM BAS_MEN.MAESTRO_RESEGMENTACION_BDE SegBE
                , BAS_MEN.MAESTRO_SECTOR_NO_REGULADA SNoReg
            WHERE SegBE.OR_NIFCIF  = IN_REC.Or_NIFCIF
              AND SNoReg.OR_SECTOR = SegBE.SECTOR;
     exception
             WHEN OTHERS THEN
                  BEGIN
                     SELECT DISTINCT('S')
                       INTO v_Es_Ente_No_Regulado
                       FROM BAS_MEN.MAESTRO_PERSONALIDADES PNoReg
                      WHERE PNoReg.OR_PERSON  = IN_REC.Or_Person
                        and PNoReg.REGULADA='NO';
                  EXCEPTION
                       WHEN OTHERS THEN
                            v_Es_Ente_No_Regulado := 'N';
                  END;

     end;

    VV_Entidad_Ente := 0;

                  IF IN_REC.IN_SRATIN = 'CEDM' THEN
                     VV_Entidad_Ente := 0;
                  ELSIF v_Es_Gran_EEFF_COREP  = 'S' THEN
                       VV_Entidad_Ente := 1;
                  ELSIF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SegmBSIni NOT IN ('007', '034') THEN
                        VV_Entidad_Ente := 2;
                  ELSE
                       VV_Entidad_Ente := 0 ;
                  END IF;

                  VN_NUMERR:= 220;
    VV_In_SegAIRB  := '?';

    -- Nuevos Requerimientos GRANDES EEFF y ENTES NO REGULADOS
    -- Grandes EEFF
    -- 201406 - 20140724 Segmentos que no se deberían tratar en el cambio de correlación como XXX o 030. Para fijar un criterio estable,
    --                   proponemos que unicamente puedan cambiar de correlación  segmentos de empresas o EEFF, excepto Cédulas multicedentes
    --                   (Las calculadas según método IRB, se identifican por el SRATIN CEDM y no se cambian de curva. Para el método Estándar,
    --                    dado que no hay IN_SRATIN, se deberían excluir del cambio de curva las exposiciones con segmbsini 034 cuyo CIF empiece con V.
    --                   )
    IF  IN_REC.IN_SegmBSIni IN ( '003', '005', '006', '009', '010', '019', '020', '027' -- Empresas
                               , '007', '018', '021', '028', '029', '034'                -- EEFF
                               )
      AND NOT (IN_REC.IN_SegmBSIni =  '034' AND SUBSTR(IN_REC.Or_NIFCIF, 1, 1) = 'V')  -- De las EEFF se excluyen las Cédulas multicedentes
     THEN
         IF v_Es_Gran_EEFF = 'S' AND IN_REC.IN_SRATIN <> 'CEDM' THEN
               VV_In_SegAIRB:= 'Emp/Sob/EEFF-CC';
         -- Entes no Regulados
         ELSIF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SRATIN <> 'CEDM' THEN
               VN_NUMERR := 221;
               IF IN_REC.In_SegmBS1  = '?' THEN
                    VV_In_SegAIRB := 'Emp/Sob/EEFF-CC';
               ELSIF IN_REC.In_SegmBS1 = '500' THEN
                    VV_In_SegAIRB := 'SME-CC';
               ELSE
                  VV_In_SegAIRB  := '?'; --Como hasta ahora
               END IF;
         END IF;

     END IF;

     IF VV_In_SegAIRB = '?'  THEN
            IF IN_REC.In_SegmBS0 <> '202' AND IN_REC.In_SegmBSIni NOT IN ('003','005','006','009','010','019','027','002','017') THEN
                BEGIN
                       SELECT IN_SEGAIRB
                         INTO VV_In_SegAIRB
                         FROM BAS_MEN.MAESTRO_SEGMENTOS
                        WHERE IN_SEGBS = IN_REC.In_SegmBS
                          AND ROWNUM = 1;
                EXCEPTION
                       WHEN OTHERS THEN
                          VV_In_SegAIRB:= '?';
                END;

             ELSE
                 VN_NUMERR:= 222;
                 IF IN_REC.In_SegmBSIni IN ('003','005','006','009','010','019','027') THEN
                        IF IN_REC.In_SegmBS1 = '500' AND IN_REC.Or_NIFCIF <> '777018707659' THEN /* FMRR - 04/01/2022 - HDEV-102956? (requerimiento especificado por email)- clientes con nif 777018707659 no deben tener factor de apoyo*/
                            VV_In_SegAIRB := 'SME';
                        ELSIF IN_REC.In_SegmBS1 = '501' THEN
                            VV_In_SegAIRB := 'Otro Retail';
                        ELSIF IN_REC.In_SegmBS1 = '?' OR IN_REC.Or_NIFCIF = '777018707659' THEN /* FMRR - 04/01/2022 - HDEV-102956? (requerimiento especificado por email)- clientes con nif 777018707659 no deben tener factor de apoyo*/
                            VV_In_SegAIRB := 'Emp/Sob/EEFF';
                        END IF;
                 ELSIF IN_REC.In_SegmBSIni IN ('002','017') THEN
                        IF IN_REC.In_SegmBS1 = '500' THEN
                            VV_In_SegAIRB := 'SME';
                        ELSE
                            VV_In_SegAIRB := 'Otro Retail';
                        END IF;
                 ELSE
                       VN_NUMERR:= 223;
                       BEGIN
                            SELECT IN_SEGAIRB
                              INTO VV_In_SegAIRB
                              FROM BAS_MEN.MAESTRO_SEGMENTOS
                             WHERE IN_SEGMBSINI = IN_REC.In_SegmBSIni
                               AND ROWNUM = 1;
                       EXCEPTION
                            WHEN OTHERS THEN
                                    VV_In_SegAIRB:= '?';
                       END;
                 END IF;
            END IF;
     END IF;

     VN_NUMERR:= 224;
     --Se Busca si el tipo de finca es inmueble.
     BEGIN
        SELECT INMUEBLE
          INTO VV_Inmueble
          FROM BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
         WHERE TIPOFI = IN_REC.Or_TipOfi;
     EXCEPTION
         WHEN OTHERS THEN
              VV_Inmueble := 'NO';
     END;

     VN_NUMERR := 225;

     --Garantías pignoraticias van a la curva de OTRO RETAIL. xcg 01/08/11.
     IF IN_REC.In_SegmBSIni = '103' AND IN_REC.Codgar_Pignoraticia = '?' THEN
         vv_In_SegmBS3   := '070';
         VV_In_SegAIRB   := 'Préstamos Hipotecarios';
     ELSIF IN_REC.In_SegmBSIni = '103' THEN
           VV_In_SegAIRB := 'Otro Retail';
     END IF;

     VN_NUMERR:= 226;
     -- Curva de Prestamos hipotecarios:
     -- Segmentos 104, 101, 102 y 501, con garantía hipotecaría, tipo de finca inmueble y que no sean Garantías pignoraticias.
     -- Se incluye el ini '106' junto con el '104', '101', '102' y '501' para la curva de préstamos hipotecarios -- 201403
     IF ( IN_REC.In_SegmBSIni IN ('104','101','102', '106') OR IN_REC.In_SegmBS1 = '501')
         AND IN_REC.Or_TipGar IN ('HC','HV','HR','HX')
         AND VV_Inmueble = 'INMUEBLE'
         AND IN_REC.Codgar_Pignoraticia = '?' THEN
            VV_In_SegAIRB  := 'Préstamos Hipotecarios';
            vv_In_SegmBS3  := '070';
     END IF;

     -- JCVJCVJCV 201403 Nueva Asignación de Curva de Tarjetas para CCAA.
     IF ( IN_REC.In_SegmBSIni  IN ('101', '102')
        AND ( IN_REC.Or_TipOpe = 'TC' OR (SUBSTR(IN_REC.Or_Proced,1,4) = 'TARG' AND IN_REC.Or_TipOpe = '?' ))
        AND IN_REC.Garantizada = 'NO'
        AND IN_REC.Importe_Total   < 100000
        ) THEN
            VV_In_SegAIRB  := 'Tarjetas Crédito';
     END IF;

     ----------------------------------------------------------------------------------------------------------------------------
     -- Ajuste de Tamaño (ATAMAIRB)
     ----------------------------------------------------------------------------------------------------------------------------

     -- JCVJCVJCV 201403 Modificaciones Obtención del Ajuste de Tamaño
     --  El ajuste de tamaño se  realizará a través de las ventas del grupo consolidado (manteniendose los umbrales entre 5 y 50 Mill)
     -- siempre que estas seán un indicador significativo ( no nulas(99) o <> 0), sino para holdings, promoters o patrimoniales
     -- se tomará el Activo Consolidado.
     -- NOTA: Para determinar si ventas del grupo consolidado son indicador significativo se utilizarán las ventas del grupo
     -- consolidado originales (MAESTRO_VENTAS) ya que en este punto ya se han aplicado ventas medias.
     -- Se añade Tratamiento SME--CC
     VV_In_Activo_Cons := vv_In_Activo_Cons_GEF;

     IF Vv_In_Activo_Cons = 0 THEN

        IF IN_REC.In_Activo_Cons IS NOT NULL THEN
          Vv_In_Activo_Cons := IN_REC.In_Activo_Cons;
        ELSE
          Vv_In_Activo_Cons := IN_REC.In_Activo;
        END IF;
     END IF;


     IF VV_IN_SEGAIRB IN ('SME', 'SME-CC') THEN

        -- 201706 se añade tratamiento de SMS que sean HOLDINGS, PROMOTORES o PATRIMONIALES (Si las vtas son 0 [OJO las originales, antes de ventas medias] se utilizara el Activo cons)
        IF NVL(IN_REC.VENTAS_CON,0) IN (0, 99) AND ( IN_REC.OR_INDHOLDING IN ('1', '3', '4') OR  IN_REC.In_SegmBS2 = '020' ) THEN
            VN_FI_ATAMAIRB:= NVL(Vv_In_Activo_Cons,0)/1000000;
        ELSE
            VN_FI_ATAMAIRB:= IN_REC.IN_VTAGRU_CONS/1000000;
        END IF;

       -- Uumbrales actuales (entre 5 y 50 millones).
        IF VN_FI_ATAMAIRB < 5  THEN
            VN_FI_ATAMAIRB:= 5;
        ELSIF VN_FI_ATAMAIRB > 50 THEN
            VN_FI_ATAMAIRB:= 50;
          --ELSE Se queda con el valor obtenido;
        END IF;

     END IF;

     ----------------------------------------------------------------------------------------------------------------------------
     -- MATURITY
     ----------------------------------------------------------------------------------------------------------------------------

     -- JCVJCVJCV 201403 Modificaciones Obtención de la Maturity
     -- Se aplicará Maturity de 1 dia a:
     --   - Derivados con contrapartidas con las que se tengan firmados acuerdos de compensación:
     --        Todas las EEFF + las contrapartidas del fichero CMOF y que tengan firmados CSA's que liquiden diariamente.
     --   - Créditos Documentarios (Procedencia 'ES-NEGDOC' o TipOpe 'CD').
     --   - Otras operativas a muy corto plazo identificadas en el maestro MAESTRO_TIPOPE_PROCEDENCIA cargado de SAS.

     VN_NUMERR:= 39;

     IF VN_OR_VIDRES <= 0 THEN
        VN_FI_MATAIRB:= 1;
     ELSIF VN_OR_VIDRES = 99999999 THEN
           IF IN_REC.OR_FECVTO <= PN_FECPRO AND IN_REC.OR_FECVTO > 19000000 THEN -- 29/07/13 (menor o igual)
              VN_FI_MATAIRB:= 1;
           ELSIF IN_REC.OR_PROCED IN ('ABONODXECS', 'COBRAMENTS',  'CS-LLOGUER',  'ES-FINAN', 'INT-XECS', 'INV-C/C-CR',
                                      'INV-C/C-EX', 'REBUT-DOM', 'TARGES', 'TR-MASIVAS') THEN
              VN_FI_MATAIRB:= 1; -- Sólo llevamos al 1 a las procedencias indicadas, las demás tendrán una maturity de 2,5. XCG 3/01/08.
           ELSIF IN_REC.OR_TIPOPE IN ( 'DC') THEN -- Descubiertos  maturity 1.
                 VN_FI_MATAIRB:= 1;
           ELSE
                VN_FI_MATAIRB:= 2.5; --> avales tienen 2.5, xcg, 3/4/13.
           END IF;
     ELSIF VN_OR_VIDRES/365 > 5 THEN
           VN_FI_MATAIRB:= 5;
     ELSE
           IF IN_REC.FI_TIPEXP = 'Repos' THEN
              IF IN_REC.IN_TIPOREG IN ('RN','ITRN','MMRN') THEN         -- ALLA 12/07/2016 Debido a los requisitos solicitados con el cálculo de la EAD para repos
                VN_FI_MATAIRB:= GREATEST(5/365,VN_OR_VIDRES/365);-- ALLA            se hace que el mínimo sea 5 días (sólo se incluyen en BASILEA los repos con acuerdos de compensación)
                                                                        -- ALLA            los repos incluidos en BASILEA, anteriores a la modificación siguen conservando maturity de 0.5
              ELSE
                VN_FI_MATAIRB:= GREATEST(0.5,VN_OR_VIDRES/365);
              END IF;

           ELSE
              VN_FI_MATAIRB:= GREATEST(1,VN_OR_VIDRES/365);
           END IF;
     END IF;

     IF IN_REC.FI_TIPEXP = 'Repos' AND VN_FI_MATAIRB = 1 AND VN_OR_VIDRES <> 365 THEN
        VN_FI_MATAIRB:= 0.5;
     END IF;

     IF IN_REC.IN_SEGMBS0 = '201' THEN --Project Finance
        IF IN_REC.OR_VIDRES <= 0 THEN
           VN_FI_MATAIRB:= 1;
        ELSIF IN_REC.OR_VIDRES = 99999999 THEN
              VN_FI_MATAIRB:= 2.5;
        ELSIF IN_REC.OR_VIDRES/365 > 5 THEN
              VN_FI_MATAIRB:= 5;
        ELSE
             VN_FI_MATAIRB:= GREATEST(1,IN_REC.OR_VIDRES/365);
        END IF;

        -- 09/10/2018 Se elimina este tratamiento en el cálculo de la maturity de Project Finance
        /*
        IF VN_FI_MATAIRB < 2.5 THEN
           VN_FI_MATAIRB := 0;
        ELSE
           VN_FI_MATAIRB := 1;
        END IF;
        */

        VN_OR_VIDRES := IN_REC.OR_VIDRES;

     ELSIF IN_REC.in_segmbs0 = '202' THEN --Derechos de Cobro

           IF VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999) THEN
              VN_FI_MATAIRB:= (90/365);
           ELSE
                VN_FI_MATAIRB:= VN_OR_VIDRES/365;
           END IF;

           IF VN_FI_MATAIRB > 5 THEN
              VN_FI_MATAIRB:= 5;
           END IF;

     END IF;

     VN_NUMERR:= 40;

     -- JCVJCVJCV 201403 Obtención de si existe en maestro TIPOOPE PROCEDENCIA
     v_En_TipOpe_Proced     := 'N';
     BEGIN
        SELECT DISTINCT 'S'
          INTO v_En_TipOpe_Proced
          FROM BAS_MEN.MAESTRO_TIPOPE_PROCEDENCIA
         WHERE OR_TIPOPE = IN_REC.Or_TipOpe
           AND OR_PROCED = IN_REC.Or_Proced;
     EXCEPTION
        WHEN OTHERS THEN
            v_En_TipOpe_Proced := 'N';
     END;

     -- JCVJCVJCV 201403 Obtención de la periodicidad del maestro CSA ORIG ya que este incluye los CSA¿s que nosotros aportamos a otras entidades
     -- 201409 - 20141021 Se añade la obtención del maestro MAESTRO_BIC_CSA para identificar las contrapartidas con CSA.
     v_PerLiq_CSA := 0;
     BEGIN
            SELECT distinct Periodicidad
              INTO v_PerLiq_CSA
              FROM( SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                      FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                          ,BAS_MEN.MAESTRO_BIC_CSA  MBic
                     WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                       AND MBic.BICS_TRATADOS = IN_REC.Or_Codigo_BIC
                                  --
                     UNION
                                  --
                    SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                      FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                     WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_Codigo_BIC
                  );
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         BEGIN
          SELECT distinct Periodicidad
            INTO v_PerLiq_CSA
            FROM( SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                    FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                       , BAS_MEN.MAESTRO_BIC_CSA  MBic
                   WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                     AND MBic.BICS_TRATADOS = IN_REC.Or_NIFCIF
                   UNION
                  SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                    FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                   WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_NIFCIF
               );
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
             BEGIN
              SELECT distinct Periodicidad
                INTO v_PerLiq_CSA
                FROM (SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                        FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                           , BAS_MEN.MAESTRO_BIC_CSA  MBic
                       WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                         AND MBic.BICS_TRATADOS = IN_REC.Or_NIFCIFIBM
                       UNION
                      SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                        FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                       WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_NIFCIFIBM
                     );
             EXCEPTION
               WHEN OTHERS THEN
                   v_PerLiq_CSA := 0;
             END;
         END;
     END;

     -- Para Derivados con contrapartidas con las que se tengan firmados acuerdos de compensación se utilizará la periodicidad
     -- del Maestro CSA (si no es nula o 0) Si maturity minima 1 año, calculamos las nueva
     -- JCVJCVJCV 201403 26 de Mayo de 2014 - Se cambian los criterios con que se encuente en el fichero de CSA sera condición suficiente
     -- JCVJCVJCV 201406 21 de Julio de 2014 - Se cambian los criterios : Que sea un Derivado (OTC o DERIVA*)
     --                                         y que sea de una EEFF o que este en fichero CMOF. Y además este en el Maestro_CSA
     IF ( ( IN_REC.Fi_TipExp = 'OTC' OR SUBSTR(IN_REC.OR_PROCED,1,6) = 'DERIVA' )
          AND ( IN_REC.In_SegmBSIni IN ('007','018','021','028','029','034', '003', '005', '006', '009', '010', '019', '027','031')
               -- JOM 201512 No es necesario acceder al maestro CMOF en el AIRB
               --OR  v_En_Fichero_CMOF = 'S'
              )
        )
        AND  v_PerLiq_CSA <> 0 THEN

          IF VN_Fi_MatAIRB = 1 OR VN_OR_VIDRES = 99999999 THEN
             IF VN_OR_VIDRES = 99999999 THEN
                VN_Fi_MatAIRB := v_PerLiq_CSA/365;
             ELSE
                VN_Fi_MatAIRB := GREATEST(v_PerLiq_CSA,VN_OR_VIDRES)/365;
             END IF;
          END IF;


     -- Para Créditos Documentarios (Procedencia 'ES-NEGDOC' o TipOpe 'CD')  Maturity de 1 dia Si maturity minima 1 año
     ELSIF  ( IN_REC.Or_Proced = 'ES-NEGDOC' OR IN_REC.Or_TipOpe = 'CD' ) AND IN_REC.In_SegmBS0 <> '201' THEN

         /* 29/10/2021 RMR | Arreglo de los ES-NEGDOC para que la VIDRES se calcule igual que 'ES-FINAN' */
       --IF ( IN_REC.In_SegmBS0 = '202' AND (VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999)) ) OR  VN_Fi_MatAIRB = 1 THEN
         IF ( IN_REC.In_SegmBS0 = '202' AND (VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999)) ) OR  VN_Fi_MatAIRB = 1 OR IN_REC.OR_PROCED = 'ES-NEGDOC' THEN

               IF VN_OR_VIDRES = 99999999 THEN
                  VN_Fi_MatAIRB := 1/365;
               ELSE
                  VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
               END IF;

         END IF;

     -- Operativas del Maestro TipOpe Procedencia
     ELSIF  v_En_TipOpe_Proced = 'S' AND IN_REC.In_SegmBS0 <> '201' THEN

            IF VN_Fi_MatAIRB = 1 OR VN_OR_VIDRES = 99999999 THEN
               IF VN_OR_VIDRES = 99999999 THEN
                  VN_Fi_MatAIRB := 1/365;
               ELSE
                  VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
               END IF;
            END IF;

     ELSIF IN_REC.IN_SEGMBSINI IN ('007','018','021','028','029','034') AND IN_REC.Or_Proced NOT IN ('ES-FINAN','ES-NEGDOC') THEN /* RMR 20/08/2021 - Añadimos AND para que no entren ES-FINAN y ES-NEGDOC */

         --Maturity EEFF
         IF IN_REC.FI_TIPEXP = 'Repos' THEN
            --INI ALLA -- PARA REPOS, para los repos existentes antes del cálculo de la ead de repos, la maturity es 0.5
            --                        para los repos sobre los que se ha calculado la ead (repos con acuerdo), la maturiry valdrá 5 días salvo para los que tengan CSA que tomará valor 1 día
            --VN_FI_MATAIRB:= 0.5;
            IF IN_REC.IN_TIPOREG IN ('MMRN','RN','ITRN') THEN
              IF v_PerLiq_CSA <> 0 THEN
                VN_FI_MATAIRB:= GREATEST(1/365,IN_REC.OR_VIDRES/365);
              ELSE
                VN_FI_MATAIRB:= GREATEST(5/365,IN_REC.OR_VIDRES/365);
              END IF;
            ELSE

             VN_FI_MATAIRB:= 0.5;
            END IF;
            -- FIN ALLA
         ELSE
               VN_FI_MATAIRB:= 2.5;
         END IF;
     ELSIF IN_REC.FI_TIPEXP = 'Repos' AND IN_REC.IN_TIPOREG IN ('REN','RN','ITRN') AND v_PerLiq_CSA <> 0 THEN --ALLA 13/07/2016  En el caso de repos, si existe CSA, la maturity valdrá como mínimo 1
        VN_FI_MATAIRB:= GREATEST(1/365,IN_REC.OR_VIDRES/365);

    /* RMR 20/08/2021 - Operativas en las que se permite un floor de 1 día para el cálculo de la maturity*/
--   ELSIF IN_REC.Or_Proced IN ('ES-FINAN','ES-NEGDOC', 'FACTORING', 'EFECTES', 'CONFIRMING', 'FORFAITING') THEN
--       IF VN_OR_VIDRES = 99999999 THEN
--            VN_Fi_MatAIRB := 1/365;
--       ELSE
--            VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
--       END IF;
    /* RMR 20/08/2021 - Dejamos únicamente el cambio para ES-FINAN y ES-NEGDOC */
     ELSIF IN_REC.Or_Proced IN ('ES-FINAN','ES-NEGDOC') THEN
         IF VN_OR_VIDRES = 99999999 THEN
              VN_Fi_MatAIRB := 1/365;
         ELSE
              VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
         END IF;


     END IF;

-- Modificacion de calculo de Maturity para Ofex ( 23/12/19 )  TAR-256
--   IF  IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'PX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX'  THEN
   IF ( IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX' ) and ( IN_REC.IN_SEGMBS0 <> '201' ) THEN

    IF IN_REC.FI_TIPEXP = 'Repos' THEN
       VN_FI_MATAIRB:= 0.5;
    ELSE
         VN_FI_MATAIRB:= 2.5;
    END IF;

   END IF;


     IF VN_Or_Vidres < 0 THEN
        VN_Or_Vidres:= 0;
     END IF; -- Vida residual negativa, la dejamos a 0. XCG, 05/08/11.

     --26/03 - Tratamiento de depósitos interbancarios - Cálculo IRB
     IF IN_REC.FI_EPICON IN ('010010301010100000000000000000', '010010301010203000000000000000','010010302010100000000000000000',
                             '010010302010203000000000000000','010010100000000000000000000000') THEN
        VV_IN_SEGAIRB := 'Otros Activos';
        VV_LGD    := 0;
        VV_LGD_BE := 0;
        VV_LGD_WORST := 0;
        VN_LGD_LONGRUN := 0;
        VV_LGD_NOMORA := 0;
     END IF;
    END;

    VN_NUMERR:= 250;

     /* 27/01/2022 - NAV - HDEV-106661 - IMPLEMENTACION LGD LONG RUNG -  Cuando LGD long run (LGDLR en la BDD) sea mayor a la LGD asignada (FI_LGDAIRB) se sobreescriba esta última con el valor de la Long RUN */
     IF VN_LGD_LONGRUN > VV_LGD THEN
        VV_LGD := VN_LGD_LONGRUN;
     END IF;

     OUT_REC.OR_IDREG                := IN_REC.OR_IDREG;
     OUT_REC.FI_EADAIRB              := IN_REC.FI_EADAIRB;
     OUT_REC.FI_EADCONAIRB           := IN_REC.FI_EADCONAIRB;
     OUT_REC.FI_CCFAIRB              := IN_REC.FI_CCFAIRB;
     OUT_REC.FI_LGDNOMORA            := VV_LGD_NOMORA;
     OUT_REC.FI_LGDAIRB              := VV_LGD;
     OUT_REC.FI_LGDLR                := VN_LGD_LONGRUN;
     OUT_REC.FI_LGDBE                := VV_LGD_BE;
     OUT_REC.FI_LGDWORST             := VV_LGD_WORST;
     OUT_REC.FI_LGDLRNOMORA          := VV_FI_LGDLRNOMORA;
     OUT_REC.FI_IMPLTV               := VV_FI_IMPLTV;
     OUT_REC.FI_VIDRES               := VN_OR_VIDRES;
     OUT_REC.IN_SEGAIRB              := VV_IN_SEGAIRB;
     OUT_REC.FI_MATAIRB              := VN_FI_MATAIRB;
     OUT_REC.FI_ATAMAIRB             := VN_FI_ATAMAIRB;
     OUT_REC.IN_ACTIVO_CONS          := VV_In_Activo_Cons;
     OUT_REC.ENTIDAD_ENTE            := VV_ENTIDAD_ENTE;
     OUT_REC.C_TYPE_GUARANTEE        := VN_C_TYPE_GUARANTEE;
     OUT_REC.FI_TIPO_GARANTIA        := VV_TIPO;
     OUT_REC.FI_TIPO_GARANTIA_NOMORA := VV_TIPO_NOMORA;
     OUT_REC.FI_LGD_PROC             := VV_LGD_PROC;
     OUT_REC.FI_LGD_HIP              := VV_LGD_HIP;
     OUT_REC.OR_IDMES                := IN_REC.OR_IDMES;
     OUT_REC.IN_FECHAMORA            := VV_FECHAMORA;
     OUT_REC.IN_FECTAS               := VV_FECTAS;
     OUT_REC.IN_EDAD                 := VV_EDAD; -- 30/10/2019 RMR - Petición de Encarni, necesita la edad de la LGD morosa.

     pipe row(out_rec);
 END LOOP;



 EXCEPTION
   WHEN OTHERS THEN

        RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
 END F_CALCULO_LGD_ANT ;


-------------------------------------------------------------------------


----------------------------------------------------------------------------------
FUNCTION F_CALCULO_LGD_PERF_EMP (Cur IN Cursor_Basilea, PN_FecPro IN NUMBER) RETURN T_Array_Basilea_Calculo_LGD_AUX_2
    PARALLEL_ENABLE(PARTITION Cur BY ANY)
  PIPELINED
IS

  In_Rec                            Cur%ROWTYPE;
  Out_Rec                           BAS_MEN.BASILEA_AIRB_LGD_AUX_2%ROWTYPE;
  ----- Varaibles del proceso -----
 v_Num                             NUMBER;

 VV_TIPO                           VARCHAR2(100);
 VV_TIPO_NOMORA                    VARCHAR2(100) DEFAULT '?';
 VV_LGD                            FLOAT(126);
 VV_LGD_LR                         FLOAT(126);
 VV_GAR_HIP                        VARCHAR2(2);
 VV_TIP_GAR                        VARCHAR2(55);
 VV_TIP_GAR_H                      VARCHAR2(55);
 VV_TIPO_PROC                      VARCHAR2(100);
 VV_TIPO_HIP                       VARCHAR2(100);
 VV_SEGMENTO                       VARCHAR2(17);
 VV_LGD_WORST                      FLOAT(126);
 VV_LGD_BE                         FLOAT(126);
 VV_EDAD                           FLOAT(126);
 VN_LGD_LONGRUN                    FLOAT(126);
 VN_C_TYPE_GUARANTEE                 NUMBER(1);
 VV_LGD_NOMORA                     FLOAT(126);
 VV_LGD_PROC                         FLOAT(126);
 VN_LGD_LONGRUN_PROC                 FLOAT(126);
 VN_C_TYPE_GUARANTEE_PROC                  NUMBER(1);
 VV_LGD_HIP                          FLOAT(126);
 VN_LGD_LONGRUN_HIP                  FLOAT(126);
 VN_C_TYPE_GUARANTEE_HIP                  NUMBER(1);
 VV_IMPORTE                          FLOAT(126);
 VV_FI_LGDLRNOMORA                   FLOAT(126);
 VV_ROWID                          VARCHAR2(12);
 VN_COUNT                          NUMBER(9):=0;
 VN_NUMERR                         NUMBER(3);
 VV_MENSAJE                        VARCHAR2(255);
 VV_MENSAJE2                       VARCHAR2(255);
 VV_RET                            VARCHAR2(100);
 FALLO1                            EXCEPTION;
 FALLO2                            EXCEPTION;
 VV_IN_SEGAIRB                     VARCHAR2(25);
 VN_FI_MATAIRB                     FLOAT;
 VN_FI_ELAIRB                      FLOAT;
 VN_FI_ELAIRBCON                   FLOAT;
 VV_IN_SEGMBS                      VARCHAR2(25);
 VV_INMUEBLE                       VARCHAR2(8);
 VV_IN_SEGMBS3                     VARCHAR2(3);
 VN_FI_ATAMAIRB                    FLOAT;
 VN_COUNT2                         NUMBER(10) :=0;
 CALCULO                           FLOAT :=0;
 VN_CUOTA                          NUMBER(10) := 0;
 VN_PERIOD                         NUMBER(4,1) := 0;
 VN_TIEMPO_PERIODO                 NUMBER(3) := 0;
 VN_OR_VIDRES                      FLOAT;
 VN_TIPO_PERIODO                   VARCHAR2(1) := '?';
 VN_IMPORTE                        FLOAT :=0;
 VV_NACIONAL                       varchar2(1);
 VV_TRAMO_EDAD                     varchar2(32);
 VV_PRIM_SEG_HIP                   VARCHAR2(4) := '?';
 VV_PC_LGD_EDAD_1                  FLOAT;
 VV_PC_LGD_LR_EDAD_1               FLOAT;
 VV_PC_LGD_EDAD_2                  FLOAT;
 VV_PC_LGD_LR_EDAD_2               FLOAT;
 VV_PC_LGD_EDAD_3                  FLOAT;
 VV_PC_LGD_LR_EDAD_3               FLOAT;
 VV_PC_LGD_EDAD_4                  FLOAT;
 VV_PC_LGD_LR_EDAD_4               FLOAT;
 VV_PC_LGD_EDAD_5                  FLOAT;
 VV_PC_LGD_LR_EDAD_5               FLOAT;
 VV_MES_TASACION                   NUMBER(6) :=0;
 VV_IN_EDAD                        VARCHAR2(32) := '?';
 VV_LGD_BEWC                       FLOAT;
 VV_IN_BE_WC                       VARCHAR2(2);
 VV_MULT                           FLOAT;
 VV_FECHAMORA                      NUMBER(8);
 VV_FI_IMPLTV                      NUMBER;
 VV_FECTAS                         NUMBER(6);

 VV_In_Activo_Cons_GEF          BAS_MEN.BASILEA_AIRB_LGD.IN_ACTIVO_CONS%TYPE     DEFAULT 0;
 VV_In_Activo_Cons              BAS_MEN.BASILEA_AIRB_LGD.IN_ACTIVO_CONS%TYPE     DEFAULT NULL; -- Por defecto null
 VV_Entidad_Ente                BAS_MEN.BASILEA_AIRB_LGD.ENTIDAD_ENTE%TYPE         DEFAULT 0;
 v_Es_Gran_EEFF                 VARCHAR2(1)                                    DEFAULT 'N';
 v_Es_Gran_EEFF_COREP           VARCHAR2(1)                                    DEFAULT 'N';
 v_Es_Ente_No_Regulado          VARCHAR2(1)                                    DEFAULT 'N';
 v_Sector_No_Regulado           VARCHAR2(1)                                    DEFAULT 'N';
 v_Person_No_Regulado           VARCHAR2(1)                                    DEFAULT 'N';
 --v_En_Fichero_CMOF               VARCHAR2(1)                                    DEFAULT 'N';
 v_En_TipOpe_Proced             VARCHAR2(1)                                    DEFAULT 'N';
 v_PerLiq_CSA                   BAS_MEN.MAESTRO_CSA_orig.PERIODICIDAD%TYPE     DEFAULT 1;
 --v_Dias_Periodicidad             NUMBER(3)                                      DEFAULT 1;

 vV_Es_Mora_Subjetiva           VARCHAR2(1)                                    DEFAULT 'N';

    ---SMG 24/09 - PETICION ENCARNI
 VV_LOANTOVALUEMIN         FLOAT(126);
 VV_LOANTOVALUEMAX         FLOAT(126);
 ---SMG 24/09 - PETICION ENCARNI
 ---HDEV
  VV_TIPO_COLATERAL VARCHAR2(10);
  VV_PROMOTOR VARCHAR2(1):='N';
  VV_ID_BIEN VARCHAR2(22);
  VV_VALOR_BIEN_TOT NUMBER;
  VV_MATURITY_MES NUMBER;
  VV_LTV          NUMBER;
  VV_SEGMENTO_ABCD VARCHAR2(1);
  VV_CODIGO_POSTAL_BIEN VARCHAR2(9);
  VV_CODPOBLACI VARCHAR2(12);
  VV_D_WR_INE  NUMBER;
  VV_CODINE_TEMP0 VARCHAR2(12);
  VV_FI_PD_COREPS FLOAT;
  VV_FI_PD_COREPS_MAESTRO FLOAT;
  VV_EADCONAIRB_CONTRATO  FLOAT;
  VV_EADCONAIRB_TITULARITAT  FLOAT;
  VV_VALOR_PIGNORATICIAS NUMBER;
  VV_TOTAL_VALOR_NETO_TOT_COND NUMBER;
  VV_VALOR_TASACION NUMBER;
  VV_LETRA VARCHAR2(1);
  VV_TIPO_SOCIEDAD VARCHAR2(65);
  VV_LEASMOB VARCHAR2(1);
  VV_OR_IDREG NUMBER:=NULL;
  VV_LEGAL_FRAMEWORK VARCHAR2(25);
  VV_ESTATUS VARCHAR2(2);
  VV_ID_GRUPO_HIPOTECARIO NUMBER;
  VV_CLASIFICACION VARCHAR2(5);
--HDEV-107786  FLA  24/05/2022
  VV_LTV_MAESTRO  NUMBER;
  VV_OR_VIDRESBAS FLOAT;


BEGIN

   loop
   FETCH Cur INTO in_rec; --asignamos el contenido del cursor a la variable
   EXIT WHEN Cur%NOTFOUND;
          VN_NUMERR:=7;
        --Como el resultado del cursor no se insertara en  una tabla, debemos recorrer
        --el objeto in_rec en memoria

            VN_NUMERR                :=8;
            VV_OR_IDREG              :=IN_REC.OR_IDREG;
            VV_ESTATUS               :='PE'; -- FLA 02/06/2022 IN_REC.ESTATUS;
            VV_ID_GRUPO_HIPOTECARIO  :=IN_REC.ID_GRUPO_HIPOTECARIO;
            VN_COUNT                 := VN_COUNT + 1;
            VV_GAR_HIP               := 'NO';
            VV_LGD                   := 99;
            VV_LGD_LR                := 99;
            VV_TIPO                  := '?';
            VV_TIPO_PROC             := '?';
            VV_TIPO_HIP              := '?';
            VV_TIPO_NOMORA           := '?';
            VV_TIP_GAR               := '?';
            VV_TIP_GAR_H             := '?';
            VV_ROWID                 := TO_CHAR(IN_REC.OR_IDREG);
            VV_SEGMENTO              := '?';
            VV_LGD_WORST             := 99;
            VV_EDAD                  := '';
            VV_IN_EDAD               := '';
            VV_LGD_BE                := 99;
            VN_LGD_LONGRUN           := 0.35;
            VN_C_TYPE_GUARANTEE      := 0;
            VV_LGD_NOMORA            := 99;
            VV_INMUEBLE              := '?';
            VV_LGD_PROC              := 99;
            VN_LGD_LONGRUN_PROC      := 99;
            VN_C_TYPE_GUARANTEE_PROC := 0;
            VV_LGD_HIP               := 99;
            VN_LGD_LONGRUN_HIP       := 99;
            VN_C_TYPE_GUARANTEE_HIP  := 0;
            VV_IMPORTE               := 0;
            VV_FI_LGDLRNOMORA        := 99;
            VV_IN_SEGMBS             := IN_REC.IN_SEGMBS;
            VV_INMUEBLE              := '?';
            VV_IN_SEGMBS3            := '?';
            VN_FI_ATAMAIRB           := 0;
            VN_OR_VIDRES             := IN_REC.OR_VIDRES;
            VN_FI_MATAIRB            := 0;
            CALCULO                  := 0;
            VN_COUNT2                :=0;
            VV_TRAMO_EDAD            := '?';
            VV_PRIM_SEG_HIP          := 'N';
            VV_PC_LGD_EDAD_1         := 99;
            VV_PC_LGD_LR_EDAD_1      := 99;
            VV_PC_LGD_EDAD_2         := 99;
            VV_PC_LGD_LR_EDAD_2      := 99;
            VV_PC_LGD_EDAD_3         := 99;
            VV_PC_LGD_LR_EDAD_3      := 99;
            VV_PC_LGD_EDAD_4         := 99;
            VV_PC_LGD_LR_EDAD_4      := 99;
            VV_PC_LGD_EDAD_5         := 99;
            VV_PC_LGD_LR_EDAD_5      := 99;
            VV_LGD_BEWC              := 99;
            VV_IN_BE_WC              := '?';
            VV_MULT                  := 1;
            VV_FECTAS                := 190001;
            VV_FECHAMORA             := 19010101;
            VV_Es_Mora_Subjetiva     := 'N';
            VV_FI_IMPLTV             := IN_REC.IMPLTV;
             ---SMG 24/09 - PETICION ENCARNI
            VV_LOANTOVALUEMIN      := 0;
            VV_LOANTOVALUEMAX      := 0;
            VV_TIPO_COLATERAL      :=NULL;
            VV_ID_BIEN             :=NULL;
            VV_VALOR_BIEN_TOT     :=0;
            VV_CODIGO_POSTAL_BIEN :=NULL;
            VV_CODPOBLACI         :=NULL;
            VV_D_WR_INE           :=0;
            VV_CODINE_TEMP0       :=NULL;
            VV_SEGMENTO_ABCD :='D'; --VALOR DEFAULT
            VV_LTV:=IN_REC.IMPLTVEMP;
            VV_VALOR_PIGNORATICIAS:=IN_REC.VALOR_PIGNORATICIAS;
            VV_TOTAL_VALOR_NETO_TOT_COND:=IN_REC.TOTAL_VALOR_NETO_TOT_COND;
            --VV_VALOR_TASACION:=(IN_REC.TOTAL_VALOR_NETO_TOT_COND - IN_REC.VALOR_PIGNORATICIAS);
            VV_VALOR_TASACION:=IN_REC.TOTAL_VALOR_NETO_TOT_COND ;
            VV_EADCONAIRB_CONTRATO:=0;
            VV_FI_PD_COREPS:=0;
            VV_FI_PD_COREPS_MAESTRO:=0;
            VV_EADCONAIRB_CONTRATO:=0;--VV_EAD_CONTRATO:=0;
            VV_LETRA :=NULL;
            VV_TIPO_SOCIEDAD:=NULL;
             VV_LEGAL_FRAMEWORK:=NULL;
            VV_LEASMOB :='N';
            VV_EADCONAIRB_TITULARITAT:=0;
            VN_LGD_LONGRUN:=0;
            VV_CLASIFICACION:=NULL;
            VV_OR_VIDRESBAS:= IN_REC.OR_VIDRESBAS;
            VV_PROMOTOR             := 'N';            
            
            VN_NUMERR:=9;

            /*********************************************************************************************************************************/
                 ----------------------------------------------------------------------------------------------------------------------------
                    -- MATURITY
                    ----------------------------------------------------------------------------------------------------------------------------

                    -- JCVJCVJCV 201403 Modificaciones Obtención de la Maturity
                    -- Se aplicará Maturity de 1 dia a:
                    --   - Derivados con contrapartidas con las que se tengan firmados acuerdos de compensación:
                    --        Todas las EEFF + las contrapartidas del fichero CMOF y que tengan firmados CSA's que liquiden diariamente.
                    --   - Créditos Documentarios (Procedencia 'ES-NEGDOC' o TipOpe 'CD').
                    --   - Otras operativas a muy corto plazo identificadas en el maestro MAESTRO_TIPOPE_PROCEDENCIA cargado de SAS.

                    VN_NUMERR:=11;

                    IF VN_OR_VIDRES <= 0 THEN
                       VN_FI_MATAIRB:= 1;
                    ELSIF VN_OR_VIDRES = 99999999 THEN
                          IF IN_REC.OR_FECVTO <= PN_FECPRO AND IN_REC.OR_FECVTO > 19000000 THEN -- 29/07/13 (menor o igual)
                             VN_FI_MATAIRB:= 1;
                          ELSIF IN_REC.OR_PROCED IN ('ABONODXECS', 'COBRAMENTS',  'CS-LLOGUER',  'ES-FINAN', 'INT-XECS', 'INV-C/C-CR',
                                                     'INV-C/C-EX', 'REBUT-DOM', 'TARGES', 'TR-MASIVAS') THEN
                             VN_FI_MATAIRB:= 1; -- Sólo llevamos al 1 a las procedencias indicadas, las demás tendrán una maturity de 2,5. XCG 3/01/08.
                          ELSIF IN_REC.OR_TIPOPE IN ( 'DC') THEN -- Descubiertos  maturity 1.
                                VN_FI_MATAIRB:= 1;
                          ELSE
                               VN_FI_MATAIRB:= 2.5; --> avales tienen 2.5, xcg, 3/4/13.
                          END IF;
                    ELSIF VN_OR_VIDRES/365 > 5 THEN
                          VN_FI_MATAIRB:= 5;
                    ELSE
                          IF IN_REC.FI_TIPEXP = 'Repos' THEN
                             IF IN_REC.IN_TIPOREG IN ('RN','ITRN','MMRN') THEN         -- ALLA 12/07/2016 Debido a los requisitos solicitados con el cálculo de la EAD para repos
                               VN_FI_MATAIRB:= GREATEST(5/365,VN_OR_VIDRES/365);-- ALLA            se hace que el mínimo sea 5 días (sólo se incluyen en BASILEA los repos con acuerdos de compensación)
                                                                                       -- ALLA            los repos incluidos en BASILEA, anteriores a la modificación siguen conservando maturity de 0.5
                             ELSE
                               VN_FI_MATAIRB:= GREATEST(0.5,VN_OR_VIDRES/365);
                             END IF;

                          ELSE
                             VN_FI_MATAIRB:= GREATEST(1,VN_OR_VIDRES/365);
                          END IF;
                    END IF;
                   VN_NUMERR:=12;
                    IF IN_REC.FI_TIPEXP = 'Repos' AND VN_FI_MATAIRB = 1 AND VN_OR_VIDRES <> 365 THEN
                       VN_FI_MATAIRB:= 0.5;
                    END IF;
                   VN_NUMERR:=13;
                    IF IN_REC.IN_SEGMBS0 = '201' THEN --Project Finance
                        VN_NUMERR:=14;
                       IF IN_REC.OR_VIDRES <= 0 THEN
                          VN_FI_MATAIRB:= 1;
                       ELSIF IN_REC.OR_VIDRES = 99999999 THEN
                             VN_FI_MATAIRB:= 2.5;
                       ELSIF IN_REC.OR_VIDRES/365 > 5 THEN
                             VN_FI_MATAIRB:= 5;
                       ELSE
                            VN_FI_MATAIRB:= GREATEST(1,IN_REC.OR_VIDRES/365);
                       END IF;
                               -- 09/10/2018 Se elimina este tratamiento en el cálculo de la maturity de Project Finance
                               /*
                       IF VN_FI_MATAIRB < 2.5 THEN
                          VN_FI_MATAIRB := 0;
                       ELSE
                          VN_FI_MATAIRB := 1;
                       END IF;
                               */
                      VN_NUMERR:=15;
                      VN_OR_VIDRES := IN_REC.OR_VIDRES;
                    ELSIF IN_REC.in_segmbs0 = '202' THEN --Derechos de Cobro
                         VN_NUMERR:=16;
                          IF VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999) THEN
                             VN_FI_MATAIRB:= (90/365);
                          ELSE
                               VN_FI_MATAIRB:= VN_OR_VIDRES/365;
                          END IF;
                         VN_NUMERR:=17;
                          IF VN_FI_MATAIRB > 5 THEN
                             VN_FI_MATAIRB:= 5;
                          END IF;

                    END IF;
                    VN_NUMERR:=18;
                    -- JCVJCVJCV 201403 Obtención de si existe en maestro TIPOOPE PROCEDENCIA
                    v_En_TipOpe_Proced     := 'N';
                    BEGIN
                       SELECT DISTINCT 'S'
                         INTO v_En_TipOpe_Proced
                         FROM BAS_MEN.MAESTRO_TIPOPE_PROCEDENCIA
                        WHERE OR_TIPOPE = IN_REC.Or_TipOpe
                          AND OR_PROCED = IN_REC.Or_Proced;
                    EXCEPTION
                       WHEN OTHERS THEN
                           v_En_TipOpe_Proced := 'N';
                    END;
                   VN_NUMERR:=19;
                    -- JCVJCVJCV 201403 Obtención de la periodicidad del maestro CSA ORIG ya que este incluye los CSA¿s que nosotros aportamos a otras entidades
                    -- 201409 - 20141021 Se añade la obtención del maestro MAESTRO_BIC_CSA para identificar las contrapartidas con CSA.
                    v_PerLiq_CSA := 0;
                    BEGIN
                        SELECT distinct Periodicidad
                          INTO v_PerLiq_CSA
                          FROM
                             ( SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                                 FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                                    , BAS_MEN.MAESTRO_BIC_CSA  MBic
                                WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                                  AND MBic.BICS_TRATADOS = IN_REC.Or_Codigo_BIC
                                  --
                               UNION
                                  --
                               SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                                 FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                                WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_Codigo_BIC
                             );
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                         VN_NUMERR:=20;
                        BEGIN
                        SELECT distinct Periodicidad
                          INTO v_PerLiq_CSA FROM
                            (
                            SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                              FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                                 , BAS_MEN.MAESTRO_BIC_CSA  MBic
                             WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                               AND MBic.BICS_TRATADOS = IN_REC.Or_NIFCIF
                            UNION
                            SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                              FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                             WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_NIFCIF
                             );
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                           VN_NUMERR:=21;
                            BEGIN
                        SELECT distinct Periodicidad
                          INTO v_PerLiq_CSA FROM
                               (
                                SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                                  FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                                     , BAS_MEN.MAESTRO_BIC_CSA  MBic
                                 WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                                   AND MBic.BICS_TRATADOS = IN_REC.Or_NIFCIFIBM
                                 UNION
                                 SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                                   FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                                  WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_NIFCIFIBM
                                );
                            EXCEPTION
                              WHEN OTHERS THEN
                                  v_PerLiq_CSA := 0;
                            END;
                        END;
                    END;
                    VN_NUMERR:=22;
                    -- Para Derivados con contrapartidas con las que se tengan firmados acuerdos de compensación se utilizará la periodicidad
                    -- del Maestro CSA (si no es nula o 0) Si maturity minima 1 año, calculamos las nueva
                    -- JCVJCVJCV 201403 26 de Mayo de 2014 - Se cambian los criterios con que se encuente en el fichero de CSA sera condición suficiente
                    -- JCVJCVJCV 201406 21 de Julio de 2014 - Se cambian los criterios : Que sea un Derivado (OTC o DERIVA*)
                    --                                         y que sea de una EEFF o que este en fichero CMOF. Y además este en el Maestro_CSA

                    IF ( IN_REC.Fi_TipExp = 'OTC' OR SUBSTR(IN_REC.OR_PROCED,1,6) = 'DERIVA' )
                        -- AND ( IN_REC.In_SegmBSIni IN ('007','018','021','028','029','034', '003', '005', '006', '009', '010', '019', '027','031')
                              -- JOM 201512 No es necesario acceder al maestro CMOF en el AIRB
                           --  OR  v_En_Fichero_CMOF = 'S'
                           --  )
                      -- )
                       AND  v_PerLiq_CSA <> 0 THEN
                       VN_NUMERR:=23;
                             IF VN_Fi_MatAIRB = 1 OR VN_OR_VIDRES = 99999999 THEN
                                VN_NUMERR:=24;
                                IF VN_OR_VIDRES = 99999999 THEN
                                   VN_Fi_MatAIRB := v_PerLiq_CSA/365;
                                ELSE
                                   VN_Fi_MatAIRB := GREATEST(v_PerLiq_CSA,VN_OR_VIDRES)/365;
                                END IF;
                             END IF;
                    -- Para Créditos Documentarios (Procedencia 'ES-NEGDOC' o TipOpe 'CD')  Maturity de 1 dia Si maturity minima 1 año
                    ELSIF  ( IN_REC.Or_Proced = 'ES-NEGDOC' OR IN_REC.Or_TipOpe = 'CD' ) AND IN_REC.In_SegmBS0 <> '201' THEN
                          VN_NUMERR:=25;
                        /* 29/10/2021 RMR | Arreglo de los ES-NEGDOC para que la VIDRES se calcule igual que 'ES-FINAN' */
                      --IF ( IN_REC.In_SegmBS0 = '202' AND (VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999)) ) OR  VN_Fi_MatAIRB = 1 THEN
                        IF ( IN_REC.In_SegmBS0 = '202' AND (VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999)) ) OR  VN_Fi_MatAIRB = 1 OR IN_REC.OR_PROCED = 'ES-NEGDOC' THEN
                           VN_NUMERR:=26;
                              IF VN_OR_VIDRES = 99999999 THEN
                                 VN_Fi_MatAIRB := 1/365;
                              ELSE
                                 VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
                              END IF;
                        END IF;
                    -- Operativas del Maestro TipOpe Procedencia
                    ELSIF  v_En_TipOpe_Proced = 'S' AND IN_REC.In_SegmBS0 <> '201' THEN
                            VN_NUMERR:=27;
                           IF VN_Fi_MatAIRB = 1 OR VN_OR_VIDRES = 99999999 THEN
                              IF VN_OR_VIDRES = 99999999 THEN
                                 VN_Fi_MatAIRB := 1/365;
                              ELSE
                                 VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
                              END IF;
                           END IF;
       --             ELSIF IN_REC.IN_SEGMBSINI IN ('007','018','021','028','029','034') AND IN_REC.Or_Proced NOT IN ('ES-FINAN','ES-NEGDOC') THEN /* RMR 20/08/2021 - Añadimos AND para que no entren ES-FINAN y ES-NEGDOC */
       --
       --                 --Maturity EEFF
       --                 IF IN_REC.FI_TIPEXP = 'Repos' THEN
       --                    --INI ALLA -- PARA REPOS, para los repos existentes antes del cálculo de la ead de repos, la maturity es 0.5
       --                    --                        para los repos sobre los que se ha calculado la ead (repos con acuerdo), la maturiry valdrá 5 días salvo para los que tengan CSA que tomará valor 1 día
       --                    --VN_FI_MATAIRB:= 0.5;
       --                    IF IN_REC.IN_TIPOREG IN ('MMRN','RN','ITRN') THEN
       --                      IF v_PerLiq_CSA <> 0 THEN
       --                        VN_FI_MATAIRB:= GREATEST(1/365,IN_REC.OR_VIDRES/365);
       --                      ELSE
       --                        VN_FI_MATAIRB:= GREATEST(5/365,IN_REC.OR_VIDRES/365);
       --                      END IF;
       --                    ELSE
       --
       --                     VN_FI_MATAIRB:= 0.5;
       --                    END IF;
       --                    -- FIN ALLA
       --                 ELSE
       --                       VN_FI_MATAIRB:= 2.5;
       --                 END IF;
                    ELSIF IN_REC.FI_TIPEXP = 'Repos' AND IN_REC.IN_TIPOREG IN ('REN','RN','ITRN') AND v_PerLiq_CSA <> 0 THEN --ALLA 13/07/2016  En el caso de repos, si existe CSA, la maturity valdrá como mínimo 1
                           VN_NUMERR:=28;
                          VN_FI_MATAIRB:= GREATEST(1/365,IN_REC.OR_VIDRES/365);

                   /* RMR 20/08/2021 - Operativas en las que se permite un floor de 1 día para el cálculo de la maturity*/
               --   ELSIF IN_REC.Or_Proced IN ('ES-FINAN','ES-NEGDOC', 'FACTORING', 'EFECTES', 'CONFIRMING', 'FORFAITING') THEN
               --       IF VN_OR_VIDRES = 99999999 THEN
               --            VN_Fi_MatAIRB := 1/365;
               --       ELSE
               --            VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
               --       END IF;
                   /* RMR 20/08/2021 - Dejamos únicamente el cambio para ES-FINAN y ES-NEGDOC */
                    ELSIF IN_REC.Or_Proced IN ('ES-FINAN','ES-NEGDOC') THEN
                          VN_NUMERR:=29;
                        IF VN_OR_VIDRES = 99999999 THEN
                             VN_Fi_MatAIRB := 1/365;
                        ELSE
                             VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
                        END IF;
                    END IF;

                  -- Modificacion de calculo de Maturity para Ofex ( 23/12/19 )  TAR-256

               --   IF  IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'PX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX'  THEN
                  VN_NUMERR:=30;
                  IF ( IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX' ) and ( IN_REC.IN_SEGMBS0 <> '201' ) THEN
                     VN_NUMERR:=31;
                       IF IN_REC.FI_TIPEXP = 'Repos' THEN
                          VN_FI_MATAIRB:= 0.5;
                       ELSE
                            VN_FI_MATAIRB:= 2.5;
                       END IF;
                  END IF;
                  VN_NUMERR:=32;

                IF VN_Or_Vidres < 0 THEN
                   VN_Or_Vidres:= 0;
                END IF; -- Vida residual negativa, la dejamos a 0. XCG, 05/08/11.

             IF IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX' THEN --Para Ofex, LGD Foundation
                  VV_LGD         := 0.45;
                  VN_LGD_LONGRUN := VV_LGD;
                  VV_TIPO:= 'OFEX';
                  VV_ID_GRUPO_HIPOTECARIO:=NULL;
            ELSIF IN_REC.IN_SEGMBS0 = '201' THEN
                  VV_LGD         := 0.45;
                  VN_LGD_LONGRUN := VV_LGD;
                  VV_TIPO:= 'Project Finance';
                  VV_ID_GRUPO_HIPOTECARIO:=NULL;
            ELSIF IN_REC.OR_ENTITY = 242 THEN
                  VN_LGD_LONGRUN:= 0.55; -- BSFINCOM
                  VV_ID_GRUPO_HIPOTECARIO:=NULL;
            ELSIF IN_REC.EAD < 100 THEN --AND IN_REC.IN_SEGMBSINI IN ('003','005','006','009','010','019') THEN
                  VV_LGD              := 1;
                  VN_LGD_LONGRUN      := 1;
                  VV_LGD_NOMORA       := 1;
                  VN_C_TYPE_GUARANTEE := 0;
                  VV_TIPO:= 'Certificación de saldos < 100€';
                  VV_ID_GRUPO_HIPOTECARIO:=NULL;
            /* 05/08/2021 RMR Marcamos con 100% aquellos con riesgo de correlación adversa */
            ELSIF IN_REC.RIESGO_CORR_ADVERSA = 'SI' THEN
                  VV_LGD  := 1;
                  VV_LGD_NOMORA := 1;
                  VN_LGD_LONGRUN := 1;
                  VN_C_TYPE_GUARANTEE := 0;
                  VV_TIPO:= 'Riesgo correlación adversa';
                  VV_ID_GRUPO_HIPOTECARIO:=NULL;
           ELSE
                 VN_NUMERR:=10;
--                  VN_FI_MATAIRB:=BAS_MEN.CALCULO_LGD.CALCULO_MATURITY (PN_FECPRO,VV_OR_VIDRES,VV_OR_FECVTO,VV_IN_SEGMBSINI,VV_OR_PROCED,VV_OR_TIPOPE,VV_FI_TIPEXP,VV_IN_TIPOREG2,
--                                                                       VV_IN_SEGMBS0,VV_OR_CODIGO_BIC,VV_OR_NIFCIFIBM,VV_OR_NIFCIF,VV_EN_TIPOPE_PROCED,VV_PERLIQ_CSA
--                                                                      );




                 /*******************************************************************************************************************************/
                 /*Busco marca hipotecario*/

                 BEGIN
                       IF IN_REC.OR_PROCED IN ('CR-SINDIC', 'INV-C/C-CO','INV-C/C-CR','INV-C/C-EX','PR-DISPONI', 'PRES-DIVIS','PR-MOROS', 'PR-PENDENT', 'PR-PERIOD','PR-VENCUTS','SINDICDIV', 'PR-CONTENC')
                          OR (IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'OX',  'ITOXE', 'MMOXE',  'ITOXC', 'MMOXC')
                          AND IN_REC.OR_TIPOPE IN ('CR', 'PR')) THEN

                           IF IN_REC.IN_TIPOREG NOT IN ('OXE', 'OX',  'ITOXE', 'MMOXE') THEN
                                BEGIN
                                   SELECT 'SI'
                                     INTO VV_GAR_HIP
                                     FROM BAS_MEN.MAESTRO_TIT_REF_HIP
                                    WHERE OR_REFOPE = IN_REC.OR_REFOPE
                                      AND OR_TITULARITAT =IN_REC.OR_TITULARITAT
                                      AND OR_CLUNICONTR = IN_REC.OR_CLUNICONTR  -- XCG, 25/03/14, se introduce el contrato en el cruce
                                      AND IN_REC.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS);
                                EXCEPTION
                                     WHEN OTHERS THEN
                                          BEGIN
                                            SELECT 'SI'
                                              INTO VV_GAR_HIP
                                              FROM BAS_MEN.MAESTRO_TIPGAR
                                             WHERE GARANTIA =IN_REC.OR_CODGAR
                                               and TIPGAR = 'HIP';
                                          EXCEPTION
                                               WHEN OTHERS THEN
                                                    VV_GAR_HIP:= 'NO';
                                          END;
                                END;
                             ELSE
                                  BEGIN
                                     SELECT 'SI'
                                       INTO VV_GAR_HIP
                                       FROM BAS_MEN.MAESTRO_OFEX_HIP
                                      WHERE OR_CTACLI = IN_REC.OR_CTACLI
                                        AND OR_NUMOFI = IN_REC.OR_NUMOFI
                                        AND OR_REFOPE = IN_REC.OR_REFOPE
                                        AND IN_REC.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS);
                                  EXCEPTION
                                       WHEN OTHERS THEN
                                            BEGIN
                                               SELECT 'SI'
                                                 INTO VV_GAR_HIP
                                                 FROM BAS_MEN.MAESTRO_TIPGAR
                                                WHERE GARANTIA =IN_REC.OR_CODGAR
                                                  and TIPGAR = 'HIP';
                                            EXCEPTION
                                                 WHEN OTHERS THEN
                                                      VV_GAR_HIP:= 'NO';
                                            END;
                                  END;
                             END IF;
                       ELSE
                            BEGIN
                                 SELECT 'SI'
                                   INTO VV_GAR_HIP
                                   FROM BAS_MEN.MAESTRO_TIPGAR
                                  WHERE GARANTIA =IN_REC.OR_CODGAR
                                    and TIPGAR = 'HIP';
                               EXCEPTION
                                    WHEN OTHERS THEN
                                         VV_GAR_HIP:= 'NO';
                               END;
                       END IF;

               END;

                 -- VV_GAR_HIP:=BAS_MEN.CALCULO_LGD.F_MARCA_HIPOTECARIO(IN_REC.OR_PROCED ,IN_REC.IN_TIPOREG, IN_REC.OR_TIPOPE,
                                                                     -- IN_REC.OR_REFOPE,IN_REC.OR_TITULARITAT, IN_REC.OR_CLUNICONTR,
                                                                     -- IN_REC.OR_CODGAR,IN_REC.OR_CTACLI,IN_REC.OR_NUMOFI) ;
                 VN_NUMERR:=34;

                /*Buscto tipo de garantia*/
                 BEGIN
                      SELECT TIPGAR
                         INTO VV_TIP_GAR
                         FROM BAS_MEN.MAESTRO_TIPGAR
                        WHERE GARANTIA = IN_REC.OR_CODGAR;
                 EXCEPTION
                       WHEN OTHERS THEN
                           VV_TIP_GAR:= 'DOEX';--NULL;--'DOEX'; --Como valor por defecto aplicaremos LGD de Préstamo consumo documento Ejecutivo. XCG, 25/07/08.
                 END;
               -- VV_TIP_GAR:=BAS_MEN.CALCULO_LGD.F_TIPO_GARANTIA(IN_REC.OR_CODGAR) ;
                 VN_NUMERR:=35;
                IF IN_REC.IN_SEGMBS0 = '200' THEN
                       VV_PROMOTOR:='S';
                ELSE
                       VV_PROMOTOR:='N';
                END IF;
                 VN_NUMERR:=36;
                 --BUSCO COREPS
                  BEGIN
                                  SELECT NVL(FI_PD_COREPS,99)
                                   INTO VV_FI_PD_COREPS
                                   FROM BAS_MEN.BASILEA_AIRB_PD_OLD
                                   WHERE OR_IDREG=IN_REC.OR_IDREG;
                  EXCEPTION
                       WHEN NO_DATA_FOUND THEN
                                VV_FI_PD_COREPS:=0;
                       WHEN OTHERS THEN
                                VV_FI_PD_COREPS:=0;
                  END;
                               IF VV_FI_PD_COREPS>1 THEN
                                  VV_FI_PD_COREPS_MAESTRO:=1;
                               ELSE
                               VV_FI_PD_COREPS_MAESTRO:=VV_FI_PD_COREPS;
                               END IF;
                 CASE
                       WHEN (VV_GAR_HIP='SI' AND IN_REC.OR_CODGAR NOT IN ('GR 11202','GR 11201','GR 11299') AND IN_REC.IN_SEGMBS<>'Project Finance')
                             OR (IN_REC.OR_PROCED ='LEASING' AND IN_REC.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031)
                            )THEN
                            VN_NUMERR:=37;
                            VV_TIPO:='?';--PERFORMING SECURE';
                            VV_CLASIFICACION:='SEC';
                            IF VV_ID_GRUPO_HIPOTECARIO IS NOT NULL THEN
                               VN_NUMERR:=37;
                                --grupo hipotecario busco variables:
                               BEGIN
                                    SELECT DISTINCT
                                           ID_BIEN,
                                           TIPO_BIEN,
                                           PROMOTOR,
                                           CODPOBLACI,
                                           CODPOSTAL,
                                           D_WR_INEF D_WR_INE,
                                           CODINE_TEMP0,
                                           TASACION_AGR,
                                           CLASIFICACION_ASII,
                                           SUM(FI_EADCONAIRB) OVER (PARTITION BY ID_GRUPO_HIPOTECARIO) FI_EADCONAIRB,
                                           MAX(RESIDUAL_MATURITY) OVER (PARTITION BY ID_GRUPO_HIPOTECARIO) RESIDUAL_MATURITY,
                                           MAX(FI_PD_COREPS) OVER (PARTITION BY ID_GRUPO_HIPOTECARIO)FI_PD_COREPS,
                                           MAX(LTV_AGR) OVER (PARTITION BY ID_GRUPO_HIPOTECARIO) LTV_AGR
                                     INTO VV_ID_BIEN,
                                          VV_TIPO_COLATERAL,
                                          VV_PROMOTOR,
                                          VV_CODPOBLACI,
                                          VV_CODIGO_POSTAL_BIEN,
                                          VV_D_WR_INE,
                                          VV_CODINE_TEMP0,
                                          VV_VALOR_TASACION,
                                          VV_SEGMENTO_ABCD,
                                          VV_EADCONAIRB_CONTRATO,
                                          VV_MATURITY_MES,
                                          VV_FI_PD_COREPS,
                                          VV_LTV
                                     FROM BAS_MEN.GRP_HIPOTECARIO_ESTATUS
                                    WHERE ID_GRUPO_HIPOTECARIO=VV_ID_GRUPO_HIPOTECARIO
                                      AND ESTATUS =VV_ESTATUS ;

                                   --Asigno valor maximo a 1 al valor del coreps
                                   IF VV_FI_PD_COREPS>1 THEN
                                       VV_FI_PD_COREPS_MAESTRO:=1;
                                   ELSE
                                       VV_FI_PD_COREPS_MAESTRO:=VV_FI_PD_COREPS;
                                   END IF;
                                EXCEPTION
                                   WHEN NO_DATA_FOUND THEN
                                        VV_ID_BIEN            :=NULL;
                                        VV_TIPO_COLATERAL     :='RESTO';
                                        VV_CODPOBLACI         :=NULL;
                                        VV_CODIGO_POSTAL_BIEN :=NULL;
                                        VV_D_WR_INE           :=NULL;
                                        VV_CODINE_TEMP0       :=NULL;
                                        VV_VALOR_TASACION     :=NULL;
                                        VV_SEGMENTO_ABCD      :=NULL;
                                        VV_EADCONAIRB_CONTRATO:=NULL;
                                        VV_MATURITY_MES       :=NULL;
                                        VV_FI_PD_COREPS       :=NULL;
                                        VV_LTV                :=NULL;
                                   WHEN OTHERS THEN
                                        VV_ID_BIEN            :=NULL;
                                        VV_TIPO_COLATERAL     :='RESTO';
                                        VV_CODPOBLACI         :=NULL;
                                        VV_CODIGO_POSTAL_BIEN :=NULL;
                                        VV_D_WR_INE           :=NULL;
                                        VV_CODINE_TEMP0       :=NULL;
                                        VV_VALOR_TASACION     :=NULL;
                                        VV_SEGMENTO_ABCD      :=NULL;
                                        VV_EADCONAIRB_CONTRATO:=NULL;
                                        VV_MATURITY_MES       :=NULL;
                                        VV_FI_PD_COREPS       :=NULL;
                                        VV_LTV                :=NULL;
                               END;


                            ELSE
                               --Busco parametros para calculo LGD
                                VN_NUMERR:=40;
                                BEGIN
                                    SELECT ID_BIEN,
                                           TIPO_BIEN,
                                           CODPOBLACI,
                                           CODPOSTAL,
                                           D_WR_INEF D_WR_INE,
                                           CODINE_TEMP0,
                                           VALOR_BIEN_TOT
                                      INTO VV_ID_BIEN,
                                           VV_TIPO_COLATERAL,
                                           VV_CODPOBLACI,
                                           VV_CODIGO_POSTAL_BIEN,
                                           VV_D_WR_INE,
                                           VV_CODINE_TEMP0,
                                           VV_VALOR_BIEN_TOT
                                      FROM BAS_MEN.CONTRATOS_ASG_POTENCIAL
                                     WHERE P_MES=IN_REC.OR_IDMES
                                       AND CODCONAC=IN_REC.OR_CLUNICONTR;
                                EXCEPTION
                                      WHEN NO_DATA_FOUND THEN
                                           VV_ID_BIEN           :=NULL;
                                           VV_TIPO_COLATERAL    :='RESTO';
                                           VV_CODPOBLACI        :=NULL;
                                           VV_CODIGO_POSTAL_BIEN:=NULL;
                                           VV_D_WR_INE          :=NULL;
                                           VV_CODINE_TEMP0      :=NULL;
                                           VV_VALOR_BIEN_TOT    :=NULL;
                                      WHEN OTHERS THEN
                                           VV_ID_BIEN           :=NULL;
                                           VV_TIPO_COLATERAL    :='RESTO';
                                           VV_CODPOBLACI        :=NULL;
                                           VV_CODIGO_POSTAL_BIEN:=NULL;
                                           VV_D_WR_INE          :=NULL;
                                           VV_CODINE_TEMP0      :=NULL;
                                           VV_VALOR_BIEN_TOT    :=NULL;
                                END;
                                 VN_NUMERR:=41;
                                BEGIN
                                    SELECT CLASIFICACION_ASII
                                     INTO VV_SEGMENTO_ABCD
                                     FROM BAS_MEN.MAESTRO_ZONA_GEOG_ABCD_201911
                                    WHERE CDIME_POBLACION_N1=VV_CODINE_TEMP0;
                                EXCEPTION
                                    WHEN NO_DATA_FOUND THEN
                                         VV_SEGMENTO_ABCD:='D';
                                    WHEN OTHERS THEN
                                          VV_SEGMENTO_ABCD:='D';
                                END;
                                 VN_NUMERR:=42;
                                BEGIN
                                       SELECT FI_EADCONAIRB
                                         INTO  VV_EADCONAIRB_CONTRATO
                                         FROM BAS_MEN.MAESTRO_EAD_CONTRATOS
                                        WHERE OR_CLUNICONTR=IN_REC.OR_CLUNICONTR;
                                EXCEPTION
                                    WHEN OTHERS THEN
                                         VV_EADCONAIRB_CONTRATO:=IN_REC.FI_EADCONAIRB;
                                END;
                               VN_NUMERR:=43;
                 --No limitamos la maturity a 5 años para entrar en el maestro


               IF nvl(VV_OR_VIDRESBAS, 0) NOT IN (0, 99999999, 88888888) and VV_OR_VIDRESBAS > 0 then
                VV_MATURITY_MES:= VV_OR_VIDRESBAS/365;
               ELSIF IN_REC.OR_FECVTO > 19000000 and IN_REC.OR_FECVTO < 20990101 then
                VV_MATURITY_MES:= (TO_DATE(IN_REC.OR_FECVTO, 'YYYYMMDD') - TO_DATE(PN_FECPRO, 'YYYYMMDD')) / 365;
               ELSE
                VV_MATURITY_MES:= 0;
               END IF;


            END IF;
                            --CALCULO LG
                            VN_NUMERR:=44;
              --HDEV-107786  FLA  24/05/2022
                             IF VV_LTV > 5000 THEN
                               VV_LTV_MAESTRO := 5000;
                             ELSE
                               VV_LTV_MAESTRO:= VV_LTV;
                             END IF;


                          BEGIN
                              SELECT NVL(LGD,99),NVL(LGD_LR,99)
                                INTO VV_LGD,
                                    VN_LGD_LONGRUN --VV_LGD_LR
                                FROM BAS_MEN.MAESTRO_PERF_SEC_LGD
                               WHERE TIPO_BIEN              = VV_TIPO_COLATERAL
                                 AND CLASIFICACION_ABCD     = VV_SEGMENTO_ABCD
                                 AND PROMOTOR               = VV_PROMOTOR
                                 AND FI_PD_COREPS_MIN       < VV_FI_PD_COREPS_MAESTRO
                                 AND FI_PD_COREPS_MAX      >= VV_FI_PD_COREPS_MAESTRO
                                 AND RESIDUAL_MATURITY_MIN <  VV_MATURITY_MES
                                 AND RESIDUAL_MATURITY_MAX >= VV_MATURITY_MES
                                 AND EAD_CLUNICONTR_MIN     < VV_EADCONAIRB_CONTRATO
                                 AND EAD_CLUNICONTR_MAX    >= VV_EADCONAIRB_CONTRATO
                                 AND OR_VALTAS_MIN          < VV_VALOR_TASACION
                                 AND OR_VALTAS_MAX         >= VV_VALOR_TASACION
                 --HDEV-107786  FLA  24/05/2022
                                 AND LTV_MIN                < VV_LTV_MAESTRO
                                 AND LTV_MAX               >= VV_LTV_MAESTRO ;
                          EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                VV_LGD:=99;
                                VN_LGD_LONGRUN:=99;
                            WHEN OTHERS THEN
                                VV_LGD:=99;
                                VN_LGD_LONGRUN:=99;
                          END;

                          VN_NUMERR:=44;

                       WHEN ( (IN_REC.IN_SEGMBS<>'Project Finance' AND IN_REC.OR_CODGAR  IN ('GR 12199','GR 12117','GR 12106','GR 12107','GR 12108','GR 12109','GR 12111',
                                  'GR 12112','GR 12114','GR 12115','GR 12201','GR 12202','GR 12203','GR 12204','GR 12301','GR 12302','GR 12303','GR 12304','GR 12305',
                                 'GR 12307','GR 12308','GR 12116')
                               )
                               OR (VV_TIP_GAR='EXP' AND IN_REC.OR_CODGAR  IN ('GR 21106','GR 21110','GR 21104') )
                               OR (VV_TIP_GAR='D2')
                               OR (IN_REC.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR IN_REC.ENTFAC<>9999 )
                            )   THEN
                             --GarantIas Dinerarias y Avalistas (GDAI)
                             VV_TIPO:='?';
                             VV_CLASIFICACION:='GDAI';
                             VV_ID_GRUPO_HIPOTECARIO:=NULL;
                             VN_NUMERR:=45;
                              BEGIN
                                  SELECT nvl(LGD,99),NVL(LGD_LR,99)
                                    INTO VV_LGD,VN_LGD_LONGRUN
                                    FROM BAS_MEN.MAESTRO_PERF_GDA_LGD
                                   WHERE FI_PD_COREPS_MIN     < VV_FI_PD_COREPS_MAESTRO
                                     AND FI_PD_COREPS_MAX    >= VV_FI_PD_COREPS_MAESTRO ;
                              EXCEPTION
                                  WHEN NO_DATA_FOUND THEN
                                       VV_LGD:=99;
                                       VN_LGD_LONGRUN:=99;
                                  WHEN OTHERS THEN
                                       VV_LGD:=99;
                                       VN_LGD_LONGRUN:=99;
                             END;


                              VN_NUMERR:=46;
                      ELSE
                          /*UNSECURED*/

                          VV_TIPO:='?';
                          VV_CLASIFICACION:='UNSEC';
                          VV_ID_GRUPO_HIPOTECARIO:=NULL;
                          VN_NUMERR:=47;
                          VV_LETRA:=SUBSTR(IN_REC.OR_NIFCIF,1,1);
                          VN_NUMERR:=48;
                          BEGIN
                              SELECT SOCIEDAD
                                INTO VV_TIPO_SOCIEDAD
                                FROM BAS_MEN.L4_EQUIVALENCIA_CIF
                               WHERE LETRA=VV_LETRA;

                               IF VV_TIPO_SOCIEDAD in ('Sociedad de responsabilidad limitada', 'Sociedad Anónima') THEN
                                  VV_LEGAL_FRAMEWORK:='Limited responsibility';
                               ELSE
                                   VV_LEGAL_FRAMEWORK:='Resto';
                               END IF;

                          EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                   VV_TIPO_SOCIEDAD:=NULL;
                                   VV_LEGAL_FRAMEWORK:='Resto';
                              WHEN OTHERS THEN
                                   VV_TIPO_SOCIEDAD:=NULL;
                                   VV_LEGAL_FRAMEWORK:='Resto';
                          END;

                          VN_NUMERR:=49;
                         IF IN_REC.OR_CODGAR IN ('FIC00700', 'FIC00100', 'GR 11201', 'GR 11202', 'GR 11299') THEN
                             VV_LEASMOB:='S';
                         ELSE
                             VV_LEASMOB:='N';
                         END IF;
                          VN_NUMERR:=50;
                          BEGIN
                               SELECT FI_EADCONAIRB
                                 INTO VV_EADCONAIRB_TITULARITAT
                                 FROM BAS_MEN.MAESTRO_EAD_TITULARIDAD
                                WHERE OR_TITULARITAT=IN_REC.OR_TITULARITAT;
                          EXCEPTION
                               WHEN OTHERS THEN
                                    VV_EADCONAIRB_TITULARITAT:=IN_REC.FI_EADCONAIRB;
                          END;


                         BEGIN
                              SELECT nvl(LGD,99),NVL(LGD_LR,99)
                                INTO VV_LGD,VN_LGD_LONGRUN
                                FROM BAS_MEN.MAESTRO_PERF_UNSEC_LGD
                               WHERE LEGAL_FRAMEWORK      = VV_LEGAL_FRAMEWORK
                                 AND LEASING_MOB          = VV_LEASMOB
                                 AND EAD_TITULARITAT_MIN  < VV_EADCONAIRB_TITULARITAT
                                 AND EAD_TITULARITAT_MAX >= VV_EADCONAIRB_TITULARITAT
                                 AND FI_PD_COREPS_MIN     < VV_FI_PD_COREPS_MAESTRO
                                 AND FI_PD_COREPS_MAX    >= VV_FI_PD_COREPS_MAESTRO ;
                         EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                   VV_LGD        :=99;
                                   VN_LGD_LONGRUN:=99;
                              WHEN OTHERS THEN
                                   VV_LGD        :=99;
                                   VN_LGD_LONGRUN:=99;
                         END;

                          VN_NUMERR:=51;
                 END CASE;
         
                 --KAT 18/07/2022 HDEV-182069 Informar campo C_TYPE_GUARANTEE
                 IF VV_CLASIFICACION = 'SEC' THEN
                    VN_C_TYPE_GUARANTEE := 5;
                 ELSE 
                    IF IN_REC.OR_PROCED = 'EFECTES' OR (in_rec.or_proced = 'FACTORING' and IN_REC.OR_CLUNICUENT = 999999999999999) THEN
                       VN_C_TYPE_GUARANTEE := 1;
                    ELSIF in_rec.or_proced = 'FACTORING' and (IN_REC.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR IN_REC.ENTFAC<>9999) THEN
                       VN_C_TYPE_GUARANTEE := 1;
                    ELSE
                       IF VV_TIP_GAR = 'EXP' THEN 
                         VN_C_TYPE_GUARANTEE := 1;
                       ELSIF VV_TIP_GAR = 'LEASNOIN' THEN
                         VN_C_TYPE_GUARANTEE := 6;
                       ELSIF VV_TIP_GAR IN ('D','D2') THEN 
                         VN_C_TYPE_GUARANTEE := 4;
                       ELSE
                         VN_C_TYPE_GUARANTEE := 0;
                       END IF;
                       
                    END IF;
                       
                 END IF;
       
             --KAT 18/07/2022 HDEV-182069 Informar campo C_TYPE_GUARANTEE
       
                 VV_FI_LGDLRNOMORA:=VN_LGD_LONGRUN;
                 VV_LGD_NOMORA:=VV_LGD;
             END IF;
      
             VN_NUMERR:=52;
             VV_TIPO_NOMORA:=VV_TIPO;
              VN_NUMERR:=53;
             IF IN_REC.OR_FECDEU IN (0, 10101)  THEN
                 VN_NUMERR:=54;
                IF IN_REC.IN_FECMORA IN ( '?', '0001-01-01')  THEN
                    BEGIN
                          VV_EDAD := 30;     --EDAD en meses.
                           VN_NUMERR:=55;
                          VV_FECHAMORA := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(PN_FECPRO ,'YYYYMMDD'),-30), 'YYYYMMDD'));
                    END;
                ELSE
                     BEGIN
                         VN_NUMERR:=56;
                         VV_EDAD := ceil((MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.IN_FECMORA, 'YYYY-MM-DD')))); --EDAD en meses.
                          VN_NUMERR:=57;
                         VV_FECHAMORA := to_number(TO_char(TO_DATE(IN_REC.IN_FECMORA, 'YYYY-MM-DD'), 'YYYYMMDD'));
                         VN_NUMERR:=58;
--                              EXCEPTION
--                                  WHEN OTHERS THEN
--                                    Si falla por error en fecha en mora asignamos edad máxima
--                                        IF vv_Es_Mora_Subjetiva = 'N' THEN
--                                            VV_EDAD := 62;
--                                        END IF;
                     END;
                END IF;
         ELSE
             BEGIN
                VN_NUMERR:=59;
                 VV_EDAD := ceil((MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.OR_FECDEU, 'YYYYMMDD')+90))); --EDAD en meses. OR_FECDEU + 90dies
                 VN_NUMERR:=60;
                 VV_FECHAMORA := to_number(to_char(TO_DATE(IN_REC.OR_FECDEU, 'YYYYMMDD')+90, 'YYYYMMDD'));
                 VN_NUMERR:=61;
--                            EXCEPTION
--                                    WHEN OTHERS THEN
--                                        Si falla por error en fecha en mora asignamos edad máxima
--                                            IF vv_Es_Mora_Subjetiva = 'N' THEN
--                                                 VV_EDAD := 62;
--                                             END IF;
             END;
            VN_NUMERR:=62;
             IF VV_EDAD < 0 THEN
                         VV_EDAD := 0;
             END IF;
       END IF;
      VN_NUMERR:=63;
      IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999    THEN
          VN_NUMERR:=64;
            VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
      ELSE
            IF IN_REC.OR_FECOPE < 19000101 THEN
             VN_NUMERR:=65;
               VV_FECTAS := 190001;
            ELSE
               VN_NUMERR:=66;
                 VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
            END IF;
       END IF;

            /***************************************/
            ---------------------------------------------------- Datos Fin LGD Mora  ----------------------------------------------------------------
            ----------------------------------------------------------------------------------------------------------------------------
            -- Asignación de Curva - Segmento AIRB
            ----------------------------------------------------------------------------------------------------------------------------

            -- JCVJCVJCV 201403 Modificaciones Obtención de la Curva (Segmento AIRB)
            -- Se añaden 2 nuevas categorizaciones:
            -- Grandes EEFF y Entes financieros no regulados
            --    Asignación de Curva:
            --       Para Grandes EEFF 'Emp/Sob/EEFF-CC'
            --       Para el Resto:
            --              Para SEGMBS1 '?' --> 'Emp/Sob/EEFF'
            --              Para SEGMBS1 500 --> 'SME-CC'
            --              Para SEGMBS1 501 --> Como antes
            -- Nueva Asignación de Curva de Tarjetas para CCAA.
            -- Se llevarán a la curva de renovables admisibles, las exposiciones en tarjetas de comercios y autónomos no garantizadas y
            -- cuyo importe total del acreditado sea < 100000.
            --

            VN_NUMERR:=67;

            Vv_In_Activo_Cons_GEF  := 0; -- Ojo aqui no se ha de tener en cuenta el Activo_Cons del Maestro de Ventas


            V_Es_Gran_EEFF       := 'N';
            V_Es_Gran_EEFF_COREP := 'N';
            --
            -- EN principio no haría falta comprobar lo de > 70.000 M de eur ya que todos los que estan en la tabla de Activo lo son.
            --
             VN_NUMERR:=68;
            IF ( NVL(Vv_In_Activo_Cons_GEF,0) > 70000 ) THEN
                 v_Es_Gran_EEFF_COREP   := 'S';     -- Para COREP es suficiente que sea > 70000
                  IF IN_REC.IN_SegmBSIni IN ('007', '034') THEN
                     v_Es_Gran_EEFF      := 'S';  -- Para AIRB adicionalmente han de ser de los segmentos 7 o 34.
                  END IF;
            END IF;
           VN_NUMERR:=69;
            v_Es_Ente_No_Regulado := 'N';
           VN_NUMERR:=70;
            begin
                  SELECT case when REGULADA_SN = 'NO' then 'S' else 'N' end
                    INTO v_Es_Ente_No_Regulado
                    FROM BAS_MEN.MAESTRO_RESEGMENTACION_BDE SegBE
                       , BAS_MEN.MAESTRO_SECTOR_NO_REGULADA SNoReg
                   WHERE SegBE.OR_NIFCIF  = IN_REC.Or_NIFCIF
                     AND SNoReg.OR_SECTOR = SegBE.SECTOR;
            exception
                    WHEN OTHERS THEN
                    VN_NUMERR:=71;
                         BEGIN
                            SELECT DISTINCT('S')
                              INTO v_Es_Ente_No_Regulado
                              FROM BAS_MEN.MAESTRO_PERSONALIDADES PNoReg
                             WHERE PNoReg.OR_PERSON  = IN_REC.Or_Person
                             and PNoReg.REGULADA='NO';
                         EXCEPTION
                              WHEN OTHERS THEN
                                   v_Es_Ente_No_Regulado := 'N';
                         END;

            end;
           VN_NUMERR:=72;
           VV_Entidad_Ente := 0;
           VN_NUMERR:=73;
           IF IN_REC.IN_SRATIN      = 'CEDM' THEN VV_Entidad_Ente := 0;
           ELSIF v_Es_Gran_EEFF_COREP  = 'S' THEN VV_Entidad_Ente := 1;
           ELSIF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SegmBSIni NOT IN ('007', '034') THEN VV_Entidad_Ente := 2;
           ELSE
                VV_Entidad_Ente := 0 ;
           END IF;

           VN_NUMERR:=74;
           VV_In_SegAIRB  := '?';

           -- Nuevos Requerimientos GRANDES EEFF y ENTES NO REGULADOS
           -- Grandes EEFF
           -- 201406 - 20140724 Segmentos que no se deberían tratar en el cambio de correlación como XXX o 030. Para fijar un criterio estable,
           --                   proponemos que unicamente puedan cambiar de correlación  segmentos de empresas o EEFF, excepto Cédulas multicedentes
           --                   (Las calculadas según método IRB, se identifican por el SRATIN CEDM y no se cambian de curva. Para el método Estándar,
           --                    dado que no hay IN_SRATIN, se deberían excluir del cambio de curva las exposiciones con segmbsini 034 cuyo CIF empiece con V.
           --                   )
           VN_NUMERR:=75;
            IF  IN_REC.IN_SegmBSIni IN ( '003', '005', '006', '009', '010', '019', '020', '027' -- Empresas
                                        , '007', '018', '021', '028', '029', '034'                -- EEFF
                                      )
                                    AND NOT (IN_REC.IN_SegmBSIni =  '034' AND SUBSTR(IN_REC.Or_NIFCIF, 1, 1) = 'V')  -- De las EEFF se excluyen las Cédulas multicedentes
            THEN
                VN_NUMERR:=76;
                IF v_Es_Gran_EEFF = 'S' AND IN_REC.IN_SRATIN <> 'CEDM' THEN
                   VV_In_SegAIRB:= 'Emp/Sob/EEFF-CC';
                -- Entes no Regulados
                ELSIF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SRATIN <> 'CEDM' THEN
                      VN_NUMERR :=77;
                      IF IN_REC.In_SegmBS1  = '?' THEN
                           VV_In_SegAIRB := 'Emp/Sob/EEFF-CC';
                      ELSIF IN_REC.In_SegmBS1 = '500' THEN
                           VV_In_SegAIRB := 'SME-CC';
                      ELSE
                         VV_In_SegAIRB  := '?'; --Como hasta ahora
                      END IF;
                END IF;

            END IF;
            VN_NUMERR:=78;
            IF VV_In_SegAIRB = '?'  THEN
                IF IN_REC.In_SegmBS0 <> '202' AND IN_REC.In_SegmBSIni NOT IN ('003','005','006','009','010','019','027') THEN--,'002','017') THEN
                    BEGIN
                           SELECT IN_SEGAIRB
                             INTO VV_In_SegAIRB
                             FROM BAS_MEN.MAESTRO_SEGMENTOS
                            WHERE IN_SEGBS = IN_REC.In_SegmBS
                              AND ROWNUM = 1;
                    EXCEPTION
                           WHEN OTHERS THEN
                              VV_In_SegAIRB:= '?';
                    END;

                 ELSE
                    VN_NUMERR:=79;
                    IF IN_REC.In_SegmBSIni IN ('003','005','006','009','010','019','027') THEN
                       IF IN_REC.In_SegmBS1 = '500' AND IN_REC.Or_NIFCIF <> '777018707659' THEN /* FMRR - 04/01/2022 - HDEV-102956? (requerimiento especificado por email)- clientes con nif 777018707659 no deben tener factor de apoyo*/
                           VV_In_SegAIRB := 'SME';
                       ELSIF IN_REC.In_SegmBS1 = '501' THEN
                           VV_In_SegAIRB := 'Otro Retail';
                       ELSIF IN_REC.In_SegmBS1 = '?' OR IN_REC.Or_NIFCIF = '777018707659' THEN /* FMRR - 04/01/2022 - HDEV-102956? (requerimiento especificado por email)- clientes con nif 777018707659 no deben tener factor de apoyo*/
                           VV_In_SegAIRB := 'Emp/Sob/EEFF';
                       END IF;
                    ELSIF IN_REC.In_SegmBSIni IN ('002','017') THEN
                            IF IN_REC.In_SegmBS1 = '500' THEN
                               VV_In_SegAIRB := 'SME';
                           ELSE
                               VV_In_SegAIRB := 'Otro Retail';
                            END IF;
                    ELSE
                           VN_NUMERR:= 223;
                           BEGIN
                                SELECT IN_SEGAIRB
                                  INTO VV_In_SegAIRB
                                  FROM BAS_MEN.MAESTRO_SEGMENTOS
                                 WHERE IN_SEGMBSINI = IN_REC.In_SegmBSIni
                                   AND ROWNUM = 1;
                           EXCEPTION
                                WHEN OTHERS THEN
                                        VV_In_SegAIRB:= '?';
                           END;
                     END IF;
                END IF;
            END IF;

            VN_NUMERR:=80;
            --Se Busca si el tipo de finca es inmueble.
            BEGIN
               SELECT INMUEBLE
                 INTO VV_Inmueble
                 FROM BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
                WHERE TIPOFI = IN_REC.Or_TipOfi;
            EXCEPTION
                WHEN OTHERS THEN
                     VV_Inmueble := 'NO';
            END;

            VN_NUMERR :=81;

             --Garantías pignoraticias van a la curva de OTRO RETAIL. xcg 01/08/11.
            IF IN_REC.In_SegmBSIni = '103' AND IN_REC.Codgar_Pignoraticia = '?' THEN
                vv_In_SegmBS3   := '070';
                VV_In_SegAIRB   := 'Préstamos Hipotecarios';
            ELSIF IN_REC.In_SegmBSIni = '103' THEN
                  VV_In_SegAIRB := 'Otro Retail';
            END IF;

            VN_NUMERR:=82;
            -- Curva de Prestamos hipotecarios:
            -- Segmentos 104, 101, 102 y 501, con garantía hipotecaría, tipo de finca inmueble y que no sean Garantías pignoraticias.
            -- Se incluye el ini '106' junto con el '104', '101', '102' y '501' para la curva de préstamos hipotecarios -- 201403
            IF ( IN_REC.In_SegmBSIni IN ('104','101','102', '106') OR IN_REC.In_SegmBS1 = '501')
                AND IN_REC.Or_TipGar IN ('HC','HV','HR','HX')
                AND VV_Inmueble = 'INMUEBLE'
                AND IN_REC.Codgar_Pignoraticia = '?' THEN
                   VV_In_SegAIRB  := 'Préstamos Hipotecarios';
                   vv_In_SegmBS3  := '070';
            END IF;

            -- JCVJCVJCV 201403 Nueva Asignación de Curva de Tarjetas para CCAA.
            IF ( IN_REC.In_SegmBSIni  IN ('101', '102')
               AND ( IN_REC.Or_TipOpe = 'TC' OR (SUBSTR(IN_REC.Or_Proced,1,4) = 'TARG' AND IN_REC.Or_TipOpe = '?' ))
               AND IN_REC.Garantizada = 'NO'
               AND IN_REC.Importe_Total   < 100000
               ) THEN
                   VV_In_SegAIRB  := 'Tarjetas Crédito';
            END IF;



            ----------------------------------------------------------------------------------------------------------------------------
            -- Ajuste de Tamaño (ATAMAIRB)
            ----------------------------------------------------------------------------------------------------------------------------

            -- JCVJCVJCV 201403 Modificaciones Obtención del Ajuste de Tamaño
            --  El ajuste de tamaño se  realizará a través de las ventas del grupo consolidado (manteniendose los umbrales entre 5 y 50 Mill)
            -- siempre que estas seán un indicador significativo ( no nulas(99) o <> 0), sino para holdings, promoters o patrimoniales
            -- se tomará el Activo Consolidado.
            -- NOTA: Para determinar si ventas del grupo consolidado son indicador significativo se utilizarán las ventas del grupo
            -- consolidado originales (MAESTRO_VENTAS) ya que en este punto ya se han aplicado ventas medias.
            -- Se añade Tratamiento SME--CC
            VV_In_Activo_Cons := vv_In_Activo_Cons_GEF;
            VN_NUMERR:=83;
            IF Vv_In_Activo_Cons = 0 THEN
               IF IN_REC.In_Activo_Cons IS NOT NULL THEN
                 Vv_In_Activo_Cons := IN_REC.In_Activo_Cons;
               ELSE
                 Vv_In_Activo_Cons := IN_REC.In_Activo;
               END IF;
            END IF;

           VN_NUMERR:=84;
            IF VV_IN_SEGAIRB IN ('SME', 'SME-CC') THEN
               -- 201706 se añade tratamiento de SMS que sean HOLDINGS, PROMOTORES o PATRIMONIALES (Si las vtas son 0 [OJO las originales, antes de ventas medias] se utilizara el Activo cons)
               IF NVL(IN_REC.VENTAS_CON,0) IN (0, 99) AND ( IN_REC.OR_INDHOLDING IN ('1', '3', '4') OR  IN_REC.In_SegmBS2 = '020' ) THEN
                   VN_FI_ATAMAIRB:= NVL(Vv_In_Activo_Cons,0)/1000000;
               ELSE
                   VN_FI_ATAMAIRB:= IN_REC.IN_VTAGRU_CONS/1000000;
               END IF;
              -- Uumbrales actuales (entre 5 y 50 millones).
               IF    VN_FI_ATAMAIRB < 5  THEN VN_FI_ATAMAIRB:= 5;
               ELSIF VN_FI_ATAMAIRB > 50 THEN VN_FI_ATAMAIRB:= 50;
               --ELSE Se queda con el valor obtenido;
               END IF;
            END IF;

            VN_NUMERR:=85;

            IF VN_Or_Vidres < 0 THEN
               VN_Or_Vidres:= 0;
            END IF; -- Vida residual negativa, la dejamos a 0. XCG, 05/08/11.
            VN_NUMERR:=86;
            --26/03 - Tratamiento de depósitos interbancarios - Cálculo IRB
            IF IN_REC.FI_EPICON IN ('010010301010100000000000000000', '010010301010203000000000000000','010010302010100000000000000000',
                                     '010010302010203000000000000000','010010100000000000000000000000') THEN
                VV_IN_SEGAIRB := 'Otros Activos';
                VV_LGD    := 0;
                VV_LGD_BE := 0;
                VV_LGD_WORST := 0;
                VN_LGD_LONGRUN := 0;
                VV_LGD_NOMORA := 0;
            END IF;

            VN_NUMERR:=87;

            /* 27/01/2022 - NAV - HDEV-106661 - IMPLEMENTACION LGD LONG RUNG -  Cuando LGD long run (LGDLR en la BDD) sea mayor a la LGD asignada (FI_LGDAIRB) se sobreescriba esta última con el valor de la Long RUN */
            IF VN_LGD_LONGRUN > VV_LGD THEN
               VV_LGD := VN_LGD_LONGRUN;
            END IF;

            /*************************************************/
            OUT_REC.OR_IDREG                  := IN_REC.OR_IDREG;
            OUT_REC.ESTATUS                   := VV_ESTATUS;
            OUT_REC.CLASIFICACION             := VV_CLASIFICACION;
            OUT_REC.ID_GRUPO_HIPOTECARIO      := VV_ID_GRUPO_HIPOTECARIO;
            OUT_REC.IN_SEGMBSINI              := IN_REC.IN_SEGMBSINI;
            OUT_REC.OR_SEGFIC2                := IN_REC.OR_SEGFIC2;
            OUT_REC.IN_INDMOR                 := IN_REC.IN_INDMOR;
            OUT_REC.IN_SRATIN                 := IN_REC.IN_SRATIN;
            OUT_REC.OR_CODGAR                 := IN_REC.OR_CODGAR;
            OUT_REC.ENTFAC                    := IN_REC.ENTFAC;
            OUT_REC.IN_SEGMBS                 := IN_REC.IN_SEGMBS;
            OUT_REC.OR_PROCED                 := IN_REC.OR_PROCED;
            OUT_REC.OR_TIPOBJETO              := IN_REC.OR_TIPOBJETO;
            OUT_REC.FI_EADAIRB                := IN_REC.FI_EADAIRB;
            OUT_REC.FI_EADCONAIRB             := IN_REC.FI_EADCONAIRB;
            OUT_REC.FI_CCFAIRB                := IN_REC.FI_CCFAIRB;
            OUT_REC.FI_LGDNOMORA              := VV_LGD_NOMORA;
            OUT_REC.FI_LGDAIRB                := VV_LGD;
            OUT_REC.FI_LGDBE                  := VV_LGD_BE;
            OUT_REC.FI_LGDWORST               := VV_LGD_WORST;
            OUT_REC.FI_LGDLRNOMORA            := VV_FI_LGDLRNOMORA;
            OUT_REC.FI_IMPLTV                 := VV_FI_IMPLTV;
            OUT_REC.FI_VIDRES                 := VN_OR_VIDRES;
            OUT_REC.IN_SEGAIRB                := VV_IN_SEGAIRB;
            OUT_REC.FI_MATAIRB                := VN_FI_MATAIRB;
            OUT_REC.FI_ATAMAIRB               := VN_FI_ATAMAIRB;
            OUT_REC.IN_ACTIVO_CONS            := VV_In_Activo_Cons;
            OUT_REC.ENTIDAD_ENTE              := VV_ENTIDAD_ENTE;
            OUT_REC.C_TYPE_GUARANTEE          := VN_C_TYPE_GUARANTEE;
            OUT_REC.FI_TIPO_GARANTIA          := VV_TIPO;
            OUT_REC.FI_TIPO_GARANTIA_NOMORA   := VV_TIPO_NOMORA;
            OUT_REC.FI_LGD_PROC               := VV_LGD_PROC;
            OUT_REC.FI_LGD_HIP                := VV_LGD_HIP;
            OUT_REC.OR_IDMES                  := IN_REC.OR_IDMES;
            OUT_REC.IN_FECHAMORA              := VV_FECHAMORA;
            OUT_REC.IN_FECTAS                 := VV_FECTAS;
            OUT_REC.IN_EDAD                   := VV_EDAD; -- 30/10/2019 RMR - Petición de Encarni, necesita la edad de la LGD morosa.
            OUT_REC.FI_PD_COREPS              := VV_FI_PD_COREPS ;
            OUT_REC.GAR_HIP                   := VV_GAR_HIP  ;
            OUT_REC.TIP_GAR                   := VV_TIP_GAR ;
            OUT_REC.PROMOTOR                  := VV_PROMOTOR ;
            OUT_REC.TIPO                      := VV_TIPO ;
            OUT_REC.TIPO_COLATERAL            := VV_TIPO_COLATERAL ;
            OUT_REC.ID_BIEN                   := VV_ID_BIEN ;
            OUT_REC.VALOR_BIEN_TOT            := VV_VALOR_BIEN_TOT ;
            OUT_REC.CODPOSTAL                 := VV_CODIGO_POSTAL_BIEN ;
            OUT_REC.CODPOBLACI                := VV_CODPOBLACI ;
            OUT_REC.D_WR_INE                  := VV_D_WR_INE ;
            OUT_REC.CODINE_TEMP0              := VV_CODINE_TEMP0 ;
            OUT_REC.SEGMENTO_ABCD             := VV_SEGMENTO_ABCD ;
            OUT_REC.LTV                       := VV_LTV ;
            OUT_REC.VALOR_PIGNORATICIAS       := VV_VALOR_PIGNORATICIAS ;
            OUT_REC.TOTAL_VALOR_NETO_TOT_COND := VV_TOTAL_VALOR_NETO_TOT_COND ;
            OUT_REC.VALOR_TASACION            := VV_VALOR_TASACION ;
            OUT_REC.EADCONAIRB_CONTRATO       := VV_EADCONAIRB_CONTRATO ;
            OUT_REC.MATURITY_MES              := VV_MATURITY_MES ;
            OUT_REC.LETRA                     := VV_LETRA ;
            OUT_REC.LEGAL_FRAMEWORK           := VV_LEGAL_FRAMEWORK;
            OUT_REC.LEASMOB                   := VV_LEASMOB ;
            OUT_REC.EADCONAIRB_TITULARITAT    := VV_EADCONAIRB_TITULARITAT ;
            OUT_REC.FI_LGD                    := VV_LGD ;
            OUT_REC.FI_LGDLR                  := VN_LGD_LONGRUN;

      pipe row(out_rec);



        END LOOP;

 EXCEPTION
   WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_OR_IDREG||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));

 END F_CALCULO_LGD_PERF_EMP;
----------------------------------------------------------------------------------

/*********No Performing*******************/

----------------------------------------------------------------------------------------
FUNCTION F_CALCULO_LGD_NO_PERF_EMP (Cur IN Cursor_Basilea,PN_FecPro IN NUMBER) RETURN T_Array_Basilea_Calculo_LGD_AUX_3
  PARALLEL_ENABLE(PARTITION Cur BY ANY)
  PIPELINED
IS

  In_Rec                            Cur%ROWTYPE;
  Out_Rec                           BAS_MEN.BASILEA_AIRB_LGD_AUX_3%ROWTYPE;

  ----- Varaibles del proceso -----
 v_Num                             NUMBER;

 VV_TIPO                           VARCHAR2(100);
 VV_TIPO_NOMORA                    VARCHAR2(100) DEFAULT '?';
 VV_LGD                            FLOAT(126);
 VV_GAR_HIP                        VARCHAR2(2);
 VV_TIP_GAR                        VARCHAR2(55);
 VV_TIP_GAR_H                      VARCHAR2(55);
 VV_TIPO_PROC                      VARCHAR2(100);
 VV_TIPO_HIP                       VARCHAR2(100);
 VV_SEGMENTO                       VARCHAR2(17);
 VV_LGD_WORST                      FLOAT(126);
 VV_LGD_BE                         FLOAT(126);
 VV_EDAD                           FLOAT(126);
 VN_LGD_LONGRUN                    FLOAT(126);
 VN_C_TYPE_GUARANTEE               NUMBER(1);
 VV_LGD_NOMORA                     FLOAT(126);
 VV_LGD_PROC                       FLOAT(126);
 VN_LGD_LONGRUN_PROC               FLOAT(126);
 VN_C_TYPE_GUARANTEE_PROC          NUMBER(1);
 VV_LGD_HIP                        FLOAT(126);
 VN_LGD_LONGRUN_HIP                FLOAT(126);
 VN_C_TYPE_GUARANTEE_HIP           NUMBER(1);
 VV_IMPORTE                        FLOAT(126);
 VV_FI_LGDLRNOMORA                 FLOAT(126);
 VV_ROWID                          VARCHAR2(12);
 VN_COUNT                          NUMBER(9):=0;
 VN_NUMERR                         NUMBER(3);
 VV_MENSAJE                        VARCHAR2(255);
 VV_MENSAJE2                       VARCHAR2(255);
 VV_RET                            VARCHAR2(100);
 FALLO1                            EXCEPTION;
 FALLO2                            EXCEPTION;
 VV_IN_SEGAIRB                     VARCHAR2(25);
 VN_FI_MATAIRB                     FLOAT;
 VN_FI_ELAIRB                      FLOAT;
 VN_FI_ELAIRBCON                   FLOAT;
 VV_IN_SEGMBS                      VARCHAR2(25);
 VV_INMUEBLE                       VARCHAR2(8);
 VV_IN_SEGMBS3                     VARCHAR2(3);
 VN_FI_ATAMAIRB                    FLOAT;
 VN_COUNT2                         NUMBER(10) :=0;
 CALCULO                           FLOAT :=0;
 VN_CUOTA                          NUMBER(10) := 0;
 VN_PERIOD                         NUMBER(4,1) := 0;
 VN_TIEMPO_PERIODO                 NUMBER(3) := 0;
 VN_OR_VIDRES                      FLOAT;
 VN_TIPO_PERIODO                   VARCHAR2(1) := '?';
 VN_IMPORTE                        FLOAT :=0;
 VV_NACIONAL                       varchar2(1);
 VV_TRAMO_EDAD                     varchar2(32);
 VV_PRIM_SEG_HIP                   VARCHAR2(4) := '?';
 VV_PC_LGD_EDAD_1                  FLOAT;
 VV_PC_LGD_LR_EDAD_1               FLOAT;
 VV_PC_LGD_EDAD_2                  FLOAT;
 VV_PC_LGD_LR_EDAD_2               FLOAT;
 VV_PC_LGD_EDAD_3                  FLOAT;
 VV_PC_LGD_LR_EDAD_3               FLOAT;
 VV_PC_LGD_EDAD_4                  FLOAT;
 VV_PC_LGD_LR_EDAD_4               FLOAT;
 VV_PC_LGD_EDAD_5                  FLOAT;
 VV_PC_LGD_LR_EDAD_5               FLOAT;
 VV_MES_TASACION                   NUMBER(6) :=0;
 VV_IN_EDAD                        VARCHAR2(32) := '?';
 VV_LGD_BEWC                       FLOAT;
 VV_IN_BE_WC                       VARCHAR2(2);
 VV_MULT                           FLOAT;
 VV_FECHAMORA                      NUMBER(8);
 VV_FI_IMPLTV                      NUMBER;
 VV_FECTAS                         NUMBER(6);
 --01/03/22
 VV_ESTADO_AGREGADO                VARCHAR2(5);
 VV_PROMOTOR                       VARCHAR2(1):='N';

 VV_In_Activo_Cons_GEF          BAS_MEN.BASILEA_AIRB_LGD.IN_ACTIVO_CONS%TYPE     DEFAULT 0;
 VV_In_Activo_Cons              BAS_MEN.BASILEA_AIRB_LGD.IN_ACTIVO_CONS%TYPE     DEFAULT NULL; -- Por defecto null
 VV_Entidad_Ente                BAS_MEN.BASILEA_AIRB_LGD.ENTIDAD_ENTE%TYPE         DEFAULT 0;
 v_Es_Gran_EEFF                 VARCHAR2(1)                                    DEFAULT 'N';
 v_Es_Gran_EEFF_COREP           VARCHAR2(1)                                    DEFAULT 'N';
 v_Es_Ente_No_Regulado          VARCHAR2(1)                                    DEFAULT 'N';
 v_Sector_No_Regulado           VARCHAR2(1)                                    DEFAULT 'N';
 v_Person_No_Regulado           VARCHAR2(1)                                    DEFAULT 'N';
 --v_En_Fichero_CMOF               VARCHAR2(1)                                    DEFAULT 'N';
 v_En_TipOpe_Proced             VARCHAR2(1)                                    DEFAULT 'N';
 v_PerLiq_CSA                   BAS_MEN.MAESTRO_CSA_orig.PERIODICIDAD%TYPE     DEFAULT 1;
 --v_Dias_Periodicidad             NUMBER(3)                                      DEFAULT 1;

 vV_Es_Mora_Subjetiva           VARCHAR2(1)                                    DEFAULT 'N';

    ---SMG 24/09 - PETICION ENCARNI
 VV_LOANTOVALUEMIN         FLOAT(126);
 VV_LOANTOVALUEMAX         FLOAT(126);
 ---SMG 24/09 - PETICION ENCARNI
 SW_MARCA_DEFAULT   VARCHAR2(4); /* RMR 06/05/2020 - Añadido switch para controlar si el proceso es de contabilidad o de NDoD*/
 VV_OR_FECDEU       BAS_MEN.BASILEA.OR_FECDEU%TYPE; /* 06/05/2020 - RMR - Añadido OUT para poder redefinir variable mas abajo*/
 VV_LTV NUMBER;
 VV_TIME_ESTADO NUMBER;
 VN_OR_IDREG NUMBER:=NULL;
  VV_VALOR_PIGNORATICIAS NUMBER;
  VV_TOTAL_VALOR_NETO_TOT_COND NUMBER;
  VV_VALOR_TASACION NUMBER;
  VV_ESTATUS VARCHAR2(2);
  VV_ID_GRUPO_HIPOTECARIO NUMBER;
  VV_CLASIFICACION VARCHAR2(5);
BEGIN

   loop
    FETCH Cur INTO in_rec;
    EXIT WHEN Cur%NOTFOUND;
      VN_NUMERR:=9;

             /* RMR 06/05/2020 - Fin*/
          VN_OR_IDREG              :=IN_REC.OR_IDREG;
          VV_ESTATUS               :='NP'; -- FLA 02/06/2022 IN_REC.ESTATUS;
          VV_ID_GRUPO_HIPOTECARIO  :=IN_REC.ID_GRUPO_HIPOTECARIO;
          VV_TIPO_PROC             := '?';
          VV_TIPO                  := '?';
          VV_TIP_GAR_H             := '?';
          VV_TIP_GAR               := '?';
          VV_FECHAMORA             := 19010101;
          VV_FI_IMPLTV             := nvl(IN_REC.IMPLTV,0);
          VN_C_TYPE_GUARANTEE      := 0;
          VV_SEGMENTO              := '?';
          VV_EDAD                  := '';
          VV_IN_EDAD               := '';
          VV_LGD_HIP               := 99;
          VV_LGD                   := 99;
          VV_LGD_WORST             := 99;
          VV_LGD_BE                := 99;
          VN_LGD_LONGRUN           := 0.35;
          VV_TRAMO_EDAD            := '?';
          ---SMG 24/09 - PETICION ENCARNI
          VV_LOANTOVALUEMIN      := 0;
          VV_LOANTOVALUEMAX      := 0;
          ---SMG 24/09 - PETICION ENCARNI
          VN_OR_VIDRES             := IN_REC.OR_VIDRES;
          VV_LTV:=nvl(IN_REC.IMPLTVEMPMOR,0);
          VV_ESTADO_AGREGADO:=NULL;
          VV_TIME_ESTADO:=0;
          VV_VALOR_PIGNORATICIAS:=nvl(IN_REC.VALOR_PIGNORATICIAS,0);
          VV_TOTAL_VALOR_NETO_TOT_COND:=nvl(IN_REC.TOTAL_VALOR_NETO_TOT_COND,0);
          VV_VALOR_TASACION:=nvl(IN_REC.TOTAL_VALOR_NETO_TOT_COND,0);
          VV_CLASIFICACION:=NULL;
          VV_PROMOTOR             := 'N';
          VV_GAR_HIP              := 'NO';
          VV_LGD_NOMORA           := 0;
          VN_FI_MATAIRB           := 0;
          VN_FI_ATAMAIRB          := 0;
          VV_FECTAS               := 190001;
          
          VN_NUMERR:=10;
          
          IF IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX', 'PX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX' THEN
           VV_LGD_WORST:= 0.45;
           VV_LGD_BE   := 0.45;
           VV_TIPO:= 'OFEX';
           VV_ID_GRUPO_HIPOTECARIO:=NULL;
          ELSIF IN_REC.IN_SEGMBS0 = '201' THEN
           VV_LGD_WORST:= 0.45;
           VV_LGD_BE   := 0.45;
           VV_TIPO:= 'Project Finance';
           VV_ID_GRUPO_HIPOTECARIO:=NULL;
          /* INI - 04/11/2020 - NAV - TM-2900 - Poner LGDBE y LGDWC al 100% a los morosos, para los registros o titularidades menores a 100 euros */
          ELSIF IN_REC.EAD < 100 THEN --AND IN_SEGMBSINI IN ('103', '104','003','005','006','009','010','019','002','017','101','102','027','106','107') THEN
           VV_LGD_WORST   := 1;
           VV_LGD_BE      := 1;
           VV_TIPO        := 'Certificación de saldos < 100€';
           VV_ID_GRUPO_HIPOTECARIO:=NULL;
          /* FIN - 04/11/2020 - NAV - TM-2900 */
          /* 05/08/2021 RMR Marcamos con 100% aquellos con riesgo de correlación adversa */
          ELSIF IN_REC.RIESGO_CORR_ADVERSA = 'SI' THEN
           VV_LGD_BE      := 1;
           VV_LGD_WORST   := 1;
           VV_TIPO        := 'Riesgo correlación adversa';
           VV_ID_GRUPO_HIPOTECARIO:=NULL;
          ELSE
            BEGIN
            VN_NUMERR:=11;

                 -- Marca para saber si tiene garantia hipotecaria.
                 BEGIN
                  IF IN_REC.OR_PROCED IN ('CR-SINDIC', 'INV-C/C-CO','INV-C/C-CR','INV-C/C-EX','PR-DISPONI', 'PRES-DIVIS','PR-MOROS', 'PR-PENDENT', 'PR-PERIOD','PR-VENCUTS','SINDICDIV', 'PR-CONTENC')
                     OR (IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'OX',  'ITOXE', 'MMOXE',  'ITOXC', 'MMOXC')
                     AND IN_REC.OR_TIPOPE IN ('CR', 'PR')) THEN

                    IF IN_REC.IN_TIPOREG NOT IN ('OXE', 'OX',  'ITOXE', 'MMOXE') THEN
                       BEGIN
                        SELECT 'SI'
                          INTO VV_GAR_HIP
                          FROM BAS_MEN.MAESTRO_TIT_REF_HIP
                         WHERE OR_REFOPE = IN_REC.OR_REFOPE
                           AND OR_TITULARITAT =IN_REC.OR_TITULARITAT
                           AND OR_CLUNICONTR = IN_REC.OR_CLUNICONTR  -- XCG, 25/03/14, se introduce el contrato en el cruce
                           AND IN_REC.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS);
                       EXCEPTION
                          WHEN OTHERS THEN
                            BEGIN
                             SELECT 'SI'
                               INTO VV_GAR_HIP
                               FROM BAS_MEN.MAESTRO_TIPGAR
                              WHERE GARANTIA =IN_REC.OR_CODGAR
                                and TIPGAR = 'HIP';
                            EXCEPTION
                              WHEN OTHERS THEN
                                 VV_GAR_HIP:= 'NO';
                            END;
                       END;
                    ELSE
                       BEGIN
                        SELECT 'SI'
                          INTO VV_GAR_HIP
                          FROM BAS_MEN.MAESTRO_OFEX_HIP
                         WHERE OR_CTACLI = IN_REC.OR_CTACLI
                           AND OR_NUMOFI = IN_REC.OR_NUMOFI
                           AND OR_REFOPE = IN_REC.OR_REFOPE
                           AND IN_REC.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS);
                       EXCEPTION
                          WHEN OTHERS THEN
                             BEGIN
                              SELECT 'SI'
                                INTO VV_GAR_HIP
                                FROM BAS_MEN.MAESTRO_TIPGAR
                               WHERE GARANTIA =IN_REC.OR_CODGAR
                                 and TIPGAR = 'HIP';
                             EXCEPTION
                                WHEN OTHERS THEN
                                   VV_GAR_HIP:= 'NO';
                             END;
                       END;
                      END IF;
                  ELSE
                     BEGIN
                       SELECT 'SI'
                         INTO VV_GAR_HIP
                         FROM BAS_MEN.MAESTRO_TIPGAR
                        WHERE GARANTIA =IN_REC.OR_CODGAR
                          and TIPGAR = 'HIP';
                     EXCEPTION
                         WHEN OTHERS THEN
                           VV_GAR_HIP:= 'NO';
                     END;
                  END IF;

                 END;

                 VN_NUMERR:=12;

               /*Buscto tipo de garantia*/
                BEGIN
                   SELECT TIPGAR
                    INTO VV_TIP_GAR
                    FROM BAS_MEN.MAESTRO_TIPGAR
                   WHERE GARANTIA = IN_REC.OR_CODGAR;
                EXCEPTION
                  WHEN OTHERS THEN
                    VV_TIP_GAR:= 'DOEX';--NULL;--'DOEX'; --Como valor por defecto aplicaremos LGD de Préstamo consumo documento Ejecutivo. XCG, 25/07/08.
                END;

                 --Indica si es Promotor o no
                   VN_NUMERR:=13;
                IF IN_REC.IN_SEGMBS0 = '200' THEN
                  VV_PROMOTOR:='S';
                ELSE
                  VV_PROMOTOR:='N';
                END IF;
                 VN_NUMERR:=14;
                 VN_NUMERR:=15;
                 VN_NUMERR:=16;
                CASE
                  WHEN (VV_GAR_HIP='SI' AND IN_REC.OR_CODGAR NOT IN ('GR 11202','GR 11201','GR 11299') AND IN_REC.IN_SEGMBS<>'Project Finance')
                      OR (IN_REC.OR_PROCED ='LEASING' AND IN_REC.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031)
                     )THEN
                     VV_CLASIFICACION:='SEC';
                     IF VV_ID_GRUPO_HIPOTECARIO IS NOT NULL THEN
                       VN_NUMERR:=37;
                         --grupo hipotecario busco variables:
                        BEGIN
                           SELECT DISTINCT
                              PROMOTOR,
                              MAX(LTV_AGR) OVER (PARTITION BY ID_GRUPO_HIPOTECARIO) LTV_AGR,
                              ESTADO_AGR,
                              TIME_ESTADO
                            INTO  VV_PROMOTOR,VV_LTV,VV_ESTADO_AGREGADO,VV_TIME_ESTADO
                            FROM BAS_MEN.GRP_HIPOTECARIO_ESTATUS
                           WHERE ID_GRUPO_HIPOTECARIO=VV_ID_GRUPO_HIPOTECARIO
                             AND ESTATUS =VV_ESTATUS;--'NP' ;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                             VV_PROMOTOR            :=NULL;
                             VV_ESTADO_AGREGADO     :=NULL;
                             VV_TIME_ESTADO         :=NULL;
                             VV_LTV                 :=NULL;

                          WHEN OTHERS THEN
                             VV_PROMOTOR            :=NULL;
                             VV_ESTADO_AGREGADO     :=NULL;
                             VV_TIME_ESTADO         :=NULL;
                             VV_LTV                 :=NULL;
                        END;


                     ELSE
                         --BUSCO ESTADO AGREGADO Y TIEMPO ESTADO POR CONTRATO
                        BEGIN
                          SELECT TIME_ESTADO, ESTADO_AGR
                            INTO VV_TIME_ESTADO,VV_ESTADO_AGREGADO
                            FROM BAS_MEN.TIEMPO_ESTADO_AUX
                           WHERE OR_CLUNICONTR = IN_REC.OR_CLUNICONTR;
                        EXCEPTION
                          WHEN OTHERS THEN
                            IF IN_REC.IN_FECMORA = '?' THEN
                               VV_TIME_ESTADO:= 0;
                            ELSE
                               VV_TIME_ESTADO:= TRUNC(MONTHS_BETWEEN (TO_DATE(PN_FecPro,'YYYYMMDD'), TO_DATE(IN_REC.IN_FECMORA,'yyyy-mm-dd')  ));
                            END IF;
                            VV_ESTADO_AGREGADO:= 'MNC';
                        END;

                     END IF;
                     VV_TIPO:='?';

                     IF VV_TIME_ESTADO > 199 THEN
                        VV_TIME_ESTADO:=199;
                     END IF;


                    BEGIN
                        SELECT nvl(ELBE,99),nvl(LGD_IN_DEFAULT ,99)
                        INTO  VV_LGD_BE,VV_LGD_WORST
                        FROM BAS_MEN.MAESTRO_NP_SEC_LGD
                       WHERE ESTADO_AGR =  VV_ESTADO_AGREGADO
                         AND PROMOTOR   =  VV_PROMOTOR
                         AND LTV_MIN    <  VV_LTV
                         AND LTV_MAX    >= VV_LTV
                         AND TIME_ESTADO = VV_TIME_ESTADO;
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                         VV_LGD_BE   :=99;
                         VV_LGD_WORST:=99;
                      WHEN OTHERS THEN
                         VV_LGD_BE   :=99;
                         VV_LGD_WORST:=99;
                    END;


                  WHEN ( (IN_REC.IN_SEGMBS<>'Project Finance' AND IN_REC.OR_CODGAR  IN ('GR 12199','GR 12117','GR 12106','GR 12107','GR 12108','GR 12109','GR 12111',
                         'GR 12112','GR 12114','GR 12115','GR 12201','GR 12202','GR 12203','GR 12204','GR 12301','GR 12302','GR 12303','GR 12304','GR 12305',
                        'GR 12307','GR 12308','GR 12116')
                      )
                      OR (VV_TIP_GAR='EXP' AND IN_REC.OR_CODGAR  IN ('GR 21106','GR 21110','GR 21104') )
                      OR (VV_TIP_GAR='D2')
                      OR (IN_REC.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR IN_REC.ENTFAC<>9999)
                     )   THEN

                      VV_TIPO:='?';
                      VV_CLASIFICACION:='GDAI';
                      VV_ID_GRUPO_HIPOTECARIO:=NULL;
                     --GarantIas Dinerarias y Avalistas (GDAI)
                      --BUSCO ESTADO AGREGADO Y TIEMPO ESTADO POR CONTRATO
                        BEGIN
                          SELECT TIME_ESTADO, ESTADO_AGR
                            INTO VV_TIME_ESTADO,VV_ESTADO_AGREGADO
                            FROM BAS_MEN.TIEMPO_ESTADO_AUX
                           WHERE OR_CLUNICONTR = IN_REC.OR_CLUNICONTR;
                        EXCEPTION
                          WHEN OTHERS THEN
                            IF IN_REC.IN_FECMORA = '?' THEN
                               VV_TIME_ESTADO:= 0;
                            ELSE
                               VV_TIME_ESTADO:= TRUNC(MONTHS_BETWEEN (TO_DATE(PN_FecPro,'YYYYMMDD'), TO_DATE(IN_REC.IN_FECMORA,'yyyy-mm-dd')  ));
                            END IF;
                            VV_ESTADO_AGREGADO:= 'MNC';
                        END;

                        IF VV_TIME_ESTADO > 200 THEN
                           VV_TIME_ESTADO:=200;
                            END IF;

                          BEGIN
                          SELECT nvl(ELBE,99),nvl(LGD_IN_DEFAULT,99)
                            INTO VV_LGD_BE,VV_LGD_WORST
                            FROM BAS_MEN.MAESTRO_NP_GDA_LGD
                           WHERE ESTADO_AGR = VV_ESTADO_AGREGADO
                             AND TIME_ESTADO = VV_TIME_ESTADO;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                             VV_LGD_BE   :=99;
                             VV_LGD_WORST:=99;
                          WHEN OTHERS THEN
                             VV_LGD_BE   :=99;
                             VV_LGD_WORST:=99;
                        END;

                   ELSE
                     --UNSECURED el resto de los registros que no se hayan clasificado previamente.
                      VV_TIPO:='?';--'NO PERFORMING UNSECURE';
                      VV_CLASIFICACION:='UNSEC';
                      VV_ID_GRUPO_HIPOTECARIO:=NULL;
                      ---BUSCO ESTADO AGREGADO Y TIEMPO ESTADO POR CONTRATO

                      BEGIN
                        SELECT TIME_ESTADO, ESTADO_AGR
                          INTO VV_TIME_ESTADO,VV_ESTADO_AGREGADO
                          FROM BAS_MEN.TIEMPO_ESTADO_AUX
                         WHERE OR_CLUNICONTR = IN_REC.OR_CLUNICONTR;
                      EXCEPTION
                           WHEN OTHERS THEN
                            IF IN_REC.IN_FECMORA = '?' THEN
                               VV_TIME_ESTADO:= 0;
                            ELSE
                               VV_TIME_ESTADO:= TRUNC(MONTHS_BETWEEN (TO_DATE(PN_FecPro,'YYYYMMDD'), TO_DATE(IN_REC.IN_FECMORA,'yyyy-mm-dd')  ));
                            END IF;
                            VV_ESTADO_AGREGADO:= 'MNC';
                      END;

                     IF VV_TIME_ESTADO > 200 THEN
                         VV_TIME_ESTADO:=200;
                        END IF;

                      BEGIN
                        SELECT nvl(ELBE,99),nvl(LGD_IN_DEFAULT,99)
                          INTO  VV_LGD_BE,VV_LGD_WORST
                          FROM BAS_MEN.MAESTRO_NP_UNSEC_LGD
                         WHERE ESTADO_AGR  = VV_ESTADO_AGREGADO
                           AND TIME_ESTADO = VV_TIME_ESTADO;
                      EXCEPTION
                         WHEN NO_DATA_FOUND THEN
                             VV_LGD_BE   :=99;
                             VV_LGD_WORST:=99;
                         WHEN OTHERS THEN
                             VV_LGD_BE   :=99;
                             VV_LGD_WORST:=99;
                      END;

                END CASE;
        
                --KAT 18/07/2022 HDEV-182069 Informar campo C_TYPE_GUARANTEE
                IF VV_CLASIFICACION = 'SEC' THEN
                   VN_C_TYPE_GUARANTEE := 5;
                ELSE 
                   IF IN_REC.OR_PROCED = 'EFECTES' OR (in_rec.or_proced = 'FACTORING' and IN_REC.OR_CLUNICUENT = 999999999999999) THEN
                      VN_C_TYPE_GUARANTEE := 1;
                   ELSIF in_rec.or_proced = 'FACTORING' and (IN_REC.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR IN_REC.ENTFAC<>9999) THEN
                      VN_C_TYPE_GUARANTEE := 1;
                   ELSE
                      IF VV_TIP_GAR = 'EXP' THEN 
                        VN_C_TYPE_GUARANTEE := 1;
                      ELSIF VV_TIP_GAR = 'LEASNOIN' THEN
                        VN_C_TYPE_GUARANTEE := 6;
                      ELSIF VV_TIP_GAR IN ('D','D2') THEN 
                        VN_C_TYPE_GUARANTEE := 4;
                      ELSE
                        VN_C_TYPE_GUARANTEE := 0;
                      END IF;
                      
                   END IF;
                      
                END IF;
                --KAT 18/07/2022 HDEV-182069 Informar campo C_TYPE_GUARANTEE
                
                VN_NUMERR:=17;
                -- vv_Es_Mora_Subjetiva := 'N';
                /* RMR 06/05/2020 Inicio - Cambiamos la llamada a la funciÃ³n de la mora subjetiva para soportar la nueva DoD*/
                -- vv_Es_Mora_Subjetiva :=SF_Es_Mora_Subjetiva ( IN_REC.OR_IDSITUAC, IN_REC.OR_SITCON, IN_REC.TIPODEFAULT, SW_MARCA_DEFAULT );
          END;
          VN_NUMERR:=18;

         END IF;
     
    
         VN_NUMERR:=19;
         VV_LGD         := VV_LGD_WORST;--EL LGD CALCULADO
         VN_LGD_LONGRUN := VV_LGD_WORST;

         -- Si la fecha de alta de Bloqueo no esta informada y no es mora subjetiva se asignará el máximo tramo. 201609
        VN_NUMERR:=20;
         IF IN_REC.OR_FECALTBLO IN ( '?', '0001-01-01')  THEN
            BEGIN
              VV_EDAD := 30;     --EDAD en meses.
              VV_FECHAMORA := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(PN_FECPRO ,'YYYYMMDD'),-30), 'YYYYMMDD'));
            END;
          ELSE
            BEGIN
              VV_EDAD := ceil((MONTHS_BETWEEN(TO_DATE(PN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.OR_FECALTBLO, 'YYYY-MM-DD'))));     --EDAD en meses.
              VV_FECHAMORA := to_number(TO_char(TO_DATE(IN_REC.OR_FECALTBLO, 'YYYY-MM-DD'), 'YYYYMMDD'));
            END;
          END IF;
             VN_NUMERR:=21;
         IF NVL(IN_REC.OR_FECTAS,0) > 19000101 AND IN_REC.OR_FECTAS <> 99999999    THEN
         VV_FECTAS := substr(IN_REC.OR_FECTAS,1,6);
         ELSE
          IF IN_REC.OR_FECOPE < 19000101 THEN
          VV_FECTAS := 190001;
          ELSE
            VV_FECTAS := substr(IN_REC.OR_FECOPE,1,6);
          END IF;
         END IF;
       VN_NUMERR:=22;

         ---------------------------------------------------- Datos Fin LGD Mora  ----------------------------------------------------------------
         ----------------------------------------------------------------------------------------------------------------------------
         -- Asignación de Curva - Segmento AIRB
         ----------------------------------------------------------------------------------------------------------------------------

         -- JCVJCVJCV 201403 Modificaciones Obtención de la Curva (Segmento AIRB)
         -- Se añaden 2 nuevas categorizaciones:
         -- Grandes EEFF y Entes financieros no regulados
         --    Asignación de Curva:
         --       Para Grandes EEFF 'Emp/Sob/EEFF-CC'
         --       Para el Resto:
         --              Para SEGMBS1 '?' --> 'Emp/Sob/EEFF'
         --              Para SEGMBS1 500 --> 'SME-CC'
         --              Para SEGMBS1 501 --> Como antes
         -- Nueva Asignación de Curva de Tarjetas para CCAA.
         -- Se llevarán a la curva de renovables admisibles, las exposiciones en tarjetas de comercios y autónomos no garantizadas y
         -- cuyo importe total del acreditado sea < 100000.
         --

         VN_NUMERR:=23;

         Vv_In_Activo_Cons_GEF  := 0; -- Ojo aqui no se ha de tener en cuenta el Activo_Cons del Maestro de Ventas

              IF IN_REC.IN_SEGMBSINI IN ('007', '018', '021', '028', '029') THEN --EEFF
                  -- Ojo por ahora no se utiliza el ACTIVO_CONS de BASILEA_INI sino de las tablas Activo_consolidado_EEFF y Maestro_Matriz_Filial_EEFF y
                  BEGIN
                      SELECT distinct ActCon.ACTIVO_CONSOLIDADO
                        INTO Vv_In_Activo_Cons_GEF
                        FROM BAS_MEN.MAESTRO_MATRIZ_FILIAL_EEFF Matriz
                           , BAS_MEN.ACTIVO_CONSOLIDADO_EEFF    ActCon
                  --SMG 24/09-I MODIFICACIÓN PARA UTILIZAR EL ULTIMATE PARENT
                  --   WHERE Matriz.BICGRUPO = ActCon.BIC
                       WHERE Matriz.ULTIMATE_PARENT = ActCon.BIC
                  --SMG 24/09-F MODIFICACIÓN PARA UTILIZAR EL ULTIMATE PARENT
                         AND Matriz.BICBANCO = IN_REC.Or_Codigo_BIC;
                  EXCEPTION
                      WHEN OTHERS THEN
                          Vv_In_Activo_Cons_GEF  := 0;
                  END;
              END IF;
          VN_NUMERR:=24;
         V_Es_Gran_EEFF       := 'N';
         V_Es_Gran_EEFF_COREP := 'N';
         --
         -- EN principio no haría falta comprobar lo de > 70.000 M de eur ya que todos los que estan en la tabla de Activo lo son.
         --
         VN_NUMERR:=25;
         IF ( NVL(Vv_In_Activo_Cons_GEF,0) > 70000 ) THEN
            v_Es_Gran_EEFF_COREP   := 'S';     -- Para COREP es suficiente que sea > 70000
                   IF IN_REC.IN_SegmBSIni IN ('007', '034') THEN
                      v_Es_Gran_EEFF      := 'S';  -- Para AIRB adicionalmente han de ser de los segmentos 7 o 34.
                   END IF;
         END IF;
        VN_NUMERR:=26;

         v_Es_Ente_No_Regulado := 'N';

         VN_NUMERR:=27;

         begin
             SELECT case when REGULADA_SN = 'NO' then 'S' else 'N' end
               INTO v_Es_Ente_No_Regulado
               FROM BAS_MEN.MAESTRO_RESEGMENTACION_BDE SegBE
                  , BAS_MEN.MAESTRO_SECTOR_NO_REGULADA SNoReg
              WHERE SegBE.OR_NIFCIF  = IN_REC.Or_NIFCIF
                AND SNoReg.OR_SECTOR = SegBE.SECTOR;
         exception
             WHEN OTHERS THEN
                BEGIN
                 SELECT DISTINCT('S')
                   INTO v_Es_Ente_No_Regulado
                   FROM BAS_MEN.MAESTRO_PERSONALIDADES PNoReg
                  WHERE PNoReg.OR_PERSON  = IN_REC.Or_Person
                    and PNoReg.REGULADA='NO';
                EXCEPTION
                   WHEN OTHERS THEN
                    v_Es_Ente_No_Regulado := 'N';
                END;

         end;
         VN_NUMERR:=28;

        VV_Entidad_Ente := 0;

        VN_NUMERR:=29;

        IF IN_REC.IN_SRATIN      = 'CEDM' THEN
           VV_Entidad_Ente := 0;
        ELSIF v_Es_Gran_EEFF_COREP  = 'S' THEN
           VV_Entidad_Ente := 1;
        ELSIF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SegmBSIni NOT IN ('007', '034') THEN
            VV_Entidad_Ente := 2;
        ELSE
           VV_Entidad_Ente := 0 ;
        END IF;

        VN_NUMERR:=30;
        VV_In_SegAIRB  := '?';

        -- Nuevos Requerimientos GRANDES EEFF y ENTES NO REGULADOS
        -- Grandes EEFF
        -- 201406 - 20140724 Segmentos que no se deberían tratar en el cambio de correlación como XXX o 030. Para fijar un criterio estable,
        --                   proponemos que unicamente puedan cambiar de correlación  segmentos de empresas o EEFF, excepto Cédulas multicedentes
        --                   (Las calculadas según método IRB, se identifican por el SRATIN CEDM y no se cambian de curva. Para el método Estándar,
        --                    dado que no hay IN_SRATIN, se deberían excluir del cambio de curva las exposiciones con segmbsini 034 cuyo CIF empiece con V.
        --                   )
        VN_NUMERR:=31;
         IF  IN_REC.IN_SegmBSIni IN ( '003', '005', '006', '009', '010', '019', '020', '027' -- Empresas
                                        , '007', '018', '021', '028', '029', '034'                -- EEFF
                       )
                     AND NOT (IN_REC.IN_SegmBSIni =  '034' AND SUBSTR(IN_REC.Or_NIFCIF, 1, 1) = 'V')  -- De las EEFF se excluyen las Cédulas multicedentes
         THEN
           IF v_Es_Gran_EEFF = 'S' AND IN_REC.IN_SRATIN <> 'CEDM' THEN
               VV_In_SegAIRB:= 'Emp/Sob/EEFF-CC';
           -- Entes no Regulados
           ELSIF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SRATIN <> 'CEDM' THEN
               VN_NUMERR := 32;
               IF IN_REC.In_SegmBS1  = '?' THEN
                VV_In_SegAIRB := 'Emp/Sob/EEFF-CC';
               ELSIF IN_REC.In_SegmBS1 = '500' THEN
                VV_In_SegAIRB := 'SME-CC';
               ELSE
                VV_In_SegAIRB  := '?'; --Como hasta ahora
               END IF;
               VN_NUMERR:=33;
           END IF;

         END IF;
         VN_NUMERR:=34;

         IF VV_In_SegAIRB = '?'  THEN
          IF IN_REC.In_SegmBS0 <> '202' AND IN_REC.In_SegmBSIni NOT IN ('003','005','006','009','010','019','027') THEN--,'002','017') THEN
            VN_NUMERR:=35;
            BEGIN
                 SELECT IN_SEGAIRB
                   INTO VV_In_SegAIRB
                   FROM BAS_MEN.MAESTRO_SEGMENTOS
                  WHERE IN_SEGBS = IN_REC.In_SegmBS
                    AND ROWNUM = 1;
            EXCEPTION
                 WHEN OTHERS THEN
                  VV_In_SegAIRB:= '?';
            END;
            VN_NUMERR:=36;

           ELSE
             VN_NUMERR:=37;
             IF IN_REC.In_SegmBSIni IN ('003','005','006','009','010','019','027') THEN
              IF IN_REC.In_SegmBS1 = '500' AND IN_REC.Or_NIFCIF <> '777018707659' THEN /* FMRR - 04/01/2022 - HDEV-102956? (requerimiento especificado por email)- clientes con nif 777018707659 no deben tener factor de apoyo*/
                VV_In_SegAIRB := 'SME';
              ELSIF IN_REC.In_SegmBS1 = '501' THEN
                VV_In_SegAIRB := 'Otro Retail';
              ELSIF IN_REC.In_SegmBS1 = '?' OR IN_REC.Or_NIFCIF = '777018707659' THEN /* FMRR - 04/01/2022 - HDEV-102956? (requerimiento especificado por email)- clientes con nif 777018707659 no deben tener factor de apoyo*/
                VV_In_SegAIRB := 'Emp/Sob/EEFF';
              END IF;
              VN_NUMERR:=38;
             ELSIF IN_REC.In_SegmBSIni IN ('002','017') THEN
                             IF IN_REC.In_SegmBS1 = '500' THEN
                                 VV_In_SegAIRB := 'SME';
                             ELSE
                                 VV_In_SegAIRB := 'Otro Retail';
                             END IF;
             ELSE
                            VN_NUMERR:= 223;
                            BEGIN
                                 SELECT IN_SEGAIRB
                                   INTO VV_In_SegAIRB
                                   FROM BAS_MEN.MAESTRO_SEGMENTOS
                                  WHERE IN_SEGMBSINI = IN_REC.In_SegmBSIni
                                    AND ROWNUM = 1;
                            EXCEPTION
                                 WHEN OTHERS THEN
                                         VV_In_SegAIRB:= '?';
                            END;
             END IF;
          END IF;
         VN_NUMERR:=39;
         END IF;

         VN_NUMERR:=40;
         --Se Busca si el tipo de finca es inmueble.
         BEGIN
          SELECT INMUEBLE
            INTO VV_Inmueble
            FROM BAS_MEN.MAESTRO_FINCA_INMOBILIARIA
           WHERE TIPOFI = IN_REC.Or_TipOfi;
         EXCEPTION
           WHEN OTHERS THEN
              VV_Inmueble := 'NO';
         END;

         VN_NUMERR:=41;

  --             --Garantías pignoraticias van a la curva de OTRO RETAIL. xcg 01/08/11.
              IF IN_REC.In_SegmBSIni = '103' AND IN_REC.Codgar_Pignoraticia = '?' THEN
                  vv_In_SegmBS3   := '070';
                  VV_In_SegAIRB   := 'Préstamos Hipotecarios';
              ELSIF IN_REC.In_SegmBSIni = '103' THEN
                    VV_In_SegAIRB := 'Otro Retail';
              END IF;

         VN_NUMERR:=42;
         -- Curva de Prestamos hipotecarios:
         -- Segmentos 104, 101, 102 y 501, con garantía hipotecaría, tipo de finca inmueble y que no sean Garantías pignoraticias.
         -- Se incluye el ini '106' junto con el '104', '101', '102' y '501' para la curva de préstamos hipotecarios -- 201403
              IF ( IN_REC.In_SegmBSIni IN ('104','101','102', '106') OR IN_REC.In_SegmBS1 = '501')
                  AND IN_REC.Or_TipGar IN ('HC','HV','HR','HX')
                  AND VV_Inmueble = 'INMUEBLE'
                  AND IN_REC.Codgar_Pignoraticia = '?' THEN
                     VV_In_SegAIRB  := 'Préstamos Hipotecarios';
                     vv_In_SegmBS3  := '070';
              END IF;

         -- JCVJCVJCV 201403 Nueva Asignación de Curva de Tarjetas para CCAA.
              IF ( IN_REC.In_SegmBSIni  IN ('101', '102')
                 AND ( IN_REC.Or_TipOpe = 'TC' OR (SUBSTR(IN_REC.Or_Proced,1,4) = 'TARG' AND IN_REC.Or_TipOpe = '?' ))
                 AND IN_REC.Garantizada = 'NO'
                 AND IN_REC.Importe_Total   < 100000
                 ) THEN
                     VV_In_SegAIRB  := 'Tarjetas Crédito';
              END IF;



         ----------------------------------------------------------------------------------------------------------------------------
         -- Ajuste de Tamaño (ATAMAIRB)
         ----------------------------------------------------------------------------------------------------------------------------

         -- JCVJCVJCV 201403 Modificaciones Obtención del Ajuste de Tamaño
         --  El ajuste de tamaño se  realizará a través de las ventas del grupo consolidado (manteniendose los umbrales entre 5 y 50 Mill)
         -- siempre que estas seán un indicador significativo ( no nulas(99) o <> 0), sino para holdings, promoters o patrimoniales
         -- se tomará el Activo Consolidado.
         -- NOTA: Para determinar si ventas del grupo consolidado son indicador significativo se utilizarán las ventas del grupo
         -- consolidado originales (MAESTRO_VENTAS) ya que en este punto ya se han aplicado ventas medias.
         -- Se añade Tratamiento SME--CC
         VN_NUMERR:=43;
         VV_In_Activo_Cons := vv_In_Activo_Cons_GEF;

         VN_NUMERR:=44;
         IF Vv_In_Activo_Cons = 0 THEN
          IF IN_REC.In_Activo_Cons IS NOT NULL THEN
            Vv_In_Activo_Cons := IN_REC.In_Activo_Cons;
          ELSE
            Vv_In_Activo_Cons := IN_REC.In_Activo;
          END IF;
         END IF;

         VN_NUMERR:=45;

         IF VV_IN_SEGAIRB IN ('SME', 'SME-CC') THEN
          -- 201706 se añade tratamiento de SMS que sean HOLDINGS, PROMOTORES o PATRIMONIALES (Si las vtas son 0 [OJO las originales, antes de ventas medias] se utilizara el Activo cons)
          IF NVL(IN_REC.VENTAS_CON,0) IN (0, 99) AND ( IN_REC.OR_INDHOLDING IN ('1', '3', '4') OR  IN_REC.In_SegmBS2 = '020' ) THEN
            VN_FI_ATAMAIRB:= NVL(Vv_In_Activo_Cons,0)/1000000;
          ELSE
            VN_FI_ATAMAIRB:= IN_REC.IN_VTAGRU_CONS/1000000;
          END IF;
           -- Uumbrales actuales (entre 5 y 50 millones).
          IF    VN_FI_ATAMAIRB < 5  THEN VN_FI_ATAMAIRB:= 5;
          ELSIF VN_FI_ATAMAIRB > 50 THEN VN_FI_ATAMAIRB:= 50;
          --ELSE Se queda con el valor obtenido;
          END IF;
         END IF;

         VN_NUMERR:=46;
         ----------------------------------------------------------------------------------------------------------------------------
         -- MATURITY
         ----------------------------------------------------------------------------------------------------------------------------

         -- JCVJCVJCV 201403 Modificaciones Obtención de la Maturity
         -- Se aplicará Maturity de 1 dia a:
         --   - Derivados con contrapartidas con las que se tengan firmados acuerdos de compensación:
         --        Todas las EEFF + las contrapartidas del fichero CMOF y que tengan firmados CSA's que liquiden diariamente.
         --   - Créditos Documentarios (Procedencia 'ES-NEGDOC' o TipOpe 'CD').
         --   - Otras operativas a muy corto plazo identificadas en el maestro MAESTRO_TIPOPE_PROCEDENCIA cargado de SAS.

         VN_NUMERR:=47;

         IF VN_OR_VIDRES <= 0 THEN
          VN_FI_MATAIRB:= 1;
         ELSIF VN_OR_VIDRES = 99999999 THEN

         VN_NUMERR:=48;
             IF IN_REC.OR_FECVTO <= PN_FECPRO AND IN_REC.OR_FECVTO > 19000000 THEN -- 29/07/13 (menor o igual)
              VN_FI_MATAIRB:= 1;
             ELSIF IN_REC.OR_PROCED IN ('ABONODXECS', 'COBRAMENTS',  'CS-LLOGUER',  'ES-FINAN', 'INT-XECS', 'INV-C/C-CR',
                          'INV-C/C-EX', 'REBUT-DOM', 'TARGES', 'TR-MASIVAS') THEN
              VN_FI_MATAIRB:= 1; -- Sólo llevamos al 1 a las procedencias indicadas, las demás tendrán una maturity de 2,5. XCG 3/01/08.
             ELSIF IN_REC.OR_TIPOPE IN ( 'DC') THEN -- Descubiertos  maturity 1.
               VN_FI_MATAIRB:= 1;
             ELSE
              VN_FI_MATAIRB:= 2.5; --> avales tienen 2.5, xcg, 3/4/13.

                 VN_NUMERR:=49;
             END IF;
         ELSIF VN_OR_VIDRES/365 > 5 THEN
             VN_FI_MATAIRB:= 5;
         ELSE
             IF IN_REC.FI_TIPEXP = 'Repos' THEN

                 VN_NUMERR:=50;
              IF IN_REC.IN_TIPOREG IN ('RN','ITRN','MMRN') THEN         -- ALLA 12/07/2016 Debido a los requisitos solicitados con el cálculo de la EAD para repos
              VN_FI_MATAIRB:= GREATEST(5/365,VN_OR_VIDRES/365);-- ALLA            se hace que el mínimo sea 5 días (sólo se incluyen en BASILEA los repos con acuerdos de compensación)
                                          -- ALLA            los repos incluidos en BASILEA, anteriores a la modificación siguen conservando maturity de 0.5
              ELSE
              VN_FI_MATAIRB:= GREATEST(0.5,VN_OR_VIDRES/365);
              END IF;

                 VN_NUMERR:=51;
             ELSE
              VN_FI_MATAIRB:= GREATEST(1,VN_OR_VIDRES/365);
             END IF;
         END IF;

         VN_NUMERR:=52;

         IF IN_REC.FI_TIPEXP = 'Repos' AND VN_FI_MATAIRB = 1 AND VN_OR_VIDRES <> 365 THEN
          VN_FI_MATAIRB:= 0.5;
         END IF;

         VN_NUMERR:=53;
         IF IN_REC.IN_SEGMBS0 = '201' THEN --Project Finance
          IF IN_REC.OR_VIDRES <= 0 THEN
             VN_FI_MATAIRB:= 1;
          ELSIF IN_REC.OR_VIDRES = 99999999 THEN
              VN_FI_MATAIRB:= 2.5;
          ELSIF IN_REC.OR_VIDRES/365 > 5 THEN
              VN_FI_MATAIRB:= 5;
          ELSE
             VN_FI_MATAIRB:= GREATEST(1,IN_REC.OR_VIDRES/365);
          END IF;

         VN_NUMERR:=54;

              -- 09/10/2018 Se elimina este tratamiento en el cálculo de la maturity de Project Finance
              /*
          IF VN_FI_MATAIRB < 2.5 THEN
             VN_FI_MATAIRB := 0;
          ELSE
             VN_FI_MATAIRB := 1;
          END IF;
              */

          VN_OR_VIDRES := IN_REC.OR_VIDRES;

         VN_NUMERR:=55;
         ELSIF IN_REC.in_segmbs0 = '202' THEN --Derechos de Cobro

             IF VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999) THEN
              VN_FI_MATAIRB:= (90/365);
             ELSE
              VN_FI_MATAIRB:= VN_OR_VIDRES/365;
             END IF;

         VN_NUMERR:=56;
             IF VN_FI_MATAIRB > 5 THEN
              VN_FI_MATAIRB:= 5;
             END IF;

         VN_NUMERR:=57;
         END IF;

         VN_NUMERR:=58;

         -- JCVJCVJCV 201403 Obtención de si existe en maestro TIPOOPE PROCEDENCIA
         v_En_TipOpe_Proced     := 'N';

         VN_NUMERR:=59;
         BEGIN
          SELECT DISTINCT 'S'
            INTO v_En_TipOpe_Proced
            FROM BAS_MEN.MAESTRO_TIPOPE_PROCEDENCIA
           WHERE OR_TIPOPE = IN_REC.Or_TipOpe
             AND OR_PROCED = IN_REC.Or_Proced;
         EXCEPTION
          WHEN OTHERS THEN
            v_En_TipOpe_Proced := 'N';
         END;

         VN_NUMERR:=60;

         -- JCVJCVJCV 201403 Obtención de la periodicidad del maestro CSA ORIG ya que este incluye los CSA¿s que nosotros aportamos a otras entidades
         -- 201409 - 20141021 Se añade la obtención del maestro MAESTRO_BIC_CSA para identificar las contrapartidas con CSA.
         v_PerLiq_CSA := 0;

         VN_NUMERR:=61;
         BEGIN
           SELECT distinct Periodicidad
             INTO v_PerLiq_CSA
             FROM
              ( SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                  FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                     , BAS_MEN.MAESTRO_BIC_CSA  MBic
                 WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                   AND MBic.BICS_TRATADOS = IN_REC.Or_Codigo_BIC
                 --
                 UNION
                 --
                SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                  FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                 WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_Codigo_BIC
              );

         VN_NUMERR:=62;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
           BEGIN
           SELECT distinct Periodicidad
             INTO v_PerLiq_CSA FROM
             (
             SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
               FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                  , BAS_MEN.MAESTRO_BIC_CSA  MBic
              WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                AND MBic.BICS_TRATADOS = IN_REC.Or_NIFCIF
             UNION
             SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
               FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
              WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_NIFCIF
              );

                VN_NUMERR:=63;
           EXCEPTION
             WHEN NO_DATA_FOUND THEN
             BEGIN
               SELECT distinct Periodicidad
                 INTO v_PerLiq_CSA FROM
                 (
                SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                  FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                     , BAS_MEN.MAESTRO_BIC_CSA  MBic
                 WHERE MBic.BIC_MAESTRO   = MCsa.OR_CODIGO_BIC
                   AND MBic.BICS_TRATADOS = IN_REC.Or_NIFCIFIBM
                 UNION
                SELECT NVL(MCsa.PERIODICIDAD,1) AS Periodicidad
                  FROM BAS_MEN.MAESTRO_CSA_ORIG MCsa
                 WHERE MCsa.OR_CODIGO_BIC = IN_REC.Or_NIFCIFIBM
                );

            VN_NUMERR:=64;
             EXCEPTION
               WHEN OTHERS THEN
                 v_PerLiq_CSA := 0;
             END;
           END;
         END;

         VN_NUMERR:=65;

         -- Para Derivados con contrapartidas con las que se tengan firmados acuerdos de compensación se utilizará la periodicidad
         -- del Maestro CSA (si no es nula o 0) Si maturity minima 1 año, calculamos las nueva
         -- JCVJCVJCV 201403 26 de Mayo de 2014 - Se cambian los criterios con que se encuente en el fichero de CSA sera condición suficiente
         -- JCVJCVJCV 201406 21 de Julio de 2014 - Se cambian los criterios : Que sea un Derivado (OTC o DERIVA*)
         --                                         y que sea de una EEFF o que este en fichero CMOF. Y además este en el Maestro_CSA

         VN_NUMERR:=66;
         IF ( IN_REC.Fi_TipExp = 'OTC' OR SUBSTR(IN_REC.OR_PROCED,1,6) = 'DERIVA' )
           -- AND ( IN_REC.In_SegmBSIni IN ('007','018','021','028','029','034', '003', '005', '006', '009', '010', '019', '027','031')
               -- JOM 201512 No es necesario acceder al maestro CMOF en el AIRB
            --  OR  v_En_Fichero_CMOF = 'S'
            --  )
           -- )
          AND  v_PerLiq_CSA <> 0 THEN

            IF VN_Fi_MatAIRB = 1 OR VN_OR_VIDRES = 99999999 THEN

         VN_NUMERR:=67;
             IF VN_OR_VIDRES = 99999999 THEN
              VN_Fi_MatAIRB := v_PerLiq_CSA/365;
             ELSE
              VN_Fi_MatAIRB := GREATEST(v_PerLiq_CSA,VN_OR_VIDRES)/365;
             END IF;
            END IF;

         VN_NUMERR:=68;

         -- Para Créditos Documentarios (Procedencia 'ES-NEGDOC' o TipOpe 'CD')  Maturity de 1 dia Si maturity minima 1 año
         ELSIF  ( IN_REC.Or_Proced = 'ES-NEGDOC' OR IN_REC.Or_TipOpe = 'CD' ) AND IN_REC.In_SegmBS0 <> '201' THEN

           /* 29/10/2021 RMR | Arreglo de los ES-NEGDOC para que la VIDRES se calcule igual que 'ES-FINAN' */
           --IF ( IN_REC.In_SegmBS0 = '202' AND (VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999)) ) OR  VN_Fi_MatAIRB = 1 THEN
           IF ( IN_REC.In_SegmBS0 = '202' AND (VN_OR_VIDRES < 90 OR VN_OR_VIDRES IN (0, 99999999)) ) OR  VN_Fi_MatAIRB = 1 OR IN_REC.OR_PROCED = 'ES-NEGDOC' THEN

            VN_NUMERR:=69;
               IF VN_OR_VIDRES = 99999999 THEN
                VN_Fi_MatAIRB := 1/365;
               ELSE
                VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
               END IF;

           END IF;

         VN_NUMERR:=70;

         -- Operativas del Maestro TipOpe Procedencia
         ELSIF  v_En_TipOpe_Proced = 'S' AND IN_REC.In_SegmBS0 <> '201' THEN

            IF VN_Fi_MatAIRB = 1 OR VN_OR_VIDRES = 99999999 THEN
               IF VN_OR_VIDRES = 99999999 THEN
                VN_Fi_MatAIRB := 1/365;
               ELSE
                VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
               END IF;
            END IF;

         VN_NUMERR:=71;
  --             ELSIF IN_REC.IN_SEGMBSINI IN ('007','018','021','028','029','034') AND IN_REC.Or_Proced NOT IN ('ES-FINAN','ES-NEGDOC') THEN /* RMR 20/08/2021 - Añadimos AND para que no entren ES-FINAN y ES-NEGDOC */
  --
  --                 --Maturity EEFF
  --                 IF IN_REC.FI_TIPEXP = 'Repos' THEN
  --                    --INI ALLA -- PARA REPOS, para los repos existentes antes del cálculo de la ead de repos, la maturity es 0.5
  --                    --                        para los repos sobre los que se ha calculado la ead (repos con acuerdo), la maturiry valdrá 5 días salvo para los que tengan CSA que tomará valor 1 día
  --                    --VN_FI_MATAIRB:= 0.5;
  --                    IF IN_REC.IN_TIPOREG IN ('MMRN','RN','ITRN') THEN
  --                      IF v_PerLiq_CSA <> 0 THEN
  --                        VN_FI_MATAIRB:= GREATEST(1/365,IN_REC.OR_VIDRES/365);
  --                      ELSE
  --                        VN_FI_MATAIRB:= GREATEST(5/365,IN_REC.OR_VIDRES/365);
  --                      END IF;
  --                    ELSE
  --
  --                     VN_FI_MATAIRB:= 0.5;
  --                    END IF;
  --                    -- FIN ALLA
  --                 ELSE
  --                       VN_FI_MATAIRB:= 2.5;
  --                 END IF;
         VN_NUMERR:=72;
         ELSIF IN_REC.FI_TIPEXP = 'Repos' AND IN_REC.IN_TIPOREG IN ('REN','RN','ITRN') AND v_PerLiq_CSA <> 0 THEN --ALLA 13/07/2016  En el caso de repos, si existe CSA, la maturity valdrá como mínimo 1
          VN_FI_MATAIRB:= GREATEST(1/365,IN_REC.OR_VIDRES/365);

        /* RMR 20/08/2021 - Operativas en las que se permite un floor de 1 día para el cálculo de la maturity*/
      --   ELSIF IN_REC.Or_Proced IN ('ES-FINAN','ES-NEGDOC', 'FACTORING', 'EFECTES', 'CONFIRMING', 'FORFAITING') THEN
      --       IF VN_OR_VIDRES = 99999999 THEN
      --            VN_Fi_MatAIRB := 1/365;
      --       ELSE
      --            VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
      --       END IF;
        /* RMR 20/08/2021 - Dejamos únicamente el cambio para ES-FINAN y ES-NEGDOC */
         VN_NUMERR:=73;
         ELSIF IN_REC.Or_Proced IN ('ES-FINAN','ES-NEGDOC') THEN
           IF VN_OR_VIDRES = 99999999 THEN
              VN_Fi_MatAIRB := 1/365;
           ELSE
              VN_Fi_MatAIRB := GREATEST(1,VN_OR_VIDRES)/365;
           END IF;


         END IF;

         VN_NUMERR:=74;
         -- Modificacion de calculo de Maturity para Ofex ( 23/12/19 )  TAR-256

      --   IF  IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'PX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX'  THEN

         VN_NUMERR:=75;
         IF ( IN_REC.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX') OR substr(IN_REC.or_proced ,1,4) = 'OFEX' ) and ( IN_REC.IN_SEGMBS0 <> '201' ) THEN

            IF IN_REC.FI_TIPEXP = 'Repos' THEN
               VN_FI_MATAIRB:= 0.5;
            ELSE
               VN_FI_MATAIRB:= 2.5;
            END IF;

         END IF;

         VN_NUMERR:=76;

         IF VN_Or_Vidres < 0 THEN
          VN_Or_Vidres:= 0;
         END IF; -- Vida residual negativa, la dejamos a 0. XCG, 05/08/11.

         VN_NUMERR:=77;
         --26/03 - Tratamiento de depósitos interbancarios - Cálculo IRB
          IF IN_REC.FI_EPICON IN ('010010301010100000000000000000', '010010301010203000000000000000','010010302010100000000000000000',
                      '010010302010203000000000000000','010010100000000000000000000000') THEN
           VV_IN_SEGAIRB := 'Otros Activos';
           VV_LGD    := 0;
           VV_LGD_BE := 0;
           VV_LGD_WORST := 0;
           VN_LGD_LONGRUN := 0;
           VV_LGD_NOMORA := 0;
          END IF;
          
          VN_NUMERR:=78;
          
          /* 27/01/2022 - NAV - HDEV-106661 - IMPLEMENTACION LGD LONG RUNG -  Cuando LGD long run (LGDLR en la BDD) sea mayor a la LGD asignada (FI_LGDAIRB) se sobreescriba esta última con el valor de la Long RUN */
          IF VN_LGD_LONGRUN > VV_LGD THEN
             VV_LGD := VN_LGD_LONGRUN;
          END IF;

         OUT_REC.OR_IDREG                := IN_REC.OR_IDREG;
         OUT_REC.ESTATUS                 := VV_ESTATUS;
         OUT_REC.CLASIFICACION           := VV_CLASIFICACION;
         OUT_REC.ID_GRUPO_HIPOTECARIO    := VV_ID_GRUPO_HIPOTECARIO;
         OUT_REC.IN_SEGMBSINI            := IN_REC.IN_SEGMBSINI;
         OUT_REC.OR_SEGFIC2              := IN_REC.OR_SEGFIC2;
         OUT_REC.IN_INDMOR             := IN_REC.IN_INDMOR;
         OUT_REC.IN_SRATIN               := IN_REC.IN_SRATIN;
         OUT_REC.OR_CODGAR             := IN_REC.OR_CODGAR;
         OUT_REC.ENTFAC                := IN_REC.ENTFAC;
         OUT_REC.IN_SEGMBS             := IN_REC.IN_SEGMBS;
         OUT_REC.OR_PROCED             := IN_REC.OR_PROCED;
         OUT_REC.OR_TIPOBJETO            := IN_REC.OR_TIPOBJETO;
         OUT_REC.FI_EADAIRB              := IN_REC.FI_EADAIRB;
         OUT_REC.FI_EADCONAIRB           := IN_REC.FI_EADCONAIRB;
         OUT_REC.FI_CCFAIRB              := IN_REC.FI_CCFAIRB;
         OUT_REC.FI_LGDNOMORA            := VV_LGD_NOMORA;
         OUT_REC.FI_LGDAIRB              := VV_LGD;
         OUT_REC.FI_LGDLR                := VN_LGD_LONGRUN;
         OUT_REC.FI_LGDBE                := VV_LGD_BE;
         OUT_REC.FI_LGDWORST             := VV_LGD_WORST;
         OUT_REC.FI_LGDLRNOMORA          := VV_FI_LGDLRNOMORA;
         OUT_REC.FI_IMPLTV               := VV_FI_IMPLTV;
         OUT_REC.FI_VIDRES               := VN_OR_VIDRES;
         OUT_REC.IN_SEGAIRB              := VV_IN_SEGAIRB;
         OUT_REC.FI_MATAIRB              := VN_FI_MATAIRB;
         OUT_REC.FI_ATAMAIRB             := VN_FI_ATAMAIRB;
         OUT_REC.IN_ACTIVO_CONS          := VV_In_Activo_Cons;
         OUT_REC.ENTIDAD_ENTE            := VV_ENTIDAD_ENTE;
         OUT_REC.C_TYPE_GUARANTEE        := VN_C_TYPE_GUARANTEE;
         OUT_REC.FI_TIPO_GARANTIA        := VV_TIPO;
         OUT_REC.FI_TIPO_GARANTIA_NOMORA := VV_TIPO_NOMORA;
         OUT_REC.FI_LGD_PROC             := VV_LGD_PROC;
         OUT_REC.FI_LGD_HIP              := VV_LGD_HIP;
         OUT_REC.OR_IDMES                := IN_REC.OR_IDMES;
         OUT_REC.IN_FECHAMORA            := VV_FECHAMORA;
         OUT_REC.IN_FECTAS               := VV_FECTAS;
         OUT_REC.IN_EDAD                 := VV_EDAD; -- 30/10/2019 RMR - PeticiÃ³n de Encarni, necesita la edad de la LGD morosa.
         OUT_REC.GAR_HIP                 := VV_GAR_HIP;
         OUT_REC.TIP_GAR                 := VV_TIP_GAR;
         OUT_REC.PROMOTOR                := VV_PROMOTOR;
         OUT_REC.LTV                     := VV_LTV;
         OUT_REC.ESTADO_AGREGADO         := VV_ESTADO_AGREGADO;
         OUT_REC.TIPO                    := VV_TIPO;
         OUT_REC.TIME_ESTADO             := VV_TIME_ESTADO;
         OUT_REC.LGD_BE                  := VV_LGD_BE;
         OUT_REC.LGD_WORST               := VV_LGD_WORST;

         pipe row(Out_Rec);

    END LOOP;

 EXCEPTION
   WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VN_OR_IDREG||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));

END F_CALCULO_LGD_NO_PERF_EMP;
----------------------------------------------------------------------------------------

PROCEDURE  PROC_CALCULO_LGD (PN_FecPro IN NUMBER) IS
 VV_Proces                   BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT 'PROC_CALCULO_LGD';
 VV_Proces1                  BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT ' LGD_AUX_1 NO EMPRESAS';
 VV_Proces2                  BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT ' LGD_AUX_2 EMPRESAS PE';
 VV_Proces3                  BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT ' LGD_AUX_3 EMPRESAS NP';
 VV_Proces4                  BAS_MEN.CONTROL_PROCES.PROCES%TYPE  DEFAULT ' FUSION FINAL';
 VV_RETORNO                  VARCHAR2(2)                         DEFAULT 'OK';--Estado proceso
 ERR_REAL                    VARCHAR2(4000);
 VV_MENSAJE                  VARCHAR2(255);
 --FLA
     V_COUNT INTEGER;

VN_NUMERR NUMBER(2);
VV_Proces_ERR                  BAS_MEN.CONTROL_PROCES.PROCES%TYPE ;
M_ERROR EXCEPTION;

BEGIN
   VN_NUMERR:=1;
   INSERT INTO BAS_MEN.control_proces (PROCES, DATA_INI, ESTAT)
   VALUES (VV_Proces, SYSDATE, 'INICIADO');
   COMMIT;

   VN_NUMERR:=2;
   INSERT INTO BAS_MEN.control_proces (PROCES, DATA_INI, ESTAT)
   VALUES (VV_Proces||VV_Proces1, SYSDATE, 'INICIADO');
   COMMIT;

   VN_NUMERR:=3;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_LGD_AUX_1');

      INSERT /*+ PARALLEL (X 8) */ INTO BAS_MEN.BASILEA_AIRB_LGD_AUX_1 X
       ( X.OR_IDREG,X.FI_EADAIRB , X.FI_EADCONAIRB , X.FI_CCFAIRB, X.FI_LGDNOMORA, X.FI_LGDAIRB , X.FI_LGDLR ,X.FI_LGDBE ,
         X.FI_LGDWORST,X.FI_LGDLRNOMORA, X.FI_IMPLTV,X.FI_VIDRES, X.IN_SEGAIRB,X.FI_MATAIRB ,X.FI_ATAMAIRB, X.IN_ACTIVO_CONS ,
         X.ENTIDAD_ENTE ,X.C_TYPE_GUARANTEE ,X.FI_TIPO_GARANTIA , X.FI_TIPO_GARANTIA_NOMORA, X.FI_LGD_PROC , X.FI_LGD_HIP,
         X.OR_IDMES ,X.IN_FECHAMORA,  X.IN_FECTAS , X.IN_EDAD )
    SELECT /*+ PARALLEL(CUR,4) */ CUR.OR_IDREG,CUR.FI_EADAIRB , CUR.FI_EADCONAIRB , CUR.FI_CCFAIRB, CUR.FI_LGDNOMORA, CUR.FI_LGDAIRB , CUR.FI_LGDLR ,CUR.FI_LGDBE ,
               CUR.FI_LGDWORST,CUR.FI_LGDLRNOMORA, CUR.FI_IMPLTV,CUR.FI_VIDRES, CUR.IN_SEGAIRB,CUR.FI_MATAIRB ,CUR.FI_ATAMAIRB, CUR.IN_ACTIVO_CONS ,
               CUR.ENTIDAD_ENTE ,CUR.C_TYPE_GUARANTEE ,CUR.FI_TIPO_GARANTIA , CUR.FI_TIPO_GARANTIA_NOMORA, CUR.FI_LGD_PROC , CUR.FI_LGD_HIP,
               CUR.OR_IDMES ,CUR.IN_FECHAMORA,  CUR.IN_FECTAS , CUR.IN_EDAD
      from table(BAS_MEN.CALCULO_LGD.F_CALCULO_LGD_ANT ( CURSOR(SELECT
                OR_IDREG,IN_SEGMBSINI,OR_CODGAR,OR_SEGGES,OR_TIPOFI,IN_SEGMBS,IN_VTAGRU_CONS,OR_VIDRES,IN_SUCEPT,FI_TIPEXP,OR_FECVTO,OR_NIFCIF
        ,IN_SEGMBS0,OR_NUMOFI,OR_FECCAR,IMPLTVEMP,IMPLTV,IMPLTVEMPMOR,IMPLTVMOR,IN_SEG_HIP,FI_CCFAIRB,CODGAR_PIGNORATICIA,OR_RATINT
        ,IN_TIPOREG,EAD,IN_FECMORA,OR_CODPRODO,OR_CTACLI,OR_TIPOPE,OR_PERSON,OR_PERSONSCPCB,OR_TIPOBJETO,OR_SEGFIC,CONSTRUCCION,IN_SEGMBS1
        ,IN_SEGMBS2,EDAD,OR_CLUNIPROD,OR_PROCED,OR_CTAIND,OR_TITULARITAT,OR_REFOPE,IN_INDMOR,OR_ENTITY,OR_IDSITUAC,OR_CLUNIENT,OR_CLUNICONTR,OR_TIPGAR
        ,IN_SRATIN,OR_CLUNICUENT,SEG_HIP_AUX,OR_FECOPE,OR_FECDEU,OR_FECALTBLO,IN_PRESTPERCENT,OR_INDHOLDING,FI_EADAIRB,FI_EADCONAIRB,OR_SITCON
        ,OR_CODIGO_BIC,IMPORTE_TOTAL,VENTAS_CON,IN_ACTIVO_CONS,IN_ACTIVO,OR_TIPIDE,OR_SEGFIC2,OR_NIFCIFIBM,IN_EXISTENCIAS,IN_VTAGRU,IN_ACTIVO_CIR,GARANTIZADA,IN_REFINAN,ENTFAC,OR_IDMES,OR_FECTAS
        ,IN_FECTAS_CONC,FI_EPICON,TIPODEFAULT,RIESGO_CORR_ADVERSA,OR_VALTAS,VALOR_PIGNORATICIAS,TOTAL_VALOR_NETO_TOT_COND,FI_ELIMI1,ID_GRUPO_HIPOTECARIO,ESTATUS, OR_VIDRESBAS
             FROM BAS_MEN.VISTA_CALCULO_LGD A
             WHERE (IN_SEGMBSINI NOT IN ('003', '005', '006', '009', '010', '019', '027') OR (IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
             AND (SUBSTR(OR_SEGFIC2,1,2)  IN ('GR', 'E5', 'P5') OR  OR_SEGFIC2  in ('PA005', 'NC5DS', 'NC5R', 'NC5'))))
           ), PN_FECPRO)) CUR;
    COMMIT;

      VN_NUMERR:= 4;

      dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_LGD_AUX_1', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 1 );

      -- Cerramos el log del proceso
      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT       = 'FINALIZADO',
             DATA_FIN    = SYSDATE,
             FINALITZAT  =VV_RETORNO--,
             -- ERROR_PROG ='Tiempo total:'||v_tiempo
       WHERE PROCES  = VV_Proces||VV_Proces1
         AND ESTAT   = 'INICIADO';
      COMMIT;

      VN_NUMERR:= 5;

     INSERT INTO BAS_MEN.control_proces (PROCES, DATA_INI, ESTAT)
     VALUES (VV_Proces||VV_Proces2, SYSDATE, 'INICIADO');
     COMMIT;

     VN_NUMERR:= 5;

     BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_LGD_AUX_2');
     VN_NUMERR:= 6;

     INSERT /*+ PARALLEL (X,8) */ INTO BAS_MEN.BASILEA_AIRB_LGD_AUX_2 X
     (X.OR_IDREG,X.ESTATUS,X.CLASIFICACION,X.ID_GRUPO_HIPOTECARIO,X.IN_SEGMBSINI,X.OR_SEGFIC2,X.IN_INDMOR,X.IN_SRATIN,X.OR_CODGAR,X.ENTFAC,
      X.IN_SEGMBS,X.OR_PROCED,X.OR_TIPOBJETO,X.IN_SEGAIRB,X.FI_ATAMAIRB,X.FI_CCFAIRB,X.FI_LGDAIRB,X.FI_EADAIRB,X.FI_EADCONAIRB,
      X.FI_MATAIRB,X.FI_LGDNOMORA,X.FI_LGDWORST,X.FI_LGDBE,X.FI_VIDRES,X.FI_IMPLTV,X.FI_LGDLRNOMORA,X.IN_ACTIVO_CONS,X.ENTIDAD_ENTE,
      X.C_TYPE_GUARANTEE,X.FI_TIPO_GARANTIA,X.FI_TIPO_GARANTIA_NOMORA,X.FI_LGD_PROC,X.FI_LGD_HIP,X.OR_IDMES,X.IN_FECHAMORA,
      X.IN_FECTAS,X.IN_EDAD,X.FI_PD_COREPS,X.GAR_HIP,X.TIP_GAR,X.PROMOTOR,X.TIPO,X.TIPO_COLATERAL,X.ID_BIEN,X.VALOR_BIEN_TOT,
      X.CODPOSTAL,X.CODPOBLACI,X.D_WR_INE,X.CODINE_TEMP0,X.SEGMENTO_ABCD,X.LTV,X.VALOR_PIGNORATICIAS,X.TOTAL_VALOR_NETO_TOT_COND,
      X.VALOR_TASACION,X.EADCONAIRB_CONTRATO,X.MATURITY_MES,X.LETRA,
      X.LEGAL_FRAMEWORK,X.LEASMOB,X.EADCONAIRB_TITULARITAT,X.FI_LGD,X.FI_LGDLR)
        SELECT /*+ PARALLEL(CUR,4) */ CUR.OR_IDREG,CUR.ESTATUS,CUR.CLASIFICACION,CUR.ID_GRUPO_HIPOTECARIO,CUR.IN_SEGMBSINI,CUR.OR_SEGFIC2,CUR.IN_INDMOR,CUR.IN_SRATIN,CUR.OR_CODGAR,CUR.ENTFAC,
         CUR.IN_SEGMBS,CUR.OR_PROCED,CUR.OR_TIPOBJETO,CUR.IN_SEGAIRB,CUR.FI_ATAMAIRB,CUR.FI_CCFAIRB,CUR.FI_LGDAIRB,CUR.FI_EADAIRB,CUR.FI_EADCONAIRB,
         CUR.FI_MATAIRB,CUR.FI_LGDNOMORA,CUR.FI_LGDWORST,CUR.FI_LGDBE,CUR.FI_VIDRES,CUR.FI_IMPLTV,CUR.FI_LGDLRNOMORA,CUR.IN_ACTIVO_CONS,CUR.ENTIDAD_ENTE,
         CUR.C_TYPE_GUARANTEE,CUR.FI_TIPO_GARANTIA,CUR.FI_TIPO_GARANTIA_NOMORA,CUR.FI_LGD_PROC,CUR.FI_LGD_HIP,CUR.OR_IDMES,CUR.IN_FECHAMORA,
         CUR.IN_FECTAS,CUR.IN_EDAD,CUR.FI_PD_COREPS,CUR.GAR_HIP,CUR.TIP_GAR,CUR.PROMOTOR,CUR.TIPO,CUR.TIPO_COLATERAL,CUR.ID_BIEN,CUR.VALOR_BIEN_TOT,
         CUR.CODPOSTAL,CUR.CODPOBLACI,CUR.D_WR_INE,CUR.CODINE_TEMP0,CUR.SEGMENTO_ABCD,CUR.LTV,CUR.VALOR_PIGNORATICIAS,CUR.TOTAL_VALOR_NETO_TOT_COND,
         CUR.VALOR_TASACION,CUR.EADCONAIRB_CONTRATO,CUR.MATURITY_MES,CUR.LETRA,
         CUR.LEGAL_FRAMEWORK,CUR.LEASMOB,CUR.EADCONAIRB_TITULARITAT,CUR.FI_LGD,CUR.FI_LGDLR
          from table(BAS_MEN.CALCULO_LGD.F_CALCULO_LGD_PERF_EMP( CURSOR( SELECT
             OR_IDREG,IN_SEGMBSINI,OR_CODGAR,OR_SEGGES,OR_TIPOFI,IN_SEGMBS,IN_VTAGRU_CONS,OR_VIDRES,IN_SUCEPT,FI_TIPEXP,OR_FECVTO,OR_NIFCIF
            ,IN_SEGMBS0,OR_NUMOFI,OR_FECCAR,IMPLTVEMP,IMPLTV,IMPLTVEMPMOR,IMPLTVMOR,IN_SEG_HIP,FI_CCFAIRB,CODGAR_PIGNORATICIA,OR_RATINT
            ,IN_TIPOREG,EAD,IN_FECMORA,OR_CODPRODO,OR_CTACLI,OR_TIPOPE,OR_PERSON,OR_PERSONSCPCB,OR_TIPOBJETO,OR_SEGFIC,CONSTRUCCION,IN_SEGMBS1
            ,IN_SEGMBS2,EDAD,OR_CLUNIPROD,OR_PROCED,OR_CTAIND,OR_TITULARITAT,OR_REFOPE,IN_INDMOR,OR_ENTITY,OR_IDSITUAC,OR_CLUNIENT,OR_CLUNICONTR,OR_TIPGAR
            ,IN_SRATIN,OR_CLUNICUENT,SEG_HIP_AUX,OR_FECOPE,OR_FECDEU,OR_FECALTBLO,IN_PRESTPERCENT,OR_INDHOLDING,FI_EADAIRB,FI_EADCONAIRB,OR_SITCON
            ,OR_CODIGO_BIC,IMPORTE_TOTAL,VENTAS_CON,IN_ACTIVO_CONS,IN_ACTIVO,OR_TIPIDE,OR_SEGFIC2,OR_NIFCIFIBM,IN_EXISTENCIAS,IN_VTAGRU,IN_ACTIVO_CIR,GARANTIZADA,IN_REFINAN,ENTFAC,OR_IDMES,OR_FECTAS
            ,IN_FECTAS_CONC,FI_EPICON,TIPODEFAULT,RIESGO_CORR_ADVERSA,OR_VALTAS,VALOR_PIGNORATICIAS,TOTAL_VALOR_NETO_TOT_COND,FI_ELIMI1,B.ID_GRUPO_HIPOTECARIO, ESTATUS, OR_VIDRESBAS--'PE' ESTATUS
            FROM BAS_MEN.VISTA_CALCULO_LGD A
            LEFT JOIN (SELECT
                                        CASE WHEN  H.CANTIDAD = 1 AND H.CANTIDAD_HIP = 1 THEN H.ID_GRUPO_HIPOTECARIO
                                             ELSE NULL
                                             END  ID_GRUPO_HIPOTECARIO
                                        FROM (
                                        SELECT  ID_GRUPO_HIPOTECARIO , count(DISTINCT B.ESTATUS )  AS CANTIDAD, count(DISTINCT B.CLASIFICACION )  AS CANTIDAD_HIP
                                          FROM  BAS_MEN.GRP_HIPOTECARIO_ESTATUS B
                                         GROUP BY B.ID_GRUPO_HIPOTECARIO
                                             ) H)  B
                        ON(A.ID_GRUPO_HIPOTECARIO = B.ID_GRUPO_HIPOTECARIO)
                        WHERE A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
                        AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND  OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
                        AND (A.IN_INDMOR NOT IN ('SI','CT') AND A.IN_SRATIN<>'BLQRM')
                ), PN_FECPRO)) CUR;


   COMMIT;

   VN_NUMERR:= 7;

   dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_LGD_AUX_2', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 2 );

   -- Cerramos el log del proceso
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT       = 'FINALIZADO',
         DATA_FIN    = SYSDATE,
         FINALITZAT  =VV_RETORNO--,
         -- ERROR_PROG ='Tiempo total:'||v_tiempo
   WHERE PROCES  = VV_Proces||VV_Proces2
     AND ESTAT   = 'INICIADO';
   COMMIT;

   VN_NUMERR:=8;
   INSERT INTO BAS_MEN.control_proces (PROCES, DATA_INI, ESTAT)
   VALUES (VV_Proces||VV_Proces3, SYSDATE, 'INICIADO');
   COMMIT;


  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_LGD_AUX_3');

  VN_NUMERR:=9;

  INSERT /*+ PARALLEL (X 8) */ INTO BAS_MEN.BASILEA_AIRB_LGD_AUX_3 X
      (X.OR_IDREG,X.ESTATUS,X.CLASIFICACION,X.ID_GRUPO_HIPOTECARIO,X.IN_SEGMBSINI,X.OR_SEGFIC2,X.IN_INDMOR,
             X.IN_SRATIN, X.OR_CODGAR, X.ENTFAC,X.IN_SEGMBS,X.OR_PROCED,X.OR_TIPOBJETO,X.IN_SEGAIRB,X.FI_ATAMAIRB,X.FI_CCFAIRB,
             X.FI_LGDAIRB,X.FI_EADAIRB,X.FI_EADCONAIRB,X.FI_MATAIRB,X.FI_LGDNOMORA,X.FI_LGDWORST,X.FI_LGDBE,X.FI_LGDLR,X.FI_VIDRES,X.FI_IMPLTV,
             X.FI_LGDLRNOMORA,X.IN_ACTIVO_CONS,X.ENTIDAD_ENTE,X.C_TYPE_GUARANTEE,X.FI_TIPO_GARANTIA,X.FI_TIPO_GARANTIA_NOMORA,X.FI_LGD_PROC,X.FI_LGD_HIP,
             X.OR_IDMES,X.IN_FECHAMORA,X.IN_FECTAS,X.IN_EDAD,X.GAR_HIP,X.TIP_GAR,X.PROMOTOR,X.LTV,X.ESTADO_AGREGADO,X.TIPO,X.TIME_ESTADO ,
              X.LGD_BE,X.LGD_WORST  )
        SELECT /*+ PARALLEL(CUR,4) */ CUR.OR_IDREG,CUR.ESTATUS,CUR.CLASIFICACION,CUR.ID_GRUPO_HIPOTECARIO,CUR.IN_SEGMBSINI,CUR.OR_SEGFIC2,CUR.IN_INDMOR,
               CUR.IN_SRATIN, CUR.OR_CODGAR, CUR.ENTFAC,CUR.IN_SEGMBS,CUR.OR_PROCED,CUR.OR_TIPOBJETO,CUR.IN_SEGAIRB,CUR.FI_ATAMAIRB,CUR.FI_CCFAIRB,
               CUR.FI_LGDAIRB,CUR.FI_EADAIRB,CUR.FI_EADCONAIRB,CUR.FI_MATAIRB,CUR.FI_LGDNOMORA,CUR.FI_LGDWORST,CUR.FI_LGDBE,CUR.FI_LGDLR,CUR.FI_VIDRES,CUR.FI_IMPLTV,
               CUR.FI_LGDLRNOMORA,CUR.IN_ACTIVO_CONS,CUR.ENTIDAD_ENTE,CUR.C_TYPE_GUARANTEE,CUR.FI_TIPO_GARANTIA,CUR.FI_TIPO_GARANTIA_NOMORA,CUR.FI_LGD_PROC,CUR.FI_LGD_HIP,
               CUR.OR_IDMES,CUR.IN_FECHAMORA,CUR.IN_FECTAS,CUR.IN_EDAD,CUR.GAR_HIP,CUR.TIP_GAR,CUR.PROMOTOR,CUR.LTV,CUR.ESTADO_AGREGADO,CUR.TIPO,CUR.TIME_ESTADO ,
                CUR.LGD_BE,CUR.LGD_WORST
         from table(BAS_MEN.CALCULO_LGD.F_CALCULO_LGD_NO_PERF_EMP( CURSOR( SELECT
                              OR_IDREG,IN_SEGMBSINI,OR_CODGAR,OR_SEGGES,OR_TIPOFI,IN_SEGMBS,IN_VTAGRU_CONS,OR_VIDRES,IN_SUCEPT,FI_TIPEXP,OR_FECVTO,OR_NIFCIF
                             ,IN_SEGMBS0,OR_NUMOFI,OR_FECCAR,IMPLTVEMP,IMPLTV,IMPLTVEMPMOR,IMPLTVMOR,IN_SEG_HIP,FI_CCFAIRB,CODGAR_PIGNORATICIA,OR_RATINT
                             ,IN_TIPOREG,EAD,IN_FECMORA,OR_CODPRODO,OR_CTACLI,OR_TIPOPE,OR_PERSON,OR_PERSONSCPCB,OR_TIPOBJETO,OR_SEGFIC,CONSTRUCCION,IN_SEGMBS1
                             ,IN_SEGMBS2,EDAD,OR_CLUNIPROD,OR_PROCED,OR_CTAIND,OR_TITULARITAT,OR_REFOPE,IN_INDMOR,OR_ENTITY,OR_IDSITUAC,OR_CLUNIENT,OR_CLUNICONTR,OR_TIPGAR
                             ,IN_SRATIN,OR_CLUNICUENT,SEG_HIP_AUX,OR_FECOPE,OR_FECDEU,OR_FECALTBLO,IN_PRESTPERCENT,OR_INDHOLDING,FI_EADAIRB,FI_EADCONAIRB,OR_SITCON
                             ,OR_CODIGO_BIC,IMPORTE_TOTAL,VENTAS_CON,IN_ACTIVO_CONS,IN_ACTIVO,OR_TIPIDE,OR_SEGFIC2,OR_NIFCIFIBM,IN_EXISTENCIAS,IN_VTAGRU,IN_ACTIVO_CIR,GARANTIZADA,IN_REFINAN,ENTFAC,OR_IDMES,OR_FECTAS
                             ,IN_FECTAS_CONC,FI_EPICON,TIPODEFAULT,RIESGO_CORR_ADVERSA,OR_VALTAS,VALOR_PIGNORATICIAS,TOTAL_VALOR_NETO_TOT_COND,FI_ELIMI1,B.ID_GRUPO_HIPOTECARIO,ESTATUS, OR_VIDRESBAS--'NP' ESTATUS
                        FROM BAS_MEN.VISTA_CALCULO_LGD A
                        LEFT JOIN (SELECT
                                        CASE WHEN  H.CANTIDAD = 1 AND H.CANTIDAD_HIP = 1 THEN H.ID_GRUPO_HIPOTECARIO
                                             ELSE NULL
                                         END  ID_GRUPO_HIPOTECARIO
                                     FROM ( SELECT ID_GRUPO_HIPOTECARIO , count(DISTINCT ESTATUS ) AS CANTIDAD, count(DISTINCT CLASIFICACION ) AS CANTIDAD_HIP
                                              FROM BAS_MEN.GRP_HIPOTECARIO_ESTATUS
                                             GROUP BY ID_GRUPO_HIPOTECARIO
                                          ) H
                                    )  B
                        ON(A.ID_GRUPO_HIPOTECARIO = B.ID_GRUPO_HIPOTECARIO)
                        WHERE IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')--EMPRESAS
                          AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND  OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
                          AND (IN_INDMOR IN ('SI','CT') OR IN_SRATIN='BLQRM')
                              ), PN_FECPRO)) CUR;

     COMMIT;

   VN_NUMERR:= 10;

   dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_LGD_AUX_3', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 2 );

   -- Cerramos el log del proceso
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT       = 'FINALIZADO',
         DATA_FIN    = SYSDATE,
         FINALITZAT  =VV_RETORNO
   WHERE PROCES  = VV_Proces||VV_Proces3
     AND ESTAT   = 'INICIADO';
     COMMIT;


------------------------------------------------

  --VN_NUMERR:=11;
  INSERT INTO BAS_MEN.control_proces (PROCES, DATA_INI, ESTAT)
  VALUES (VV_Proces||VV_Proces4, SYSDATE, 'INICIADO');
  COMMIT;


  VN_NUMERR:=12;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_LGD');
 --inserta en la BAS_MEN.BASILEA_AIRB_LGD fusionando AUX1 + AUX2 + AUX3
  VN_NUMERR:=13;

  INSERT/*+ PARALLEL (X 8) */ INTO BAS_MEN.BASILEA_AIRB_LGD X(X.OR_IDREG,X.IN_SEGAIRB,X.FI_ATAMAIRB,X.FI_CCFAIRB,X.FI_LGDAIRB,X.FI_EADAIRB,X.FI_EADCONAIRB,X.FI_MATAIRB,
                                                               X.FI_LGDNOMORA,X.FI_LGDWORST,X.FI_LGDBE,X.FI_LGDLR,X.FI_VIDRES,X.FI_IMPLTV,X.FI_LGDLRNOMORA,X.IN_ACTIVO_CONS,
                                                               X.ENTIDAD_ENTE,X.C_TYPE_GUARANTEE,X.FI_TIPO_GARANTIA,X.FI_TIPO_GARANTIA_NOMORA,X.FI_LGD_PROC,X.FI_LGD_HIP,
                                                               X.OR_IDMES,X.IN_FECHAMORA,X.IN_FECTAS,X.IN_EDAD
                                                             )
    SELECT /*+ parallel (B 8) */ B.OR_IDREG,B.IN_SEGAIRB,B.FI_ATAMAIRB,B.FI_CCFAIRB,B.FI_LGDAIRB,B.FI_EADAIRB,B.FI_EADCONAIRB,B.FI_MATAIRB,
                                B.FI_LGDNOMORA,B.FI_LGDWORST,B.FI_LGDBE,B.FI_LGDLR,B.FI_VIDRES,B.FI_IMPLTV,B.FI_LGDLRNOMORA,B.IN_ACTIVO_CONS,
                                B.ENTIDAD_ENTE,B.C_TYPE_GUARANTEE,B.FI_TIPO_GARANTIA,B.FI_TIPO_GARANTIA_NOMORA,B.FI_LGD_PROC,B.FI_LGD_HIP,
                                B.OR_IDMES,B.IN_FECHAMORA,B.IN_FECTAS,B.IN_EDAD
      FROM
        (SELECT /*+ parallel (A 8) */A.OR_IDREG,A.IN_SEGAIRB,A.FI_ATAMAIRB,A.FI_CCFAIRB,A.FI_LGDAIRB,A.FI_EADAIRB,A.FI_EADCONAIRB,A.FI_MATAIRB,
                                    A.FI_LGDNOMORA,A.FI_LGDWORST,A.FI_LGDBE,A.FI_LGDLR,A.FI_VIDRES,A.FI_IMPLTV,A.FI_LGDLRNOMORA,A.IN_ACTIVO_CONS,
                                    A.ENTIDAD_ENTE,A.C_TYPE_GUARANTEE,A.FI_TIPO_GARANTIA,A.FI_TIPO_GARANTIA_NOMORA,A.FI_LGD_PROC,A.FI_LGD_HIP,
                                    A.OR_IDMES,A.IN_FECHAMORA,A.IN_FECTAS,A.IN_EDAD
                        FROM BAS_MEN.BASILEA_AIRB_LGD_AUX_1 A
     UNION
        SELECT /*+ parallel (A 8) */A.OR_IDREG,A.IN_SEGAIRB,A.FI_ATAMAIRB,A.FI_CCFAIRB,A.FI_LGDAIRB,A.FI_EADAIRB,A.FI_EADCONAIRB,A.FI_MATAIRB,
                                    A.FI_LGDNOMORA,A.FI_LGDWORST,A.FI_LGDBE,A.FI_LGDLR,A.FI_VIDRES,A.FI_IMPLTV,A.FI_LGDLRNOMORA,A.IN_ACTIVO_CONS,
                                    A.ENTIDAD_ENTE,A.C_TYPE_GUARANTEE,A.FI_TIPO_GARANTIA,A.FI_TIPO_GARANTIA_NOMORA,A.FI_LGD_PROC,A.FI_LGD_HIP,
                                    A.OR_IDMES,A.IN_FECHAMORA,A.IN_FECTAS,A.IN_EDAD
                        FROM BAS_MEN.BASILEA_AIRB_LGD_AUX_2 A
     UNION
        SELECT /*+ parallel (A 8) */A.OR_IDREG,A.IN_SEGAIRB,A.FI_ATAMAIRB,A.FI_CCFAIRB,A.FI_LGDAIRB,A.FI_EADAIRB,A.FI_EADCONAIRB,A.FI_MATAIRB,
                                    A.FI_LGDNOMORA,A.FI_LGDWORST,A.FI_LGDBE,A.FI_LGDLR,A.FI_VIDRES,A.FI_IMPLTV,A.FI_LGDLRNOMORA,A.IN_ACTIVO_CONS,
                                    A.ENTIDAD_ENTE,A.C_TYPE_GUARANTEE,A.FI_TIPO_GARANTIA,A.FI_TIPO_GARANTIA_NOMORA,A.FI_LGD_PROC,A.FI_LGD_HIP,
                                    A.OR_IDMES,A.IN_FECHAMORA,A.IN_FECTAS,A.IN_EDAD
                        FROM BAS_MEN.BASILEA_AIRB_LGD_AUX_3 A
        )B;
    COMMIT;

   dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_LGD', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

   VN_NUMERR:=14;

 -- Cerramos el log del proceso
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT       = 'FINALIZADO',
         DATA_FIN    = SYSDATE,
         FINALITZAT  =VV_RETORNO
   WHERE PROCES  = VV_Proces||VV_Proces4
     AND ESTAT   = 'INICIADO';
  COMMIT;

 -- Cerramos el log del proceso
  UPDATE BAS_MEN.CONTROL_PROCES
     SET ESTAT       = 'FINALIZADO',
         DATA_FIN    = SYSDATE,
         FINALITZAT  =VV_RETORNO
   WHERE PROCES  = VV_Proces
     AND ESTAT   = 'INICIADO';
  COMMIT;

EXCEPTION

   WHEN OTHERS THEN
       ERR_REAL      := DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        VV_Mensaje    := SUBSTR(SQLERRM || ' ** ' || ERR_REAL,1,4000);
        VV_RETORNO    := 'KO';

        --Informamos el error del proceso
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO',
               DATA_FIN    = SYSDATE,
               FINALITZAT  =  VV_RETORNO,
               ERROR_PROG  = VV_Mensaje,
               ERROR_ORAC  = SUBSTR(' ** NUMERR: '||VN_NUMERR,1,255),
               NUM_ERROR   = VN_NUMERR
         WHERE PROCES  in  (VV_Proces, VV_Proces1,VV_Proces2,VV_Proces3)
           AND ESTAT   = 'INICIADO';

        COMMIT;

        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000,SQLERRM || ' ' || ERR_REAL);
END;

end; -- Package

--FLA01 dejo espacio
/

show errors;

------------------------------ Package END -----------------------------


create or replace PROCEDURE BAS_MEN.METODO_AIRB_LGD ( PV_TABLA     IN  VARCHAR2
                                                    , PN_FECPRO    IN  NUMBER
                                                    , PV_RET       OUT VARCHAR2
                                                    )
IS

  --Variables locals
  VV_ROWID        VARCHAR2(12);
  VN_COUNT        NUMBER(9):=0;
  VN_NUMERR       NUMBER(3);
  VV_MENSAJE      VARCHAR2(255);
  VV_MENSAJE2     VARCHAR2(255);
  VV_RET          VARCHAR2(100);
  FALLO1          EXCEPTION;
  FALLO2          EXCEPTION;


-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Carga de Maestros y Tablas Axiliares
-----------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_Carga_Maestros_y_Auxiliares IS

  Cte_Subproceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := 'AIRB - SP_Carga_Maestros_y_Auxiliares '||PN_FECPRO;
  v_Error_Orac   BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE      DEFAULT ' ';
  v_Num_Error    BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE       DEFAULT 0;

BEGIN

    v_Num_Error := 50;
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES (Cte_Subproceso, SYSDATE, 'INICIADO');
    COMMIT;

  dbms_stats.gather_table_stats('BAS_MEN','CONTROL_PROCES', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 51;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_GARANTIA_EXP');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_LGD_BEWC');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_LGD_HIP');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TASACION_EDAD');
    --BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.INDICE_PRECIOS_DEFAULT');
    --    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_OPERACION_GARANTIA'); -- Agregamos nuevo maestro para operaciones 874, MR 03/07/2019
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERF_SEC_LGD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERF_UNSEC_LGD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERF_GDA_LGD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_NP_SEC_LGD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_NP_UNSEC_LGD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_NP_GDA_LGD');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.INDICE_PRECIOS_DEFAULT_NEW');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.L4_EQUIVALENCIA_CIF'); -- Nuevos calibrados 202206
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_ZONA_GEOG_ABCD_201911'); -- Nuevos calibrados 202206

    v_Num_Error := 52;
    INSERT INTO BAS_MEN.MAESTRO_GARANTIA_EXP                   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_GARANTIA_EXP_SAS    ;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_LGD_BEWC                       SELECT * FROM DCRPROP_MENSUAL.MAESTRO_LGD_BEWC_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_LGD_HIP                        SELECT * FROM DCRPROP_MENSUAL.MAESTRO_LGD_HIP_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO             SELECT * FROM DCRPROP_MENSUAL.MAESTRO_LGD_NO_HIPOTECARIO_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.TASACION_EDAD                          SELECT * FROM DCRPROP_MENSUAL.TASACION_EDAD_SAS;
  COMMIT;
    --INSERT INTO BAS_MEN.INDICE_PRECIOS_DEFAULT               SELECT * FROM DCRPROP_MENSUAL.INDICE_PRECIOS_DEFAULT_SAS; -- HDEV-107786 COMENTADA 02/05/2022
    INSERT INTO BAS_MEN.INDICE_PRECIOS_DEFAULT_NEW             SELECT * FROM DCRPROP_MENSUAL.INDICE_PRECIOS_DEFAULT_NEW_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.L4_EQUIVALENCIA_CIF                    SELECT * FROM DCRPROP_MENSUAL.L4_EQUIVALENCIA_CIF_SAS; -- Nuevos calibrados 202206
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_ZONA_GEOG_ABCD_201911          SELECT * FROM DCRPROP_MENSUAL.MAEST_ZONA_GEOG_ABCD_20191_SAS; -- Nuevos calibrados 202206
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_PERF_SEC_LGD                   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PERF_SEC_LGD_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_PERF_UNSEC_LGD                 SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PERF_UNSEC_LGD_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_PERF_GDA_LGD                   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PERF_GDA_LGD_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_NP_SEC_LGD                     SELECT * FROM DCRPROP_MENSUAL.MAESTRO_NP_SEC_LGD_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_NP_UNSEC_LGD                   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_NP_UNSEC_LGD_SAS;
  COMMIT;
    INSERT INTO BAS_MEN.MAESTRO_NP_GDA_LGD                     SELECT * FROM DCRPROP_MENSUAL.MAESTRO_NP_GDA_LGD_SAS;
  COMMIT;
    --    INSERT INTO BAS_MEN.MAESTRO_OPERACION_GARANTIA        SELECT * FROM DCRPROP_MENSUAL.MAESTRO_OPERACION_GARANTIA_SAS; -- Agregamos nuevo maestro para operaciones 874, MR 03/07/2019


   v_Num_Error := 54;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TIPGAR');

    INSERT INTO BAS_MEN.MAESTRO_TIPGAR          SELECT * FROM DCRPROP_MENSUAL.MAESTRO_TIPGAR_SAS;

    COMMIT;

    --
    --JCVJCVJCV 2014063 Carga de nuevos maestros para las nuevas categorizaciones: Grandes  EEFF y Entes financieros no regulados.
    --

    --BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_MATRIZ_FILIAL_EEFF');
    --BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.ACTIVO_CONSOLIDADO_EEFF');
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TIPOPE_PROCEDENCIA');
      BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_SECTOR_NO_REGULADA');
    -- BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PERSON_NO_REGULADA');

    --INSERT INTO BAS_MEN.MAESTRO_MATRIZ_FILIAL_EEFF   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_MATRIZ_FILIAL_EEFF_SAS;
    --INSERT INTO BAS_MEN.ACTIVO_CONSOLIDADO_EEFF      SELECT * FROM DCRPROP_MENSUAL.ACTIVO_CONSOLIDADO_EEFF_SAS;
    INSERT INTO BAS_MEN.MAESTRO_TIPOPE_PROCEDENCIA   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_TIPOPE_PROCEDENCIA_SAS;
    INSERT INTO BAS_MEN.MAESTRO_SECTOR_NO_REGULADA   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_SECTOR_NO_REGULADA_SAS;
    -- INSERT INTO BAS_MEN.MAESTRO_PERSON_NO_REGULADA   SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PERSON_NO_REGULADA_SAS;

    COMMIT;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.GARANTIAS_PIGNORATIVAS');
    INSERT INTO BAS_MEN.GARANTIAS_PIGNORATIVAS               SELECT * FROM DCRPROP_MENSUAL.GARANTIAS_PIGNORATIVAS_SAS  ;

    COMMIT;

    --
    -- Actualización de la tabla MAESTRO_SECTOR_NO_REGULADA ya que a veces trae '.' al final. Los eliminamos.
    --
    UPDATE BAS_MEN.MAESTRO_SECTOR_NO_REGULADA
       SET OR_SECTOR = SUBSTR(OR_SECTOR,1,LENGTH(OR_SECTOR)-1)||REPLACE(SUBSTR(OR_SECTOR,LENGTH(OR_SECTOR), LENGTH(OR_SECTOR)+1), '.','')
     WHERE OR_SECTOR <> SUBSTR(OR_SECTOR,1,LENGTH(OR_SECTOR)-1)||REPLACE(SUBSTR(OR_SECTOR,LENGTH(OR_SECTOR), LENGTH(OR_SECTOR)+1), '.','');

    COMMIT;

    v_Num_Error := 55;

    -- XCG, 25/03/14, se introduce el contrato
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TIT_REF_HIP');

    insert /*+ parallel (f 4)*/ into BAS_MEN.MAESTRO_TIT_REF_HIP f
    SELECT /*+ parallel (a 4)*/ DISTINCT OR_TITULARITAT, OR_REFOPE, OR_CLUNICONTR
      FROM BAS_MEN.BASILEA                 A
         , BAS_MEN.MAESTRO_TIPGAR B
     WHERE OR_CODGAR = GARANTIA
       AND TIPGAR = 'HIP'
       AND FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
       AND OR_TITULARITAT NOT IN (0,9)
       AND IN_TIPOREG NOT IN ('OXE', 'OX',  'MMOXE',  'ITOXE')
       AND OR_PROCED IN ('CR-SINDIC', 'INV-C/C-CO','INV-C/C-CR','INV-C/C-EX','PR-DISPONI'
                        , 'PRES-DIVIS','PR-MOROS', 'PR-PENDENT','PR-PERIOD','PR-VENCUTS','SINDICDIV',
                        'PR-CONTENC');

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_TIT_REF_HIP', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 56;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_OFEX_HIP');

    INSERT /*+ parallel (f 4)*/
      INTO BAS_MEN.MAESTRO_OFEX_HIP f
    SELECT /*+ full(a) parallel (a 4)*/ DISTINCT OR_CTACLI, OR_NUMOFI, OR_REFOPE
      FROM BAS_MEN.BASILEA        A
         , BAS_MEN.MAESTRO_TIPGAR B
     WHERE OR_CODGAR   = GARANTIA
       AND TIPGAR      = 'HIP'
       AND FI_ELIMI1  IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
       AND IN_TIPOREG IN ('OXE', 'OX',  'MMOXE',  'ITOXE')
       AND OR_TIPOPE  IN ('CR', 'PR');

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_OFEX_HIP', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 59;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITULARITAT_IMPORTE');

     INSERT /*+ parallel (f 4)*/
       INTO BAS_MEN.MAESTRO_TITULARITAT_IMPORTE f
     SELECT /*+ full(a) parallel (a 4)*/ OR_TITULARITAT, SUM(FI_EADAIRB)
       FROM BAS_MEN.BASILEA a
      WHERE FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS', 'TITACT2') /* 25/08/2021 - NAV - Añadimos TITACT2 para la suma de ead por cliente */
        AND OR_TITULARITAT NOT IN (0,9)
        AND IN_TIPOREG NOT IN ('OXE', 'OX',  'MMOXE',  'ITOXE')
      GROUP BY OR_TITULARITAT;

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_TITULARITAT_IMPORTE', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 60;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_OFEX_IMPORTE');

    INSERT /*+ parallel (f 4)*/
      INTO BAS_MEN.MAESTRO_OFEX_IMPORTE f
    SELECT /*+ full(a) parallel (a 4)*/ OR_CTACLI, OR_NUMOFI, SUM(FI_EADAIRB)
      FROM BAS_MEN.BASILEA a
     WHERE FI_ELIMI1  IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
       AND (IN_TIPOREG IN ('OXE', 'OX',  'ITOXE', 'MMOXE')
       or (substr(or_proced ,1,4) = 'OFEX' and in_tiporeg not in ('OXC', 'MMOXC', 'ITOXC')))
     GROUP BY OR_CTACLI, OR_NUMOFI;

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_OFEX_IMPORTE', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    --Maestro que guarda los diferentes tipos de indicador de hipotecas por operación. XCG, 7/08/08.

    v_Num_Error := 61;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TIPO_HIPOTECAS');

    INSERT /*+ parallel (f 4)*/
      INTO BAS_MEN.MAESTRO_TIPO_HIPOTECAS f
    SELECT /*+ full(a) parallel (a 4)*/ DISTINCT 0, A.IN_SEG_HIP, OR_TITULARITAT, OR_CLUNICONTR
      FROM BAS_MEN.BASILEA A
     WHERE a.IN_SEG_HIP IN ('S','P')
       AND a.FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS');

    COMMIT;

   dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_TIPO_HIPOTECAS', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

     /*HDEV-107786 CAMBIO (+) POR LEFT JOIN*/

    -- SELECT 0, IN_SEG_HIP, A.OR_TITULARITAT, A.OR_CLUNICONTR
      -- FROM (SELECT /*+ full(d) parallel (d 4)*/ DISTINCT 0, 'P' IN_SEG_HIP, OR_TITULARITAT, OR_CLUNICONTR
             -- FROM BAS_MEN.BASILEA d
             -- WHERE d.IN_SEG_HIP = 'N'
               -- AND d.FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
           -- ) A
           -- ,
           -- (SELECT /*+ full(c) parallel (c 4)*/ DISTINCT 0, OR_TITULARITAT, OR_CLUNICONTR
              -- FROM BAS_MEN.BASILEA c
             -- WHERE c.IN_SEG_HIP <> 'N'
               -- AND c.FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
           -- ) B
     -- WHERE A.OR_TITULARITAT = B.OR_TITULARITAT(+)
       -- AND A.OR_CLUNICONTR = B.OR_CLUNICONTR(+)
       -- AND B.OR_CLUNICONTR     IS NULL;

    INSERT /*+ parallel (f 4)*/
      INTO BAS_MEN.MAESTRO_TIPO_HIPOTECAS f
    SELECT 0, IN_SEG_HIP, A.OR_TITULARITAT, A.OR_CLUNICONTR
      FROM (SELECT /*+ full(d) parallel (d 4)*/ DISTINCT 0, 'P' IN_SEG_HIP, OR_TITULARITAT, OR_CLUNICONTR
              FROM BAS_MEN.BASILEA d
             WHERE d.IN_SEG_HIP = 'N'
               AND d.FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
           ) A


           LEFT JOIN (SELECT /*+ full(c) parallel (c 4)*/ DISTINCT 0, OR_TITULARITAT, OR_CLUNICONTR
              FROM BAS_MEN.BASILEA c
             WHERE c.IN_SEG_HIP <> 'N'
               AND c.FI_ELIMI1 IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
           ) B
           ON ( B.OR_TITULARITAT=A.OR_TITULARITAT
               AND B.OR_CLUNICONTR= A.OR_CLUNICONTR
               AND B.OR_CLUNICONTR     IS NULL

               );
     COMMIT;

    v_Num_Error := 62;
--    BDD.ORA_ADMIN.ANALIZAR_SEGMENTO('BAS_MEN','MAESTRO_TIPO_HIPOTECAS',NULL,1,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_TIPO_HIPOTECAS', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    v_Num_Error := 63;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PRESTAMOS_SEG_HIPOTECA');

    --No se tienen en cuenta los saldos de las garantías pignoraticias. XCG, 01/08/11
    INSERT /*+ parallel (f 4)*/
      INTO BAS_MEN.TEMP_PRESTAMOS_SEG_HIPOTECA f
    SELECT /*+ full(a) parallel (a 4)*/ DISTINCT A.OR_TITULARITAT, B.IN_SEG_HIP, OR_NUMFINREG, 0, 0 DISPTO, 0 EDAD, a.OR_CLUNICONTR
      FROM BAS_MEN.BASILEA A
           , (SELECT DISTINCT or_titularitat, 0, OR_CLUNICONTR, in_seg_hip
                from BAS_MEN.MAESTRO_TIPO_HIPOTECAS where IN_SEG_HIP = 'S') B
          -- , BAS_MEN.GARANTIAS_PIGNORATIVAS D se deja de calcular el dispuesto y la EDAD. XCG, 10/10/19
    WHERE /*A.OR_CODGAR        = D.CODGAR(+)
      AND */A.OR_TITULARITAT   = B.OR_TITULARITAT
      AND A.OR_CLUNICONTR    = B.OR_CLUNICONTR
      AND B.IN_SEG_HIP       = 'S'
      AND OR_NUMFINREG  NOT IN ('1','99999','999999','999999999999999','?')
      AND OR_NUMFINREG NOT LIKE '?%'
      AND FI_ELIMI1         IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
      AND OR_NUMFINREG  IS NOT NULL;

    COMMIT;

    v_Num_Error := 64;
--    BDD.ORA_ADMIN.ANALIZAR_SEGMENTO('BAS_MEN','TEMP_PRESTAMOS_SEG_HIPOTECA',NULL,1,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats('BAS_MEN','TEMP_PRESTAMOS_SEG_HIPOTECA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    v_Num_Error := 65;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PRESTAMOS_PRIM_HIPOTECA');

    --No se tienen en cuenta los saldos de las garantías pignoraticias. XCG, 01/08/11
    INSERT /*+ parallel (f 4)*/
      INTO BAS_MEN.TEMP_PRESTAMOS_PRIM_HIPOTECA f
    SELECT /*+ full(a) parallel (a 4)*/ Distinct A.OR_TITULARITAT, 'P', OR_NUMFINREG, 0, 0 DISPTO, 0 EDAD, a.OR_CLUNICONTR
      FROM BAS_MEN.BASILEA A
           , (SELECT DISTINCT or_titularitat, 0, in_seg_hip, OR_CLUNICONTR
                from BAS_MEN.MAESTRO_TIPO_HIPOTECAS where IN_SEG_HIP IN ('P', 'N')) B
           --, BAS_MEN.GARANTIAS_PIGNORATIVAS D se deja de calcular el dispuesto y la EDAD. XCG, 10/10/19
    WHERE /*A.OR_CODGAR         = D.CODGAR(+)
      AND */A.OR_TITULARITAT    = B.OR_TITULARITAT
      AND A.OR_CLUNICONTR    = B.OR_CLUNICONTR
      AND B.IN_SEG_HIP       IN ('P', 'N')
      AND OR_NUMFINREG   NOT IN ('1','99999','999999','999999999999999','?')
      AND OR_NUMFINREG NOT LIKE '?%'
      AND FI_ELIMI1          IN ('NO', 'BONTIT', 'SWATIT', 'CRSUB', 'LINLIQ', 'SRABS')
      AND OR_NUMFINREG   IS NOT NULL;

    COMMIT;

    v_Num_Error := 66;
--  BDD.ORA_ADMIN.ANALIZAR_SEGMENTO('BAS_MEN','TEMP_PRESTAMOS_PRIM_HIPOTECA',NULL,1,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats('BAS_MEN','TEMP_PRESTAMOS_PRIM_HIPOTECA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    v_Num_Error := 67;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TEMP_PRESTAMOS_PRIM_HIP_AUX');

    INSERT
      INTO BAS_MEN.TEMP_PRESTAMOS_PRIM_HIP_AUX
          (OR_TITULARITAT, OR_NUMFINREG, OR_CLUNICONTR)
    SELECT DISTINCT  OR_TITULARITAT, OR_NUMFINREG, OR_CLUNICONTR
      FROM BAS_MEN.TEMP_PRESTAMOS_PRIM_HIPOTECA
     WHERE (OR_TITULARITAT, OR_NUMFINREG) IN ( SELECT OR_TITULARITAT, OR_NUMFINREG
                                                 FROM BAS_MEN.TEMP_PRESTAMOS_PRIM_HIPOTECA
                                                GROUP BY OR_TITULARITAT, OR_NUMFINREG
                                               HAVING COUNT(*) > 1
                                             )
     GROUP BY OR_TITULARITAT, OR_NUMFINREG, OR_CLUNICONTR;

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','TEMP_PRESTAMOS_PRIM_HIP_AUX', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 68;


    DELETE BAS_MEN.TEMP_PRESTAMOS_PRIM_HIPOTECA
     WHERE (OR_TITULARITAT, OR_NUMFINREG) IN (SELECT OR_TITULARITAT, OR_NUMFINREG
                                                FROM BAS_MEN.TEMP_PRESTAMOS_PRIM_HIP_AUX
                                               GROUP BY OR_TITULARITAT, OR_NUMFINREG
                                              HAVING COUNT(*) > 1
                                             );

    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','TEMP_PRESTAMOS_PRIM_HIPOTECA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 69;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_TITULARITAT_HIPOTECA');

    COMMIT;

    INSERT
      INTO BAS_MEN.MAESTRO_TITULARITAT_HIPOTECA f
          (OR_TITULARITAT, IN_SEG_HIP, OR_NUMFINREG)
    SELECT DISTINCT A.OR_TITULARITAT, B.IN_SEG_HIP, A.OR_NUMFINREG
      FROM (SELECT S.OR_TITULARITAT, S.IN_SEG_HIP, S.OR_NUMFINREG
              FROM BAS_MEN.TEMP_PRESTAMOS_SEG_HIPOTECA S
                 , BAS_MEN.MAESTRO_TIPO_HIPOTECAS      C
             WHERE S.OR_TITULARITAT = C.OR_TITULARITAT
               AND C.IN_SEG_HIP     = S.IN_SEG_HIP
               AND S.OR_CLUNICONTR  = C.OR_CLUNICONTR
             GROUP BY S.OR_TITULARITAT, S.IN_SEG_HIP, S.OR_NUMFINREG
           ) A
           ,
           (SELECT S.OR_TITULARITAT, S.IN_SEG_HIP, S.OR_NUMFINREG
              FROM BAS_MEN.TEMP_PRESTAMOS_PRIM_HIPOTECA S
                 , BAS_MEN.MAESTRO_TIPO_HIPOTECAS       C
             WHERE S.OR_TITULARITAT = C.OR_TITULARITAT
               AND C.IN_SEG_HIP     = S.IN_SEG_HIP
               AND S.OR_CLUNICONTR  = C.OR_CLUNICONTR
             GROUP BY S.OR_TITULARITAT, S.IN_SEG_HIP, S.OR_NUMFINREG
           ) b
     WHERE A.OR_TITULARITAT = B.OR_TITULARITAT
       AND A.OR_NUMFINREG   = B.OR_NUMFINREG;

    COMMIT;

    v_Num_Error := 70;
    --BDD.ORA_ADMIN.ANALIZAR_SEGMENTO('BAS_MEN','MAESTRO_TITULARITAT_HIPOTECA',NULL,1,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_TITULARITAT_HIPOTECA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    v_Num_Error := 71;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MATURITY_DERECHOS_COBRO');

    INSERT
      INTO BAS_MEN.MATURITY_DERECHOS_COBRO
    SELECT OR_TITULARITAT
         , DECODE(SUM(FI_EADCONAIRB), 0, 0 , SUM((CASE WHEN OR_FECVTO <= PN_FECPRO THEN 90 ELSE OR_VIDRES END)*FI_EADCONAIRB)/SUM(FI_EADCONAIRB)) AS Vidres_Media
      FROM (SELECT /*+ FULL(A) parallel (a 4)*/ OR_TITULARITAT,OR_VIDRES,FI_EADCONAIRB,OR_FECVTO
             FROM BAS_MEN.BASILEA a
            WHERE IN_SEGMBS0 = '202' AND FI_ELIMI1 = 'NO' AND FI_TIPEXP = 'Drawn' AND OR_TITULARITAT NOT IN (0,9)
           )
     GROUP BY OR_TITULARITAT;

    COMMIT;

    v_Num_Error := 72;
    --BDD.ORA_ADMIN.ANALIZAR_SEGMENTO('BAS_MEN','MATURITY_DERECHOS_COBRO',NULL,1,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats('BAS_MEN','MATURITY_DERECHOS_COBRO', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    v_Num_Error := 73;
    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK'
     WHERE PROCES = Cte_Subproceso
       AND ESTAT  = 'INICIADO';

    COMMIT;

    --
    --JCVJCVJCV 2014063 Creaci¢n de un maestro con el importe total del acr¿ditado para la asiganci¢n de curva (segairb) de
    -- tarjetas para CCAA y del maestro a tratar en la curva de tarjetas ya que el importe es a nivel de acreditado (titularidad)
    -- y que la  tarjeta este garantizada es a nivel de Titularidad contrato
    --

    v_Num_Error := 81;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.IMPORTE_CURVA_TARJETAS_CCAA');

    INSERT /*+ parallel (i 4)*/
      INTO BAS_MEN.IMPORTE_CURVA_TARJETAS_CCAA i
    SELECT /*+ Parallel (Basi 4)*/ OR_TITULARITAT, SUM(OR_DISPTO + OR_DISBLE)
      FROM BAS_MEN.BASILEA Basi
     WHERE Basi.IN_SEGMBSINI IN ('101', '102')
       AND ( Basi.Or_Tipope = 'TC' OR (SUBSTR(Basi.Or_Proced,1,4) = 'TARG' AND Basi.OR_TIPOPE = '?' ))
       AND Basi.OR_CODGAR   IN ('FIC00500','EXC00100')
       AND Basi.FI_ELIMI1 = 'NO'
     GROUP BY Basi.OR_TITULARITAT
    HAVING SUM(Basi.OR_DISPTO + Basi.OR_DISBLE) < 100000;

     COMMIT;

   dbms_stats.gather_table_stats('BAS_MEN','IMPORTE_CURVA_TARJETAS_CCAA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );


    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.curva_tarjeta');

    insert into BAS_MEN.curva_tarjeta
    SELECT /*+ Parallel (BasiG 4)*/  DISTINCT BasiG.OR_CLUNICONTR
      FROM BAS_MEN.BASILEA                     BasiG
     WHERE BasiG.IN_SEGMBSINI   IN ('101', '102')
       AND ( BasiG.Or_Tipope    = 'TC' OR (SUBSTR(BasiG.Or_Proced,1,4) = 'TARG' AND BasiG.OR_TIPOPE = '?' ))
       AND BasiG.FI_ELIMI1      = 'NO'
       AND BasiG.OR_CODGAR NOT IN ('FIC00500','EXC00100');

   commit;

   dbms_stats.gather_table_stats('BAS_MEN','curva_tarjeta', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );


    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.DATOS_CURVA_TARJETAS_CCAA');

    INSERT /*+ Parallel (I 4)*/
      INTO  BAS_MEN.DATOS_CURVA_TARJETAS_CCAA I
    SELECT /*+ Parallel (Basi 4)*/  DISTINCT Basi.OR_TITULARITAT, Basi.OR_CLUNICONTR, ImpAcr.Importe_Total, 'NO' AS Garantizada
      FROM BAS_MEN.IMPORTE_CURVA_TARJETAS_CCAA ImpAcr
         , BAS_MEN.BASILEA          Basi
         LEFT JOIN BAS_MEN.curva_tarjeta         curva
         ON(curva.or_clunicontr = Basi.OR_CLUNICONTR
         and curva.or_clunicontr is null)
     WHERE Basi.OR_TITULARITAT = ImpAcr.OR_TITULARITAT
       AND Basi.IN_SEGMBSINI   IN ('101', '102')
       AND ( Basi.Or_Tipope = 'TC' OR (SUBSTR(Basi.Or_Proced,1,4) = 'TARG' AND Basi.OR_TIPOPE = '?' ))
       AND Basi.FI_ELIMI1      = 'NO';
     COMMIT;

     dbms_stats.gather_table_stats('BAS_MEN','DATOS_CURVA_TARJETAS_CCAA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

--HDEV-107786 Se crea esta tabla para obtener EAD(FI_EADCONAIRB )por contratos
 --HDEV-107786  FLA  19/05/2022 (añadimos WHERE para descartar Corporates Y grupos)
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EAD_CONTRATOS');
   INSERT /*+ parallel (F 8) */ INTO  BAS_MEN.MAESTRO_EAD_CONTRATOS F (F.OR_CLUNICONTR ,F.FI_EADCONAIRB)
   SELECT /*+ full(A) parallel (A 8) */ A.OR_CLUNICONTR ,SUM(A.FI_EADCONAIRB)
     FROM BAS_MEN.BASILEA A
    WHERE A.IN_SEGMBSINI IN ('003','005','006', '009','010','019','027')
      AND (SUBSTR(A.OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND A.OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5'))
      AND A.FI_ELIMI1 = 'NO' AND A.OR_CLUNICONTR NOT IN (0, 999999999999999) AND (A.IN_METODE = 'AIRB' AND A.OR_CODGAR NOT IN ( 'GR 12305', 'GR 12111', 'GR 12110', 'GE 21109', 'GR 21104', 'GR 21110', 'GE 21110', 'EXP21110', 'EXP21109', 'GR 21111', 'GR 21112', 'GR 21113'))
    GROUP BY A.OR_CLUNICONTR;
   COMMIT;
 dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_EAD_CONTRATOS', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

 --HDEV-107786 Se crea esta tabla para obtener EAD(FI_EADCONAIRB )por titularidad
 --HDEV-107786  FLA  19/05/2022 (añadimos WHERE para descartar Corporates Y grupos)
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_EAD_TITULARIDAD');
   INSERT /*+ parallel (G 8) */ INTO  BAS_MEN.MAESTRO_EAD_TITULARIDAD G(G.OR_TITULARITAT ,G.FI_EADCONAIRB)
   SELECT /*+ full(B) parallel (B 8) */  B.OR_TITULARITAT ,SUM(B.FI_EADCONAIRB)
     FROM BAS_MEN.BASILEA B
    WHERE B.IN_SEGMBSINI IN ('003','005','006', '009','010','019','027')
      AND (SUBSTR(B.OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND B.OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5'))
      AND B.FI_ELIMI1 = 'NO' AND B.OR_TITULARITAT <> 0 AND (B.IN_METODE = 'AIRB' AND B.OR_CODGAR NOT IN ( 'GR 12305', 'GR 12111', 'GR 12110', 'GE 21109', 'GR 21104', 'GR 21110', 'GE 21110', 'EXP21110', 'EXP21109', 'GR 21111', 'GR 21112', 'GR 21113'))
    GROUP BY B.OR_TITULARITAT;
   COMMIT;
 dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_EAD_TITULARIDAD', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

EXCEPTION
    WHEN OTHERS THEN
         v_Error_Orac := SUBSTR(SQLERRM,1,255);

         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT      = 'FINALIZADO'
              , DATA_FIN   = SYSDATE
              , FINALITZAT = 'KO'
              , ERROR_ORAC = v_Error_Orac
              , NUM_ERROR  = v_Num_Error
          WHERE PROCES = Cte_Subproceso
            AND ESTAT  = 'INICIADO';

            RAISE;

END;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Carga  Maturity Préstamos
-----------------------------------------------------------------------------------------------------------------------------------------------------

PROCEDURE SP_Carga_Maturity_prestamos IS

    CURSOR prestamos IS
    SELECT *
      FROM BAS_MEN.MATURITY_PRESTAMOS_pre;

CALCULO                            FLOAT :=0;
VN_CUOTA                           NUMBER(10) := 0;
VN_PERIOD                          NUMBER(4,1) := 0;
VN_TIEMPO_PERIODO                  NUMBER(3) := 0;
VN_OR_VIDRES                       FLOAT;
VN_TIPO_PERIODO                    VARCHAR2(1) := '?';
VN_COUNT2                       NUMBER:=0;
VN_IMPORTE                         FLOAT :=0;


    Cte_Subproceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := 'AIRB - SP_Carga_Maturity_prestamos ';
    v_Error_Orac   BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE      DEFAULT ' ';
    v_Num_Error    BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE       DEFAULT 0;

BEGIN


    v_Num_Error := 101;
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES (Cte_Subproceso, SYSDATE, 'INICIADO');

    COMMIT;

  dbms_stats.gather_table_stats('BAS_MEN','CONTROL_PROCES', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 102;

     BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MATURITY_PRESTAMOS');

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MATURITY_PRESTAMOS_pre');

    INSERT  /*+ PARALLEL (b 4) */ INTO BAS_MEN.MATURITY_PRESTAMOS_pre       b
    SELECT /*+ full(a) PARALLEL (A 4) */ DISTINCT OR_REFOPE, IN_SEGMBS0, OR_FECCAR, OR_FECVTO,
    'PR' OR_PROCED,
    OR_VIDRES, 0 FI_VIDRES, 0 CUOTAS, 0 PERIODO, '?' TIPO_PERIODO, 0 TIEMPO , 0 IMPORTE
      FROM BAS_MEN.BASILEA A
     WHERE OR_ENTITY IN (81, 8211)
       and or_REFOPE <> 0
       AND (OR_PROCED = 'PRES-DIVIS' OR OR_TIPOPE = 'PR' OR SUBSTR(OR_PROCED,1,3) = 'PR-' OR OR_CLUNIPROD = 'PR')
       and substr(or_refope,1,3) in (807, 817, 827)
       AND OR_FECVTO <> 10101;

    commit;

    v_Num_Error := 103;

  dbms_stats.gather_table_stats('BAS_MEN','MATURITY_PRESTAMOS_pre', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    FOR Cur IN prestamos LOOP

    CALCULO                             := 0;
    VN_CUOTA                            := 0;
    VN_PERIOD                           := 0;
    VN_TIEMPO_PERIODO                   := 0;
    VN_OR_VIDRES                        := CUR.OR_VIDRES;
    VN_TIPO_PERIODO                     := '?';
    VN_COUNT2                        :=0;
    VN_IMPORTE                          :=0;


         IF CUR.IN_SEGMBS0 = '200' AND NVL(CUR.OR_FECCAR, 0) NOT IN (0, 99991231, 99999999) AND CUR.OR_FECCAR >= PN_FECPRO  THEN

                 v_Num_Error := 104;

                 VN_OR_VIDRES:= TO_DATE(CUR.OR_FECCAR,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD');

         ELSE

                  v_Num_Error := 105;

                   BEGIN
                      SELECT TIPPER, SUM(IMPCUOTAMES)
                        INTO VN_TIPO_PERIODO, VN_IMPORTE
                        FROM BAS_MEN.CUOTAS_PRESTAMOS
                       WHERE NUMPREST = CUR.OR_REFOPE
                         AND TRIM(NVL(TIPPER, 'V')) <> 'V'
                       GROUP BY TIPPER;
                   EXCEPTION
                        WHEN OTHERS THEN
                             BEGIN
                                SELECT TIPPER, SUM(IMPCUOTAMES)
                                  INTO VN_TIPO_PERIODO, VN_IMPORTE
                                  FROM BAS_MEN.CUOTAS_PRESTAMOS
                                 WHERE CODCONTRAT = CUR.OR_REFOPE
                                   AND TIPPER <> 'V'
                                 GROUP BY TIPPER;
                             EXCEPTION
                                  WHEN OTHERS THEN
                                       BEGIN
                                          SELECT A.TIPPER, SUM(IMPCUOTAMES)
                                            INTO VN_TIPO_PERIODO, VN_IMPORTE
                                            FROM (SELECT A.CODCONTRAT, TIPPER
                                                   FROM (SELECT CODCONTRAT, MAX(IMPCUOTAMES) IMPCUOTAMES
                                                           FROM BAS_MEN.CUOTAS_PRESTAMOS
                                                          WHERE CODCONTRAT = CUR.OR_REFOPE
                                                          GROUP BY CODCONTRAT) A,
                                                        (SELECT CODCONTRAT, TIPPER, IMPCUOTAMES
                                                           FROM BAS_MEN.CUOTAS_PRESTAMOS
                                                          WHERE CODCONTRAT = CUR.OR_REFOPE) B
                                                  WHERE A.IMPCUOTAMES = B.IMPCUOTAMES
                                                    AND A.CODCONTRAT = B.CODCONTRAT) A,
                                                 BAS_MEN.CUOTAS_PRESTAMOS C
                                           WHERE A.CODCONTRAT = C.CODCONTRAT
                                             AND A.TIPPER = C.TIPPER
                                           GROUP BY A.TIPPER;
                                       EXCEPTION
                                            WHEN OTHERS THEN
                                                 VN_TIPO_PERIODO := '?';
                                                 VN_IMPORTE      :=0;
                                       END;
                             END;
                   END;


                   v_Num_Error := 106;

                   VN_CUOTA := TO_DATE(CUR.OR_FECVTO,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD');

                   IF VN_TIPO_PERIODO <> 'V' THEN
                      IF VN_TIPO_PERIODO IN ('M', ' ') THEN
                         VN_PERIOD := 30;
                         VN_TIEMPO_PERIODO := 12;
                      ELSIF VN_TIPO_PERIODO = 'B' THEN
                         VN_PERIOD := 60;
                         VN_TIEMPO_PERIODO := 6;
                      ELSIF VN_TIPO_PERIODO = 'T' THEN
                         VN_PERIOD := 90;
                         VN_TIEMPO_PERIODO := 4;
                      ELSIF VN_TIPO_PERIODO = 'S' THEN
                         VN_PERIOD := 182.5;
                         VN_TIEMPO_PERIODO := 2;
                      ELSIF VN_TIPO_PERIODO = 'A' THEN
                         VN_PERIOD := 365;
                         VN_TIEMPO_PERIODO := 1;
                      END IF;

                      v_Num_Error := 107;

                      IF VN_PERIOD <> 0 THEN
                         VN_CUOTA := CEIL(VN_CUOTA / VN_PERIOD);
                      ELSE
                           VN_CUOTA := 0;
                      END IF;

                      v_Num_Error := 108;

                      IF VN_CUOTA > 0 and VN_IMPORTE > 0 THEN

                         WHILE VN_COUNT2 < VN_CUOTA LOOP

                               VN_COUNT2:= VN_COUNT2 + 1;
                               CALCULO:= CALCULO + (VN_COUNT2/VN_TIEMPO_PERIODO)* VN_IMPORTE;

                         END LOOP;

                         v_Num_Error := 109;

                     --    dbms_output.put_line(cur.or_refope||'-'||cur.or_fecvto||'-'||CALCULO||'-'||VN_CUOTA||'-'||VN_IMPORTE);

                         VN_OR_VIDRES := (CALCULO * 365)/(VN_CUOTA * VN_IMPORTE);

                      ELSE

                       v_Num_Error := 110;

                           VN_OR_VIDRES:= TO_DATE(CUR.OR_FECVTO,'YYYY/MM/DD') - TO_DATE(PN_FECPRO,'YYYY/MM/DD');

                           IF CUR.OR_PROCED NOT IN ('PR-MOROS', 'PR-VENCUTS') THEN
                              VN_OR_VIDRES := CUR.OR_VIDRES;
                           END IF;

                      END IF;
                   ELSE

                   v_Num_Error := 111;

                        VN_OR_VIDRES := CUR.OR_VIDRES;
                   END IF;
              END IF;

              insert into BAS_MEN.MATURITY_PRESTAMOS
               (OR_REFOPE, or_fecvto, CUOTAS, IMPORTE, PERIODO, TIEMPO, TIPO_PERIODO, OR_VIDRES, in_segmbs0)
               values (Cur.Or_Refope, cur.or_fecvto, VN_CUOTA, VN_IMPORTE, VN_PERIOD, VN_TIEMPO_PERIODO, VN_TIPO_PERIODO, VN_OR_VIDRES, cur.in_segmbs0);

       end loop;

       commit;

       v_Num_Error := 112;

     dbms_stats.gather_table_stats('BAS_MEN','MATURITY_PRESTAMOS', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );


    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK'
     WHERE PROCES = Cte_Subproceso
       AND ESTAT  = 'INICIADO';

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
         v_Error_Orac := SUBSTR(SQLERRM,1,255);

         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT      = 'FINALIZADO'
              , DATA_FIN   = SYSDATE
              , FINALITZAT = 'KO'
              , ERROR_ORAC = v_Error_Orac
              , NUM_ERROR  = v_Num_Error
          WHERE PROCES = Cte_Subproceso
            AND ESTAT  = 'INICIADO';

         COMMIT;

         RAISE;

         end;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Carga  Maturity Avales
-----------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_Carga_Maturity_Avales IS

    CURSOR AVALES IS
    SELECT *
      FROM BAS_MEN.MATURITY_AVALES
     WHERE OR_REFOPE <> 0
     and or_fecope <> 10101 ;

    v_Fecha_Ava       NUMBER(8)  DEFAULT 0;
    v_Fecha_Ava_Aux   NUMBER(8)  DEFAULT 0;
    v_Vidres          FLOAT(126) DEFAULT 0;
    v_Vidres_Fin      FLOAT(126) DEFAULT 0;
    v_Count           NUMBER(9)  DEFAULT 0;

    Cte_Subproceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := 'AIRB - SP_Carga_Maturity_Avales '||PN_FECPRO;
    v_Error_Orac   BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE      DEFAULT ' ';
    v_Num_Error    BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE       DEFAULT 0;

BEGIN

    v_Num_Error := 131;
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES (Cte_Subproceso, SYSDATE, 'INICIADO');
    COMMIT;
  dbms_stats.gather_table_stats('BAS_MEN','CONTROL_PROCES', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 132;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MATURITY_AVALES');

    INSERT
      INTO BAS_MEN.MATURITY_AVALES
    SELECT /*+ full(a) parallel (a 4)*/ DISTINCT OR_REFOPE , OR_FECVTO, OR_FECOPE, OR_VIDRES, 365, 0, 0
      FROM BAS_MEN.BASILEA a
     WHERE (OR_PROCED = 'AVALES' OR OR_TIPOPE in ('AF', 'AT'))
       AND OR_ENTITY IN (81, 8211)
       AND FI_TIPEXP  = 'OffBalance'
       AND OR_FECVTO  < 20800101;

    COMMIT;

    v_Num_Error := 133;
    FOR Cur IN AVALES LOOP

        v_Fecha_Ava     := Cur.OR_FECOPE;
        v_Fecha_Ava_Aux := Cur.OR_FECOPE;

        v_Num_Error := 134;
        WHILE v_Fecha_Ava_Aux <= PN_FECPRO LOOP

            V_Fecha_Ava:= TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(v_Fecha_Ava,'YYYY/MM/DD'),+3), 'YYYYMMDD'));
            v_Fecha_Ava_Aux := SUBSTR(v_Fecha_Ava,1,6)||SUBSTR(CUR.Or_Fecope,7,2);

        END LOOP;

        v_Count         := 0;
        v_Vidres        := 0;
        v_Vidres_Fin    := 365;
       -- v_Fecha_Ava_Aux := v_Fecha_Ava; XCG, 07/05/2021

        v_Num_Error := 135;
        WHILE v_Fecha_Ava_Aux <= Cur.OR_FECVTO LOOP

            v_Count         := v_Count + 1;
            IF v_Fecha_Ava_Aux <= v_Fecha_Ava then
               v_Vidres        := v_Vidres + TO_DATE(v_Fecha_Ava_Aux, 'YYYY/MM/DD') - TO_DATE(PN_FECPRO, 'YYYY/MM/DD');
            else
                 v_Vidres        := v_Vidres + TO_DATE(v_Fecha_Ava, 'YYYY/MM/DD') - TO_DATE(PN_FECPRO, 'YYYY/MM/DD');
            end if;
            v_Fecha_Ava     := TO_NUMBER(TO_CHAR(ADD_MONTHS(TO_DATE(v_Fecha_Ava,'YYYY/MM/DD'), +3), 'YYYYMMDD'));
            v_Fecha_Ava_Aux := SUBSTR(v_Fecha_Ava,1,6)||SUBSTR(CUR.Or_Fecope,7,2);

        END LOOP;

        v_Num_Error := 136;
        IF v_Count <> 0 THEN
            v_Vidres_Fin := v_Vidres/v_Count;
        END IF;

        v_Num_Error := 137;
        IF v_Vidres_Fin = 0 THEN
           v_Vidres_Fin := 365;
        END IF;

        v_Num_Error := 138;
        UPDATE BAS_MEN.MATURITY_AVALES
           SET FI_VIDRES  = v_Vidres_Fin
             , NUM_CUOTAS = v_Count
             , SUM_VIDRES = v_Vidres
         WHERE OR_REFOPE = Cur.Or_Refope
           AND OR_FECVTO = Cur.Or_Fecvto
           AND OR_FECOPE = Cur.Or_Fecope;

    END LOOP;

    COMMIT;

    v_Num_Error := 139;
    --BDD.ORA_ADMIN.ANALIZAR_SEGMENTO('BAS_MEN','MATURITY_AVALES',NULL,1,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats('BAS_MEN','MATURITY_AVALES', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 3 );

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK'
     WHERE PROCES = Cte_Subproceso
       AND ESTAT  = 'INICIADO';

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
         v_Error_Orac := SUBSTR(SQLERRM,1,255);

         UPDATE BAS_MEN.CONTROL_PROCES
            SET ESTAT      = 'FINALIZADO'
              , DATA_FIN   = SYSDATE
              , FINALITZAT = 'KO'
              , ERROR_ORAC = v_Error_Orac
              , NUM_ERROR  = v_Num_Error
          WHERE PROCES = Cte_Subproceso
            AND ESTAT  = 'INICIADO';

         COMMIT;

         RAISE;

END;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Mtliplicador Matricula Default
-----------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_MultipLI_Matricula_Default IS

    Cte_ProcesMulti CONSTANT VARCHAR2(80)   := 'AIRB - Multiplicador_Matricula_Default';
    fecproc             NUMBER(6);

    v_Error_Orac   BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE      DEFAULT ' ';
    v_Num_Error    BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE       DEFAULT 0;


BEGIN

    fecproc := TO_NUMBER(SUBSTR(PN_FECPRO,1,6));

    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_ProcesMulti, 'INICIADO');
    COMMIT;

    v_Num_Error := 151;
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IND_MULT_CTO_DEF_AUX');
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IND_MULT_CTO_DEFAULT');

    insert into BAS_MEN.MAESTRO_IND_MULT_CTO_DEF_AUX
    SELECT ID_MES,
      ENTIDADCTO_CUENTA,
      CODIGO_TIPOPROD_CUENTA,
      COD_CONTRATO_CUENTA,
      MULTIPLICADOR_NAC_HOST,
      MULTIPLICADOR_NAC_EMP
      FROM (
        SELECT ID_MES, ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA ,
                     SUM(NVL(MULT_NAC_MAT_HOST_POND,0))   AS MULTIPLICADOR_NAC_HOST,
                     SUM(NVL(MULT_NACIONAL_CONC_POND,0))   AS MULTIPLICADOR_NAC_EMP
          FROM (
            SELECT ID_MES
                      , ENTIDADCTO_CUENTA
                      , CODIGO_TIPOPROD_CUENTA
                      , COD_CONTRATO_CUENTA
                      , NULL AS MULT_NAC_MAT_HOST_POND
                      , (MULT_NAC_CONC * FR_COVER_MAT)
                                              AS MULT_NACIONAL_CONC_POND
            FROM (
              SELECT PASO5.ID_MES, PASO5.ENTIDADCTO_CUENTA, PASO5.CODIGO_TIPOPROD_CUENTA, PASO5.COD_CONTRATO_CUENTA,
                            PASO5.MULT_NAC_MAT_HOST, PASO5.MULT_NAC_CONC
                            , CASE
                                 WHEN PASO5.C_COVER_TOT_CONTRATO = 0 THEN 0
                                 WHEN PASO5.C_COVER_TOT_MAT / PASO5.C_COVER_TOT_CONTRATO IS NULL THEN 1/CUANTOS
                                    ELSE PASO5.C_COVER_TOT_MAT / PASO5.C_COVER_TOT_CONTRATO
                              END AS FR_COVER_MAT
                FROM (
                  SELECT  PASO4.ID_MES, PASO4.ENTIDADCTO_CUENTA, PASO4.CODIGO_TIPOPROD_CUENTA, PASO4.COD_CONTRATO_CUENTA, PASO4.IMPCTV_Z,
                                PASO4.ID_BIEN, PASO4.MISSING_POTENCIAL, PASO4.IMPORTE_TAS, PASO4.IMPCTV_Z_REP,PASO4.C_COVER_TOT, PASO4.MULT_NAC_MAT_HOST, PASO4.MULT_NAC_CONC,
                                SUM(PASO4.C_COVER_TOT)  OVER (PARTITION BY   ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS C_COVER_TOT_CONTRATO,
                                SUM(PASO4.C_COVER_TOT)  OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA, ID_BIEN) AS C_COVER_TOT_MAT,
                                COUNT(1)  OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA)  AS CUANTOS
                  FROM (
                    SELECT  PASO3.ID_MES, PASO3.ENTIDADCTO_CUENTA, PASO3.CODIGO_TIPOPROD_CUENTA, PASO3.COD_CONTRATO_CUENTA, PASO3.IMPCTV_Z, PASO3.ID_BIEN,
                                  PASO3.MISSING_POTENCIAL, PASO3.IMPORTE_TAS, PASO3.IMPCTV_Z_REP
                               ,  CASE
                                     WHEN PASO3.SUMA_IMPCTV_Z_REP > 0 THEN --    Multiplicamos el resultado anterior por el máximo entre IMPCTV_Z y 0
                                         CASE
                                             WHEN PASO3.IMPORTE_TAS > 0 THEN (PASO3.IMPCTV_Z_REP / PASO3.SUMA_IMPCTV_Z_REP) * PASO3.IMPORTE_TAS
                                             ELSE 0
                                         END
                                     WHEN PASO3.SUMA_IMPCTV_Z_REP <= 0 AND PASO3.MISSING_POTENCIAL = 0 THEN --    Calculamos el cociente (Máximo entre IMPCTV_Z y 0) / (Conteo de ID_BIEN)
                                         CASE
                                             WHEN PASO3.IMPORTE_TAS > 0 THEN (PASO3.IMPORTE_TAS / COUNT_COD_CONTRATO_CUENTA)
                                             ELSE 0
                                         END
                                     ELSE --En los demás casos, asignaremos el máximo entre IMPORTE_TAS y 0
                                         CASE
                                             WHEN PASO3.IMPORTE_TAS > 0 THEN PASO3.IMPORTE_TAS
                                             ELSE 0
                                         END
                                 END AS C_COVER_TOT,
                                 NVL(MAC.MULT_NACIONAL_HOST,1) AS MULT_NAC_MAT_HOST,
                                 NVL(MAC.MULT_NACIONAL_CONCESION,1) AS MULT_NAC_CONC
                    FROM (
                       SELECT  PASO2.ID_MES, PASO2.ENTIDADCTO_CUENTA, PASO2.CODIGO_TIPOPROD_CUENTA, PASO2.COD_CONTRATO_CUENTA, PASO2.IMPCTV_Z,
                                     PASO2.ID_BIEN, PASO2.MISSING_POTENCIAL, PASO2.IMPORTE_TAS, PASO2.IMPCTV_Z_REP ,
                                     SUM(NVL(IMPCTV_Z_REP,0)) OVER (PARTITION BY   ID_BIEN) AS SUMA_IMPCTV_Z_REP,
                                     COUNT(COD_CONTRATO_CUENTA)     OVER (PARTITION BY   ID_BIEN) AS COUNT_COD_CONTRATO_CUENTA
                        FROM (
                            SELECT PASO1.ID_MES, PASO1.ENTIDADCTO_CUENTA, PASO1.CODIGO_TIPOPROD_CUENTA, PASO1.COD_CONTRATO_CUENTA, PASO1.IMPCTV_Z,
                                         PASO1.ID_BIEN, PASO1.MISSING_POTENCIAL, PASO1.IMPORTE_TAS
                                      ,  CASE
                                         WHEN PASO1.SUMA_IMPORTE_TAS > 0 THEN
                                             CASE
                                                 WHEN PASO1.IMPCTV_Z > 0 THEN (PASO1.IMPORTE_TAS / PASO1.SUMA_IMPORTE_TAS) * PASO1.IMPCTV_Z --    Multiplicamos el resultado anterior por el máximo entre IMPCTV_Z y 0
                                                 ELSE 0
                                             END
                                         WHEN PASO1.SUMA_IMPORTE_TAS <= 0 AND PASO1.MISSING_POTENCIAL = 0 THEN --    Calculamos el cociente (Máximo entre IMPCTV_Z y 0) / (Conteo de ID_BIEN)
                                           CASE
                                             WHEN PASO1.COUNT_ID_BIEN = 0 THEN 0
                                             ELSE
                                               CASE
                                                   WHEN PASO1.IMPCTV_Z > 0 THEN (PASO1.IMPCTV_Z / NVL(PASO1.COUNT_ID_BIEN, 0))
                                                   ELSE ( 0 / PASO1.COUNT_ID_BIEN)
                                               END
                                            END
                                         ELSE --    En los demás casos, asignaremos el máximo entre IMPCTV_Z y 0.
                                             CASE
                                                 WHEN PASO1.IMPCTV_Z > 0 THEN PASO1.IMPCTV_Z
                                                 ELSE 0
                                             END
                                        END AS IMPCTV_Z_REP

                        FROM
                          --HDEV-107786   01/04/2022 cambiado INDEXADO cambio de tabla .BS_LTV_CONCESION por SALUME_Z_SINPIG
                          (
                            SELECT SAL.ID_MES, SAL.ENTIDADCTO_CUENTA, SAL.CODIGO_TIPOPROD_CUENTA, SAL.COD_CONTRATO_CUENTA, SAL.IMPCTV_Z,
                                         ASG.ID_BIEN
                                      , CASE WHEN ASG.ID_BIEN IS NULL THEN 1 ELSE 0 END AS MISSING_POTENCIAL
                                      , SAL.IMPORTE_TAS,
                                        SUM(SAL.IMPORTE_TAS) OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS SUMA_IMPORTE_TAS,
                                       COUNT(ASG.ID_BIEN)       OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS COUNT_ID_BIEN
                                  FROM (SELECT  A.P_MES as ID_MES, A.CODENTAC ENTIDADCTO_CUENTA, A.TIPPROAC CODIGO_TIPOPROD_CUENTA, A.CODCONAC COD_CONTRATO_CUENTA, A.IMPORTE_RIESGO AS IMPCTV_Z,
                                                A.TOTAL_VALOR_NETO_TOT_COND AS IMPORTE_TAS
                    --(A.TOTAL_VALOR_NETO_TOT_COND - A.VALOR_PIGNORATICIAS)  AS IMPORTE_TAS
                                                FROM BAS_MEN.LTV_ACTUAL A) SAL
                                  LEFT JOIN (SELECT DISTINCT B.CODENTAC, B.TIPPROAC, B.CODCONAC, B.ID_BIEN
                                                      FROM BAS_MEN.BS_ASG_POTENCIAL B  WHERE B.GRUPO_GARANTIA = '01 INMOBILIARIA' ) ASG
                                             ON (ASG.CODENTAC = SAL.ENTIDADCTO_CUENTA AND ASG.TIPPROAC = SAL.CODIGO_TIPOPROD_CUENTA AND ASG.CODCONAC = SAL.COD_CONTRATO_CUENTA)
                          )PASO1
                                ) PASO2
                           ) PASO3
                          INNER JOIN  (SELECT MATRICULA, INDEXADOR_NACIONAL_IFRS9 as MULT_NACIONAL_HOST, INDEXADOR_NACIONAL_IFRS9 as MULT_NACIONAL_CONCESION FROM BAS_MEN.INDICE_PRECIOS_DEFAULT_NEW) MAC -- HDEV-107786 02/05/2022
                          -- INNER JOIN  (SELECT MATRICULA, MULT_NACIONAL_HOST, MULT_NACIONAL_CONCESION FROM DCRPROP_MENSUAL.INDICE_PRECIOS_DEFAULT_SAS) MAC
                          ON (PASO3.ID_BIEN = MAC.MATRICULA)
                      ) PASO4
                  ) PASO5
         ))
      GROUP BY ID_MES, ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA)

      UNION ALL

    SELECT ID_MES,
      ENTIDADCTO_CUENTA,
      CODIGO_TIPOPROD_CUENTA,
      COD_CONTRATO_CUENTA,
      MULTIPLICADOR_NAC_HOST,
      MULTIPLICADOR_NAC_EMP
      FROM (
        SELECT ID_MES, ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA ,
                     SUM(NVL(MULT_NAC_MAT_HOST_POND,0))   AS MULTIPLICADOR_NAC_HOST,
                     SUM(NVL(MULT_NACIONAL_CONC_POND,0))   AS MULTIPLICADOR_NAC_EMP
          FROM (
            SELECT ID_MES
                      , ENTIDADCTO_CUENTA
                      , CODIGO_TIPOPROD_CUENTA
                      , COD_CONTRATO_CUENTA
                      , (MULT_NAC_MAT_HOST * FR_COVER_MAT)
                                              AS MULT_NAC_MAT_HOST_POND
                      , NULL AS MULT_NACIONAL_CONC_POND
             FROM (
              SELECT PASO5.ID_MES, PASO5.ENTIDADCTO_CUENTA, PASO5.CODIGO_TIPOPROD_CUENTA, PASO5.COD_CONTRATO_CUENTA,
                            PASO5.MULT_NAC_MAT_HOST, PASO5.MULT_NAC_CONC
                            , CASE
                                 WHEN PASO5.C_COVER_TOT_CONTRATO = 0 THEN 0
                                 WHEN PASO5.C_COVER_TOT_MAT / PASO5.C_COVER_TOT_CONTRATO IS NULL THEN 1/CUANTOS
                                    ELSE PASO5.C_COVER_TOT_MAT / PASO5.C_COVER_TOT_CONTRATO
                              END AS FR_COVER_MAT
                FROM (
                  SELECT  PASO4.ID_MES, PASO4.ENTIDADCTO_CUENTA, PASO4.CODIGO_TIPOPROD_CUENTA, PASO4.COD_CONTRATO_CUENTA, PASO4.IMPCTV_Z,
                                PASO4.ID_BIEN, PASO4.MISSING_POTENCIAL, PASO4.IMPORTE_TAS, PASO4.IMPCTV_Z_REP,PASO4.C_COVER_TOT, PASO4.MULT_NAC_MAT_HOST, PASO4.MULT_NAC_CONC,
                                SUM(PASO4.C_COVER_TOT)  OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS C_COVER_TOT_CONTRATO,
                                SUM(PASO4.C_COVER_TOT)  OVER (PARTITION BY   ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA, ID_BIEN) AS C_COVER_TOT_MAT,
                                COUNT(1)  OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA)  AS CUANTOS
                  FROM (
                    SELECT  PASO3.ID_MES, PASO3.ENTIDADCTO_CUENTA, PASO3.CODIGO_TIPOPROD_CUENTA, PASO3.COD_CONTRATO_CUENTA, PASO3.IMPCTV_Z, PASO3.ID_BIEN,
                                  PASO3.MISSING_POTENCIAL, PASO3.IMPORTE_TAS, PASO3.IMPCTV_Z_REP
                               ,  CASE
                                     WHEN PASO3.SUMA_IMPCTV_Z_REP > 0 THEN --    Multiplicamos el resultado anterior por el máximo entre IMPCTV_Z y 0
                                         CASE
                                             WHEN PASO3.IMPORTE_TAS > 0 THEN (PASO3.IMPCTV_Z_REP / PASO3.SUMA_IMPCTV_Z_REP) * PASO3.IMPORTE_TAS
                                             ELSE 0
                                         END
                                     WHEN PASO3.SUMA_IMPCTV_Z_REP <= 0 AND PASO3.MISSING_POTENCIAL = 0 THEN --    Calculamos el cociente (Máximo entre IMPCTV_Z y 0) / (Conteo de ID_BIEN)
                                         CASE
                                             WHEN PASO3.IMPORTE_TAS > 0 THEN (PASO3.IMPORTE_TAS / COUNT_COD_CONTRATO_CUENTA)
                                             ELSE 0
                                         END
                                     ELSE --En los demás casos, asignaremos el máximo entre IMPORTE_TAS y 0
                                         CASE
                                             WHEN PASO3.IMPORTE_TAS > 0 THEN PASO3.IMPORTE_TAS
                                             ELSE 0
                                         END
                                 END AS C_COVER_TOT,
                                 NVL(MAC.MULT_NACIONAL_HOST,1) AS MULT_NAC_MAT_HOST,
                                 NVL(MAC.MULT_NACIONAL_CONCESION,1) AS MULT_NAC_CONC
                    FROM (
                       SELECT  PASO2.ID_MES, PASO2.ENTIDADCTO_CUENTA, PASO2.CODIGO_TIPOPROD_CUENTA, PASO2.COD_CONTRATO_CUENTA, PASO2.IMPCTV_Z,
                                     PASO2.ID_BIEN, PASO2.MISSING_POTENCIAL, PASO2.IMPORTE_TAS, PASO2.IMPCTV_Z_REP ,
                                     SUM(NVL(IMPCTV_Z_REP,0)) OVER (PARTITION BY  ID_BIEN) AS SUMA_IMPCTV_Z_REP,
                                     COUNT(COD_CONTRATO_CUENTA)     OVER (PARTITION BY  ID_BIEN) AS COUNT_COD_CONTRATO_CUENTA
                        FROM (
                            SELECT PASO1.ID_MES, PASO1.ENTIDADCTO_CUENTA, PASO1.CODIGO_TIPOPROD_CUENTA, PASO1.COD_CONTRATO_CUENTA, PASO1.IMPCTV_Z,
                                         PASO1.ID_BIEN, PASO1.MISSING_POTENCIAL, PASO1.IMPORTE_TAS
                                      ,  CASE
                                         WHEN PASO1.SUMA_IMPORTE_TAS > 0 THEN
                                             CASE
                                                 WHEN PASO1.IMPCTV_Z > 0 THEN (PASO1.IMPORTE_TAS / PASO1.SUMA_IMPORTE_TAS) * PASO1.IMPCTV_Z --    Multiplicamos el resultado anterior por el máximo entre IMPCTV_Z y 0
                                                 ELSE 0
                                             END
                                         WHEN PASO1.SUMA_IMPORTE_TAS <= 0 AND PASO1.MISSING_POTENCIAL = 0 THEN --    Calculamos el cociente (Máximo entre IMPCTV_Z y 0) / (Conteo de ID_BIEN)
                                           CASE
                                             WHEN PASO1.COUNT_ID_BIEN = 0 THEN 0
                                             ELSE
                                               CASE
                                                   WHEN PASO1.IMPCTV_Z > 0 THEN (PASO1.IMPCTV_Z / NVL(PASO1.COUNT_ID_BIEN, 0))
                                                   ELSE ( 0 / PASO1.COUNT_ID_BIEN)
                                               END
                                            END
                                         ELSE --    En los demás casos, asignaremos el máximo entre IMPCTV_Z y 0.
                                             CASE
                                                 WHEN PASO1.IMPCTV_Z > 0 THEN PASO1.IMPCTV_Z
                                                 ELSE 0
                                             END
                                        END AS IMPCTV_Z_REP
                             FROM (
                                      SELECT SAL.ID_MES, SAL.ENTIDADCTO_CUENTA, SAL.CODIGO_TIPOPROD_CUENTA, SAL.COD_CONTRATO_CUENTA, SAL.IMPCTV_Z,
                                               ASG.ID_BIEN
                                              , CASE WHEN ASG.ID_BIEN IS NULL THEN 1 ELSE 0 END AS MISSING_POTENCIAL
                                              , ASG.IMPORTE_TAS,
                                              SUM(ASG.IMPORTE_TAS) OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS SUMA_IMPORTE_TAS,
                                              COUNT(ASG.ID_BIEN)       OVER (PARTITION BY  ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS COUNT_ID_BIEN
                                        FROM (SELECT  fecproc AS ID_MES, A.ENTIDADCTO_CUENTA, A.CODIGO_TIPOPROD_CUENTA, A.COD_CONTRATO_CUENTA, A.IMPCTV_Z
                                                        FROM BAS_MEN.SALUME_Z A) SAL
                                          LEFT JOIN (SELECT DISTINCT B.CODENTAC, B.TIPPROAC, B.CODCONAC, B.ID_BIEN,
                                                                                                  case when B.TASACION_ACTUAL > 0 then TASACION_ACTUAL
                                                                                                else B.TASACION_ACTUAL_TOT
                                                                                                end  AS IMPORTE_TAS
                                                              FROM BAS_MEN.BS_ASG_POTENCIAL B  WHERE B.GRUPO_GARANTIA = '01 INMOBILIARIA') ASG
                                                     ON (ASG.CODENTAC = SAL.ENTIDADCTO_CUENTA AND ASG.TIPPROAC = SAL.CODIGO_TIPOPROD_CUENTA AND ASG.CODCONAC = SAL.COD_CONTRATO_CUENTA)
                                    ) PASO1
                                ) PASO2
                           ) PASO3
                          INNER JOIN  (SELECT MATRICULA, INDEXADOR_NACIONAL_IFRS9 as MULT_NACIONAL_HOST, INDEXADOR_NACIONAL_IFRS9 as MULT_NACIONAL_CONCESION FROM BAS_MEN.INDICE_PRECIOS_DEFAULT_NEW) MAC -- HDEV-107786 .02/05/2022
                          --  INNER JOIN  (SELECT MATRICULA, MULT_NACIONAL_HOST, MULT_NACIONAL_CONCESION FROM DCRPROP_MENSUAL.INDICE_PRECIOS_DEFAULT_SAS) MAC
                          ON (PASO3.ID_BIEN = MAC.MATRICULA)
                      ) PASO4
                  ) PASO5
         ))
      GROUP BY ID_MES, ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) ;

    COMMIT;

  dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_IND_MULT_CTO_DEF_AUX', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );


    insert into BAS_MEN.MAESTRO_IND_MULT_CTO_DEFAULT
    SELECT DISTINCT ID_MES, ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA,
           MAX(MULTIPLICADOR_NAC_HOST) OVER (PARTITION BY ID_MES,ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS MULTIPLICADOR_NAC_HOST  ,
           MAX(MULTIPLICADOR_NAC_EMP) OVER (PARTITION BY ID_MES,ENTIDADCTO_CUENTA, CODIGO_TIPOPROD_CUENTA, COD_CONTRATO_CUENTA) AS MULTIPLICADOR_NAC_EMP
    FROM BAS_MEN.MAESTRO_IND_MULT_CTO_DEF_AUX;


    COMMIT;

  dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_IND_MULT_CTO_DEFAULT', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    v_Num_Error := 159;


    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_ProcesMulti, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        v_Error_Orac := SUBSTR(SQLERRM,1,255);

        BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_ProcesMulti, 'FINALIZADO','KO', v_Error_Orac, v_Num_Error);

        RAISE;

END;
-----------------------------------------------------------------------------------------------------------------------------------------------
-- CONTRATOS_ASG_POTENCIAL

-- HDEV-107786 .
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- CREACION INFORMACIÓN CONTRATOS_ASG_POTENCIAL
PROCEDURE SP_CONTRATOS_ASG_POTENCIAL IS
    Cte_Proces CONSTANT VARCHAR2(80)   := 'AIRB - SP_CONTRATOS_ASG_POTENCIAL';
    fecproc             NUMBER(6);
    v_Error_Orac   BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE      DEFAULT ' ';
    v_Num_Error    BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE       DEFAULT 0;
BEGIN

   BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');
-- Esta tabla se utilizara para obtener  datos para el Tipo Colateral para el calculo de LGD segun el contrato

   fecproc := TO_NUMBER(SUBSTR(PN_FECPRO,1,6));
   v_Num_Error:=1;
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CONTRATOS_ASG_POTENCIAL');
   v_Num_Error:=2;
        INSERT /*+ PARALLEL (I,4)*/  INTO BAS_MEN.CONTRATOS_ASG_POTENCIAL I (P_MES,CODCONAC,ID_BIEN,TIPO_BIEN,CODPOBLACI,CODPOSTAL,D_WR_INEF,CODINE_TEMP0,VALOR_BIEN_TOT)-- Tabla Volcado
        SELECT /*+ PARALLEL (H,4)*/
                DISTINCT
                H.P_MES,
                H.CODCONAC,
                H.ID_BIENF ID_BIEN,
                H.TIPO_BIENF TIPO_BIEN,
                H.CODPOBLACIF CODPOBLACI,
                H.CODPOSTALF CODPOSTAL,
                H.D_WR_INEF D_WR_INEF,
                H.CODINE_TEMP0F CODINE_TEMP0,
                H.VALOR_BIEN_TOTF VALOR_BIEN_TOT
        FROM(SELECT  /*+ PARALLEL (G,4)*/
                G.*,
                FIRST_VALUE(G.ID_BIEN) OVER (PARTITION BY G.CODCONAC) ID_BIENF,
                FIRST_VALUE(G.TIPO_BIEN) OVER (PARTITION BY G.CODCONAC) TIPO_BIENF,
                FIRST_VALUE(G.CODPOBLACI) OVER (PARTITION BY G.CODCONAC) CODPOBLACIF,
                FIRST_VALUE(G.CODPOSTAL) OVER (PARTITION BY G.CODCONAC) CODPOSTALF,
                FIRST_VALUE(G.D_WR_INE) OVER (PARTITION BY G.CODCONAC) D_WR_INEF,
                FIRST_VALUE(G.CODINE_TEMP0)OVER (PARTITION BY G.CODCONAC)CODINE_TEMP0F,
                FIRST_VALUE(G.VALOR_BIEN_TOT)OVER (PARTITION BY G.CODCONAC)VALOR_BIEN_TOTF
        FROM
            (SELECT /*+ PARALLEL (F,4)*/
                   DISTINCT
                   F.CODCONAC,
                   F.CODINE_TEMP0,
                   F.ID_BIEN,
                   F.TIPO_BIEN,
                   F.CODPOBLACI,
                   F.CODPOSTAL,
                   F.D_WR_INE,
                   F.P_MES,
                  SUM(F.VALOR_BIEN_TOT)  OVER (PARTITION BY F.CODCONAC,F.CODINE_TEMP0) VALOR_BIEN_TOT
               FROM
                (SELECT /*+ PARALLEL (E,4)*/ E.*,
                        CASE
                             WHEN SUBSTR(E.CODPOBLACI,1,3) = '000'  AND E.D_WR_INE = 1 THEN
                                   TRIM(SUBSTR(E.CODPOBLACI,4,5))
                             WHEN SUBSTR(E.CODPOBLACI,1,1) = '0' THEN
                                  TRIM(SUBSTR(E.CODPOBLACI,2,5))
                             WHEN SUBSTR(E.CODPOBLACI,1,1)<>'0'THEN
                                  TRIM(SUBSTR(E.CODPOBLACI,1,1) || SUBSTR(E.CODPOBLACI,1,4))
                         END CODINE_TEMP0
                   FROM
                    (SELECT /*+ PARALLEL (B,4)(D,4)*/ DISTINCT
                            B.*,
                            D.CODPOBLACI,
                            D.CODPOSTAL,
                            CASE
                                WHEN NVL(D.CODPOBLACI,'0') = NVL(D.CODPOSTAL,'0') THEN 1
                                WHEN SUBSTR(NVL(D.CODPOBLACI,''),4,1) = SUBSTR(NVL(D.CODPOSTAL,''),1,1) THEN 1
                                ELSE 0
                            END AS D_WR_INE
                            FROM (SELECT /*+ PARALLEL (A,4)*/
                                          DISTINCT
                                          A.P_MES,
                                          A.CODCONAC,
                                          A.ID_BIEN,
                                          CASE
                                            WHEN A.TIPO_BIEN = 'TERRE' THEN 'TERRENO'
                                          ELSE 'RESTO'
                                          END TIPO_BIEN,
                                          A.VALOR_BIEN_TOT
                                    FROM BAS_MEN.BS_ASG_POTENCIAL A
                                   WHERE A.P_MES=fecproc
                                 ) B
                            LEFT JOIN (SELECT  /*+ PARALLEL (C,4)*/
                                           DISTINCT
                                           C.P_MES,
                                           C.MATRICULA,
                                           C.CODPOBLACI,
                                           C.CODPOSTAL
                                        FROM BAS_MEN.GR40_BIEN_INMUEBLE  C) D
                                          ON B.ID_BIEN = D.MATRICULA
                                         AND B.P_MES=D.P_MES
                                      )E
                 )F
            )G
            ORDER BY 1 DESC, 9 DESC, 2 ASC, 4 DESC
        )H;
        COMMIT;
        v_Num_Error:=3;
        dbms_stats.gather_table_stats('BAS_MEN','CONTRATOS_ASG_POTENCIAL', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );
        v_Num_Error:=4;
        BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
         COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        v_Error_Orac := SUBSTR(SQLERRM,1,255);

        BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Error_Orac, v_Num_Error);

        RAISE;

END;
-----------------------------------------------------------------------------------------------------------------------------------------------
-- AGRUPACIÓN POR IDENTIFICADOR HIPOTECARIO

-- HDEV-107786 Se unifican los estados para cada OR_CLUNICONTR para que sea único en cada contrato,
-- siguiendo la prelación: CON, MNC, SUBJ, PP y el resto de los contratos que no han recibido una
-- asignación se clasifican por defecto como MNC.
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- ACTUALIZACION TIEMPO ESTADO POR CONTRATO
-----------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE SP_Act_Tiempo_Estado_Contrato IS

    Cte_Proces CONSTANT VARCHAR2(80)   := 'AIRB - Act_Tiempo_Estado_Contrato';

    v_Error_Orac                BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE            DEFAULT ' ';
    v_Num_Error                 BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE             DEFAULT 0;
    VV_ULT_ACTUALIZACION_AUX    BAS_MEN.TIEMPO_ESTADO_AUX.ULT_ACTUALIZACION%TYPE  DEFAULT 0;

BEGIN
    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');
    COMMIT;

    SELECT /*+ PARALLEL (a,4) */ MAX(ULT_ACTUALIZACION)
      INTO VV_ULT_ACTUALIZACION_AUX
      FROM BAS_MEN.TIEMPO_ESTADO_AUX a;

    v_Num_Error := 1;

    /*  Si la tabla final aún no se ha actualizado este mes, entonces lo actualizamos */
    IF VV_ULT_ACTUALIZACION_AUX < TO_NUMBER(SUBSTR(PN_FECPRO,1,6)) THEN

        BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TIEMPO_ESTADO');

        INSERT /*+ PARALLEL (x,4) */ INTO BAS_MEN.TIEMPO_ESTADO x
          SELECT /*+ PARALLEL (a,4) */ * FROM BAS_MEN.TIEMPO_ESTADO_AUX a;

        COMMIT;

     END IF;

     v_Num_Error := 2;

     /*  Actualizamos siempre, independientemente del reproceso, partiendo del último correcto */

     BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.TIEMPO_ESTADO_AUX');

     INSERT /*+ PARALLEL (x,4) */ INTO  BAS_MEN.TIEMPO_ESTADO_AUX x
     SELECT /*+ PARALLEL (a,4) */ * FROM BAS_MEN.TIEMPO_ESTADO a;

     COMMIT;

      MERGE /*+ parallel(TE 8) parallel(D 8)*/ INTO BAS_MEN.TIEMPO_ESTADO_AUX TE
                  USING (SELECT /*+ parallel(C 8) parallel(D 8)*/ C.OR_CLUNICONTR,
                                 C.ESTADO_AGR,
                                CASE WHEN C.ESTADO_AGR=D.ESTADO_AGR THEN D.TIME_ESTADO+1
                                      ELSE 0
                                END TIME_ESTADO
                           FROM (SELECT B.OR_CLUNICONTR, DECODE(MIN(B.VALOR),1,'CON',2,'MNC',3,'SUBJ',4,'PP') ESTADO_AGR
                                   FROM (SELECT A.OR_CLUNICONTR,
                                                CASE

                                                    WHEN (A.TIPODEFAULT IN ('03','04','05','06','07','08','09','10','11','12','13','14','16')
                                                           OR (A.TIPODEFAULT IN ('','?') AND A.OR_SITCON IN ( 'J', 'K', 'Y', 'F'))
                                                         ) THEN
                                                         3--'SUBJ'
                                                    WHEN A.TIPODEFAULT = '15' THEN
                                                         4--'PP'
                                                    WHEN (A.TIPODEFAULT IN ('01','02','','?') AND A.OR_SITCON IN ( 'L', 'P', 'X' ,'S' ))  THEN
                                                         1--'CON'
                                                    WHEN  A.TIPODEFAULT IN ('01','02') THEN
                                                          2--'MNC
                                                    ELSE
                                                        2--'MNC
                                                 END   VALOR
                                          FROM  (SELECT OR_CLUNICONTR,TIPODEFAULT,OR_SITCON
                                                   FROM BAS_MEN.BASILEA
                                                  WHERE IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')--EMPRESAS
                                                    AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND  OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
                                                    AND (IN_INDMOR IN ('SI','CT') OR IN_SRATIN='BLQRM')
                                                    AND  FI_ELIMI1 = 'NO'
                                                  GROUP BY OR_CLUNICONTR,TIPODEFAULT,OR_SITCON
                                                 ) A
                                         ) B  GROUP BY B.OR_CLUNICONTR
                               ) C
                           LEFT JOIN  BAS_MEN.TIEMPO_ESTADO_AUX D
                             ON (D.OR_CLUNICONTR = C.OR_CLUNICONTR)
                         )H
                        ON (TE.OR_CLUNICONTR = H.OR_CLUNICONTR)
          WHEN MATCHED THEN
               UPDATE SET TE.ESTADO_AGR  = H.ESTADO_AGR,
                          TE.TIME_ESTADO = H.TIME_ESTADO,
                          TE.ULT_ACTUALIZACION = TO_NUMBER(SUBSTR(PN_FECPRO,1,6))
          WHEN NOT MATCHED THEN
               INSERT (ESTADO_AGR,OR_CLUNICONTR,TIME_ESTADO,ULT_ACTUALIZACION)
               VALUES (H.ESTADO_AGR,H.OR_CLUNICONTR,H.TIME_ESTADO,TO_NUMBER(SUBSTR(PN_FECPRO,1,6)));

    COMMIT;


    v_Num_Error := 3;

    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        v_Error_Orac := SUBSTR(SQLERRM,1,255);
        BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Error_Orac, v_Num_Error);
        RAISE;
END;

-- HDEV-107786 22/04/2022
PROCEDURE SP_AGR_Identificador_Hipotecario IS
--------------------------------------------------------------------------------------------------
--Se tendrán que haber fusionado  los contratos Secured que compartan ID_GRUPO_HIPOTECARIO.
---------------------------------------------------------------------------------------------------
  Cte_Proces CONSTANT VARCHAR2(80)   := 'AIRB - SP_AGR_Identificador_Hipotecario';

    v_Error_Orac   BAS_MEN.CONTROL_PROCES.ERROR_ORAC%TYPE      DEFAULT ' ';
    v_Num_Error    BAS_MEN.CONTROL_PROCES.NUM_ERROR%TYPE       DEFAULT 0;
     CURSOR CUR IS

                       SELECT /*+ parallel (D 4)(E 4)(F 4) (G 4)*/
                                                DISTINCT
                                                D.ID_GRUPO_HIPOTECARIO,
                                                D.ESTATUS,
                                                D.FI_ELIMI1,
                                                NULL CODENTAC,
                                                NULL TIPPROAC,
                                                NULL TITULARIDAD_RIESGO,
                                                D.CODCONAC,
                                                D.IN_SEGMBS0,
                                                D.PROMOTOR,
                                                D.TASACION,
                                                D.MAX_TASACION,
                                                D.TASACION_AGR,
                                                D.RIESGO_SINPIG_AGR,
                                                D.LTV_AGR,
                                                D.CLASIFICACION,
                                                D.CONTR_MAX_TAS,
                                                E.TIPO_BIEN,
                                                E.ID_BIEN,
                                                E.VALOR_BIEN_TOT,
                                                E.CODPOBLACI,
                                                E.CODPOSTAL,
                                                E.D_WR_INEF,
                                                E.CODINE_TEMP0,
                                                NVL(F.CLASIFICACION_ASII,'D') AS CLASIFICACION_ASII,
                                                D.FI_EADCONAIRB,
                                                D.RESIDUAL_MATURITY,
                                                D.FI_PD_COREPS,
                                                D.FI_EADCONAIRB_MAX,
                                                D.ESTADO_AGR,
                                                D.TIME_ESTADO
                                         FROM ( SELECT
                                                        DISTINCT
                                                        A.ID_GRUPO_HIPOTECARIO,
                                                        A.ESTATUS,
                                                        A.FI_ELIMI1,
                                                        A.CODCONAC,
                                                        A.IN_SEGMBS0,
                                                        CASE
                                                          WHEN A.IN_SEGMBS0 = '200' THEN
                                                              'S'
                                                          ELSE
                                                              'N'
                                                        END PROMOTOR,
                                                        A.TASACION,
                                                        A.MAX_TASACION,
                                                        A.TASACION_AGR,
                                                        A.RIESGO_SINPIG_AGR,
                                                        A.LTV_AGR,
                                                        A.CLASIFICACION,
                                                        C.CODCONAC CONTR_MAX_TAS,
                                                        A.TIPO_BIEN,
                                                        A.ID_BIEN,
                                                        A.VALOR_BIEN_TOT,
                                                        A.CODPOBLACI,
                                                        A.CODPOSTAL,
                                                        A.CLASIFICACION_ASII,
                                                        A.FI_EADCONAIRB,
                                                        A.RESIDUAL_MATURITY,
                                                        A.FI_PD_COREPS,
                                                        A.FI_EADCONAIRB_MAX,
                                                        A.ESTADO_AGR,
                                                        A.TIME_ESTADO
                                                   FROM BAS_MEN.GRP_HIPOTECARIO_ESTATUS  A
                                                  INNER JOIN   BAS_MEN.GRP_HIPOTECARIO_ESTATUS B
                                                     ON (B.ID_GRUPO_HIPOTECARIO=A.ID_GRUPO_HIPOTECARIO
                                                         AND B.ESTATUS=A.ESTATUS
                                                         AND  A.FI_EADCONAIRB_MAX= B.FI_EADCONAIRB_MAX

                                                        )
                                                  INNER JOIN   BAS_MEN.GRP_HIPOTECARIO_ESTATUS C
                                                     ON (C.ID_GRUPO_HIPOTECARIO=A.ID_GRUPO_HIPOTECARIO
                                                          AND C.ESTATUS=A.ESTATUS
                                                          AND C.TASACION=A.MAX_TASACION

                                                        )
                                                    )D
                                                LEFT JOIN BAS_MEN.CONTRATOS_ASG_POTENCIAL E
                                                 ON (E.CODCONAC=D.CONTR_MAX_TAS
                                                 AND D.ESTATUS='PE'

                                                 )
                                                LEFT JOIN BAS_MEN.MAESTRO_ZONA_GEOG_ABCD_201911 F
                                                      ON (F.CDIME_POBLACION_N1=E.CODINE_TEMP0
                                                          AND D.ESTATUS='PE');

    in_rec cur%ROWTYPE;
BEGIN
     BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');
     v_Num_Error:=1;

     BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.GRUPO_HIP_RESIDUAL_MATURITY');

     INSERT /*+ PARALLEL (x,4) */ INTO BAS_MEN.GRUPO_HIP_RESIDUAL_MATURITY x
     SELECT /*+ PARALLEL (A,4) */
            ID_GRUPO_HIPOTECARIO,
            OR_FECVTO,
            OR_VIDRESBAS as OR_VIDRES,
            CASE WHEN nvl(OR_VIDRESBAS, 0) NOT IN (0, 99999999, 88888888) AND OR_VIDRESBAS > 0 THEN OR_VIDRESBAS/365
                 WHEN OR_FECVTO > 19000000 AND OR_FECVTO < 20990101 THEN (TO_DATE(OR_FECVTO, 'YYYYMMDD') - TO_DATE(PN_FECPRO, 'YYYYMMDD')) / 365
                 ELSE 0
             END AS RESIDUAL_MATURITY
       FROM BAS_MEN.VISTA_CALCULO_LGD A
      WHERE A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
        AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND OR_SEGFIC2 NOT IN ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
        AND (A.IN_INDMOR NOT IN ('SI','CT') AND A.IN_SRATIN <> 'BLQRM')
        AND A.ID_GRUPO_HIPOTECARIO IS NOT NULL;
     COMMIT;

     v_Num_Error:=2;

     BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.GRP_HIPOTECARIO_ESTATUS');
     INSERT INTO /*+ PARALLEL (X 4) */ BAS_MEN.GRP_HIPOTECARIO_ESTATUS X (X.ID_GRUPO_HIPOTECARIO,X.ESTATUS,X.FI_ELIMI1,X.CODENTAC,X.TIPPROAC,X.CODCONAC,
                                                                          X.TITULARIDAD_RIESGO,X.IN_SEGMBS0,X.FI_EADCONAIRB,X.FI_EADCONAIRB_MAX,X.TASACION,X.MAX_TASACION,
                                                                          X.TASACION_AGR,X.FI_PD_COREPS,X.RESIDUAL_MATURITY,X.RIESGO_SINPIG_AGR,X.LTV_AGR, X.CLASIFICACION,
                                      X.ESTADO_AGR, X.TIME_ESTADO
                                                                          )
           SELECT /*+ PARALLEL (F,4)*/
                  F.ID_GRUPO_HIPOTECARIO,
                  F.ESTATUS,
                  F.FI_ELIMI1,
                  F.CODENTAC,
                  F.TIPPROAC,
                  F.CODCONAC,
                  F.TITULARIDAD_RIESGO,
                  F.IN_SEGMBS0,
                  F.FI_EADCONAIRB,
                  F.FI_EADCONAIRB_MAX,
                  F.TASACION,
                  F.MAX_TASACION,
                  F.TASACION_AGR,
                  F.FI_PD_COREPS,
                  F.RESIDUAL_MATURITY,
                  F.RIESGO_SINPIG_AGR,
                  F.LTV_AGR,
                  F.CLASIFICACION,
                  F.ESTADO_AGR,
                  F.TIME_ESTADO
             FROM (SELECT /*+ PARALLEL (E,4)*/
                             E.ID_GRUPO_HIPOTECARIO,
                             E.ESTATUS,
                             E.FI_ELIMI1,
                             E.CODENTAC,
                             E.TIPPROAC,
                             E.CODCONAC ,
                             E.TITULARIDAD_RIESGO,
                             E.IN_SEGMBS0,
                             E.FI_EADCONAIRB,
                             E.FI_EADCONAIRB_MAX,
                             E.TASACION,
                             E.MAX_TASACION,
                             SUM (E.TASACION) OVER (PARTITION BY E.ID_GRUPO_HIPOTECARIO) TASACION_AGR,
                             E.FI_PD_COREPS,
                             E.RESIDUAL_MATURITY,
                             sum ( E.LTV * E.TASACION ) OVER (PARTITION BY E.ID_GRUPO_HIPOTECARIO) RIESGO_SINPIG_AGR ,
                             CASE
                                 WHEN E.TASACION_AGR1<>0 THEN
                                     ( ( sum ( E.LTV * E.TASACION ) OVER (PARTITION BY E.ID_GRUPO_HIPOTECARIO) ) / SUM (E.TASACION) OVER (PARTITION BY E.ID_GRUPO_HIPOTECARIO))
                                 ELSE
                                    0
                              END  LTV_AGR,
              E.CLASIFICACION,
              NULL ESTADO_AGR,
              NULL TIME_ESTADO
                    FROM
                    (SELECT /*+ PARALLEL (A,4)(B,4) (C,4)(D,4)*/
                          DISTINCT A.ID_GRUPO_HIPOTECARIO,
                          'PE' ESTATUS,
                          A.FI_ELIMI1,
                          A.OR_CLUNIENT AS CODENTAC,
                          A.OR_CLUNIPROD AS TIPPROAC,
                          A.OR_CLUNICONTR AS CODCONAC ,
                          A.OR_TITULARITAT AS TITULARIDAD_RIESGO,
                          MIN(NVL(A.IN_SEGMBS0,0)) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) IN_SEGMBS0,
                          NVL(D.FI_EADCONAIRB,A.FI_EADCONAIRB) FI_EADCONAIRB,
                          MAX(NVL(D.FI_EADCONAIRB,0)) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) FI_EADCONAIRB_MAX,
                          nvl(a.TOTAL_VALOR_NETO_TOT_COND,0)  TASACION,
                          MAX(nvl(a.TOTAL_VALOR_NETO_TOT_COND,0) ) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) MAX_TASACION,
                          SUM(nvl(a.TOTAL_VALOR_NETO_TOT_COND,0) ) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) TASACION_AGR1,
                          NVL(A.IMPLTVEMP,0) LTV,
                          MAX(NVL(C.FI_PD_COREPS,0)) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) FI_PD_COREPS,
                          MAX(NVL(B.RESIDUAL_MATURITY,0)) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) RESIDUAL_MATURITY,
            CASE
              WHEN (A.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX') OR substr(A.or_proced ,1,4) = 'OFEX')
              OR A.IN_SEGMBS0 = '201' OR OR_ENTITY = 242 OR A.RIESGO_CORR_ADVERSA = 'SI'  THEN 'DEF'
                            WHEN (TIP.TIPGAR = 'HIP' OR HIP.CONTAGIO = 'HIP') AND A.OR_CODGAR NOT IN ('GR 11202','GR 11201','GR 11299') AND A.IN_SEGMBS<>'Project Finance' THEN 'SEC'
                            WHEN A.OR_PROCED ='LEASING' AND A.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031) THEN 'SEC'
                            WHEN (A.IN_SEGMBS<>'Project Finance' AND A.OR_CODGAR  IN ('GR 12199','GR 12117','GR 12106','GR 12107','GR 12108','GR 12109','GR 12111',
                                  'GR 12112','GR 12114','GR 12115','GR 12201','GR 12202','GR 12203','GR 12204','GR 12301','GR 12302','GR 12303','GR 12304','GR 12305',
                                 'GR 12307','GR 12308','GR 12116')
              ) THEN 'GDAI'
                            WHEN (TIP.TIPGAR='EXP' AND A.OR_CODGAR  IN ('GR 21106','GR 21110','GR 21104')) OR TIP.TIPGAR = 'D2' OR (A.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR A.ENTFAC<>9999) THEN 'GDAI'
                            ELSE 'UNSEC'
                          END CLASIFICACION
                    FROM BAS_MEN.VISTA_CALCULO_LGD A
                    LEFT JOIN (SELECT DISTINCT J.ID_GRUPO_HIPOTECARIO,MAX(NVL(J.RESIDUAL_MATURITY,0)) OVER (PARTITION BY J.ID_GRUPO_HIPOTECARIO) RESIDUAL_MATURITY
                     FROM BAS_MEN.GRUPO_HIP_RESIDUAL_MATURITY J
            )B
                    ON (B.ID_GRUPO_HIPOTECARIO = A.ID_GRUPO_HIPOTECARIO)
                     LEFT JOIN BAS_MEN.BASILEA_AIRB_PD_OLD C
                      ON (C.OR_IDREG=A.OR_IDREG)
                     LEFT JOIN BAS_MEN.MAESTRO_EAD_CONTRATOS D
                      ON (D.OR_CLUNICONTR= A.OR_CLUNICONTR)
           LEFT JOIN (SELECT TIPGAR, GARANTIA FROM BAS_MEN.MAESTRO_TIPGAR) TIP
                      ON (TIP.GARANTIA = A.OR_CODGAR)
                     LEFT JOIN (SELECT OR_TITULARITAT, OR_REFOPE, OR_CLUNICONTR, 'HIP' CONTAGIO FROM BAS_MEN.MAESTRO_TIT_REF_HIP) HIP
                      ON (HIP.OR_REFOPE = A.OR_REFOPE AND HIP.OR_TITULARITAT =A.OR_TITULARITAT AND HIP.OR_CLUNICONTR = A.OR_CLUNICONTR
            AND A.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS) AND (A.OR_PROCED IN ('CR-SINDIC', 'INV-C/C-CO','INV-C/C-CR','INV-C/C-EX','PR-DISPONI', 'PRES-DIVIS','PR-MOROS', 'PR-PENDENT', 'PR-PERIOD','PR-VENCUTS','SINDICDIV', 'PR-CONTENC') AND A.IN_TIPOREG NOT IN ('OXC', 'OXE', 'OX',  'ITOXE', 'MMOXE',  'ITOXC', 'MMOXC')
                           ))
                    WHERE A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')
                      AND (SUBSTR(OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND  OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
                      AND (A.IN_INDMOR NOT IN ('SI','CT') AND A.IN_SRATIN<>'BLQRM')
                      AND A.ID_GRUPO_HIPOTECARIO IS NOT NULL
                      )E
            UNION
              SELECT D.ID_GRUPO_HIPOTECARIO,
                     D.ESTATUS,
                     D.FI_ELIMI1,
                     D.CODENTAC,
                     D.TIPPROAC,
                     D.CODCONAC ,
                     D.TITULARIDAD_RIESGO,
                     D.IN_SEGMBS0,
                     D.FI_EADCONAIRB,
                     D.FI_EADCONAIRB_MAX,
                     D.TASACION,
                     D.MAX_TASACION,
                     SUM (D.TASACION) OVER (PARTITION BY D.ID_GRUPO_HIPOTECARIO) TASACION_AGR,
                     NULL FI_PD_COREPS,
                     NULL RESIDUAL_MATURITY,
                     sum ( D.LTV * D.TASACION ) OVER (PARTITION BY D.ID_GRUPO_HIPOTECARIO) RIESGO_SINPIG_AGR ,
                     CASE
                         WHEN D.TASACION_AGR1<>0 THEN
                             ( ( sum ( D.LTV * D.TASACION ) OVER (PARTITION BY D.ID_GRUPO_HIPOTECARIO) ) /SUM (D.TASACION) OVER (PARTITION BY D.ID_GRUPO_HIPOTECARIO))
                         ELSE
                            0
                      END  LTV_AGR,
            D.CLASIFICACION,
                  DECODE (MIN (D.ESTADO_AGR) OVER (PARTITION BY D.ID_GRUPO_HIPOTECARIO), '1', 'CON', '2', 'MNC', '3', 'SUBJ', '4', 'PP') ESTADO_AGR,
                      FIRST_VALUE(D.TIME_ESTADO) OVER (PARTITION BY D.ID_GRUPO_HIPOTECARIO ORDER BY D.ESTADO_AGR, D.TIME_ESTADO DESC) TIME_ESTADO
               FROM
                    (SELECT  /*+ PARALLEL (A,4)(B,4)*/
                            DISTINCT A.ID_GRUPO_HIPOTECARIO,
                            'NP' ESTATUS,
                            A.FI_ELIMI1,
                            A.OR_CLUNIENT AS CODENTAC,
                            A.OR_CLUNIPROD AS TIPPROAC,
                            A.OR_CLUNICONTR AS CODCONAC ,
                            A.OR_TITULARITAT AS TITULARIDAD_RIESGO ,
                            MIN(NVL(A.IN_SEGMBS0,0)) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) IN_SEGMBS0,
                            NVL(B.FI_EADCONAIRB,A.FI_EADCONAIRB) FI_EADCONAIRB,
                            MAX(NVL(B.FI_EADCONAIRB,0)) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) FI_EADCONAIRB_MAX,
                            nvl(a.TOTAL_VALOR_NETO_TOT_COND,0)  TASACION,
                            MAX(nvl(a.TOTAL_VALOR_NETO_TOT_COND,0) ) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) MAX_TASACION,
                            SUM(nvl(a.TOTAL_VALOR_NETO_TOT_COND,0) ) OVER (PARTITION BY A.ID_GRUPO_HIPOTECARIO) TASACION_AGR1,
                            NVL(A.IMPLTVEMPMOR,0) LTV,
            CASE
              WHEN (A.IN_TIPOREG IN ('OXC', 'OXE', 'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX') OR substr(A.or_proced ,1,4) = 'OFEX')
              OR A.IN_SEGMBS0 = '201' OR OR_ENTITY = 242 OR A.RIESGO_CORR_ADVERSA = 'SI'  THEN 'DEF'
                            WHEN (TIP.TIPGAR = 'HIP' OR HIP.CONTAGIO = 'HIP') AND A.OR_CODGAR NOT IN ('GR 11202','GR 11201','GR 11299') AND A.IN_SEGMBS<>'Project Finance' THEN 'SEC'
                            WHEN A.OR_PROCED ='LEASING' AND A.OR_TIPOBJETO IN (2010, 2011, 2020, 2021, 2030, 2031) THEN 'SEC'
                            WHEN (A.IN_SEGMBS<>'Project Finance' AND A.OR_CODGAR  IN ('GR 12199','GR 12117','GR 12106','GR 12107','GR 12108','GR 12109','GR 12111',
                                  'GR 12112','GR 12114','GR 12115','GR 12201','GR 12202','GR 12203','GR 12204','GR 12301','GR 12302','GR 12303','GR 12304','GR 12305',
                                 'GR 12307','GR 12308','GR 12116')
              ) THEN 'GDAI'
                            WHEN (TIP.TIPGAR='EXP' AND A.OR_CODGAR  IN ('GR 21106','GR 21110','GR 21104')) OR TIP.TIPGAR = 'D2' OR (A.OR_CODPRODO IN ('FA 00013', 'FA 00014', 'FA 00009', 'FA 00010', 'FA 00011', 'FA 00012') OR A.ENTFAC<>9999) THEN 'GDAI'
                            ELSE 'UNSEC'
                          END CLASIFICACION,
              TIEMP.TIME_ESTADO,
              DECODE((TIEMP.ESTADO_AGR),'CON','1','MNC','2','SUBJ','3','PP','4') AS ESTADO_AGR
                       FROM BAS_MEN.VISTA_CALCULO_LGD A
                       LEFT JOIN BAS_MEN.MAESTRO_EAD_CONTRATOS B
                      ON (B.OR_CLUNICONTR=A.OR_CLUNICONTR)
            LEFT JOIN (SELECT TIPGAR, GARANTIA FROM BAS_MEN.MAESTRO_TIPGAR) TIP
                      ON (TIP.GARANTIA = A.OR_CODGAR)
                     LEFT JOIN (SELECT OR_TITULARITAT, OR_REFOPE, OR_CLUNICONTR, 'HIP' CONTAGIO FROM BAS_MEN.MAESTRO_TIT_REF_HIP) HIP
                      ON (HIP.OR_REFOPE = A.OR_REFOPE AND HIP.OR_TITULARITAT =A.OR_TITULARITAT AND HIP.OR_CLUNICONTR = A.OR_CLUNICONTR
            AND A.OR_CODGAR NOT IN (SELECT CODGAR FROM BAS_MEN.GARANTIAS_PIGNORATIVAS) AND (A.OR_PROCED IN ('CR-SINDIC', 'INV-C/C-CO','INV-C/C-CR','INV-C/C-EX','PR-DISPONI', 'PRES-DIVIS','PR-MOROS', 'PR-PENDENT', 'PR-PERIOD','PR-VENCUTS','SINDICDIV', 'PR-CONTENC') AND A.IN_TIPOREG NOT IN ('OXC', 'OXE', 'OX',  'ITOXE', 'MMOXE',  'ITOXC', 'MMOXC')
                           ))
            LEFT JOIN (BAS_MEN.TIEMPO_ESTADO_AUX) TIEMP
                       ON (a.OR_CLUNICONTR = TIEMP.OR_CLUNICONTR)
                      WHERE A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027')--EMPRESAS
                        AND (SUBSTR(A.OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND  A.OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5')) --EXCLUYENDO CORPORATES Y GRUPOS
                        AND (A.IN_INDMOR IN ('SI','CT') OR A.IN_SRATIN='BLQRM')
                        AND A.ID_GRUPO_HIPOTECARIO IS NOT NULL
                        ) D
                ) F;

      COMMIT;
      v_Num_Error:=2;
      open cur;
        LOOP
          fetch cur into in_rec;
          EXIT WHEN cur%notfound;
          BEGIN
             v_Num_Error:=3;
             UPDATE BAS_MEN.GRP_HIPOTECARIO_ESTATUS
               SET  PROMOTOR           = in_rec.PROMOTOR,
                    CONTR_MAX_TAS      = in_rec.CONTR_MAX_TAS,
                    TIPO_BIEN          = in_rec.TIPO_BIEN,
                    ID_BIEN            = in_rec.ID_BIEN,
                    VALOR_BIEN_TOT     = in_rec.VALOR_BIEN_TOT,
                    CODPOBLACI         = in_rec.CODPOBLACI,
                    CODPOSTAL          = in_rec.CODPOSTAL,
                    D_WR_INEF          = in_rec.D_WR_INEF ,
                    CODINE_TEMP0       = in_rec.CODINE_TEMP0,
                    CLASIFICACION_ASII = in_rec.CLASIFICACION_ASII
             WHERE ID_GRUPO_HIPOTECARIO=in_rec.ID_GRUPO_HIPOTECARIO
               AND ESTATUS             =in_rec.ESTATUS;
          COMMIT;
          EXCEPTION
             WHEN OTHERS THEN
                v_Num_Error:=4;
        END;

       END LOOP;
   -- close the cursor
   
COMMIT;

  BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        v_Error_Orac := SUBSTR(SQLERRM,1,255);
        BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Error_Orac, v_Num_Error);
        RAISE;
END;

------
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- CALCUL_LGD
-----------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE Fnc_Calcul_Lgd IS

     VV_LGDMEDIA       FLOAT(126);
     VV_LGD_LR_MEDIA   FLOAT(126);
     VN_LGD_FLOOR_RES  BAS_MEN.LGD_MEDIA_HIPOTECARIA.LGD_FLOOR%TYPE;
     VN_LGD_FLOOR_COM  BAS_MEN.LGD_MEDIA_HIPOTECARIA.LGD_FLOOR%TYPE;
     VN_Tipo_Finca     BAS_MEN.LGD_MEDIA_HIPOTECARIA.TIPO_FINCA%TYPE;

     Cte_Proceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := 'AIRB - Fnc_Calcul_Lgd '||PV_TABLA||' '||PN_FECPRO;

     --- Cursor que calcula la LGD para préstamos hipotecarios, sin valor de tasación, sin valor concedido y sin loan to value.
     CURSOR BASILEA2 IS
         SELECT /*+ full(a) full(b) parallel (a 4) parallel (b 4) */ A.OR_IDREG,
                DECODE(SIGN((IN_ANTIGU/365)-3),-1,2,DECODE(SIGN((IN_ANTIGU/365)-5),-1,4,
                DECODE(SIGN((IN_ANTIGU/365)-5),0,4,6))) EDAD,
                FI_LGDNOMORA, A.OR_TIPOFI,
                DECODE(TIPO_FINCA, 'RES', TIPO_FINCA, 'NO RES') TIPO_FINCA
           FROM BAS_MEN.BASILEA A
           INNER JOIN BAS_MEN.BASILEA_AIRB_LGD B
           ON(B.OR_IDREG = A.OR_IDREG)
           INNER JOIN BAS_MEN.MAESTRO_FINCA_INMOBILIARIA C
           ON(C.TIPOFI = A.OR_TIPOFI)
                LEFT JOIN BAS_MEN.GARANTIAS_PIGNORATIVAS D

                ON(D.CODGAR  = A.OR_CODGAR
                AND D.CODGAR IS NULL)
          WHERE A.IN_SEGMBS0 NOT IN ('201', '203', '204')
            AND A.IN_SEGMBSINI = '103'
            AND A.OR_VALTAS = 0
            AND A.OR_CONCED = 0
            AND A.OR_IMPLTV = 0



            AND A.IN_TIPOREG NOT IN ('OXC', 'OXE', 'MMOXE', 'OX', 'RX', 'ITOXE', 'ITOX', 'ITRX');

BEGIN

    VN_NUMERR := 0;
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (Cte_Proceso, SYSDATE, 'INICIADO');
    COMMIT;

    SP_Carga_Maestros_y_Auxiliares;

    VN_COUNT := 0;
    VN_NUMERR:= 1;

    SP_Carga_Maturity_prestamos;

    VN_COUNT := 0;
    VN_NUMERR:= 2;

    SP_Carga_Maturity_Avales;

    VN_NUMERR:= 3;
    VN_COUNT := 0;

    SP_MultipLI_Matricula_Default;
    VN_NUMERR:= 4;

    /*HDEV-107786 lgd*/
    SP_Act_Tiempo_Estado_Contrato;
    VN_NUMERR:= 5;
    /*HDEV-107786 lgd 22/04/2022*/
    --busco informacion  para la tabla CONTRATOS_ASG_POTENCIAL
    SP_Contratos_Asg_Potencial;
    VN_NUMERR:= 6;

     /*HDEV-107786 lgd 22/04/2022*/
    --Se tendrán que haber fusionado  los contratos Secured que compartan ID_GRUPO_HIPOTECARIO.
    SP_Agr_Identificador_Hipotecario;

    VN_NUMERR:= 7;
    /*HDEV-107786 lgd*/
    --En este proceso vamos a procesar la LGD  tanto para empresas y no empresas.
     BAS_MEN.CALCULO_LGD.PROC_CALCULO_LGD (PN_FecPro);

    VN_NUMERR:= 8;

    -- Tabla que calcula para Préstamos Hipotecarios, la LGD Media por edad del préstamo y el tipo de finca (residencial/no residencial).
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_LGD_MEDIA');

    INSERT /*+ parallel (G 4)*/ INTO BAS_MEN.MAESTRO_LGD_MEDIA G

  /*HDEV-107786 CAMBIO (+) POR LEFT JOIN*/

         -- SELECT /*+ full(b) parallel (B 4)*/  EDAD, TIPO_FINCA,
                -- SUM(FI_LGDAIRB * B.FI_EADAIRB)/ sum(B.FI_EADAIRB) LGD_MEDIA, SUM(FI_LGDLR * B.FI_EADAIRB)/ sum(B.FI_EADAIRB) LGD_LR_MEDIA
           -- FROM (SELECT /*+ FULL(A) parallel (a 4)*/ OR_IDREG, DECODE(TIPO_FINCA, 'RES', TIPO_FINCA, 'NO RES') TIPO_FINCA,
                        -- DECODE(SIGN((IN_ANTIGU/365)-3),-1,2,DECODE(SIGN((IN_ANTIGU/365)-5),-1,4,DECODE(SIGN((IN_ANTIGU/365)-5),0,4,6))) EDAD
                   -- FROM BAS_MEN.BASILEA                    A
                      -- , BAS_MEN.MAESTRO_FINCA_INMOBILIARIA C
                      -- , BAS_MEN.GARANTIAS_PIGNORATIVAS     D
                  -- WHERE A.OR_TIPOFI    = TIPOFI
                    -- AND A.OR_CODGAR    = D.CODGAR(+)
                    -- AND D.CODGAR      IS NULL
                    -- AND A.IN_SEGMBSINI = '103'
                    -- AND A.IN_METODE    = 'AIRB'
                    -- AND A.IN_SEGMBS0 NOT IN ('201','203','204')
                    -- AND A.OR_IMPLTV   <> 0
                -- )                            F
              -- , BAS_MEN.BASILEA_AIRB_LGD     B
          -- WHERE F.OR_IDREG = B.OR_IDREG
          -- GROUP BY EDAD, TIPO_FINCA;

      SELECT /*+ full(b) parallel (B 4)*/  EDAD, TIPO_FINCA,

            CASE
                 WHEN SUM(B.FI_EADAIRB)<> 0 THEN
                      SUM(FI_LGDAIRB * B.FI_EADAIRB)/ sum(B.FI_EADAIRB)
                 ELSE
                      0
            END  LGD_MEDIA,
            CASE
                 WHEN sum(B.FI_EADAIRB)<> 0 THEN
                     SUM(FI_LGDLR * B.FI_EADAIRB)/ sum(B.FI_EADAIRB)
                 ELSE
                      0
            END LGD_LR_MEDIA
                --SUM(FI_LGDAIRB * B.FI_EADAIRB)/ sum(B.FI_EADAIRB) LGD_MEDIA, SUM(FI_LGDLR * B.FI_EADAIRB)/ sum(B.FI_EADAIRB) LGD_LR_MEDIA
        FROM (SELECT /*+ FULL(A) parallel (a 4)*/ OR_IDREG, DECODE(TIPO_FINCA, 'RES', TIPO_FINCA, 'NO RES') TIPO_FINCA,
                        DECODE(SIGN((IN_ANTIGU/365)-3),-1,2,DECODE(SIGN((IN_ANTIGU/365)-5),-1,4,DECODE(SIGN((IN_ANTIGU/365)-5),0,4,6))) EDAD
                FROM BAS_MEN.BASILEA                    A
                       INNER JOIN BAS_MEN.MAESTRO_FINCA_INMOBILIARIA C
                       ON(C.TIPOFI = A.OR_TIPOFI)
                       LEFT JOIN BAS_MEN.GARANTIAS_PIGNORATIVAS     D


                        ON(D.CODGAR = A.OR_CODGAR
                            AND  D.CODGAR   IS NULL)
               WHERE A.IN_SEGMBSINI = '103'
                 AND A.IN_METODE    = 'AIRB'
                 AND A.IN_SEGMBS0 NOT IN ('201','203','204')
                 AND A.OR_IMPLTV   <> 0
                )                            F
              , BAS_MEN.BASILEA_AIRB_LGD     B
          WHERE F.OR_IDREG = B.OR_IDREG
          GROUP BY EDAD, TIPO_FINCA;

    COMMIT;
      dbms_stats.gather_table_stats('BAS_MEN','MAESTRO_LGD_MEDIA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    VN_NUMERR:= 9;

    FOR CUR IN BASILEA2 LOOP

        VV_LGDMEDIA := 99;
        VV_LGD_LR_MEDIA := 99;

        BEGIN
           SELECT LGD_MEDIA, LGD_LR_MEDIA
             INTO VV_LGDMEDIA, VV_LGD_LR_MEDIA
             FROM BAS_MEN.MAESTRO_LGD_MEDIA
            WHERE EDAD = CUR.EDAD
              AND TIPO_FINCA = CUR.TIPO_FINCA;
        EXCEPTION
            WHEN OTHERS THEN
                 VV_LGDMEDIA := 99;
                 VV_LGD_LR_MEDIA := 99;
        END;

        UPDATE BAS_MEN.BASILEA_AIRB_LGD
           SET FI_LGDNOMORA = VV_LGDMEDIA,
               FI_LGDLR = VV_LGD_LR_MEDIA,
               FI_LGDLRNOMORA = VV_LGD_LR_MEDIA
         WHERE OR_IDREG = CUR.OR_IDREG;

    END LOOP;

    COMMIT;

    VN_NUMERR:= 10;

    --
    -- JCVJCVJCV 201403
    --    Se modifica el floor hipotecario actual (Residencial) para excluir las exposiciones con garantías de administraciones centrales
    --    y se añade uno nuevo para Comercial.
    --
    -- 201403 20140529 La LGD del FLOOR de RRE y CRE hay que filtrarla para QUE NO SE TENGAN EN CUENTA las exposiciones de
    --  GALLEGO, LLOYS, BMN  y CAM (que no sea EMPRESAS y CCAA).

    DELETE BAS_MEN.LGD_MEDIA_HIPOTECARIA;
    COMMIT;

    INSERT /*+ parallel (i 6)*/ INTO BAS_MEN.LGD_MEDIA_HIPOTECARIA i

  /*HDEV-107786 CAMBIO (+) POR LEFT JOIN*/

    -- SELECT /*+ full(a) full(c) parallel (a 4) parallel (C 4)*/
           -- TIPO_FINCA
         -- , SUM(FI_LGDAIRB * A.FI_EADAIRB)/ SUM(A.FI_EADAIRB) AS LGD_FLOOR
        -- FROM BAS_MEN.BASILEA                     A
           -- , BAS_MEN.BASILEA_AIRB_LGD            C
           -- , BAS_MEN.MAESTRO_FINCA_INMOBILIARIA  B
           -- , BAS_MEN.GARANTIAS_PIGNORATIVAS      D
           -- , (select floor(OR_CLUNICONTR/100) contrato,  NOMBRE_ASEGURADORA
                -- from BAS_MEN.MAESTRO_FACTORING_COBERTURA
               -- where NOMBRE_ASEGURADORA = 'CESCE') MFaCo
       -- WHERE A.OR_IDREG                  = C.OR_IDREG
         -- AND A.OR_TIPOFI                 = B.TIPOFI
         -- AND A.OR_CODGAR                 = CODGAR(+)
         -- AND CODGAR                     IS NULL
         -- AND A.OR_CLUNICONTR             = MFaCo.contrato (+)
         -- and NOMBRE_ASEGURADORA is null
         -- AND A.OR_CODGAR            NOT IN ('GR 12110', 'GR 12111', 'GR 12305', 'GR 21104', 'GE 21109', 'EXP21109')
         -- AND OR_TIPGAR                  IN ('HC','HV','HR','HX')
         -- AND (IN_SEGMBSINI              IN ('104','103','002', '017', '101', '102')
             -- OR IN_SEGMBS1               = '501'
             -- )
         -- AND TIPO_FINCA                  = 'RES'
         -- AND IN_METODE                   = 'AIRB'
         -- AND INMUEBLE                    = 'INMUEBLE'
         -- AND A.IN_TIPOREG NOT           IN ('OXC', 'OXE',  'MMOXC', 'MMOXE', 'OX', 'RX',  'ITOXE', 'ITOXC', 'ITOX', 'ITRX')
         -- AND NOT (    A.IN_OPER_MIGR    IN  ( 'BCG', 'LBI', 'BMN')
                 -- OR ( A.IN_OPER_MIGR     = 'CAM' AND A.IN_SEGMBSINI IN ('103','104') )
                 -- )
      -- GROUP BY TIPO_FINCA;

    SELECT /*+ full(a) full(c) parallel (a 4) parallel (C 4)*/

           TIPO_FINCA,
        CASE
                 WHEN SUM(A.FI_EADAIRB)<> 0 THEN
                      SUM(FI_LGDAIRB * A.FI_EADAIRB)/ SUM(A.FI_EADAIRB)
                 ELSE
                      0
         END  LGD_FLOOR
        --  , SUM(FI_LGDAIRB * A.FI_EADAIRB)/ SUM(A.FI_EADAIRB) AS LGD_FLOOR
      FROM BAS_MEN.BASILEA                     A
           INNER JOIN BAS_MEN.BASILEA_AIRB_LGD     C
            ON(C.OR_IDREG = A.OR_IDREG)
           INNER JOIN BAS_MEN.MAESTRO_FINCA_INMOBILIARIA  B
            ON(B.TIPOFI = A.OR_TIPOFI)
           LEFT JOIN BAS_MEN.GARANTIAS_PIGNORATIVAS      D
            ON(D.CODGAR = A.OR_CODGAR
                AND D.CODGAR          IS NULL)
           /* LEFT JOIN (select floor(OR_CLUNICONTR/100) contrato,  NOMBRE_ASEGURADORA
                from BAS_MEN.MAESTRO_FACTORING_COBERTURA
               where NOMBRE_ASEGURADORA = 'CESCE') MFaCo
            ON(MFaCo.contrato = A.OR_CLUNICONTR)*/
           LEFT JOIN (select floor(OR_CLUNICONTR/100) contrato,  NOMBRE_ASEGURADORA, OR_REFOPE --11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column
                 from BAS_MEN.MAESTRO_FACTORING_COBERTURA
                where NOMBRE_ASEGURADORA = 'CESCE') MFaCo
                ON(
                   ( MFaCo.contrato = A.OR_CLUNICONTR AND MFaCo.OR_REFOPE = A.OR_REFOPE AND MFaCo.OR_REFOPE IS NOT NULL )
                 OR
                   ( MFaCo.contrato = A.OR_CLUNICONTR AND MFaCo.OR_REFOPE IS NULL)
                  )
      WHERE NOMBRE_ASEGURADORA is null
        AND A.OR_CODGAR            NOT IN ('GR 12110', 'GR 12111', 'GR 12305', 'GR 21104', 'GE 21109', 'EXP21109')
        AND OR_TIPGAR                  IN ('HC','HV','HR','HX')
        AND (IN_SEGMBSINI              IN ('104','103','002', '017', '101', '102')
             OR IN_SEGMBS1               = '501'
             )
        AND TIPO_FINCA                  = 'RES'
        AND IN_METODE                   = 'AIRB'
        AND B.INMUEBLE                    = 'INMUEBLE'
        AND A.IN_TIPOREG NOT           IN ('OXC', 'OXE',  'MMOXC', 'MMOXE', 'OX', 'RX',  'ITOXE', 'ITOXC', 'ITOX', 'ITRX')
        AND NOT (    A.IN_OPER_MIGR    IN  ( 'BCG', 'LBI', 'BMN')
                 OR ( A.IN_OPER_MIGR     = 'CAM' AND A.IN_SEGMBSINI IN ('103','104'))
                 )
                  GROUP BY TIPO_FINCA;

     COMMIT;

       dbms_stats.gather_table_stats('BAS_MEN','LGD_MEDIA_HIPOTECARIA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );
     VN_NUMERR:= 11;

     INSERT /*+ parallel (i 6)*/ INTO BAS_MEN.LGD_MEDIA_HIPOTECARIA i

   /*HDEV-107786 CAMBIO (+) POR LEFT JOIN*/

     -- SELECT /*+ full(a) full(c) parallel (a 4) parallel (C 4)*/
            -- TIPO_FINCA
         -- , SUM(FI_LGDAIRB * A.FI_EADAIRB)/ SUM(A.FI_EADAIRB) AS LGD_FLOOR
         -- FROM BAS_MEN.BASILEA                     A
            -- , BAS_MEN.BASILEA_AIRB_LGD            C
            -- , BAS_MEN.MAESTRO_FINCA_INMOBILIARIA  B
            -- , BAS_MEN.GARANTIAS_PIGNORATIVAS      D
            -- , (select floor(OR_CLUNICONTR/100) contrato,  NOMBRE_ASEGURADORA
                 -- from BAS_MEN.MAESTRO_FACTORING_COBERTURA
                -- where NOMBRE_ASEGURADORA = 'CESCE') MFaCo
        -- WHERE A.OR_IDREG                  = C.OR_IDREG
          -- AND A.OR_TIPOFI                 = B.TIPOFI
          -- AND A.OR_CODGAR                 = CODGAR(+)
          -- AND CODGAR                     IS NULL
          -- AND A.OR_CODGAR            NOT IN ('GR 12110', 'GR 12111', 'GR 12305', 'GR 21104', 'GE 21109', 'EXP21109')
          -- AND OR_TIPGAR                  IN ('HC','HV','HR','HX')
          -- AND (IN_SEGMBSINI              IN ('104','103','002', '017', '101', '102')
           -- OR IN_SEGMBS1                  = '501')
          -- AND TIPO_FINCA                  = 'COMERCIAL'
          -- AND IN_METODE                   = 'AIRB'
          -- AND INMUEBLE                    = 'INMUEBLE'
          -- AND A.IN_TIPOREG NOT           IN ('OXC', 'OXE',  'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX')
          -- AND A.OR_CLUNICONTR             = MFaCo.contrato (+)
          -- and NOMBRE_ASEGURADORA is null
          -- AND NOT (    A.IN_OPER_MIGR    IN  ( 'BCG', 'LBI', 'BMN')
                  -- OR ( A.IN_OPER_MIGR     = 'CAM' AND A.IN_SEGMBSINI IN ('103','104') )
                  -- )
       -- GROUP BY TIPO_FINCA;

       SELECT /*+ full(a) full(c) parallel (a 4) parallel (C 4)*/

            TIPO_FINCA,
            CASE
                 WHEN SUM(A.FI_EADAIRB)<> 0 THEN
                      SUM(FI_LGDAIRB * A.FI_EADAIRB)/ SUM(A.FI_EADAIRB)
                 ELSE
                      0
            END  LGD_FLOOR
        --  , SUM(FI_LGDAIRB * A.FI_EADAIRB)/ SUM(A.FI_EADAIRB) AS LGD_FLOOR
         FROM BAS_MEN.BASILEA                     A
            INNER JOIN BAS_MEN.BASILEA_AIRB_LGD           C
                ON(C.OR_IDREG = A.OR_IDREG)
            INNER JOIN BAS_MEN.MAESTRO_FINCA_INMOBILIARIA  B
                ON(B.TIPOFI = A.OR_TIPOFI)
            LEFT JOIN BAS_MEN.GARANTIAS_PIGNORATIVAS      D
                ON(D.CODGAR = A.OR_CODGAR
                    AND D.CODGAR IS NULL)
            /* LEFT JOIN (select floor(OR_CLUNICONTR/100) contrato,  NOMBRE_ASEGURADORA
                from BAS_MEN.MAESTRO_FACTORING_COBERTURA
               where NOMBRE_ASEGURADORA = 'CESCE') MFaCo
            ON(MFaCo.contrato = A.OR_CLUNICONTR)*/
           LEFT JOIN (select floor(OR_CLUNICONTR/100) contrato,  NOMBRE_ASEGURADORA, OR_REFOPE --11/08/2022 KAT - HDEV-177542 Modified the logic to include the OR_REFOPE column
                 from BAS_MEN.MAESTRO_FACTORING_COBERTURA
                where NOMBRE_ASEGURADORA = 'CESCE') MFaCo
                ON(
                   ( MFaCo.contrato = A.OR_CLUNICONTR AND MFaCo.OR_REFOPE = A.OR_REFOPE AND MFaCo.OR_REFOPE IS NOT NULL )
                 OR
                   ( MFaCo.contrato = A.OR_CLUNICONTR AND MFaCo.OR_REFOPE IS NULL)
                  )
        WHERE  A.OR_CODGAR            NOT IN ('GR 12110', 'GR 12111', 'GR 12305', 'GR 21104', 'GE 21109', 'EXP21109')
          AND OR_TIPGAR                  IN ('HC','HV','HR','HX')
          AND (IN_SEGMBSINI              IN ('104','103','002', '017', '101', '102')
           OR IN_SEGMBS1                  = '501')
          AND TIPO_FINCA                  = 'COMERCIAL'
          AND IN_METODE                   = 'AIRB'
          AND B.INMUEBLE                    = 'INMUEBLE'
          AND A.IN_TIPOREG NOT           IN ('OXC', 'OXE',  'MMOXC', 'MMOXE', 'OX', 'RX', 'ITOXC', 'ITOXE', 'ITOX', 'ITRX')

          and NOMBRE_ASEGURADORA is null
          AND NOT (    A.IN_OPER_MIGR    IN  ( 'BCG', 'LBI', 'BMN')
                  OR ( A.IN_OPER_MIGR     = 'CAM' AND A.IN_SEGMBSINI IN ('103','104') )
                  )
       GROUP BY TIPO_FINCA;

     COMMIT;

      dbms_stats.gather_table_stats('BAS_MEN','LGD_MEDIA_HIPOTECARIA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

     VN_NUMERR:= 12;

     BEGIN

           SELECT LGD_FLOOR
             INTO VN_LGD_FLOOR_RES
             FROM BAS_MEN.LGD_MEDIA_HIPOTECARIA
            WHERE TIPO_FINCA    = 'RES';

           SELECT LGD_FLOOR
             INTO VN_LGD_FLOOR_COM
             FROM BAS_MEN.LGD_MEDIA_HIPOTECARIA
            WHERE TIPO_FINCA    = 'COMERCIAL';

     END;

     VN_NUMERR:= 99;
     --VV_MENSAJE:= TO_CHAR('La LGD Floor RES es de:    ' ||VN_LGD_FLOOR_RES||' -- '||'La LGD Floor COM es de:    ' ||VN_LGD_FLOOR_COM);

     PV_RET := 'OK';

     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT      = 'FINALIZADO'
          , DATA_FIN   = SYSDATE
          , FINALITZAT = PV_RET
          , ERROR_ORAC = VV_MENSAJE
          , ERROR_PROG = VV_MENSAJE2
          --, REG_UPD_OK = VN_COUNT
          --, REG_INS_OK = VN_LGD_FLOOR
      WHERE PROCES = Cte_Proceso
        AND ESTAT  = 'INICIADO';

     COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';

     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO'
          , DATA_FIN = SYSDATE
          , FINALITZAT = 'KO'
          --, REG_UPD_OK = VN_COUNT
          --, REG_INS_OK = VN_LGD_FLOOR
          , ERROR_ORAC = VV_MENSAJE
          , ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255)
          , NUM_ERROR  = VN_NUMERR
      WHERE PROCES = Cte_Proceso
        AND ESTAT  = 'INICIADO';

    COMMIT;
    RAISE;

END;

/************************************************************************************/
-- PROCESO PRINCIPAL--
/************************************************************************************/
BEGIN
    FNC_CALCUL_LGD;
END; -- Fin Procedimiento METODO_AIRB_LGD

/

show errors;


create or replace PROCEDURE BAS_MEN.UPDATE_PROCESO_LGD (PROCESO IN VARCHAR2)
IS

/* *******************************************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA_AIRB_LGD                             */
/* *******************************************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA_AIRB_LGD                                      */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA_AIRB_LGD                                               */
/*      PARÁMETROS update a ejecutar  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_AIRB_PARAM_SAS                                  */
/*      TABLAS de updates de usuario  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_AIRB_XX_SAS                                     */
/* *******************************************************************************************************************************/

    --
    -- Variables del proceso principal.
    --

    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(255)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT ' ';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA_AIRB_LGD';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';
    ncount                  NUMBER                  DEFAULT 0;

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
         where EN_PROCESO = PROCESO
         order by TABLA;

BEGIN
    ROLLBACK;                                                -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.

    v_NumErr := 0;

    FOR C_UPD IN Cursor_Update LOOP

            -- Parámetros relativos al update a procesar
            In_Tabla_Orig := C_UPD.TABLA;

            Cte_Proces          := 'UPDATE PROCESO LGD Tabla_Orig: '|| In_Tabla_Orig;
            v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
            --
            -- Información de Inicio en Control del Proceso.
            --
            v_NumErr := 1;
            INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
            VALUES (Cte_Proces, SYSDATE, 'INICIADO');
            COMMIT;
            --
            -- Insersión en tabla de descartes
            --
            v_Numerr := 2;
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (I 8)*/ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA_LGD I SELECT /*+ PARALLEL (A 8)*/ ''' || v_Tabla_Orig || ''' , sysdate , A.* FROM '||  v_Tabla_Base || ' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            COMMIT;
            --
            -- Eliminación de registros en Basilea AIRB.
            --
            v_Numerr := 3;
            v_Sentencia_dinamica := 'DELETE /*+ PARALLEL (A 8)*/ '||v_Tabla_Base||' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            COMMIT;
            --
            -- Insersión de registros en Basilea AIRB.
            --
            v_Numerr := 4;
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (A 8)*/ INTO '||v_Tabla_Base||' A SELECT * FROM '||v_Tabla_Orig;
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            v_RegIns := SQL%ROWCOUNT;
            COMMIT;
            --
            -- Insercción de registros en tabla final.
            --
            v_Numerr := 9;
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (I 8)*/ INTO BAS_MEN.UPDATES_BASILEA_AIRB_LGD I SELECT /*+ PARALLEL (A 8) */ ''' || v_Tabla_Orig || ''' AS TABLA_ORIGEN, sysdate, A.* FROM ' || v_Tabla_Base|| ' A, ' || v_Tabla_Orig || ' B WHERE A.OR_IDREG = B.OR_IDREG';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            --
            -- Actualización del Control del Proceso.
            --
            v_Numerr := 10;
            UPDATE BAS_MEN.CONTROL_PROCES
               SET ESTAT       = 'FINALIZADO'
                 , DATA_FIN    = SYSDATE
                 , FINALITZAT  = v_Fin_Proc
                 , REG_INS_OK  = v_RegIns
                 , ERROR_ORAC  = v_Mensaje_Err
             WHERE PROCES  = Cte_Proces
               AND ESTAT   = 'INICIADO';

            COMMIT;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN

    ROLLBACK;

    v_Fin_Proc   := 'KO';
    v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);
    --
    --      Actualización del Control del Proceso.
    --
    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = v_Fin_Proc
         , ERROR_ORAC  = v_Mensaje_Err
         , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
         , NUM_ERROR   = v_NumErr
     WHERE PROCES  = Cte_Proces
       AND ESTAT   = 'INICIADO';

    COMMIT;

    RAISE;

END;

/

show errors;

create or replace PROCEDURE       BAS_MEN.BASI_METODO_AIRB_LGD IS

    vProces           CONSTANT VARCHAR2(40)   := 'AIRB LGD';
    vNumErr           NUMBER(2)               DEFAULT 1;
    vCodi             NUMBER(10)              DEFAULT 0;
    vDescripcio       VARCHAR2(255)           DEFAULT '';

   VV_TABLA       VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO      NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO      NUMBER(6);   -- Ojo con la fecha del proceso.
   VD_FECPRO      DATE;
   VV_RETORNO     VARCHAR2(2):='OK';

BEGIN

  COMMIT;
  vNumErr := 1;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  vNumErr := 2;

  BAS_MEN.METODO_AIRB_LGD (VV_TABLA, VN_FECPRO, VV_RETORNO);
  COMMIT;

  vNumErr := 3;

  --Llama a la funcion de UPDATES BASILEA LGD
  BAS_MEN.UPDATE_PROCESO_LGD('UPDATE_PROCESO_AIRB_LGD');
  COMMIT;

EXCEPTION
    WHEN others THEN
        ROLLBACK;

        vcodi:=sqlcode;
        vdescripcio:=sqlerrm;

        INSERT INTO ERRORS (proces,numerr,codi,descripcio,data)
        VALUES (vproces,vnumerr,vcodi,vdescripcio,sysdate);

        COMMIT;

        RAISE;

END;

/


select * from sys.user_errors WHERE NAME = 'BASI_METODO_AIRB_LGD';
--bka40102=====================================================================================================
Select 'bka40102' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.CAL_CAPITAL_REG ( PV_IN_SEG     IN  VARCHAR2
                                                     , PV_IN_SEGINI  IN  VARCHAR2
                                                     , PV_IN_INDMOR  IN  VARCHAR2
                                                     , PD            IN  FLOAT
                                                     , LGD           IN  FLOAT
                                                     , EAD           IN  NUMBER
                                                     , BE            IN  FLOAT
                                                     , M             IN  FLOAT
                                                     , S             IN  FLOAT
                                                     , W             IN  FLOAT
                                                     , R             OUT FLOAT
                                                     , b             OUT FLOAT
                                                     , K             OUT FLOAT
                                                     , RWA           OUT FLOAT
                                                     , RET           OUT VARCHAR2
                                                     )
IS

--Procedimiento de cálculo de capital regulatorio para las distintas clases de exposición y para los
--métodos FIRB, AIRB y SAIRB(método AIRB con ciertos parámetros estresados).
--Aplicación de las fórmulas pertenecientes al documento Nuevo Acuerdo de Capital BIS II.
-- Si no es moroso, multiplicamos la RWA por 1,06, y si lo es, miramos que si es ESPECIFICA, calculamos 'K' utilizando
-- la variable 'PORPROP'/100 y sino, calculamos 'K' con -1. Xisco/JMC. 22/03.
-- utilizacion PORAPL sustitución PORPRO/100 /JMC-10-08

BEGIN
   RET:= 'KO';
   R:= 0;       --Correlación.
   b:= 0;       --Ajuste Maturity.
   K:= 0;       --Requerimiento de capital (en %).
   RWA:=0;      --Risk Weighted Assets.

   IF PD != 0 THEN
      --Cálculo para Empresas, Soberanos, Bancos y Entidades Financieras.
      -- JCVJCVJCV 201403 Se añaden 2 nuevas categorizaciones :
      -- Grandes EEFF y Entes financieros no regulados (SegAirb 'EMP/SOB/EEFF-CC' y 'SME-CC' respectivamente)
      --    Para dichas exposiciones y que no seán morosas se multiplicará la correlación (R) por 1.25
      --
      IF PV_IN_SEG IN ('EMP/SOB/EEFF', 'EMP/SOB/EEFF-CC') THEN

         IF PV_IN_INDMOR = 'NO' THEN
            R := 0.12 * (1 - Exp(-50 * PD)) / (1 - Exp(-50)) + 0.24 * (1 - (1 - Exp(-50 * PD)) / (1 - Exp(-50)));
            b := power((0.11852 - 0.05478 * Ln(PD)),2);

            IF PV_IN_SEG = 'EMP/SOB/EEFF-CC' THEN
              R := R * 1.25;
            END IF;

            K := (LGD * BAS_MEN.fnc_normsdist(power((1 - R),-0.5) * BAS_MEN.fnc_normsinv(PD) + power((R / (1 - R)),0.5)
            * BAS_MEN.fnc_normsinv(0.999)) - PD * LGD) * power((1 - 1.5 * b),-1) * (1 + (M - 2.5) * b);

            RWA := K * 12.5 * EAD*1.06;

         ELSE

              IF PV_IN_INDMOR IN ('CT', 'SI') THEN
                 K:= LGD-BE;
              ELSE
                 K:= LGD;
              END IF;

              RWA := K * 12.5 * EAD;

         END IF;

      --Cálculo para PYMEs tratadas cómo empresas (igual que la fórmula anterior pero con añadido ajuste tamaño).
      ELSIF PV_IN_SEG IN ('SME', 'SME-CC') THEN

            IF PV_IN_INDMOR = 'NO' THEN
               R := 0.12 * (1 - Exp(-50 * PD)) / (1 - Exp(-50)) + 0.24 * (1 - (1 - Exp(-50 * PD)) / (1 - Exp(-50)))-0.04*(1-(S-5)/45);
               b := power((0.11852 - 0.05478 * Ln(PD)),2);

               IF PV_IN_SEG = 'SME-CC' THEN
                 R := R * 1.25;
               END IF;

               K := (LGD * BAS_MEN.fnc_normsdist(power((1 - R),-0.5) * BAS_MEN.fnc_normsinv(PD) + power((R / (1 - R)),0.5) *
               BAS_MEN.fnc_normsinv(0.999)) - PD * LGD) * power((1 - 1.5 * b),-1) * (1 + (M - 2.5) * b);

               RWA := K * 12.5 * EAD * 1.06;

            ELSE

                 IF PV_IN_INDMOR IN ('CT', 'SI') THEN
                    K:= LGD-BE;
                 ELSE
                    K:= LGD;
                 END IF;

                 RWA := K * 12.5 * EAD;

            END IF;

      --Cálculo para Hipotecas Vivienda.
      ELSIF PV_IN_SEG = 'PRÉSTAMOS HIPOTECARIOS' THEN
            IF PV_IN_INDMOR = 'NO' THEN
               R := 0.15;
               K := LGD * BAS_MEN.fnc_normsdist(power((1 - R),-0.5) * BAS_MEN.fnc_normsinv(PD) + power((R / (1 - R)),0.5) *
               BAS_MEN.fnc_normsinv(0.999)) - PD * LGD;

               RWA := K * 12.5 * EAD*1.06;

            ELSE

                 IF PV_IN_INDMOR IN ('CT', 'SI') THEN
                    K:= LGD-BE;
                 ELSE
                    K:= LGD;
                 END IF;

                 RWA := K * 12.5 * EAD;

            END IF;

      --Cálculo para Tarjetas de Crédito.
      ELSIF PV_IN_SEG = 'TARJETAS CRÉDITO' THEN
            IF PV_IN_INDMOR = 'NO' THEN

               R := 0.04;
               K := LGD * BAS_MEN.fnc_normsdist(power((1 - R),-0.5) * BAS_MEN.fnc_normsinv(PD) + power((R / (1 - R)),0.5) *
               BAS_MEN.fnc_normsinv(0.999)) - PD * LGD;

               RWA := K * 12.5 * EAD*1.06;

            ELSE

                 IF PV_IN_INDMOR IN ('CT', 'SI') THEN
                    K:= LGD-BE;
                 ELSE
                    K:= LGD;
                 END IF;

                 RWA := K * 12.5 * EAD;

            END IF;

      --Cálculo para Resto Minoristas (incluye todas las exposiciones particulares distintas de Hipotecas Vivienda y Tarjeas de Crédito).
      ELSIF PV_IN_SEG = 'OTRO RETAIL' THEN

            IF PV_IN_INDMOR = 'NO' THEN

               R := 0.03 * (1 - Exp(-35 * PD)) / (1 - Exp(-35)) + 0.16 * (1 - (1 - Exp(-35 * PD)) / (1 - Exp(-35)));

               K := LGD * BAS_MEN.fnc_normsdist(power((1 - R),-0.5) * BAS_MEN.fnc_normsinv(PD) + power((R / (1 - R)),0.5) *
               BAS_MEN.fnc_normsinv(0.999)) - PD * LGD;

               RWA := K * 12.5 * EAD*1.06;

            ELSE

                 IF PV_IN_INDMOR IN ('CT', 'SI') THEN
                    K:= LGD-BE;
                 ELSE
                    K:= LGD;
                 END IF;
                 RWA := K * 12.5 * EAD;

            END IF;

      END IF;

   END IF;

   RET:= 'OK';

END;
/

--
/************************************************************************************/
/* CREACION DE Las vistas necesarias para definión de parámetros de entrada de los pk*/
/************************************************************************************/



/************************************************************************************/
/* CREACIÓN DE LA DEFINICION DE LA VISTA CALCULO                                      */
/************************************************************************************/

--DROP VIEW BAS_MEN.VISTA_METODO_AIRB;

CREATE OR REPLACE FORCE VIEW BAS_MEN.VISTA_METODO_AIRB AS
   SELECT /*+ full(a) full(b) FULL(D) parallel (a 4) parallel (b 4) PARALLEL (D 4) */
          DISTINCT A.OR_IDREG, A.IN_INDMOR,  A.IN_SEGMBSINI, A.IN_RATSOB, A.IN_SEGMBS0, A.FI_EADAIRB,  A.FI_EADCONAIRB
                 , A.FI_CCFAIRB, A.OR_MODRAT0, A.IN_SRATIN, A.OR_RATINT
                 , CASE WHEN C.OR_NUMRAT IS NOT NULL       THEN C.OR_NUMRAT
                        WHEN pf_ofex.OR_NUMRAT IS NOT NULL THEN pf_ofex.OR_NUMRAT
                        WHEN resto.OR_NUMRAT IS NOT NULL   THEN resto.OR_NUMRAT
                        ELSE 0
                   END AS OR_NUMRAT
                 , CASE WHEN C.IN_CATEGO IS NOT NULL       THEN C.IN_CATEGO
                        WHEN pf_ofex.IN_CATEGO IS NOT NULL THEN pf_ofex.IN_CATEGO
                        WHEN resto.IN_CATEGO IS NOT NULL   THEN resto.IN_CATEGO
                        ELSE '?'
                   END AS IN_CATEGO
                 , d.FI_PD_ORIGINAL, d.FI_PD_COREPS, d.FI_PDCONT, d.FI_PDPOOL, d.FI_RATCON
                 , d.IN_RATINT, d.OR_PUNTFIN
                 , B.FI_ATAMAIRB, B.FI_VIDRES, B.FI_LGDNOMORA, B.FI_LGDAIRB, B.FI_LGDLR, B.FI_LGDBE, B.FI_LGDWORST
                 , B.FI_IMPLTV, B.FI_LGDLRNOMORA, B.IN_SEGAIRB, B.FI_MATAIRB, A.IN_ACTIVO, B.IN_ACTIVO_CONS
                 , B.ENTIDAD_ENTE, B.C_TYPE_GUARANTEE, a.OR_IDMES, a.FI_EPICON, d.IN_SRATIN_2
              FROM BAS_MEN.BASILEA                 A
                 , BAS_MEN.BASILEA_AIRB_LGD        B
                 , BAS_MEN.BASILEA_AIRB_PD         D
                 , BAS_MEN.MAESTRO_PROJECT_FINANCE C
                 , BAS_MEN.MAESTRO_PROJECT_FINANCE PF_OFEX /* 07/10/2021 NAV | Añadido cruce para recuperar categoria de PF */
                 , BAS_MEN.MAESTRO_PROJECT_FINANCE RESTO   /* 13/10/2021 NAV | Añadido cruce para recuperar categoria de PF */
             WHERE A.OR_IDREG     = B.OR_IDREG(+)
               AND A.OR_IDREG     = D.OR_IDREG(+)
               AND A.OR_NIFCIF    = C.OR_IDPERS(+)
               AND A.OR_CTACLI    = PF_OFEX.or_ctacli(+)
               AND A.or_numofi    = PF_OFEX.or_numofi(+)
               AND A.OR_NIFCIFIBM = RESTO.OR_IDPERS(+);


--
/*******************************************************************************************************************************************/
/* CRECION DEL PACKAGE DEFINICION Y CUERPO  PARA CALCULO DEL RWA                                                                           */
/*******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Definición del Package
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BAS_MEN.Calculo_RWA IS

    TYPE Cursor_Basilea              IS REF CURSOR RETURN BAS_MEN.VISTA_METODO_AIRB%ROWTYPE;
    TYPE T_Array_Basilea_Calculo_RWA IS TABLE OF BAS_MEN.BASILEA_AIRB%ROWTYPE;

    FUNCTION F_CALCULO_RWA (Cur IN Cursor_Basilea, PN_FECPRO IN NUMBER) return T_Array_Basilea_Calculo_RWA
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED;

END; -- PACKAGE Calculo_RWA

/

select * from sys.user_errors WHERE NAME = 'Calculo_RWA';

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cuerpo del Package
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY BAS_MEN.CALCULO_RWA AS

FUNCTION F_CALCULO_RWA (Cur IN Cursor_Basilea, PN_FECPRO IN NUMBER) return T_Array_Basilea_Calculo_RWA
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED
IS

  In_Rec            Cur%ROWTYPE;
  Out_Rec           BAS_MEN.BASILEA_AIRB%ROWTYPE;
  v_Num             NUMBER;

  VN_FI_CORAIRB     FLOAT(126);
  VN_FI_MAAIRB      FLOAT(126);
  VN_FI_RCAIRB      FLOAT(126);
  VN_FI_RWAAIRB     FLOAT(126);
  VN_FI_RWAAIRBCON  FLOAT(126);
  VN_FI_ELAIRB      FLOAT(126);
  VN_FI_ELAIRBCON   FLOAT(126);
  VN_IN_INDMOR      VARCHAR2(2);
  VN_RWA            FLOAT(126);
  VN_EL             FLOAT(126);
  VV_CATEGORIA      VARCHAR2(15);
  VV_ROWID        VARCHAR2(12);
  VN_COUNT        NUMBER(9):=0;
  VV_ERROR        VARCHAR2(100);
  VN_NUMERR       NUMBER(3);
  VV_MENSAJE      VARCHAR2(255);
  VV_RET          VARCHAR2(100);
  VN_FI_LGDAIRB   FLOAT(126);
  vv_IN_SEGAIRB   VARCHAR2(50);

  BEGIN
  LOOP

     fetch cur into in_rec;
     EXIT WHEN cur%notfound;

       VN_NUMERR:= 3;
       VN_COUNT := VN_COUNT + 1;
       VV_ROWID := TO_CHAR(IN_REC.OR_IDREG);
       VN_FI_RWAAIRB:= 0;
       VN_FI_RWAAIRBCON:= 0;
       VN_RWA := 0;
       VN_FI_ELAIRB := 0;
       VN_FI_ELAIRBCON := 0;
       VN_EL := 0;
       VV_CATEGORIA := '?';
       VN_IN_INDMOR := IN_REC.IN_INDMOR;
       VN_FI_LGDAIRB := IN_REC.FI_LGDAIRB;
       /*SMG 17/02/2019 - INICIALIZAR VARIABLES DEL CURSOR */
       VN_FI_CORAIRB  := 0;
       VN_FI_MAAIRB   := 0;
       VN_FI_RCAIRB   := 0;
       vv_IN_SEGAIRB  := IN_REC.IN_SEGAIRB;

       IF IN_REC.IN_SRATIN = 'BLQRM' THEN --Los Bloqueos con clave 9051 se tratan como morosos.
          VN_IN_INDMOR := 'SI';
       END IF;

       VN_NUMERR:= 41;

       --Cálculo RWA y pérdida esperada para Project Finance
       IF IN_REC.IN_SEGMBS0 = '201' THEN
          IF VN_IN_INDMOR IN ('CT', 'SI') THEN
             VV_CATEGORIA := 'MOROSO';
          /* RMR 29/05/2020 Comentado ELSIF ya que el numrat llega siempre como nulo. TM-1736 */
          /*ELSIF IN_REC.OR_NUMRAT <> 0 THEN
                -- Se obtiene la categoría a través del rating soberano.
                BEGIN
                   SELECT DISTINCT CATEGORIA
                     INTO VV_CATEGORIA
                     FROM BAS_MEN.MAESTRO_PAIS_PF
                    WHERE RATSOB = IN_REC.IN_RATSOB;
                EXCEPTION
                     WHEN OTHERS THEN
                          VV_CATEGORIA:='?';
                END;
           */
          ELSE

               -- Se obtiene la categoría a través del maestro project finance. XCG, 04/10/2021
               VV_CATEGORIA := IN_REC.IN_CATEGO;

               -- Se obtiene la categoría a través del rating, el modelo y la tipología.
              /* BEGIN
                  SELECT DISTINCT CATEGORIA
                    INTO VV_CATEGORIA
                    FROM BAS_MEN.MAESTRO_CATEGORIA_PF,
                         BAS_MEN.MAPEO_RATINGS_PF
                   WHERE RATINT = RATING_FIN
                     AND MIN_RATING <  in_rec.OR_RATINT
                     AND MAX_RATING >= in_rec.OR_RATINT
                     AND SUBSTR(TIPOLOGIA,1,1) = SUBSTR(IN_REC.OR_MODRAT0,3,1)
                     AND MODELO = SUBSTR(IN_REC.OR_MODRAT0,4,2);
               EXCEPTION
                    WHEN OTHERS THEN
                         VV_CATEGORIA:='?';
               END;*/

          END IF;

          -- Se obtiene el RWA y la pérdida esperada a través de la categoria y la maturity.
          -- 09/10/2018 - Maturity en valor real para acceder al maestro por los valores contemplados
          BEGIN
             SELECT DISTINCT RWA/100, EL/100
               INTO VN_RWA, VN_EL
               FROM BAS_MEN.MAESTRO_RWA_PF
              WHERE CATEGORIA = VV_CATEGORIA
                AND MATURITY  = CASE
                                  WHEN IN_REC.FI_MATAIRB < 2.5 THEN 0
                                  ELSE 1
                                END;
          EXCEPTION
               WHEN OTHERS THEN
                    NULL;
          END;

          VN_FI_RWAAIRB := VN_RWA * IN_REC.FI_EADAIRB;
          VN_FI_RWAAIRBCON:= VN_RWA * IN_REC.FI_EADCONAIRB;
          VN_FI_ELAIRB := VN_EL * IN_REC.FI_EADAIRB;
          VN_FI_ELAIRBCON:= VN_EL * IN_REC.FI_EADCONAIRB;

       ELSE

            IF IN_REC.IN_INDMOR IN ('SI', 'CT') OR IN_REC.IN_SRATIN = 'BLQRM' THEN --Los Bloqueos con clave 9051 se tratan como morosos.

               --Para morosos y contagiados la pérdida esperada será la LGD BE * la EAD. XCG, 29/12/08.
               VN_FI_ELAIRB:= IN_REC.FI_LGDBE * IN_REC.FI_EADAIRB;
               VN_FI_ELAIRBCON:= IN_REC.FI_LGDBE * IN_REC.FI_EADconAIRB;
               --Capital más la Pérdida esperada no puede ser mayor a la EAD.

               IF IN_REC.FI_LGDBE <= 1 and IN_REC.FI_LGDAIRB > 1 THEN
                  VN_FI_LGDAIRB := 1;
               END IF;


            ELSE
               VN_FI_ELAIRB:= IN_REC.FI_PD_COREPS * IN_REC.FI_LGDAIRB * IN_REC.FI_EADAIRB;
               VN_FI_ELAIRBCON:= IN_REC.FI_PD_COREPS * IN_REC.FI_LGDAIRB * IN_REC.FI_EADconAIRB;



            END IF;

            BAS_MEN.CAL_CAPITAL_REG(UPPER(IN_REC.IN_SEGAIRB),
                                 IN_REC.IN_SEGMBSINI,
                                 UPPER(VN_IN_INDMOR),
                                 NVL(IN_REC.FI_PD_COREPS,0),
                                 NVL(VN_FI_LGDAIRB,0),
                                 NVL(IN_REC.FI_EADAIRB,0),
                                 NVL(IN_REC.FI_LGDBE,0),
                                 NVL(IN_REC.FI_MATAIRB,0),
                                 NVL(IN_REC.FI_ATAMAIRB,0),
                                 NVL(IN_REC.FI_LGDWORST,0),
                                 VN_FI_CORAIRB,
                                 VN_FI_MAAIRB,
                                 VN_FI_RCAIRB,
                                 VN_FI_RWAAIRB,
                                 VV_RET);

            VN_NUMERR:= 5;

            VN_FI_RWAAIRBCON:= VN_FI_RCAIRB * 12.5 * IN_REC.FI_EADCONAIRB;

             --Multiplicamos por 1.06 el rwa consolidado en caso de no ser un registro moroso. 16/02/08. XCG.
            IF VN_IN_INDMOR = 'NO' THEN
               VN_FI_RWAAIRBCON := VN_FI_RWAAIRBCON * 1.06;
            END IF;

            IF IN_REC.IN_INDMOR IN ('SI', 'CT') OR IN_REC.IN_SRATIN = 'BLQRM' THEN

                  --Si la BE es superior al 100%, capital cero
                  IF IN_REC.FI_LGDBE > 1 THEN
                     VN_FI_RWAAIRBCON := 0;
                     VN_FI_RWAAIRB := 0;
                  END IF;

            END IF;

       END IF;

       IF IN_REC.FI_EADAIRB <> 0 THEN
          VN_RWA:= VN_FI_RWAAIRB/IN_REC.FI_EADAIRB;
       ELSIF IN_REC.in_SEGMBS0 <> '201' then
            VN_RWA:= 0;
       END IF;

       /* depósitos a la vista en entidades de crédito reciban la misma ponderación que el efectivo en caja (0%) y segairb = 'Otros Activos'. XCG 14/04/2021*/
       IF IN_REC.FI_EPICON IN ('010010301010100000000000000000','010010301010203000000000000000','010010302010100000000000000000',
                               '010010302010203000000000000000','010010100000000000000000000000') THEN
          vv_IN_SEGAIRB := 'Otros Activos';
          VN_FI_RWAAIRB := 0;
          VN_RWA := 0;
       END IF;

       OUT_REC.OR_IDREG       := IN_REC.OR_IDREG;
       OUT_REC.FI_ELAIRB      := VN_FI_ELAIRB;
       OUT_REC.FI_ELCONAIRB   := VN_FI_ELAIRBCON;
       OUT_REC.FI_CORAIRB     := VN_FI_CORAIRB;
       OUT_REC.FI_MAAIRB      := VN_FI_MAAIRB;
       OUT_REC.FI_RCAIRB      := VN_FI_RCAIRB;
       OUT_REC.FI_RWAAIRB     := VN_FI_RWAAIRB;
       OUT_REC.FI_RWACONAIRB  := VN_FI_RWAAIRBCON;
       OUT_REC.IN_CATEGO      := VV_CATEGORIA;
       OUT_REC.FI_RWA         := VN_RWA;
       OUT_REC.FI_EADCONAIRB  := nvl(IN_REC.FI_EADCONAIRB  , 0)   ;
       OUT_REC.FI_EADAIRB     := nvl(IN_REC.FI_EADAIRB     , 0)   ;
       OUT_REC.FI_CCFAIRB     := nvl(IN_REC.FI_CCFAIRB     , 0)   ;
       OUT_REC.IN_SEGAIRB     := nvl(vv_IN_SEGAIRB     , '?')   ;
       OUT_REC.FI_PD_ORIGINAL := nvl(IN_REC.FI_PD_ORIGINAL , 99)   ;
       OUT_REC.FI_PDCONT      := nvl(IN_REC.FI_PDCONT      , 99)   ;
       OUT_REC.FI_PDPOOL      := nvl(IN_REC.FI_PDPOOL      , 99)   ;
       OUT_REC.FI_PD_COREPS   := nvl(IN_REC.FI_PD_COREPS   , 99)   ;
       OUT_REC.FI_RATCON      := nvl(IN_REC.FI_RATCON      , 0)   ;
       OUT_REC.IN_RATINT      := nvl(IN_REC.IN_RATINT      , 0)   ;
       OUT_REC.OR_PUNTFIN     := nvl(IN_REC.OR_PUNTFIN     , 0)   ;
       OUT_REC.FI_LGDNOMORA   := nvl(IN_REC.FI_LGDNOMORA   , 99)   ;
       OUT_REC.FI_LGDLR       := nvl(IN_REC.FI_LGDLR       , 99)   ;
       OUT_REC.FI_LGDWORST    := nvl(IN_REC.FI_LGDWORST    , 99)   ;
       OUT_REC.FI_LGDLRNOMORA := nvl(IN_REC.FI_LGDLRNOMORA , 99)   ;
       OUT_REC.FI_LGDAIRB     := nvl(IN_REC.FI_LGDAIRB     , 99)   ;
       OUT_REC.FI_LGDBE       := nvl(IN_REC.FI_LGDBE       , 99)   ;
       OUT_REC.FI_IMPLTV      := nvl(IN_REC.FI_IMPLTV      , 0)   ;
       OUT_REC.FI_MATAIRB     := nvl(IN_REC.FI_MATAIRB     , 0)   ;
       OUT_REC.FI_ATAMAIRB    := nvl(IN_REC.FI_ATAMAIRB    , 0)   ;
       OUT_REC.FI_VIDRES      := nvl(IN_REC.FI_VIDRES      , 99999999)   ;
       OUT_REC.IN_ACTIVO_CONS := nvl(IN_REC.IN_ACTIVO_CONS , 0)   ;
       OUT_REC.ENTIDAD_ENTE   := nvl(IN_REC.ENTIDAD_ENTE   , 0)  ;
       OUT_REC.C_TYPE_GUARANTEE := nvl(IN_REC.C_TYPE_GUARANTEE , 0)  ;
       OUT_REC.OR_IDMES         := IN_REC.OR_IDMES;
       OUT_REC.IN_SRATIN_2      := IN_REC.IN_SRATIN_2;


       pipe row(out_rec);

 END LOOP;

 EXCEPTION
   WHEN OTHERS THEN

        RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(VN_NUMERR)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));

END;-- FUNCTION F_Calculo_RWA

END; -- PACKAGE BODY BAS_MEN.CALCULO_LGD

/

select * from sys.user_errors WHERE NAME = 'Calculo_RWA';

--
/* ******************************************************************************************************************************************/
/* CREACIÓN DEL PROCEDIMIENTO METODO_AIRB                                                                                                  */
/* ******************************************************************************************************************************************/
/*--
-- JCVJCVJCV 201403
--
  --   Se pasan algunas partes a procedures internos, concretamente la Carga de Maestros y la Carga de Maturity de Avales.
  --   Se añaden en el INSERT de BASILEA_AIRB:
  --      Tablas : DATOS_CURVA_TARJETAS_CCAA y MAESTRO_VENTAS
  --      Campos Entrada: OR_CODIGO_BIC de BASILEA, IMPORTE_TOTAL y GARANTIZADA de DATOS_CURVA_TARJETAS_CCAA, VENTAS_CON del MAESTRO_VENTAS.
  --      Campos Salida : IN_ACTIVO_CONS
  --   Se modifica el floor hipotecario actual (Residencial) para excluir las exposiciones con garantías de administraciones centrales
  --   y se añade uno nuevo para Comercial.*/

CREATE OR REPLACE PROCEDURE BAS_MEN.METODO_AIRB ( PV_TABLA     IN  VARCHAR2
                                                , PN_FECPRO    IN  NUMBER
                                                , PV_RET       OUT VARCHAR2
                                                )
IS

  --Variables locals
  VV_ROWID        VARCHAR2(12);
  VN_COUNT        NUMBER(9):=0;
  VN_COUNT_2      NUMBER(9):=0;
  VN_COUNT_KO     NUMBER(9):=0;
  VN_NUMERR       NUMBER(3);
  VV_MENSAJE      VARCHAR2(255);
  VV_MENSAJE2     VARCHAR2(255);
  VV_RET          VARCHAR2(100);
  FALLO1          EXCEPTION;
  FALLO2          EXCEPTION;

/*---------------------------------------------------------------------------------------------------------------------------------------------------*/
/* Procedimiento FNC_CAL_RWA*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/

PROCEDURE FNC_CAL_RWA IS

  Cte_Proceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE := 'AIRB - FNC_CAL_RWA '||PV_TABLA||' '||PN_FECPRO;

BEGIN

   INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
   VALUES (Cte_Proceso, SYSDATE, 'INICIADO');

   COMMIT;
   VN_NUMERR := 1;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_CATEGORIA_PF');

   insert into BAS_MEN.MAESTRO_CATEGORIA_PF
   select * from DCRPROP_MENSUAL.MAESTRO_CATEGORIA_PF_SAS;

   commit;

   VN_NUMERR := 2;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_RWA', 'TRUE');

  /* **********************************************************************************/
  /* LLAMADA A LA FUNCION                                                             */
  /* **********************************************************************************/
  INSERT /*+ PARALLEL (x 8) */ into BAS_MEN.BASILEA_AIRB_RWA x
  (OR_IDREG, FI_PD_ORIGINAL, FI_PD_COREPS, FI_PDCONT, FI_PDPOOL, FI_EADAIRB, FI_EADCONAIRB, FI_CCFAIRB, FI_RATCON,
  IN_RATINT, OR_PUNTFIN, FI_LGDNOMORA, FI_LGDAIRB, FI_LGDLR, FI_LGDBE, FI_LGDWORST, FI_IMPLTV,
  FI_LGDLRNOMORA, IN_SEGAIRB, FI_MATAIRB, FI_ATAMAIRB, FI_ELAIRB, FI_ELCONAIRB, FI_CORAIRB, FI_MAAIRB, FI_RCAIRB,
  FI_RWAAIRB, FI_RWACONAIRB, IN_CATEGO, FI_RWA, FI_VIDRES, IN_ACTIVO_CONS, ENTIDAD_ENTE, C_TYPE_GUARANTEE, OR_IDMES, IN_SRATIN_2
  )
  select CUR.OR_IDREG, CUR.FI_PD_ORIGINAL, CUR.FI_PD_COREPS, CUR.FI_PDCONT, CUR.FI_PDPOOL, CUR.FI_EADAIRB,
         CUR.FI_EADCONAIRB, CUR.FI_CCFAIRB, CUR.FI_RATCON, CUR.IN_RATINT, CUR.OR_PUNTFIN,
         CUR.FI_LGDNOMORA, CUR.FI_LGDAIRB, CUR.FI_LGDLR, CUR.FI_LGDBE, CUR.FI_LGDWORST, CUR.FI_IMPLTV,
         CUR.FI_LGDLRNOMORA, CUR.IN_SEGAIRB, CUR.FI_MATAIRB, CUR.FI_ATAMAIRB, CUR.FI_ELAIRB, CUR.FI_ELCONAIRB,
         CUR.FI_CORAIRB, CUR.FI_MAAIRB, CUR.FI_RCAIRB, CUR.FI_RWAAIRB, CUR.FI_RWACONAIRB, CUR.IN_CATEGO, CUR.FI_RWA,
         CUR.FI_VIDRES, Cur.IN_ACTIVO_CONS, Cur.ENTIDAD_ENTE, CUR.C_TYPE_GUARANTEE, CUR.OR_IDMES, CUR.IN_SRATIN_2
    from table(BAS_MEN.CALCULO_RWA.F_CALCULO_RWA
                (cursor(SELECT /*+ full(a) full(b) FULL(D) parallel (a 8) parallel (b 8) PARALLEL (D 8) */
                        DISTINCT A.OR_IDREG, A.IN_INDMOR,  A.IN_SEGMBSINI, A.IN_RATSOB, A.IN_SEGMBS0, A.FI_EADAIRB,  A.FI_EADCONAIRB, A.FI_CCFAIRB
                               , A.OR_MODRAT0, A.IN_SRATIN, A.OR_RATINT
                               , CASE WHEN C.OR_NUMRAT IS NOT NULL       THEN C.OR_NUMRAT
                                      WHEN pf_ofex.OR_NUMRAT IS NOT NULL THEN pf_ofex.OR_NUMRAT
                                      WHEN resto.OR_NUMRAT IS NOT NULL   THEN resto.OR_NUMRAT
                                      ELSE 0
                                 END AS OR_NUMRAT
                               , CASE WHEN C.IN_CATEGO IS NOT NULL       THEN C.IN_CATEGO
                                      WHEN pf_ofex.IN_CATEGO IS NOT NULL THEN pf_ofex.IN_CATEGO
                                      WHEN resto.IN_CATEGO IS NOT NULL   THEN resto.IN_CATEGO
                                      ELSE '?'
                                 END AS IN_CATEGO
                               , d.FI_PD_ORIGINAL, d.FI_PD_COREPS, d.FI_PDCONT, d.FI_PDPOOL, d.FI_RATCON, d.IN_RATINT, d.OR_PUNTFIN
                               , B.FI_ATAMAIRB, B.FI_VIDRES, B.FI_LGDNOMORA, B.FI_LGDAIRB, B.FI_LGDLR, B.FI_LGDBE, B.FI_LGDWORST, B.FI_IMPLTV
                               , B.FI_LGDLRNOMORA, B.IN_SEGAIRB, B.FI_MATAIRB, A.IN_ACTIVO, B.IN_ACTIVO_CONS, B.ENTIDAD_ENTE
                               , B.C_TYPE_GUARANTEE, a.OR_IDMES, a.FI_EPICON, d.IN_SRATIN_2
                            FROM BAS_MEN.BASILEA                 A
                               , BAS_MEN.BASILEA_AIRB_LGD        B
                               , BAS_MEN.BASILEA_AIRB_PD         D
                               , BAS_MEN.MAESTRO_PROJECT_FINANCE C
                               , BAS_MEN.MAESTRO_PROJECT_FINANCE PF_OFEX /* 07/10/2021 XCG | Añadido cruce para recuperar categoria de PF */
                               , BAS_MEN.MAESTRO_PROJECT_FINANCE RESTO   /* 13/10/2021 NAV | Añadido cruce para recuperar categoria de PF */
                           WHERE A.OR_IDREG     = B.OR_IDREG(+)
                             AND A.OR_IDREG     = D.OR_IDREG(+)
                             AND A.OR_NIFCIF    = C.OR_IDPERS(+)
                             AND A.OR_CTACLI    = PF_OFEX.or_ctacli(+)
                             AND a.or_numofi    = PF_OFEX.or_numofi(+)
                             AND A.OR_NIFCIFIBM = RESTO.OR_IDPERS(+)
                        ), PN_FECPRO
                )
             ) CUR;

 COMMIT;

 VN_NUMERR := 5;

 dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_RWA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

 VN_NUMERR := 99;

 UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT = 'FINALIZADO',
        DATA_FIN = SYSDATE,
        FINALITZAT = 'OK',
        REG_UPD_OK = VN_COUNT,
        REG_UPD_KO = VN_COUNT_KO
  WHERE PROCES = Cte_Proceso
    AND ESTAT  = 'INICIADO';

    PV_RET := 'OK';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     PV_RET := 'KO';
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            REG_UPD_KO = VN_COUNT_KO,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = Cte_Proceso
        AND ESTAT  = 'INICIADO';

        COMMIT;
        RAISE;
END;

/* **********************************************************************************/
-- PROCESO PRINCIPAL--
/* **********************************************************************************/
BEGIN
    FNC_CAL_RWA;
END; -- Fin Procedimiento METODO_AIRB

/

select * from sys.user_errors WHERE NAME = 'FNC_CAL_RWA';


create or replace PROCEDURE  BAS_MEN.UPDATE_PROCESO_AIRB (PROCESO IN VARCHAR2)
IS

/* *******************************************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA_AIRB                                 */
/* *******************************************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA_AIRB                                          */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA_AIRB                                                   */
/*      CONTROL de updates realizados en Basilea: BAS_MEN.BASILEA_CONTROL_UPDATES                                                */
/*      PARÁMETROS update a ejecutar  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_AIRB_PARAM_SAS                                  */
/*      TABLAS de updates de usuario  en Basilea: DCRPROP_MENSUAL.UPDATE_BASILEA_AIRB_XX_SAS                                     */
/* *******************************************************************************************************************************/

    --
    -- Variables del proceso principal.
    --

    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(255)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT ' ';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA_AIRB';
    v_Tabla_ControlUpdate   VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA_CONTROL_UPDATES';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';
    ncount                  NUMBER                  DEFAULT 0;

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
          where EN_PROCESO = PROCESO
        order by TABLA;

BEGIN
    ROLLBACK;                                                -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.

    v_NumErr := 0;

    FOR C_UPD IN Cursor_Update LOOP

            -- Parámetros relativos al update a procesar
            In_Tabla_Orig := C_UPD.TABLA;

            Cte_Proces          := 'UPDATE PROCESO AIRB Tabla_Orig: '|| In_Tabla_Orig;
            v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
            --
            -- Información de Inicio en Control del Proceso.
            --
            v_NumErr := 1;
            INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
            VALUES (Cte_Proces, SYSDATE, 'INICIADO');
            COMMIT;
            --
            -- Insersión en tabla de descartes
            --
            v_Numerr := 2;
            v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA_AIRB SELECT /*+ PARALLEL (A 8)*/ ''' || v_Tabla_Orig || ''' , sysdate , A.* FROM '||  v_Tabla_Base || ' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            COMMIT;
            --
            -- Eliminación de registros en Basilea AIRB.
            --
            v_Numerr := 3;
            v_Sentencia_dinamica := 'DELETE /*+ PARALLEL (A 8)*/ '||v_Tabla_Base||' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            COMMIT;
            --
            -- Insersión de registros en Basilea AIRB.
            --
            v_Numerr := 4;
            v_Sentencia_dinamica := 'INSERT /*+ PARALLEL (A 8)*/ INTO '||v_Tabla_Base||' A SELECT * FROM '||v_Tabla_Orig;
            EXECUTE IMMEDIATE v_Sentencia_dinamica;
            v_RegIns := SQL%ROWCOUNT;
            COMMIT;
            --
            -- Insercción de registros en tabla final.
            --
            v_Numerr := 9;
            v_Sentencia_dinamica := 'INSERT /* + APPEND */ INTO BAS_MEN.UPDATES_BASILEA_AIRB SELECT /*+ PARALLEL (A 8) */ ''' ||  v_Tabla_Orig   || ''' AS TABLA_ORIGEN ,sysdate, A.* FROM ' || v_Tabla_Base|| ' A, ' || v_Tabla_Orig || ' B WHERE A.OR_IDREG = B.OR_IDREG';
            EXECUTE IMMEDIATE v_Sentencia_dinamica;

            --
            -- Actualización del Control del Proceso.
            --

            v_Numerr := 10;
            UPDATE BAS_MEN.CONTROL_PROCES
               SET ESTAT       = 'FINALIZADO'
                 , DATA_FIN    = SYSDATE
                 , FINALITZAT  = v_Fin_Proc
                 , REG_INS_OK  = v_RegIns
                 , ERROR_ORAC  = v_Mensaje_Err
             WHERE PROCES  = Cte_Proces
               AND ESTAT   = 'INICIADO';

            COMMIT;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN

    ROLLBACK;

    v_Fin_Proc   := 'KO';
    v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);

    --
    --      Actualización del Control del Proceso.
    --

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT       = 'FINALIZADO'
         , DATA_FIN    = SYSDATE
         , FINALITZAT  = v_Fin_Proc
         , ERROR_ORAC  = v_Mensaje_Err
         , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
         , NUM_ERROR   = v_NumErr
      WHERE PROCES  = Cte_Proces
        AND ESTAT   = 'INICIADO';

    COMMIT;
    RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'UPDATE_PROCESO_AIRB';


create or replace PROCEDURE   BAS_MEN.BASI_METODO_AIRB IS

   VV_TABLA       VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO      NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO      NUMBER(6);   -- Ojo con la fecha del proceso.
   VD_FECPRO      DATE;
   VV_RETORNO     VARCHAR2(2):='OK';

BEGIN

  COMMIT;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  BAS_MEN.METODO_AIRB (VV_TABLA, VN_FECPRO, VV_RETORNO);
  COMMIT;

  --Llama a la funcion de UPDATES BASILEA AIRB
  BAS_MEN.UPDATE_PROCESO_AIRB('UPDATE_PROCESO_AIRB');
  COMMIT;

END;

/

select * from sys.user_errors WHERE NAME = 'BASI_METODO_AIRB';
--bka40110=====================================================================================================
Select 'bka40110' As Compilando from dual;


CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_CANVI_MET (
                                                    PV_TABLA       IN  VARCHAR2,
                                                    PV_OPC         IN  NUMBER,
                                                    PV_RET1        IN VARCHAR2,
                                                    PV_RET         OUT VARCHAR2,
                                                    PN_FecPro_YYYYMMDD IN  NUMBER) IS

    VN_NUMERR      NUMBER(3);
    VV_MENSAJE     VARCHAR2(255);
    VN_COUNT       NUMBER(9):=0;
    VN_COUNT_2     NUMBER(9):=0;
    VV_ROWID       VARCHAR2(50);


PROCEDURE FNC_CANVI_METT  IS

   VN_NUMERR      NUMBER(3);
   VV_MENSAJE     VARCHAR2(255);
   VN_COUNT       NUMBER(9):=0;
   VN_COUNT2       NUMBER(9):=0;
   VV_ROWID       VARCHAR2(50);
   VV_TIPOREG_ANT  VARCHAR2(5);

BEGIN

  VN_NUMERR:= 0;
  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
         VALUES ('18. FNC_CANVI_METODE '||PV_TABLA, SYSDATE, 'INICIADO');

  COMMIT;

  VN_NUMERR := 1;
  VN_COUNT:=0;
  VN_COUNT2:=0;

  /* 14/12/2021 - NAV - HDEV-81085 - llevamos este Update en el proceso de AVALISTA */
  -- Reinicio de valores
--  UPDATE /*+  parallel (A 8) */ BAS_MEN.BASILEA A
--     SET IN_METODE = case when substr(in_tiporeg,1,2) = 'CI' then 'STDA' else 'AIRB' end,
--     	   IN_TIPOREG = SUBSTR(IN_TIPOREG,3),         
--         in_METODE_1 = '?'
--   WHERE SUBSTR(IN_TIPOREG,1,2) in ('MM', 'CE', 'AV', 'CI')
--     and in_tiporeg <> 'CETITULI';  
--
--   COMMIT;

   VN_NUMERR := 2;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CAMBIO_METODO');

    INSERT /*+  parallel (G 4) */  INTO BAS_MEN.CAMBIO_METODO G
    SELECT /*+ FULL(D) FULL(E) parallel (D 8) parallel (E 8) */ OR_IDREG, IN_SUCEPT, E.TITULFIN, RWAAIRB, RWASTDA_2, IN_METODE, E.SEGMENTO,
                      DECODE(SUBSTR(IN_TIPOREG,1,2), 'MM', SUBSTR(IN_TIPOREG,3), IN_TIPOREG) IN_TIPOREG
      FROM (SELECT /*+ FULL(A) FULL(B) FULL(C) parallel (a 8) parallel (b 8) parallel (c 8) */
                       CASE
                            WHEN IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   -- Rating inconsistente TAR-259  17/12/19
                                 'EMPRESAS'
                            WHEN IN_SEGMBSINI IN ('101','102','002','017') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   -- Rating inconsistente TAR-259 17/12/19
                                 'CCAA'
                             WHEN IN_SEGMBSINI IN ('103', '104') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR', 'CSIVI') THEN
                                 'PRESTAMOS'
                             WHEN IN_SEGMBSINI IN ('007', '018', '021', '028', '029','034')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                 'EEFF'
                             WHEN IN_SEGMBSINI IN ('106', '107') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR') THEN
                                 'PARTICULARES'
                             WHEN IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SEGMBS0 = '201'
                              AND IN_SRATIN IN ( 'CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN       -- Rating inconsistente TAR-259 17/12/19
                                  'PF'
                             WHEN IN_TIPOREG IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SRATIN IN ( 'CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    /* Rating inconsistente TAR-259 17/12/19*/
                                  'OFEX'
                       END SEGMENTO,
                       CASE
                            WHEN IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   /* Rating inconsistente TAR-259 17/12/19*/
                                 TO_CHAR(decode(OR_TITULARITAT, 0, or_nifcif, or_titularitat))
                            WHEN IN_SEGMBSINI IN ('101','102','002','017') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN     /* Rating inconsistente TAR-259 17/12/19*/
                                 TO_CHAR(DECODE(NVL(A.OR_TITUSCPCB,0), 0, DECODE(NVL(A.OR_TITULARITAT,0), 0, A.OR_NIFCIF, A.OR_TITULARITAT), A.OR_TITUSCPCB))
                             WHEN IN_SEGMBSINI IN ('103', '104') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR', 'CSIVI') THEN
                                 to_char(OR_REFOPE)
                             WHEN IN_SEGMBSINI IN ('007', '018', '021', '028', '029','034')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                 OR_CODIGO_BIC
                             WHEN IN_SEGMBSINI IN ('106', '107') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR') THEN
                                 to_char(A.OR_CLUNICONTR)
                             WHEN IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SEGMBS0 = '201'
                              AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                  OR_IDPERS
                             WHEN IN_TIPOREG IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN /* Rating inconsistente TAR-259 17/12/19*/
                                  to_char(OR_NUMOFI||OR_CTACLI)
                       END TITULFIN,
                       SUM(B.FI_RWAAIRB) RWAAIRB, SUM(c.FI_EXPSTDA_FULLY * C.FI_RWASTDA) RWASTDA_2
                  FROM BAS_MEN.BASILEA A,
                       BAS_MEN.BASILEA_AIRB B, /* 02/12/2021 - NAV - HDEV-81085 - partir de ahora el proceso de avalista ejecutara antes de cambio de metode por eso hay que utilizar la tabla BAS_MEN.BASILEA_AIRB en vez de la BAS_MEN.BASILEA_AIRB_RWA */
                       BAS_MEN.BASILEA_STDA C
                 WHERE A.OR_IDREG = B.OR_IDREG
                   AND A.OR_IDREG = C.OR_IDREG
                   AND A.IN_SRATIN IN ('CRIDE', 'CRDE', 'SR', 'SSOR', 'CSIVI', 'SRR', 'CRDER') /* Rating inconsistente TAR-259 17/12/19 -- OR (A.IN_SRATIN = 'RCURA' AND OR_PUNTSCO in (9999, 0)))  -- ARM 26/11/2019 - Se marcan como 'SSOR' en lugar de como 'RCURA' los préstamos sin rating que anteriormente fueron refinanciados y que actualmente no están recogidos en el censo de refinanciados y no están en periodo de cura.*/
                   /* ARM 04/11/2019 - No entran en cambio de método las operaciones del modelo reactivo sin rating (SSOR) de particulares (consumo e hipotecarios).*/
                   /* NAV 14/01/2021 - los reactivo sin scoring no entran en el cambio de metodo */
                   --AND NOT (a.IN_SRATIN IN ('SSOR') AND SUBSTR(a.IN_SUCEPT,1,2) IN ('CO','HI') AND (a.OR_FECOPE >= PN_FecPro_YYYYMMDD-10000 AND NVL(a.OR_FECSCO,a.OR_FECOPE) >= PN_FecPro_YYYYMMDD-10000))
                   AND NOT (a.IN_SRATIN IN ('SSOR') AND SUBSTR(a.IN_SUCEPT,1,2) IN ('CO','HI') AND a.OR_SEGFIC2 NOT IN ('CCO0', 'CCO1', 'CHI0', 'CHI1'))
                   /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA 
                   AND IN_SEGMBSINI IN ('101','102','002','017','103', '104','007', '018', '021', '028', '029','034', '106', '107')  */
                   AND IN_SEGMBSINI IN ('103', '104','007', '018', '021', '028', '029','034', '106', '107')
                    /* 13/01/2022- BNM - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos 
                    OR (IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') and OR_segfic2 in ('PA005', 'E5R', 'GR', 'GRP', 'P5', 'E5DS', 'NC5R', 'NC5DS'))) --XCG. 29/03/21 solo empresas corporates y grupos tienen cambio de método */
                   AND FI_ELIMI1 = 'NO'
                   and IN_SEGAIRB <> 'Otros Activos'
                   AND (A.IN_METODE = 'AIRB'
                    OR substr(a.IN_TIPOREG,1,2) = 'MM'
                    OR A.IN_METODE_1 = 'AIRB')
                   AND substr(IN_TIPOREG,1,2) not in ('AV', 'CI') /* 14/12/2021 - NAV - HDEV-81085 - Para que no entren registros de Avalista en cambio de Metode */
                 GROUP BY CASE
                            WHEN IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ( 'CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    /* Rating inconsistente TAR-259 17/12/19*/
                                 'EMPRESAS'
                            WHEN IN_SEGMBSINI IN ('101','102','002','017') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN     /* Rating inconsistente TAR-259 17/12/19*/
                                 'CCAA'
                             WHEN IN_SEGMBSINI IN ('103', '104') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR', 'CSIVI') THEN
                                 'PRESTAMOS'
                             WHEN IN_SEGMBSINI IN ('007', '018', '021', '028', '029','034')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    /* Rating inconsistente TAR-259 17/12/19*/
                                 'EEFF'
                             WHEN IN_SEGMBSINI IN ('106', '107') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR') THEN
                                 'PARTICULARES'
                             WHEN IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SEGMBS0 = '201'
                              AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    /* Rating inconsistente TAR-259 17/12/19*/
                                  'PF'
                             WHEN IN_TIPOREG IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN  /* Rating inconsistente TAR-259 17/12/19*/
                                  'OFEX'
                          END,
                          CASE
                            WHEN IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   /* Rating inconsistente TAR-259 17/12/19*/
                                 TO_CHAR(decode(OR_TITULARITAT, 0, or_nifcif, or_titularitat))
                            WHEN IN_SEGMBSINI IN ('101','102','002','017') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   /* Rating inconsistente TAR-259 17/12/19*/
                                 TO_CHAR(DECODE(NVL(A.OR_TITUSCPCB,0), 0, DECODE(NVL(A.OR_TITULARITAT,0), 0, A.OR_NIFCIF, A.OR_TITULARITAT), A.OR_TITUSCPCB))
                             WHEN IN_SEGMBSINI IN ('103', '104') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR', 'CSIVI') THEN
                                 to_char(OR_REFOPE)
                             WHEN IN_SEGMBSINI IN ('007', '018', '021', '028', '029','034')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                 OR_CODIGO_BIC
                             WHEN IN_SEGMBSINI IN ('106', '107') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR') THEN
                                 to_char(A.OR_CLUNICONTR)
                             WHEN IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SEGMBS0 = '201'
                              AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                  OR_IDPERS
                             WHEN IN_TIPOREG IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   /* Rating inconsistente TAR-259 17/12/19*/
                                  to_char(OR_NUMOFI||OR_CTACLI)
                          END) D,
        (SELECT /*+ parallel (F 4) */ OR_IDREG, IN_TIPOREG, IN_METODE, IN_SUCEPT,
                CASE
                            WHEN IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN     -- Rating inconsistente TAR-259 17/12/19
                                 'EMPRESAS'
                            WHEN IN_SEGMBSINI IN ('101','102','002','017') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   -- Rating inconsistente TAR-259 17/12/19
                                 'CCAA'
                             WHEN IN_SEGMBSINI IN ('103', '104') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR', 'CSIVI') THEN
                                 'PRESTAMOS'
                             WHEN IN_SEGMBSINI IN ('007', '018', '021', '028', '029','034')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                 'EEFF'
                             WHEN IN_SEGMBSINI IN ('106', '107') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR') THEN
                                 'PARTICULARES'
                             WHEN IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SEGMBS0 = '201'
                              AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                  'PF'
                             WHEN IN_TIPOREG IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN /* Rating inconsistente TAR-259 17/12/19*/
                                  'OFEX'
                       END SEGMENTO,
                       CASE
                            WHEN IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   -- Rating inconsistente TAR-259 17/12/19
                                 TO_CHAR(decode(OR_TITULARITAT, 0, or_nifcif, or_titularitat))
                            WHEN IN_SEGMBSINI IN ('101','102','002','017') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN   -- Rating inconsistente TAR-259 17/12/19
                                 TO_CHAR(DECODE(NVL(OR_TITUSCPCB,0), 0, DECODE(NVL(OR_TITULARITAT,0), 0, OR_NIFCIF, OR_TITULARITAT), OR_TITUSCPCB))
                             WHEN IN_SEGMBSINI IN ('103', '104') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR', 'CSIVI') THEN
                                 to_char(OR_REFOPE)
                             WHEN IN_SEGMBSINI IN ('007', '018', '021', '028', '029','034')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                 OR_CODIGO_BIC
                             WHEN IN_SEGMBSINI IN ('106', '107') AND IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX')
                             AND IN_SEGMBS0 <> '201' AND IN_SRATIN IN ('SSOR') THEN
                                 to_char(OR_CLUNICONTR)
                             WHEN IN_TIPOREG NOT IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SEGMBS0 = '201'
                              AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN    -- Rating inconsistente TAR-259 17/12/19
                                  OR_IDPERS
                             WHEN IN_TIPOREG IN ('OXE', 'OX', 'MMOXE', 'MMOX', 'PX', 'MMPX') AND IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SRR', 'CRDER') THEN /* Rating inconsistente TAR-259 17/12/19*/
                                  to_char(OR_NUMOFI||OR_CTACLI)
                       END TITULFIN
           FROM BAS_MEN.BASILEA F
          WHERE F.IN_SRATIN IN ('CRIDE','CRDE', 'SR', 'SSOR', 'CSIVI', 'SRR', 'CRDER') /* Rating inconsistente TAR-259 17/12/19 --OR (F.IN_SRATIN = 'RCURA' AND OR_PUNTSCO in (9999, 0)))   -- ARM 26/11/2019 - Se marcan como 'SSOR' en lugar de como 'RCURA' los préstamos sin rating que anteriormente fueron refinanciados y que actualmente no están recogidos en el censo de refinanciados y no están en periodo de cura.           */
            /* ARM 04/11/2019 - No entran en cambio de método las operaciones del modelo reactivo sin rating (SSOR) de particulares (consumo e hipotecarios). */
            /* NAV 14/01/2021 - los reactivo sin scoring no entran en el cambio de metodo */
            --AND NOT (f.IN_SRATIN IN ('SSOR') AND SUBSTR(f.IN_SUCEPT,1,2) IN ('CO','HI') AND (f.OR_FECOPE >= PN_FecPro_YYYYMMDD-10000 AND NVL(f.OR_FECSCO,f.OR_FECOPE) >= PN_FecPro_YYYYMMDD-10000))
            AND NOT (f.IN_SRATIN IN ('SSOR') AND SUBSTR(f.IN_SUCEPT,1,2) IN ('CO','HI') AND f.OR_SEGFIC2 NOT in ('CCO0', 'CCO1', 'CHI0', 'CHI1'))
            /* INI - 24/05/2022 - NAV - HDEV-154082 - Tratamiento outdated/unrated CCAA 
            AND IN_SEGMBSINI IN ('101','102','002','017','103', '104','007', '018', '021', '028', '029','034', '106', '107')  */
            AND IN_SEGMBSINI IN ('103', '104','007', '018', '021', '028', '029','034', '106', '107')  
             /* 13/01/2022- BNM - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos 
             OR (IN_SEGMBSINI IN ('003', '005','006', '009', '010', '019', '027') and OR_segfic2 in ('PA005', 'E5R', 'GR', 'GRP', 'P5', 'E5DS', 'NC5R', 'NC5DS'))) --XCG. 29/03/21 solo empresas corporates y grupos tienen cambio de método  */               
            AND (IN_METODE = 'AIRB'
             OR substr(IN_TIPOREG,1,2) = 'MM'
             OR IN_METODE_1 = 'AIRB')
            AND substr(IN_TIPOREG,1,2) not in ('AV', 'CI')) E /* 14/12/2021 - NAV - HDEV-81085 - Para que no entren registros de Avalista en cambio de Metode */
    WHERE E.TITULFIN = D.TITULFIN
      AND E.SEGMENTO = D.SEGMENTO;

     COMMIT;
     VN_NUMERR := 5;

     dbms_stats.gather_table_stats('BAS_MEN','CAMBIO_METODO', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );
     
     COMMIT;
     VN_NUMERR := 5;

     MERGE /*+ FULL(dst) parallel (dst 8)*/ INTO BAS_MEN.basilea dst
       USING (SELECT OR_IDREG, CASE WHEN ROUND(RWASTDA_2, 2 ) > ROUND( RWAAIRB, 2 ) THEN 'STDA' ELSE IN_METODE END AS IN_METODE,
                     CASE WHEN ROUND(RWASTDA_2, 2 ) > ROUND( RWAAIRB, 2 ) THEN 'MM'||IN_TIPOREG ELSE IN_TIPOREG END AS IN_TIPOREG
                FROM BAS_MEN.CAMBIO_METODO a) src
          ON (dst.or_idreg = src.or_idreg)
        WHEN MATCHED THEN
             UPDATE
                SET  dst.IN_METODE = SRC.IN_METODE,
                     dst.IN_TIPOREG = SRC.IN_TIPOREG;

    commit;

    VN_NUMERR := 10;

     /* Particulares que no sean empleados de CAM, BMN, BCG y LBI y que no sean reactivos se llevan al STDA --  ARM 03/12/2018 */
    UPDATE /*+ full(upd) parallel (upd 8)*/ BAS_MEN.BASILEA UPD
       SET IN_METODE_1 = 'AIRB',
           IN_METODE   = 'STDA' ,  
           IN_TIPOREG  = decode(substr(IN_TIPOREG,1,2), 'CI', substr(IN_TIPOREG,3), IN_TIPOREG) /* NAV - 03/05/2022 - HDEV-152520 - No permitir un cambio de método a AIRB a préstamos de particulares de entidades migradas */
     WHERE in_oper_migr in ('CAM', 'BMN', 'BCG', 'LBI') 
     /* 14/01/2021 - NAV - Los hipotecarios y consumo que son reactivo con operaciones migradas (CAM, BMN….) no los llevamos al STDA */
     --and (IN_SEGMBSINI IN ('106', '107') or (IN_SEGMBSINI IN ('103', '104') and (OR_FECOPE < PN_FecPro_YYYYMMDD-10000 OR OR_FECSCO < PN_FecPro_YYYYMMDD-10000)))
       and (IN_SEGMBSINI IN ('106', '107') or (IN_SEGMBSINI IN ('103', '104') and OR_SEGFIC2 IN ('CCO0', 'CCO1', 'CHI0', 'CHI1')))
       and IN_SUCEPT not in ('CONSTE', 'HINSTE', 'TANSTE', 'KTNSTE')
       and IN_METODE = 'AIRB';

    commit;

    VN_NUMERR := 15;

    -- Las garantías soberanas se llevan al método STDA. XCG, 3/02/14
    UPDATE /*+ full(upd) parallel (upd 8)*/ BAS_MEN.BASILEA upd
       SET IN_METODE_1 = 'AIRB'
         , IN_METODE   = 'STDA'
         , IN_TIPOREG  = decode(substr(IN_TIPOREG,1,2), 'CE', 'CE'||substr(IN_TIPOREG,3), 'CE'||IN_TIPOREG)
     WHERE IN_METODE = 'AIRB'
     --AND OR_CODGAR IN  ( 'GR 12305', 'GR 12111', 'GR 12110', 'GE 21109', 'GR 21104', 'GR 21110', 'GE 21110', 'EXP21110', 'EXP21109', 'GR 21111', 'GR 21112', 'GR 21113'); /* 02/03/2021 - NAV - Añadimos la garantía GR 21113 – Garantia BEI al STDA y marcarse con tiporeg CE* */
       AND OR_CODGAR IN  ( 'GE 21109', 'GR 21104', 'GR 21110', 'GE 21110', 'EXP21110', 'EXP21109', 'GR 21111', 'GR 21112', 'GR 21113'); /* 10/05/2022 RMR Eliminadas 3 garantias ya que están en el merge de más abajo */
    commit;

    VN_NUMERR := 25;
	
	/* RMR 25/03/2022 Tratamiento para llevar a STDA exposiciones de AIRB que tengan menor exposicion */
    MERGE  /*+ full(dst) PARALLEL (dst 8)*/ INTO BAS_MEN.BASILEA dst
    USING (SELECT /*+ parallel (b,4) parallel (st,4) parallel (irb,4) */ b.or_idreg
             FROM BAS_MEN.BASILEA b
            INNER JOIN BAS_MEN.BASILEA_STDA  st
               ON (b.or_idreg = st.or_idreg AND st.IN_SEGSTDA IN ('Ent.SP/Ot.Inst', 'Soberanos', 'A.R y Corp.Locales', 'Ent.SP/Ot.Inst', 'BMultides'))
            INNER JOIN BAS_MEN.BASILEA_AIRB_RWA   irb
               ON (irb.or_idreg = st.or_idreg)
            WHERE b.IN_METODE = 'AIRB'
              AND SUBSTR(b.IN_TIPOREG,1,2) NOT IN ('AV', 'MM', 'CI')
              AND (st.FI_RWASTDA * st.FI_EXPSTDA_PHASEIN) < irb.FI_RWAAIRB ) src
       ON (dst.OR_IDREG = src.OR_IDREG)
     WHEN MATCHED THEN
          UPDATE
             SET  dst.IN_METODE_1 = 'AIRB'
                , dst.IN_METODE   = 'STDA'
                , dst.IN_TIPOREG  = decode(substr(dst.IN_TIPOREG,1,2), 'CE', 'CE'||substr(dst.IN_TIPOREG,3), 'CE'||dst.IN_TIPOREG);
    COMMIT;

    -- Factoring con cobertura de soberano se llevan al método STDA. XCG, 3/02/14
    /*UPDATE BAS_MEN.BASILEA upd
       SET IN_METODE_1 = 'AIRB'
         , IN_METODE   = 'STDA'
         , IN_TIPOREG  = decode(substr(IN_TIPOREG,1,2), 'CE', 'CE'||substr(IN_TIPOREG,3), 'CE'||IN_TIPOREG)
     WHERE IN_METODE = 'AIRB'
       and or_clunicontr in (select FLOOR(OR_CLUNICONTR/100) from BAS_MEN.MAESTRO_FACTORING_COBERTURA where IN_SEGSTDA = 'Soberanos'); */
    -- 18/12/2019 RMR -Eliminamos tratamiento para factorings con cobertura donde se envia a STDA y se marca como CE 
	
    VN_NUMERR := 30;

    /* INI - NAV - 06/05/2022 - HDEV-152520 - Exposiciones con OR_COGDAR GR 12110, GR 12111 y GR 12305 -> solo aplicar el cambio de método a STDA (IN_TIPOREG = CE) en caso que el proceso de STDA 
                                              haya calculado una mitigación (RWA final < RWA inicial) */
    MERGE  /*+ full(dst) PARALLEL (dst 8)*/ INTO BAS_MEN.BASILEA dst
      USING (select /*+ PARALLEL(a 8) PARALLEL(b 8) */ a.or_idreg, b.OR_CODGAR, a.FI_RWASTDA,a.FI_POSPRESTDA_INI, b.IN_METODE, b.IN_TIPOREG
               from bas_men.basilea_stda a,
                    bas_men.basilea b
              where a.or_idreg = b.or_idreg
                and a.FI_RWASTDA < a.FI_POSPRESTDA_INI 
                and b.OR_CODGAR in ('GR 12110', 'GR 12111', 'GR 12305')
                and b.IN_METODE = 'AIRB'
                ) src
         ON (dst.OR_IDREG = src.OR_IDREG)
       WHEN MATCHED THEN
            UPDATE
               SET  dst.IN_METODE_1 = 'AIRB'
                  , dst.IN_METODE   = 'STDA'
                  , dst.IN_TIPOREG  = decode(substr(dst.IN_TIPOREG,1,2), 'CE', 'CE'||substr(dst.IN_TIPOREG,3), 'CE'||dst.IN_TIPOREG);
    COMMIT;
    /* FIN - NAV - 06/05/2022 - HDEV-152520 */    

    VN_NUMERR := 31;

    -- Marcamos a SRCRE la contribución prefinanciada para el fondo de impagos a una ECC cualificada (C_CCP = 4) - 17/04/2018
    MERGE  /*+ full(dst) PARALLEL (dst 8)*/ INTO BAS_MEN.BASILEA dst
      USING (SELECT /*+ PARALLEL (a 8)*/ OR_IDREG FROM BAS_MEN.BASILEA_STDA a WHERE C_CCP = 4) src
         ON (dst.OR_IDREG = src.OR_IDREG)
       WHEN MATCHED THEN
            UPDATE
               SET  dst.IN_METODE = 'STDA',
                    dst.FI_ELIMI1 = 'SRCRE';
    COMMIT;

    VN_NUMERR := 35;

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT = 'FINALIZADO',
           DATA_FIN = SYSDATE,
           FINALITZAT = 'OK',
           REG_UPD_OK = VN_COUNT,
           REG_INS_OK = VN_COUNT2
    WHERE PROCES = '18. FNC_CANVI_METODE '||PV_TABLA
      AND ESTAT  = 'INICIADO';

    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     VV_MENSAJE:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
     UPDATE BAS_MEN.CONTROL_PROCES
        SET ESTAT = 'FINALIZADO',
            DATA_FIN = SYSDATE,
            FINALITZAT = 'KO',
            REG_UPD_OK = VN_COUNT,
            ERROR_ORAC = VV_MENSAJE,
            ERROR_PROG = SUBSTR(VV_ROWID||'* NUMERR: '||VN_NUMERR,1,255),
            NUM_ERROR  = VN_NUMERR
      WHERE PROCES = '18. FNC_CANVI_METODE '||PV_TABLA
        AND ESTAT  = 'INICIADO';

  COMMIT;
  raise;

END;

--PROCESO PRINCIPAL

BEGIN

  IF PV_OPC = 0 THEN
     FNC_CANVI_METT;
  END IF;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_CANVI_MET';

/* 22/09/2020 RMR TM-2567
Este segundo proceso realiza la automatización de un ajuste que hacía
mensualmente negocio en las provisiones Phase in. El registro se inserta vacío en pre metodo*/
CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_AJUSTE_PROV_PHASEIN2 IS

    vor_idreg_auto  NUMBER(12)              DEFAULT 0;
    v_or_idreg_prov NUMBER(12)              DEFAULT 0;
    vdot_conso      FLOAT(126)              DEFAULT 0;
    vdot_ind        FLOAT(126)              DEFAULT 0;
    V_OR_DISPTOCON  FLOAT(126)              DEFAULT 0;
    V_OR_DISPTO     FLOAT(126)              DEFAULT 0;
    PN_FECPRO       NUMBER(6)               DEFAULT 0;
    --
    Cte_Proces      VARCHAR2(256)           DEFAULT 'FNC_AJUSTE_PROV_PHASEIN2';
    vNumErr         NUMBER(2)               DEFAULT 1;
    v_Msg_Err       VARCHAR2(255)           DEFAULT '';

BEGIN
    -- Cierre de cualquier tx abierta
    ROLLBACK;
    -- Habilitación paralelismo
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    --Iniciamos log del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

    --Recuperamos la fecha del pase actual
    BEGIN
      SELECT TO_NUMBER(substr(VALPARM,1,6))
        INTO PN_FECPRO
        FROM BAS_MEN.PARAMETROS_PROCESO
       WHERE CODCSB   = 81
         AND CODPARM  = '0001'
         AND SECPARM  = '01';
    EXCEPTION
         WHEN OTHERS THEN
             RAISE;
     END;

    vNumErr := 1;
    SELECT /*TIPOLOGIA,*/
        SUM(CASE WHEN IN_TIPOREG LIKE '%8%' THEN 0
                 ELSE DOTACION_CONS
            END) AS DOTACION_CONS,
        SUM(CASE WHEN OR_ENTITY = 81 THEN (CASE WHEN IN_TIPOREG LIKE '%8%' THEN 0
                                                ELSE DOTACION_IND
                                            END)
                ELSE 0
            END) AS DOTACION_IND
     /*,SUM(case WHEN IN_TIPOREG LIKE '%8%' THEN 0
                 ELSE ELCON
            END) AS EL_CONS,
        SUM(CASE WHEN OR_ENTITY = 81 THEN (case WHEN IN_TIPOREG LIKE '%8%' THEN 0
                                                ELSE EL
                                            END)
                ELSE 0
             END) AS EL_IND*/
    INTO vdot_conso, vdot_ind
    FROM
        (SELECT /*+ /*+ parallel(a 4) parallel(b 4) */ a.OR_IDREG
            , OR_ENTITY
            , IN_TIPOREG
            , CASE WHEN IN_METODE = 'AIRB' THEN CASE WHEN IN_SRATIN IN ('MORA','BLQRM') THEN 'IRB-NONPE'
                                                   ELSE 'IRB-PE'
                                              END
                  ELSE  CASE WHEN IN_SEGSTDA_AUX = 'Morosos' THEN 'STD-NONPE'
                          ELSE 'STD-PE'
                        END
             END AS TIPOLOGIA
            , CASE WHEN marca_epa = '01' AND a.FI_EPICON LIKE '01014%' THEN (OR_DISPTOCON+OR_DISBLECON+OR_AJUVALCON+OR_AVALESCON)*0.2
                  ELSE (OR_DISPTOCON+OR_DISBLECON+OR_AJUVALCON+OR_AVALESCON)
             END AS SALDO_CONS
            , CASE WHEN marca_epa = '01' AND a.FI_EPICON LIKE '01014%' THEN (FI_PROV_FULLY_CON) *0.2
                ELSE (FI_PROV_FULLY_CON)
             END AS dotacion_CONS
            , CASE WHEN marca_epa = '01' AND a.FI_EPICON LIKE '01014%' THEN (OR_DISPTO+OR_DISBLE+OR_AJUVAL+OR_AVALES)*0.2
                   ELSE (OR_DISPTO+OR_DISBLE+OR_AJUVAL+OR_AVALES)
              END AS SALDO_IND
            , CASE WHEN marca_epa = '01' AND a.FI_EPICON LIKE '01014%' then FI_PROV_FULLY*0.2
                   ELSE FI_PROV_FULLY
              END AS dotacion_IND
            , 0 AS ELCON
            , 0 AS EL
         FROM bas_men.basilea a,    bas_men.basilea_stda b
        WHERE or_entity in (81,242,9109) and FI_ELIMI1 = 'NO' AND OR_IDPRO1 <> 'OT'
          AND a.or_idreg = b.or_idreg
        )
    WHERE TIPOLOGIA = 'STD-PE'
    GROUP BY TIPOLOGIA;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX1');

    INSERT INTO BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX1 VALUES ('STDA_CONSO', vdot_conso);
    INSERT INTO BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX1 VALUES ('STDA_INDI', vdot_ind);

    COMMIT;

    vNumErr := 2;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RWA_TRANSITORIO_IFRS9_PAR1');

    INSERT INTO BAS_MEN.RWA_TRANSITORIO_IFRS9_PAR1
    SELECT * FROM DCRPROP_MENSUAL.RWA_TRANSITORIO_IFRS9_PAR1;

    COMMIT;

    vNumErr := 3;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RWA_TRANSITORIO_IFRS9_PAR2');

    INSERT INTO BAS_MEN.RWA_TRANSITORIO_IFRS9_PAR2
    SELECT * FROM DCRPROP_MENSUAL.RWA_TRANSITORIO_IFRS9_PAR2;

    COMMIT;

    -- Realizamos el calculo
    vNumErr := 4;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX2');
    COMMIT;

    vNumErr := 5;

    INSERT INTO BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX2
    ( TIPO
    , AB_EST_INI
    , SHORTFALL_DIN_012020
    , AB_EST_A4_OLD
    , SHORTFALL_DIN_ACT
    , RWA_FIN
    )
    SELECT p1.tipo
         , p1.ab_est_ini
         , p1.SHORTFALL_DIN_012020
         , p1.AB_EST_A4_OLD
         , aux1.SHORTFALL_DIN_ACT
         , (p1.ab_est_ini * auxp2.FACTOR_TRANSIT_1 + GREATEST(aux1.SHORTFALL_DIN_ACT - p1.SHORTFALL_DIN_012020, 0) * 0.7 * auxp2.FACTOR_TRANSIT_2 + p1.AB_EST_A4_OLD * auxp2.FACTOR_TRANSIT_1) AS RWA_TRANSIT_FIN
     FROM BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX1 aux1
        , BAS_MEN.RWA_TRANSITORIO_IFRS9_PAR1 p1
        , (SELECT FACTOR_TRANSIT_1, FACTOR_TRANSIT_2
             FROM BAS_MEN.RWA_TRANSITORIO_IFRS9_PAR2 a
            WHERE to_date(fecha_inicio,'DDMMYYYY') <= TO_DATE(PN_FECPRO, 'YYYYMM')
              AND to_date(fecha_fin,'DDMMYYYY')  >= TO_DATE(PN_FECPRO, 'YYYYMM')
            ORDER BY A.fecha_fin
            FETCH FIRST 1 ROWS ONLY /* Recuperamos los 2 factores de transito de solo el año que queremos */
           ) auxp2
    WHERE aux1.tipo = p1.tipo
    ORDER BY TIPO;

    COMMIT;

    vNumErr := 6;
    SELECT RWA_FIN as OR_DISPTO
      INTO V_OR_DISPTO
      FROM BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX2
     WHERE TIPO = 'STDA_INDI';

    SELECT RWA_FIN as OR_DISPTOCON
      INTO V_OR_DISPTOCON
      FROM BAS_MEN.RWA_TRANSITORIO_IFRS9_AUX2
     WHERE TIPO = 'STDA_CONSO';

     SELECT /*+ PARALLEL (A,8)*/ OR_IDREG
       INTO v_or_idreg_prov
       FROM BAS_MEN.BASILEA A
      WHERE OR_NOMPER = 'AUTO: Ajuste Provisiones Phasein';

    vNumErr := 7;
    UPDATE BAS_MEN.BASILEA
       SET OR_DISPTO     = V_OR_DISPTO,
           FI_EADAIRB    = V_OR_DISPTO,
           OR_DISPTOCON  = V_OR_DISPTOCON,
           FI_EADCONAIRB = V_OR_DISPTOCON
     WHERE OR_IDREG = v_or_idreg_prov;
    COMMIT;

    vNumErr := 8;
    UPDATE BAS_MEN.BASILEA_STDA
       SET  FI_EXPSTDA_FULLY     = 0
          , FI_EXPSTDA_FULLY_CON = 0
          , OR_SALDO_ORIG = V_OR_DISPTO
          , OR_SALDO_ORIGCON = V_OR_DISPTOCON
          , FI_EXPSTDA_PHASEIN = V_OR_DISPTO
          , FI_EXPSTDA_PHASEIN_CON = V_OR_DISPTOCON
     WHERE OR_IDREG = v_or_idreg_prov;
    COMMIT;

    vNumErr := 9;
    UPDATE BAS_MEN.BASILEA_AIRB
       SET FI_EADCONAIRB = V_OR_DISPTOCON
     WHERE OR_IDREG = v_or_idreg_prov;
    COMMIT;

    vNumErr := 10;

    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Msg_Err, vNumErr);

      RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_AJUSTE_PROV_PHASEIN2';



CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_AJUSTE_INTANGIBLES2 IS

    vor_idreg_auto  NUMBER(12)              DEFAULT 0;
    v_or_idreg_prov NUMBER(12)              DEFAULT 0;
    vdot_conso      FLOAT(126)              DEFAULT 0;
    vdot_ind        FLOAT(126)              DEFAULT 0;
    V_OR_DISPTOCON  FLOAT(126)              DEFAULT 0;
    V_OR_DISPTO     FLOAT(126)              DEFAULT 0;
    PN_FECPRO       NUMBER(6)               DEFAULT 0;
    --
    Cte_Proces      VARCHAR2(256)           DEFAULT 'FNC_AJUSTE_INTANGIBLES2';
    vNumErr         NUMBER(2)               DEFAULT 1;
    v_Msg_Err       VARCHAR2(255)           DEFAULT '';

    cursor c1 is
      SELECT *
        FROM BAS_MEN.SALDO_AJUSTE_INTANGIBLE;

BEGIN
    -- Cierre de cualquier tx abierta
    ROLLBACK;
    -- Habilitación paralelismo
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

    --Iniciamos log del proceso
    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');

    vNumErr := 1;

    FOR cur IN c1 LOOP

        SELECT /*+ PARALLEL (A,8)*/ OR_IDREG
          INTO v_or_idreg_prov
          FROM BAS_MEN.BASILEA A
         WHERE OR_NOMPER = 'AUTO: Ajuste Intangibles'
           AND OR_ENTITY = cur.OR_ENTITY;

        vNumErr := 5;

        UPDATE BAS_MEN.BASILEA
           SET OR_DISPTO     = cur.SALDO,
               FI_EADAIRB    = cur.SALDO,
               OR_DISPTOCON  = cur.SALDO,
               FI_EADCONAIRB = cur.SALDO
         WHERE OR_IDREG = v_or_idreg_prov;

        COMMIT;

        vNumErr := 10;

        UPDATE BAS_MEN.BASILEA_STDA
           SET  FI_EXPSTDA_FULLY       = cur.SALDO
              , FI_EXPSTDA_FULLY_CON   = cur.SALDO
              , OR_SALDO_ORIG          = cur.SALDO
              , OR_SALDO_ORIGCON       = cur.SALDO
              , FI_EXPSTDA_PHASEIN     = cur.SALDO
              , FI_EXPSTDA_PHASEIN_CON = cur.SALDO
         WHERE OR_IDREG = v_or_idreg_prov;

        COMMIT;

        vNumErr := 15;

        UPDATE BAS_MEN.BASILEA_AIRB
           SET FI_EADCONAIRB   = cur.SALDO
         WHERE OR_IDREG = v_or_idreg_prov;

        COMMIT;

        vNumErr := 20;

    END LOOP;

    vNumErr := 99;
    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN

      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Msg_Err, vNumErr);
      COMMIT;

      RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'FNC_AJUSTE_INTANGIBLES2';


create or replace PROCEDURE       BAS_MEN.BASI_REASIGNACION_METODO IS

    vProces           CONSTANT VARCHAR2(40)   := 'REASIGNACION METODO';
    vNumErr           NUMBER(2)               DEFAULT 1;
    vCodi             NUMBER(10)              DEFAULT 0;
    vDescripcio       VARCHAR2(255)           DEFAULT '';

    VV_TABLA          VARCHAR2(200):= 'BAS_MEN.BASILEA';
    VN_FECPRO         NUMBER(8); -- Ojo con la fecha del proceso.
    VN_MESPRO         NUMBER(6);   -- Ojo con la fecha del proceso.
    VD_FECPRO         DATE;
    VV_RETORNO        VARCHAR2(2) := 'OK';

BEGIN

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  BAS_MEN.FNC_CANVI_MET (VV_TABLA, 0, VV_RETORNO, VV_RETORNO, VN_FECPRO);
  
  /* 13/01/2022- BNM - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos */
  /* En caso de ser la OPC de pre coreps, realiza el cálculo del RWA transitorio segun el IFRS9 y lo updatea los dispuestos en basilea y basilea_stda */
  BAS_MEN.FNC_AJUSTE_PROV_PHASEIN2();
  COMMIT;

  /* 13/01/2022- BNM - HDEV-101803 - Requerimientos PD Outdated y Unrated para Corporates y Grupos */
  BAS_MEN.FNC_AJUSTE_INTANGIBLES2();
  COMMIT;

EXCEPTION

    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;

/

--bka40112=====================================================================================================
Select 'bka40112' As Compilando from dual;
        
CREATE OR REPLACE FORCE VIEW BAS_MEN.VW_PERIMETRO_AVAL_EXT AS
(SELECT
        OR_CONTRATO_GARANTIA,
        OR_CODGAR,
        OR_NUMPERSONA,
        OR_PERSON,
        OR_NIFCIF,
        IN_SEGMBSINI,
        OR_NOMPER,
        OR_CODIGOLEI,
        OR_IDCNAE,
        OR_TITULARITAT,
        ESTADOCIVILPER,
        ID_FCH_ALTA,
        ID_FCH_NACI,
        OR_SEGFAC,
        OR_SEGGES,
        IN_VTAGRU,
        IN_VTAGRU_CONS,
        IN_ACTIVO,
        IN_ACTIVO_CONS,
        IN_NUMEMP,
        IN_NUMEMP_CONS,
        IN_EXISTENCIAS,
        IN_ACTIVO_CIR,
        OR_CTACLI,
        OR_NUMOFI,
        OR_SITUAC0,
        OR_MODRAT0,
        OR_PUNT0,
        OR_FECPUN0,
        m.MAESTRO_EAD_MAX
 FROM BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_2 p,
      (SELECT MAX(EAD_TITULARITAT_MAX) AS MAESTRO_EAD_MAX --HDEV-107786 (JRJ) Al no tener exposición calculada, cogemos la máxima EAD del maestro
         FROM BAS_MEN.MAESTRO_PERF_UNSEC_LGD) m);

/************************************************************************************/
/* CREATE DE LA DEFINICION DEL PACKAGE                                              */
/************************************************************************************/
CREATE OR REPLACE PACKAGE BAS_MEN.CALCULO_CAMPOS_AVAL_EXT IS

    TYPE CURSOR_BASILEA IS REF CURSOR RETURN BAS_MEN.VW_PERIMETRO_AVAL_EXT%ROWTYPE;
    TYPE T_ARRAY_AVAL_EXT IS TABLE OF BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_3%ROWTYPE;

    FUNCTION F_AVALES_EXT (CUR IN CURSOR_BASILEA)RETURN T_ARRAY_AVAL_EXT
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED;

END;
/

/************************************************************************************/
/* CREATE DE LA DEFINICION DE LA FUNCION DEL PACKAGE                                */
/************************************************************************************/
CREATE OR REPLACE PACKAGE BODY BAS_MEN.CALCULO_CAMPOS_AVAL_EXT AS

 FUNCTION F_AVALES_EXT (cur IN cursor_basilea)RETURN T_ARRAY_AVAL_EXT
    PARALLEL_ENABLE(PARTITION CUR BY ANY)
    PIPELINED

      AS

      in_rec cur%ROWTYPE;
      out_rec BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_3%ROWTYPE;

        v_NumErr                 NUMBER(3)   ;
        VV_ROWID                 VARCHAR2(12);
        VN_FECPRO                NUMBER(8)   ;

        VV_IN_NUMEMP_CONS        NUMBER(10,0);
        VV_IN_NUMEMP             NUMBER(10,0);
        VV_IN_SEGMBS2            VARCHAR2(3) ;
        VV_IN_SEGMBS0            VARCHAR2(3) ;
        VV_IN_SEGMBS1            VARCHAR2(3) ;
        VV_OR_SEGRIE             VARCHAR2(10);
        VV_OR_SEGFIC             VARCHAR2(2) ;
        VV_OR_SEGFIC2            VARCHAR2(10);
        VV_IN_SEGMBS             VARCHAR2(25);

        VN_MODELO_CALI           VARCHAR2(10);
        VN_FLAG_NUEVA_EMP        NUMBER(1)   ;
        VN_PUNTMIN               FLOAT(126)  ;
        VN_PUNTMAX               FLOAT(126)  ;
        VN_PUNTNOR               FLOAT(126)  ;
        VN_CICLOA1               FLOAT(126)  ;
        VN_CICLOB1               FLOAT(126)  ;
        VN_PD_AJUSCIC            FLOAT(126)  ;
        VN_MULTIPLICADOR_PDCONT  FLOAT(126)  ;
        VV_FI_PD_COREPS          FLOAT(126)  ;
        VN_PDCONT                FLOAT(126)  ;
        VV_IN_RATINT             NUMBER(4,2) ;
        VN_OR_PUNTFIN            FLOAT(126)  ;
        VN_FI_RATCONT            NUMBER(4,2) ;
        VN_OR_PUNT               FLOAT(126)  ;

        VV_FI_LGDAIRB            FLOAT(126)  ;
        VN_LGD_LONGRUN           FLOAT(126)  ;
        VN_C_TYPE_GUARANTEE      NUMBER(1)   ;
        VN_FI_ATAMAIRB           FLOAT(126)  ;
        v_Es_Ente_No_Regulado    VARCHAR2(1) ;
        VV_Entidad_Ente          NUMBER(1)   ;
        VV_In_SegAIRB            VARCHAR2(25);
        VN_PD_ORIGINAL           FLOAT(126)  ;
        --HDEV-107786 INI Nuevos calibrados (JRJ) 10/06/2022
        VN_TIPRAT                 NUMBER(2,0);
        VN_IMP_MATERIALES         NUMBER(5,0);
        VN_ALFA                   FLOAT;
        VN_BETA                   FLOAT;
        VN_THETA                  FLOAT;
        VN_Z                      FLOAT;
        VV_LEGAL_FRAMEWORK        VARCHAR2(25 BYTE);
        VV_LEASMOB                VARCHAR2(1 BYTE);
        VV_TIPO_SOCIEDAD          VARCHAR2(65 BYTE);
        VV_LETRA                  VARCHAR2(1);
        VV_FI_PD_COREPS_OLD     FLOAT(126);
        --HDEV-107786 FIN Nuevos calibrados (JRJ) 10/06/2022
BEGIN

    SELECT TO_NUMBER(VALPARM)
      INTO VN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

      LOOP fetch cur into in_rec;
      EXIT WHEN cur%notfound;
        /******************************/
        v_NumErr             := 0  ;
        VV_ROWID             := TO_CHAR(IN_REC.OR_CONTRATO_GARANTIA);

        VV_IN_NUMEMP         := IN_REC.IN_NUMEMP;
        VV_IN_NUMEMP_CONS    := IN_REC.IN_NUMEMP_CONS;
        VV_IN_SEGMBS2        := '?';
        VV_IN_SEGMBS0        := '?';
        VV_IN_SEGMBS1        := '?';
        VV_OR_SEGRIE         := '?';
        VV_OR_SEGFIC         := '?';
        VV_OR_SEGFIC2        := '?';
        VV_IN_SEGMBS         := '?';

        VN_MODELO_CALI       := '?';
        VN_FLAG_NUEVA_EMP    := '1';
        VN_PUNTMIN           := 0;
        VN_PUNTMAX           := 100;
        VN_PUNTNOR           := 0;
        VN_CICLOA1           := 0;
        VN_CICLOB1           := 0;
        VN_PD_AJUSCIC        := 0;
        VN_MULTIPLICADOR_PDCONT := 1;
        VV_FI_PD_COREPS      := 0 ;
        VN_PDCONT            := 99;
        VV_IN_RATINT         := 0 ;
        VN_OR_PUNTFIN        := 0 ;
        VN_FI_RATCONT        := 99;
        VN_OR_PUNT           := IN_REC.OR_PUNT0;

        VV_FI_LGDAIRB        := 99 ;
        VN_LGD_LONGRUN       := 99 ;
        VN_C_TYPE_GUARANTEE  := 0 ;
        VN_FI_ATAMAIRB       := 0  ;
        v_Es_Ente_No_Regulado:= 'N';
        VV_Entidad_Ente      := 0  ;
        VV_In_SegAIRB        := '?';
    --HDEV-107786 INI Nuevos calibrados (JRJ) 10/06/2022
		    VN_TIPRAT          := 0;
		    VN_IMP_MATERIALES  := 0;
		    VN_ALFA        := 0;
		    VN_BETA        := 0;
		    VN_THETA       := 0;
		    VN_Z                 := 0;
		    VV_LEGAL_FRAMEWORK   :=NULL;
		    VV_LEASMOB         :='N';
		    VV_TIPO_SOCIEDAD   :=NULL;
		    VV_LETRA       :=NULL;
		    VV_FI_PD_COREPS_OLD := 0;
    --HDEV-107786 FIN Nuevos calibrados (JRJ) 10/06/2022
        /******************************/

        v_NumErr  := 1;
        /* IN_SEGMBS2 */

        BEGIN
             SELECT '020' AS IN_SEGMBS2
               INTO VV_IN_SEGMBS2
               FROM BAS_MEN.MAESTRO_CNAES_SECTOR
              WHERE CNAE93 = IN_REC.OR_IDCNAE
                AND SEGMENTO = 'PROMOTOR';
          EXCEPTION
               WHEN OTHERS THEN
                    VV_IN_SEGMBS2 := '?';
          END;

    v_NumErr  := 2;
        /* IN_SEGMBS0 */

         /* '200' Promotor */
         --IF VV_IN_SEGMBS2 = '020' THEN
         --  IN_SEGMBS0 := '200';
         --END IF;

         /* '201' Project Finance */
         BEGIN
             SELECT '201' AS IN_SEGMBS0
               INTO VV_IN_SEGMBS0
               FROM BAS_MEN.MAESTRO_PROJECT_FINANCE pf
              WHERE pf.OR_IDPERS = IN_REC.OR_NIFCIF;
          EXCEPTION
               WHEN OTHERS THEN
                     BEGIN
                   SELECT '201' AS IN_SEGMBS0
                     INTO VV_IN_SEGMBS0
                     FROM BAS_MEN.MAESTRO_PROJECT_FINANCE pf
                    WHERE NVL(pf.OR_CTACLI,0) <> 0
                      AND pf.or_numofi = IN_REC.OR_NUMOFI
                      AND pf.OR_CTACLI = IN_REC.OR_CTACLI;
                EXCEPTION
                     WHEN OTHERS THEN
                       VV_IN_SEGMBS0 := '?';
               END;
          END;

          /* '203' Real Estate */
           BEGIN
             SELECT '203' AS IN_SEGMBS0
               INTO VV_IN_SEGMBS0
               FROM BAS_MEN.MAESTRO_REAL_ESTATE pf
              WHERE pf.OR_IDPERS = IN_REC.OR_NIFCIF;
          EXCEPTION
               WHEN OTHERS THEN
                     BEGIN
                   SELECT '203' AS IN_SEGMBS0
                     INTO VV_IN_SEGMBS0
                     FROM BAS_MEN.MAESTRO_REAL_ESTATE re
                    WHERE NVL(re.OR_CTACLI,0) <> 0
                      AND re.or_numofi = IN_REC.OR_NUMOFI
                      AND re.OR_CTACLI = IN_REC.OR_CTACLI;
                EXCEPTION
                     WHEN OTHERS THEN
                       VV_IN_SEGMBS0 := VV_IN_SEGMBS0;
               END;
          END;

          /* '204' Object Finance */
           BEGIN
             SELECT '204' AS IN_SEGMBS0
               INTO VV_IN_SEGMBS0
               FROM BAS_MEN.MAESTRO_OBJECT_FINANCE pf
              WHERE pf.OR_IDPERS = IN_REC.OR_NIFCIF;
          EXCEPTION
               WHEN OTHERS THEN
                     BEGIN
                   SELECT '203' AS IN_SEGMBS0
                     INTO VV_IN_SEGMBS0
                     FROM BAS_MEN.MAESTRO_OBJECT_FINANCE obf
                    WHERE NVL(obf.OR_CTACLI,0) <> 0
                      AND obf.or_numofi = IN_REC.OR_NUMOFI
                      AND obf.OR_CTACLI = IN_REC.OR_CTACLI;
                EXCEPTION
                     WHEN OTHERS THEN
                       VV_IN_SEGMBS0 := VV_IN_SEGMBS0;
               END;
          END;

        v_NumErr  := 3;
        /* IN_SEGMBS1 */

        /* FMRR - 30/09/2021 -Requerimientos cierres de Septiembre - Segmentación minorista y factor de apoyo a Pymes  */
            IF IN_REC.IN_NUMEMP_CONS = 0 AND IN_REC.IN_VTAGRU_CONS >= 50000000 THEN
                VV_IN_NUMEMP_CONS:= '251';
            ELSE
                VV_IN_NUMEMP_CONS:= IN_REC.IN_NUMEMP_CONS;
            END IF;

            /* FMRR - 30/09/2021 -Requerimientos cierres de Septiembre - Segmentación minorista y factor de apoyo a Pymes  */
            IF IN_REC.IN_NUMEMP = 0 AND IN_REC.IN_VTAGRU >= 50000000 THEN
                VV_IN_NUMEMP:= '251';
            ELSE
                VV_IN_NUMEMP:= IN_REC.IN_NUMEMP;
            END IF;

            -- Nuevos requerimientos Pyme Minorista: menor 250 empleados y (ventas menor 50M o activo menor 43M). XCG, 18/10/13. (2014)
            IF VV_IN_NUMEMP_CONS <= 250 AND (IN_REC.IN_VTAGRU_CONS/1000000 <= 50 OR IN_REC.IN_ACTIVO_CONS/1000000 <= 43) THEN
               VV_IN_SEGMBS1:= '501';

            -- Para Patrimoniales o Holdings se utilizarán los Activos Consolidados en lugar de las Ventas. 201606 JCV
            -- Sólo si las ventas son 0. Se añaden promotores 201609
            ELSIF (IN_REC.ESTADOCIVILPER IN ('1', '3', '4') OR VV_IN_SEGMBS2 = '020') AND IN_REC.IN_VTAGRU_CONS IN (0, 99) AND IN_REC.IN_ACTIVO_CONS /1000000 < 50 THEN
                  VV_IN_SEGMBS1:= '500';

            ELSIF IN_REC.IN_VTAGRU_CONS/1000000 < 50 THEN
                  VV_IN_SEGMBS1:= '500';

            /* 03/11/2021 - NAV - Si las ventas consolidadas son mayores a 50 millones y el segmento sea ('002','017') asignar in_segmbs1 = '500' */
            ELSIF IN_REC.IN_SEGMBSINI IN ('002','017') AND IN_REC.IN_VTAGRU_CONS >= 50000000 THEN
                  VV_IN_SEGMBS1:= '500';
            ELSE
                  VV_IN_SEGMBS1:= '?';
            END IF;

        v_NumErr  := 4;
        /* OR_SEGRIE */
        BEGIN
            SELECT DESC_BREV
            INTO VV_OR_SEGRIE
            FROM BAS_MEN.MAESTRO_DETALLE_MODELOS
            WHERE CODMODELO = IN_REC.OR_MODRAT0  ;
        EXCEPTION
            WHEN OTHERS THEN
                 VV_OR_SEGRIE := '?';
        END;

        v_NumErr  := 5;

        /* OR_SEGFIC */
        IF VV_OR_SEGRIE <> '?' THEN
           VV_OR_SEGFIC := SUBSTR(VV_OR_SEGRIE,1,2);
        ELSE
           VV_OR_SEGFIC := '?';
        END IF;


    IF VV_OR_SEGRIE = 'GR' THEN
       VV_OR_SEGFIC := 'E5';
    ELSIF IN_REC.IN_SEGMBSINI = '019' OR VV_IN_SEGMBS0 IN ('201', '203', '204') OR IN_REC.ESTADOCIVILPER IN ('1','3','4')
          OR VV_IN_SEGMBS2 = '020'    OR SUBSTR(NVL(VV_OR_SEGRIE,'?'), 1, 1) IN ('C','P') THEN

        IF NVL(IN_REC.OR_SEGFAC,0) = 0 THEN
          VV_OR_SEGFIC :=  'E3';
        ELSIF IN_REC.OR_SEGGES IN (0,4,5,9) THEN
          VV_OR_SEGFIC :=  'E0';
        ELSIF IN_REC.OR_SEGGES = 3 THEN
            IF IN_REC.OR_SEGFAC = 11 THEN
              VV_OR_SEGFIC := 'E0';
            ELSIF IN_REC.OR_SEGFAC = 12 THEN
              VV_OR_SEGFIC := 'E1';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 2 THEN
              VV_OR_SEGFIC := 'E2';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 3 THEN
              VV_OR_SEGFIC := 'E3';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 4 THEN
              VV_OR_SEGFIC := 'E4';
            ELSIF SUBSTR(IN_REC.OR_SEGFAC,1,1) = 5 THEN
              VV_OR_SEGFIC := 'E5';
            ELSE
              VV_OR_SEGFIC := 'E3';
            END IF;
        ELSE
          VV_OR_SEGFIC := 'E3';
        END IF;

     ELSE
        VV_OR_SEGFIC := SUBSTR(VV_OR_SEGRIE,1,2);
         END IF;

        v_NumErr  := 6;
        /* OR_SEGFIC2 Al solo tener empresas con rating vigente el segfic2 es igual al segmetno de riesgo */
        VV_OR_SEGFIC2 := VV_OR_SEGRIE;

        v_NumErr  := 7;
        /* IN_SEGMBS */

        BEGIN
          SELECT IN_SEGBS
            INTO VV_IN_SEGMBS
            FROM BAS_MEN.MAESTRO_SEGMENTOS
           WHERE IN_SEGMBSINI = IN_REC.IN_SEGMBSINI;
        EXCEPTION
             WHEN OTHERS THEN
                VV_IN_SEGMBS := '?';
          END;

        IF VV_IN_SEGMBS0 = '201' THEN
           VV_IN_SEGMBS := 'Project Finance';
        ELSIF VV_IN_SEGMBS0 = '202' THEN
           VV_IN_SEGMBS := 'Derechos Cobro';
        ELSIF VV_IN_SEGMBS0 = '203' THEN
           VV_IN_SEGMBS := 'Real Estate';
        ELSIF VV_IN_SEGMBS0 = '204' THEN
           VV_IN_SEGMBS := 'Object Finance';
        END IF;

        v_NumErr  := 8;
        /* FI_PDS_COREPS y FI_PDCONT */

         IF SUBSTR(VV_OR_SEGFIC2,1,2) IN ('GR', 'E5', 'P5') OR VV_OR_SEGFIC2 in ('PA005', 'NC5DS', 'NC5R', 'NC5') THEN
              IF VV_OR_SEGFIC2 = 'GRP' THEN
                 VN_MODELO_CALI:= 'GR_PROM';
              ELSIF VV_OR_SEGFIC2 = 'GR' THEN
                 VN_MODELO_CALI:= 'GR_EMPR';
              ELSIF SUBSTR(VV_OR_SEGFIC2,1,3) = 'NC5' THEN
                 VN_MODELO_CALI:= 'E5';
              ELSIF VV_OR_SEGFIC2 <> 'PA005' THEN
                 VN_MODELO_CALI:= SUBSTR(VV_OR_SEGFIC2,1,2);
              ELSE
                 VN_MODELO_CALI:= VV_OR_SEGFIC2;
              END IF;

              BEGIN
                SELECT PD_REG
                  INTO VV_FI_PD_COREPS
                  FROM BAS_MEN.PD_CORPORATES_GRUPOS
                 WHERE SEG = VN_MODELO_CALI
                   AND TIPO = 'NORMAL'
                   AND PUNT_MIN <= IN_REC.OR_PUNT0
                   AND PUNT_MAX >= IN_REC.OR_PUNT0;
             EXCEPTION
                  WHEN OTHERS THEN
                       VV_FI_PD_COREPS := 99;
             END;

             VN_PDCONT:= VN_PD_ORIGINAL;

        ELSE

            IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                   FLOOR(MONTHS_BETWEEN(TO_DATE(VN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
                 OR
                   NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                   FLOOR(MONTHS_BETWEEN(TO_DATE(VN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
                THEN VN_FLAG_NUEVA_EMP := 1;
                ELSE VN_FLAG_NUEVA_EMP := 0;
             END IF;

              BEGIN
                 SELECT DISTINCT MODELO, TIPRAT
                   INTO VN_MODELO_CALI, VN_TIPRAT
                   FROM BAS_MEN.MAESTRO_MODELO_RATING
                  WHERE MODRAT = IN_REC.OR_MODRAT0;
               EXCEPTION
                    WHEN OTHERS THEN
                         VN_MODELO_CALI := '?';
               END;

        --HDEV-107786 INI Nuevos calibrados (JRJ) 10/06/2022
        IF VV_OR_SEGRIE IN ('PA001','PA002','PA003') THEN
        VV_OR_SEGRIE:='PAT';
        ELSE
        VV_OR_SEGRIE:=VV_OR_SEGRIE;
        END IF;

        IF VV_OR_SEGRIE IN ('E4DS','E4R') AND VN_MODELO_CALI=('TR3_'||VV_OR_SEGRIE) THEN
          BEGIN
          SELECT PD
            INTO  VV_FI_PD_COREPS
            FROM BAS_MEN.MAESTRO_SEG_CALIB_PD
          WHERE PRELACION='NORMTR3'
          AND SEGMENTO=VV_OR_SEGRIE;

          EXCEPTION
          WHEN OTHERS  THEN
          VV_FI_PD_COREPS:=99;
          END;

        ELSIF VV_OR_SEGRIE IN ('E3DS','E3R','E4DS','E4R','PAT') AND VN_MODELO_CALI IN ('TR1_'||VV_OR_SEGRIE, 'TR2_'||VV_OR_SEGRIE) THEN
          BEGIN
          SELECT PD
            INTO  VV_FI_PD_COREPS
            FROM BAS_MEN.MAESTRO_SEG_CALIB_PD
          WHERE PRELACION='NORMTR1TR2'
          AND SEGMENTO=VV_OR_SEGRIE;

          EXCEPTION
          WHEN OTHERS  THEN
          VV_FI_PD_COREPS:=99;
          END;

        ELSE
          BEGIN
          SELECT D_MAX_IMPAGO_12M_30
            INTO VN_IMP_MATERIALES
             FROM BAS_MEN.IMPAGOS_TITULARIDAD_PD
          WHERE OR_TITULARITAT=IN_REC.OR_TITULARITAT;
          EXCEPTION
          WHEN OTHERS THEN
          VN_IMP_MATERIALES:=0;
          END;

          BEGIN
          SELECT ESTIMADO
            INTO  VN_ALFA
            FROM BAS_MEN.MAESTRO_PD_PARAM
          WHERE PARAMETRO='d_tiprat_'||VN_TIPRAT
          AND SEGMENTO=VV_OR_SEGRIE;
          EXCEPTION
          WHEN OTHERS  THEN
          VN_ALFA:=0;
          END;

          BEGIN
          SELECT ESTIMADO
            INTO  VN_BETA
            FROM BAS_MEN.MAESTRO_PD_PARAM
          WHERE PARAMETRO='i_miss_punt_vig_'||VN_TIPRAT||'_0'
          AND SEGMENTO=VV_OR_SEGRIE;
          EXCEPTION
          WHEN OTHERS  THEN
          VN_BETA:=0;
          END;

          IF VN_IMP_MATERIALES = 1 THEN
          BEGIN
            SELECT ESTIMADO
            INTO  VN_THETA
            FROM BAS_MEN.MAESTRO_PD_PARAM
           WHERE PARAMETRO='d_max_impago_12m_30'
           AND SEGMENTO=VV_OR_SEGRIE;
          EXCEPTION
            WHEN OTHERS  THEN
            VN_THETA:=0;
          END;
          END IF;

          VN_Z := VN_ALFA + VN_BETA * IN_REC.OR_PUNT0 + VN_THETA;

          BEGIN
          SELECT POOL_PD
            INTO VV_FI_PD_COREPS
          FROM BAS_MEN.MAESTRO_PD_POOL_EMP
          WHERE TIPO=DECODE (VV_OR_SEGRIE, 'P1', 'PROM', 'P2', 'PROM', 'P3', 'PROM', 'EMP')
          AND PUNT_MIN <= VN_Z
          AND PUNT_MAX >VN_Z;
            EXCEPTION
            WHEN OTHERS  THEN
            VV_FI_PD_COREPS:=99;
          END;
        --HDEV-107786 INI Nuevos calibrados (JRJ) 10/06/2022
          END IF;

               -- BEGIN
                  -- SELECT DISTINCT MINIMO, MAXIMO, A, B, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                    -- INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                    -- FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                   -- WHERE MODELO = VN_MODELO_CALI
                     -- AND TIPO = 'NORMAL'
                     -- AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP;
               -- EXCEPTION
                    -- WHEN OTHERS THEN
                         -- NULL;
               -- END;

               -- /* Normalizacion de la PD */
               -- IF VN_PUNTMIN >= VN_OR_PUNT THEN
                  -- VN_OR_PUNT := VN_PUNTMIN;
               -- ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
                  -- VN_OR_PUNT := VN_PUNTMAX;
               -- END IF;

               -- VN_PUNTNOR :=  100 * ((VN_OR_PUNT - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
               -- VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
               -- VN_PDCONT:= LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT);

               -- BEGIN
                  -- SELECT POOL_PD
                    -- INTO VV_FI_PD_COREPS
                    -- FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                   -- WHERE MODELO = VN_MODELO_CALI
                     -- AND TIPO = 'NORMAL'
                     -- AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP
                     -- AND PUNTMIN <= VN_PUNTNOR
                     -- AND PUNTMAX >= VN_PUNTNOR;
               -- EXCEPTION
                    -- WHEN OTHERS THEN
                         -- BEGIN
                            -- SELECT POOL_PD
                              -- INTO VV_FI_PD_COREPS
                              -- FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                             -- WHERE MODELO = VN_MODELO_CALI
                               -- AND TIPO = 'NORMAL'
                               -- AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP
                               -- AND PUNTMIN = VN_PUNTNOR
                               -- AND PUNTMAX = VN_PUNTNOR;
                         -- EXCEPTION
                              -- WHEN OTHERS THEN
                                   -- VV_FI_PD_COREPS := 99;
                         -- END;
               -- END;
        END IF;

        /* Añadida PD mínima de 0.03% */
        VV_FI_PD_COREPS := GREATEST(VV_FI_PD_COREPS, 0.0003 );

        v_NumErr  := 9;
        /* IN_RATINT */

        BEGIN
           SELECT RATING
             INTO VV_IN_RATINT
             FROM BAS_MEN.MAESTRO_PD_POOLPD
            WHERE PDMIN <= VV_FI_PD_COREPS
              AND PDMAX > VV_FI_PD_COREPS;
          EXCEPTION
                WHEN OTHERS THEN
                    VV_IN_RATINT := 0;
          END;

        v_NumErr  := 10;
        /* OR_PUNTFIN*/

        VN_OR_PUNTFIN := VN_PUNTNOR;

        v_NumErr  := 11;
        /* FI_RATCONT */

        BEGIN
        SELECT RATING
          INTO VN_FI_RATCONT
          FROM BAS_MEN.MAESTRO_PD_POOLPD
         WHERE PDMIN < VN_PDCONT
           AND PDMAX >= VN_PDCONT;
       EXCEPTION
            WHEN OTHERS THEN
                 VN_FI_RATCONT := 99;
       END;

    v_NumErr  := 12;
  /* PD antigua para cálculo LGD */
  IF SUBSTR(VV_OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5') AND VV_OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5') THEN
  
      IF NVL(REGEXP_REPLACE(IN_REC.ID_FCH_ALTA, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                   FLOOR(MONTHS_BETWEEN(TO_DATE(VN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_ALTA, 'YYYY/MM/DD'))) < 48
                 OR
                   NVL(REGEXP_REPLACE(IN_REC.ID_FCH_NACI, '[^0-9A-Za-z-]', ''),'9999-12-31') <> '9999-12-31' AND
                   FLOOR(MONTHS_BETWEEN(TO_DATE(VN_FECPRO, 'YYYYMMDD'), TO_DATE(IN_REC.ID_FCH_NACI, 'YYYY/MM/DD'))) < 48
                THEN VN_FLAG_NUEVA_EMP := 1;
                ELSE VN_FLAG_NUEVA_EMP := 0;
            END IF;

            BEGIN
                 SELECT DISTINCT MODELO
                   INTO VN_MODELO_CALI
                   FROM BAS_MEN.MAESTRO_MODELO_RATING
                  WHERE MODRAT = IN_REC.OR_MODRAT0;
            EXCEPTION
                    WHEN OTHERS THEN
                         VN_MODELO_CALI := '?';
            END;

            BEGIN
                  SELECT DISTINCT MINIMO, MAXIMO, A, B, MULTIPLICADOR_PDCONT /* 18/12/2020 - NAV - Añadimos el nuevo campo MULTIPLICADOR_PDCONT debido a MOc */
                    INTO VN_PUNTMIN, VN_PUNTMAX, VN_CICLOA1, VN_CICLOB1, VN_MULTIPLICADOR_PDCONT
                    FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                   WHERE MODELO = VN_MODELO_CALI
                     AND TIPO = 'NORMAL'
                     AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP;
            EXCEPTION
                    WHEN OTHERS THEN
                         NULL;
             END;

       /* Normalizacion de la PD */
       IF VN_PUNTMIN >= VN_OR_PUNT THEN
          VN_OR_PUNT := VN_PUNTMIN;
       ELSIF VN_PUNTMAX <= VN_OR_PUNT THEN
          VN_OR_PUNT := VN_PUNTMAX;
       END IF;

             VN_PUNTNOR :=  100 * ((VN_OR_PUNT - VN_PUNTMIN) / (VN_PUNTMAX - VN_PUNTMIN));
             VN_PD_AJUSCIC := (1 + 0.0001 * EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR)) / (1 + EXP(VN_CICLOA1 + VN_CICLOB1 * VN_PUNTNOR));
             VN_PDCONT:= LEAST(0.9999, VN_PD_AJUSCIC * VN_MULTIPLICADOR_PDCONT);

             BEGIN
                  SELECT POOL_PD
                    INTO VV_FI_PD_COREPS_OLD
                    FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                   WHERE MODELO = VN_MODELO_CALI
                     AND TIPO = 'NORMAL'
                     AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP
                     AND PUNTMIN <= VN_PUNTNOR
                     AND PUNTMAX >= VN_PUNTNOR;
             EXCEPTION
                    WHEN OTHERS THEN
                         BEGIN
                            SELECT POOL_PD
                              INTO VV_FI_PD_COREPS_OLD
                              FROM BAS_MEN.MAESTRO_PD_EMPRESAS
                             WHERE MODELO = VN_MODELO_CALI
                               AND TIPO = 'NORMAL'
                               AND FLAG_NUEVA = VN_FLAG_NUEVA_EMP
                               AND PUNTMIN = VN_PUNTNOR
                               AND PUNTMAX = VN_PUNTNOR;
                         EXCEPTION
                              WHEN OTHERS THEN
                                   VV_FI_PD_COREPS_OLD := 99;
                         END;
             END;
  VV_FI_PD_COREPS_OLD := GREATEST(VV_FI_PD_COREPS_OLD, 0.0003 );
  END IF;
  
    /* ENTIDAD_ENTE */

    BEGIN
           SELECT case when REGULADA_SN = 'NO' then 'S'
                       else 'N'
                   end
             INTO v_Es_Ente_No_Regulado
             FROM BAS_MEN.MAESTRO_RESEGMENTACION_BDE SegBE
                , BAS_MEN.MAESTRO_SECTOR_NO_REGULADA SNoReg
            WHERE SegBE.OR_NIFCIF  = IN_REC.OR_NIFCIF
              AND SNoReg.OR_SECTOR = SegBE.SECTOR;
     EXCEPTION
             WHEN OTHERS THEN
                  BEGIN
                     SELECT DISTINCT('S')
                       INTO v_Es_Ente_No_Regulado
                       FROM BAS_MEN.MAESTRO_PERSONALIDADES PNoReg
                      WHERE PNoReg.OR_PERSON  = IN_REC.Or_Person
                        and PNoReg.REGULADA='NO';
                  EXCEPTION
                       WHEN OTHERS THEN
                            v_Es_Ente_No_Regulado := 'N';
                   END;
     END;

    IF v_Es_Ente_No_Regulado = 'S' AND IN_REC.IN_SEGMBSINI NOT IN ('007', '034') THEN VV_Entidad_Ente := 2;
    ELSE                                                                              VV_Entidad_Ente := 0;
    END IF;

     v_NumErr  := 13;
    /* IN_SEGAIRB */

       IF v_Es_Ente_No_Regulado = 'S' /* AND IN_REC.IN_SRATIN <> 'CEDM'*/ THEN
             IF VV_IN_SEGMBS1  = '?' THEN
                  VV_In_SegAIRB := 'Emp/Sob/EEFF-CC';
             ELSIF VV_IN_SEGMBS1 = '500' THEN
                  VV_In_SegAIRB := 'SME-CC';
             ELSE
                VV_In_SegAIRB  := '?';
             END IF;
       END IF;

       IF VV_In_SegAIRB = '?'  THEN
            IF VV_IN_SEGMBS1 = '500' AND IN_REC.Or_NIFCIF <> '777018707659' THEN
                VV_In_SegAIRB := 'SME';
            ELSIF VV_IN_SEGMBS1 = '501' THEN
                VV_In_SegAIRB := 'Otro Retail';
            ELSIF VV_IN_SEGMBS1 = '?' OR IN_REC.Or_NIFCIF = '777018707659' THEN
                VV_In_SegAIRB := 'Emp/Sob/EEFF';
            END IF;
     END IF;

    v_NumErr  := 14;
    /* FI_ATAMAIRB */

     IF VV_IN_SEGAIRB IN ('SME', 'SME-CC') THEN

        -- 201706 se añade tratamiento de SMS que sean HOLDINGS, PROMOTORES o PATRIMONIALES (Si las vtas son 0 [OJO las originales, antes de ventas medias] se utilizara el Activo cons)
        IF NVL(IN_REC.IN_VTAGRU_CONS ,0) IN (0, 99) AND ( IN_REC.ESTADOCIVILPER  IN ('1', '3', '4') OR  VV_IN_SEGMBS2 = '020' ) THEN
            VN_FI_ATAMAIRB:= NVL(NVL(IN_REC.In_Activo_Cons, IN_REC.In_Activo), 0) / 1000000;
        ELSE
            VN_FI_ATAMAIRB:= IN_REC.IN_VTAGRU_CONS/1000000;
        END IF;

       -- Umbrales suelo y floor (entre 5 y 50 millones).
        IF    VN_FI_ATAMAIRB < 5   THEN VN_FI_ATAMAIRB:= 5;
        ELSIF VN_FI_ATAMAIRB >= 50 THEN VN_FI_ATAMAIRB:= 50;
        END IF;

     END IF;

     v_NumErr  := 15;
    /* FI_LGDAIRB */
  IF SUBSTR(VV_OR_SEGFIC2,1,2) IN ('GR', 'E5', 'P5') OR VV_OR_SEGFIC2 in ('PA005', 'NC5DS', 'NC5R', 'NC5') THEN
    BEGIN
      SELECT PC_LGD, PC_LGD_LR, C_TYPE_GUARANTEE
      INTO VV_FI_LGDAIRB, VN_LGD_LONGRUN, VN_C_TYPE_GUARANTEE
      FROM BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO
      WHERE IN_SEGMENTO = 'EMPRESAS'
      AND IN_TIPO = CASE WHEN IN_REC.ESTADOCIVILPER IN ('1', '3', '4') THEN 'Documento ejecutivo PAT'
               WHEN VV_OR_SEGFIC2 = 'P1' THEN 'Documento ejecutivo E0-E1-P1'
               WHEN VV_OR_SEGFIC2 = 'P2' THEN 'Documento ejecutivo E2-P2'
               WHEN VV_OR_SEGFIC2 = 'P3' THEN
                CASE WHEN NVL(IN_REC.IN_EXISTENCIAS,99) <> 99 THEN
                    CASE WHEN IN_REC.IN_VTAGRU + IN_REC.IN_EXISTENCIAS > 30000000 THEN 'Documento ejecutivo E4-P3'
                       ELSE 'Documento ejecutivo E3-P3'
                     END
                    WHEN NVL(IN_REC.IN_ACTIVO_CIR, 99) <> 99 AND IN_REC.IN_VTAGRU + IN_REC.IN_ACTIVO_CIR > 30000000 THEN 'Documento ejecutivo E4-P3'
                    ELSE 'Documento ejecutivo E3-P3'
                 END
          WHEN VV_OR_SEGFIC2 = 'P5'         THEN 'Documento ejecutivo E4-P3'
          WHEN VV_OR_SEGFIC IN ('E0', 'E1') THEN 'Documento ejecutivo E0-E1-P1'
          WHEN VV_OR_SEGFIC = 'E2'          THEN 'Documento ejecutivo E2-P2'
          WHEN VV_OR_SEGFIC = 'E3'          THEN 'Documento ejecutivo E3-P3'
          WHEN VV_OR_SEGFIC IN ('E4', 'E5') THEN 'Documento ejecutivo E4-P3'
        END;
    EXCEPTION
      WHEN OTHERS THEN
        VV_FI_LGDAIRB := 0;
    END;
  ELSE
  --HDEV-107786 INI Nuevos calibrados (JRJ) 10/06/2022
  v_NumErr  := 16;
    VV_LETRA:=SUBSTR(IN_REC.OR_NIFCIF,1,1);
    BEGIN
          SELECT SOCIEDAD
          INTO VV_TIPO_SOCIEDAD
          FROM BAS_MEN.L4_EQUIVALENCIA_CIF
          WHERE LETRA=VV_LETRA;

      EXCEPTION
      WHEN OTHERS THEN
                 VV_TIPO_SOCIEDAD:=NULL;
        END;

    IF VV_TIPO_SOCIEDAD in ('Sociedad de responsabilidad limitada', 'Sociedad Anónima') THEN
    VV_LEGAL_FRAMEWORK:='Limited responsibility';
    ELSE
    VV_LEGAL_FRAMEWORK:='Resto';
    END IF;


    IF IN_REC.OR_CODGAR IN ('FIC00700', 'FIC00100', 'GR 11201', 'GR 11202', 'GR 11299') THEN
            VV_LEASMOB:='S';
        ELSE
            VV_LEASMOB:='N';
        END IF;

  v_NumErr  := 17;
    IF VV_FI_PD_COREPS_OLD = 99 THEN
      VV_FI_PD_COREPS_OLD := 1;
    END IF;

    BEGIN
          SELECT nvl(LGD,99),NVL(LGD_LR,99)
          INTO VV_FI_LGDAIRB,VN_LGD_LONGRUN
          FROM BAS_MEN.MAESTRO_PERF_UNSEC_LGD
          WHERE LEGAL_FRAMEWORK      = VV_LEGAL_FRAMEWORK
          AND LEASING_MOB          = VV_LEASMOB
          AND EAD_TITULARITAT_MIN  < IN_REC.MAESTRO_EAD_MAX
          AND EAD_TITULARITAT_MAX >= IN_REC.MAESTRO_EAD_MAX
          AND FI_PD_COREPS_MIN     < VV_FI_PD_COREPS_OLD
          AND FI_PD_COREPS_MAX    >= VV_FI_PD_COREPS_OLD ;
        EXCEPTION
           WHEN OTHERS THEN
                VV_FI_LGDAIRB := 0;

        END;
    --HDEV-107786 INI Nuevos calibrados (JRJ) 10/06/2022
  END IF;

        OUT_REC.OR_CONTRATO_GARANTIA          := IN_REC.OR_CONTRATO_GARANTIA ; --1
        OUT_REC.OR_CODGAR                     := IN_REC.OR_CODGAR            ; --2
        OUT_REC.OR_NUMPERSONA                 := IN_REC.OR_NUMPERSONA        ; --3
        OUT_REC.OR_PERSON                     := IN_REC.OR_PERSON            ; --4
        OUT_REC.OR_NIFCIF                     := IN_REC.OR_NIFCIF            ; --5
        OUT_REC.OR_NOMPER                     := IN_REC.OR_NOMPER            ; --6
        OUT_REC.OR_CODIGOLEI                  := IN_REC.OR_CODIGOLEI         ; --7
        OUT_REC.OR_IDCNAE                     := IN_REC.OR_IDCNAE            ; --8
        OUT_REC.OR_TITULARITAT                := IN_REC.OR_TITULARITAT       ; --9
        OUT_REC.ESTADOCIVILPER                := IN_REC.ESTADOCIVILPER       ; --10
        OUT_REC.ID_FCH_ALTA                   := IN_REC.ID_FCH_ALTA          ; --11
        OUT_REC.ID_FCH_NACI                   := IN_REC.ID_FCH_NACI          ; --12
        OUT_REC.OR_SEGFAC                     := IN_REC.OR_SEGFAC            ; --13
        OUT_REC.OR_SEGGES                     := IN_REC.OR_SEGGES            ; --14
        OUT_REC.IN_VTAGRU                     := IN_REC.IN_VTAGRU            ; --15
        OUT_REC.IN_VTAGRU_CONS                := IN_REC.IN_VTAGRU_CONS       ; --16
        OUT_REC.IN_ACTIVO                     := IN_REC.IN_ACTIVO            ; --17
        OUT_REC.IN_ACTIVO_CONS                := IN_REC.IN_ACTIVO_CONS       ; --18
        OUT_REC.IN_NUMEMP                     := VV_IN_NUMEMP                ; --19
        OUT_REC.IN_NUMEMP_CONS                := VV_IN_NUMEMP_CONS           ; --20
        OUT_REC.IN_EXISTENCIAS                := IN_REC.IN_EXISTENCIAS       ; --21
        OUT_REC.IN_ACTIVO_CIR                 := IN_REC.IN_ACTIVO_CIR        ; --22
        OUT_REC.OR_SITUAC0                    := IN_REC.OR_SITUAC0           ; --23
        OUT_REC.OR_CTACLI                     := IN_REC.OR_CTACLI            ; --24
        OUT_REC.OR_NUMOFI                     := IN_REC.OR_NUMOFI            ; --25
        OUT_REC.OR_MODRAT0                    := IN_REC.OR_MODRAT0           ; --26
        OUT_REC.OR_PUNT0                      := IN_REC.OR_PUNT0             ; --27
        OUT_REC.OR_FECPUN0                    := IN_REC.OR_FECPUN0           ; --28
        OUT_REC.IN_SEGMBSINI                  := IN_REC.IN_SEGMBSINI         ; --29
        ---------NUEVOS--------------------------------------------------------
        OUT_REC.IN_SEGMBS                     := VV_IN_SEGMBS                ; --30-1
        OUT_REC.IN_SEGMBS2                    := VV_IN_SEGMBS2               ; --30-2
        OUT_REC.OR_SEGRIE                     := VV_OR_SEGRIE                ; --31-3
        OUT_REC.OR_SEGFIC                     := VV_OR_SEGFIC                ; --32-4
        OUT_REC.OR_SEGFIC2                    := VV_OR_SEGFIC2               ; --33-5
        OUT_REC.FI_PD_COREPS                  := VV_FI_PD_COREPS             ; --34-6
        OUT_REC.FI_LGDAIRB                    := VV_FI_LGDAIRB               ; --35-7
        OUT_REC.IN_SEGMBS0                    := VV_IN_SEGMBS0               ; --36-8
        OUT_REC.IN_SEGMBS1                    := VV_IN_SEGMBS1               ; --37-9
        OUT_REC.FI_PDCONT                     := VN_PDCONT                   ; --38-10
        OUT_REC.IN_RATINT                     := VV_IN_RATINT                ; --39-11
        OUT_REC.OR_PUNTFIN                    := VN_OR_PUNTFIN               ; --40-12
        OUT_REC.FI_RATCON                     := VN_FI_RATCONT               ; --41-13
        OUT_REC.IN_SEGAIRB                    := VV_IN_SEGAIRB               ; --42-14
        OUT_REC.FI_LGDLR                      := VN_LGD_LONGRUN              ; --43-15
        OUT_REC.FI_ATAMAIRB                   := VN_FI_ATAMAIRB              ; --44-16
        OUT_REC.C_TYPE_GUARANTEE              := VN_C_TYPE_GUARANTEE         ; --45-17
        OUT_REC.ENTIDAD_ENTE                  := VV_ENTIDAD_ENTE             ; --46-18

        pipe row(out_rec);

     END LOOP;

         EXCEPTION WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20000, SUBSTR(TO_CHAR(v_NumErr)||'*'||VV_ROWID||'*'||TO_CHAR(SQLCODE)||SQLERRM,1,100));
  END F_AVALES_EXT;

END;

/

select * from sys.user_errors WHERE NAME = 'CALCULO_CAMPOS_AVAL_EXT';

--FLA FIN

create or replace PROCEDURE      BAS_MEN.FNC_CALCULO_AVALISTAS (PN_FECPRO IN  NUMBER) IS

  Cte_Nom_Proc CONSTANT VARCHAR2(80) := 'CALCULO_AVALISTAS';
  v_NumErr              NUMBER(3)       DEFAULT 0;
  v_Mensaje             VARCHAR2(255)   DEFAULT '';
  vv_idreg              NUMBER(12);

begin

    EXECUTE IMMEDIATE ('alter session enable parallel dml');

    --
    -- Info. en el control del proceso del inicio de este
    --
    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (Cte_Nom_Proc, SYSDATE, 'INICIADO');

    COMMIT;

   v_NumErr := 1;

   -- Reinicio de valores
    UPDATE /*+  parallel (A 8) */ BAS_MEN.BASILEA A
      SET IN_METODE = case when substr(in_tiporeg,1,2) = 'CI' then 'STDA' else 'AIRB' end,
          IN_TIPOREG = SUBSTR(IN_TIPOREG,3),
          in_METODE_1 = '?'
    WHERE SUBSTR(IN_TIPOREG,1,2) in ('MM', 'CE', 'AV', 'CI')
      and in_tiporeg <> 'CETITULI';

    COMMIT;

    v_NumErr := 2;
/*#  20/12/2019 RMR - Inicio - SUBPROCESO PARA OBTENER EL MEJOR AVALISTA BASADO EN LA SOLVENCIA DEL ACREDITADO*/

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MEJOR_AVALISTA_TEMP_1';

   /* Obtenemos las personas junto a sus PDs mínimas */
 INSERT /*+ PARALLEL (c,8) */ INTO BAS_MEN.MEJOR_AVALISTA_TEMP_1 c
     SELECT /*+ full(a) full(b) PARALLEL (a,8) PARALLEL (b,8) */  a.OR_CONTRATO_GARANTIA, a.OR_NUMPERSONA, a.OR_NIFCIF, MIN(FI_PD_COREPS)
       FROM BAS_MEN.BASILEA a
      INNER JOIN BAS_MEN.BASILEA_AIRB_PD b
         ON a.OR_IDREG = b.OR_IDREG
      WHERE a.IN_SEGMBSINI in ('003','005','006','009','010','019')
        AND a.IN_SEGMBS0 <> '201' -- Que no sean Project finance
        AND SUBSTR(a.IN_SUCEPT,1,2) NOT IN ('EU','PU','ET','PT') -- Empresas sin: ni UTEs, UTEs Promotores o Promotor multitularidad
        AND ( a.IN_METODE = 'AIRB' OR a.IN_TIPOREG LIKE 'CE%')  -- Método AIRB o los que sean cobertura soberana
        AND a.IN_SRATIN IN ('CRVI') -- con rating vigente  --05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso
      GROUP BY a.OR_CONTRATO_GARANTIA, a.OR_NUMPERSONA, a.OR_NIFCIF;

   COMMIT;

   v_NumErr := 3;

 --  EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.PE1601_AVALISTAS';
 --
 --  /* Obtenemos los contratos y las perssonas avalistas de PE16 */
 --    INSERT /*+ PARALLEL (c,8) */ INTO BAS_MEN.PE1601_AVALISTAS c
 --    SELECT /*+ PARALLEL (a,8) */ DISTINCT CODCONTRAT, NUMPERSONA
 --      FROM BAS_MEN.PE1601 a
 --     WHERE CODRELPECO = 34;  -- Personas que actúan como avalistas
 --
 --  COMMIT;

   v_NumErr := 4;

   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MEJOR_AVALISTA_TEMP_2';

   /* Calculamos la persona con el PD mínimo para cada contrato y nos quedamos con el mejor NIF_CIF y NUMPERSONA para cada contrato */
   INSERT /*+ PARALLEL (c,8) */ INTO BAS_MEN.MEJOR_AVALISTA_TEMP_2 c
     SELECT /*+ PARALLEL (a,8)  PARALLEL (b,8) */ b.CODCONTRAT,
       MIN(b.NUMPERSONA) KEEP (DENSE_RANK FIRST ORDER BY a.FI_PD_COREPS, b.CODCONTRAT NULLS LAST),
       MIN(OR_NIFCIF) KEEP (DENSE_RANK FIRST ORDER BY a.FI_PD_COREPS, b.CODCONTRAT, NUMPERSONA NULLS LAST)
      FROM BAS_MEN.MEJOR_AVALISTA_TEMP_1 a
          ,BAS_MEN.PE1601_AVALISTAS b
     WHERE a.or_NUMPERSONA = b.NUMPERSONA
     GROUP BY b.CODCONTRAT;

   COMMIT;

--  FLA 18/02/2022 | Incluimos tratamiento DATOS PROCEDENCIA MIAMI
   v_NumErr := 5;

   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_1';

   -- Nos quedamos con todas las personas que pueden ser avalistas, pero no tienen exposiciones en BASILEA
   INSERT /*+ PARALLEL (c,8) */ INTO BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_1 c
   SELECT /*+ PARALLEL (a,8) */
          OR_CONTRATO_GARANTIA,
          OR_CODGAR,
          NUMPERSONA as OR_NUMPERSONA
     FROM
         (SELECT a.OR_CONTRATO_GARANTIA, a.OR_CODGAR, b.*
            FROM BAS_MEN.PERIMETRO_GARANTIAS_1 a
           INNER JOIN BAS_MEN.PE1601_AVALISTAS b
              ON b.CODCONTRAT = a.OR_CONTRATO_GARANTIA
           WHERE A.TIPO_GARAN = 'PERS') a,
           (SELECT DISTINCT OR_NUMPERSONA FROM BAS_MEN.BASILEA C WHERE FI_ELIMI1 = 'NO') b /* NAV - HDEV-152319 - Añadimos FI_ELIMI1 = no*/
      WHERE a.numpersona = b.OR_NUMPERSONA(+)
        AND b.OR_NUMPERSONA is null; 

   COMMIT;

   v_NumErr := 6;

   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_2';

   --Tratamos de recuperar toda la info posible de los avalistas que no tienen exposiciones en BASILEA
   INSERT /*+ PARALLEL (a,4) */ INTO BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_2 a
   SELECT *
   FROM (
      SELECT /*+ PARALLEL(p,4) PARALLEL(per,4) PARALLEL(ven,4)  PARALLEL(rat,4)  PARALLEL(uso8,4)  PARALLEL(uso6,4) PARALLEL(ofe,4) PARALLEL(pes,4)*/
        DISTINCT
            p.OR_CONTRATO_GARANTIA,
            p.OR_CODGAR,
            p.OR_NUMPERSONA,
            per.PERSONALIDADPER AS OR_PERSON,
            per.IDEFISCPER      AS OR_NIFCIF,
            CASE WHEN bde.IN_SEGMBSINI     IS NOT NULL THEN bde.IN_SEGMBSINI
                 WHEN ma.IN_SEGMBSINI_NEW  IS NOT NULL THEN ma.IN_SEGMBSINI_NEW
                 WHEN pes.IN_SEGMBSINI     IS NOT NULL THEN pes.IN_SEGMBSINI
                 ELSE '?'
             END AS IN_SEGMBSINI,
            per.NOMBREPER||' '||per.PRIMERAPELLPER||' '||per.SEGUNDOAPELLPER AS OR_NOMPER,
            per.CODIGOLEIPER   AS OR_CODIGOLEI,
            per.CNAEPER        AS OR_IDCNAE,
            per.TITULARIDADPER AS OR_TITULARITAT,
            per.ESTADOCIVILPER AS ESTADOCIVILPER,
            per.FCHALTAPER     AS ID_FCH_ALTA,
            per.FCHNACCONSPER  AS ID_FCH_NACI,
            per.NIVELFACTURAPER AS OR_SEGFAC,
            per.SUBSEGESTACTPER AS OR_SEGGES,
            ven.VENTAS_IND     AS IN_VTAGRU,
            ven.VENTAS_CON     AS IN_VTAGRU_CONS,
            ven.ACTIVO         AS IN_ACTIVO,
            ven.ACTIVO_CON     AS IN_ACTIVO_CONS,
            ven.NUM_EMPLEADOS  AS IN_NUMEMP,
            ven.NUM_EMPLEADOS_CON AS IN_NUMEMP_CONS,
            ven.EXISTENCIAS       AS IN_EXISTENCIAS,
            ven.ACTIVO_CIR        AS IN_ACTIVO_CIR,
            uso6.CODCLIENTEOFEX   AS OR_CTACLI,
            case when uso6.CODCLIENTEOFEX is not null then 825 else null end AS OR_NUMOFI,
       CASE WHEN rat.FEC_CAL IS NOT NULL AND rat.FEC_CAL >= NVL(ofe.FEC_CAL, 19000101) THEN
                     CASE WHEN rat.CODMODELO = 'AG001' THEN rat.SITUACION_R
                          ELSE rat.SITUACION
                      END
                WHEN ofe.FEC_CAL IS NOT NULL AND ofe.FEC_CAL > NVL(rat.FEC_CAL, 19000101) THEN ofe.SITUACION
                ELSE NULL
            END AS OR_SITUAC0,
            CASE WHEN rat.FEC_CAL IS NOT NULL AND rat.FEC_CAL >= NVL(ofe.FEC_CAL, 19000101) THEN
                 CASE WHEN rat.CODMODELO = 'AG001' THEN rat.CODMODELO_R
                          ELSE rat.CODMODELO
                     END
                 WHEN ofe.FEC_CAL IS NOT NULL AND ofe.FEC_CAL > NVL(rat.FEC_CAL, 19000101) THEN ofe.CODMODELO
                 ELSE NULL
            END AS OR_MODRAT0,
            CASE WHEN rat.FEC_CAL IS NOT NULL AND rat.FEC_CAL >= NVL(ofe.FEC_CAL, 19000101) THEN
                     CASE WHEN rat.CODMODELO = 'AG001' THEN rat.MOD_AJUS_SMA_R
                          ELSE rat.MOD_AJUS_SMA
                     END
                 WHEN ofe.FEC_CAL IS NOT NULL AND ofe.FEC_CAL > NVL(rat.FEC_CAL, 19000101) THEN ofe.MOD_AJUS_SMA
                 ELSE NULL
            END AS OR_PUNT0,
            CASE WHEN rat.FEC_CAL IS NOT NULL AND rat.FEC_CAL >= NVL(ofe.FEC_CAL, 19000101) THEN
                      CASE WHEN rat.CODMODELO = 'AG001' THEN rat.FEC_CAL_R
                          ELSE rat.FEC_CAL
                      END
                 WHEN ofe.FEC_CAL IS NOT NULL AND ofe.FEC_CAL > NVL(rat.FEC_CAL, 19000101) THEN ofe.FEC_CAL
                 ELSE NULL
            END AS OR_FECPUN0
          FROM BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_1 p
          LEFT JOIN BAS_MEN.M_BDU_PERSONES per
            ON (p.OR_NUMPERSONA = per.NUMPERSONA)
          LEFT JOIN BAS_MEN.MAESTRO_VENTAS ven
            ON (per.IDEFISCPER = ven.CIF_FILIAL)
          LEFT JOIN BAS_MEN.RSK_RT_ULT_RATING rat
            ON (per.TITULARIDADPER = rat.CODTIT)
          LEFT JOIN BAS_MEN.M_CAP_MIAMI_GARANTES uso8
            ON (p.OR_NUMPERSONA = uso8.NUMPERSONA)
          LEFT JOIN BAS_MEN.M_CAP_MIAMI_PROD_IM uso6
            ON (USO8.ENTIDADCTOGARANT = USO6.ENTIDADCONTRATO AND USO8.PRODCTOGARANT = USO6.PRODUCTOCTRO  AND USO8.CONTRATOGARANTIA = USO6.CONTRATO)
          LEFT JOIN BAS_MEN.MAESTRO_MODELO_OFEX ofe
            ON (uso6.CODCLIENTEOFEX = ofe.CTACLI )
          LEFT JOIN BAS_MEN.MAESTRO_PERSONALIDADES pes
           ON (per.PERSONALIDADPER = PES.OR_PERSON)
          LEFT JOIN BAS_MEN.MAESTRO_RESEGMENTACION_BDE bde
         ON (bde.OR_NIFCIF = per.IDEFISCPER)
        LEFT JOIN BAS_MEN.MAESTRO_RESEG_TOTAL ma
         ON (ma.OR_IDPERS = per.IDEFISCPER)
        WHERE (   rat.CODTIT           <> 0                   -- Quitamos titularidad 0
              AND rat.SITUACION       NOT IN ('L', 'ANP', 'D')-- Excluimos todo aquello que no sea vigente
              AND rat.MOD_AJUS_SMA IS NOT NULL                -- Excluimos todo aquello que no sea vigente
              )
             OR
              (   ofe.NUMOFI          = 825                   -- Filtramos por oficina de MIAMI
              AND ofe.SITUACION       NOT IN ('L', 'ANP', 'D')-- Excluimos todo aquello que no sea vigente
              AND ofe.MOD_AJUS_SMA IS NOT NULL )              -- Excluimos todo aquello que no sea vigente
     )
   WHERE IN_SEGMBSINI IN ('003','005','006','009','010','019','027') -- Filtramos para quedarnos solo con EMPRESAS
   ;

   COMMIT;

   v_NumErr := 7;

   EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_3';

   INSERT /*+ PARALLEL (a,4) */ INTO BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_3 a
   (
         OR_CONTRATO_GARANTIA,
         OR_CODGAR,
         OR_NUMPERSONA,
         OR_PERSON,
         OR_NIFCIF,
         OR_NOMPER,
         OR_CODIGOLEI,
         OR_IDCNAE,
         OR_TITULARITAT,
         ESTADOCIVILPER,
         ID_FCH_ALTA,
         ID_FCH_NACI,
         OR_SEGFAC,
         OR_SEGGES,
         IN_VTAGRU,
         IN_VTAGRU_CONS,
         IN_ACTIVO,
         IN_ACTIVO_CONS,
         IN_NUMEMP,
         IN_NUMEMP_CONS,
         IN_EXISTENCIAS,
         IN_ACTIVO_CIR,
         OR_CTACLI,
         OR_NUMOFI,
         OR_SITUAC0,
         OR_MODRAT0,
         OR_PUNT0,
         OR_FECPUN0,
         IN_SEGMBSINI,
         IN_SEGMBS,
         IN_SEGMBS0,
         IN_SEGMBS1,
         IN_SEGMBS2,
         OR_SEGRIE,
         OR_SEGFIC,
         OR_SEGFIC2,
         FI_PD_COREPS,
         FI_PDCONT,
         FI_LGDAIRB,
         FI_LGDLR,
         IN_RATINT ,
         OR_PUNTFIN,
         FI_RATCON,
         IN_SEGAIRB,
         FI_ATAMAIRB,
         C_TYPE_GUARANTEE,
         ENTIDAD_ENTE
         )
       select
         cur.OR_CONTRATO_GARANTIA,
         cur.OR_CODGAR,
         cur.OR_NUMPERSONA,
         cur.OR_PERSON,
         cur.OR_NIFCIF,
         cur.OR_NOMPER,
         cur.OR_CODIGOLEI,
         cur.OR_IDCNAE,
         cur.OR_TITULARITAT,
         cur.ESTADOCIVILPER,
         cur.ID_FCH_ALTA,
         cur.ID_FCH_NACI,
         cur.OR_SEGFAC,
         cur.OR_SEGGES,
         cur.IN_VTAGRU,
         cur.IN_VTAGRU_CONS,
         cur.IN_ACTIVO,
         cur.IN_ACTIVO_CONS,
         cur.IN_NUMEMP,
         cur.IN_NUMEMP_CONS,
         cur.IN_EXISTENCIAS,
         cur.IN_ACTIVO_CIR,
         cur.OR_CTACLI,
         cur.OR_NUMOFI,
         cur.OR_SITUAC0,
         cur.OR_MODRAT0,
         cur.OR_PUNT0,
         cur.OR_FECPUN0,
         cur.IN_SEGMBSINI,
         cur.IN_SEGMBS,
         cur.IN_SEGMBS0,
         cur.IN_SEGMBS1,
         cur.IN_SEGMBS2,
         cur.OR_SEGRIE,
         cur.OR_SEGFIC,
         cur.OR_SEGFIC2,
         cur.FI_PD_COREPS,
         cur.FI_PDCONT,
         cur.FI_LGDAIRB,
         cur.FI_LGDLR,
         cur.IN_RATINT ,
         cur.OR_PUNTFIN,
         cur.FI_RATCON,
         cur.IN_SEGAIRB,
         cur.FI_ATAMAIRB,
         cur.C_TYPE_GUARANTEE,
         cur.ENTIDAD_ENTE
       from
       table(BAS_MEN.CALCULO_CAMPOS_AVAL_EXT.F_AVALES_EXT
       ( cursor
          ( SELECT OR_CONTRATO_GARANTIA,
                   OR_CODGAR,
                   OR_NUMPERSONA,
                   OR_PERSON,
                   OR_NIFCIF,
                   IN_SEGMBSINI,
                   OR_NOMPER,
                   OR_CODIGOLEI,
                   OR_IDCNAE,
                   OR_TITULARITAT,
                   ESTADOCIVILPER,
                   ID_FCH_ALTA,
                   ID_FCH_NACI,
                   OR_SEGFAC,
                   OR_SEGGES,
                   IN_VTAGRU,
                   IN_VTAGRU_CONS,
                   IN_ACTIVO,
                   IN_ACTIVO_CONS,
                   IN_NUMEMP,
                   IN_NUMEMP_CONS,
                   IN_EXISTENCIAS,
                   IN_ACTIVO_CIR,
                   OR_CTACLI,
                   OR_NUMOFI,
                   OR_SITUAC0,
                   OR_MODRAT0,
                   OR_PUNT0,
                   OR_FECPUN0,
                    m.MAESTRO_EAD_MAX
            FROM BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_2 p,
                  (SELECT MAX(EAD_TITULARITAT_MAX) AS MAESTRO_EAD_MAX --HDEV-107786 (JRJ) Al no tener exposición calculada, cogemos la máxima EAD del maestro
                     FROM BAS_MEN.MAESTRO_PERF_UNSEC_LGD) m
           )
       )
            ) cur;
   COMMIT;

   v_NumErr := 8;

     /* Nos quedamos con el mejor avalista (de fuera de base) para cada contrato */
     EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_4';

     INSERT /*+ PARALLEL (c,4) */ INTO BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_4 c
     SELECT /*+ PARALLEL (a,4)  PARALLEL (b,4) */ OR_CONTRATO_GARANTIA,
        MIN (OR_NUMPERSONA) KEEP (DENSE_RANK FIRST ORDER BY FI_PD_COREPS, OR_CONTRATO_GARANTIA NULLS LAST) as OR_NUMPERSONA,
        MIN (OR_NIFCIF)     KEEP (DENSE_RANK FIRST ORDER BY FI_PD_COREPS, OR_CONTRATO_GARANTIA, OR_NUMPERSONA NULLS LAST) as OR_NIFCIF
       FROM BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_3
      GROUP BY OR_CONTRATO_GARANTIA;

   COMMIT;

   v_NumErr := 9;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE BAS_MEN.MEJOR_AVALISTA_TEMP_3';

    /* Los avalistas con exposicion en la base prevalecen sobre los externos, pero los complementamos con los mejores externos */
   INSERT /*+ PARALLEL (a, 4) */ INTO BAS_MEN.MEJOR_AVALISTA_TEMP_3 a
   SELECT /*+ PARALLEL (b, 4) */ CODCONTRAT, OR_NUMPERSONA, OR_NIFCIF
      FROM BAS_MEN.MEJOR_AVALISTA_TEMP_2   b
   UNION
   SELECT /*+ PARALLEL (c, 4) */ OR_CONTRATO_GARANTIA AS CODCONTRAT, OR_NUMPERSONA, OR_NIFCIF
      FROM BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_4  c
      WHERE OR_CONTRATO_GARANTIA NOT IN (SELECT /*+ PARALLEL (d, 4) */ CODCONTRAT FROM BAS_MEN.MEJOR_AVALISTA_TEMP_2 d);
   COMMIT;

 --FLA FIN 18/02/2022

   v_NumErr := 10;

    /* Actualizamos Basilea con el mejor avalista */
    MERGE /*+ PARALLEL (dst 8)  PARALLEL (scr 8) */  INTO BAS_MEN.basilea dst
  --USING BAS_MEN.MEJOR_AVALISTA_TEMP_2 scr /* FLA 18/02/2022 | Cambiado a tabla _3 por avalistas externos o Miami */
    USING BAS_MEN.MEJOR_AVALISTA_TEMP_3 scr
    ON (dst.or_contrato_garantia = scr.CODCONTRAT AND dst.OR_CODGAR IN ('GR 21101', 'GR 21109', 'GR 21102', 'GR 21103', 'GR 21105', 'GR 21299'))
    WHEN MATCHED THEN
       UPDATE
          SET dst.OR_NIFCIFAVA = scr.OR_NIFCIF;

   COMMIT;

   v_NumErr := 11;

/* 07/06/2021 - NAV - HDEV-32880 - substitución pd de avalistas para EEFF */
   MERGE /*+ PARALLEL (dst 8)  PARALLEL (scr 8) */  INTO BAS_MEN.BASILEA dst
    USING BAS_MEN.CODIS_BIC_CAPITAL scr
       ON (dst.OR_CODIGO_BIC = scr.BIC AND dst.in_segmbsini IN ('007','018','021','028','029','034'))
     WHEN MATCHED THEN
       UPDATE
          SET dst.OR_NIFCIFAVA = scr.BIC_AVALISTA;

   COMMIT;

--# 20/12/2019 RMR - Fin - SUBPROCESO PARA OBTENER EL MEJOR AVALISTA BASADO EN LA SOLVENCIA DEL ACREDITADO

   v_NumErr := 21;

   -- 09/03/21 Inicializamos el tiporeg en caso de ya no ser un avalado o un cambio de método stda - airb.
   update /*+ full(a) parallel (a 8) */ BAS_MEN.basilea a
      set in_metode = case when substr(in_tiporeg,1,2) = 'CI' then 'STDA'
                           else in_metode
                       end,
          in_tiporeg = substr(in_tiporeg,3)
    where substr(in_tiporeg,1,2) in ('AV', 'CI');

   commit;

   v_NumErr := 25;

   --Tabla con la info de los avalados
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.basilea_avalados');

  INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALADOS I
  select /*+ full(b) full(a) parallel (a 8) parallel (b 8) */  b.or_idreg,  b.or_nifcif, b.or_nifcifava, b.or_titularitat, b.or_nomper, b.or_codgar,
         tipgar, nombre, DESC_TIPGAR, b.in_segmbsini, b.in_segmbs,b.in_sratin, b.fi_elimi1,A.FI_CCFAIRB, A.FI_EADAIRB, A.FI_EADCONAIRB,
         A.FI_MATAIRB, A.FI_LGDWORST, A.FI_LGDBE, A.IN_CATEGO, A.FI_VIDRES, A.FI_IMPLTV, A.ENTIDAD_ENTE, A.OR_IDMES, a.FI_ELAIRB, a.FI_ELCONAIRB,
         a.FI_RWAAIRB, a.FI_RWACONAIRB,a.FI_ATAMAIRB, a.IN_ACTIVO_CONS, b.OR_CLUNICONTR, a.fi_lgdairb, a.FI_LGDNOMORA, a.fi_lgdlr,
         a.FI_LGDLRNOMORA, a.C_TYPE_GUARANTEE, IN_METODE, null as OR_CODIGO_BIC
    from BAS_MEN.basilea b,
         BAS_MEN.maestro_tipgar c,
         BAS_MEN.basilea_airb_rwa a
   where b.or_codgar =  garantia
   and tipgar is not null -- 29/03/2019 dejamos entrar todas las garantías
   and b.fi_elimi1 = 'NO'
   and b.in_metode = 'STDA' -- aplicamos también el cambio a STDA.9/3/21
   and b.in_sratin not in ('MORA', 'BLQRM')
   and substr(in_tiporeg,1,2) <> 'CE' -- excluimos los registros que cambian de método por garantías soberanas
   and b.or_nifcif <> '?'
   and b.or_nifcifava <> '?'
   /* 20/08/2021 RMR EN STDA entran todos menos EEFF*/
   and B.IN_SEGMBSINI NOT IN ('007','018','021','028','029','034')-- EEFF
   --and b.in_segmbsini in ('003', '005', '006', '009', '010', '019', '027', '101', '102', '002', '017')
   --and in_segmbs0 not in ('201', '203', '204')
   and b.or_idreg = a.or_idreg
   order by b.or_clunicontr, b.or_nifcif, b.or_titularitat;

   COMMIT;

   INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALADOS I
  select /*+ full(b) full(a) parallel (a 8) parallel (b 8) */  b.or_idreg,  b.or_nifcif, b.or_nifcifava, b.or_titularitat, b.or_nomper, b.or_codgar,
         tipgar, nombre, DESC_TIPGAR, b.in_segmbsini, b.in_segmbs,b.in_sratin, b.fi_elimi1,A.FI_CCFAIRB, A.FI_EADAIRB, A.FI_EADCONAIRB,
         A.FI_MATAIRB, A.FI_LGDWORST, A.FI_LGDBE, A.IN_CATEGO, A.FI_VIDRES, A.FI_IMPLTV, A.ENTIDAD_ENTE, A.OR_IDMES, a.FI_ELAIRB, a.FI_ELCONAIRB,
         a.FI_RWAAIRB, a.FI_RWACONAIRB,a.FI_ATAMAIRB, a.IN_ACTIVO_CONS, b.OR_CLUNICONTR, a.fi_lgdairb, a.FI_LGDNOMORA, a.fi_lgdlr,
         a.FI_LGDLRNOMORA, a.C_TYPE_GUARANTEE, IN_METODE, null as OR_CODIGO_BIC
    from BAS_MEN.basilea b,
         BAS_MEN.maestro_tipgar c,
         BAS_MEN.basilea_airb_rwa a
   where b.or_codgar =  garantia
   and tipgar is not null -- 29/03/2019 dejamos entrar todas las garantías
   and b.fi_elimi1 = 'NO'
   and b.in_metode = 'AIRB'
   and b.in_sratin not in ('MORA', 'BLQRM')
   and substr(in_tiporeg,1,2) <> 'CE' -- excluimos los registros que cambian de método por garantías soberanas
   and b.or_nifcif <> '?'
   and b.or_nifcifava <> '?'
   /* 20/08/2021 RMR EN AIRB solo Entran Empresas y CCAA*/
   and B.IN_SEGMBSINI NOT IN ('007','018','021','028','029','034')-- EEFF
   and b.in_segmbsini in ('003', '005', '006', '009', '010', '019', '027', '101', '102', '002', '017')
   and in_segmbs0 not in ('201', '203', '204')
   and b.or_idreg = a.or_idreg
   order by b.or_clunicontr, b.or_nifcif, b.or_titularitat;

   COMMIT;

   v_NumErr := 30;

/* 07/06/2021 - NAV - HDEV-32880 - substitución pd de avalistas para EEFF */
   --Insertamos los avalados de EEFF
   INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALADOS I
   SELECT /*+ full(b) full(a) parallel (a 8) parallel (b 8) */ b.or_idreg,  b.or_nifcif, b.or_nifcifava, b.or_titularitat, b.or_nomper, b.or_codgar,
          null tipgar, null nombre, null DESC_TIPGAR, b.in_segmbsini, b.in_segmbs, b.in_sratin, b.fi_elimi1, b.fi_ccfairb, b.fi_eadairb, b.fi_eadconairb,
          A.FI_MATAIRB, A.FI_LGDWORST, A.FI_LGDBE, A.IN_CATEGO, A.FI_VIDRES, A.FI_IMPLTV, A.ENTIDAD_ENTE, A.OR_IDMES, a.FI_ELAIRB, a.FI_ELCONAIRB,
          A.FI_RWAAIRB, A.FI_RWACONAIRB, A.FI_ATAMAIRB, b.in_activo_cons, b.or_clunicontr, A.FI_LGDAIRB, A.FI_LGDNOMORA, A.FI_LGDLR,
          A.FI_LGDLRNOMORA, A.C_TYPE_GUARANTEE, b.in_metode, b.OR_CODIGO_BIC
     FROM BAS_MEN.BASILEA B
    INNER JOIN BAS_MEN.BASILEA_AIRB_RWA A
       ON a.OR_IDREG = B.OR_IDREG
    INNER JOIN BAS_MEN.CODIS_BIC_CAPITAL C
       ON B.OR_CODIGO_BIC = C.BIC
    WHERE B.FI_ELIMI1  = 'NO'
      AND b.IN_METODE  = 'AIRB'
      AND SUBSTR(IN_TIPOREG,1,2) <> 'CE' -- excluimos los registros que cambian de método por garantías soberanas
      AND b.IN_SRATIN NOT IN ('MORA', 'BLQRM')
      AND B.IN_SEGMBSINI  IN ('007','018','021','028','029','034')-- EEFF
      AND a.IN_SEGAIRB <> 'Otros Activos'
    ORDER BY B.OR_CLUNICONTR, B.OR_NIFCIF, B.OR_CODIGO_BIC;

   COMMIT;

   v_NumErr := 31;

   -- Tabla con la info de los avalistas
   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.basilea_avalistas');

 /* 28/06/2022 JRJ Nuevos calibrados | Solo corporates */
   INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALISTAS I
    select /*+ full(c) full(rwa) parallel (rwa 8) parallel (c 8) */  distinct
          min(c.or_idreg) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) idreg_ava,
          --min(a.or_nifcifava) keep (dense_rank first order by fi_pd_coreps nulls last) or_nifcifava,
          a.or_nifcifava,
          a.or_nifcif,
          a.or_nomper,
          a.OR_TITULARITAT,
          min(c.or_Nomper) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) or_nomper_ava,
          min(c.or_titularitat) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) titularitat_ava,
          max(IN_RATINT) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) IN_RATINT,
          max(OR_PUNTFIN) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) OR_PUNTFIN,
          min(FI_PD_ORIGINAL) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_PD_ORIGINAL,
          min(fi_pd_coreps) keep (dense_rank first order by fi_pd_coreps nulls last) fi_pd_coreps,
          min(FI_PDCONT) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_PDCONT,
          max(FI_RATCON) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_RATCON,
          min(FI_PDPOOL) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_PDPOOL,
          min(PC_LGD) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last)  FI_LGDAIRB,
          min(PC_LGD) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last)  FI_LGDNOMORA,
          min(PC_LGD_LR) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_LGDLR,
          min(PC_LGD_LR) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_LGDLRNOMORA,
          min(lgd.C_TYPE_GUARANTEE) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) C_TYPE_GUARANTEE,
          min(c.in_segmbsini) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segmbsini_ava,
          min(c.or_segrie) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segrie_ava,
          min(c.or_segfic) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segfic_ava,
          min(c.or_segfic2) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segfic2_ava,
          min(c.in_segmbs0) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segmbs0_ava,
          min(c.in_segmbs1) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segmbs1_ava,
          min(c.in_segmbs) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) segmbs_ava,
          min(c.in_factcor) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) factcor_ava,
          min(case when rwa.IN_SEGAIRB = 'Préstamos Hipotecarios' then 'Otro Retail' else rwa.IN_SEGAIRB end) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) in_segairb,
          max(rwa.FI_ATAMAIRB) keep (dense_rank first order by fi_pd_coreps, c.or_titularitat nulls last) FI_ATAMAIRB,
          null as OR_CODIGO_BIC,
          0 as FI_PD_COREPS_OLD
    from (select /*+ parallel (b 8) */ distinct or_nifcifava, or_nifcif, or_nomper, OR_TITULARITAT from BAS_MEN.basilea_avalados b) a,
         BAS_MEN.BASILEA C,
         BAS_MEN.MAESTRO_LGD_NO_HIPOTECARIO lgd,
         BAS_MEN.basilea_AIRB_RWA rwa
   where a.OR_nifcifava = c.OR_nifcif
   and c.or_idreg = rwa.or_idreg
   AND C.fi_elimi1 = 'NO'
   and C.in_metode = 'AIRB'
   AND rwa.IN_SEGAIRB <> 'Otros Activos'
   AND C.IN_SRATIN in ( 'CRVI' )           --05/02/2020 NAV - TAR-275 - Quitamos CIVI en estos caso
   and c.or_titularitat <> 0
   and c.in_segmbsini in ('003', '005', '006', '009', '010', '019', '027')
   and (SUBSTR(c.OR_SEGFIC2,1,2) IN ('GR', 'E5', 'P5') OR  C.OR_SEGFIC2 in ('PA005', 'NC5DS', 'NC5R', 'NC5')) 
   and c.in_segmbs0 <> '201'
   and case when OR_INDHOLDING IN ('1', '3', '4') THEN 'Documento ejecutivo PAT'
            when OR_SEGFIC2 = 'P1' THEN 'Documento ejecutivo E0-E1-P1'
            when OR_SEGFIC2 = 'P2' THEN 'Documento ejecutivo E2-P2'
            when OR_SEGFIC2 = 'P3' THEN
                 case when NVL(IN_EXISTENCIAS,99) <> 99 then
                           case when IN_VTAGRU + IN_EXISTENCIAS > 30000000 THEN 'Documento ejecutivo E4-P3'
                                else 'Documento ejecutivo E3-P3'
                           end
                      when NVL(IN_ACTIVO_CIR, 99) <> 99 AND IN_VTAGRU + IN_ACTIVO_CIR > 30000000 THEN 'Documento ejecutivo E4-P3'
                                ELSE 'Documento ejecutivo E3-P3'
                 end
            when OR_SEGFIC2 = 'P5' THEN 'Documento ejecutivo E4-P3'
            when OR_SEGFIC IN ('E0', 'E1')  THEN 'Documento ejecutivo E0-E1-P1'
            when OR_SEGFIC = 'E2' THEN 'Documento ejecutivo E2-P2'
            when OR_SEGFIC = 'E3' THEN 'Documento ejecutivo E3-P3'
            when OR_SEGFIC IN ('E4', 'E5') THEN 'Documento ejecutivo E4-P3'
        END = lgd.IN_TIPO
   group by a.or_nifcif, a.or_nifcifava, a.or_nomper, a.OR_TITULARITAT, null;

   commit;

   v_NumErr := 75;
   /* 28/06/2022 JRJ Nuevos calibrados | Solo empresas */
   INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALISTAS I
   select /*+ full(c) full(rwa) parallel (rwa 8) parallel (c 8) */  distinct
          min(c.or_idreg) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) idreg_ava,
          --min(a.or_nifcifava) keep (dense_rank first order by fi_pd_coreps nulls last) or_nifcifava,
          a.or_nifcifava,
          a.or_nifcif,
          a.or_nomper,
          a.OR_TITULARITAT,
          min(c.or_Nomper) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) or_nomper_ava,
          min(c.or_titularitat) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) titularitat_ava,
          max(rwa.IN_RATINT) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) IN_RATINT,
          max(rwa.OR_PUNTFIN) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) OR_PUNTFIN,
          min(rwa.FI_PD_ORIGINAL) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) FI_PD_ORIGINAL,
          min(rwa.fi_pd_coreps) keep (dense_rank first order by rwa.fi_pd_coreps nulls last) fi_pd_coreps,
          min(rwa.FI_PDCONT) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) FI_PDCONT,
          max(rwa.FI_RATCON) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) FI_RATCON,
          min(rwa.FI_PDPOOL) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) FI_PDPOOL,
          min(NVL(lgd2.LGD,99)) keep (dense_rank first order by ol.fi_pd_coreps, NVL(lgd2.LGD,99) nulls last) FI_LGDAIRB,
          min(NVL(lgd2.LGD,99)) keep (dense_rank first order by ol.fi_pd_coreps, NVL(lgd2.LGD,99) nulls last) FI_LGDNOMORA,
          min(NVL(lgd2.LGD_LR,99)) keep (dense_rank first order by ol.fi_pd_coreps, NVL(lgd2.LGD,99) nulls last) FI_LGDLR,
          min(NVL(lgd2.LGD_LR,99)) keep (dense_rank first order by ol.fi_pd_coreps, NVL(lgd2.LGD,99) nulls last) FI_LGDLRNOMORA,
          null as C_TYPE_GUARANTEE,
          min(c.in_segmbsini) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segmbsini_ava,
          min(c.or_segrie) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segrie_ava,
          min(c.or_segfic) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segfic_ava,
          min(c.or_segfic2) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segfic2_ava,
          min(c.in_segmbs0) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segmbs0_ava,
          min(c.in_segmbs1) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segmbs1_ava,
          min(c.in_segmbs) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) segmbs_ava,
          min(c.in_factcor) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) factcor_ava,
          min(case when rwa.IN_SEGAIRB = 'Préstamos Hipotecarios' then 'Otro Retail' else rwa.IN_SEGAIRB end) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) in_segairb,
          max(rwa.FI_ATAMAIRB) keep (dense_rank first order by rwa.fi_pd_coreps, c.or_titularitat nulls last) FI_ATAMAIRB,
          null as OR_CODIGO_BIC,
          min(ol.fi_pd_coreps) keep (dense_rank first order by ol.fi_pd_coreps nulls last) fi_pd_coreps_old
    from (select /*+ parallel (b 8) */ distinct or_nifcifava, or_nifcif, or_nomper, OR_TITULARITAT from BAS_MEN.basilea_avalados b) a,
          BAS_MEN.BASILEA C,
          BAS_MEN.basilea_AIRB_RWA rwa,
          BAS_MEN.L4_EQUIVALENCIA_CIF l4,
          (select or_idreg, fi_pd_coreps from BAS_MEN.BASILEA_AIRB_PD_OLD) ol,
          BAS_MEN.MAESTRO_EAD_TITULARIDAD ead,
          BAS_MEN.MAESTRO_PERF_UNSEC_LGD lgd2
  where a.OR_nifcifava = c.OR_nifcif
  and c.or_idreg = rwa.or_idreg
  and c.or_idreg = ol.or_idreg
  and c.or_titularitat = ead.or_titularitat
	AND C.fi_elimi1 = 'NO'
  and C.in_metode = 'AIRB'
  AND rwa.IN_SEGAIRB <> 'Otros Activos'
  AND C.IN_SRATIN in ( 'CRVI' )
  and c.or_titularitat <> 0
  and c.in_segmbsini in ('003', '005', '006', '009', '010', '019', '027')
  and SUBSTR(c.OR_SEGFIC2,1,2) NOT IN ('GR', 'E5', 'P5')    -- Excluimos corporates y grupos
  AND C.OR_SEGFIC2 NOT in ('PA005', 'NC5DS', 'NC5R', 'NC5') -- Excluimos corporates y grupos
  and c.in_segmbs0 <> '201'
  and SUBSTR(a.OR_NIFCIFAVA,1,1) = L4.LETRA(+)
  and lgd2.LEGAL_FRAMEWORK      = case when l4.sociedad in ('Sociedad de responsabilidad limitada', 'Sociedad Anónima') THEN 'Limited responsibility'
                                  else  'Resto'
                                  end
 AND lgd2.LEASING_MOB          = 'N' -- Siempre sera N porque todo avalista tendra una garantia GR 21% por lo tantono será leasing mob
 AND lgd2.EAD_TITULARITAT_MIN  < ead.fi_eadconairb
 AND lgd2.EAD_TITULARITAT_MAX >= ead.fi_eadconairb
 AND lgd2.FI_PD_COREPS_MIN     < ol.FI_PD_COREPS
 AND lgd2.FI_PD_COREPS_MAX    >= ol.FI_PD_COREPS 
 group by a.or_nifcifava, a.or_nifcif, a.or_nomper, a.OR_TITULARITAT;            

   commit;
   
   /* INI HDEV-107786 En caso que un mismo avalista esté duplicado por tener una titularidad de corporates/grupos y otra de empresa
   eliminamos aquel que tenga peor PD, quedándonos con el avalista con mejor PD */
   
   delete from bas_men.BASILEA_AVALISTAS
   where OR_IDREG in (SELECT min (BAS.OR_IDREG) keep (dense_rank first order by bas.fi_pd_coreps desc) 
   										FROM BAS_MEN.BASILEA_AVALISTAS BAS
	 										INNER JOIN 
	 										(select or_nifcifava, count(distinct titularitat_ava) as total from BAS_MEN.BASILEA_AVALISTAS
   										group by or_nifcifava having count(distinct titularitat_ava) > 1) a
											ON BAS.OR_NIFCIFAVA = A.OR_NIFCIFAVA
											group by  BAS.OR_NIFCIFAVA);
   
   COMMIT;
   
   /* FIN HDEV-107786 */
   
    v_NumErr := 76;

/* 07/06/2021 - NAV - HDEV-32880 - substitución pd de avalistas para EEFF */
   INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALISTAS I
    select /*+ full(c) full(rwa) parallel (rwa 8) parallel (c 8) */  distinct
          min(c.or_idreg) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) idreg_ava,
          a.or_nifcifava,
          min(a.or_nifcif) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) nifcif_ava,
          a.or_nomper,
          null as OR_TITULARITAT,
          min(c.or_Nomper) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) or_nomper_ava,
          min(c.or_titularitat) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) titularitat_ava,
          max(IN_RATINT) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) IN_RATINT,
          max(OR_PUNTFIN) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) OR_PUNTFIN,
          min(FI_PD_ORIGINAL) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_PD_ORIGINAL,
          min(fi_pd_coreps) keep (dense_rank first order by fi_pd_coreps nulls last) fi_pd_coreps,
          min(FI_PDCONT) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_PDCONT,
          max(FI_RATCON) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_RATCON,
          min(FI_PDPOOL) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_PDPOOL,
          min(FI_LGDAIRB) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last)   FI_LGDAIRB,
          min(FI_LGDNOMORA) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_LGDNOMORA,
          min(FI_LGDLR) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_LGDLR,
          min(FI_LGDLRNOMORA) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_LGDLRNOMORA,
          min(C_TYPE_GUARANTEE) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) C_TYPE_GUARANTEE,
          min(c.in_segmbsini) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segmbsini_ava,
          min(c.or_segrie) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segrie_ava,
          min(c.or_segfic) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segfic_ava,
          min(c.or_segfic2) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segfic2_ava,
          min(c.in_segmbs0) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segmbs0_ava,
          min(c.in_segmbs1) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segmbs1_ava,
          min(c.in_segmbs) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) segmbs_ava,
          min(c.in_factcor) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) factcor_ava,
          min(case when rwa.IN_SEGAIRB = 'Préstamos Hipotecarios' then 'Otro Retail' else rwa.IN_SEGAIRB end) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) in_segairb,
          max(rwa.FI_ATAMAIRB) keep (dense_rank first order by fi_pd_coreps, c.or_codigo_bic nulls last) FI_ATAMAIRB,
          a.OR_CODIGO_BIC,
          0 as FI_PD_COREPS_OLD
    FROM (SELECT /*+ parallel (b 8) */ DISTINCT or_nifcifava, or_nifcif, or_nomper, OR_CODIGO_BIC
            FROM BAS_MEN.basilea_avalados b
           WHERE OR_CODIGO_BIC is not null) a,
         BAS_MEN.BASILEA C,
         BAS_MEN.basilea_AIRB_RWA rwa
   where a.OR_nifcifava = c.OR_CODIGO_BIC
     AND c.or_idreg = rwa.or_idreg
     AND C.fi_elimi1 = 'NO'
     AND rwa.IN_SEGAIRB <> 'Otros Activos'
     AND C.in_metode = 'AIRB'
     AND c.OR_CODIGO_BIC <> '?'
     AND c.in_segmbsini in ('007','018','021','028','029','034')-- EEFF
   GROUP BY a.or_nifcifava, a.or_nomper, a.OR_CODIGO_BIC, null;

   COMMIT;

 --FLA 18/02/2022 |avalistas de proceso datos MIAMI
 INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AVALISTAS I
 SELECT /*+ PARALLEL (A 8) PARALLEL (B 8) */ DISTINCT
      0 AS OR_IDREG,
      a.or_nifcifava,
      a.or_nifcif,
      a.or_nomper,
      a.OR_TITULARITAT,
      b.OR_NOMPER AS OR_NOMPER_AVA,
      b.OR_TITULARITAT AS TITULARITAT_AVA,
      b.IN_RATINT AS IN_RATINT,
      b.OR_PUNTFIN AS OR_PUNTFIN,
      b.FI_PD_COREPS AS FI_PD_ORIGINAL,
      b.FI_PD_COREPS AS FI_PD_COREPS,
      b.FI_PDCONT AS FI_PDCONT,
      b.FI_RATCON AS FI_RATCON,
      b.FI_PD_COREPS AS FI_PDPOOL,
      b.FI_LGDAIRB AS FI_LGDAIRB,
      b.FI_LGDAIRB AS FI_LGDNOMORA,
      b.FI_LGDLR AS FI_LGDLR,
      b.FI_LGDLR AS FI_LGDLRNOMORA,
      b.C_TYPE_GUARANTEE AS C_TYPE_GUARANTEE,
      b.IN_SEGMBSINI AS SEGMBSINI_AVA,
      b.OR_SEGRIE AS SEGRIE_AVA,
      b.OR_SEGFIC AS SEGFIC_AVA,
      b.OR_SEGFIC2 AS SEGFIC2_AVA,
      b.IN_SEGMBS0 AS SEGMBS0_AVA,
      b.IN_SEGMBS1 AS SEGMBS1_AVA,
      b.IN_SEGMBS AS SEGMBS_AVA,
      1 AS FACTCOR_AVA,
      b.IN_SEGAIRB AS IN_SEGAIRB,
      b.FI_ATAMAIRB AS FI_ATAMAIRB,
      NULL AS OR_CODIGO_BIC,
    0 as FI_PD_COREPS_OLD
      FROM BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_3 B, -- cogemos de los avalistas de fuera de base
      (select distinct OR_NIFCIFAVA from BAS_MEN.BASILEA_AVALISTAS) ava,
      BAS_MEN.AVALISTAS_FUERA_BASE_AIRB_4 D, -- cruzamos para saber cual es el mejor
      (SELECT DISTINCT or_idreg, or_nifcifava, or_nifcif, or_nomper, OR_TITULARITAT FROM BAS_MEN.basilea_avalados) a
  WHERE (b.OR_CONTRATO_GARANTIA = D.OR_CONTRATO_GARANTIA and B.OR_NIFCIF = D.OR_NIFCIF)
    AND (a.or_nifcifava = b.OR_nifcif)
    AND b.or_nifcif = ava.OR_NIFCIFAVA(+)
    AND ava.OR_NIFCIFAVA is null;
 COMMIT;
 --FLA FIN

   v_NumErr := 36;

   BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.basilea_airb_AVALISTAS_AUX');

  insert /*+ PARALLEL (I 8) */  into BAS_MEN.BASILEA_AIRB_avalistas_aux I
    SELECT /*+ parallel (a 8) parallel (c 8) */  distinct
           a.or_nifcif, A.OR_TITULARITAT, A.OR_NOMPER, c.or_nifcifava, c.TITULARITAT_AVA, C.OR_NOMPER_AVA, A.OR_IDREG, c.IN_SEGAIRB,c.FI_ATAMAIRB, A.FI_CCFAIRB,
           case when C.FI_LGDAIRB <= a.fi_lgdairb then C.FI_LGDAIRB
                else a.fi_lgdairb
            end FI_LGDAIRB /* XCG. 25/03/19. Nos quedamos con la mejor LGD entre la del avalista y la del avalado*/
           , A.FI_EADAIRB, A.FI_EADCONAIRB, C.IN_RATINT, A.FI_MATAIRB
           , 0 AS FI_CORAIRB, 0 AS FI_MAAIRB, 0 AS FI_RCAIRB
           , a.FI_RWAAIRB, a.FI_RWACONAIRB, C.OR_PUNTFIN,  a.FI_ELAIRB, a.FI_ELCONAIRB, C.FI_PD_ORIGINAL, C.FI_PD_COREPS,
           case when C.FI_LGDNOMORA <= a.fi_LGDNOMORA then C.FI_LGDNOMORA
                else a.fi_LGDNOMORA
            end FI_LGDNOMORA,
           A.FI_LGDWORST, A.FI_LGDBE,
           case when C.FI_LGDLR <= a.fi_LGDLR then C.FI_LGDLR
                else a.fi_LGDLR
            end FI_LGDLR
           , C.FI_PDCONT, C.FI_RATCON, C.FI_PDPOOL, A.IN_CATEGO, A.FI_VIDRES
           , 0 AS FI_RWA
           , A.FI_IMPLTV,
           case when C.FI_LGDLRNOMORA <= a.fi_LGDLRNOMORA then C.FI_LGDLRNOMORA
                else a.fi_LGDLRNOMORA
            end FI_LGDLRNOMORA,
           a.IN_ACTIVO_CONS, A.ENTIDAD_ENTE,
           case when C.FI_LGDAIRB <= a.fi_lgdairb then c.C_TYPE_GUARANTEE
                else a.C_TYPE_GUARANTEE
            end C_TYPE_GUARANTEE,
           A.OR_IDMES, c.or_idreg AS idreg_ava, in_metode
      FROM BAS_MEN.BASILEA_AVALADOS a,
           (select distinct or_idreg, or_nifcif, OR_NIFCIFAVA, TITULARITAT_AVA, OR_NOMPER_AVA, FI_LGDAIRB, IN_RATINT, OR_PUNTFIN, FI_PD_ORIGINAL
                 , FI_PD_COREPS, FI_LGDNOMORA, FI_LGDLR, FI_PDCONT, FI_RATCON, FI_PDPOOL, FI_LGDLRNOMORA, C_TYPE_GUARANTEE, IN_SEGAIRB, FI_ATAMAIRB
              from BAS_MEN.BASILEA_avalistas
             where OR_CODIGO_BIC is null) c
     WHERE A.or_nifcif = C.or_nifcif
       and a.or_nifcifava = c.or_nifcifava;

   commit;

   v_NumErr := 40;

/*07/06/2021 - NAV - HDEV-32880 - substitución pd de avalistas para EEFF */
   INSERT /*+ PARALLEL (I 8) */  INTO BAS_MEN.BASILEA_AIRB_AVALISTAS_AUX I
   SELECT /*+ parallel (a 8) parallel (c 8) */  DISTINCT
          A.OR_NIFCIF, A.OR_TITULARITAT, A.OR_NOMPER, C.OR_NIFCIFAVA, C.TITULARITAT_AVA, C.OR_NOMPER_AVA, A.OR_IDREG, C.IN_SEGAIRB,C.FI_ATAMAIRB, A.FI_CCFAIRB,
          CASE WHEN C.FI_LGDAIRB <= A.FI_LGDAIRB THEN C.FI_LGDAIRB
               ELSE A.FI_LGDAIRB
           END FI_LGDAIRB /* XCG. 25/03/19. NOS QUEDAMOS CON LA MEJOR LGD ENTRA LA DEL AVALISTA Y LA DEL AVALADO*/
          , A.FI_EADAIRB, A.FI_EADCONAIRB, C.IN_RATINT, A.FI_MATAIRB
          , 0 AS FI_CORAIRB, 0 AS FI_MAAIRB, 0 AS FI_RCAIRB
          , A.FI_RWAAIRB, A.FI_RWACONAIRB, C.OR_PUNTFIN,  A.FI_ELAIRB, A.FI_ELCONAIRB, C.FI_PD_ORIGINAL, C.FI_PD_COREPS,
          CASE WHEN C.FI_LGDNOMORA <= A.FI_LGDNOMORA THEN C.FI_LGDNOMORA
               ELSE A.FI_LGDNOMORA
           END FI_LGDNOMORA
          , A.FI_LGDWORST, A.FI_LGDBE,
          CASE WHEN C.FI_LGDLR <= A.FI_LGDLR THEN C.FI_LGDLR
               ELSE A.FI_LGDLR
           END FI_LGDLR
          , C.FI_PDCONT, C.FI_RATCON, C.FI_PDPOOL, A.IN_CATEGO, A.FI_VIDRES
          , 0 AS FI_RWA
          , A.FI_IMPLTV,
          CASE WHEN C.FI_LGDLRNOMORA <= A.FI_LGDLRNOMORA THEN C.FI_LGDLRNOMORA
               ELSE A.FI_LGDLRNOMORA
           END FI_LGDLRNOMORA,
          A.IN_ACTIVO_CONS, A.ENTIDAD_ENTE,
          CASE WHEN C.FI_LGDAIRB <= A.FI_LGDAIRB THEN C.C_TYPE_GUARANTEE
               ELSE A.C_TYPE_GUARANTEE
           END C_TYPE_GUARANTEE,
          A.OR_IDMES, C.OR_IDREG AS IDREG_AVA, IN_METODE
     FROM BAS_MEN.BASILEA_AVALADOS A,
         (SELECT DISTINCT OR_IDREG, OR_NIFCIF, OR_NIFCIFAVA, TITULARITAT_AVA, OR_NOMPER_AVA, FI_LGDAIRB, IN_RATINT, OR_PUNTFIN, FI_PD_ORIGINAL
               , FI_PD_COREPS, FI_LGDNOMORA, FI_LGDLR, FI_PDCONT, FI_RATCON, FI_PDPOOL, FI_LGDLRNOMORA, C_TYPE_GUARANTEE, IN_SEGAIRB, FI_ATAMAIRB, OR_CODIGO_BIC
            FROM BAS_MEN.BASILEA_AVALISTAS
           where OR_CODIGO_BIC is not null) C
    WHERE A.OR_CODIGO_BIC  = C.OR_CODIGO_BIC
      AND A.OR_NIFCIFAVA  = C.OR_NIFCIFAVA;

   COMMIT;

    v_NumErr := 41;

    --Cálculo de capital de los avalados con la info de sus avalistas
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_AVALISTAS');

    insert /*+ parallel (i 8) */ into BAS_MEN.BASILEA_AIRB_AVALISTAS i
      (OR_IDREG, FI_PD_ORIGINAL, FI_PD_COREPS, FI_PDCONT, FI_PDPOOL, FI_EADAIRB, FI_EADCONAIRB, FI_CCFAIRB, FI_RATCON,
      IN_RATINT, OR_PUNTFIN, FI_LGDNOMORA, FI_LGDAIRB, FI_LGDLR, FI_LGDBE, FI_LGDWORST, FI_IMPLTV,
      FI_LGDLRNOMORA, IN_SEGAIRB, FI_MATAIRB, FI_ATAMAIRB, FI_ELAIRB, FI_ELCONAIRB, FI_CORAIRB, FI_MAAIRB, FI_RCAIRB,
      FI_RWAAIRB, FI_RWACONAIRB, IN_CATEGO, FI_RWA, FI_VIDRES, IN_ACTIVO_CONS, ENTIDAD_ENTE, C_TYPE_GUARANTEE, OR_IDMES, IN_SRATIN_2
      )
      select CUR.OR_IDREG, CUR.FI_PD_ORIGINAL, CUR.FI_PD_COREPS, CUR.FI_PDCONT, CUR.FI_PDPOOL, CUR.FI_EADAIRB,
             CUR.FI_EADCONAIRB, CUR.FI_CCFAIRB, CUR.FI_RATCON, CUR.IN_RATINT, CUR.OR_PUNTFIN,
             CUR.FI_LGDNOMORA, CUR.FI_LGDAIRB, CUR.FI_LGDLR, CUR.FI_LGDBE, CUR.FI_LGDWORST, CUR.FI_IMPLTV,
             CUR.FI_LGDLRNOMORA, CUR.IN_SEGAIRB, CUR.FI_MATAIRB, CUR.FI_ATAMAIRB, CUR.FI_ELAIRB, CUR.FI_ELCONAIRB,
             CUR.FI_CORAIRB, CUR.FI_MAAIRB, CUR.FI_RCAIRB, CUR.FI_RWAAIRB, CUR.FI_RWACONAIRB, CUR.IN_CATEGO, CUR.FI_RWA,
             CUR.FI_VIDRES, Cur.IN_ACTIVO_CONS, Cur.ENTIDAD_ENTE, CUR.C_TYPE_GUARANTEE, SUBSTR(PN_FECPRO,1,6), CUR.IN_SRATIN_2
        from table(BAS_MEN.CALCULO_RWA.F_CALCULO_RWA
                    (cursor(SELECT /*+ full(a) full(b) parallel (a 8) parallel (b 8) */
                            DISTINCT A.OR_IDREG, A.IN_INDMOR,  A.IN_SEGMBSINI, A.IN_RATSOB, A.IN_SEGMBS0, A.FI_EADAIRB,  A.FI_EADCONAIRB, A.FI_CCFAIRB
                                   , A.OR_MODRAT0, A.IN_SRATIN, A.OR_RATINT
                                   , CASE WHEN C.OR_NUMRAT IS NOT NULL       THEN C.OR_NUMRAT
                                          WHEN pf_ofex.OR_NUMRAT IS NOT NULL THEN pf_ofex.OR_NUMRAT
                                          WHEN resto.OR_NUMRAT IS NOT NULL   THEN resto.OR_NUMRAT
                                          ELSE 0
                                     END AS OR_NUMRAT
                                   , CASE WHEN C.IN_CATEGO IS NOT NULL       THEN C.IN_CATEGO
                                          WHEN pf_ofex.IN_CATEGO IS NOT NULL THEN pf_ofex.IN_CATEGO
                                          WHEN resto.IN_CATEGO IS NOT NULL   THEN resto.IN_CATEGO
                                          ELSE '?'
                                     END AS IN_CATEGO
                                   , b.FI_PD_ORIGINAL, b.FI_PD_COREPS, b.FI_PDCONT, b.FI_PDPOOL, b.FI_RATCON, b.IN_RATINT, b.OR_PUNTFIN
                                   , B.FI_ATAMAIRB, B.FI_VIDRES, B.FI_LGDNOMORA, B.FI_LGDAIRB, B.FI_LGDLR, B.FI_LGDBE, B.FI_LGDWORST, B.FI_IMPLTV
                                   , B.FI_LGDLRNOMORA, B.IN_SEGAIRB, B.FI_MATAIRB, A.IN_ACTIVO, B.IN_ACTIVO_CONS, B.ENTIDAD_ENTE
                                   , B.C_TYPE_GUARANTEE, A.OR_IDMES, A.FI_EPICON, D.IN_SRATIN_2
                                FROM BAS_MEN.BASILEA                       A
                                   , BAS_MEN.BASILEA_AIRB_avalistas_aux    B
                                   , BAS_MEN.MAESTRO_PROJECT_FINANCE       C
                                   , BAS_MEN.MAESTRO_PROJECT_FINANCE       PF_OFEX /* 07/10/2021 XCG | Añadido cruce para recuperar categoria de PF */
                                   , BAS_MEN.MAESTRO_PROJECT_FINANCE       RESTO   /* 13/10/2021 NAV | Añadido cruce para recuperar categoria de PF */
                                   , BAS_MEN.BASILEA_AIRB_PD         D --15/06 HDEV-107786
                               WHERE A.OR_IDREG     = B.OR_IDREG
                                 AND A.OR_IDPERS    = C.OR_IDPERS(+)
                                 AND A.OR_CTACLI    = PF_OFEX.or_ctacli(+)
                                 AND A.OR_NUMOFI    = PF_OFEX.or_numofi(+)
                                 AND A.OR_NIFCIFIBM = RESTO.OR_IDPERS(+)
                 AND A.OR_IDREG     = D.OR_IDREG(+)
                            ), PN_FECPRO
                    )
                 ) CUR;

    COMMIT;

    v_NumErr := 44;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB_AVALISTAS', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    -- Comparativa entre avalistas y avalados, nos quedamos con la info de los avalistas que mejore la de sus avalados
    v_NumErr := 45;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.CAMBIOS_AVALISTAS');

    insert /*+ parallel (i 8) */ into BAS_MEN.CAMBIOS_AVALISTAS
    select /*+ full(a) full(b) full(c)  parallel (a 8) parallel (b 8)  parallel(c 8) */
          a.or_idreg, c.or_nifcif, c.or_titularitat, c.or_nomper, c.or_nifcifava, C.TITULARITAT_AVA, or_nomper_ava,
          a.fi_pd_coreps as pd_coreps_ava, b.fi_pd_coreps, a.fi_elairb as ealairb_ava, b.fi_elairb, a.fi_rwaairb as rwaairb_ava,
          b.fi_rwaairb, a.fi_lgdairb lgdairb_ava, b.fi_lgdairb
     from BAS_MEN.BASILEA_AIRB_AVALISTAS a,
          BAS_MEN.BASILEA_AIRB_RWA b,
          BAS_MEN.basilea_airb_AVALISTAS_AUX c
    where a.or_idreg = b.or_idreg
      /* INI 25/10/2021 - FMRR -- HDEV-81085(Por requerimientos se coge la PD hasta el cuarto decimal) */
      and TRUNC(a.fi_pd_coreps,5) < TRUNC(b.fi_pd_coreps,5)
      and TRUNC(a.fi_rwaairb,2) < TRUNC(b.fi_rwaairb,2)
      /* RMR 31/03/2022 Cambiado truncado para que deje 2 decimales */
    --and TRUNC(a.fi_rwaairb) < TRUNC(b.fi_rwaairb)
    /* FIN 25/10/2021 - FMRR -- HDEV-81085(Por requerimientos se coge la PD hasta el cuarto decimal) */
    --and a.fi_pd_coreps < b.fi_pd_coreps
    --and a.fi_rwaairb < b.fi_rwaairb
      and a.or_idreg = c.or_idreg
      and in_metode = 'AIRB'; -- AIRB se compara contra AIRB. 9/3/21

    commit;

    v_NumErr := 50;

    insert /*+ parallel (i 8) */ into BAS_MEN.CAMBIOS_AVALISTAS
    select /*+ full(a) full(b) full(c)  parallel (a 8) parallel (b 8)  parallel(c 8) */
          a.or_idreg, c.or_nifcif, c.or_titularitat, c.or_nomper, c.or_nifcifava, C.TITULARITAT_AVA, or_nomper_ava,
          a.fi_pd_coreps pd_coreps_ava, 99 fi_pd_coreps, a.fi_elairb ealairb_ava, 99 fi_elairb, a.fi_rwaairb rwaairb_ava,
          b.FI_EXPSTDA_FULLY * b.FI_RWASTDA, a.fi_lgdairb lgdairb_ava, 99 fi_lgdairb
     from BAS_MEN.BASILEA_AIRB_AVALISTAS a,
          BAS_MEN.BASILEA_STDA b,
          BAS_MEN.basilea_airb_AVALISTAS_AUX c
    where a.or_idreg = b.or_idreg
    --and a.fi_pd_coreps < b.fi_pd_coreps
      /* 25/10/2021 - FMRR -- HDEV-81085(Por requerimientos se coge el RWA hasta el cuarto decimal) */
    /*and a.fi_rwaairb < (b.FI_EXPSTDA_FULLY * b.FI_RWASTDA) */
      and TRUNC(a.fi_rwaairb) < TRUNC(b.FI_EXPSTDA_FULLY * b.FI_RWASTDA)
      and a.or_idreg = c.or_idreg
      and in_metode = 'STDA'; -- STDA se compara contra STDA y solo RWA. 9/3/21

    commit;

    v_NumErr := 55;

COMMIT;

    --detección avalistas anidados.

    --    select /*+ parallel (a 8) parallel (b 8)*/  distinct a.or_idreg, a.IDREG_AVA, b.or_idreg, b.IDREG_AVA
     /*from  (select a.* from BAS_MEN.basilea_airb_avalistas_aux a, BAS_MEN.CAMBIOS_AVALISTAS c where a.or_idreg = c.or_idreg) a,
           (select b.* from BAS_MEN.basilea_airb_avalistas_aux b, BAS_MEN.CAMBIOS_AVALISTAS c where b.or_idreg = c.or_idreg) b
     where a.or_idreg = b.IDREG_AVA;*/

        -- Generamos tabla con la info original de los avalados
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB_AVALADOS');

    insert /*+ PARALLEL (I 8) */ into BAS_MEN.BASILEA_AIRB_AVALADOS i
    select  /*+ full(a) parallel (a 8) parallel (c 8) */ a.*
      from BAS_MEN.basilea_airb_rwa a,
           BAS_MEN.CAMBIOS_AVALISTAS c
     where a.or_idreg = c.or_idreg;

    commit;

    -- Eliminamos la info original de los avalados
    v_NumErr := 60;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_AIRB','VEDADERO');

    -- Introducimos la información de los avalistas en lugar de la de sus avalados
    v_NumErr := 7;
    insert into BAS_MEN.BASILEA_AIRB
    select /*+ PARALLEL (I 8) */
           i.OR_IDREG
         , i.IN_SEGAIRB
         , i.FI_ATAMAIRB
         , i.FI_CCFAIRB
         , i.FI_LGDAIRB
         , i.FI_EADAIRB
         , i.FI_EADCONAIRB
         , i.IN_RATINT
         , i.FI_MATAIRB
         , i.FI_CORAIRB
         , i.FI_MAAIRB
         , i.FI_RCAIRB
         , i.FI_RWAAIRB
         , i.FI_RWACONAIRB
         , i.OR_PUNTFIN
         , i.FI_ELAIRB
         , i.FI_ELCONAIRB
         , i.FI_PD_ORIGINAL
         , i.FI_PD_COREPS
         , i.FI_LGDNOMORA
         , i.FI_LGDWORST
         , i.FI_LGDBE
         , i.FI_LGDLR
         , i.FI_PDCONT
         , i.FI_RATCON
         , i.FI_PDPOOL
         , i.IN_CATEGO
         , i.FI_VIDRES
         , i.FI_RWA
         , i.FI_IMPLTV
         , i.FI_LGDLRNOMORA
         , i.IN_ACTIVO_CONS
         , i.ENTIDAD_ENTE
         , i.C_TYPE_GUARANTEE
         , i.OR_IDMES
         , i.IN_SRATIN_2
      from BAS_MEN.BASILEA_AIRB_AVALISTAS I
         , BAS_MEN.CAMBIOS_AVALISTAS b
     where i.or_idreg = b.or_idreg;

    commit;

    v_NumErr := 65;

    -- introducimos el resto de información que no pertenece al tratamiento de avalistas
    insert /*+ PARALLEL (I 8) */ into BAS_MEN.BASILEA_AIRB i
    select /*+ full(a) PARALLEL (a 8) */ a.*
      from BAS_MEN.BASILEA_AIRB_RWA a,
           BAS_MEN.CAMBIOS_AVALISTAS b
     where a.or_idreg = b.or_idreg(+)
       and b.or_idreg is null;

    commit;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA_AIRB', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    -- Identificamos en Basilea los registros modificados del airb con el tiporeg 'AV*' y los del stda como 'CI*'. Todo acaba en el AIRB 9/3/21
    v_NumErr := 70;
    update /*+ full(I) PARALLEL (I 8) */ BAS_MEN.basilea I
      set in_tiporeg = Case When in_metode = 'STDA' then
                                 case
                                      when in_tiporeg like '%CI%' then in_tiporeg
                                      else 'CI'||in_tiporeg
                                 end
                            when in_tiporeg like '%AV%' then in_tiporeg
                            else 'AV'||in_tiporeg
                       end,
           in_metode = 'AIRB'
     where or_idreg in (select or_idreg from BAS_MEN.CAMBIOS_AVALISTAS);

    commit;

    v_NumErr := 75;

    -- XCG, TM-2078. 14/07/2020. Llevar los otros activos del Airb al STDA
    MERGE  /*+ full(dst) PARALLEL (dst 8)*/ INTO BAS_MEN.BASILEA dst
      USING (SELECT /*+ PARALLEL (a 8)*/ OR_IDREG
               FROM BAS_MEN.BASILEA_AIRB a
              WHERE in_segairb = 'Otros Activos') src
         ON (dst.OR_IDREG = src.OR_IDREG)
       WHEN MATCHED THEN
            UPDATE
               SET  dst.IN_METODE = 'STDA';
    COMMIT;

    v_NumErr := 99;
    --
    -- Info. en el control del proceso del fin OK de este
    --
    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT      = 'FINALIZADO'
         , DATA_FIN   = SYSDATE
         , FINALITZAT = 'OK'
     WHERE PROCES = Cte_Nom_Proc
       AND ESTAT  = 'INICIADO';

    COMMIT;

EXCEPTION
   WHEN OTHERS THEN
    --
    -- Info. en el control del proceso del fin ERROR de este
    --
    v_Mensaje:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);

    UPDATE BAS_MEN.CONTROL_PROCES
       SET ESTAT      = 'FINALIZADO'
         , DATA_FIN   = SYSDATE
         , FINALITZAT = 'KO'
         , ERROR_ORAC = v_Mensaje
         , ERROR_PROG = SUBSTR('* NUMERR: '||v_NumErr,1,255)
         , NUM_ERROR  = v_NumErr
     WHERE PROCES =  Cte_Nom_Proc
       AND ESTAT  = 'INICIADO';

    COMMIT;
    RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_CALCULO_AVALISTAS';


create or replace PROCEDURE       BAS_MEN.BASI_CALCULO_AVALISTAS IS

    vProces           CONSTANT VARCHAR2(40)   := 'METODO AIRB AVALISTAS';
    vNumErr           NUMBER(2)               DEFAULT 1;
    vCodi             NUMBER(10)              DEFAULT 0;
    vDescripcio       VARCHAR2(255)           DEFAULT '';

    VN_FECPRO         NUMBER(8); -- Ojo con la fecha del proceso.
    VN_MESPRO         NUMBER(6);   -- Ojo con la fecha del proceso.
    VD_FECPRO         DATE;

BEGIN

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  BAS_MEN.FNC_CALCULO_AVALISTAS (VN_FECPRO);
  COMMIT;

EXCEPTION

    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;

/

select * from sys.user_errors WHERE NAME = 'BASI_CALCULO_AVALISTAS';
--bkd40083=====================================================================================================
Select 'bkd40083' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_COEFICIENTE_REDUCTOR is

    Cte_Proces CONSTANT VARCHAR2(80)   := 'FNC_COEFICIENTE_REDUCTOR';
    v_Msg_Err  VARCHAR2(255)           DEFAULT '';
    vNumErr    NUMBER DEFAULT '0';

begin
         
    commit; -- Cierre de cualquier TX abierta
   
    BAS_MEN.SP_INFO_CONTROL_PROCES (Cte_Proces, 'INICIADO');
      
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');
    
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PF_FACTOR_APOYO');
    COMMIT;
    /* RMR 08/06/2020 Volcado de la tabla para recuperar el factor de apoyo para Project finance */
    INSERT /*+ PARALLEL (C 8)  */ INTO BAS_MEN.MAESTRO_PF_FACTOR_APOYO C
          (SITUACION,SECTOR,OR_REFOPE,OR_RATINT,OR_PUNT0,OR_PROYECTO,OR_NUMRAT,OR_NUMOFI,OR_NOMPER,OR_NOMPAIS,OR_IDPERS,OR_FECHA,OR_CTACLI,MODELO,IN_CATEGO,IDRATING,ID_MES)
    SELECT /*+ PARALLEL (A 8)*/ SITUACION,SECTOR,OR_REFOPE,OR_RATINT,OR_PUNT0,OR_PROYECTO,OR_NUMRAT,OR_NUMOFI,OR_NOMPER,OR_NOMPAIS,OR_IDPERS,OR_FECHA,OR_CTACLI,MODELO,CATEGORIA,IDRATING,ID_MES
      FROM DCRPROP_MENSUAL.MAESTRO_PF_FACTOR_APOYO_SAS A;
    COMMIT;
    /* RMR 08/06/2020 */
    
    /*Se aplicará coeficiente reductor a Comercios y Autónomos y Empresas que no estén en impago, con
      ventas menores o igual a 50 Millones y no debe superar el millón y medio la EAD del grupo de riesgo. La EAD sin tener en cuenta los residenciales. xcg, 23/10/13 
    */
    /* RMR 08/06/2020 Comentado update ya que el factor se multiplicará siempre por lo que cuando no tenga será 1 para quedarse igual */
    --UPDATE /*+ full(Upd) parallel(Upd 8) */ BAS_MEN.BASILEA upd SET IN_FACTCOR = 0 WHERE IN_FACTCOR = 1;
   -- UPDATE /*+ full(Upd) parallel(Upd 8) */ BAS_MEN.BASILEA upd SET IN_FACTCOR = 1 WHERE IN_FACTCOR <> 1; 
    --commit;
    
    vNumErr := 1;
           
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SUMEAD_METODO_RESIDENCIALES');
    
     INSERT /*+ PARALLEL (C 8)  */ INTO BAS_MEN.SUMEAD_METODO_RESIDENCIALES c
     SELECT 81, SUM(ead) FI_SUMEAD ,T.ID_CLIENTE
       FROM (
     SELECT  /*+  full(a) full(st) full(aux) parallel (a 8)  parallel (st 8) parallel (aux 8)*/
            CASE
                 when or_entity = 8211 THEN 81
                 WHEN or_entity = 9157 THEN 9158
                 else or_entity
             end as or_entity,     IN_SEGMBS0,    IN_PRESTPERCENT,
--          CASE
--               WHEN FI_ELIMI1 IN ('NO','TITACT2','RFNEG','SWATIT','CRSUB','BONTIT','LINLIQ','EQUITY', 'SRABS') AND A.FI_TIPEXP = 'Drawn' THEN /* 12/05/20 - NAV - Quitamos el filtro que el método ha de ser AIRB o STDA*/
--                     case
--                          /*when a.IN_SEGMBS0 = '200' and a.IN_PRESTPERCENT = 2 THEN  27/01/2022 - NAV - HDEV-106924 - suma para el fi_sumexp_factcor  y no limitar a las promociones en curso (in_prestpercent= 2) y aplicarlo a todas las promociones (in_segmbs0 = '200')*/
--                          when a.IN_SEGMBS0 = '200' THEN
--                               /* INI NAV 28/07/202 - HDEV-177542 - Factoring asegurado Euler */
--                               DECODE(st.IN_SEGSTDA_HIP, 'RRE', DECODE(IN_INDMOR, 'SI', aux.OR_SALDO_ORIG, 'CT', aux.OR_SALDO_ORIG, 'AD', aux.OR_SALDO_ORIG, aux.OR_SALDO_ORIG3), aux.OR_SALDO_ORIG)
--                          when (nvl(INMUEBLE,'?') = 'INMUEBLE' AND nvl(TIPO_FINCA, '?') = 'RES') or (or_proced = 'LEASING' and OR_TIPOBJETO in (2030, 2031)) THEN
--                               0
--                          when or_entity = 9109 and  or_tipgar = 'HR' then
--                               0
--                          else
--                               OR_DISPTO
--                     end
--                ELSE
--                    0
--           END EAD,
            /* 26/08/2022 - PP - HDEV-170882 */
            CASE
                WHEN FI_ELIMI1 IN ('NO','TITACT2','RFNEG','SWATIT','CRSUB','BONTIT','LINLIQ','EQUITY', 'SRABS') AND A.FI_TIPEXP = 'Drawn' THEN /* 12/05/20 - NAV - Quitamos el filtro que el método ha de ser AIRB o STDA*/
                     case
                         when a.IN_SEGMBS0 = '200' THEN
                              aux.OR_SALDO_ORIG
                         when (nvl(INMUEBLE,'?') = 'INMUEBLE' AND nvl(TIPO_FINCA, '?') = 'RES') or (or_proced = 'LEASING' and OR_TIPOBJETO in (2030, 2031)) THEN
                              0
                         else
                              OR_DISPTO
                     end
                ELSE
                     0
            END EAD,
           CASE WHEN NVL(A.IN_GRUP_IDPER,'?') <> '?' THEN
                     'GRUP:' || A.IN_GRUP_IDPER
                WHEN A.OR_NUMOFI IN (800,801,813,821,825) AND A.OR_TITULARITAT = 0 THEN
                     'OFEX:' || (A.OR_NUMOFI * 10000000000 + A.OR_CTACLI)
                WHEN A.OR_ENTITY = 9109 AND NVL(A.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                     'ANDO:' || A.OR_IDPERS
                WHEN A.OR_PERSONSCPCB IN (816,831,833) AND A.OR_PROCED <> 'FACTORING' and ( A.IN_SEGMBSINI in ('002','017') ) THEN
                     'TITU:' || A.OR_TITUSCPCB
                WHEN A.OR_TITULARITAT NOT IN (0,9,99) THEN
                     'TITU:' || A.OR_TITULARITAT
                WHEN NVL(A.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                     'NIFS:' || A.OR_NIFCIF
                ELSE
                     'REGI:' || A.OR_IDREG
           END ID_CLIENTE
          FROM BAS_MEN.BASILEA A,
               BAS_MEN.MAESTRO_FINCA_INMOBILIARIA B,
             --BAS_MEN.BASILEA_STDA st,               /* 26/08/2022 - PP - HDEV-170882 */
               BAS_MEN.BASILEA_SEGM_AUX aux
         WHERE A.OR_TIPOFI = B.TIPOFI(+)
         --AND a.or_idreg  = st.or_idreg (+)          /* 26/08/2022 - PP - HDEV-170882 */
           AND a.or_idreg  = aux.or_idreg (+)
         ) T
    GROUP BY 81, T.ID_CLIENTE
    ;
         
    commit;
  
    vNumErr := 2;
    
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.COEFICIENTE_REDUCTOR_RES');

    INSERT /*+ PARALLEL (C 8)  */ INTO BAS_MEN.COEFICIENTE_REDUCTOR_RES c
    select /*+ full(b) full(Stda) PARALLEL (A 8) PARALLEL (B 8) parallel(Stda 8)*/ DISTINCT B.OR_IDREG, null as IN_GRUP_IDPER, IN_METODE,
           fi_sumead, IN_VTAGRU_CONS as in_VTAGRU, IN_SEGMBSINI, FI_ELIMI1, in_tiporeg,
            /* RMR 08/06/2020 Añadida tabla para coger el correcto factor de apoyo a PF*/ 
           CASE WHEN IN_INDMOR IN ('SI','CT','AD') OR IN_SRATIN = 'BLQRM' then 1   --XCG 15/10/2021 se cambia prelación
                WHEN b.OR_NIFCIF = '777018707659' THEN 1 /* 2/12/2021 - NAV - HDEV-102956  - clientes con nif 777018707659 no deben tener factor de apoyo */
                WHEN (IN_METODE = 'AIRB' OR (in_metode = 'STDA' AND in_segstda in ('Empresas', 'Retail', 'RRE/CRE', 'RRE','CRE') AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo')) THEN
                     CASE WHEN pf.or_idpers      is not null and IN_SEGMBS0 = '201' AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo' then 0.75
                          WHEN pf_ibm.or_idpers  is not null and IN_SEGMBS0 = '201' AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo' then 0.75
                          WHEN pf_ofex.OR_CTACLI is not null and IN_SEGMBS0 = '201' AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo' then 0.75
                          /* RMR 08/06/2020 */
                          WHEN (IN_SEGMBSINI IN ('003','005','006','009','010','019','027','002','017','101','102')
                            OR OR_IDECNO = 30 OR (OR_IDECNO >= 200 AND OR_IDECNO <= 300)) 
                           AND (IN_SEGMBS0 NOT IN ('201', '203', '204') OR IN_TIPOREG = 'FMX')
                           AND in_tiporeg <> 'SI'                 
                           AND IN_VTAGRU_CONS <= 50000000 THEN 
                            	 CASE when IN_METODE = 'AIRB' and substr(in_tiporeg,1,2) = 'CI' and Stda.IN_SEGSTDA_AUX = 'Alto Riesgo' then 1 -- Alto riesgo AIRB pero que era STDA, no tien factor. XCG 11/08/2021
                            	      WHEN FI_SUMEAD < 2500000 THEN 0.7619
                                    ELSE (LEAST(FI_SUMEAD,2500000)* 0.7619 + GREATEST(0,FI_SUMEAD-2500000) * 0.85)/FI_SUMEAD
                               END
                           ELSE 1          
                     END         
                ELSE 1
           END AS COEFICIENTE,
           ID_CLIENTE
      from BAS_MEN.SUMEAD_METODO_RESIDENCIALES a,
           BAS_MEN.basilea b,
           BAS_MEN.BASILEA_STDA Stda,
           /* RMR 08/06/2020 Añadida tabla para coger el correcto factor de apoyo a PF*/
           BAS_MEN.MAESTRO_PF_FACTOR_APOYO pf,
           BAS_MEN.MAESTRO_PF_FACTOR_APOYO pf_ibm,
           (SELECT * FROM BAS_MEN.MAESTRO_PF_FACTOR_APOYO where NVL(OR_CTACLI,0) <> 0) pf_ofex
           /* RMR 08/06/2020 */
      where a.ID_CLIENTE = CASE WHEN NVL(b.IN_GRUP_IDPER,'?') <> '?' THEN
                                     'GRUP:' || b.IN_GRUP_IDPER
                                WHEN b.OR_NUMOFI IN (800,801,813,821,825) AND b.OR_TITULARITAT = 0 THEN
                                     'OFEX:' || (b.OR_NUMOFI * 10000000000 + b.OR_CTACLI)
                                WHEN b.OR_ENTITY = 9109 AND NVL(b.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                                     'ANDO:' || b.OR_IDPERS
                                WHEN b.OR_PERSONSCPCB IN (816,831,833) AND b.OR_PROCED <> 'FACTORING' and ( b.IN_SEGMBSINI in ('002','017') ) THEN
                                     'TITU:' || b.OR_TITUSCPCB
                                WHEN b.OR_TITULARITAT NOT IN (0,9,99) THEN
                                     'TITU:' || b.OR_TITULARITAT
                                WHEN NVL(b.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                                     'NIFS:' || b.OR_NIFCIF
                                ELSE
                                     'REGI:' || b.OR_IDREG
                           END        
       AND b.OR_IDREG = Stda.OR_IDREG
       /* RMR 08/06/2020 Añadida tabla para coger el correcto factor de apoyo a PF*/
       AND b.OR_NIFCIF     = pF.OR_IDPERS (+)
       AND b.OR_NIFCIFIBM  = pF_ibm.OR_IDPERS(+)
       AND b.OR_CTACLI     = pF_ofex.OR_CTACLI(+)
       AND b.OR_NUMOFI     = pf_ofex.OR_NUMOFI(+);
       /* RMR 08/06/2020 */
     
    COMMIT;
    
    vNumErr := 3;
    
    dbms_stats.gather_table_stats('BAS_MEN','COEFICIENTE_REDUCTOR_RES', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );
    
    vNumErr := 4;
    
    MERGE /*+ full(Upd) parallel(Upd 8) parallel(coef 8)*/ 
     INTO BAS_MEN.BASILEA                  Upd
    USING BAS_MEN.COEFICIENTE_REDUCTOR_RES Sel
       ON (Upd.OR_IDREG = Sel.OR_IDREG /*AND upd.IN_TIPOREG <> 'SI'*/)  /* 17/06/2020 - NAV - TM-1947 - No aplicar el factor corrector (in_factcor) a los in_tiporeg = 'SI' */
     WHEN MATCHED THEN UPDATE
      SET Upd.IN_FACTCOR = Sel.COEFICIENTE;
      
    commit;
    
---- se calcula el factor no solo para residenciales -----    
    
   vNumErr := 5;
   
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.SUMEAD_METODO_INMUEBLES');
    
    INSERT /*+ PARALLEL (C 8)  */ INTO BAS_MEN.SUMEAD_METODO_INMUEBLES c
    SELECT 81, SUM(ead) FI_SUMEAD,T.ID_CLIENTE
     FROM (SELECT /*+  full(a) full(stda) parallel (a 8)  parallel (stda 8)*/ 
     CASE 
                       when or_entity = 8211 THEN 81
                       WHEN or_entity = 9157 THEN 9158
                       else or_entity
                  end as or_entity,
        case 
            when c.CODGAR is not null then
            OR_DISPTO
            when nvl(INMUEBLE,'?') = 'INMUEBLE' or (or_proced = 'LEASING' and OR_TIPOBJETO in (2010, 2011, 2020, 2021, 2030, 2031)) THEN
            0
            when or_entity = 9109 and  or_tipgar = 'HR' then
             0         
            else
              OR_DISPTO
        end ead,
          CASE   WHEN NVL(A.IN_GRUP_IDPER,'?') <> '?' THEN
                  'GRUP:' || A.IN_GRUP_IDPER
                 WHEN A.OR_NUMOFI IN (800,801,813,821,825) AND A.OR_TITULARITAT = 0 THEN
                  'OFEX:' || (A.OR_NUMOFI * 10000000000 + A.OR_CTACLI)
                 WHEN A.OR_ENTITY = 9109 AND NVL(A.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                  'ANDO:' || A.OR_IDPERS
                 WHEN A.OR_PERSONSCPCB IN (816,831,833) AND A.OR_PROCED <> 'FACTORING' and ( A.IN_SEGMBSINI in ('002','017') ) THEN
                  'TITU:' || A.OR_TITUSCPCB
                 WHEN A.OR_TITULARITAT NOT IN (0,9,99) THEN
                  'TITU:' || A.OR_TITULARITAT
                 WHEN NVL(A.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                  'NIFS:' || A.OR_NIFCIF
                 ELSE
                  'REGI:' || A.OR_IDREG
            END ID_CLIENTE        
      FROM BAS_MEN.BASILEA A,
               BAS_MEN.MAESTRO_FINCA_INMOBILIARIA B,
               BAS_MEN.GARANTIAS_PIGNORATIVAS C
          WHERE A.OR_TIPOFI = B.TIPOFI(+)
              AND A.OR_CODGAR = c.CODGAR(+)
              AND FI_ELIMI1 IN ('NO','TITACT2','RFNEG','SWATIT','CRSUB','BONTIT','LINLIQ','EQUITY', 'SRABS') AND A.FI_TIPEXP = 'Drawn'
              /* AND in_metode in ('AIRB', 'STDA') */
               /* 15/06/2020 Ahora la suma de la EAD solo la hace si es dispuesto */
              ) T
    GROUP BY 81, T.ID_CLIENTE; 
    
    commit;
    
    vNumErr := 6;
    
    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.COEFICIENTE_REDUCTOR');

    INSERT /*+ PARALLEL (C 8)  */ INTO BAS_MEN.COEFICIENTE_REDUCTOR C
    select /*+ full(b) full(Stda) PARALLEL (A 8) PARALLEL (B 8) parallel(Stda 8)*/ DISTINCT b.OR_IDREG, null as IN_GRUP_IDPER, IN_METODE,
           fi_sumead, IN_VTAGRU_CONS as in_VTAGRU, IN_SEGMBSINI, FI_ELIMI1, in_tiporeg,
           /* RMR 08/06/2020 Añadida para coger el correcto factor de apoyo cuando antes se hardcodeada a 1*/
            CASE WHEN IN_INDMOR IN ('SI','CT','AD') OR IN_SRATIN = 'BLQRM' then 1           	   
                WHEN (IN_METODE = 'AIRB' OR (in_metode = 'STDA' AND in_segstda in ('Empresas', 'Retail', 'RRE/CRE', 'RRE','CRE') AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo')) THEN
                     CASE WHEN pf.or_idpers      is not null and IN_SEGMBS0 = '201' AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo' then 0.75
                          WHEN pf_ibm.or_idpers  is not null and IN_SEGMBS0 = '201' AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo' then 0.75
                          WHEN pf_ofex.OR_CTACLI is not null and IN_SEGMBS0 = '201' AND Stda.IN_SEGSTDA_AUX <> 'Alto Riesgo' then 0.75
                          /* RMR 08/06/2020 */
                          WHEN (IN_SEGMBSINI IN ('003','005','006','009','010','019','027','002','017','101','102')
                            OR OR_IDECNO = 30 OR (OR_IDECNO >= 200 AND OR_IDECNO <= 300)) 
                           AND (IN_SEGMBS0 NOT IN ('201', '203', '204') OR IN_TIPOREG = 'FMX')
                           AND in_tiporeg <> 'SI'                 
                           AND IN_VTAGRU_CONS <= 50000000 THEN 
                            	 CASE when IN_METODE = 'AIRB' and substr(in_tiporeg,1,2) = 'CI' and Stda.IN_SEGSTDA_AUX = 'Alto Riesgo' then 1 -- Alto riesgo AIRB pero que era STDA, no tien factor. XCG 11/08/2021
                            	      WHEN FI_SUMEAD < 2500000 THEN 0.7619
                                    ELSE (LEAST(FI_SUMEAD,2500000)* 0.7619 + GREATEST(0,FI_SUMEAD-2500000) * 0.85)/FI_SUMEAD
                               END
                     ELSE 1
                     END         
                ELSE 1
           END AS COEFICIENTE
            /* RMR 08/06/2020 */
            ,ID_CLIENTE
      from BAS_MEN.SUMEAD_METODO_INMUEBLES a,
           BAS_MEN.basilea b,
           BAS_MEN.BASILEA_STDA Stda,
           /* RMR 08/06/2020 Añadida tabla para coger el correcto factor de apoyo a PF*/
           BAS_MEN.MAESTRO_PF_FACTOR_APOYO pf,
           BAS_MEN.MAESTRO_PF_FACTOR_APOYO pf_ibm,
           (SELECT * FROM BAS_MEN.MAESTRO_PF_FACTOR_APOYO where NVL(OR_CTACLI,0) <> 0) pf_ofex
           /* RMR 08/06/2020 */
      where a.ID_CLIENTE = CASE WHEN NVL(b.IN_GRUP_IDPER,'?') <> '?' THEN
                  'GRUP:' || b.IN_GRUP_IDPER
                 WHEN b.OR_NUMOFI IN (800,801,813,821,825) AND b.OR_TITULARITAT = 0 THEN
                  'OFEX:' || (b.OR_NUMOFI * 10000000000 + b.OR_CTACLI)
                 WHEN b.OR_ENTITY = 9109 AND NVL(b.OR_IDPERS,'?') NOT IN ('?', '00-') THEN
                  'ANDO:' || b.OR_IDPERS
                 WHEN b.OR_PERSONSCPCB IN (816,831,833) AND b.OR_PROCED <> 'FACTORING' and ( b.IN_SEGMBSINI in ('002','017') ) THEN
                  'TITU:' || b.OR_TITUSCPCB
                 WHEN b.OR_TITULARITAT NOT IN (0,9,99) THEN
                  'TITU:' || b.OR_TITULARITAT
                 WHEN NVL(b.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN
                  'NIFS:' || b.OR_NIFCIF
                 ELSE
                  'REGI:' || b.OR_IDREG
            END 
     AND b.OR_IDREG = Stda.OR_IDREG
     /* RMR 08/06/2020 Añadida tabla para coger el correcto factor de apoyo a PF*/
     AND b.OR_NIFCIF     = pF.OR_IDPERS (+)
     AND b.OR_NIFCIFIBM  = pF_ibm.OR_IDPERS(+)
     AND b.OR_CTACLI     = pF_ofex.OR_CTACLI(+)
     AND b.OR_NUMOFI     = pf_ofex.OR_NUMOFI(+);
     /* RMR 08/06/2020 */     
      
    COMMIT;
    
    vNumErr := 99;
  
    BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO', 'OK');
    commit;

EXCEPTION
    WHEN OTHERS THEN
      
      v_Msg_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM,1,255);
      
      BAS_MEN.SP_INFO_CONTROL_PROCES  (Cte_Proces, 'FINALIZADO','KO', v_Msg_Err, vNumErr);
      
      RAISE;

END;

/     

select * from sys.user_errors WHERE NAME = 'FNC_COEFICIENTE_REDUCTOR'; 


create or replace PROCEDURE  BAS_MEN.BASI_COEFICIENTE_REDUCTOR IS

   VV_TABLA       VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO      NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO      NUMBER(6);   -- Ojo con la fecha del proceso.
   VD_FECPRO      DATE;
   VV_RETORNO     VARCHAR2(2):='OK';
   
BEGIN

  COMMIT;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM) 
    INTO VN_MESPRO, VN_FECPRO
    FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
   WHERE CODCSB = '0081'
     AND CODPARM = '0001'
     AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD'); 
   
  BAS_MEN.FNC_COEFICIENTE_REDUCTOR;
  COMMIT;
  
END;    

/
--bkd40088=====================================================================================================   
Select 'bkd40088' As Compilando from dual;

create or replace PROCEDURE         BAS_MEN.CALCULO_COREPS IS

  Cte_Nom_Proceso CONSTANT BAS_MEN.CONTROL_PROCES.PROCES%TYPE              := 'P_CALCULO_COREPS';
  v_NRegs_Ins              BAS_MEN.CONTROL_PROCES.REG_INS_OK%TYPE DEFAULT 0;
  v_Mensaje_Err            VARCHAR2(255)                          DEFAULT ' ';

BEGIN

  BAS_MEN.SP_Info_Control_Proces  (Cte_Nom_Proceso, 'INICIADO');

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_PARTIAL_USE');

  INSERT INTO BAS_MEN.MAESTRO_PARTIAL_USE
      SELECT * FROM DCRPROP_MENSUAL.MAESTRO_PARTIAL_USE_SAS;

  commit;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.PARAMETROS_COREPS');

  INSERT /*+ PARALLEL (x 8) */ INTO BAS_MEN.PARAMETROS_COREPS x
  ( OR_IDREG, IN_TIPO_PYME,  C_TYPE_EXPOSURE, C_ECAI, C_SEG_STDA_CONTRAPARTE,C_CCP,C_PARTIAL_USE, ENTIDAD_ENTE, C_PAIS_FINAL ,C_NUMBER_OBL, C_SEGINI_STDA, C_SEGFIN_STDA, C_SEG_AIRB, OR_IDPAIS_INMUEBLE)
  SELECT /*+ full(bc) full(bsc) full(bac) PARALLEL (BC 8) PARALLEL (BSC 8) PARALLEL (BAC 8) PARALLEL (pais 8)*/  BC.OR_IDREG k
        ,CASE
              when BC.IN_SEGMBSINI IN ('101','102','002','017','003','005','006','009','010','019','027') THEN
                   case
                        when (IN_NUMEMP_CONS < 10 AND (IN_VTAGRU_CONS<=2000000 OR BC.IN_ACTIVO_CONS <= 2000000)) THEN 1
                        when (IN_NUMEMP_CONS <=50 AND  (IN_VTAGRU_CONS<=10000000 OR BC.IN_ACTIVO_CONS <= 10000000)) THEN 2
                        when (IN_NUMEMP_CONS <=250 AND (IN_VTAGRU_CONS<=50000000 OR BC.IN_ACTIVO_CONS <= 43000000)) THEN 3
                        ELSE 4
                   END
              ELSE
                   0
         END F_CALCULO_PYME
        ,CASE
              when FI_TIPEXP IN ('Drawn','Ajustes') THEN 1
              when (FI_TIPEXP = 'Undrawn' AND BC.FI_EPICON NOT LIKE '03002020%') OR FI_TIPEXP = 'OffBalance' THEN 2
              when FI_TIPEXP = 'Repos' THEN 3
              when (FI_TIPEXP = 'Undrawn' AND BC.FI_EPICON LIKE '03002020%') OR FI_TIPEXP = 'OTC' THEN 4
              ELSE 0
         END F_CALCULO_TYPE_EXPOSURE
        ,Case
            --when FI_POSPRESTDA IS NULL AND FI_POSPOSTSTDA IS NULL THEN
            --WHEN BSC.IN_SEGSTDA_INI = BSC.IN_SEGSTDA THEN  /* RMR 20/05/2020 */
              WHEN ROUND(BSC.FI_POSPRESTDA_INI, 2) = ROUND(BSC.FI_RWASTDA, 2) THEN /* RMR 14/05/2020  */
                   CASE
                        when BSC.IN_SEGSTDA = 'Soberanos' THEN
                             case
                                  when BC.IN_SEGMBSINI IN ('036','037') AND NVL(IN_RATSOB,'?') not IN ('NR','SR', '?') THEN
                                       1
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'A.R y Corp.Locales' THEN
                             case
                                  when BC.IN_SEGMBSINI IN ('001', '004') THEN
                                       case
                                            when DECODE(MPUE.OR_IDPAIS,NULL,'N','S') = 'N' AND DECODE (MPNUE.OR_IDPAIS,NULL,'N','S') = 'N' THEN
                                                 case
                                                      when NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                           1
                                                      when NVL(IN_RATSOB,'?') NOT IN ('NR','SR', '?') THEN
                                                                2
                                                      ELSE
                                                           0
                                                 END
                                            ELSE
                                                 0
                                       END
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'Ent.SP/Ot.Inst' THEN
                             CASE
                                  WHEN BC.IN_SEGMBSINI IN ('024', '025') THEN
                                       case
                                            when OR_VidIni > 90 AND DECODE(MPUE.OR_IDPAIS,NULL,'N','S') = 'N' AND DECODE (MPNUE.OR_IDPAIS,NULL,'N','S') = 'N' THEN
                                                 case
                                                      when NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                           1
                                                      when NVL(IN_RATSOB,'?') NOT IN ('NR','SR', '?') THEN
                                                           2
                                                      ELSE
                                                           0
                                                 END
                                            ELSE
                                                 0
                                       END
                                  WHEN BC.IN_SEGMBSINI IN ('033', '038', '039', '040') THEN
                                       case
                                            when OR_VidIni > 90 THEN
                                                 case
                                                      when NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                           1
                                                      when NVL(IN_RATSOB,'?') NOT IN ('NR','SR', '?') THEN
                                                           2
                                                      ELSE
                                                           0
                                                 END
                                            ELSE
                                                 0
                                       END

                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'BMultides' THEN
                             case
                                  when BC.IN_SEGMBSINI IN ('021') THEN
                                       case
                                            when NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                 1
                                            when NVL(IN_RATSOB,'?') NOT IN ('NR','SR', '?') THEN
                                                 2
                                            ELSE
                                                 0
                                       END
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'Instituciones' THEN
                             case
                                  when BC.IN_SEGMBSINI IN ('007', '018', '028') THEN
                                       case
                                            when OR_VidRes <= 90 AND (DECODE(MPUE.OR_IDPAIS,NULL,'N','S') = 'S' OR DECODE (MPNUE.OR_IDPAIS,NULL,'N','S') = 'S') THEN
                                                 0
                                            when NVL(IN_RATEXT_ISIN,'?') NOT IN ('NR','SR', '?') OR NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                 1
                                            when NVL(IN_RATSOB,'?') NOT IN ('NR','SR', '?') THEN
                                                 2
                                            ELSE
                                                 0
                                       END
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'Empresas' THEN
                             CASE
                                  WHEN NVL(IN_RATEXT_ISIN,'?') NOT IN ('NR','SR', '?') OR NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                       1
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'Bonos Garantizados' THEN
                             CASE
                                  WHEN BC.IN_SEGMBSINI IN ('034') THEN
                                       CASE
                                            WHEN NVL(IN_RATEXT_ISIN,'?') NOT IN ('NR','SR', '?') OR NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                 1
                                            WHEN NVL(IN_RATSOB,'?') NOT IN ('NR','SR', '?') THEN
                                                 2
                                            ELSE
                                                 0
                                       END
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'Interbancario_CP' THEN -- Pdte de definir cual es el correcto. si Interbancario_CP o Interbancario C/P
                             case
                                  when BC.IN_SEGMBSINI = 'XX4' THEN
                                       1
                                  ELSE
                                       0
                             END
                        WHEN BSC.IN_SEGSTDA = 'IIC' THEN
                             case
                                  when BC.IN_SEGMBSINI IN ('009') THEN
                                       case
                                            when NVL(IN_RATEXT_ISIN,'?') NOT IN ('NR','SR', '?') OR NVL(IN_RATEXT,'?') NOT IN ('NR','SR', '?') THEN
                                                 1
                                            ELSE
                                                 0
                                       END
                                  ELSE
                                       0
                             END

                        ELSE
                             0
                   END
              when BSC.IN_SEGSTDA = 'Empresas' AND NVL(IN_RATEXTAVA2,'?') NOT IN ('NR','SR', '?') THEN
                   1
              ELSE
                   0
         END F_CALCULO_ECAI
        ,CASE
              when BSC.IN_SEGSTDA_INI IN ('CRE','RRE') THEN
                   case
                        when BC.IN_SEGMBSINI IN ('008','035','036','037') THEN 'Soberanos'
                        when BC.IN_SEGMBSINI IN ('001','004','030') THEN 'A.R y Corp.Locales'
                        when BC.IN_SEGMBSINI IN ('022','023','024','025','031','033','038','039','040') THEN 'Ent.SP/Ot.Inst'
                        when BC.IN_SEGMBSINI IN ('007','018','028') THEN 'Instituciones'
                        when BC.IN_SEGMBSINI IN ('011','012','013','014','015','016','XXX') THEN 'Otros Activos'
                        when (BSC.IN_SEGMBS1 = '500' AND BC.IN_SEGMBSINI IN ('003','005','006','009','010','019','027')) OR (BC.IN_SEGBS = 'Empresas' AND BSC.IN_SEGMBS1 = '?') THEN 'Empresas'
                        when BC.IN_SEGMBSINI = '?' THEN '?'  /* FMRR -- 25/01/2021*/
                        ELSE 'Retail'
                   END
              ELSE
                   IN_SEGSTDA_INI
         END F_CALCULO_SEGSTDA_CONTRAPARTE
        ,NVL(BSC.C_CCP, 0)
        ,case
              when BC.IN_SEGMBSINI = '?' THEN 0
              when BC.IN_SEGMBS IN ('Real Estate', 'Object Finance') THEN 2
              when (BC.IN_SEGMBSINI IN ('001','004','008','011','012','013','014','015','016','022','023','024','025','026','030','031','032','033','035','036','037','038','039','040','XXX','041','042','043','044')
                   OR BC.OR_ENTITY NOT IN (81, 8211)
                   OR SUBSTR(IN_TIPOREG,1,2) = 'CE'
                 --OR (IN_METODE = 'STDA' AND OR_CODGAR IN ('GR 12110','GR 12111','GR 12305','GR 21104','GE 21109','EXP21109','EXP21110') AND FI_POSPRESTDA IS NOT NULL AND FI_POSPOSTSTDA IS NOT NULL)) THEN 2
                 --OR (IN_METODE = 'STDA' AND OR_CODGAR IN ('GR 12110','GR 12111','GR 12305','GR 21104','GE 21109','EXP21109','EXP21110') AND BSC.IN_SEGSTDA_INI <> BSC.IN_SEGSTDA)) THEN 2/* RMR 20/04/2020  */
                   OR (IN_METODE = 'STDA' AND OR_CODGAR IN ('GR 12110','GR 12111','GR 12305','GR 21104','GE 21109','EXP21109','EXP21110') AND ROUND(BSC.FI_POSPRESTDA_INI, 2) <> ROUND(BSC.FI_RWASTDA, 2) )) THEN 2/* RMR 14/05/2020  */
              when nvl(APLICA_ROLL_OUT, 'NO') = 'SI' AND nvl(CLIENTES_COMUNES, 'NO') = 'SI' THEN 1
              ELSE
                   0
         END F_CALCULO_PARTIAL_USE
        ,NVL(BAC.ENTIDAD_ENTE,0)
        /* 26/07/2021 Cambiado cálculo del campo para hacerse como el de COREPs */
        --,BC.OR_IDPAIS AS F_C_PAIS_FINAL
        , CASE WHEN PA.CODI_NUM_PAIS IS NULL THEN
							          CASE
							            WHEN BC.OR_IDPAIS BETWEEN 3000 AND 3999 THEN 921
							            WHEN BC.OR_ENTITY IN (81,9090) THEN 724
							            WHEN BC.OR_ENTITY IN (9156,9220,9219) THEN 840
							            WHEN BC.OR_ENTITY = 9108 THEN 192
							            WHEN BC.OR_ENTITY IN (9109,9208) THEN 20
							            WHEN BC.OR_ENTITY = 9120 THEN 44
							            WHEN BC.OR_ENTITY IN (9157,9158) THEN 484
							            ELSE 724
							          END
							 ELSE BC.OR_IDPAIS
	         END AS F_C_PAIS_FINAL
          --BC.OR_IDPAIS = PA.CODI_NUM_PAIS
        ,case
              when BC.in_segmbsini in ('007', '018', '021', '028', '029', '034') then
                   'D'
              when in_segmbs0 = '201' then
                   'H'
              when bac.in_segairb IN ('SME','SME-CC') then
                   'E'
              when bac.in_segairb in ('Emp/Sob/EEFF','Emp/Sob/EEFF-CC') then
                   'I'
              when BaC.in_segairb = 'Préstamos Hipotecarios' then
                    case
                         when BC.in_segmbs1 = '501' then
                              'K'
                         else
                              'L'
                    end
              when BaC.in_segairb = 'Tarjetas Crédito' then
                   'M'
              when BAC.in_segairb = 'Otro Retail' then
                   case
                        when BC.in_segmbs1 = '501' then
                             'N'
                        else
                             'P'
                    end
         end
         ||
         case
               when FI_PD_COREPS = 1 then
                    '1'
               ELSE
                    '0'
         end
         ||
         case
              when IN_TIPOREG IN ('MMOXE', 'MMPX', 'OX', 'OXE', 'PX', 'RX') THEN
                   TO_CHAR(OR_NUMOFI)||TO_CHAR(OR_CTACLI)
              when SUBSTR(OR_TIPOPE,1,5) = 'RF' AND OR_PROCED <> 'TES-INTERM' THEN -- 01/08/2016 la RF se identifica por tipo de operación.
                   CASE
                        WHEN BC.OR_COISIN  NOT IN  ('?',',') THEN
                             TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||OR_COISIN
                        WHEN BC.OR_NIFCIF <> '?' THEN
                             TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||BC.OR_NIFCIF
                        ELSE
                             IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                   END
              when IN_TIPOREG IN ('FFD','REN') THEN
                   CASE
                        WHEN NVL(BC.OR_NIFCIF,0) = '0' OR BC.OR_NIFCIF='?' THEN
                             CASE
                                  WHEN NVL(OR_COISIN,0) = '0' OR OR_COISIN ='?' THEN
                                       CASE
                                            WHEN NVL(OR_REFOPE,0)  = 0 THEN
                                                 IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                                            ELSE
                                                 decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY)||OR_REFOPE
                                       END
                                  ELSE
                                       TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||OR_COISIN
                             END
                        ELSE
                             TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||BC.OR_NIFCIF
                   END
              when IN_TIPOREG = 'FA' THEN
                   CASE
                        WHEN NVL(OR_IDPERS,'00-') = '00-' OR OR_IDPERS = '?' THEN
                             CASE
                                  WHEN NVL(OR_COISIN,0) = '0' OR OR_COISIN ='?' THEN
                                       CASE
                                            WHEN NVL(OR_REFOPE,0) = 0 THEN
                                                 IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                                         ELSE
                                              TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||OR_REFOPE
                                       END
                                  ELSE
                                       TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||OR_COISIN
                             END
                        ELSE
                             TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY))||OR_IDPERS
                   END
              when IN_TIPOREG IN ('IIR', 'IIU', 'IIG') AND OR_REFOPE IS NOT NULL AND OR_REFOPE <> 0
                   AND (substr(BC.fi_epicon,1,5) = '01010' or substr(BC.fi_epicon,1,7) in ('0101301', '0101405') or substr(BC.fi_epicon,1,9) = '010140601') THEN
                          TO_CHAR(OR_REFOPE)
              when IN_TIPOREG = 'SI' AND OR_REFOPE IS NOT NULL AND OR_REFOPE <> 0
                   AND (substr(BC.fi_epicon,1,5) = '01010' or substr(BC.fi_epicon,1,7) in ('0101301', '0101405') or substr(BC.fi_epicon,1,9) = '010140601')
                   AND BC.OR_ENTITY IN (81,8211) THEN
                       TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY)||OR_REFOPE)
              when IN_SEGMBS0 IN ('201','203','204') THEN
                   BC.OR_NIFCIF
              when BC.IN_SEGMBSINI IN ('007','018','021','028','029') THEN
                   CASE
                        WHEN BC.OR_CODIGO_BIC <> '?' AND BC.OR_CODIGO_BIC IS NOT NULL AND BC.OR_CODIGO_BIC <> '97-' THEN
                             BC.OR_CODIGO_BIC
                        WHEN BC.OR_CODIGO_BIC ='?' AND BC.OR_NIFCIFIBM NOT IN ('?','97-' , NULL)    THEN
                             OR_NIFCIFIBM
                        WHEN OR_NIFCIFIBM  IN ('?','97-' , NULL) THEN
                             IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                        ELSE
                             OR_NIFCIFIBM
                   END
              when BC.IN_SEGMBSINI = '034' AND IN_SRATIN <> 'CEDM' THEN
                   CASE
                        WHEN BC.OR_CODIGO_BIC <> '?' AND BC.OR_CODIGO_BIC IS NOT NULL AND BC.OR_CODIGO_BIC <> '97-' THEN
                             BC.OR_CODIGO_BIC
                        WHEN BC.OR_CODIGO_BIC = '?' AND OR_NIFCIFIBM NOT IN ('?','97-' , NULL) THEN
                             OR_NIFCIFIBM
                        WHEN OR_NIFCIFIBM  IN ('?','97-' , NULL) THEN
                             IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                        ELSE
                             OR_NIFCIFIBM
                   END
              when BC.IN_SEGMBSINI = '034' AND IN_SRATIN = 'CEDM' AND OR_COISIN <> '?' AND OR_COISIN IS NOT NULL THEN
                   OR_COISIN
              when BC.IN_SEGMBSINI IN('001','003','004','005','006','008','009','010','011','012','013','014','015','016','019','022','023','024','025','026','027','030','031','032','033','035','036','037','038','039','040','020','041')
                   AND (IN_TIPOREG  IN ('AJ', 'AJ2', 'AJ8', 'CERENTVA' , 'CESA' , 'CESA2','CESA8','IN', 'IN2','IN8', 'MMOXC','MMSA','MMSA2','MMSA8','OXC','SA','SA2','SA8','DN','RN', 'MMRN', 'AVSA', 'MMSA', 'IIC-LTA', 'IIC-FBA')) /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                   AND BC.IN_OPER_MIGR NOT IN ('BCG','LBI','BMN') AND BC.OR_ENTITY IN (8211, 81) THEN
                   CASE
                        WHEN BC.OR_TITULARITAT <> 0 THEN
                             '81'||TO_CHAR(BC.OR_TITULARITAT)
                        WHEN BC.OR_TITULARITAT = 0 AND BC.OR_NIFCIF <> '?' THEN
                             '81'||BC.OR_NIFCIF
                        ELSE
                             IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                   END
              when BC.IN_SEGMBSINI IN('001','003','004','005','006','008','009','010','011','012','013','014','015','016','019','022','023','024','025','026','027','030','031','032','033','035','036','037','038','039','040','020','041')
                   AND (IN_TIPOREG IN ('AJ', 'AJ2','AJ8', 'CERENTVA' , 'CESA', 'CESA2','CESA8','IN', 'IN2','IN8', 'MMOXC','MMSA','MMSA2','MMSA8','OXC','SA','SA2','SA8','DN','RN', 'MMRN', 'AVSA', 'MMSA', 'IIC-LTA', 'IIC-FBA')) /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                   AND BC.IN_OPER_MIGR IN ('BCG','LBI','BMN') THEN
                       CASE
                            WHEN BC.OR_TITULARITAT <> 0 THEN
                                 BC.IN_OPER_MIGR||TO_CHAR(BC.OR_TITULARITAT)
                            WHEN BC.OR_TITULARITAT = 0 AND BC.OR_NIFCIF <> '?' THEN
                                 BC.IN_OPER_MIGR||BC.OR_NIFCIF
                            ELSE
                                 IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                       END
              when BC.IN_SEGMBSINI IN ('002','017','101','102') AND IN_TIPOREG IN ('AJ', 'AJ2', 'AJ8', 'CERENTVA','CESA' , 'CESA2', 'CESA8','IN', 'IN2','IN8','MMOXC','MMSA','MMSA2','MMSA8','OXC','SA', 'SA2','SA8', 'AVSA', 'MMSA', 'IIC-LTA', 'IIC-FBA') --NAV 18/07/2019 - Añadido - 'AVSA', 'MMSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                   AND BC.IN_OPER_MIGR NOT IN ('BCG','LBI','BMN') AND BC.OR_ENTITY IN (8211, 81) THEN
                       CASE
                          WHEN NVL(OR_TITUSCPCB,0) =  0 THEN
                               CASE
                                    WHEN NVL(BC.OR_TITULARITAT,0) = 0 THEN
                                        CASE
                                             WHEN BC.OR_NIFCIF  ='?' THEN
                                                  IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                                              ELSE
                                                   TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY)||BC.OR_NIFCIF)
                                        END
                                    ELSE
                                         TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY)||BC.OR_TITULARITAT)
                               END
                          ELSE
                               TO_CHAR(decode(BC.OR_ENTITY,8211, 81, BC.OR_ENTITY)||OR_TITUSCPCB)
                       END
              when BC.IN_SEGMBSINI IN ('002','017','101','102') AND IN_TIPOREG IN ('AJ', 'AJ2', 'AJ8', 'CERENTVA','CESA' , 'CESA2', 'CESA8','IN', 'IN2','IN8','MMOXC','MMSA','MMSA2','MMSA8','OXC','SA','SA2','SA8', 'AVSA', 'MMSA', 'IIC-LTA', 'IIC-FBA') --NAV 18/07/2019 - Añadido - 'AVSA', 'MMSA' /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                   AND BC.IN_OPER_MIGR IN ('BCG','LBI','BMN') AND BC.OR_ENTITY IN (8211, 81) THEN
                       CASE
                            WHEN NVL(OR_TITUSCPCB,0) =  0 THEN
                                 CASE
                                      WHEN NVL(BC.OR_TITULARITAT,0) = 0 THEN
                                           CASE
                                                WHEN BC.OR_NIFCIF = '?' THEN
                                                     IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                                                ELSE
                                                     BC.IN_OPER_MIGR||BC.OR_NIFCIF
                                           END
                                      ELSE
                                           BC.IN_OPER_MIGR||TO_CHAR(BC.OR_TITULARITAT)
                                 END
                            ELSE
                                 BC.IN_OPER_MIGR||TO_CHAR(OR_TITUSCPCB)
                       END
              when BC.IN_SEGMBSINI IN ('103','104') AND IN_TIPOREG IN ('AJ', 'AJ2', 'AJ8', 'CERENTVA','CESA' , 'CESA2' , 'CESA8','IN', 'IN2','IN8','MMOXC','MMSA','MMSA2','MMSA8','OXC','SA','SA2','SA8', 'AVSA', 'MMSA', 'IIC-LTA', 'IIC-FBA') THEN /* RMR 1/07/2021 - Añadido - 'IIC-LTA', 'IIC-FBA' */
                   OR_CLUNIENT||OR_CLUNIPROD||TO_CHAR(OR_REFOPE)
              when BC.IN_SEGMBSINI IN ('106','107') THEN
                   CASE
                        WHEN OR_CLUNICONTR NOT IN (0,999999999999999) THEN
                             TO_CHAR(OR_CLUNIENT)||OR_CLUNIPROD||TO_CHAR(OR_CLUNICONTR)
                        WHEN OR_CLUNICONTR IN (0,999999999999999) THEN
                             CASE
                                WHEN OR_REFOPE <> 0 THEN
                                     TO_CHAR(OR_CLUNIENT)||OR_CLUNIPROD||TO_CHAR(OR_REFOPE)
                                WHEN NVL(BC.OR_NIFCIF,'?') <> '?' THEN
                                     OR_CLUNIENT||OR_CLUNIPROD||BC.OR_NIFCIF
                                ELSE
                                     IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                             END
                        ELSE
                             IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
                   END
              ELSE
                   IN_TIPOREG||TO_CHAR(BC.OR_IDREG)
         END F_C_NUMBER_OBL
        ,case
              when In_SegSTDA_Aux = 'Morosos' THEN
                     In_SegSTDA_Aux
              when In_SegSTDA_Ini IN ('RRE','CRE') THEN 'RRE/CRE'
              ELSE In_SegSTDA_Ini
         END F_C_SegIni_Stda
        ,case
            --when BSC.In_SegSTDA_Aux = 'Morosos' AND NVL(FI_PosPostSTDA,0) = NVL(FI_PosPreSTDA,0) THEN In_SegSTDA_Aux
            --WHEN BSC.In_SegSTDA_Aux = 'Morosos' AND BSC.IN_SEGSTDA_INI = BSC.IN_SEGSTDA THEN In_SegSTDA_Aux /* RMR 20/04/2020  */
              WHEN BSC.In_SegSTDA_Aux = 'Morosos' AND ROUND(BSC.FI_POSPRESTDA_INI, 2) = ROUND(BSC.FI_RWASTDA, 2) THEN In_SegSTDA_Aux /* RMR 14/05/2020  */
              when BSC.In_SegSTDA IN ('RRE','CRE') THEN 'RRE/CRE'
              ELSE
                   BSC.In_SegStda
         END F_C_SegFin_Stda
        ,case
              when bc.In_SegmBSIni  IN ('007', '018', '021', '028', '029', '034') THEN
                   '006- Institutions'
              when bc.In_SegmBS0  = '201'                                      THEN
                   '010- Corporate - Specialised lending'
              when bac.In_SegAIRB IN ('SME','SME-CC')                           THEN
                   '007- Corporate - SME'
              when bac.In_SegAIRB IN ('Emp/Sob/EEFF','Emp/Sob/EEFF-CC')         THEN
                   '011- Corporate - Other'
              when bac.In_SegAIRB = 'Préstamos Hipotecarios' THEN
                   case
                        when BC.In_SegmBS1  = '501' THEN
                             '013- Retail secured by IP SME'
                        ELSE
                             '014- Retail secured by IP no SME'
                   END
              when bac.In_SegAIRB  = 'Tarjetas Crédito'  THEN
                   '015- Retail Qualifying revolving'
              when BAC.In_SegAIRB  = 'Otro Retail' THEN
                   case
                        when BC.In_SegmBS1 = '501' THEN
                             '016- Retail - Other SME'
                        ELSE
                             '017- Retail - Other no SME'
                   END
             ELSE
                  '?'
         END F_C_Seg_Airb
        ,pais.ID_PAIS_NUM as OR_IDPAIS_INMUEBLE
    FROM (select /*+ parallel (a 8) */ a.*, MS.IN_SEGBS
            from BAS_MEN.BASILEA a,
                 BAS_MEN.MAESTRO_SEGMENTOS MS
           where a.IN_SEGMBSINI = MS.IN_SEGMBSINI(+)) BC
       , BAS_MEN.BASILEA_STDA BSC
       , BAS_MEN.BASILEA_AIRB BAC
       , BAS_MEN.MAESTRO_CONTRAPARTES MC
       , BAS_MEN.MAESTRO_CUENTAS_CONT_DEPOS MDEP
       , BAS_MEN.MAESTRO_PAISES_UE_DIVISA MPUE
       , BAS_MEN.MAESTRO_PAISES_NOUE_DIVISA MPNUE
       , BAS_MEN.BS_BK_PAIS_GARANTIA pais
       , BAS_MEN.MAESTRO_PARTIAL_USE P_USE
       , (SELECT CODI_NUM_PAIS 
            FROM BAS_MEN.MAESTRO_SOBERANOS 
           GROUP BY CODI_NUM_PAIS) pa
   WHERE BC.OR_IDREG=BSC.OR_IDREG(+)
    AND BC.OR_IDREG=BAC.OR_IDREG(+)
    AND BC.OR_NIFCIF=MC.OR_NIFCIF(+)
    AND BC.OR_ENTITY=MDEP.OR_ENTITY(+)
    AND BC.OR_CTAIND=MDEP.OR_CTAIND(+)
    AND BC.OR_DIVISA = MPUE.OR_DIVISA (+)
    AND BC.OR_IDPAIS = MPUE.OR_IDPAIS (+)
    AND BC.OR_DIVISA = MPNUE.OR_DIVISA (+)
    AND BC.OR_IDPAIS = MPNUE.OR_IDPAIS (+)
    AND BC.OR_CLUNICONTR              = pais.CODCONAC(+)
    AND BC.OR_CONTRATO_GARANTIA = pais.CODCONTRAT(+)
    AND CASE
             when BC.OR_ENTITY IN (81,8211) THEN
                  case
                       when BC.IN_SEGMBSINI = '107' AND IN_SUCEPT LIKE 'TA%' THEN
                            'Tarjetas Crédito Comp' -- 'Tarjetas Crédito Comp
                       when BC.IN_SEGMBSINI = '106' AND IN_SUCEPT LIKE 'TA%' THEN
                            'Resto Minorista Comp TA' --'Resto Minorista Comp TA'
                       when BC.IN_SEGMBSINI = '106' AND IN_SUCEPT LIKE 'KT%' THEN
                            'Resto Minorista Comp KT' --'Resto Minorista Comp KT'
                       when BC.IN_SEGMBS0 = '202' then
                            BC.IN_SEGBS
                       ELSE
                            BC.IN_SEGMBS
                  END
             ELSE
                  BC.IN_SEGMBS
        END = P_USE.IN_SEGMBS(+)
    AND BC.IN_OPER_MIGR= P_USE.IN_OPER_MIGR(+)
    AND BC.OR_IDPAIS = PA.CODI_NUM_PAIS(+);

  v_NRegs_Ins := SQL%ROWCOUNT;

  COMMIT;

  BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proceso, 'FINALIZADO', 'OK', NULL, NULL, v_NRegs_Ins);

EXCEPTION
   WHEN OTHERS THEN
    --
    --      Actualización del Control del Proceso.
    --
    v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM,1,255);

    ROLLBACK;

    BAS_MEN.SP_Info_Control_Proces (Cte_Nom_Proceso, 'FINALIZADO', 'KO', v_Mensaje_Err);

    RAISE;

  END;

/


create or replace PROCEDURE        BAS_MEN.BASI_CALCULO_COREPS IS

   VV_TABLA       VARCHAR2(200):= 'BAS_MEN.BASILEA';
   VN_FECPRO      NUMBER(8);   -- Ojo con la fecha del proceso.
   VN_MESPRO      NUMBER(6);   -- Ojo con la fecha del proceso.
   VD_FECPRO      DATE;
   VV_RETORNO     VARCHAR2(2):='OK';

BEGIN

  COMMIT;

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  SELECT TO_NUMBER(SUBSTR(VALPARM,1,6)), TO_NUMBER(VALPARM)
    INTO VN_MESPRO, VN_FECPRO
      FROM BAS_MEN.PARAMETROS_PROCESO --Asegurarse de haber modificado la fecha de proceso al actual--
     WHERE CODCSB = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

  VD_FECPRO:= TO_DATE(VN_FECPRO,'YYYYMMDD');

  BAS_MEN.CALCULO_COREPS;
  COMMIT;

END;


/
--bkd40155=====================================================================================================
Select 'bkd40155 - UPDATE BASILEA_FINAL' As Compilando from dual;

create or replace PROCEDURE BAS_MEN.UPDATE_PROCESO (PROCESO IN VARCHAR2)
IS

/**************************************************************************************************/
/*    PROCEDIMIENTO UTILIZADO PARA REALIZAR ACTUALIZACIONES DE REGISTROS EN BAS_MEN.BASILEA       */
/**************************************************************************************************/
/*      BACKUP registros originales   en Basilea: BAS_MEN.UPDATE_DESCARTES_BASILEA                */
/*      BACKUP registros actualizados en Basilea: BAS_MEN.UPDATES_BASILEA                         */
/*      TABLAS de updates de usuario  en Basilea:                                                 */
/*                                        FILTRO: DCRPROP_MENSUAL.UPDATE_BASILEA_FILTRO_XX_SAS    */
/*                                      SEGMENTO: DCRPROP_MENSUAL.UPDATE_BASILEA_SEGMENTO_XX_SAS  */
/*                                           EAD: DCRPROP_MENSUAL.UPDATE_BASILEA_EAD_XX_SAS       */
/*                                       PRE_MET: DCRPROP_MENSUAL.UPDATE_BASILEA_PRE_MET_XX_SAS   */
/*                                       PRE_COR: DCRPROP_MENSUAL.UPDATE_BASILEA_PRE_COR_XX_SAS   */
/*                                         FINAL: DCRPROP_MENSUAL.UPDATE_BASILEA_FINAL_XX_SAS     */
/**************************************************************************************************/
    --
    -- Variables del proceso principal.
    --
    In_Tabla_Orig           VARCHAR2(30)            DEFAULT '';
    In_Num_Update           VARCHAR2(2)             DEFAULT '';
    In_Motivo_Update        VARCHAR2(40)            DEFAULT '';
    Cte_Proces              VARCHAR2(256)           DEFAULT '';
    v_NumErr                NUMBER(2)               DEFAULT 1;
    v_RegIns                NUMBER                  DEFAULT 0;
    v_RegUpd                NUMBER                  DEFAULT 0;
    v_Fin_Proc              VARCHAR2(2)             DEFAULT 'OK';
    v_Mensaje_Err           VARCHAR2(256)           DEFAULT '';
    v_Retorno               VARCHAR(256)            DEFAULT '';
    In_Schema_Orig          VARCHAR2(80)            DEFAULT 'DCRPROP_MENSUAL';
    v_Tabla_Orig            VARCHAR2(80)            DEFAULT '';
    v_Tabla_Base            VARCHAR2(80)            DEFAULT 'BAS_MEN.BASILEA';
    v_Sentencia_Dinamica    VARCHAR2(3000)          DEFAULT '';

    ncount                  NUMBER                  DEFAULT 0;
    TABLA_SAS               VARCHAR2(30)            DEFAULT '';

    CURSOR Cursor_Update IS
        SELECT TABLA, EN_PROCESO
          FROM DCRPROP_MENSUAL.TABLAS_UPDATE_USUARIO
          where EN_PROCESO = PROCESO
        order by TABLA;

BEGIN

    v_NumErr := 0;

    ROLLBACK;
    -- Cierre de cualquier tx abierta.
    EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML'); -- Habilitación paralelismo.


    FOR C_UPD IN Cursor_Update LOOP
        --
        In_Tabla_Orig := C_UPD.TABLA;
        --
        Cte_Proces          := 'UPDATE PROCESO Tabla_Orig: '|| In_Tabla_Orig;
        v_Tabla_Orig        := In_Schema_Orig||'.'||In_Tabla_Orig;
        --
        -- Información de Inicio en Control del Proceso.
        --
        v_NumErr := 1;
        INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
        VALUES (Cte_Proces, SYSDATE, 'INICIADO');
        COMMIT;

        --
        -- Insersión en tabla de descartes
        --
        v_Numerr := 2;
        v_Sentencia_dinamica := 'INSERT /*+ APPEND */ INTO BAS_MEN.UPDATE_DESCARTES_BASILEA SELECT /*+ FULL(A) PARALLEL (A 4)*/ ''' ||  v_Tabla_Orig   || ''' ,sysdate, A.*  FROM '||v_Tabla_Base||' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Eliminación de registros en Basilea.
        --
        v_Numerr := 3;
        --
        v_Sentencia_dinamica := 'DELETE /*+ PARALLEL (A 8)*/ ' || v_Tabla_Base || ' A WHERE OR_IDREG IN (SELECT OR_IDREG FROM '||v_Tabla_Orig||')';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Insersión de registros en Basilea.
        --
        v_Numerr := 4;
        v_Sentencia_dinamica := 'INSERT /*+ FULL(A) PARALLEL (A 8)*/ INTO ' ||v_Tabla_Base || ' A SELECT * FROM ' || v_Tabla_Orig;
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        v_RegIns := SQL%ROWCOUNT;
        --
        COMMIT;
        --
        -- Insercción de registros de la SAS origen en tabla final.
        --
        v_Numerr := 7;
        --
        v_Sentencia_dinamica := 'INSERT /* + APPEND */ INTO BAS_MEN.UPDATES_BASILEA SELECT /*+ PARALLEL (A 8) */ ''' ||  v_Tabla_Orig   || ''' AS TABLA_ORIGEN ,sysdate, A.*  FROM '||v_Tabla_Base||' A, '||v_Tabla_Orig||' B WHERE A.OR_IDREG = B.OR_IDREG';
        EXECUTE IMMEDIATE v_Sentencia_dinamica;
        --
        COMMIT;
        --
        -- Actualización del Control del Proceso.
        --
        v_Numerr := 10;
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
           , DATA_FIN    = SYSDATE
           , FINALITZAT  = v_Fin_Proc
           , REG_INS_OK  = v_RegIns
           , ERROR_ORAC  = v_Mensaje_Err
         WHERE PROCES  = Cte_Proces
           AND ESTAT   = 'INICIADO';
        COMMIT;
        --
    END LOOP;

 EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        --
        v_Fin_Proc   := 'KO';
        v_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||SQLERRM||' en '||v_Numerr,1,255);
        --
        --      Actualización del Control del Proceso.
        --
        UPDATE BAS_MEN.CONTROL_PROCES
           SET ESTAT       = 'FINALIZADO'
             , DATA_FIN    = SYSDATE
             , FINALITZAT  = v_Fin_Proc
             , ERROR_ORAC  = v_Mensaje_Err
             , ERROR_PROG  = SUBSTR('* NUMERR: '||v_NumErr,1,255)
             , NUM_ERROR   = v_NumErr
          WHERE PROCES  = Cte_Proces
            AND ESTAT   = 'INICIADO';

        COMMIT;
        RAISE;
END;

/

select * from sys.user_errors WHERE NAME = 'UPDATE_PROCESO';
  
--bkd40075=====================================================================================================
Select 'bkd40075' As Compilando from dual;

CREATE OR REPLACE PROCEDURE BAS_MEN.FNC_FUSIONADA_COREP (  In_Fecha_Proceso IN NUMBER ) IS

--------------------------------------------------------------------------------------------
-- DEFINICION DE VARIABLES
--------------------------------------------------------------------------------------------
  VV_TABLA                       CONSTANT VARCHAR2(50)  := 'BAS_MEN.BASILEA_FUSIONADA_COREP';
  Cte_Nom_Procedure              CONSTANT VARCHAR2(75)  := 'FNC_FUSIONADA_COREP ' || VV_TABLA || ' ' || In_Fecha_Proceso;
  vn_numerr          number (4);
  vv_rowcount        integer;
  VV_MENSAJE_ERR     varchar2(255);
  VV_ROWID           number(10);
  vv_count           number(9);
  VN_MesPro_AAAAMM   NUMBER(6):= In_Fecha_Proceso;



  v_IN_UPDATE       VARCHAR2(255);
  v_EAD             VARCHAR2(30);
  v_filtro          VARCHAR2(30);
  v_PRE_MET         VARCHAR2(30);
  v_SEGMENTO        VARCHAR2(30);
  v_LGD             VARCHAR2(30);
  v_PD              VARCHAR2(30);
  v_AIRB            VARCHAR2(30);
  v_STDA            VARCHAR2(30);

  c2            sys_refcursor;

  type result_rec is record(
    or_idreg NUMBER(12,0)
  );

  l_result_rec result_rec;

BEGIN

  vv_count := 0;
  VN_NUMERR:= 2;

  INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
  VALUES (Cte_Nom_Procedure, SYSDATE, 'INICIADO');

  COMMIT;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.relacion_idregs');

  commit;

 insert into BAS_MEN.relacion_idregs
  select OR_IDREG_ORI, OR_IDREG_NEW, VN_MESPRO_AAAAMM, 'OFEX'
    from BAS_MEN.OFEX_T24_REG_INSERTADOS_BDD
    where IND_ACCION = 'INSERTA NUEVO'
  union
  select IDREG_BASILEA, IDREG, VN_MESPRO_AAAAMM, 'CRED DOC'
    from BAS_MEN.BASILEA_CRED_DOC_AUX
  union
  select IDREG_BASILEA, IDREG, VN_MESPRO_AAAAMM,  'CRED CARIBE'
    from BAS_MEN.BASILEA_CRED_CARIBE_AUX
  union
  select OR_IDREG, IDREG_NEW, VN_MESPRO_AAAAMM, 'ACCBS'
    from BAS_MEN.MAESTRO_ACCIONES_BS_AUX
  union
  select OR_IDREG_ORI,OR_IDREG as OR_IDREG_NEW,null as OR_IDMES,'EAD_REPOS' as ORIGEN
    from BAS_MEN.basilea_repos
  union
  select OR_IDREG_ORI,OR_IDREG as OR_IDREG_NEW,null as OR_IDMES,'EAD_DN'
    from BAS_MEN.BASILEA_DERIVADOS_CONTRAPARTE
  union /* 02/07/2020 - NAV - Añadimos el nuevo FI_ELIMI(STSORI) del proceso titulizaciones sintéticas */
  select OR_IDREG, IDREG_NEW, VN_MESPRO_AAAAMM, 'STSORI'
    from BAS_MEN.MAESTRO_TITUL_BS_AUX;

  commit;

  BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.BASILEA_FUSIONADA_COREP');

  VN_NUMERR:= 4;
  INSERT /*+ PARALLEL (I 8) */ INTO BAS_MEN.BASILEA_FUSIONADA_COREP I
  SELECT /*+ FULL(A) FULL(B) FULL(C) FULL(INI)
             PARALLEL (A 8) parallel (C 8) parallel (INI 8) PARALLEL(per 8) PARALLEL(pais 8) parallel (R 8) */
         A.OR_IDREG      , A.OR_IDPERS     , A.OR_NIFCIF      , A.OR_NOMPER    , A.OR_TITULARITAT  , A.OR_ENTITY
       , A.OR_EPIIND     , A.OR_CTAIND     , A.FI_EPICON     /*, FI_CTACON desaparece en sep09 */
       , A.OR_NUMOFI     , A.OR_REFOPE     , A.OR_REFOPE2     , A.IN_SEGMBSINI , A.IN_SEGMBS0
       , A.IN_SEGMBS1    , A.IN_SEGMBS2    , A.IN_SEGMBS      , A.IN_SRATIN    , A.IN_METODE
       , A.IN_METODE_1   , A.IN_SUCEPT     , A.IN_INDMOR      , A.IN_ITITSN    , A.OR_CLUNIENT
       /* 09/11/2021 FMR | Recuperamos el valor del producto para dejar la tripleta como estaba, al ser tarjetas */
       , CASE WHEN A.OR_CLUNIPROD = 'TA' AND INI.OR_CLUNIPROD_ASOC = 'TA' THEN 'DV'
              ELSE A.OR_CLUNIPROD
         END AS OR_CLUNIPROD
       , A.OR_CLUNICONTR , A.OR_CLUNICUENT , A.OR_CLUNIOPERA  , A.OR_IMPLTV    , A.OR_VALTAS       , A.OR_DISPTO
       , A.OR_DISBLE     , A.OR_AVALES     , A.OR_FUTURS      , A.OR_REPOS     , A.OR_AJUVAL       , A.OR_FAIRVA
       , A.OR_DISPTOCON  , A.OR_DISBLECON  , A.OR_AVALESCON   , A.OR_FUTURSCON , A.OR_REPOSCON     , A.OR_AJUVALCON
       , A.OR_FAIRVACON  , A.IN_TIPOREG    , A.OR_TIPOPE      ,A.IN_SEG_HIP    , A.OR_PROCED       , A.FI_TIPEXP
       , A.OR_IDPRO1     , A.OR_PROVAPL    , A.IN_ANTIGU      , A.OR_VIDRES    , A.OR_VIDINI
       , A.OR_FECOPE     , A.OR_FECVTO     , A.OR_TIPOFI      , A.OR_CODGAR    , A.OR_TIPGAR       , A.OR_DESTPR
       , A.OR_SEGGES     , A.OR_TIPOPR     , A.OR_IDPAIS      , A.OR_IDCNAE
       , A.OR_CODTIT     , A.IN_VTAGRU     , A.OR_RATINT
       , A.FI_ELIMI1
       , A.OR_NUMSCOFIN  , A.OR_PUNTSCO   , A.OR_TIPAVA       , A.IN_VTAGRU_CONS
       , A.OR_CODISO     , NVL(A.FI_SUMEXP,0) AS FI_SUMEXP     , A.IN_GRUP_IDPER , A.OR_SEGRIE    , A.OR_MODRAT0      , A.IN_NOM_GRUP
       , B.IN_RATINT     , A.OR_CODPRODO   , A.OR_NIFCIFIBM
       , A.OR_INDHOLDING , A.IN_RATSOB    , A.IN_RATEXT
       , A.IN_TIPDER     , A.OR_PUNT0      , A.IN_GRUP_TIPIDE , A.OR_COISIN
       , A.OR_TIPIDE     , A.OR_SEGFIC     , A.OR_SEGFAC     , A.OR_IDCNAEREL   , A.OR_PERSON     , A.OR_TITUSCPCB
       , A.OR_IDSITUAC   , A.IN_FAIRVABO   , A.IN_FAIRVABOCON, A.FI_MESCURA
       , A.OR_FECALTBLO  , A.IN_EXISTENCIAS, A.IN_ACTIVO_CIR , A.OR_MODSCO      , A.IN_IDCALIFIC  , A.OR_CONCED
       , A.OR_FECPUN0    , A.IN_NIFGRUPCON , A.IN_PYME       , A.IN_NUMEMP      , A.OR_CTACLI     , A.IN_RATEXTAVA2
       , CASE WHEN A.IN_SEGMBS = 'Derechos Cobro' THEN
                   NVL(S.IN_SEGBS,A.IN_SEGMBS)
              ELSE A.IN_SEGMBS
         END AS SEGMBS_DC
       , B.IN_SEGAIRB                     , B.FI_ATAMAIRB                      , a.FI_CCFAIRB        , B.FI_LGDAIRB        , a.FI_EADAIRB                , a.FI_EADCONAIRB
       , B.FI_MATAIRB                     , B.FI_CORAIRB                       , B.FI_MAAIRB         , B.FI_RCAIRB         , B.FI_RWAAIRB                , B.FI_RWACONAIRB
       , B.FI_ELAIRB                      , B.FI_ELCONAIRB                     , B.FI_PD_ORIGINAL    , B.FI_PD_COREPS      , B.FI_LGDNOMORA              , B.FI_LGDWORST
       , B.FI_LGDLR                       , B.FI_PDCONT                        , B.FI_RATCON         , B.FI_PDPOOL         , B.FI_RWA
       , C.IN_SEGSTDA
       , case when UPPER(c.IN_SEGSTDA_AUX) = 'ALTO RIESGO' AND c.IN_INDMOR_STDA IN ('CT', 'SI') then 'ALTO RIESGO_M'
              else c.IN_SEGSTDA_AUX
         end as IN_SEGSTDA_AUX
       , C.IN_SEGSTDA_INI    , C.IN_SEGSTDA_POST   , C.IN_SEGSTDA_PRE            , C.FI_CCFSTDA
       , C.FI_EXPSTDA_FULLY         , C.FI_EXPSTDA_FULLY1          , C.FI_EXPSTDA_FULLY2 , C.FI_EXPSTDA_FULLY3 , C.FI_EXPSTDA_FULLY_CON  , C.FI_EXPSTDA_FULLY_CON1
       , C.FI_EXPSTDA_FULLY_CON2     , C.FI_EXPSTDA_FULLY_CON3   , C.FI_RWASTDA        , C.FI_RWA1           , C.FI_RWA2                   , C.FI_RWA3
       , C.FI_PROV_FULLY
       , C.FI_PROV_FULLY_CON
       , C.FI_PROV_PHASEIN
       , C.FI_PROV_PHASEIN_CON
       , C.FI_PROV_PHASEIN1        , C.FI_PROV_PHASEIN2      , C.FI_PROV_PHASEIN3           , C.FI_PROV_PHASEIN_CON1    , C.FI_PROV_PHASEIN_CON2    , C.FI_PROV_PHASEIN_CON3
       , C.FI_PROV_FULLY1           , C.FI_PROV_FULLY2             , C.FI_PROV_FULLY3              , C.FI_PROV_FULLY_CON1           , C.FI_PROV_FULLY_CON2           , C.FI_PROV_FULLY_CON3
       , C.OR_PROVAPL1    , C.OR_PROVAPL2      , C.OR_PROVAPL3       , C.OR_SALDO_ORIG     , C.OR_SALDO_ORIG1    , C.OR_SALDO_ORIG2
       , C.OR_SALDO_ORIG3 , C.OR_SALDO_ORIGCON , C.OR_SALDO_ORIGCON1 , C.OR_SALDO_ORIGCON2 , C.OR_SALDO_ORIGCON3
       , C.FI_POSPOSTSTDA , C.FI_POSPRESTDA    , C.FI_POSPRESTDA_INI
       , A.FI_PORCON, A.OR_CODIGO_BIC, A.OR_INDHOLDINGREL, A.OR_SEGFIC2, A.OR_SUBSTDA, A.OR_TIPOBJETO, B.FI_LGDBE
       , CASE WHEN      c.in_segstda IN ('CRE','RRE') AND c.IN_SEGSTDA_AUX NOT IN ('Morosos','Alto Riesgo')
                   and (c.FI_EXPSTDA_FULLY_CON1+c.FI_EXPSTDA_FULLY_CON2+c.FI_EXPSTDA_FULLY_CON3) <> 0 THEN
              (c.FI_EXPSTDA_FULLY_CON1*c.FI_RWA1+c.FI_EXPSTDA_FULLY_CON2*c.FI_RWA2+c.FI_EXPSTDA_FULLY_CON3*c.FI_RWA3)/(c.FI_EXPSTDA_FULLY_CON1+c.FI_EXPSTDA_FULLY_CON2+c.FI_EXPSTDA_FULLY_CON3)
         ELSE c.FI_RWASTDA END AS RWASTDA
       , A.OR_CLAVISO, A.IN_FECMORA, A.OR_PERSONSCPCB, A.IN_CAT_BDE_N, a.IN_OPER_MIGR
       , a.MARCA_EPA, a.IN_FACTCOR, OR_SITCON
       , INI.OR_CLUNIENT_ASOC
       , INI.OR_CLUNIPROD_ASOC
       , INI.OR_CLUNICONTR_ASOC
       , a.OR_NIFCIFAVA
       , a.or_numpersona
       , a.IN_HIPOAVAL, a.IN_ACTIVO
       , CASE WHEN A.in_segmbsini IN ('002', '017') AND nvl(A.or_tituscpcb, 0) <> 0 THEN A.or_tituscpcb
              ELSE CASE WHEN NVL(A.OR_NIFCIF, '?') NOT IN ('?', '000000000000') and nvl(A.or_titularitat,0) = 0 THEN
                                   NVL(to_number(LPAD(REGEXP_REPLACE(A.OR_NIFCIF,'[^[:digit:]]',''), 15,'9')),to_number(lpad(A.or_idreg, 15,'9')))
                        ELSE decode(nvl(A.OR_titularitat, 0), 0, to_number(lpad(A.or_idreg, 15,'9')), A.OR_titularitat)
                   END
         END AS OR_TITULFIN,
         c.IN_INDMOR_STDA, a.OR_FECDEU, NVL(a.IN_REFINAN,0) as ID_REFINAN_OP, ini.OR_USOPRE,
         a.IN_PRESTPERCENT, a.OR_NUMFINREG,
         ini.or_unineg,
         ini.OR_CODIGO_ENTIDAD_GARANTIA,
         ini.OR_TIPO_GARANTIA,
         a.OR_CONTRATO_GARANTIA,
         ini.OR_UBICFI,
         ini.OR_CTAVISTA,
         a.OR_FECCAR
       , A.OR_DIVISA
       , null IN_UPDATE
       , cor.IN_TIPO_PYME, cor.C_TYPE_EXPOSURE, c.C_CCP, cor.C_ECAI, cor.C_SEG_STDA_CONTRAPARTE, cor.C_PARTIAL_USE
       , b.ENTIDAD_ENTE, cor.C_PAIS_FINAL, rpad(cor.C_NUMBER_OBL, 20), cor.C_SEGINI_STDA, cor.C_SEGFIN_STDA, cor.C_SEG_AIRB, a.or_idmes
       , case when T.OR_IDREG is not null then 1
              else 0
         end AS IND_AJUSTE_GRUPO, per.CODIGOLEIPER AS OR_CODIGOLEI, a.OR_PESOW, a.OR_PUNTGRUP
       , C.FI_EXPSTDA_PHASEIN, C.FI_EXPSTDA_PHASEIN1, C.FI_EXPSTDA_PHASEIN2, C.FI_EXPSTDA_PHASEIN3, C.FI_EXPSTDA_PHASEIN_CON, C.FI_EXPSTDA_PHASEIN_CON1, C.FI_EXPSTDA_PHASEIN_CON2, C.FI_EXPSTDA_PHASEIN_CON3
       , A.OR_SITUAC0,A.OR_FECSCO,A.OR_IDECNO,A.IN_REFINAN,B.IN_CATEGO,B.C_TYPE_GUARANTEE,C.IN_SEGSTDA_HIP,B.IN_ACTIVO_CONS,C.IN_TRAMO1,C.IN_TRAMO2,C.IN_TRAMO3,C.FI_RWA1_INI
       , C.FI_RWA2_INI,C.FI_RWA3_INI,C.IN_SEGMBS1 as SEGMBS1_STDA
       , CASE when A.in_tiporeg like 'CE%' then 'AIRB'
              when A.in_tiporeg like 'CI%' then 'STDA'
              else A.in_metode
         END as IN_METODE_INI
       , CASE when C.in_segstda_aux='Morosos' then 11
              when C.in_segstda_aux in ('Alto Riesgo','ALTO RIESGO_M') then 12
              when C.in_segstda_ini in ('RRE','CRE') then 10
              when C.in_segstda_ini='Soberanos' then 2
              when C.in_segstda_ini='A.R y Corp.Locales' then 3
              when C.in_segstda_ini='Ent.SP/Ot.Inst' then 4
              when C.in_segstda_ini='BMultides' then 5
              when C.in_segstda_ini='Organizaciones Int.' then 6
              when C.in_segstda_ini='Instituciones' then 7
              when C.in_segstda_ini='Empresas' then 8
              when C.in_segstda_ini='Retail' then 9
              when C.in_segstda_ini='RRE/CRE' then 10
              when C.in_segstda_ini='Morosos' then 11
              when C.in_segstda_ini='Alto Riesgo' then 12
              when C.in_segstda_ini='Bonos Garantizados' then 13
              when C.in_segstda_ini='IIC' then 15
              when C.in_segstda_ini='Otros Activos' then 17
              when C.in_segstda_ini='Equity' then 16
              else 0
         END as FI_SEGSTDA_INI
       , CASE
                when ROUND(c.fi_posprestda_ini,2) = ROUND(c.fi_rwastda,2) and C.in_segstda_aux='Morosos' then 11 /* RMR 17/04/2020 */
                when ROUND(c.fi_posprestda_ini,2) = ROUND(c.fi_rwastda,2) and C.in_segstda_aux in ('Alto Riesgo','ALTO RIESGO_M') then 12 /* RMR 17/04/2020 */
                when C.in_segstda in ('RRE','CRE') then 10
                when C.in_segstda='Soberanos' then 2
                when C.in_segstda='A.R y Corp.Locales' then 3
                when C.in_segstda='Ent.SP/Ot.Inst' then 4
                when C.in_segstda='BMultides' then 5
                when C.in_segstda='Organizaciones Int.' then 6
                when C.in_segstda='Instituciones' then 7
                when C.in_segstda='Empresas' then 8
                when C.in_segstda='Retail' then 9
                when C.in_segstda='RRE/CRE' then 10
                when C.in_segstda='Morosos' then 11
                when C.in_segstda='Alto Riesgo' then 12
                when C.in_segstda='Bonos Garantizados' then 13
                when C.in_segstda='IIC' then 15
                when C.in_segstda='Otros Activos' then 17
                when C.in_segstda='Equity' then 16
                else 0
         END     as FI_SEGSTDA_FIN
       , CASE
                when A.in_segmbsini in ('007', '018', '021', '028', '029', '034') then 6
                when A.in_segmbs0 = '201' then 10
                when nvl(aval.in_segairb,B.in_segairb) in ('SME','SME-CC') then  7
                when nvl(aval.in_segairb,B.in_segairb) in ('Emp/Sob/EEFF','Emp/Sob/EEFF-CC')  then  11
                when nvl(aval.in_segairb,B.in_segairb) = 'Préstamos Hipotecarios' and  a.in_segmbs1 = '501' then  13
                when nvl(aval.in_segairb,B.in_segairb) = 'Préstamos Hipotecarios' then  14
                when nvl(aval.in_segairb,B.in_segairb) = 'Tarjetas Crédito' then  15
                when nvl(aval.in_segairb,B.in_segairb) = 'Otro Retail' and  a.in_segmbs1 = '501' then  16
                when nvl(aval.in_segairb,B.in_segairb) = 'Otro Retail' then  17
                else 0
         END     as FI_SEGAIRB_INI
       , CASE
                when A.IN_SEGMBSINI in ('007', '018', '021', '028', '029', '034') then 6
                when A.IN_SEGMBS0 = '201' then 10
                when B.in_segairb in ('SME','SME-CC') then 7
                when B.in_segairb in ('Emp/Sob/EEFF','Emp/Sob/EEFF-CC') then 11
                when B.in_segairb = 'Préstamos Hipotecarios' and nvl(b.SEGMBS1_AVA,a.in_segmbs1)  = '501' then  13
                when B.in_segairb = 'Préstamos Hipotecarios' then  14
                when B.in_segairb = 'Tarjetas Crédito' then  15
                when B.in_segairb = 'Otro Retail' and  nvl(b.SEGMBS1_AVA,a.in_segmbs1) = '501' then  16
                when B.in_segairb = 'Otro Retail' then  17
                else 0
         END     as FI_SEGAIRB_FIN
       , cor.OR_IDPAIS_INMUEBLE
       , A.IN_RATEXT_ISIN
       , ini.OR_DIVPAIS
       , B.IDREG_AVA, B.SEGMBSINI_AVA, B.SEGMBS0_AVA, B.SEGMBS1_AVA, B.SEGMBS_AVA, B.FACTCOR_AVA
       , CASE WHEN A.FI_TIPEXP IN ('OTC', 'Repos') AND OR_ENTITY IN (81, 8211) THEN A.OR_CLUNIPROD_OPERA || LPAD(A.OR_CLUNIOPERA, 15, '0')
              ELSE NULL
         END AS GLOBALID
       , CASE WHEN A.OR_IDPRO1 = 'GE' AND A.OR_SUBSTDA <> 'S'          THEN 1
              WHEN A.OR_IDPRO1 = 'GE' AND A.OR_SUBSTDA = 'S'           THEN 2
              WHEN A.OR_IDPRO1 = 'ES' OR (A.IN_INDMOR IN ('CT', 'SI') AND A.OR_PROVAPL <> 0)  THEN 3
              ELSE 1
         END AS IN_STAGE_PROVI
       , NVL(C.FI_SUMEXP_STDA,0) AS FI_SUMEXP_STDA
       , case
              WHEN R.FI_SUMEAD IS NULL AND a.in_metode = 'AIRB' THEN nvl(a.FI_SUMEXP, a.FI_EADAIRB)
              WHEN R.FI_SUMEAD IS NULL AND a.in_metode = 'STDA' THEN nvl(c.FI_SUMEXP_STDA, c.FI_EXPSTDA_FULLY)
              ELSE nvl(R.FI_SUMEAD, a.or_dispto)
         END AS FI_SUMEXP_FACTCOR
       , a.OR_CLUNIPROD_OPERA, a.OR_CLUNIENT_CUENT
       , a.OR_MARCONOT, a.OR_MARCONDV, a.OR_FECTAS, G.AT_CAR_27_CCONT
       , lgd.IN_FECHAMORA,lgd.IN_FECTAS
       , CASE WHEN NVL(A.IN_GRUP_IDPER,'?') <> '?' THEN 'GRUP:' || A.IN_GRUP_IDPER
              WHEN A.OR_NUMOFI IN (800,801,813,821,825) AND A.OR_TITULARITAT = 0 THEN 'OFEX:' || (A.OR_NUMOFI * 10000000000 + A.OR_CTACLI)
              WHEN A.OR_ENTITY = 9109 AND NVL(A.OR_IDPERS,'?') NOT IN ('?', '00-') THEN 'ANDO:' || A.OR_IDPERS
              WHEN A.OR_PERSONSCPCB IN (816,831,833) AND A.OR_PROCED <> 'FACTORING'  and ( A.IN_SEGMBSINI in ('002','017') ) THEN 'TITU:' || A.OR_TITUSCPCB
              WHEN A.OR_TITULARITAT NOT IN (0,9,99) THEN 'TITU:' || A.OR_TITULARITAT
              WHEN NVL(A.OR_NIFCIF,'?') NOT IN ('?','000000000000','000000000') THEN 'NIFS:' || A.OR_NIFCIF
              ELSE 'REGI:' || A.OR_IDREG
         END ID_CLIENTE
       , B.FI_IMPLTV
       , nvl(sus.IN_INDSUC,'?') as IN_INDSUC
       , A.IN_NUMEMP_CONS
       , sysdate as FECH_GEN
       , CASE WHEN a.or_numofi IN (800,801,813,825,821) THEN a.or_numofi      /* BNM 6/11/2020 Se cambia la procedencia del segmento de riesgo de personas */
              WHEN ini.or_unineg = 4914 AND ris.ID_SEGMENTO IN ('MP','PA') THEN  49141
              WHEN ini.or_unineg = 4914 AND ris.ID_SEGMENTO NOT IN ('MP','PA') THEN 49142
              WHEN ini.or_unineg = 4912 THEN
                                    CASE WHEN psig.codcontrat IS NULL THEN
                                                                           CASE WHEN ris.ID_SEGMENTO IN ('MP','PA') THEN 49141
                                                                                WHEN ris.ID_SEGMENTO = 'EM' THEN 49142
                                                                                ELSE 49142
                                                                            END
                                         ELSE 49142
                                    END
              WHEN NVL(ini.or_unineg, 0) <> 0 THEN ini.or_unineg
              ELSE a.or_entity
         END AS FI_UNINEG_FIN
       , A.OR_VERSPREST
       -- RMR 10/10/2019 Añadido campo capacidad de pago
       , CASE WHEN pag.IN_DICTAMEN_DEFINITIVO IS NULL THEN NULL
              WHEN substr(pag.IN_DICTAMEN_DEFINITIVO, 1, 1) in ('A', '1', '2', '5') THEN 1
              ELSE 0
         END AS CAP_PAGO
         /* RMR 10/10/2019 Añadido numsolicitud y campo capacidad de pago  */
       , a.INDCURA, a.FECHINICURA, a.TIPODEFAULT, a.FECHINISIMP, a.FECHFINSIMP, a.IN_DEFAULT
       , NVL(TO_NUMBER(TO_CHAR(nvl(ini.DATA_IND, ventas.DATA_IND), 'YYYYMMDD')),9999) as in_fecvta
       , NVL(TO_NUMBER(TO_CHAR(nvl(ini.DATA_CON, ventas.DATA_IND), 'YYYYMMDD')),9999) as in_fecvtacon
       , ini.CENGESTOR, ini.OR_SUBSEG
       , a.OR_MODGRUP  /* RMR 26/02/2020 Añadido campo de modelo de grupo */
       , titu.NUMTITCOMPROMRET, titu.PORCENTAJERET   /* BNM 23/03/2020 Añadidos los campos marca retenida y PORCENTAJERETRETRET */
       , a.OR_CLUNIENT_OPERA, a.OR_CLUNIPROD_CUENT /* RMR 18/04/2020 */
       /* BNM - 09/07/2020 - TM-2071 - Calcular estos 6 campos tras aplicar factor de apoyo pyme */
       , c.FI_RWASTDA*a.IN_FACTCOR*c.FI_EXPSTDA_PHASEIN AS FI_RWASTD_FIN
       , c.FI_RWASTDA*c.FI_EXPSTDA_PHASEIN_CON*a.IN_FACTCOR AS FI_RWACONSTD_FIN
       , FI_RWAAIRB*a.IN_FACTCOR AS FI_RWAAIRB_FIN
       , FI_RWACONAIRB*a.IN_FACTCOR AS FI_RWACONAIRB_FIN
       , CASE WHEN a.IN_METODE='AIRB' THEN FI_RWAAIRB*a.IN_FACTCOR
              WHEN a.IN_METODE='STDA' THEN c.FI_RWASTDA*a.IN_FACTCOR*c.FI_EXPSTDA_PHASEIN
              ELSE 0
         END AS FI_RWA_FIN
       , CASE WHEN a.IN_METODE='STDA' THEN c.FI_RWASTDA*c.FI_EXPSTDA_PHASEIN_CON*a.IN_FACTCOR
              WHEN a.IN_METODE='AIRB' THEN FI_RWACONAIRB*a.IN_FACTCOR
              ELSE 0
         END AS FI_RWACON_FIN, c.FI_VALTAS_STDA, c.FI_IMPLTV_STDA, b.FI_VIDRES
       , segmc.UNIDAD, segmc.SEGMENTO, segmc.SUBSEGMENTO
       /*INI - RBR-I 2021/10/04 Nuevos campos*/
       , CASE WHEN A.IN_TIPOREG LIKE '%AV%' THEN TRIM(A2.IDENTIFICADOR||'-AV-'||A.OR_NIFCIFAVA)
              WHEN A.IN_TIPOREG LIKE 'CE%' AND A.IN_TIPOREG NOT IN ('CERENTVA','CETITULI') then A2.IDENTIFICADOR  /* 03/12/2021 - FMRR -Corregido valores REF_CONTRATO y REF_CLIENTE para IN_TIPOREG LIKE 'CE%'*/
              WHEN A.IN_TIPOREG IN ('CISA','CIMMSA') then A2.IDENTIFICADOR  /* 04/11/2021 - FMRR - Incluimos un cambio para los IN_TIPOREG - CISA y CIMMSA */
              WHEN A.IN_TIPOREG IN ('DN','FA','FMX','FFD','MMOXC','MMOXE','MMSA','MMSA2','MMSA8','OXC','OXE','PX','REN','RN','RX','SA','SA2','SA8','SAS0','SAS1') THEN A2.IDENTIFICADOR
              WHEN A.IN_TIPOREG IN ('CERENTVA','CETITULI','DC','DI','DX','FC','FF','IIG','IIG2','IIG8','IIR','IIU','IIU2','IIU8','IN','IN2','IN8','OX','SC','SI','SX') THEN TRIM(LPAD(A.OR_ENTITY,9))
              WHEN A.IN_TIPOREG = 'DTA' THEN 'DTA'
              ELSE 'NO TRATADO'
         END AS REF_CLIENTE,
         CASE WHEN A.IN_TIPOREG LIKE '%AV%' THEN A2.CONTRATO
              WHEN A.IN_TIPOREG LIKE 'CE%' AND A.IN_TIPOREG NOT IN ('CERENTVA','CETITULI') then TRIM(A2.CONTRATO||'_CE_') /* 03/12/2021 - FMRR -Corregido valores REF_CONTRATO y REF_CLIENTE para IN_TIPOREG LIKE 'CE%'*/
              WHEN A.IN_TIPOREG IN ('CISA','CIMMSA') then TRIM(A2.CONTRATO||'_CI_')  /* 04/11/2021 - FMRR - Incluimos un cambio para los IN_TIPOREG - CISA y CIMMSA */
              WHEN A.IN_TIPOREG IN ('DN','FA','FMX','FFD','MMOXC','MMOXE','MMSA','MMSA2','MMSA8','OXC','OXE','PX','REN','RN','RX','SA','SA2','SA8','SAS0','SAS1') THEN A2.CONTRATO
              WHEN A.IN_TIPOREG IN ('CERENTVA','CETITULI','DC','DI','DX','FC','FF','IIG','IIG2','IIG8','IIR','IIU','IIU2','IIU8','IN','IN2','IN8','OX','SC','SI','SX') THEN A.FI_EPICON
              WHEN A.IN_TIPOREG = 'DTA' THEN 'DTA'
              ELSE 'NO TRATADO'
         END AS REF_CONTRATO /* FIN RBR-F 2021/10/04 Nuevos campos*/
       , ini.OR_NIFCIFCTAVIS /* 14/12/2021 - NAV - HDEV-86342 <-> punto 3 - dejar bajar el campo or_nifcifctavis a la basilea_fusionada_corep */
       , nvl(ead.UPLIFT_ADD,'1') AS UPLIFT_ADD  --HDEV-107786 Nuevos calibrados (JRJ) 10/06/2022
       , B.IN_SRATIN_2 --HDEV-107786 Nuevos calibrados (JRJ) 10/06/2022
       , nvl(OL.FI_PD_COREPS,B.FI_PD_COREPS) AS FI_PD_COREPS_OLD --HDEV-107786 Nuevos calibrados (JRJ) 29/06/2022
    FROM BAS_MEN.BASILEA      A        -- avalados
         /* RBR-I 2021/10/04 Nuevos campos*/
       , (SELECT /*+ PARALLEL (A3 8)*/ A3.OR_IDREG,
                 /* Creamos un "identificador de cliente" único para cada cliente individual;*/
                 CASE WHEN IN_TIPOREG IN ('FA','FMX') THEN TRIM(OR_IDPERS)
                      WHEN IN_SEGMBSINI = '007' THEN TRIM(OR_CODIGO_BIC)
                      WHEN OR_TITULARITAT = 0 AND INSTR(IN_TIPOREG,'X')>0 THEN TRIM(LPAD(OR_NUMOFI*1000000 + OR_CTACLI,15))
                      ELSE TRIM(LPAD(OR_TITULARITAT,15)) END AS IDENTIFICADOR,
                 /* Creamos un "identificador de contrato" único para cada contrato individual;*/
                 CASE WHEN IN_TIPOREG IN ('FA') THEN TRIM(LPAD(OR_REFOPE,30))
                      WHEN IN_TIPOREG IN ('FMX') THEN TRIM(LPAD(OR_REFOPE,30))
                      WHEN OR_TIPOPE = 'RF' AND FI_TIPEXP <> 'Repos' THEN TRIM(OR_COISIN)
                      WHEN OR_CLUNICONTR IN (0,999999999999999)  THEN TRIM(LPAD(OR_REFOPE,30)) --faltaria el .?
                      ELSE TRIM(LPAD(OR_CLUNICONTR + OR_REFOPE,30)) END AS CONTRATO
            FROM BAS_MEN.BASILEA A3) A2
          /* RBR-F 2021/10/04 Nuevos campos */
       /* RMR 01/04/2022 Abierto inserción de avalistas ya que en el proceso del bka40112.sql se insertan en la BASILEA_AVALISTAS
            aquellos avalistas que no tienen exposicion en la base, con OR_IDREG 0 */
       , (SELECT a.* , SEGMBSINI_AVA, SEGMBS0_AVA, SEGMBS1_AVA, SEGMBS_AVA, FACTCOR_AVA, idreg_ava
            FROM BAS_MEN.BASILEA_AIRB A,
                 (select distinct c.or_idreg, idreg_ava, SEGMBSINI_AVA, SEGMBS0_AVA, SEGMBS1_AVA, SEGMBS_AVA, FACTCOR_AVA
                    from BAS_MEN.BASILEA_AVALISTAS a,
                         BAS_MEN.basilea_airb_avalistas_aux b,
                         BAS_MEN.CAMBIOS_AVALISTAS c
                   where a.or_idreg <> 0 --ese avalista SI tiene exposiciones en base
                     and a.or_idreg = idreg_ava
                     and b.or_idreg = c.or_idreg
                   union
                     select distinct c.or_idreg, idreg_ava, SEGMBSINI_AVA, SEGMBS0_AVA, SEGMBS1_AVA, SEGMBS_AVA, FACTCOR_AVA
                    from BAS_MEN.BASILEA_AVALISTAS a,
                         BAS_MEN.cambios_AVALISTAS c,
                         BAS_MEN.basilea_airb_avalistas_aux b
                   where a.or_idreg = 0 -- avalista que NO tiene exposiciones en base
                     and a.OR_NIFCIFAVA = b.OR_NIFCIFAVA -- como no tiene exposiciones vamos por NIFCIF
                     and b.or_idreg = c.or_idreg ) b
           WHERE a.or_IDREG = b.or_idreg(+))   B     -- datos de AIRB con o sin avalista
       , BAS_MEN.BASILEA_STDA              C
       , BAS_MEN.MAESTRO_SEGMENTOS               S
       , BAS_MEN.COEFICIENTE_REDUCTOR_RES        R
       , (select DIstinct AT_CAR_27_CCONT, ID_CUENTA_CONTABLE
            from BAS_MEN.POSICION_DIVISAS_C22)   G
       , (SELECT /*+ FULL (bi) PARALLEL (bi 8) */ nvl (r.or_idreg_new, bi.or_idreg) as OR_IDREG
               , OR_CLUNIENT_ASOC, OR_CLUNIPROD_ASOC, OR_CLUNICONTR_ASOC, OR_NIFCIFAVA
               , NVL(bi.OR_USOPRE,'?') AS OR_USOPRE
               , OR_UNINEG
               , OR_CODIGO_ENTIDAD_GARANTIA, OR_TIPO_GARANTIA, OR_CONTRATO_GARANTIA, OR_UBICFI, OR_CTAVISTA, OR_DIVPAIS
               , DATA_IND, DATA_CON, CENGESTOR, OR_SUBSEG, OR_NIFCIFCTAVIS /* 14/12/2021 - NAV - HDEV-86342 <-> punto 3 - dejar bajar el campo or_nifcifctavis a la basilea_fusionada_corep */
            FROM bas_men.basilea_ini bi
            left outer join bas_men.relacion_idregs r
              on (bi.or_idreg = r.OR_IDREG_ori)
            union
           SELECT /*+ FULL (bi) PARALLEL (bi 8) */ bi.or_idreg as OR_IDREG
               , OR_CLUNIENT_ASOC, OR_CLUNIPROD_ASOC, OR_CLUNICONTR_ASOC, OR_NIFCIFAVA
               , NVL(bi.OR_USOPRE,'?') AS OR_USOPRE
               , OR_UNINEG
               , OR_CODIGO_ENTIDAD_GARANTIA, OR_TIPO_GARANTIA, OR_CONTRATO_GARANTIA, OR_UBICFI, OR_CTAVISTA, OR_DIVPAIS
               , DATA_IND, DATA_CON, CENGESTOR, OR_SUBSEG, OR_NIFCIFCTAVIS /* 14/12/2021 - NAV - HDEV-86342 <-> punto 3 - dejar bajar el campo or_nifcifctavis a la basilea_fusionada_corep */
            FROM bas_men.basilea_ini bi) INI
       , BAS_MEN.PD_FILIALES T
       , (select /*+ full(n) PARALLEL(per 8) */ distinct NUMPERSONA, CODIGOLEIPER /*, nvl(SEGMENTORIE_TPER, 'SS') SEGMENTORIE_TPER --BNM 3/12/2020- se sustituye el campo por el de la nueva tabla LK_RSK_PE_SEG_RIESGO*/
            from BAS_MEN.M_BDU_PERSONES) per
       , (select ID_SEGMENTO, ID_CODTIT
            from BAS_MEN.LK_RSK_PE_SEG_RIESGO) ris
       , (select /*+ full(n) PARALLEL(n 8) */ OR_IDREG,IN_SEGAIRB
            from BAS_MEN.BASILEA_AIRB_AVALADOS n) aval
       , BAS_MEN.BASILEA_AIRB_LGD lgd
       , BAS_MEN.MAESTRO_SUSCEPTIBILIDAD  sus
       , (select /*+ PARALLEL(a 4) */ codcontrat
            from Dcrprop_mensual.bs_basilea_psig a
           where or_idmes = VN_MESPRO_AAAAMM
             AND cod_cartera IN ('59710420','59710421','59710422','59710423','59720420','59720421','59740420','59740421','59740422','59740423','59740425','59740426','59740427')
         ) psig
       , BAS_MEN.MAPA_USO_PRESTAMOS_ORIG pag             /* RMR 10/10/2019 Añadido campo capacidad de pago */
       , BAS_MEN.MAESTRO_VENTAS ventas
       , (select ENTIDADCONTRATO, PRODUCTOCTRO, CONTRATO, NUMTITCOMPROMRET, PORCENTAJERET
            from BAS_MEN.TITULIZACIONES_SINTETICAS
           where NUMTITCOMPROMRET IS NOT NULL) titu      /* BNM 23/03/2020 añadidos campos marca retenida y PORCENTAJERET */
       , (SELECT ENTIDADCONTRATO, PRODUCTOCTRO, CONTRATO  /* 09/07/2021 - RMR - Incluimos subsegmento comercial */
               , max(UNIDNEGOCIOMDCTO)           keep (dense_rank first order by ENTIDADCONTRATO, PRODUCTOCTRO, CONTRATO) AS UNIDAD
               , max(SEGMENTCOMERCIAL_PCTO_SACT) keep (dense_rank first order by ENTIDADCONTRATO, PRODUCTOCTRO, CONTRATO) AS SEGMENTO
               , max(SUBSEGCOMACTPER_PCTO)       keep (dense_rank first order by ENTIDADCONTRATO, PRODUCTOCTRO, CONTRATO) AS SUBSEGMENTO
            FROM BAS_MEN.M_BDU_SUBSEGMCIAL b
          GROUP BY MESCONTABLE, ENTIDADCONTRATO, PRODUCTOCTRO, CONTRATO) segmc
       , BAS_MEN.PARAMETROS_COREPS COR
       , BAS_MEN.MAESTRO_EAD EAD --HDEV-107786 Nuevos calibrados (JRJ) 10/06/2022
       , BAS_MEN.BASILEA_AIRB_PD_OLD OL --HDEV-107786 Nuevos calibrados (JRJ) 29/06/2022
   WHERE A.OR_IDREG           = B.OR_IDREG(+)
     AND A.OR_IDREG           = C.OR_IDREG(+)
     AND A.OR_IDREG           = aval.OR_IDREG(+)
     AND A.OR_IDREG           = INI.OR_IDREG(+)
     AND A.OR_IDREG           = T.OR_IDREG(+)
     AND A.OR_IDREG           = R.OR_IDREG(+)
     AND A.OR_IDREG           = lgd.OR_IDREG(+)
     AND A.OR_CTAIND          = G.ID_CUENTA_CONTABLE(+)
     AND A.OR_NUMPERSONA      = per.NUMPERSONA(+)
     AND A.OR_TITULARITAT     = ris.ID_CODTIT(+)
     AND CASE
            WHEN A.IN_SEGMBS1 IN ('500', '501') AND A.IN_SEGMBSINI IN ('003', '005', '006', '009', '010', '019', '027') THEN
                 A.IN_SEGMBS1
            ELSE A.IN_SEGMBSINI
         END = S.IN_SEGMBSINI(+)
     AND nvl(A.IN_SUCEPT,'?') = sus.IN_SUCEPT(+)
     AND A.or_clunicontr      = psig.codcontrat(+)         /* RMR 04/09/2019 Cambiado cruce bdu de titularitat a numpersona*/
     AND A.or_idreg           = pag.or_idreg (+)           /* RMR 10/10/2019 Añadido campo capacidad de pago */
     AND A.or_nifcif          = ventas.CIF_FILIAL(+)
     AND A.OR_CLUNIENT        = titu.ENTIDADCONTRATO(+)    /* BNM 23/03/2020 recupera tripleta */
     AND A.OR_CLUNIPROD       = titu.PRODUCTOCTRO(+)
     AND A.OR_CLUNICONTR      = titu.CONTRATO(+)
     AND A.OR_CLUNIENT        = segmc.ENTIDADCONTRATO(+)   /* 09/07/2021 - RMR - Incluimos subsegmento comercial */
     AND A.OR_CLUNIPROD       = segmc.PRODUCTOCTRO(+)
     AND A.OR_CLUNICONTR      = segmc.CONTRATO(+)
     AND A.OR_IDREG           = COR.OR_IDREG(+)
     AND A.OR_IDREG           = A2.OR_IDREG             /* RBR-F 2021/10/04 Nuevos campos */
     AND A.OR_IDREG           = EAD.OR_IDREG(+) --HDEV-107786 Nuevos calibrados (JRJ) 10/06/2022
     AND A.OR_IDREG           = OL.OR_IDREG(+); --HDEV-107786 Nuevos calibrados (JRJ) 29/06/2022

    -- ALLA Se detecta que no se actualiza la variable contador
    vv_count := SQL%ROWCOUNT;

    COMMIT;
    VN_NUMERR:= 5;

    BAS_MEN.FNC_TRUNCATE_TABLE('BAS_MEN.MAESTRO_IN_update');

    INSERT /*+ PARALLEL (I 4) */ INTO BAS_MEN.MAESTRO_IN_UPDATE I
             SELECT OR_IDREG, MAX(TABLA_STDA)|| '/' ||MAX(TABLA_AIRB)|| '/' ||MAX(TABLA_basilea)|| '/' ||MAX(TABLA_LGD)|| '/' ||MAX(TABLA_PD)
              FROM (
                       select b.or_idreg, substr(b.or_tabla,17) as tabla_STDA, null AS TABLA_airb, null AS tabla_basilea, null AS TABLA_LGD, null AS TABLA_PD
                         from (select max(data_update) data_update, or_tabla
                                from BAS_MEN.UPDATES_BASILEA_STDA
                               group by or_tabla) a,
                              BAS_MEN.UPDATES_BASILEA_STDA b
                        where a.data_update = b.data_update
                          and a.or_tabla = b.or_tabla
                       union
                       select b.or_idreg, null AS tabla_stda, substr(b.tabla_orig,17) as tabla_AIRB, null AS tabla_basilea, null AS TABLA_LGD, null AS TABLA_PD
                         from (select max(data_update) data_update, tabla_orig
                                  from BAS_MEN.UPDATES_BASILEA_AIRB
                                 group by tabla_orig) a,
                              BAS_MEN.UPDATES_BASILEA_AIRB b
                        where a.data_update = b.data_update
                          and a.tabla_orig = b.tabla_orig
                       union
                       select /*+ parallel(a 4)  parallel(b 4) */ b.or_idreg, null AS TABLA_STDA, null AS TABLA_AIRB, substr(b.or_tabla,17) AS TABLA_basilea, null AS TABLA_LGD, null AS TABLA_PD
                         from (select max(data_update) data_update, or_tabla
                                 from BAS_MEN.UPDATES_BASILEA
                                group by or_tabla) a,
                              BAS_MEN.UPDATES_BASILEA b
                        where a.data_update = b.data_update
                          and a.or_tabla = b.or_tabla
                       union
                       select b.or_idreg, null AS TABLA_STDA, null AS TABLA_AIRB, null AS tabla_basilea, substr(b.or_tabla,17) AS TABLA_LGD, null AS TABLA_PD
                         from (select max(data_update) data_update, or_tabla
                                 from BAS_MEN.UPDATES_BASILEA_AIRB_LGD
                                group by or_tabla) a,
                              BAS_MEN.UPDATES_BASILEA_AIRB_LGD b
                        where a.data_update = b.data_update
                          and a.or_tabla = b.or_tabla
                       union
                       select b.or_idreg, null AS TABLA_STDA, null AS TABLA_AIRB, null AS tabla_basilea, null AS TABLA_LGD, substr(b.or_tabla,17) AS TABLA_PD
                         from (select max(data_update) data_update, or_tabla
                                 from BAS_MEN.UPDATES_BASILEA_AIRB_PD
                                group by or_tabla) a,
                              BAS_MEN.UPDATES_BASILEA_AIRB_PD b
                        where a.data_update = b.data_update
                          and a.or_tabla = b.or_tabla
                   ) D
             group by or_idreg;

    COMMIT;

    MERGE /*+ full(Upd) parallel(Upd 8) parallel(Sel 8)*/  INTO BAS_MEN.BASILEA_FUSIONADA_COREP Upd
          USING BAS_MEN.MAESTRO_IN_UPDATE Sel
             ON (Upd.OR_IDREG = Sel.OR_IDREG)
           WHEN MATCHED THEN UPDATE
            SET Upd.IN_UPDATE = Sel.tabla_update;

    COMMIT;

    VN_NUMERR:= 6;

    /* FMRR - 07/01/2022 - HDEV-102035 - Addon para E5 */
    EXECUTE IMMEDIATE ('TRUNCATE TABLE BAS_MEN.ADDON_E5');

    INSERT /*+ parallel (a 4) */ INTO BAS_MEN.ADDON_E5 a
    SELECT OR_IDMES, OR_IDREG
         , fus.FI_RWA_FIN AS RWA
         , fus.FI_RWA_FIN * 0.09 AS ADDON
         , fus.FI_RWA_FIN + (fus.FI_RWA_FIN * 0.09) AS RWA_CON_ADDON
      FROM (SELECT /*+ parallel (b 4) */ OR_IDMES, OR_IDREG,
                   (FI_RWACONAIRB * IN_FACTCOR) AS FI_RWA_FIN
              FROM BAS_MEN.BASILEA_FUSIONADA_COREP b
             WHERE FI_ELIMI1 ='NO'
               AND IN_METODE = 'AIRB'
               AND OR_SEGFIC2 IN ('E5R','E5DS','PA005')
               AND IN_SEGMBS2 <> '20'
            ) fus;

    COMMIT;

    VN_NUMERR:= 7;

     UPDATE BAS_MEN.CONTROL_PROCES
    SET ESTAT      = 'FINALIZADO'
      , DATA_FIN   = SYSDATE
      , FINALITZAT = 'OK'
      , REG_INS_OK = vv_count
  WHERE PROCES = Cte_Nom_Procedure
    AND ESTAT  = 'INICIADO';

     COMMIT;

EXCEPTION
    WHEN OTHERS THEN
      VV_MENSAJE_ERR := SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' NUMERR '||VN_NUMERR,1,255);

      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT      = 'FINALIZADO'
           , DATA_FIN   = SYSDATE
           , FINALITZAT = 'KO'
           , REG_INS_OK = vv_count
           , ERROR_ORAC = VV_MENSAJE_ERR
           , NUM_ERROR  = VN_NUMERR
       WHERE PROCES = Cte_Nom_Procedure
         AND ESTAT  = 'INICIADO';
       COMMIT;

       RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'FNC_FUSIONADA_COREP';


create or replace PROCEDURE      BAS_MEN.BASI_BASILEA_FUSIONADA_COREP IS


   VV_TABLA           CONSTANT VARCHAR2(200) := 'BAS_MEN.BASILEA_FUSIONADA_COREP';
   VN_FECPRO_AAAAMMDD NUMBER(8);
   VN_MESPRO_AAAAMM   NUMBER(6);
   VV_RETORNO         VARCHAR2(2)       DEFAULT 'OK';
   VN_NumErr          NUMBER(6)         DEFAULT 0;
   v_Exis_Datos       VARCHAR2(1)       DEFAULT 'N';
   vN_NRegs_Ins       NUMBER(12)        DEFAULT 0;


   VV_Nom_Proceso     BAS_MEN.CONTROL_PROCES.PROCES%TYPE;
   Vv_Mensaje_Err     VARCHAR2(255)                         DEFAULT 'OK';

BEGIN

  -- NOTA: Tablas Usuario necesarias : DCRPROP_MENSUAL.PUNTUACIO_MODEL_SAS

  ROLLBACK; -- Cierre de cualquier TX que pudiera haber abierta.

  EXECUTE IMMEDIATE ('ALTER SESSION ENABLE PARALLEL DML');

  --
  -- Obtención de las fechas del proceso en Formato AAAAMM y AAAAMMDD
  --
  BAS_MEN.SP_Obtener_Fechas_Proceso (VN_MesPro_AAAAMM, VN_FecPro_AAAAMMDD);

  --
  -- Información en el control de LOG (Tabla CONTROL_PROCESO) del inicio del proceso
  --
  VV_Nom_Proceso := 'BAS_MEN BASILEA_FUSIONADA_COREP '||VV_TABLA||' '||VN_MesPro_AAAAMM;
  BAS_MEN.SP_Info_Control_Proces (VV_Nom_Proceso, 'INICIADO');
  COMMIT;

  --  -- Generación de la tabla BASILEA_FUSIONADA_COREP

  BAS_MEN.FNC_FUSIONADA_COREP(VN_MesPro_AAAAMM);
  COMMIT;

  --
  -- Información en el control de LOG (Tabla CONTROL_PROCESO) de finalizacion del proceso
  --

  BAS_MEN.SP_Info_Control_Proces (VV_Nom_Proceso, 'FINALIZADO', VV_RETORNO, vV_Mensaje_Err);
  COMMIT;


EXCEPTION
    WHEN OTHERS THEN
          --
          -- Actualización del fin con error en Control Proceso. El procedimiento ya realiza el COMMIT;
          --
          vV_Mensaje_Err:= SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' C.E.'||vN_NumErr,1,255);
          VV_RETORNO        := 'KO';

          ROLLBACK;

          BAS_MEN.SP_Info_Control_Proces (VV_Nom_Proceso, 'FINALIZADO', VV_RETORNO, vV_Mensaje_Err);

          RAISE;

END;

/

select * from sys.user_errors WHERE NAME = 'BASI_BASILEA_FUSIONADA_COREP';

--bka10040=====================================================================================================
--ATENCION !!!!!!!
--bdd.ORA_ADMIN.ANALIZAR_SEGMENTO falla en simulación, es el último paso
Select 'bka10040' As Compilando from dual;

create or replace PROCEDURE BAS_MEN.FNC_FUSION_COREP_VER  AS

/* ** 20190626- ADP - Copia de BAS_MEN.BASILEA_FUSIONADA_COREP en la tabla particionada BAS_MEN.BS_BASILEA_FUSION_COREP_VER*/
/* Este procedimiento hace una copia versionada de BAS_MEN.BASILEA_FUSIONADA_COREP */
/* BAS_MEN.BS_BASILEA_FUSION_COREP_VER esta particionada por el campo version en lugar del ID_MES*/

/* ------------------------------------------------------------------------------------------
-- DEFINICION DE VARIABLES
--------------------------------------------------------------------------------------------*/

  vn_numerr         number (4);
  VV_MENSAJE_ERR    varchar2(255);
  VV_PROGRAMA       varchar2(15);
  vv_count          number(9);
  VV_ERROR_PROG     varchar2(4000);

    --
    -- Parámetros rotacion tabla
    --
  v_Tabla_Orig            varchar2(50) := 'BAS_MEN.BASILEA_FUSIONADA_COREP';
  v_Propietario           varchar2(10) := 'BAS_MEN';
  v_Tabla_Particionada    varchar2(50) := 'BS_BASILEA_FUSION_COREP_VER';

  v_Mes_Cierre                  NUMBER(6);
  v_Mes_ver                     NUMBER(6);
  v_Version                     NUMBER(5);
  v_Nombre_Nueva_Particion      VARCHAR2(8);
  v_Rango_Nueva_Particion       NUMBER(6);
  v_Table_Space                 VARCHAR2(30);

  v_Exis_Particion              NUMBER(1)           DEFAULT 0;
  v_Sentencia_Dinamica          VARCHAR2(32000)     DEFAULT '';
  V_EXISTE                      NUMBER(1)           DEFAULT 0;
  V_SQL                         VARCHAR2(500)       DEFAULT '';

BEGIN

    vv_count := 0;
    VV_PROGRAMA := 'BKA10040';

    VN_NUMERR:= 1;


    INSERT INTO BAS_MEN.CONTROL_PROCES (PROCES, DATA_INI, ESTAT)
    VALUES (VV_PROGRAMA||' - BS_BASILEA_FUSION_COREP_VER', SYSDATE, 'INICIADO');


    COMMIT;

/*----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
-- ** 20190626- ADP - Copia de BAS_MEN.BASILEA_FUSIONADA_COREP en la tabla particionada BAS_MEN.BS_BASILEA_FUSION_COREP_VER
----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------*/

    VN_NUMERR:= 2;

    -- Obtención del mes de cierre para deternimar el mes de cierre y de la nueva/próxima partición
    -- (v_Mes_Cierre)
    SELECT TO_NUMBER(SUBSTR(VALPARM,1,6))
      INTO v_Mes_Cierre
      FROM BAS_MEN.PARAMETROS_PROCESO
     WHERE CODCSB  = '0081'
       AND CODPARM = '0001'
       AND SECPARM = '01';

    v_Version := 0;

    select max(version)
    into v_Version
    from BAS_MEN.BS_BASILEA_FUSION_COREP_VER;

    if v_Version is NULL then
      v_Version := 0;

    else

        select /*+ parallel(a 8) */  OR_IDMES
          into v_Mes_ver
          from BAS_MEN.BS_BASILEA_FUSION_COREP_VER  a
         where version = v_Version
           and rownum = 1;

        if v_Mes_ver < v_Mes_Cierre then
              FOR I IN ( SELECT PARTITION_NAME
                           FROM ALL_TAB_PARTITIONS
                          WHERE TABLE_NAME = v_Tabla_Particionada
                            AND SUBSTR(PARTITION_NAME,3,6) <> '000000'
                            AND TABLE_OWNER = v_Propietario
                        )
              LOOP

                   V_SQL:= 'ALTER TABLE BAS_MEN.BS_BASILEA_FUSION_COREP_VER DROP PARTITION ' || I.PARTITION_NAME;
                   EXECUTE IMMEDIATE V_SQL;

              END LOOP;

              v_Version := 0;
              COMMIT;
        end if;

    end if;

    -- Determinación del nombre de la nueva particion a generar y cargar                      (Nombre_Nueva_Particion)
    v_Version := v_Version  + 1;
    v_Nombre_Nueva_Particion := 'P_'|| trim(to_char(v_Version,'000009'));
    v_Rango_Nueva_Particion := v_Version + 1;

    -- Obtención del table space de la tabla particionada                                     (Table_Space)
    SELECT DISTINCT DEF_TABLESPACE_NAME
      INTO v_Table_Space
      FROM SYS.ALL_PART_TABLES
     WHERE OWNER      = v_Propietario
       AND TABLE_NAME = v_Tabla_Particionada;

    -- ********************************************************************************* --
    -- Realización de  la rotación de las particiones
    -- ********************************************************************************* --

   VN_NUMERR:= 3;

    -- Verificar si existe la particion
    SELECT COUNT(*)
      INTO v_Exis_Particion
      FROM ALL_TAB_PARTITIONS
      WHERE TABLE_OWNER   = v_Propietario
       AND TABLE_NAME     = v_Tabla_Particionada
       AND PARTITION_NAME = v_Nombre_Nueva_Particion;

    IF v_Exis_Particion > 0 THEN
      VN_NUMERR:= 4;
      -- Borrado de la partición si existe.
      EXECUTE IMMEDIATE ('ALTER TABLE ' || v_Propietario || '.' || v_Tabla_Particionada || ' TRUNCATE PARTITION ' || v_Nombre_Nueva_Particion);

    ELSE
      VN_NUMERR:= 5;
      -- Creación de la Partición.

      v_Sentencia_Dinamica := 'ALTER TABLE ' || v_Propietario || '.' || v_Tabla_Particionada ||
       ' ADD
        PARTITION ' || v_Nombre_Nueva_Particion || ' VALUES LESS THAN ('|| v_Rango_Nueva_Particion || ')
          NOLOGGING
          NOCOMPRESS
          TABLESPACE ' || v_Table_Space || '
          PCTFREE    0
          INITRANS   1
          MAXTRANS   255
          STORAGE    (
                      INITIAL          160K
                      MINEXTENTS       1
                      MAXEXTENTS       2147483645
                      BUFFER_POOL      DEFAULT
                     )';

      EXECUTE IMMEDIATE (v_Sentencia_Dinamica);

    END IF;

    VN_NUMERR:= 6;

    -- Inserción de los datos de la partición
    INSERT /*+ PARALLEL (I 8) */ INTO BAS_MEN.BS_BASILEA_FUSION_COREP_VER I
      SELECT /*+ FULL(A) PARALLEL (A 8) */    v_Version as VERSION,sysdate as FECHA,a.*
    FROM BAS_MEN.BASILEA_FUSIONADA_COREP a;

    COMMIT;

    VN_NUMERR:= 7;

    -- Análisis de la tabla particionada
    --
    --bdd.ORA_ADMIN.ANALIZAR_SEGMENTO(v_Propietario, v_Tabla_Particionada, v_Nombre_Nueva_Particion, 1 ,'AUTO','SI','VERBOSE','PARTITION');
    dbms_stats.gather_table_stats(ownname=>v_Propietario,tabname=>v_Tabla_Particionada,partname=>v_Nombre_Nueva_Particion,estimate_percent=>dbms_stats.auto_sample_size,cascade=>true,method_opt=>'for all columns size 1', degree =>2);

    VN_NUMERR:= 8;


    UPDATE BAS_MEN.CONTROL_PROCES
      SET ESTAT       = 'FINALIZADO'
        , DATA_FIN    = SYSDATE
        , FINALITZAT  = 'OK'
        , REG_INS_OK  = vv_count
    WHERE PROCES      = VV_PROGRAMA||' - BS_BASILEA_FUSION_COREP_VER'
      AND ESTAT       = 'INICIADO';


    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
      VV_MENSAJE_ERR := SUBSTR(TO_CHAR(SQLCODE)||' '||SQLERRM||' NUMERR '||VN_NUMERR,1,255);
      VV_ERROR_PROG  := SUBSTR(VV_PROGRAMA||' -  '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE() ,1,4000);



      UPDATE BAS_MEN.CONTROL_PROCES
         SET ESTAT        = 'FINALIZADO'
           , DATA_FIN     = SYSDATE
           , FINALITZAT   = 'KO'
           , REG_INS_OK   = vv_count
           , ERROR_ORAC   = VV_MENSAJE_ERR
           , ERROR_PROG   = VV_ERROR_PROG
       WHERE PROCES       = VV_PROGRAMA||' - BS_BASILEA_FUSION_COREP_VER'
         AND ESTAT        = 'INICIADO';

    COMMIT;
    RAISE;

END;

/

   

--=====================================================================================================
--=====================================================================================================
--=====================================================================================================
--
create or replace PROCEDURE BAS_MEN.BASI_EJECUCION_TOT_BAS_MEN IS
    --
    vProces         CONSTANT VARCHAR2(40)   := 'BASI_EJECUCION_TOT_BAS_MEN';
    vNumErr         NUMBER(4)               DEFAULT 1;
    vCodi           NUMBER(10)              DEFAULT 0;
    vDescripcio     VARCHAR2(255)           DEFAULT '';
    v_OWNER_PL      VARCHAR2(32)            DEFAULT '';
    --
BEGIN

/***********************************/
/***********************************/

--Comprobar DBLINK de la tabla DCR_TRABILIDAD.BS_V3_UA_ACTIVO_INMOBILIARIO y DCR_TRABILIDAD.BS_V1_UNIDAD_ECONOMICA

/***********************************/
/***********************************/

    vNumErr := 1;
    --bka10002
    BAS_MEN.BASI_INSERT_BASILEA;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 10 );

    --bka10003
    BAS_MEN.BASI_INSERT_BASILEA_INI;
    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA_INI', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 10 );

    vNumErr := 4;
    --bka00002
    BAS_MEN.BASI_FILTRO;
    COMMIT;

    vNumErr := 5;
    --bka00120
    BAS_MEN.BASI_ENRIQUECIMIENTO_OFEX;
    COMMIT;

    vNumErr := 6;
    --bka00006
    BAS_MEN.BASI_SEGMENTACIO_1;
    COMMIT;

    vNumErr := 7;
    --bka00130
    BAS_MEN.BASI_CLIENTES_COMUNES_OFEX;
    COMMIT;

    vNumErr := 8;
    --bka00131
    BAS_MEN.BASI_MARCA_REFI;
    COMMIT;

    vNumErr := 9;
    --bka00132
    BAS_MEN.BASI_MARCA_CURA;
    COMMIT;

    vNumErr := 10;
    --bka40001
    BAS_MEN.BASI_CONCILIACION_F1;
    COMMIT;

    vNumErr := 11;
    --bkd10006
    BAS_MEN.BASI_SUSCEPTIBILIDAD;
    COMMIT;

    vNumErr := 12;
    --bkd10007
    BAS_MEN.BASI_SUSCEPTIBILIDAD_CA;
    COMMIT;

    vNumErr := 13;
    --bkd10090
    BAS_MEN.BASI_SUSCEPTIBILIDAD_EEFF;
    COMMIT;

    vNumErr := 14;
    --bkd10091
    BAS_MEN.BASI_SUSCEPTIBILIDAD_SOB;
    COMMIT;

    vNumErr := 15;
    --bkd10070
    BAS_MEN.BASI_SUSCEPTIBILIDAD_CRED;
    COMMIT;

    vNumErr := 16;
    --bkd10094
    BAS_MEN.BASI_SUSCEPTIBILIDAD_PRESTAMOS;
    COMMIT;

    vNumErr := 17;
    --bkd10093
    BAS_MEN.BASI_SUSCEPTIBILIDAD_TARG;
    COMMIT;

    vNumErr := 18;
    --bkd10092
    BAS_MEN.BASI_SUSCEPTIBILIDAD_OFEX;
    COMMIT;

    vNumErr := 19;
    --bkd10020
    BAS_MEN.BASI_SALDOS_DESCUADRES_IND;
    COMMIT;

    vNumErr := 20;
    --bka40090
    BAS_MEN.BASI_CONSOLIDACIO;
    COMMIT;
    
    vNumErr := 21;
    --bkd40031
    BAS_MEN.BASI_SALDOS_DESCUADRES_CON;
    COMMIT;

    vNumErr := 22;
    --bkd10095
    BAS_MEN.BASI_SUCEPT_UPDATE_BASILEA;
    COMMIT;

    vNumErr := 23;
    --bkd40089
    BAS_MEN.BASI_TITULIZACIONES;
    COMMIT;

    vNumErr := 24;
    --bkd40084
    BAS_MEN.BASI_ACCIONES_BS;
    COMMIT;

    vNumErr := 25;
    --bkd10012
    BAS_MEN.BASI_CALCUL_EXPOSICIO;
    COMMIT;

    dbms_stats.gather_table_stats('BAS_MEN','BASILEA_EAD', cascade=>true, method_opt=>'for all columns size 1', degree => 4, estimate_percent=> 5 );

    vNumErr := 26;
    --bkd40080
    BAS_MEN.BASI_CONCILIACION_F2;
    COMMIT;

    vNumErr := 327;
    --bkd40151
    BAS_MEN.FNC_INSERT_MAESTRO_DTA;
    COMMIT;

    vNumErr := 28;
    --bka40101
    BAS_MEN.BASI_REPARTO_DOTACION_FILIALES;
    COMMIT;

    vNumErr := 29;
    --bka40115
    BAS_MEN.BASI_RATINGS_EXTERNOS_Y_PAISES;
    COMMIT;

    vNumErr := 30;
    --bka20086
        BAS_MEN.UPDATE_PROCESO('UPDATE_PROCESO_PRE_MET');
        COMMIT;
        BAS_MEN.FNC_AJUSTE_PROV_PHASEIN();
        COMMIT;

        BAS_MEN.FNC_AJUSTE_INTANGIBLES();
        COMMIT;

    vNumErr := 31;
    --bka40100
    BAS_MEN.BASI_METODO_ESTANDARD;
    COMMIT;

    vNumErr := 33;
    --bka40096
    BAS_MEN.BASI_CALCULO_PD;
    COMMIT;

    vNumErr := 32;
    --bkd40082
    BAS_MEN.BASI_METODO_AIRB_LGD;
    COMMIT;

    vNumErr := 34;
    --bka40102
    BAS_MEN.BASI_METODO_AIRB;
    COMMIT;

    vNumErr := 35;
    --bka20086
        BAS_MEN.UPDATE_PROCESO('UPDATE_PROCESO_PRE_COR');
        COMMIT;

        BAS_MEN.FNC_DERECHOS_TANTEO();
        COMMIT;

    vNumErr := 37;
    --bka40112
    BAS_MEN.BASI_CALCULO_AVALISTAS;
    COMMIT;
    
    vNumErr := 36;
    --bka40110
    BAS_MEN.BASI_REASIGNACION_METODO;
    COMMIT;
    
    vNumErr := 39;
    --bkd40083
    BAS_MEN.BASI_COEFICIENTE_REDUCTOR;
    COMMIT;

    vNumErr := 40;
    --bkd40088
    BAS_MEN.BASI_CALCULO_COREPS;
    COMMIT;

    vNumErr := 41;
    --bkd40155
     BAS_MEN.UPDATE_PROCESO('UPDATE_PROCESO_FINAL');
    COMMIT;

    vNumErr := 41;
    --bkd40075
    BAS_MEN.BASI_BASILEA_FUSIONADA_COREP;
    COMMIT;

    vNumErr := 42;
    --bka10040
    BAS_MEN.FNC_FUSION_COREP_VER();
    COMMIT;


EXCEPTION
    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;
/

select * from sys.user_errors WHERE NAME = 'BASI_EJECUCION_TOT_BAS_MEN';


DECLARE
    --
    vProces         CONSTANT VARCHAR2(40)   := 'BASI_EJECUCION_TOT_BAS_MEN';
    vNumErr         NUMBER(2)               DEFAULT 1;
    vCodi           NUMBER(10)              DEFAULT 0;
    vDescripcio     VARCHAR2(255)           DEFAULT '';
    v_OWNER_PL      VARCHAR2(32)            DEFAULT '';
    --
BEGIN
    --
    vNumErr := 1;
    --
    --BAS_MEN.BASI_EJECUCION_TOT_BAS_MEN();
    --
EXCEPTION
    WHEN OTHERS THEN
        --
        ROLLBACK;
        --
        vCodi          := SQLCODE;
        vDescripcio    := SQLERRM;
        --
        -- Inserción del error en la tabla de control de errores con los datos de este.
        --
        INSERT INTO ERRORS (PROCES, NUMERR, CODI,DESCRIPCIO, DATA)
        VALUES (vProces, vNumErr, vCodi, vDescripcio, SYSDATE);
        COMMIT;
        --
        -- Devolver error al sistema.
        --
        RAISE;
        --
END;

/


exit;

